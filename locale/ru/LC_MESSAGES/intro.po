# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2012.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-03-12 13:35\n"
"PO-Revision-Date: 2012-03-12 13:35\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# 529f50f4d2244f219e7b237f9a645a95
#: ../../intro/index.txt:2
msgid "Getting started"
msgstr ""

# 3d0307799c1b435982d1e34ae79ef521
#: ../../intro/index.txt:4
msgid ""
"New to Django? Or to Web development in general? Well, you came to the right "
"place: read this material to quickly get up and running."
msgstr ""

# 9201363fe69447e983019a93de7f9cd4
#: ../../intro/index.txt:20
msgid ""
"If you're new to Python_, you might want to start by getting an idea of what "
"the language is like. Django is 100% Python, so if you've got minimal "
"comfort with Python you'll probably get a lot more out of Django."
msgstr ""

# 2102da3964ed44fc8dec001c26de5488
#: ../../intro/index.txt:24
msgid ""
"If you're new to programming entirely, you might want to start with this "
"`list of Python resources for non-programmers`_"
msgstr ""

# 1135fbd7474c43c8a34960c3b95aaae2
#: ../../intro/index.txt:27
msgid ""
"If you already know a few other languages and want to get up to speed with "
"Python quickly, we recommend `Dive Into Python`_ (also available in a `dead-"
"tree version`_). If that's not quite your style, there are quite a few other "
"`books about Python`_."
msgstr ""

# 11266208dcfe47d68ff2259f086b525b
#: ../../intro/install.txt:2
msgid "Quick install guide"
msgstr ""

# 877f55970fc941f6bd38d0952953e075
#: ../../intro/install.txt:4
msgid ""
"Before you can use Django, you'll need to get it installed. We have a :doc:"
"`complete installation guide </topics/install>` that covers all the "
"possibilities; this guide will guide you to a simple, minimal installation "
"that'll work while you walk through the introduction."
msgstr ""

# 7fc6c692be274f24ae3f255d358df057
#: ../../intro/install.txt:10
msgid "Install Python"
msgstr ""

# f13af8e38042404bade79057e1c27350
#: ../../intro/install.txt:12
msgid ""
"Being a Python Web framework, Django requires Python. It works with any "
"Python version from 2.5 to 2.7 (due to backwards incompatibilities in Python "
"3.0, Django does not currently work with Python 3.0; see :doc:`the Django "
"FAQ </faq/install>` for more information on supported Python versions and "
"the 3.0 transition), these versions of Python include a lightweight database "
"called SQLite_ so you won't need to set up a database just yet."
msgstr ""

# d1dfa0b6976a4c6ea19110234389c42d
#: ../../intro/install.txt:21
msgid ""
"Get Python at http://www.python.org. If you're running Linux or Mac OS X, "
"you probably already have it installed."
msgstr ""

# 0a464687984147379b5bbafdf9bbc623
#: ../../intro/install.txt:26
msgid ""
"If you use Jython_ (a Python implementation for the Java platform), you'll "
"need to follow a few additional steps. See :doc:`/howto/jython` for details."
msgstr ""

# 7f4126989e4044d8a617264396f3f77b
#: ../../intro/install.txt:31
msgid ""
"You can verify that Python is installed by typing ``python`` from your "
"shell; you should see something like::"
msgstr ""

# 9f3b509a5bec47d9997e210014017921
#: ../../intro/install.txt:40
msgid "Set up a database"
msgstr ""

# d7c986b006db4056bad67c7fd8f90a12
#: ../../intro/install.txt:42
msgid "If you installed Python 2.5 or later, you can skip this step for now."
msgstr ""

# a9d60c0d970d4cfdb243b082c24404e1
#: ../../intro/install.txt:44
msgid ""
"If not, or if you'd like to work with a \"large\" database engine like "
"PostgreSQL, MySQL, or Oracle, consult the :ref:`database installation "
"information <database-installation>`."
msgstr ""

# f1eb0cc52e8d41158dde33b5af3db9b1
#: ../../intro/install.txt:49
msgid "Remove any old versions of Django"
msgstr ""

# 75b948befcbc4a3592258a9488b25c11
#: ../../intro/install.txt:51
msgid ""
"If you are upgrading your installation of Django from a previous version, "
"you will need to :ref:`uninstall the old Django version before installing "
"the new version <removing-old-versions-of-django>`."
msgstr ""

# 72566c9960d04ff0be330dffa8da16d6
#: ../../intro/install.txt:56
msgid "Install Django"
msgstr ""

# 589dcfc82c1341a1998449485a5c8e10
#: ../../intro/install.txt:58
msgid "You've got three easy options to install Django:"
msgstr ""

# 1af5d1acb68f438d86087e0795b254c3
#: ../../intro/install.txt:60
msgid ""
"Install a version of Django :doc:`provided by your operating system "
"distribution </misc/distributions>`. This is the quickest option for those "
"who have operating systems that distribute Django."
msgstr ""

# e43271a510c64639bad18b88e18a924d
#: ../../intro/install.txt:64
msgid ""
":ref:`Install an official release <installing-official-release>`. This is "
"the best approach for users who want a stable version number and aren't "
"concerned about running a slightly older version of Django."
msgstr ""

# 22ab469cf7504ac0afaea056071f0d93
#: ../../intro/install.txt:68
msgid ""
":ref:`Install the latest development version <installing-development-"
"version>`. This is best for users who want the latest-and-greatest features "
"and aren't afraid of running brand-new code."
msgstr ""

# 89686560d50f483f9dbaac9e3a82a291
#: ../../intro/install.txt:75
msgid ""
"If you do either of the first two steps, keep an eye out for parts of the "
"documentation marked **new in development version**. That phrase flags "
"features that are only available in development versions of Django, and they "
"likely won't work with an official release."
msgstr ""

# 0a004af180774129abf343e0937c7491
#: ../../intro/install.txt:82
msgid "Verifying"
msgstr ""

# 5f421c0fdb6e4a8781a094b576f4ad10
#: ../../intro/install.txt:84
msgid ""
"To verify that Django can be seen by Python, type ``python`` from your "
"shell. Then at the Python prompt, try to import Django::"
msgstr ""

# 8dbaa1e3128e425791323ab2240d1059
#: ../../intro/install.txt:93
msgid "That's it!"
msgstr ""

# 40c2177b77b54f02ada0136d01246b6e
#: ../../intro/install.txt:95
msgid ""
"That's it -- you can now :doc:`move onto the tutorial </intro/tutorial01>`."
msgstr ""

# 761f241090584a74a1878a241ed6ed6e
#: ../../intro/overview.txt:3
msgid "Django at a glance"
msgstr ""

# 0a2a654d200f497d954e5d754bc0ff7e
#: ../../intro/overview.txt:5
msgid ""
"Because Django was developed in a fast-paced newsroom environment, it was "
"designed to make common Web-development tasks fast and easy. Here's an "
"informal overview of how to write a database-driven Web app with Django."
msgstr ""

# 518d29da393743058fe74a9ee5de21ff
#: ../../intro/overview.txt:9
msgid ""
"The goal of this document is to give you enough technical specifics to "
"understand how Django works, but this isn't intended to be a tutorial or "
"reference -- but we've got both! When you're ready to start a project, you "
"can :doc:`start with the tutorial </intro/tutorial01>` or :doc:`dive right "
"into more detailed documentation </topics/index>`."
msgstr ""

# 14ed81ae238e4c2f876bbd30a68980fa
#: ../../intro/overview.txt:16
msgid "Design your model"
msgstr ""

# f4868a3eb021463e8d385e4b7a09653b
#: ../../intro/overview.txt:18
msgid ""
"Although you can use Django without a database, it comes with an object-"
"relational mapper in which you describe your database layout in Python code."
msgstr ""

# f4570fb84e3345f9b79e52c204421a48
#: ../../intro/overview.txt:22
msgid ""
"The :doc:`data-model syntax </topics/db/models>` offers many rich ways of "
"representing your models -- so far, it's been solving two years' worth of "
"database-schema problems. Here's a quick example, which might be saved in "
"the file ``mysite/news/models.py``::"
msgstr ""

# 545edce9c6ed4464a1bc2838ea463478
#: ../../intro/overview.txt:43
msgid "Install it"
msgstr ""

# e08b2e98b6a747eabdff09ba7db95617
#: ../../intro/overview.txt:45
msgid ""
"Next, run the Django command-line utility to create the database tables "
"automatically:"
msgstr ""

# 6c08f6985b394db68c8e433b2d86f45f
#: ../../intro/overview.txt:52
msgid ""
"The :djadmin:`syncdb` command looks at all your available models and creates "
"tables in your database for whichever tables don't already exist."
msgstr ""

# dbf9a0b4354b49a6beee84f90a5b39d9
#: ../../intro/overview.txt:56
msgid "Enjoy the free API"
msgstr ""

# 5a7c13e241ba4f589eecc1c3e883b566
#: ../../intro/overview.txt:58
msgid ""
"With that, you've got a free, and rich, :doc:`Python API </topics/db/"
"queries>` to access your data. The API is created on the fly, no code "
"generation necessary::"
msgstr ""

# a4cc81ef3ef24219adbf1c4fed78896f
#: ../../intro/overview.txt:131
msgid ""
"A dynamic admin interface: it's not just scaffolding -- it's the whole house"
msgstr ""

# f06c790c5bac439aa4123a23639a61ea
#: ../../intro/overview.txt:133
msgid ""
"Once your models are defined, Django can automatically create a "
"professional, production ready :doc:`administrative interface </ref/contrib/"
"admin/index>` -- a Web site that lets authenticated users add, change and "
"delete objects. It's as easy as registering your model in the admin site::"
msgstr ""

# 7b6c5fc5f7ef45dda8e256f93fdc2106
#: ../../intro/overview.txt:156
msgid ""
"The philosophy here is that your site is edited by a staff, or a client, or "
"maybe just you -- and you don't want to have to deal with creating backend "
"interfaces just to manage content."
msgstr ""

# 409554a01f95414b9216aae35cd2e400
#: ../../intro/overview.txt:160
msgid ""
"One typical workflow in creating Django apps is to create models and get the "
"admin sites up and running as fast as possible, so your staff (or clients) "
"can start populating data. Then, develop the way data is presented to the "
"public."
msgstr ""

# 2797d52eaebb483a8f9b235d9f3389f7
# 4536091120f6425aa024cbb419c07687
#: ../../intro/overview.txt:165 ../../intro/tutorial03.txt:45
msgid "Design your URLs"
msgstr ""

# 058b8ed2a5ba4eb4899334cc83740c0a
#: ../../intro/overview.txt:167
msgid ""
"A clean, elegant URL scheme is an important detail in a high-quality Web "
"application. Django encourages beautiful URL design and doesn't put any "
"cruft in URLs, like ``.php`` or ``.asp``."
msgstr ""

# 36a550d81859451eb1253b4bffae6e49
#: ../../intro/overview.txt:171
msgid ""
"To design URLs for an app, you create a Python module called a :doc:`URLconf "
"</topics/http/urls>`. A table of contents for your app, it contains a simple "
"mapping between URL patterns and Python callback functions. URLconfs also "
"serve to decouple URLs from Python code."
msgstr ""

# 168c0a3cef0d49d3a3272f7a7f80b3f0
#: ../../intro/overview.txt:176
msgid ""
"Here's what a URLconf might look like for the ``Reporter``/``Article`` "
"example above::"
msgstr ""

# 15e5c52b009043bc8536474be5e2230f
#: ../../intro/overview.txt:187
msgid ""
"The code above maps URLs, as simple regular expressions, to the location of "
"Python callback functions (\"views\"). The regular expressions use "
"parenthesis to \"capture\" values from the URLs. When a user requests a "
"page, Django runs through each pattern, in order, and stops at the first one "
"that matches the requested URL. (If none of them matches, Django calls a "
"special-case 404 view.) This is blazingly fast, because the regular "
"expressions are compiled at load time."
msgstr ""

# 431a713facc6448b93d3e30387aeac5a
#: ../../intro/overview.txt:195
msgid ""
"Once one of the regexes matches, Django imports and calls the given view, "
"which is a simple Python function. Each view gets passed a request object -- "
"which contains request metadata -- and the values captured in the regex."
msgstr ""

# 19815951a8554ba08dbe46027ed9c36f
#: ../../intro/overview.txt:199
msgid ""
"For example, if a user requested the URL \"/articles/2005/05/39323/\", "
"Django would call the function ``news.views.article_detail(request, '2005', "
"'05', '39323')``."
msgstr ""

# 24943eafa27542f7a9143fb1f22abf4a
#: ../../intro/overview.txt:204
msgid "Write your views"
msgstr ""

# a8a9efa73fc84f41825acef553b9ed36
#: ../../intro/overview.txt:206
msgid ""
"Each view is responsible for doing one of two things: Returning an :class:"
"`~django.http.HttpResponse` object containing the content for the requested "
"page, or raising an exception such as :class:`~django.http.Http404`. The "
"rest is up to you."
msgstr ""

# 6a9e2fc9cd1240a699ce49f8924755fb
#: ../../intro/overview.txt:211
msgid ""
"Generally, a view retrieves data according to the parameters, loads a "
"template and renders the template with the retrieved data. Here's an example "
"view for ``year_archive`` from above::"
msgstr ""

# 12d24afe77094d01b537d9f6a478b64a
#: ../../intro/overview.txt:219
msgid ""
"This example uses Django's :doc:`template system </topics/templates>`, which "
"has several powerful features but strives to stay simple enough for non-"
"programmers to use."
msgstr ""

# fb9e8141c71945f9a8dec3def5521cbb
#: ../../intro/overview.txt:224
msgid "Design your templates"
msgstr ""

# f4bb658127fe423292b656b4b26845c4
#: ../../intro/overview.txt:226
msgid "The code above loads the ``news/year_archive.html`` template."
msgstr ""

# b29f9a82c5fa46358a097f19bc517def
#: ../../intro/overview.txt:228
msgid ""
"Django has a template search path, which allows you to minimize redundancy "
"among templates. In your Django settings, you specify a list of directories "
"to check for templates. If a template doesn't exist in the first directory, "
"it checks the second, and so on."
msgstr ""

# 98d9e8bc89c64650b7272faf813a23c4
#: ../../intro/overview.txt:233
msgid ""
"Let's say the ``news/year_archive.html`` template was found. Here's what "
"that might look like:"
msgstr ""

# aab2640d109a466ba37b126f206ae38b
#: ../../intro/overview.txt:252
msgid ""
"Variables are surrounded by double-curly braces. ``{{ article.headline }}`` "
"means \"Output the value of the article's headline attribute.\" But dots "
"aren't used only for attribute lookup: They also can do dictionary-key "
"lookup, index lookup and function calls."
msgstr ""

# 3c16c51619a849a5b6b62d40c26dcdc9
#: ../../intro/overview.txt:257
msgid ""
"Note ``{{ article.pub_date|date:\"F j, Y\" }}`` uses a Unix-style \"pipe"
"\" (the \"|\" character). This is called a template filter, and it's a way "
"to filter the value of a variable. In this case, the date filter formats a "
"Python datetime object in the given format (as found in PHP's date function; "
"yes, there is one good idea in PHP)."
msgstr ""

# 9bd99ccce8f4412281f6c9a39fb4b7f8
#: ../../intro/overview.txt:263
msgid ""
"You can chain together as many filters as you'd like. You can write custom "
"filters. You can write custom template tags, which run custom Python code "
"behind the scenes."
msgstr ""

# 529db5d5f86b4171b544f291afe7127b
#: ../../intro/overview.txt:267
msgid ""
"Finally, Django uses the concept of \"template inheritance\": That's what "
"the ``{% extends \"base.html\" %}`` does. It means \"First load the template "
"called 'base', which has defined a bunch of blocks, and fill the blocks with "
"the following blocks.\" In short, that lets you dramatically cut down on "
"redundancy in templates: each template has to define only what's unique to "
"that template."
msgstr ""

# 0b2db45726874dddbc2132c528987df9
#: ../../intro/overview.txt:273
msgid "Here's what the \"base.html\" template might look like:"
msgstr ""

# 248f26f9ec224e67b7043f649a103ef2
#: ../../intro/overview.txt:287
msgid ""
"Simplistically, it defines the look-and-feel of the site (with the site's "
"logo), and provides \"holes\" for child templates to fill. This makes a site "
"redesign as easy as changing a single file -- the base template."
msgstr ""

# 5c1faa9224554140914bf8c988c0a2c3
#: ../../intro/overview.txt:291
msgid ""
"It also lets you create multiple versions of a site, with different base "
"templates, while reusing child templates. Django's creators have used this "
"technique to create strikingly different cell-phone editions of sites -- "
"simply by creating a new base template."
msgstr ""

# 2b2b5866443f45b4b0b114fa52827dcd
#: ../../intro/overview.txt:296
msgid ""
"Note that you don't have to use Django's template system if you prefer "
"another system. While Django's template system is particularly well-"
"integrated with Django's model layer, nothing forces you to use it. For that "
"matter, you don't have to use Django's database API, either. You can use "
"another database abstraction layer, you can read XML files, you can read "
"files off disk, or anything you want. Each piece of Django -- models, views, "
"templates -- is decoupled from the next."
msgstr ""

# 03ca0fd5bf0a4756be3dda9996011360
#: ../../intro/overview.txt:305
msgid "This is just the surface"
msgstr ""

# bb080703c40943c0a15ca7afb46ff3c0
#: ../../intro/overview.txt:307
msgid ""
"This has been only a quick overview of Django's functionality. Some more "
"useful features:"
msgstr ""

# 1a30aa36e857405badc1e09b98a142c4
#: ../../intro/overview.txt:310
msgid ""
"A :doc:`caching framework </topics/cache>` that integrates with memcached or "
"other backends."
msgstr ""

# 888a8cda44c94367a2db07bb35065448
#: ../../intro/overview.txt:313
msgid ""
"A :doc:`syndication framework </ref/contrib/syndication>` that makes "
"creating RSS and Atom feeds as easy as writing a small Python class."
msgstr ""

# ef715123216745f79068ead04ac13bef
#: ../../intro/overview.txt:316
msgid ""
"More sexy automatically-generated admin features -- this overview barely "
"scratched the surface."
msgstr ""

# 9ac650d89339434f950733303dc152bd
#: ../../intro/overview.txt:319
msgid ""
"The next obvious steps are for you to `download Django`_, read :doc:`the "
"tutorial </intro/tutorial01>` and join `the community`_. Thanks for your "
"interest!"
msgstr ""

# fb99d843e14d49909d1461e609997321
#: ../../intro/tutorial01.txt:3
msgid "Writing your first Django app, part 1"
msgstr ""

# 62add8e453cf4290b596f74142a9590c
#: ../../intro/tutorial01.txt:5
msgid "Let's learn by example."
msgstr ""

# f437fe0a84384168a795a2e9e1f50963
#: ../../intro/tutorial01.txt:7
msgid ""
"Throughout this tutorial, we'll walk you through the creation of a basic "
"poll application."
msgstr ""

# e48bdf793de940679b5017f3942a734a
#: ../../intro/tutorial01.txt:10
msgid "It'll consist of two parts:"
msgstr ""

# 4ff3e06e090f4c19b3f43ab763488350
#: ../../intro/tutorial01.txt:12
msgid "A public site that lets people view polls and vote in them."
msgstr ""

# c92bccb7c4014c12a5f5a676532778a5
#: ../../intro/tutorial01.txt:13
msgid "An admin site that lets you add, change and delete polls."
msgstr ""

# a4b21e59692342f8aef90fdf9155864c
#: ../../intro/tutorial01.txt:15
msgid ""
"We'll assume you have :doc:`Django installed </intro/install>` already. You "
"can tell Django is installed by running the Python interactive interpreter "
"and typing ``import django``. If that command runs successfully, with no "
"errors, Django is installed."
msgstr ""

# fe2ee0233e9a4ffe8182ede79f5cf224
#: ../../intro/tutorial01.txt:22
msgid ""
"If you're having trouble going through this tutorial, please post a message "
"to `django-users`__ or drop by `#django on irc.freenode.net`__ to chat with "
"other Django users who might be able to help."
msgstr ""

# 75ff5a609ad44ef89e9db931cb8deb7f
#: ../../intro/tutorial01.txt:30
msgid "Creating a project"
msgstr ""

# 996116f1228345dd9201c57df973c419
#: ../../intro/tutorial01.txt:32
msgid ""
"If this is your first time using Django, you'll have to take care of some "
"initial setup. Namely, you'll need to auto-generate some code that "
"establishes a Django :term:`project` -- a collection of settings for an "
"instance of Django, including database configuration, Django-specific "
"options and application-specific settings."
msgstr ""

# ad4f596cc1c8421f85af0ccf7715d99c
#: ../../intro/tutorial01.txt:38
msgid ""
"From the command line, ``cd`` into a directory where you'd like to store "
"your code, then run the following command:"
msgstr ""

# 0f6d29e45ac945b6a139aa53621e1090
#: ../../intro/tutorial01.txt:45
msgid "This will create a ``mysite`` directory in your current directory."
msgstr ""

# 7bfea97aeb7b41f4a1e2e1f313877abc
#: ../../intro/tutorial01.txt:49
msgid ""
"If you installed Django using a Linux distribution's package manager (e.g. "
"apt-get or yum) ``django-admin.py`` may have been renamed to ``django-"
"admin``. You may continue through this documentation by omitting ``.py`` "
"from each command."
msgstr ""

# 196a4978f92741408f1d1eddff02ba93
#: ../../intro/tutorial01.txt:56
msgid ""
"If you're using Mac OS X, you may see the message \"permission denied\" when "
"you try to run ``django-admin.py startproject``. This is because, on Unix-"
"based systems like OS X, a file must be marked as \"executable\" before it "
"can be run as a program. To do this, open Terminal.app and navigate (using "
"the ``cd`` command) to the directory where :doc:`django-admin.py </ref/"
"django-admin>` is installed, then run the command ``sudo chmod +x django-"
"admin.py``."
msgstr ""

# 52f81f3428704ce9bc0c5206467ebc02
#: ../../intro/tutorial01.txt:66
msgid ""
"You'll need to avoid naming projects after built-in Python or Django "
"components. In particular, this means you should avoid using names like "
"``django`` (which will conflict with Django itself) or ``test`` (which "
"conflicts with a built-in Python package)."
msgstr ""

# b3159d0a309e4f5c87220174fe21d07d
#: ../../intro/tutorial01.txt:71
msgid ""
":doc:`django-admin.py </ref/django-admin>` should be on your system path if "
"you installed Django via ``python setup.py``. If it's not on your path, you "
"can find it in ``site-packages/django/bin``, where ``site-packages`` is a "
"directory within your Python installation. Consider symlinking to :doc:"
"`django-admin.py </ref/django-admin>` from some place on your path, such as :"
"file:`/usr/local/bin`."
msgstr ""

# b29166db050e4217925964550df6befa
#: ../../intro/tutorial01.txt:80
msgid ""
"If your background is in PHP, you're probably used to putting code under the "
"Web server's document root (in a place such as ``/var/www``). With Django, "
"you don't do that. It's not a good idea to put any of this Python code "
"within your Web server's document root, because it risks the possibility "
"that people may be able to view your code over the Web. That's not good for "
"security."
msgstr ""

# fb881c6c52b041e6a7b3122061a09f6b
#: ../../intro/tutorial01.txt:87
msgid ""
"Put your code in some directory **outside** of the document root, such as :"
"file:`/home/mycode`."
msgstr ""

# 5fa872ed10f844899556deebb1bb68ed
#: ../../intro/tutorial01.txt:90
msgid "Let's look at what :djadmin:`startproject` created::"
msgstr ""

# 2cea2388d997408db3660557cfe43690
#: ../../intro/tutorial01.txt:102
msgid ""
"The default project layout recently changed. If you're seeing a \"flat\" "
"layout (with no inner :file:`mysite/` directory), you're probably using a "
"version of Django that doesn't match this tutorial version.  You'll want to "
"either switch to the older tutorial or the newer Django version."
msgstr ""

# 1ae087eae0294de2aea9c9a8f982823c
#: ../../intro/tutorial01.txt:107
msgid "These files are:"
msgstr ""

# 3d07cc73df8f4f96b97d539359081308
#: ../../intro/tutorial01.txt:109
msgid ""
"The outer :file:`mysite/` directory is just a container for your project. "
"Its name doesn't matter to Django; you can rename it to anything you like."
msgstr ""

# 5332ae3590f24d1e9338a343d0ccd9ac
#: ../../intro/tutorial01.txt:113
msgid ""
":file:`manage.py`: A command-line utility that lets you interact with this "
"Django project in various ways. You can read all the details about :file:"
"`manage.py` in :doc:`/ref/django-admin`."
msgstr ""

# 2cef3763f75f4a259d17aa4174af3b02
#: ../../intro/tutorial01.txt:117
msgid ""
"The inner :file:`mysite/` directory is the actual Python package for your "
"project. Its name is the Python package name you'll need to use to import "
"anything inside it (e.g. ``import mysite.settings``)."
msgstr ""

# 0fe4a30c24a5408db293d3260a5a0308
#: ../../intro/tutorial01.txt:121
msgid ""
":file:`mysite/__init__.py`: An empty file that tells Python that this "
"directory should be considered a Python package. (Read `more about "
"packages`_ in the official Python docs if you're a Python beginner.)"
msgstr ""

# 022348ff975b48e0a388d81a651fa03e
#: ../../intro/tutorial01.txt:125
msgid ""
":file:`mysite/settings.py`: Settings/configuration for this Django "
"project.  :doc:`/topics/settings` will tell you all about how settings work."
msgstr ""

# 98f2e992338e4d8398fbb3732ba889a8
#: ../../intro/tutorial01.txt:129
msgid ""
":file:`mysite/urls.py`: The URL declarations for this Django project; a "
"\"table of contents\" of your Django-powered site. You can read more about "
"URLs in :doc:`/topics/http/urls`."
msgstr ""

# e5dcfb6b041448b38143763e6713e68c
#: ../../intro/tutorial01.txt:133
msgid ""
":file:`mysite/wsgi.py`: An entry-point for WSGI-compatible webservers to "
"serve your project. See :doc:`/howto/deployment/wsgi/index` for more details."
msgstr ""

# 8c18823d52b843edabf525eccda11741
#: ../../intro/tutorial01.txt:139
msgid "The development server"
msgstr ""

# 0b9832f1e7324477a988ed99eb2260fd
#: ../../intro/tutorial01.txt:141
msgid ""
"Let's verify this worked. Change into the outer :file:`mysite` directory, if "
"you haven't already, and run the command ``python manage.py runserver``. "
"You'll see the following output on the command line::"
msgstr ""

# 14d9d39e431a4a939ed7457537128dcc
#: ../../intro/tutorial01.txt:152
msgid ""
"You've started the Django development server, a lightweight Web server "
"written purely in Python. We've included this with Django so you can develop "
"things rapidly, without having to deal with configuring a production server "
"-- such as Apache -- until you're ready for production."
msgstr ""

# 634f26ea57ec4f3ea7bd1cbb6055cc3e
#: ../../intro/tutorial01.txt:157
msgid ""
"Now's a good time to note: DON'T use this server in anything resembling a "
"production environment. It's intended only for use while developing. (We're "
"in the business of making Web frameworks, not Web servers.)"
msgstr ""

# 822f9bcf9e854003917800a79f9d7c09
#: ../../intro/tutorial01.txt:161
msgid ""
"Now that the server's running, visit http://127.0.0.1:8000/ with your Web "
"browser. You'll see a \"Welcome to Django\" page, in pleasant, light-blue "
"pastel. It worked!"
msgstr ""

# 1d2372f53282419e931ee731741d32e2
#: ../../intro/tutorial01.txt:167
msgid ""
"By default, the :djadmin:`runserver` command starts the development server "
"on the internal IP at port 8000."
msgstr ""

# ccbec72f61bf4dd69e7e6547fea8874e
#: ../../intro/tutorial01.txt:170
msgid ""
"If you want to change the server's port, pass it as a command-line argument. "
"For instance, this command starts the server on port 8080:"
msgstr ""

# 1a86b0f58d7848cda93890d142e1fd36
#: ../../intro/tutorial01.txt:178
msgid ""
"If you want to change the server's IP, pass it along with the port. So to "
"listen on all public IPs (useful if you want to show off your work on other "
"computers), use:"
msgstr ""

# f77e639a16854936a8ad60b97d193e0a
#: ../../intro/tutorial01.txt:186
msgid ""
"Full docs for the development server can be found in the :djadmin:"
"`runserver` reference."
msgstr ""

# a1c4b0bf413a4fb9983797e5be872d52
#: ../../intro/tutorial01.txt:190
msgid "Database setup"
msgstr ""

# 119b1f43d59e454f835ca806f5951333
#: ../../intro/tutorial01.txt:192
msgid ""
"Now, edit :file:`mysite/settings.py`. It's a normal Python module with "
"module-level variables representing Django settings. Change the following "
"keys in the :setting:`DATABASES` ``'default'`` item to match your database "
"connection settings."
msgstr ""

# 126bdc99e58d4049aa32b9cf3bc84b99
#: ../../intro/tutorial01.txt:197
msgid ""
":setting:`ENGINE <DATABASE-ENGINE>` -- Either ``'django.db.backends."
"postgresql_psycopg2'``, ``'django.db.backends.mysql'``, ``'django.db."
"backends.sqlite3'`` or ``'django.db.backends.oracle'``. Other backends are :"
"setting:`also available <DATABASE-ENGINE>`."
msgstr ""

# c395b972b18c4844b917cbf91bb9c55e
#: ../../intro/tutorial01.txt:203
msgid ""
":setting:`NAME` -- The name of your database. If you're using SQLite, the "
"database will be a file on your computer; in that case, :setting:`NAME` "
"should be the full absolute path, including filename, of that file. If the "
"file doesn't exist, it will automatically be created when you synchronize "
"the database for the first time (see below)."
msgstr ""

# c59f8a37f6194bb8a38f3e21a270c16a
#: ../../intro/tutorial01.txt:210
msgid ""
"When specifying the path, always use forward slashes, even on Windows (e.g. "
"``C:/homes/user/mysite/sqlite3.db``)."
msgstr ""

# 899bdfbbc5224315b07d743fcdfb5f95
#: ../../intro/tutorial01.txt:213
msgid ":setting:`USER` -- Your database username (not used for SQLite)."
msgstr ""

# da8da2c6b52f4e3680344e3c23a0633f
#: ../../intro/tutorial01.txt:215
msgid ":setting:`PASSWORD` -- Your database password (not used for SQLite)."
msgstr ""

# 1b45d3aff18a45d68f17da01ee75f418
#: ../../intro/tutorial01.txt:218
msgid ""
":setting:`HOST` -- The host your database is on. Leave this as an empty "
"string if your database server is on the same physical machine (not used for "
"SQLite)."
msgstr ""

# e1f655c6cfcd4dbd9ef86153c4c33d44
#: ../../intro/tutorial01.txt:222
msgid ""
"If you're new to databases, we recommend simply using SQLite by setting :"
"setting:`ENGINE` to ``'django.db.backends.sqlite3'`` and :setting:`NAME` to "
"the place where you'd like to store the database. SQLite is included as part "
"of Python 2.5 and later, so you won't need to install anything else to "
"support your database."
msgstr ""

# e4864bb05f104e1fa0117b8ed8adfa4f
#: ../../intro/tutorial01.txt:230
msgid ""
"If you're using PostgreSQL or MySQL, make sure you've created a database by "
"this point. Do that with \"``CREATE DATABASE database_name;``\" within your "
"database's interactive prompt."
msgstr ""

# a64cfa42c4014db0bfd9a5335c96b904
#: ../../intro/tutorial01.txt:234
msgid ""
"If you're using SQLite, you don't need to create anything beforehand - the "
"database file will be created automatically when it is needed."
msgstr ""

# 18a9ebb0b2744c10a9e98d4d85d1194c
#: ../../intro/tutorial01.txt:237
msgid ""
"While you're editing :file:`settings.py`, set :setting:`TIME_ZONE` to your "
"time zone. The default value is the Central time zone in the U.S. (Chicago)."
msgstr ""

# c6b9e71654bb442fbb876bf65417f937
#: ../../intro/tutorial01.txt:240
msgid ""
"Also, note the :setting:`INSTALLED_APPS` setting toward the bottom of the "
"file. That holds the names of all Django applications that are activated in "
"this Django instance. Apps can be used in multiple projects, and you can "
"package and distribute them for use by others in their projects."
msgstr ""

# d854be928db34a568e68898367b4c760
#: ../../intro/tutorial01.txt:245
msgid ""
"By default, :setting:`INSTALLED_APPS` contains the following apps, all of "
"which come with Django:"
msgstr ""

# 3835da057d504d08a45d35d377b3e2df
#: ../../intro/tutorial01.txt:248
msgid ":mod:`django.contrib.auth` -- An authentication system."
msgstr ""

# 53efc6ea719a4fd1ac6d2e706bcc9507
#: ../../intro/tutorial01.txt:250
msgid ":mod:`django.contrib.contenttypes` -- A framework for content types."
msgstr ""

# c5d341bef7744d5195bd9d7683021ff7
#: ../../intro/tutorial01.txt:252
msgid ":mod:`django.contrib.sessions` -- A session framework."
msgstr ""

# 4542666bec204f6bb4f11f0720d2261a
#: ../../intro/tutorial01.txt:254
msgid ""
":mod:`django.contrib.sites` -- A framework for managing multiple sites with "
"one Django installation."
msgstr ""

# f7aa8c022cab4c06bdbdb83df7f7a422
#: ../../intro/tutorial01.txt:257
msgid ":mod:`django.contrib.messages` -- A messaging framework."
msgstr ""

# f3d4c5b4d08f4469a5e592bfb1b3c515
#: ../../intro/tutorial01.txt:259
msgid ""
":mod:`django.contrib.staticfiles` -- A framework for managing static files."
msgstr ""

# 30aae287344641859f5d87e1350dc380
#: ../../intro/tutorial01.txt:262
msgid ""
"These applications are included by default as a convenience for the common "
"case."
msgstr ""

# a6f8262d19e74779b7d02cf842b2295c
#: ../../intro/tutorial01.txt:264
msgid ""
"Each of these applications makes use of at least one database table, though, "
"so we need to create the tables in the database before we can use them. To "
"do that, run the following command:"
msgstr ""

# b803500d5f4d4395b0ee5f77e8cb0cfd
#: ../../intro/tutorial01.txt:272
msgid ""
"The :djadmin:`syncdb` command looks at the :setting:`INSTALLED_APPS` setting "
"and creates any necessary database tables according to the database settings "
"in your :file:`settings.py` file. You'll see a message for each database "
"table it creates, and you'll get a prompt asking you if you'd like to create "
"a superuser account for the authentication system. Go ahead and do that."
msgstr ""

# bab3887e0f7c45059bfb35ac7b0fe454
#: ../../intro/tutorial01.txt:278
msgid ""
"If you're interested, run the command-line client for your database and type "
"``\\dt`` (PostgreSQL), ``SHOW TABLES;`` (MySQL), or ``.schema`` (SQLite) to "
"display the tables Django created."
msgstr ""

# b1319a393fed4cc9888a1982029301cc
#: ../../intro/tutorial01.txt:284
msgid ""
"Like we said above, the default applications are included for the common "
"case, but not everybody needs them. If you don't need any or all of them, "
"feel free to comment-out or delete the appropriate line(s) from :setting:"
"`INSTALLED_APPS` before running :djadmin:`syncdb`. The :djadmin:`syncdb` "
"command will only create tables for apps in :setting:`INSTALLED_APPS`."
msgstr ""

# 9c356a5b941b4d16a443493b1e00335e
#: ../../intro/tutorial01.txt:294
msgid "Creating models"
msgstr ""

# d319eec361854a19bcc6d40f4f27e449
#: ../../intro/tutorial01.txt:296
msgid ""
"Now that your environment -- a \"project\" -- is set up, you're set to start "
"doing work."
msgstr ""

# 07ed49a57205444697ba464dedcce927
#: ../../intro/tutorial01.txt:299
msgid ""
"Each application you write in Django consists of a Python package, somewhere "
"on your `Python path`_, that follows a certain convention. Django comes with "
"a utility that automatically generates the basic directory structure of an "
"app, so you can focus on writing code rather than creating directories."
msgstr ""

# 70e5d4e11c994d3197ddd5c4be37dfd8
#: ../../intro/tutorial01.txt:306
msgid ""
"What's the difference between a project and an app? An app is a Web "
"application that does something -- e.g., a Weblog system, a database of "
"public records or a simple poll app. A project is a collection of "
"configuration and apps for a particular Web site. A project can contain "
"multiple apps. An app can be in multiple projects."
msgstr ""

# be431605b914442b8b65a1487df45306
#: ../../intro/tutorial01.txt:312
msgid ""
"Your apps can live anywhere on your `Python path`_. In this tutorial, we'll "
"create our poll app right next to your :file:`manage.py` file so that it can "
"be imported as its own top-level module, rather than a submodule of "
"``mysite``."
msgstr ""

# 1831a89ec4ab4259b4398efbfd35bcd1
#: ../../intro/tutorial01.txt:316
msgid ""
"To create your app, make sure you're in the same directory as :file:`manage."
"py` and type this command:"
msgstr ""

# a6dfc52817ae4c69b30e0dabe6590745
#: ../../intro/tutorial01.txt:323
msgid "That'll create a directory :file:`polls`, which is laid out like this::"
msgstr ""

# c5ec23247f9e4d91b42b4703b232a440
#: ../../intro/tutorial01.txt:331
msgid "This directory structure will house the poll application."
msgstr ""

# 763cc36712fc49578d245a23529cde15
#: ../../intro/tutorial01.txt:333
msgid ""
"The first step in writing a database Web app in Django is to define your "
"models -- essentially, your database layout, with additional metadata."
msgstr ""

# a0096559bfec496ca74cd61dda0f7894
#: ../../intro/tutorial01.txt:338
msgid ""
"A model is the single, definitive source of data about your data. It "
"contains the essential fields and behaviors of the data you're storing. "
"Django follows the :ref:`DRY Principle <dry>`. The goal is to define your "
"data model in one place and automatically derive things from it."
msgstr ""

# 8f7f208db92d44658d9897434254924c
#: ../../intro/tutorial01.txt:343
msgid ""
"In our simple poll app, we'll create two models: polls and choices. A poll "
"has a question and a publication date. A choice has two fields: the text of "
"the choice and a vote tally. Each choice is associated with a poll."
msgstr ""

# 7c221e9cfba24e6f8938b639a8e21dbf
#: ../../intro/tutorial01.txt:347
msgid ""
"These concepts are represented by simple Python classes. Edit the :file:"
"`polls/models.py` file so it looks like this::"
msgstr ""

# 393f1bf1a34e4051876aaa856a6d51a6
#: ../../intro/tutorial01.txt:361
msgid ""
"The code is straightforward. Each model is represented by a class that "
"subclasses :class:`django.db.models.Model`. Each model has a number of class "
"variables, each of which represents a database field in the model."
msgstr ""

# 6ac93467799543b0a58ceb7bbc4bd18d
#: ../../intro/tutorial01.txt:365
msgid ""
"Each field is represented by an instance of a :class:`~django.db.models."
"Field` class -- e.g., :class:`~django.db.models.CharField` for character "
"fields and :class:`~django.db.models.DateTimeField` for datetimes. This "
"tells Django what type of data each field holds."
msgstr ""

# 1f4de414e4734aedbbc3d16ea05a8f81
#: ../../intro/tutorial01.txt:370
msgid ""
"The name of each :class:`~django.db.models.Field` instance (e.g. "
"``question`` or ``pub_date`` ) is the field's name, in machine-friendly "
"format. You'll use this value in your Python code, and your database will "
"use it as the column name."
msgstr ""

# a9c8b5a56fc04727aa6fa4141c0c53a5
#: ../../intro/tutorial01.txt:374
msgid ""
"You can use an optional first positional argument to a :class:`~django.db."
"models.Field` to designate a human-readable name. That's used in a couple of "
"introspective parts of Django, and it doubles as documentation. If this "
"field isn't provided, Django will use the machine-readable name. In this "
"example, we've only defined a human-readable name for ``Poll.pub_date``. For "
"all other fields in this model, the field's machine-readable name will "
"suffice as its human-readable name."
msgstr ""

# 5185dbd025c047b08cc9a1a1caf3abbc
#: ../../intro/tutorial01.txt:382
msgid ""
"Some :class:`~django.db.models.Field` classes have required elements. :class:"
"`~django.db.models.CharField`, for example, requires that you give it a :"
"attr:`~django.db.models.Field.max_length`. That's used not only in the "
"database schema, but in validation, as we'll soon see."
msgstr ""

# 3893b238b21a460c9517571c218621aa
#: ../../intro/tutorial01.txt:387
msgid ""
"Finally, note a relationship is defined, using :class:`~django.db.models."
"ForeignKey`. That tells Django each Choice is related to a single Poll. "
"Django supports all the common database relationships: many-to-ones, many-to-"
"manys and one-to-ones."
msgstr ""

# 5a47a198b3e44e7eb0abede52084f1be
#: ../../intro/tutorial01.txt:395
msgid "Activating models"
msgstr ""

# a97dca7042cc4d6e8fae1d6dc61a210f
#: ../../intro/tutorial01.txt:397
msgid ""
"That small bit of model code gives Django a lot of information. With it, "
"Django is able to:"
msgstr ""

# 6810ccc5202e47e9905d2fb285a6e03d
#: ../../intro/tutorial01.txt:400
msgid "Create a database schema (``CREATE TABLE`` statements) for this app."
msgstr ""

# 86ccafa2e82a437692222bbddbc6f772
#: ../../intro/tutorial01.txt:401
msgid ""
"Create a Python database-access API for accessing Poll and Choice objects."
msgstr ""

# 0764b59286b8492faafff8180fe4a1cc
#: ../../intro/tutorial01.txt:403
msgid ""
"But first we need to tell our project that the ``polls`` app is installed."
msgstr ""

# 679b84adb2b449d18af33acd930e2fa2
#: ../../intro/tutorial01.txt:407
msgid ""
"Django apps are \"pluggable\": You can use an app in multiple projects, and "
"you can distribute apps, because they don't have to be tied to a given "
"Django installation."
msgstr ""

# 32afc6cd6f0b41c5818d36c02dcd69a9
#: ../../intro/tutorial01.txt:411
msgid ""
"Edit the :file:`settings.py` file again, and change the :setting:"
"`INSTALLED_APPS` setting to include the string ``'polls'``. So it'll look "
"like this::"
msgstr ""

# 2d06a2943c2741a183659917aec17429
#: ../../intro/tutorial01.txt:429
msgid ""
"Now Django knows to include the ``polls`` app. Let's run another command:"
msgstr ""

# 817c743fc4044444972a8aa3bf07a369
#: ../../intro/tutorial01.txt:436
msgid ""
"You should see something similar to the following (the ``CREATE TABLE`` SQL "
"statements for the polls app):"
msgstr ""

# 73b05106102847ee80025eb4969cc714
#: ../../intro/tutorial01.txt:455
msgid "Note the following:"
msgstr ""

# 8713da281c104411a21fa82d49865299
#: ../../intro/tutorial01.txt:457
msgid "The exact output will vary depending on the database you are using."
msgstr ""

# f6d082615f0443fba05ee431cb1a7337
#: ../../intro/tutorial01.txt:459
msgid ""
"Table names are automatically generated by combining the name of the app "
"(``polls``) and the lowercase name of the model -- ``poll`` and ``choice``. "
"(You can override this behavior.)"
msgstr ""

# cdab611f2e6146509adcf6f6f12f32e6
#: ../../intro/tutorial01.txt:463
msgid ""
"Primary keys (IDs) are added automatically. (You can override this, too.)"
msgstr ""

# ef836dd2caac43fd992edee31e607e72
#: ../../intro/tutorial01.txt:465
msgid ""
"By convention, Django appends ``\"_id\"`` to the foreign key field name. "
"(Yes, you can override this, as well.)"
msgstr ""

# 47af198245384d02ab547fabc9a9fd0c
#: ../../intro/tutorial01.txt:468
msgid ""
"The foreign key relationship is made explicit by a ``REFERENCES`` statement."
msgstr ""

# 1977bd5b48a64d268fa7db7ef2e03b62
#: ../../intro/tutorial01.txt:471
msgid ""
"It's tailored to the database you're using, so database-specific field types "
"such as ``auto_increment`` (MySQL), ``serial`` (PostgreSQL), or ``integer "
"primary key`` (SQLite) are handled for you automatically. Same goes for "
"quoting of field names -- e.g., using double quotes or single quotes. The "
"author of this tutorial runs PostgreSQL, so the example output is in "
"PostgreSQL syntax."
msgstr ""

# 138b013ba8094947ac8faea6bf104966
#: ../../intro/tutorial01.txt:478
msgid ""
"The :djadmin:`sql` command doesn't actually run the SQL in your database - "
"it just prints it to the screen so that you can see what SQL Django thinks "
"is required. If you wanted to, you could copy and paste this SQL into your "
"database prompt. However, as we will see shortly, Django provides an easier "
"way of committing the SQL to the database."
msgstr ""

# 3347bf7b7b374d9899bc77a0a3886520
#: ../../intro/tutorial01.txt:484
msgid "If you're interested, also run the following commands:"
msgstr ""

# 3710b729a0dc4beb949b08b305c2820e
#: ../../intro/tutorial01.txt:486
msgid ""
":djadmin:`python manage.py validate <validate>` -- Checks for any errors in "
"the construction of your models."
msgstr ""

# 14ca8cbe093f4060b26bdf94ffaf398c
#: ../../intro/tutorial01.txt:489
msgid ""
":djadmin:`python manage.py sqlcustom polls <sqlcustom>` -- Outputs any :ref:"
"`custom SQL statements <initial-sql>` (such as table modifications or "
"constraints) that are defined for the application."
msgstr ""

# 161e08259e704dcaa320a6bdda8a887a
#: ../../intro/tutorial01.txt:493
msgid ""
":djadmin:`python manage.py sqlclear polls <sqlclear>` -- Outputs the "
"necessary ``DROP TABLE`` statements for this app, according to which tables "
"already exist in your database (if any)."
msgstr ""

# a23feac394e845a8b485b089d2b0f295
#: ../../intro/tutorial01.txt:497
msgid ""
":djadmin:`python manage.py sqlindexes polls <sqlindexes>` -- Outputs the "
"``CREATE INDEX`` statements for this app."
msgstr ""

# 1232913fdc4640ecb1b2b6b00ddd67ac
#: ../../intro/tutorial01.txt:500
msgid ""
":djadmin:`python manage.py sqlall polls <sqlall>` -- A combination of all "
"the SQL from the :djadmin:`sql`, :djadmin:`sqlcustom`, and :djadmin:"
"`sqlindexes` commands."
msgstr ""

# e049806c3f4f4a86969624a010c88a90
#: ../../intro/tutorial01.txt:504
msgid ""
"Looking at the output of those commands can help you understand what's "
"actually happening under the hood."
msgstr ""

# d66db67fd37d4db8a9a0aa1809ed941f
#: ../../intro/tutorial01.txt:507
msgid ""
"Now, run :djadmin:`syncdb` again to create those model tables in your "
"database:"
msgstr ""

# 96d68a5f780845d0bd1e2ec1cf265ff8
#: ../../intro/tutorial01.txt:513
msgid ""
"The :djadmin:`syncdb` command runs the SQL from :djadmin:`sqlall` on your "
"database for all apps in :setting:`INSTALLED_APPS` that don't already exist "
"in your database. This creates all the tables, initial data and indexes for "
"any apps you've added to your project since the last time you ran syncdb. :"
"djadmin:`syncdb` can be called as often as you like, and it will only ever "
"create the tables that don't exist."
msgstr ""

# 6573d6f11f214ee0b581f081ba00f721
#: ../../intro/tutorial01.txt:520
msgid ""
"Read the :doc:`django-admin.py documentation </ref/django-admin>` for full "
"information on what the ``manage.py`` utility can do."
msgstr ""

# dac9a9c4f65d4586bc4c72e94593877e
#: ../../intro/tutorial01.txt:524
msgid "Playing with the API"
msgstr ""

# 7e11996a3972484ab91717c8657515a6
#: ../../intro/tutorial01.txt:526
msgid ""
"Now, let's hop into the interactive Python shell and play around with the "
"free API Django gives you. To invoke the Python shell, use this command:"
msgstr ""

# 0b1cca29435a49a3bf3d9109ff00bbd0
#: ../../intro/tutorial01.txt:533
msgid ""
"We're using this instead of simply typing \"python\", because :file:`manage."
"py` sets the ``DJANGO_SETTINGS_MODULE`` environment variable, which gives "
"Django the Python import path to your :file:`settings.py` file."
msgstr ""

# e0e3373df2f944538188e4ed89703797
#: ../../intro/tutorial01.txt:539
msgid ""
"If you'd rather not use :file:`manage.py`, no problem. Just set the "
"``DJANGO_SETTINGS_MODULE`` environment variable to ``mysite.settings`` and "
"run ``python`` from the same directory :file:`manage.py` is in (or ensure "
"that directory is on the Python path, so that ``import mysite`` works)."
msgstr ""

# 4dbb4deeb8394c2ebad2c28b9b97f1e0
#: ../../intro/tutorial01.txt:544
msgid ""
"For more information on all of this, see the :doc:`django-admin.py "
"documentation </ref/django-admin>`."
msgstr ""

# 212cd571eb154950b3cf5098282bfc47
#: ../../intro/tutorial01.txt:547
msgid ""
"Once you're in the shell, explore the :doc:`database API </topics/db/"
"queries>`::"
msgstr ""

# d546499152064e07bde2627fc1e40bd8
#: ../../intro/tutorial01.txt:587
msgid ""
"Wait a minute. ``<Poll: Poll object>`` is, utterly, an unhelpful "
"representation of this object. Let's fix that by editing the polls model (in "
"the ``polls/models.py`` file) and adding a :meth:`~django.db.models.Model."
"__unicode__` method to both ``Poll`` and ``Choice``::"
msgstr ""

# d3f12eed11e64b69ac8195c643bf66b4
#: ../../intro/tutorial01.txt:603
msgid ""
"It's important to add :meth:`~django.db.models.Model.__unicode__` methods to "
"your models, not only for your own sanity when dealing with the interactive "
"prompt, but also because objects' representations are used throughout "
"Django's automatically-generated admin."
msgstr ""

# b611d16a033e419494bca2b5286619bd
#: ../../intro/tutorial01.txt:611
msgid ""
"If you're familiar with Python, you might be in the habit of adding :meth:"
"`~django.db.models.Model.__str__` methods to your classes, not :meth:"
"`~django.db.models.Model.__unicode__` methods. We use :meth:`~django.db."
"models.Model.__unicode__` here because Django models deal with Unicode by "
"default. All data stored in your database is converted to Unicode when it's "
"returned."
msgstr ""

# b8de174291d3403c9bec94475aef3aa5
#: ../../intro/tutorial01.txt:618
msgid ""
"Django models have a default :meth:`~django.db.models.Model.__str__` method "
"that calls :meth:`~django.db.models.Model.__unicode__` and converts the "
"result to a UTF-8 bytestring. This means that ``unicode(p)`` will return a "
"Unicode string, and ``str(p)`` will return a normal string, with characters "
"encoded as UTF-8."
msgstr ""

# 15ca1ed3444246689506787418b40dd1
#: ../../intro/tutorial01.txt:624
msgid ""
"If all of this is gibberish to you, just remember to add :meth:`~django.db."
"models.Model.__unicode__` methods to your models. With any luck, things "
"should Just Work for you."
msgstr ""

# 92b9f69cd1864956912b7fa79d147269
#: ../../intro/tutorial01.txt:628
msgid ""
"Note these are normal Python methods. Let's add a custom method, just for "
"demonstration::"
msgstr ""

# 1a1091cd6bd143aab36149074a7e0643
#: ../../intro/tutorial01.txt:639
msgid ""
"Note the addition of ``import datetime`` and ``from django.utils import "
"timezone``, to reference Python's standard :mod:`datetime` module and "
"Django's time-zone-related utilities in :mod:`django.utils.timezone`, "
"respectively. If you aren't familiar with time zone handling in Python, you "
"can learn more in the :doc:`time zone support docs </topics/i18n/timezones>`."
msgstr ""

# 55bc98ccedde4a2aaa269d9d6333c8a0
#: ../../intro/tutorial01.txt:645
msgid ""
"Save these changes and start a new Python interactive shell by running "
"``python manage.py shell`` again::"
msgstr ""

# 1a6dc942f29d43f5bf8024ce664ef601
#: ../../intro/tutorial01.txt:720
msgid ""
"For more information on model relations, see :doc:`Accessing related objects "
"</ref/models/relations>`. For more on how to use double underscores to "
"perform field lookups via the API, see :ref:`Field lookups <field-lookups-"
"intro>`. For full details on the database API, see our :doc:`Database API "
"reference </topics/db/queries>`."
msgstr ""

# 815d27da6293417c8b88cde5ab9da319
#: ../../intro/tutorial01.txt:726
msgid ""
"When you're comfortable with the API, read :doc:`part 2 of this tutorial </"
"intro/tutorial02>` to get Django's automatic admin working."
msgstr ""

# ef70ddaa4cc049c68703c1cc4c66b71b
#: ../../intro/tutorial02.txt:3
msgid "Writing your first Django app, part 2"
msgstr ""

# a78ca10d3ac94ed0bce0e5383eb79955
#: ../../intro/tutorial02.txt:5
msgid ""
"This tutorial begins where :doc:`Tutorial 1 </intro/tutorial01>` left off. "
"We're continuing the Web-poll application and will focus on Django's "
"automatically-generated admin site."
msgstr ""

# 47d6e59c4bc64c5a90e75a0cea8c870e
#: ../../intro/tutorial02.txt:11
msgid ""
"Generating admin sites for your staff or clients to add, change and delete "
"content is tedious work that doesn't require much creativity. For that "
"reason, Django entirely automates creation of admin interfaces for models."
msgstr ""

# 471a343655984f4ca65057c7945b3621
#: ../../intro/tutorial02.txt:15
msgid ""
"Django was written in a newsroom environment, with a very clear separation "
"between \"content publishers\" and the \"public\" site. Site managers use "
"the system to add news stories, events, sports scores, etc., and that "
"content is displayed on the public site. Django solves the problem of "
"creating a unified interface for site administrators to edit content."
msgstr ""

# 9dd7ac27f5cf485db5bac1889c32e19b
#: ../../intro/tutorial02.txt:21
msgid ""
"The admin isn't intended to be used by site visitors. It's for site managers."
msgstr ""

# 6fd2b0c8c0954ae0aabeb527032ef1ea
#: ../../intro/tutorial02.txt:25
msgid "Activate the admin site"
msgstr ""

# e3282403f39d4849bf71e798f6994cde
#: ../../intro/tutorial02.txt:27
msgid ""
"The Django admin site is not activated by default -- it's an opt-in thing. "
"To activate the admin site for your installation, do these three things:"
msgstr ""

# 223051123b494f018270073928aace70
#: ../../intro/tutorial02.txt:30
msgid ""
"Uncomment ``\"django.contrib.admin\"`` in the :setting:`INSTALLED_APPS` "
"setting."
msgstr ""

# bbaf6a0f235a404ab4532ee6bb6b03a3
#: ../../intro/tutorial02.txt:32
msgid ""
"Run ``python manage.py syncdb``. Since you have added a new application to :"
"setting:`INSTALLED_APPS`, the database tables need to be updated."
msgstr ""

# d80c815b91af40f89be323c5839c7dba
#: ../../intro/tutorial02.txt:35
msgid ""
"Edit your ``mysite/urls.py`` file and uncomment the lines that reference the "
"admin -- there are three lines in total to uncomment. This file is a "
"URLconf; we'll dig into URLconfs in the next tutorial. For now, all you need "
"to know is that it maps URL roots to applications. In the end, you should "
"have a ``urls.py`` file that looks like this:"
msgstr ""

# 867867240c4446888d22c75e3f1a4c0f
#: ../../intro/tutorial02.txt:61
msgid "(The bold lines are the ones that needed to be uncommented.)"
msgstr ""

# 59a07f3f3a1746369554171ff4bc0e7c
#: ../../intro/tutorial02.txt:64
msgid "Start the development server"
msgstr ""

# e2298bcc535648c4a2c4e9a98421d84f
#: ../../intro/tutorial02.txt:66
msgid "Let's start the development server and explore the admin site."
msgstr ""

# 0f54a39df6d14258a93bf2fd05e26f8f
#: ../../intro/tutorial02.txt:68
msgid "Recall from Tutorial 1 that you start the development server like so:"
msgstr ""

# d525929e08754afa9a22bd09b5ba3967
#: ../../intro/tutorial02.txt:74
msgid ""
"Now, open a Web browser and go to \"/admin/\" on your local domain -- e.g., "
"http://127.0.0.1:8000/admin/. You should see the admin's login screen:"
msgstr ""

# 06df833949be431386fcd549db258474
#: ../../intro/tutorial02.txt:82
msgid ""
"If at this point, instead of the above login page, you get an error page "
"reporting something like::"
msgstr ""

# 5602152bf34b4041a8195a3dd81031ee
#: ../../intro/tutorial02.txt:89
msgid ""
"then you're probably using a version of Django that doesn't match this "
"tutorial version. You'll want to either switch to the older tutorial or the "
"newer Django version."
msgstr ""

# 0f4f8f2995df49c586587397fa5fe36c
#: ../../intro/tutorial02.txt:94
msgid "Enter the admin site"
msgstr ""

# 86b79463e6e34913996a8f9c31d80f7f
#: ../../intro/tutorial02.txt:96
msgid ""
"Now, try logging in. (You created a superuser account in the first part of "
"this tutorial, remember?  If you didn't create one or forgot the password "
"you can :ref:`create another one <topics-auth-creating-superusers>`.) You "
"should see the Django admin index page:"
msgstr ""

# 7ca821a448b743dba3b307e4a0e076c0
#: ../../intro/tutorial02.txt:104
msgid ""
"You should see a few types of editable content, including groups, users and "
"sites. These are core features Django ships with by default."
msgstr ""

# f44381a9bc6948b98bf8acf6fffbddfa
#: ../../intro/tutorial02.txt:108
msgid "Make the poll app modifiable in the admin"
msgstr ""

# 286fb8d42e3e4e95aa7e0ea0ffd94f89
#: ../../intro/tutorial02.txt:110
msgid "But where's our poll app? It's not displayed on the admin index page."
msgstr ""

# 3edd9f7250aa4e258659ed73b26816e1
#: ../../intro/tutorial02.txt:112
msgid ""
"Just one thing to do: We need to tell the admin that ``Poll`` objects have "
"an admin interface. To do this, create a file called ``admin.py`` in your "
"``polls`` directory, and edit it to look like this::"
msgstr ""

# ad293f046fc74728bbdd8b13c26c574d
#: ../../intro/tutorial02.txt:121
msgid ""
"You'll need to restart the development server to see your changes. Normally, "
"the server auto-reloads code every time you modify a file, but the action of "
"creating a new file doesn't trigger the auto-reloading logic."
msgstr ""

# 78b4c092db174660a8cfac4790a00d7c
#: ../../intro/tutorial02.txt:126
msgid "Explore the free admin functionality"
msgstr ""

# caa77de21a3e4468b8518a1a185cc7b5
#: ../../intro/tutorial02.txt:128
msgid ""
"Now that we've registered ``Poll``, Django knows that it should be displayed "
"on the admin index page:"
msgstr ""

# 75529cd55ff24d24ad2a93f8a1823165
#: ../../intro/tutorial02.txt:134
msgid ""
"Click \"Polls.\" Now you're at the \"change list\" page for polls. This page "
"displays all the polls in the database and lets you choose one to change it. "
"There's the \"What's up?\" poll we created in the first tutorial:"
msgstr ""

# 9edadd19212b49c2aa87581daea6c13f
#: ../../intro/tutorial02.txt:141
msgid "Click the \"What's up?\" poll to edit it:"
msgstr ""

# d9105bf7ad7b4a6c82e7a11c6dee4b5e
#: ../../intro/tutorial02.txt:146
msgid "Things to note here:"
msgstr ""

# 436b0e21b3f24abeb64c369c6844cfb4
#: ../../intro/tutorial02.txt:148
msgid "The form is automatically generated from the Poll model."
msgstr ""

# 970e64276391498cadd353dae5c4b3da
#: ../../intro/tutorial02.txt:150
msgid ""
"The different model field types (:class:`~django.db.models.DateTimeField`, :"
"class:`~django.db.models.CharField`) correspond to the appropriate HTML "
"input widget. Each type of field knows how to display itself in the Django "
"admin."
msgstr ""

# 656ea18cbfc149bfbec02192c1f65ec4
#: ../../intro/tutorial02.txt:155
msgid ""
"Each :class:`~django.db.models.DateTimeField` gets free JavaScript "
"shortcuts. Dates get a \"Today\" shortcut and calendar popup, and times get "
"a \"Now\" shortcut and a convenient popup that lists commonly entered times."
msgstr ""

# 9729fbef61d54b88a6634d0f90f985cf
#: ../../intro/tutorial02.txt:159
msgid "The bottom part of the page gives you a couple of options:"
msgstr ""

# 6ceeca8da239406e8c989c27e2bf2b04
#: ../../intro/tutorial02.txt:161
msgid ""
"Save -- Saves changes and returns to the change-list page for this type of "
"object."
msgstr ""

# cf38d134e82943b2ad28da9a53ddc1ed
#: ../../intro/tutorial02.txt:164
msgid ""
"Save and continue editing -- Saves changes and reloads the admin page for "
"this object."
msgstr ""

# d9f8a1eb06b34c51aa3f94b9a1d5191e
#: ../../intro/tutorial02.txt:167
msgid ""
"Save and add another -- Saves changes and loads a new, blank form for this "
"type of object."
msgstr ""

# 2690c907f2ad46659ffcfb12f80f9567
#: ../../intro/tutorial02.txt:170
msgid "Delete -- Displays a delete confirmation page."
msgstr ""

# d22d62e1571645bb8db49ea849f44607
#: ../../intro/tutorial02.txt:172
msgid ""
"If the value of \"Date published\" doesn't match the time when you created "
"the poll in Tutorial 1, it probably means you forgot to set the correct "
"value for the :setting:`TIME_ZONE` setting. Change it, reload the page and "
"check that the correct value appears."
msgstr ""

# 1f08415ddf1b4b11b319d2b72eb78a1d
#: ../../intro/tutorial02.txt:177
msgid ""
"Change the \"Date published\" by clicking the \"Today\" and \"Now\" "
"shortcuts. Then click \"Save and continue editing.\" Then click \"History\" "
"in the upper right. You'll see a page listing all changes made to this "
"object via the Django admin, with the timestamp and username of the person "
"who made the change:"
msgstr ""

# 3334a3114c6447398dbf10adb436a04c
#: ../../intro/tutorial02.txt:186
msgid "Customize the admin form"
msgstr ""

# 4f997e34322f4863a8864fa3cbea5a85
#: ../../intro/tutorial02.txt:188
msgid ""
"Take a few minutes to marvel at all the code you didn't have to write. By "
"registering the Poll model with ``admin.site.register(Poll)``, Django was "
"able to construct a default form representation. Often, you'll want to "
"customize how the admin form looks and works. You'll do this by telling "
"Django the options you want when you register the object."
msgstr ""

# b85c6ecac1d94f55bd1310d25d4192f1
#: ../../intro/tutorial02.txt:194
msgid ""
"Let's see how this works by re-ordering the fields on the edit form. Replace "
"the ``admin.site.register(Poll)`` line with::"
msgstr ""

# b4a2d44fb2ef4dacb0bfb98b4f8a4eaf
#: ../../intro/tutorial02.txt:202
msgid ""
"You'll follow this pattern -- create a model admin object, then pass it as "
"the second argument to ``admin.site.register()`` -- any time you need to "
"change the admin options for an object."
msgstr ""

# 37061fb1da744e9ba6d0407c5f388064
#: ../../intro/tutorial02.txt:206
msgid ""
"This particular change above makes the \"Publication date\" come before the "
"\"Question\" field:"
msgstr ""

# 6dea90112b0c4f8f84c8cdcba581b8fd
#: ../../intro/tutorial02.txt:212
msgid ""
"This isn't impressive with only two fields, but for admin forms with dozens "
"of fields, choosing an intuitive order is an important usability detail."
msgstr ""

# b9ca53a144a043cb85c45116b4b7a446
#: ../../intro/tutorial02.txt:215
msgid ""
"And speaking of forms with dozens of fields, you might want to split the "
"form up into fieldsets::"
msgstr ""

# 1b5c2bb374f8400381e2c02578d5a2de
#: ../../intro/tutorial02.txt:226
msgid ""
"The first element of each tuple in ``fieldsets`` is the title of the "
"fieldset. Here's what our form looks like now:"
msgstr ""

# 60b34c085efc46669f159cff107c285d
#: ../../intro/tutorial02.txt:232
msgid ""
"You can assign arbitrary HTML classes to each fieldset. Django provides a ``"
"\"collapse\"`` class that displays a particular fieldset initially "
"collapsed. This is useful when you have a long form that contains a number "
"of fields that aren't commonly used::"
msgstr ""

# 3cef6d2b4f734134b2df90e03898f4e6
#: ../../intro/tutorial02.txt:247
msgid "Adding related objects"
msgstr ""

# 7ee5b1562860409b95f65335275811d2
#: ../../intro/tutorial02.txt:249
msgid ""
"OK, we have our Poll admin page. But a ``Poll`` has multiple ``Choices``, "
"and the admin page doesn't display choices."
msgstr ""

# 531d8584d3244abd9de281cf107d7f1a
#: ../../intro/tutorial02.txt:252
msgid "Yet."
msgstr ""

# 0c3188d6f10f466f8b7ee5fd837626e4
#: ../../intro/tutorial02.txt:254
msgid ""
"There are two ways to solve this problem. The first is to register "
"``Choice`` with the admin just as we did with ``Poll``. That's easy::"
msgstr ""

# 3763e457d7a5414ea4ee42c04f365a6b
#: ../../intro/tutorial02.txt:261
msgid ""
"Now \"Choices\" is an available option in the Django admin. The \"Add choice"
"\" form looks like this:"
msgstr ""

# 727e2a263b054eeb9207da60e36cac14
#: ../../intro/tutorial02.txt:267
msgid ""
"In that form, the \"Poll\" field is a select box containing every poll in "
"the database. Django knows that a :class:`~django.db.models.ForeignKey` "
"should be represented in the admin as a ``<select>`` box. In our case, only "
"one poll exists at this point."
msgstr ""

# fe75875d9ffa43c98ed78a4fdf771ae7
#: ../../intro/tutorial02.txt:272
msgid ""
"Also note the \"Add Another\" link next to \"Poll.\" Every object with a "
"``ForeignKey`` relationship to another gets this for free. When you click "
"\"Add Another,\" you'll get a popup window with the \"Add poll\" form. If "
"you add a poll in that window and click \"Save,\" Django will save the poll "
"to the database and dynamically add it as the selected choice on the \"Add "
"choice\" form you're looking at."
msgstr ""

# 75c1b037e1c446a185a397d350f79987
#: ../../intro/tutorial02.txt:279
msgid ""
"But, really, this is an inefficient way of adding Choice objects to the "
"system. It'd be better if you could add a bunch of Choices directly when you "
"create the Poll object. Let's make that happen."
msgstr ""

# c68cd2310987454ba2fca35caa8dfd5e
#: ../../intro/tutorial02.txt:283
msgid ""
"Remove the ``register()`` call for the Choice model. Then, edit the ``Poll`` "
"registration code to read::"
msgstr ""

# 04529c9b64414f3681f57b56bd583127
#: ../../intro/tutorial02.txt:299
msgid ""
"This tells Django: \"Choice objects are edited on the Poll admin page. By "
"default, provide enough fields for 3 choices.\""
msgstr ""

# 7448d55837fe46b89a661102c2b662e4
#: ../../intro/tutorial02.txt:302
msgid ""
"Load the \"Add poll\" page to see how that looks, you may need to restart "
"your development server:"
msgstr ""

# 7ce3008f2a0940678dbce8710f4ac2b5
#: ../../intro/tutorial02.txt:307
msgid ""
"It works like this: There are three slots for related Choices -- as "
"specified by ``extra`` -- and each time you come back to the \"Change\" page "
"for an already-created object, you get another three extra slots."
msgstr ""

# 577938ceedc447e6b5f0fde17e94b731
#: ../../intro/tutorial02.txt:311
msgid ""
"One small problem, though. It takes a lot of screen space to display all the "
"fields for entering related Choice objects. For that reason, Django offers a "
"tabular way of displaying inline related objects; you just need to change "
"the ``ChoiceInline`` declaration to read::"
msgstr ""

# 346c024cc2d24c128558c1dfa3cba762
#: ../../intro/tutorial02.txt:319
msgid ""
"With that ``TabularInline`` (instead of ``StackedInline``), the related "
"objects are displayed in a more compact, table-based format:"
msgstr ""

# 37183eeee6764326a798de3debac3b14
#: ../../intro/tutorial02.txt:326
msgid "Customize the admin change list"
msgstr ""

# e67af0bda7d94b0cb11c8cd0497547be
#: ../../intro/tutorial02.txt:328
msgid ""
"Now that the Poll admin page is looking good, let's make some tweaks to the "
"\"change list\" page -- the one that displays all the polls in the system."
msgstr ""

# 70aaf7aef65f46019208c1f4a79b637d
#: ../../intro/tutorial02.txt:331
msgid "Here's what it looks like at this point:"
msgstr ""

# 4c374ce4d3e24d899dd98be76334cf98
#: ../../intro/tutorial02.txt:336
msgid ""
"By default, Django displays the ``str()`` of each object. But sometimes it'd "
"be more helpful if we could display individual fields. To do that, use the "
"``list_display`` admin option, which is a tuple of field names to display, "
"as columns, on the change list page for the object::"
msgstr ""

# ee30be956f6943f19fa0a2e89267cf3c
#: ../../intro/tutorial02.txt:345
msgid ""
"Just for good measure, let's also include the ``was_published_recently`` "
"custom method from Tutorial 1::"
msgstr ""

# 6e0bc58466674839bf0c40647d343f2a
#: ../../intro/tutorial02.txt:352
msgid "Now the poll change list page looks like this:"
msgstr ""

# c43b71fec0b84c40910fb86312221a36
#: ../../intro/tutorial02.txt:357
msgid ""
"You can click on the column headers to sort by those values -- except in the "
"case of the ``was_published_recently`` header, because sorting by the output "
"of an arbitrary method is not supported. Also note that the column header "
"for ``was_published_recently`` is, by default, the name of the method (with "
"underscores replaced with spaces), and that each line contains the string "
"representation of the output."
msgstr ""

# 8fb6086af7694e6687d40cda8f3db93d
#: ../../intro/tutorial02.txt:364
msgid ""
"You can improve that by giving that method (in ``models.py``) a few "
"attributes, as follows::"
msgstr ""

# 5a91349a4d234125bbe25eb76123eeb1
#: ../../intro/tutorial02.txt:375
msgid ""
"Edit your admin.py file again and add an improvement to the Poll change list "
"page: Filters. Add the following line to ``PollAdmin``::"
msgstr ""

# c36d0d400ce6437bac062df003c94136
#: ../../intro/tutorial02.txt:380
msgid ""
"That adds a \"Filter\" sidebar that lets people filter the change list by "
"the ``pub_date`` field:"
msgstr ""

# ab72e91ae4384d99ad2455ec042b9f8b
#: ../../intro/tutorial02.txt:386
msgid ""
"The type of filter displayed depends on the type of field you're filtering "
"on. Because ``pub_date`` is a :class:`~django.db.models.fields."
"DateTimeField`, Django knows to give appropriate filter options: \"Any date,"
"\" \"Today,\" \"Past 7 days,\" \"This month,\" \"This year.\""
msgstr ""

# c53b56a0394e4db4bea39635aa44de93
#: ../../intro/tutorial02.txt:391
msgid "This is shaping up well. Let's add some search capability::"
msgstr ""

# 2cad01a1e39142e3950b36dc7c2d3525
#: ../../intro/tutorial02.txt:395
msgid ""
"That adds a search box at the top of the change list. When somebody enters "
"search terms, Django will search the ``question`` field. You can use as many "
"fields as you'd like -- although because it uses a ``LIKE`` query behind the "
"scenes, keep it reasonable, to keep your database happy."
msgstr ""

# 47c904300e4e4c2ba33721c99217cfe3
#: ../../intro/tutorial02.txt:400
msgid ""
"Finally, because Poll objects have dates, it'd be convenient to be able to "
"drill down by date. Add this line::"
msgstr ""

# b2eacb863afc4f269d034e06b64bb24b
#: ../../intro/tutorial02.txt:405
msgid ""
"That adds hierarchical navigation, by date, to the top of the change list "
"page. At top level, it displays all available years. Then it drills down to "
"months and, ultimately, days."
msgstr ""

# aa51b335f429457cb4f4ac4ec2096cb0
#: ../../intro/tutorial02.txt:409
msgid ""
"Now's also a good time to note that change lists give you free pagination. "
"The default is to display 100 items per page. Change-list pagination, search "
"boxes, filters, date-hierarchies and column-header-ordering all work "
"together like you think they should."
msgstr ""

# c8972cbb75e448d19d47621f290847eb
#: ../../intro/tutorial02.txt:415
msgid "Customize the admin look and feel"
msgstr ""

# c3625cf27f814adbabac28eefde495c1
#: ../../intro/tutorial02.txt:417
msgid ""
"Clearly, having \"Django administration\" at the top of each admin page is "
"ridiculous. It's just placeholder text."
msgstr ""

# 6622794eff5543479fa714af45d29767
#: ../../intro/tutorial02.txt:420
msgid ""
"That's easy to change, though, using Django's template system. The Django "
"admin is powered by Django itself, and its interfaces use Django's own "
"template system."
msgstr ""

# aaa6e46fa5794f1ea9464f06c1ecb46c
#: ../../intro/tutorial02.txt:424
msgid ""
"Open your settings file (``mysite/settings.py``, remember) and look at the :"
"setting:`TEMPLATE_DIRS` setting. :setting:`TEMPLATE_DIRS` is a tuple of "
"filesystem directories to check when loading Django templates. It's a search "
"path."
msgstr ""

# bc39d716495745b49c1fda316719bd4a
#: ../../intro/tutorial02.txt:429
msgid ""
"By default, :setting:`TEMPLATE_DIRS` is empty. So, let's add a line to it, "
"to tell Django where our templates live::"
msgstr ""

# f919f3322ded4e30b296f9d9ee5756c7
#: ../../intro/tutorial02.txt:436
msgid ""
"Now copy the template ``admin/base_site.html`` from within the default "
"Django admin template directory in the source code of Django itself "
"(``django/contrib/admin/templates``) into an ``admin`` subdirectory of "
"whichever directory you're using in :setting:`TEMPLATE_DIRS`. For example, "
"if your :setting:`TEMPLATE_DIRS` includes ``'/home/my_username/"
"mytemplates'``, as above, then copy ``django/contrib/admin/templates/admin/"
"base_site.html`` to ``/home/my_username/mytemplates/admin/base_site.html``. "
"Don't forget that ``admin`` subdirectory."
msgstr ""

# 0228274dba7247af8a4b58dc1e77ba5c
#: ../../intro/tutorial02.txt:445
msgid ""
"Then, just edit the file and replace the generic Django text with your own "
"site's name as you see fit."
msgstr ""

# 76facbfca0d243408048caf7191552fb
#: ../../intro/tutorial02.txt:448
msgid ""
"This template file contains lots of text like ``{% block branding %}`` and ``"
"{{ title }}``. The ``{%`` and ``{{`` tags are part of Django's template "
"language. When Django renders ``admin/base_site.html``, this template "
"language will be evaluated to produce the final HTML page. Don't worry if "
"you can't make any sense of the template right now -- we'll delve into "
"Django's templating language in Tutorial 3."
msgstr ""

# 707c8c0647a143ce9f006857985ee323
#: ../../intro/tutorial02.txt:455
msgid ""
"Note that any of Django's default admin templates can be overridden. To "
"override a template, just do the same thing you did with ``base_site.html`` "
"-- copy it from the default directory into your custom directory, and make "
"changes."
msgstr ""

# 3513a15d55734d7bba69165dbb84b28e
#: ../../intro/tutorial02.txt:460
msgid ""
"Astute readers will ask: But if :setting:`TEMPLATE_DIRS` was empty by "
"default, how was Django finding the default admin templates? The answer is "
"that, by default, Django automatically looks for a ``templates/`` "
"subdirectory within each app package, for use as a fallback. See the :ref:"
"`template loader documentation <template-loaders>` for full information."
msgstr ""

# d16441a0e450403f951c54685183c9b6
#: ../../intro/tutorial02.txt:467
msgid "Customize the admin index page"
msgstr ""

# 3f5c44e227de4f0fb0da0e02eb3ae4cb
#: ../../intro/tutorial02.txt:469
msgid ""
"On a similar note, you might want to customize the look and feel of the "
"Django admin index page."
msgstr ""

# 0c17dd15790e467999843ce9e0c9427b
#: ../../intro/tutorial02.txt:472
msgid ""
"By default, it displays all the apps in :setting:`INSTALLED_APPS` that have "
"been registered with the admin application, in alphabetical order. You may "
"want to make significant changes to the layout. After all, the index is "
"probably the most important page of the admin, and it should be easy to use."
msgstr ""

# 0c6ba6a98bcf48279089db0aae82faed
#: ../../intro/tutorial02.txt:477
msgid ""
"The template to customize is ``admin/index.html``. (Do the same as with "
"``admin/base_site.html`` in the previous section -- copy it from the default "
"directory to your custom template directory.) Edit the file, and you'll see "
"it uses a template variable called ``app_list``. That variable contains "
"every installed Django app. Instead of using that, you can hard-code links "
"to object-specific admin pages in whatever way you think is best. Again, "
"don't worry if you can't understand the template language -- we'll cover "
"that in more detail in Tutorial 3."
msgstr ""

# a48726f923cb417894db830af31d57b9
#: ../../intro/tutorial02.txt:486
msgid ""
"When you're comfortable with the admin site, read :doc:`part 3 of this "
"tutorial </intro/tutorial03>` to start working on public poll views."
msgstr ""

# cfc92c44d7ba491f96cd681bdb7911e7
#: ../../intro/tutorial03.txt:3
msgid "Writing your first Django app, part 3"
msgstr ""

# 62e41c185fab4b4db74f800f53ded142
#: ../../intro/tutorial03.txt:5
msgid ""
"This tutorial begins where :doc:`Tutorial 2 </intro/tutorial02>` left off. "
"We're continuing the Web-poll application and will focus on creating the "
"public interface -- \"views.\""
msgstr ""

# 171479c4550847018e17ebb7a7e1c2fa
#: ../../intro/tutorial03.txt:10
msgid "Philosophy"
msgstr ""

# 464ce4a2619848259a350df3cb775437
#: ../../intro/tutorial03.txt:12
msgid ""
"A view is a \"type\" of Web page in your Django application that generally "
"serves a specific function and has a specific template. For example, in a "
"Weblog application, you might have the following views:"
msgstr ""

# 4b773e0effb24eb68d0f10ca5dfc1330
#: ../../intro/tutorial03.txt:16
msgid "Blog homepage -- displays the latest few entries."
msgstr ""

# 77b63f87a55b4e74b8e94f755aa0f4b2
#: ../../intro/tutorial03.txt:18
msgid "Entry \"detail\" page -- permalink page for a single entry."
msgstr ""

# 951708e905134f68888b2de8cd11d407
#: ../../intro/tutorial03.txt:20
msgid ""
"Year-based archive page -- displays all months with entries in the given "
"year."
msgstr ""

# 96abe3811cac40b6967bdf1928a84f47
#: ../../intro/tutorial03.txt:23
msgid ""
"Month-based archive page -- displays all days with entries in the given "
"month."
msgstr ""

# 04556e4d37a3418581046321d9a18374
#: ../../intro/tutorial03.txt:26
msgid "Day-based archive page -- displays all entries in the given day."
msgstr ""

# a08c28bf1c64417e8be9b9443c353125
#: ../../intro/tutorial03.txt:28
msgid "Comment action -- handles posting comments to a given entry."
msgstr ""

# 5850aafa5e604b6cbbd45f42284d774e
#: ../../intro/tutorial03.txt:30
msgid "In our poll application, we'll have the following four views:"
msgstr ""

# ebaada19047f4c3195cdb7e7e456687f
#: ../../intro/tutorial03.txt:32
msgid "Poll \"index\" page -- displays the latest few polls."
msgstr ""

# acdcb79dd8f04c8998ed867040d62e57
#: ../../intro/tutorial03.txt:34
msgid ""
"Poll \"detail\" page -- displays a poll question, with no results but with a "
"form to vote."
msgstr ""

# a778785642d44797aed461b40f13dd5a
#: ../../intro/tutorial03.txt:37
msgid "Poll \"results\" page -- displays results for a particular poll."
msgstr ""

# 146f54a4e9434131af228f82ec5302f4
#: ../../intro/tutorial03.txt:39
msgid ""
"Vote action -- handles voting for a particular choice in a particular poll."
msgstr ""

# c73008710acc4045bcccf970390f26e3
#: ../../intro/tutorial03.txt:42
msgid "In Django, each view is represented by a simple Python function."
msgstr ""

# 5b8d73b7544040839b4c6238530ddfb1
#: ../../intro/tutorial03.txt:47
msgid ""
"The first step of writing views is to design your URL structure. You do this "
"by creating a Python module, called a URLconf. URLconfs are how Django "
"associates a given URL with given Python code."
msgstr ""

# 79c8435086b047789b2c5906493262a9
#: ../../intro/tutorial03.txt:51
msgid ""
"When a user requests a Django-powered page, the system looks at the :setting:"
"`ROOT_URLCONF` setting, which contains a string in Python dotted syntax. "
"Django loads that module and looks for a module-level variable called "
"``urlpatterns``, which is a sequence of tuples in the following format::"
msgstr ""

# 5821aa9db6cf41318e9243adf08580be
#: ../../intro/tutorial03.txt:58
msgid ""
"Django starts at the first regular expression and makes its way down the "
"list, comparing the requested URL against each regular expression until it "
"finds one that matches."
msgstr ""

# 7671e69429c3450bbde2b315b5b13c6b
#: ../../intro/tutorial03.txt:62
msgid ""
"When it finds a match, Django calls the Python callback function, with an :"
"class:`~django.http.HttpRequest` object as the first argument, any \"captured"
"\" values from the regular expression as keyword arguments, and, optionally, "
"arbitrary keyword arguments from the dictionary (an optional third item in "
"the tuple)."
msgstr ""

# 9d38771d412449ad9eaf58f8affe64a4
#: ../../intro/tutorial03.txt:68
msgid ""
"For more on :class:`~django.http.HttpRequest` objects, see the :doc:`/ref/"
"request-response`. For more details on URLconfs, see the :doc:`/topics/http/"
"urls`."
msgstr ""

# be5aaf0bcac94989bfe0991097e72c78
#: ../../intro/tutorial03.txt:72
msgid ""
"When you ran ``django-admin.py startproject mysite`` at the beginning of "
"Tutorial 1, it created a default URLconf in ``mysite/urls.py``. It also "
"automatically set your :setting:`ROOT_URLCONF` setting (in ``settings.py``) "
"to point at that file::"
msgstr ""

# c8d79e203bbd4da8903e13398942c32e
#: ../../intro/tutorial03.txt:79
msgid "Time for an example. Edit ``mysite/urls.py`` so it looks like this::"
msgstr ""

# 97b6acd3fda1442cab0270d8f79f245d
#: ../../intro/tutorial03.txt:94
msgid ""
"This is worth a review. When somebody requests a page from your Web site -- "
"say, \"/polls/23/\", Django will load this Python module, because it's "
"pointed to by the :setting:`ROOT_URLCONF` setting. It finds the variable "
"named ``urlpatterns`` and traverses the regular expressions in order. When "
"it finds a regular expression that matches -- ``r'^polls/(?P<poll_id>\\d+)/"
"$'`` -- it loads the function ``detail()`` from ``polls/views.py``. Finally, "
"it calls that ``detail()`` function like so::"
msgstr ""

# 1722bf1f6b0140caab4e289b020bdba9
#: ../../intro/tutorial03.txt:104
msgid ""
"The ``poll_id='23'`` part comes from ``(?P<poll_id>\\d+)``. Using "
"parentheses around a pattern \"captures\" the text matched by that pattern "
"and sends it as an argument to the view function; the ``?P<poll_id>`` "
"defines the name that will be used to identify the matched pattern; and ``\\d"
"+`` is a regular expression to match a sequence of digits (i.e., a number)."
msgstr ""

# 71cf06672262443c82d469e34fd0a0b4
#: ../../intro/tutorial03.txt:110
msgid ""
"Because the URL patterns are regular expressions, there really is no limit "
"on what you can do with them. And there's no need to add URL cruft such as "
"``.php`` -- unless you have a sick sense of humor, in which case you can do "
"something like this::"
msgstr ""

# c8032dc37cdb478e978a59bb5f7e3dad
#: ../../intro/tutorial03.txt:117
msgid "But, don't do that. It's silly."
msgstr ""

# 6821b839851147649e2fcad63ccbae00
#: ../../intro/tutorial03.txt:119
msgid ""
"Note that these regular expressions do not search GET and POST parameters, "
"or the domain name. For example, in a request to ``http://www.example.com/"
"myapp/``, the URLconf will look for ``myapp/``. In a request to ``http://www."
"example.com/myapp/?page=3``, the URLconf will look for ``myapp/``."
msgstr ""

# 1f746891fbce4cdcb93f9399a6a2420c
#: ../../intro/tutorial03.txt:124
msgid ""
"If you need help with regular expressions, see `Wikipedia's entry`_ and the "
"documentation of the :mod:`re` module. Also, the O'Reilly book \"Mastering "
"Regular Expressions\" by Jeffrey Friedl is fantastic."
msgstr ""

# 1fd373ede92d49d88c52ccd8184f1ffe
#: ../../intro/tutorial03.txt:128
msgid ""
"Finally, a performance note: these regular expressions are compiled the "
"first time the URLconf module is loaded. They're super fast."
msgstr ""

# 5a1cfcb087d04f76941d8b72191e82aa
#: ../../intro/tutorial03.txt:134
msgid "Write your first view"
msgstr ""

# 204954b6698e407b919f86e3beca48e7
#: ../../intro/tutorial03.txt:136
msgid ""
"Well, we haven't created any views yet -- we just have the URLconf. But "
"let's make sure Django is following the URLconf properly."
msgstr ""

# f42b16f8b58c4d40b3f8e936fc20c704
#: ../../intro/tutorial03.txt:139
msgid "Fire up the Django development Web server:"
msgstr ""

# c0f37834c4bc4d5c841e531fa2d8d512
#: ../../intro/tutorial03.txt:145
msgid ""
"Now go to \"http://localhost:8000/polls/\" on your domain in your Web "
"browser. You should get a pleasantly-colored error page with the following "
"message::"
msgstr ""

# b5030c0680c1409b8616cabac862102f
#: ../../intro/tutorial03.txt:152
msgid ""
"This error happened because you haven't written a function ``index()`` in "
"the module ``polls/views.py``."
msgstr ""

# 330a1d19d7554c54b778932ef3d83a77
#: ../../intro/tutorial03.txt:155
msgid ""
"Try \"/polls/23/\", \"/polls/23/results/\" and \"/polls/23/vote/\". The "
"error messages tell you which view Django tried (and failed to find, because "
"you haven't written any views yet)."
msgstr ""

# 560855828a44424987e03958f9a53e26
#: ../../intro/tutorial03.txt:159
msgid ""
"Time to write the first view. Open the file ``polls/views.py`` and put the "
"following Python code in it::"
msgstr ""

# 8323e17957d04f3ea2946b91347f3f4b
#: ../../intro/tutorial03.txt:167
msgid ""
"This is the simplest view possible. Go to \"/polls/\" in your browser, and "
"you should see your text."
msgstr ""

# d4c1091044d64300aaaf96eb2a4b6f19
#: ../../intro/tutorial03.txt:170
msgid ""
"Now lets add a few more views. These views are slightly different, because "
"they take an argument (which, remember, is passed in from whatever was "
"captured by the regular expression in the URLconf)::"
msgstr ""

# 541e13b55c7f43b4a6411912d847d5d6
#: ../../intro/tutorial03.txt:183
msgid ""
"Take a look in your browser, at \"/polls/34/\". It'll run the `detail()` "
"method and display whatever ID you provide in the URL. Try \"/polls/34/"
"results/\" and \"/polls/34/vote/\" too -- these will display the placeholder "
"results and voting pages."
msgstr ""

# 5d7ec92fc35f45a78d666b33421f0a0d
#: ../../intro/tutorial03.txt:189
msgid "Write views that actually do something"
msgstr ""

# 17179d82886448f1a09e3feffd298a96
#: ../../intro/tutorial03.txt:191
msgid ""
"Each view is responsible for doing one of two things: Returning an :class:"
"`~django.http.HttpResponse` object containing the content for the requested "
"page, or raising an exception such as :exc:`~django.http.Http404`. The rest "
"is up to you."
msgstr ""

# e26b7e8ba1754253b6b1674e3fdb7a49
#: ../../intro/tutorial03.txt:196
msgid ""
"Your view can read records from a database, or not. It can use a template "
"system such as Django's -- or a third-party Python template system -- or "
"not. It can generate a PDF file, output XML, create a ZIP file on the fly, "
"anything you want, using whatever Python libraries you want."
msgstr ""

# cb8bcc976330457a86ee7e427fda9e1d
#: ../../intro/tutorial03.txt:201
msgid ""
"All Django wants is that :class:`~django.http.HttpResponse`. Or an exception."
msgstr ""

# 9cc2eeaa31b8486d87da6b47f7b9759c
#: ../../intro/tutorial03.txt:203
msgid ""
"Because it's convenient, let's use Django's own database API, which we "
"covered in :doc:`Tutorial 1 </intro/tutorial01>`. Here's one stab at the "
"``index()`` view, which displays the latest 5 poll questions in the system, "
"separated by commas, according to publication date::"
msgstr ""

# 1e12a22cc23c428a800847d66153d8ee
#: ../../intro/tutorial03.txt:216
msgid ""
"There's a problem here, though: The page's design is hard-coded in the view. "
"If you want to change the way the page looks, you'll have to edit this "
"Python code. So let's use Django's template system to separate the design "
"from Python::"
msgstr ""

# 7c7ce25941ce459fbe38d4b10c94bacb
#: ../../intro/tutorial03.txt:232
msgid ""
"That code loads the template called \"polls/index.html\" and passes it a "
"context. The context is a dictionary mapping template variable names to "
"Python objects."
msgstr ""

# 3132a542dc3e4bc58d60ff576a441e72
#: ../../intro/tutorial03.txt:235
msgid "Reload the page. Now you'll see an error::"
msgstr ""

# f83a6ecbd9394bfa980e3aeeaf11c6d0
#: ../../intro/tutorial03.txt:240
msgid ""
"Ah. There's no template yet. First, create a directory, somewhere on your "
"filesystem, whose contents Django can access. (Django runs as whatever user "
"your server runs.) Don't put them under your document root, though. You "
"probably shouldn't make them public, just for security's sake. Then edit :"
"setting:`TEMPLATE_DIRS` in your ``settings.py`` to tell Django where it can "
"find templates -- just as you did in the \"Customize the admin look and feel"
"\" section of Tutorial 2."
msgstr ""

# d03ceba13acc46da9d4eec024ab21901
#: ../../intro/tutorial03.txt:248
msgid ""
"When you've done that, create a directory ``polls`` in your template "
"directory. Within that, create a file called ``index.html``. Note that our "
"``loader.get_template('polls/index.html')`` code from above maps to "
"\"[template_directory]/polls/index.html\" on the filesystem."
msgstr ""

# 46ecef995cd0469aa01bb480ecf1fba3
#: ../../intro/tutorial03.txt:253
msgid "Put the following code in that template:"
msgstr ""

# a8e42387165b413fa083c49ccd56b93f
#: ../../intro/tutorial03.txt:267
msgid ""
"Load the page in your Web browser, and you should see a bulleted-list "
"containing the \"What's up\" poll from Tutorial 1. The link points to the "
"poll's detail page."
msgstr ""

# 1dcd124a50d147d08f435b5aabe0dea7
#: ../../intro/tutorial03.txt:272
msgid "A shortcut: render_to_response()"
msgstr ""

# 3de44c90ea2641d7b1cfefeac27cc6cb
#: ../../intro/tutorial03.txt:274
msgid ""
"It's a very common idiom to load a template, fill a context and return an :"
"class:`~django.http.HttpResponse` object with the result of the rendered "
"template. Django provides a shortcut. Here's the full ``index()`` view, "
"rewritten::"
msgstr ""

# d9c4545555e04f1a9c68e1bdb510aaac
#: ../../intro/tutorial03.txt:286
msgid ""
"Note that once we've done this in all these views, we no longer need to "
"import :mod:`~django.template.loader`, :class:`~django.template.Context` "
"and :class:`~django.http.HttpResponse`."
msgstr ""

# 6e315ce653714fae84bed49f02a22ce5
#: ../../intro/tutorial03.txt:290
msgid ""
"The :func:`~django.shortcuts.render_to_response` function takes a template "
"name as its first argument and a dictionary as its optional second argument. "
"It returns an :class:`~django.http.HttpResponse` object of the given "
"template rendered with the given context."
msgstr ""

# 7b4dbbbbbc6e4bf68d56ec37d949f9dc
#: ../../intro/tutorial03.txt:296
msgid "Raising 404"
msgstr ""

# 8fca3b85b5c045829946a33c57e22bfb
#: ../../intro/tutorial03.txt:298
msgid ""
"Now, let's tackle the poll detail view -- the page that displays the "
"question for a given poll. Here's the view::"
msgstr ""

# 73a4d5b542ef4c119ba78e0960a4b542
#: ../../intro/tutorial03.txt:310
msgid ""
"The new concept here: The view raises the :exc:`~django.http.Http404` "
"exception if a poll with the requested ID doesn't exist."
msgstr ""

# eefcbb2322d9481e8775ca0d9aa6b0f6
#: ../../intro/tutorial03.txt:313
msgid ""
"We'll discuss what you could put in that ``polls/detail.html`` template a "
"bit later, but if you'd like to quickly get the above example working, just::"
msgstr ""

# 6691a8fa1e2f42b88e08c0583c9da222
#: ../../intro/tutorial03.txt:318
msgid "will get you started for now."
msgstr ""

# c8505cc088ed47b7a8d3c3826340481b
#: ../../intro/tutorial03.txt:321
msgid "A shortcut: get_object_or_404()"
msgstr ""

# dd6d88c7fc72440da04bcfe5eb90a63c
#: ../../intro/tutorial03.txt:323
msgid ""
"It's a very common idiom to use :meth:`~django.db.models.query.QuerySet.get` "
"and raise :exc:`~django.http.Http404` if the object doesn't exist. Django "
"provides a shortcut. Here's the ``detail()`` view, rewritten::"
msgstr ""

# 92e29cbe7d9f4db6b067b0add9944d03
#: ../../intro/tutorial03.txt:333
msgid ""
"The :func:`~django.shortcuts.get_object_or_404` function takes a Django "
"model as its first argument and an arbitrary number of keyword arguments, "
"which it passes to the module's :meth:`~django.db.models.query.QuerySet.get` "
"function. It raises :exc:`~django.http.Http404` if the object doesn't exist."
msgstr ""

# 0e99b190bbc4468b88d7f487f7295b87
#: ../../intro/tutorial03.txt:340
msgid ""
"Why do we use a helper function :func:`~django.shortcuts.get_object_or_404` "
"instead of automatically catching the :exc:`~django.core.exceptions."
"ObjectDoesNotExist` exceptions at a higher level, or having the model API "
"raise :exc:`~django.http.Http404` instead of :exc:`~django.core.exceptions."
"ObjectDoesNotExist`?"
msgstr ""

# b5a3251bd29848b7914dbe94fb094583
#: ../../intro/tutorial03.txt:346
msgid ""
"Because that would couple the model layer to the view layer. One of the "
"foremost design goals of Django is to maintain loose coupling."
msgstr ""

# 851b580efc6247908ad09576d71662f8
#: ../../intro/tutorial03.txt:349
msgid ""
"There's also a :func:`~django.shortcuts.get_list_or_404` function, which "
"works just as :func:`~django.shortcuts.get_object_or_404` -- except using :"
"meth:`~django.db.models.query.QuerySet.filter` instead of :meth:`~django.db."
"models.query.QuerySet.get`. It raises :exc:`~django.http.Http404` if the "
"list is empty."
msgstr ""

# 9a73f1c5d5b1463d87cbe71b8937b0c3
#: ../../intro/tutorial03.txt:356
msgid "Write a 404 (page not found) view"
msgstr ""

# 2a1dbf452aed4438886a7efe67e09d7c
#: ../../intro/tutorial03.txt:358
msgid ""
"When you raise :exc:`~django.http.Http404` from within a view, Django will "
"load a special view devoted to handling 404 errors. It finds it by looking "
"for the variable ``handler404`` in your root URLconf (and only in your root "
"URLconf; setting ``handler404`` anywhere else will have no effect), which is "
"a string in Python dotted syntax -- the same format the normal URLconf "
"callbacks use. A 404 view itself has nothing special: It's just a normal "
"view."
msgstr ""

# ef5c57e2dffb44fbad72a520a82ebac6
#: ../../intro/tutorial03.txt:366
msgid ""
"You normally won't have to bother with writing 404 views. If you don't set "
"``handler404``, the built-in view :func:`django.views.defaults."
"page_not_found` is used by default. In this case, you still have one "
"obligation: create a ``404.html`` template in the root of your template "
"directory. The default 404 view will use that template for all 404 errors. "
"If :setting:`DEBUG` is set to ``False`` (in your settings module) and if you "
"didn't create a ``404.html`` file, an ``Http500`` is raised instead. So "
"remember to create a ``404.html``."
msgstr ""

# d6e3bd52e7b54c7bb18a9f68727dd05b
#: ../../intro/tutorial03.txt:374
msgid "A couple more things to note about 404 views:"
msgstr ""

# 9ede7662ca2c4dd9be91b6d0542fa36c
#: ../../intro/tutorial03.txt:376
msgid ""
"If :setting:`DEBUG` is set to ``True`` (in your settings module) then your "
"404 view will never be used (and thus the ``404.html`` template will never "
"be rendered) because the traceback will be displayed instead."
msgstr ""

# 90dfbf69f1f24542b1247f487a0cbed4
#: ../../intro/tutorial03.txt:380
msgid ""
"The 404 view is also called if Django doesn't find a match after checking "
"every regular expression in the URLconf."
msgstr ""

# 17f7862530e6468e994a0ffbb14f16dd
#: ../../intro/tutorial03.txt:384
msgid "Write a 500 (server error) view"
msgstr ""

# 44a65fe26e0d4716a69555b5b9756f4f
#: ../../intro/tutorial03.txt:386
msgid ""
"Similarly, your root URLconf may define a ``handler500``, which points to a "
"view to call in case of server errors. Server errors happen when you have "
"runtime errors in view code."
msgstr ""

# 3794a3d3bf6347c58876bddb56604ed3
#: ../../intro/tutorial03.txt:391
msgid "Use the template system"
msgstr ""

# 971df775dbf042cda95a1d5c46ffe6af
#: ../../intro/tutorial03.txt:393
msgid ""
"Back to the ``detail()`` view for our poll application. Given the context "
"variable ``poll``, here's what the \"polls/detail.html\" template might look "
"like:"
msgstr ""

# 9e59840247194d438293f985fbc0a4b2
#: ../../intro/tutorial03.txt:406
msgid ""
"The template system uses dot-lookup syntax to access variable attributes. In "
"the example of ``{{ poll.question }}``, first Django does a dictionary "
"lookup on the object ``poll``. Failing that, it tries an attribute lookup -- "
"which works, in this case. If attribute lookup had failed, it would've tried "
"a list-index lookup."
msgstr ""

# 9d33e6f1bc1845dfb3e60e45f752d477
#: ../../intro/tutorial03.txt:412
msgid ""
"Method-calling happens in the :ttag:`{% for %}<for>` loop: ``poll.choice_set."
"all`` is interpreted as the Python code ``poll.choice_set.all()``, which "
"returns an iterable of Choice objects and is suitable for use in the :ttag:`"
"{% for %}<for>` tag."
msgstr ""

# 7611d92a7749444a94bdd708e8b57674
#: ../../intro/tutorial03.txt:417
msgid ""
"See the :doc:`template guide </topics/templates>` for more about templates."
msgstr ""

# 063b80ef933a45c2bcace9be7ae643fa
#: ../../intro/tutorial03.txt:420
msgid "Simplifying the URLconfs"
msgstr ""

# 9b118d24d72f4d3497b056c5d3c5077b
#: ../../intro/tutorial03.txt:422
msgid ""
"Take some time to play around with the views and template system. As you "
"edit the URLconf, you may notice there's a fair bit of redundancy in it::"
msgstr ""

# 86b700d0f0e041eabac26e79772929ac
#: ../../intro/tutorial03.txt:432
msgid "Namely, ``polls.views`` is in every callback."
msgstr ""

# 61ba2697a30d434ab7bcf4a60dec4069
#: ../../intro/tutorial03.txt:434
msgid ""
"Because this is a common case, the URLconf framework provides a shortcut for "
"common prefixes. You can factor out the common prefixes and add them as the "
"first argument to :func:`~django.conf.urls.patterns`, like so::"
msgstr ""

# 74ef6c0bf7c7425b8739c40fa6905d2b
#: ../../intro/tutorial03.txt:445
msgid ""
"This is functionally identical to the previous formatting. It's just a bit "
"tidier."
msgstr ""

# e0f08abc86304b5ea20eefad61858ea6
#: ../../intro/tutorial03.txt:448
msgid ""
"Since you generally don't want the prefix for one app to be applied to every "
"callback in your URLconf, you can concatenate multiple :func:`~django.conf."
"urls.patterns`. Your full ``mysite/urls.py`` might now look like this::"
msgstr ""

# ba65aa9010554254ae6ad121c0f9f927
#: ../../intro/tutorial03.txt:470
msgid "Decoupling the URLconfs"
msgstr ""

# 2178855da6ac412b841cebde4cec471b
#: ../../intro/tutorial03.txt:472
msgid ""
"While we're at it, we should take the time to decouple our poll-app URLs "
"from our Django project configuration. Django apps are meant to be pluggable "
"-- that is, each particular app should be transferable to another Django "
"installation with minimal fuss."
msgstr ""

# 7d304d4af9cf4b489e231bc7285ccfb9
#: ../../intro/tutorial03.txt:477
msgid ""
"Our poll app is pretty decoupled at this point, thanks to the strict "
"directory structure that ``python manage.py startapp`` created, but one part "
"of it is coupled to the Django settings: The URLconf."
msgstr ""

# d12dce3b9d514613985ffb4c5e841564
#: ../../intro/tutorial03.txt:481
msgid ""
"We've been editing the URLs in ``mysite/urls.py``, but the URL design of an "
"app is specific to the app, not to the Django installation -- so let's move "
"the URLs within the app directory."
msgstr ""

# 835fba384c704433b988b9094942def2
#: ../../intro/tutorial03.txt:485
msgid ""
"Copy the file ``mysite/urls.py`` to ``polls/urls.py``. Then, change ``mysite/"
"urls.py`` to remove the poll-specific URLs and insert an :func:`~django.conf."
"urls.include`, leaving you with::"
msgstr ""

# 5f226b4719f041719dc7703a50729a28
#: ../../intro/tutorial03.txt:499
msgid ""
":func:`~django.conf.urls.include` simply references another URLconf. Note "
"that the regular expression doesn't have a ``$`` (end-of-string match "
"character) but has the trailing slash. Whenever Django encounters :func:"
"`~django.conf.urls.include`, it chops off whatever part of the URL matched "
"up to that point and sends the remaining string to the included URLconf for "
"further processing."
msgstr ""

# 660d81973b744a409220f66d9b502578
#: ../../intro/tutorial03.txt:506
msgid "Here's what happens if a user goes to \"/polls/34/\" in this system:"
msgstr ""

# ac30dccdecec46e9acb635a9d2c356dd
#: ../../intro/tutorial03.txt:508
msgid "Django will find the match at ``'^polls/'``"
msgstr ""

# 3d3b48da62ad461c91a24e7904942d53
#: ../../intro/tutorial03.txt:510
msgid ""
"Then, Django will strip off the matching text (``\"polls/\"``) and send the "
"remaining text -- ``\"34/\"`` -- to the 'polls.urls' URLconf for further "
"processing."
msgstr ""

# 625318aa0f2246188b28e2d0c5eb23c1
#: ../../intro/tutorial03.txt:514
msgid ""
"Now that we've decoupled that, we need to decouple the ``polls.urls`` "
"URLconf by removing the leading \"polls/\" from each line, and removing the "
"lines registering the admin site. Your ``polls/urls.py`` file should now "
"look like this::"
msgstr ""

# 2b3d340f7db04600ac9fd6380bcade3e
#: ../../intro/tutorial03.txt:528
msgid ""
"The idea behind :func:`~django.conf.urls.include` and URLconf decoupling is "
"to make it easy to plug-and-play URLs. Now that polls are in their own "
"URLconf, they can be placed under \"/polls/\", or under \"/fun_polls/\", or "
"under \"/content/polls/\", or any other path root, and the app will still "
"work."
msgstr ""

# a0f1676aeee34a67ad841f3bcf0e83d0
#: ../../intro/tutorial03.txt:533
msgid ""
"All the poll app cares about is its relative path, not its absolute path."
msgstr ""

# 6bfd93c5582344428cecaf9f435cdb39
#: ../../intro/tutorial03.txt:535
msgid ""
"When you're comfortable with writing views, read :doc:`part 4 of this "
"tutorial </intro/tutorial04>` to learn about simple form processing and "
"generic views."
msgstr ""

# b6ba0284b5544d8bba08c01650a653a5
#: ../../intro/tutorial04.txt:3
msgid "Writing your first Django app, part 4"
msgstr ""

# 0b96888d32a4426a93190efc68a5105a
#: ../../intro/tutorial04.txt:5
msgid ""
"This tutorial begins where :doc:`Tutorial 3 </intro/tutorial03>` left off. "
"We're continuing the Web-poll application and will focus on simple form "
"processing and cutting down our code."
msgstr ""

# d76074a646ce481b9f871989f07c1b5e
#: ../../intro/tutorial04.txt:10
msgid "Write a simple form"
msgstr ""

# bf59357eac834f559940490f44862a9e
#: ../../intro/tutorial04.txt:12
msgid ""
"Let's update our poll detail template (\"polls/detail.html\") from the last "
"tutorial, so that the template contains an HTML ``<form>`` element:"
msgstr ""

# a67c8adc1b334ad1aa12bc20d6d00d65
#: ../../intro/tutorial04.txt:30
msgid "A quick rundown:"
msgstr ""

# ffb0a3527ace448ca613917133df4a68
#: ../../intro/tutorial04.txt:32
msgid ""
"The above template displays a radio button for each poll choice. The "
"``value`` of each radio button is the associated poll choice's ID. The "
"``name`` of each radio button is ``\"choice\"``. That means, when somebody "
"selects one of the radio buttons and submits the form, it'll send the POST "
"data ``choice=3``. This is HTML Forms 101."
msgstr ""

# b22e96dccf264a839becc2ef94ada707
#: ../../intro/tutorial04.txt:38
msgid ""
"We set the form's ``action`` to ``/polls/{{ poll.id }}/vote/``, and we set "
"``method=\"post\"``. Using ``method=\"post\"`` (as opposed to ``method=\"get"
"\"``) is very important, because the act of submitting this form will alter "
"data server-side. Whenever you create a form that alters data server-side, "
"use ``method=\"post\"``. This tip isn't specific to Django; it's just good "
"Web development practice."
msgstr ""

# cc1ed585b60e45b49a8aefacc3b7acff
#: ../../intro/tutorial04.txt:45
msgid ""
"``forloop.counter`` indicates how many times the :ttag:`for` tag has gone "
"through its loop"
msgstr ""

# 5b46ccc5433b4ee486369ae5d473a390
#: ../../intro/tutorial04.txt:48
msgid ""
"Since we're creating a POST form (which can have the effect of modifying "
"data), we need to worry about Cross Site Request Forgeries. Thankfully, you "
"don't have to worry too hard, because Django comes with a very easy-to-use "
"system for protecting against it. In short, all POST forms that are targeted "
"at internal URLs should use the :ttag:`{% csrf_token %}<csrf_token>` "
"template tag."
msgstr ""

# 2b0ac1521d9e4712a4cf24d5490fe805
#: ../../intro/tutorial04.txt:55
msgid ""
"The :ttag:`{% csrf_token %}<csrf_token>` tag requires information from the "
"request object, which is not normally accessible from within the template "
"context. To fix this, a small adjustment needs to be made to the ``detail`` "
"view, so that it looks like the following::"
msgstr ""

# fbb94ccc47fb45bcaecd839a986b049d
#: ../../intro/tutorial04.txt:67
msgid ""
"The details of how this works are explained in the documentation for :ref:"
"`RequestContext <subclassing-context-requestcontext>`."
msgstr ""

# 5014bb9ad1f74cb0acdf70d0b13447f3
#: ../../intro/tutorial04.txt:70
msgid ""
"Now, let's create a Django view that handles the submitted data and does "
"something with it. Remember, in :doc:`Tutorial 3 </intro/tutorial03>`, we "
"created a URLconf for the polls application that includes this line::"
msgstr ""

# f3e76bb2783a43f3b51ac403b9acf09f
#: ../../intro/tutorial04.txt:76
msgid ""
"We also created a dummy implementation of the ``vote()`` function. Let's "
"create a real version. Add the following to ``polls/views.py``::"
msgstr ""

# a45e53a6fff942bbb3ad621cb1a6664b
#: ../../intro/tutorial04.txt:103
msgid ""
"This code includes a few things we haven't covered yet in this tutorial:"
msgstr ""

# 9f11d5a456864892a62c29a2868cdacb
#: ../../intro/tutorial04.txt:105
msgid ""
":attr:`request.POST <django.http.HttpRequest.POST>` is a dictionary-like "
"object that lets you access submitted data by key name. In this case, "
"``request.POST['choice']`` returns the ID of the selected choice, as a "
"string. :attr:`request.POST <django.http.HttpRequest.POST>` values are "
"always strings."
msgstr ""

# a51091aac6854bc1a47b6bb7d6fb55b5
#: ../../intro/tutorial04.txt:111
msgid ""
"Note that Django also provides :attr:`request.GET <django.http.HttpRequest."
"GET>` for accessing GET data in the same way -- but we're explicitly using :"
"attr:`request.POST <django.http.HttpRequest.POST>` in our code, to ensure "
"that data is only altered via a POST call."
msgstr ""

# 5213743c00ae4cd6b27e295742595677
#: ../../intro/tutorial04.txt:117
msgid ""
"``request.POST['choice']`` will raise :exc:`KeyError` if ``choice`` wasn't "
"provided in POST data. The above code checks for :exc:`KeyError` and "
"redisplays the poll form with an error message if ``choice`` isn't given."
msgstr ""

# d3e901ca4cdb4562a1336d49b040bd53
#: ../../intro/tutorial04.txt:121
msgid ""
"After incrementing the choice count, the code returns an :class:`~django."
"http.HttpResponseRedirect` rather than a normal :class:`~django.http."
"HttpResponse`. :class:`~django.http.HttpResponseRedirect` takes a single "
"argument: the URL to which the user will be redirected (see the following "
"point for how we construct the URL in this case)."
msgstr ""

# c3f671531dc14d648e34d438752b0312
#: ../../intro/tutorial04.txt:128
msgid ""
"As the Python comment above points out, you should always return an :class:"
"`~django.http.HttpResponseRedirect` after successfully dealing with POST "
"data. This tip isn't specific to Django; it's just good Web development "
"practice."
msgstr ""

# 62bc55dd49df400186bbdacddc46dea1
#: ../../intro/tutorial04.txt:133
msgid ""
"We are using the :func:`~django.core.urlresolvers.reverse` function in the :"
"class:`~django.http.HttpResponseRedirect` constructor in this example. This "
"function helps avoid having to hardcode a URL in the view function. It is "
"given the name of the view that we want to pass control to and the variable "
"portion of the URL pattern that points to that view. In this case, using the "
"URLconf we set up in Tutorial 3, this :func:`~django.core.urlresolvers."
"reverse` call will return a string like ::"
msgstr ""

# 76be79acfd7c4a36b18c5f2996f822c6
#: ../../intro/tutorial04.txt:144
msgid ""
"... where the ``3`` is the value of ``p.id``. This redirected URL will then "
"call the ``'results'`` view to display the final page. Note that you need to "
"use the full name of the view here (including the prefix)."
msgstr ""

# 45a0d1ba99584a228f366527abca5f03
#: ../../intro/tutorial04.txt:148
msgid ""
"As mentioned in Tutorial 3, ``request`` is a :class:`~django.http."
"HttpRequest` object. For more on :class:`~django.http.HttpRequest` objects, "
"see the :doc:`request and response documentation </ref/request-response>`."
msgstr ""

# d968ca5b34254672a2f67fd4934b84ba
#: ../../intro/tutorial04.txt:152
msgid ""
"After somebody votes in a poll, the ``vote()`` view redirects to the results "
"page for the poll. Let's write that view::"
msgstr ""

# 36f9351e051c4fcab8579a122bb2afc9
#: ../../intro/tutorial04.txt:159
msgid ""
"This is almost exactly the same as the ``detail()`` view from :doc:`Tutorial "
"3 </intro/tutorial03>`. The only difference is the template name. We'll fix "
"this redundancy later."
msgstr ""

# 2fc996890be0460c9a33b9e36a089798
#: ../../intro/tutorial04.txt:163
msgid "Now, create a ``results.html`` template:"
msgstr ""

# 2d073e3f07a045ada577cb1c48ba25fe
#: ../../intro/tutorial04.txt:177
msgid ""
"Now, go to ``/polls/1/`` in your browser and vote in the poll. You should "
"see a results page that gets updated each time you vote. If you submit the "
"form without having chosen a choice, you should see the error message."
msgstr ""

# ea502868badf45ba978a4863691b93f7
#: ../../intro/tutorial04.txt:182
msgid "Use generic views: Less code is better"
msgstr ""

# d6779f6f954a4899a4a82dd19e43842e
#: ../../intro/tutorial04.txt:184
msgid ""
"The ``detail()`` (from :doc:`Tutorial 3 </intro/tutorial03>`) and ``results()"
"`` views are stupidly simple -- and, as mentioned above, redundant. The "
"``index()`` view (also from Tutorial 3), which displays a list of polls, is "
"similar."
msgstr ""

# 138bef48bcaf486b9460a63b4b33753b
#: ../../intro/tutorial04.txt:188
msgid ""
"These views represent a common case of basic Web development: getting data "
"from the database according to a parameter passed in the URL, loading a "
"template and returning the rendered template. Because this is so common, "
"Django provides a shortcut, called the \"generic views\" system."
msgstr ""

# 3291fab42fd243388dd6701b239672c7
#: ../../intro/tutorial04.txt:193
msgid ""
"Generic views abstract common patterns to the point where you don't even "
"need to write Python code to write an app."
msgstr ""

# d01fa42fa3174e23b18dee76f8e396ca
#: ../../intro/tutorial04.txt:196
msgid ""
"Let's convert our poll app to use the generic views system, so we can delete "
"a bunch of our own code. We'll just have to take a few steps to make the "
"conversion. We will:"
msgstr ""

# 234c1ca1208d41aa9ae79d7974dbe744
#: ../../intro/tutorial04.txt:200
msgid "Convert the URLconf."
msgstr ""

# 4221a779401443ea844d44c0b6a032cc
#: ../../intro/tutorial04.txt:202
msgid "Delete some of the old, unneeded views."
msgstr ""

# 609a715dd68948659da1da0dac8a382d
#: ../../intro/tutorial04.txt:204
msgid "Fix up URL handling for the new views."
msgstr ""

# bb021af03b544456999a552826cfc7ae
#: ../../intro/tutorial04.txt:206
msgid "Read on for details."
msgstr ""

# b2448a1b148f42ccbe3d39c96b64abea
#: ../../intro/tutorial04.txt:210
msgid ""
"Generally, when writing a Django app, you'll evaluate whether generic views "
"are a good fit for your problem, and you'll use them from the beginning, "
"rather than refactoring your code halfway through. But this tutorial "
"intentionally has focused on writing the views \"the hard way\" until now, "
"to focus on core concepts."
msgstr ""

# e4ddb14c7da34945928f2b0c1a5e6091
#: ../../intro/tutorial04.txt:216
msgid "You should know basic math before you start using a calculator."
msgstr ""

# da8b5e92ef674a1583fbbd84b906cc83
#: ../../intro/tutorial04.txt:218
msgid ""
"First, open the ``polls/urls.py`` URLconf. It looks like this, according to "
"the tutorial so far::"
msgstr ""

# c57987cd01ea45258d6aea5993e372fd
#: ../../intro/tutorial04.txt:230
msgid "Change it like so::"
msgstr ""

# 3e590c45cd2f4ea2980d2dfdf2982096
#: ../../intro/tutorial04.txt:254
msgid ""
"We're using two generic views here: :class:`~django.views.generic.list."
"ListView` and :class:`~django.views.generic.detail.DetailView`. "
"Respectively, those two views abstract the concepts of \"display a list of "
"objects\" and \"display a detail page for a particular type of object.\""
msgstr ""

# 6ae302052f694441a137bc94d6ed3f9b
#: ../../intro/tutorial04.txt:260
msgid ""
"Each generic view needs to know what model it will be acting upon. This is "
"provided using the ``model`` parameter."
msgstr ""

# 49f9029d1bea482c92d464262b9a6c48
#: ../../intro/tutorial04.txt:263
msgid ""
"The :class:`~django.views.generic.list.DetailView` generic view expects the "
"primary key value captured from the URL to be called ``\"pk\"``, so we've "
"changed ``poll_id`` to ``pk`` for the generic views."
msgstr ""

# 8636b7e78346441195d42fe7641ad832
#: ../../intro/tutorial04.txt:268
msgid ""
"We've added a name, ``poll_results``, to the results view so that we have a "
"way to refer to its URL later on (see the documentation about :ref:`naming "
"URL patterns <naming-url-patterns>` for information). We're also using the :"
"func:`~django.conf.urls.url` function from :mod:`django.conf.urls` here. "
"It's a good habit to use :func:`~django.conf.urls.url` when you are "
"providing a pattern name like this."
msgstr ""

# 707be0acb16949e680c7d4494d87a738
#: ../../intro/tutorial04.txt:277
msgid ""
"By default, the :class:`~django.views.generic.list.DetailView` generic view "
"uses a template called ``<app name>/<model name>_detail.html``. In our case, "
"it'll use the template ``\"polls/poll_detail.html\"``. The ``template_name`` "
"argument is used to tell Django to use a specific template name instead of "
"the autogenerated default template name. We also specify the "
"``template_name`` for the ``results`` list view -- this ensures that the "
"results view and the detail view have a different appearance when rendered, "
"even though they're both a :class:`~django.views.generic.list.DetailView` "
"behind the scenes."
msgstr ""

# 8b5d8a1cddd04e75bd75ab223c095061
#: ../../intro/tutorial04.txt:287
msgid ""
"Similarly, the :class:`~django.views.generic.list.ListView` generic view "
"uses a default template called ``<app name>/<model name>_list.html``; we use "
"``template_name`` to tell :class:`~django.views.generic.list.ListView` to "
"use our existing ``\"polls/index.html\"`` template."
msgstr ""

# 8340b2e3a088450aa0b6e3a119ee9478
#: ../../intro/tutorial04.txt:293
msgid ""
"In previous parts of the tutorial, the templates have been provided with a "
"context that contains the ``poll`` and ``latest_poll_list`` context "
"variables. For DetailView the ``poll`` variable is provided automatically -- "
"since we're using a Django model (``Poll``), Django is able to determine an "
"appropriate name for the context variable. However, for ListView, the "
"automatically generated context variable is ``poll_list``. To override this "
"we provide the ``context_object_name`` option, specifying that we want to "
"use ``latest_poll_list`` instead. As an alternative approach, you could "
"change your templates to match the new default context variables -- but it's "
"a lot easier to just tell Django to use the variable you want."
msgstr ""

# 93763a2c2d32400b9a378142309e05fd
#: ../../intro/tutorial04.txt:305
msgid ""
"You can now delete the ``index()``, ``detail()`` and ``results()`` views "
"from ``polls/views.py``. We don't need them anymore -- they have been "
"replaced by generic views."
msgstr ""

# 5eb2255a1cf7429a8acd844b415b8b6c
#: ../../intro/tutorial04.txt:309
msgid ""
"The last thing to do is fix the URL handling to account for the use of "
"generic views. In the vote view above, we used the :func:`~django.core."
"urlresolvers.reverse` function to avoid hard-coding our URLs. Now that we've "
"switched to a generic view, we'll need to change the :func:`~django.core."
"urlresolvers.reverse` call to point back to our new generic view. We can't "
"simply use the view function anymore -- generic views can be (and are) used "
"multiple times -- but we can use the name we've given::"
msgstr ""

# cd038107918742d9a45ad53b1ec7c6d1
#: ../../intro/tutorial04.txt:320
msgid "Run the server, and use your new polling app based on generic views."
msgstr ""

# 64ec54c91b334184a68c70a89e13af15
#: ../../intro/tutorial04.txt:322
msgid ""
"For full details on generic views, see the :doc:`generic views documentation "
"</topics/http/generic-views>`."
msgstr ""

# 16fd79e786c64e79a0821e384280f12a
#: ../../intro/tutorial04.txt:326
msgid "Coming soon"
msgstr ""

# de661609c4b3422dad34c7654cdef583
#: ../../intro/tutorial04.txt:328
msgid ""
"The tutorial ends here for the time being. Future installments of the "
"tutorial will cover:"
msgstr ""

# 2f2835cce8d84e078323a72af8eb5fec
#: ../../intro/tutorial04.txt:331
msgid "Advanced form processing"
msgstr ""

# 640b99a96750437e9ac71f3edebb9df3
#: ../../intro/tutorial04.txt:332
msgid "Using the RSS framework"
msgstr ""

# 02d54d38f9d9450daea4eab08c597e8b
#: ../../intro/tutorial04.txt:333
msgid "Using the cache framework"
msgstr ""

# 55c99de967d94d4da783104708488f09
#: ../../intro/tutorial04.txt:334
msgid "Using the comments framework"
msgstr ""

# 9b82183584e5456ca6d4535aca6ba7ba
#: ../../intro/tutorial04.txt:335
msgid "Advanced admin features: Permissions"
msgstr ""

# 8a6a05dd98ef42e6aa3172e1cad84635
#: ../../intro/tutorial04.txt:336
msgid "Advanced admin features: Custom JavaScript"
msgstr ""

# a76feda85d214d24826fc89977173552
#: ../../intro/tutorial04.txt:338
msgid ""
"In the meantime, you might want to check out some pointers on :doc:`where to "
"go from here </intro/whatsnext>`"
msgstr ""

# c608aada0afb4832a5a5b373ca1fdbd7
#: ../../intro/whatsnext.txt:3
msgid "What to read next"
msgstr ""

# dd4dc984fdbf422a91dc5f9841235e7b
#: ../../intro/whatsnext.txt:5
msgid ""
"So you've read all the :doc:`introductory material </intro/index>` and have "
"decided you'd like to keep using Django. We've only just scratched the "
"surface with this intro (in fact, if you've read every single word you've "
"still read less than 10% of the overall documentation)."
msgstr ""

# ab3d6b525e9b45fa95b8c10de4427be7
#: ../../intro/whatsnext.txt:10
msgid "So what's next?"
msgstr ""

# 165f66c7f300428b8df9f4de8a5b62dc
#: ../../intro/whatsnext.txt:12
msgid ""
"Well, we've always been big fans of learning by doing. At this point you "
"should know enough to start a project of your own and start fooling around. "
"As you need to learn new tricks, come back to the documentation."
msgstr ""

# 2f79b5badda4450b9b0f2822b8a3d689
#: ../../intro/whatsnext.txt:16
msgid ""
"We've put a lot of effort into making Django's documentation useful, easy to "
"read and as complete as possible. The rest of this document explains more "
"about how the documentation works so that you can get the most out of it."
msgstr ""

# 0f08afec14eb446d80c8890c76f92d68
#: ../../intro/whatsnext.txt:20
msgid ""
"(Yes, this is documentation about documentation. Rest assured we have no "
"plans to write a document about how to read the document about "
"documentation.)"
msgstr ""

# 1bc2627f764d4b159c12f14eb11968d3
#: ../../intro/whatsnext.txt:24
msgid "Finding documentation"
msgstr ""

# f76030c87e2d4c1c923a0414996293f2
#: ../../intro/whatsnext.txt:26
msgid ""
"Django's got a *lot* of documentation -- almost 200,000 words -- so finding "
"what you need can sometimes be tricky. A few good places to start are the :"
"ref:`search` and the :ref:`genindex`."
msgstr ""

# 9292028159924cebb5da0d57f2799c24
#: ../../intro/whatsnext.txt:30
msgid "Or you can just browse around!"
msgstr ""

# 8e20d5c444ca4cb5b7e009722d10d73c
#: ../../intro/whatsnext.txt:33
msgid "How the documentation is organized"
msgstr ""

# f632942b61d5486a98d9ab62288abbb7
#: ../../intro/whatsnext.txt:35
msgid ""
"Django's main documentation is broken up into \"chunks\" designed to fill "
"different needs:"
msgstr ""

# 1532280482114502a55424f771a3c9db
#: ../../intro/whatsnext.txt:38
msgid ""
"The :doc:`introductory material </intro/index>` is designed for people new "
"to Django -- or to Web development in general. It doesn't cover anything in "
"depth, but instead gives a high-level overview of how developing in Django "
"\"feels\"."
msgstr ""

# 85ffb3b3765e4a9fb52ea8720ff0e6ac
#: ../../intro/whatsnext.txt:43
msgid ""
"The :doc:`topic guides </topics/index>`, on the other hand, dive deep into "
"individual parts of Django. There are complete guides to Django's :doc:"
"`model system </topics/db/index>`, :doc:`template engine </topics/"
"templates>`, :doc:`forms framework </topics/forms/index>`, and much more."
msgstr ""

# f95c4a59ada5420da79b16b529921642
#: ../../intro/whatsnext.txt:49
msgid ""
"This is probably where you'll want to spend most of your time; if you work "
"your way through these guides you should come out knowing pretty much "
"everything there is to know about Django."
msgstr ""

# 395ec7df8377442ea5280e534c9cb492
#: ../../intro/whatsnext.txt:53
msgid ""
"Web development is often broad, not deep -- problems span many domains. "
"We've written a set of :doc:`how-to guides </howto/index>` that answer "
"common \"How do I ...?\" questions. Here you'll find information about :doc:"
"`generating PDFs with Django </howto/outputting-pdf>`, :doc:`writing custom "
"template tags </howto/custom-template-tags>`, and more."
msgstr ""

# de804d5eb055498dbe8227e4ba767ffc
#: ../../intro/whatsnext.txt:59
msgid ""
"Answers to really common questions can also be found in the :doc:`FAQ </faq/"
"index>`."
msgstr ""

# d3339c0ae695463a9fe62e6e8feb8261
#: ../../intro/whatsnext.txt:62
msgid ""
"The guides and how-to's don't cover every single class, function, and method "
"available in Django -- that would be overwhelming when you're trying to "
"learn. Instead, details about individual classes, functions, methods, and "
"modules are kept in the :doc:`reference </ref/index>`. This is where you'll "
"turn to find the details of a particular function or whathaveyou."
msgstr ""

# 5429464fcafe40e5bf0b2fb83fbeb895
#: ../../intro/whatsnext.txt:69
msgid ""
"Finally, there's some \"specialized\" documentation not usually relevant to "
"most developers. This includes the :doc:`release notes </releases/index>`, :"
"doc:`documentation of obsolete features </obsolete/index>`, :doc:`internals "
"documentation </internals/index>` for those who want to add code to Django "
"itself, and a :doc:`few other things that simply don't fit elsewhere </misc/"
"index>`."
msgstr ""

# 62105425ab6c447f8b31b475cef9f1d5
#: ../../intro/whatsnext.txt:78
msgid "How documentation is updated"
msgstr ""

# dc5c84ac96984b4088cbc17a5e2ab1cc
#: ../../intro/whatsnext.txt:80
msgid ""
"Just as the Django code base is developed and improved on a daily basis, our "
"documentation is consistently improving. We improve documentation for "
"several reasons:"
msgstr ""

# 87764136f013413da89cddea10a77fcf
#: ../../intro/whatsnext.txt:84
msgid "To make content fixes, such as grammar/typo corrections."
msgstr ""

# 5f8ef493544947cf911c2ed1f08c041b
#: ../../intro/whatsnext.txt:86
msgid ""
"To add information and/or examples to existing sections that need to be "
"expanded."
msgstr ""

# a7f0219ff8d9415686bb3018a411a30c
#: ../../intro/whatsnext.txt:89
msgid ""
"To document Django features that aren't yet documented. (The list of such "
"features is shrinking but exists nonetheless.)"
msgstr ""

# 557146df9281451380572f0c9e833397
#: ../../intro/whatsnext.txt:92
msgid ""
"To add documentation for new features as new features get added, or as "
"Django APIs or behaviors change."
msgstr ""

# 3f263522824844bc9d3bd65d371c05eb
#: ../../intro/whatsnext.txt:95
msgid ""
"Django's documentation is kept in the same source control system as its "
"code. It lives in the `django/trunk/docs`_ directory of our Subversion "
"repository. Each document online is a separate text file in the repository."
msgstr ""

# 3f673a0a529945b59aee5490e7833c90
#: ../../intro/whatsnext.txt:102
msgid "Where to get it"
msgstr ""

# 93809108db3f441eaf7dcde215bea8ea
#: ../../intro/whatsnext.txt:104
msgid ""
"You can read Django documentation in several ways. They are, in order of "
"preference:"
msgstr ""

# aff35c8823b84788a522dda987444247
#: ../../intro/whatsnext.txt:108
msgid "On the Web"
msgstr ""

# d8c0879957514a6d803e23a99d812b40
#: ../../intro/whatsnext.txt:110
msgid ""
"The most recent version of the Django documentation lives at http://docs."
"djangoproject.com/en/dev/. These HTML pages are generated automatically from "
"the text files in source control. That means they reflect the \"latest and "
"greatest\" in Django -- they include the very latest corrections and "
"additions, and they discuss the latest Django features, which may only be "
"available to users of the Django development version. (See \"Differences "
"between versions\" below.)"
msgstr ""

# bf81fa240af54dc3b73a532cc868f686
#: ../../intro/whatsnext.txt:118
msgid ""
"We encourage you to help improve the docs by submitting changes, corrections "
"and suggestions in the `ticket system`_. The Django developers actively "
"monitor the ticket system and use your feedback to improve the documentation "
"for everybody."
msgstr ""

# 8985a1dde323495bac341732a824965f
#: ../../intro/whatsnext.txt:122
msgid ""
"Note, however, that tickets should explicitly relate to the documentation, "
"rather than asking broad tech-support questions. If you need help with your "
"particular Django setup, try the `django-users mailing list`_ or the "
"`#django IRC channel`_ instead."
msgstr ""

# e7e8db340b6e41fda039cd6233d8114a
#: ../../intro/whatsnext.txt:132
msgid "In plain text"
msgstr ""

# e5063770ee3343e48656cc991343099f
#: ../../intro/whatsnext.txt:134
msgid ""
"For offline reading, or just for convenience, you can read the Django "
"documentation in plain text."
msgstr ""

# 1239585a49794eeaa997f7a66a3333e7
#: ../../intro/whatsnext.txt:137
msgid ""
"If you're using an official release of Django, note that the zipped package "
"(tarball) of the code includes a ``docs/`` directory, which contains all the "
"documentation for that release."
msgstr ""

# 01025e2b25c34f56ace03c2b44b7b935
#: ../../intro/whatsnext.txt:141
msgid ""
"If you're using the development version of Django (aka the Subversion \"trunk"
"\"), note that the ``docs/`` directory contains all of the documentation. "
"You can ``svn update`` it, just as you ``svn update`` the Python code, in "
"order to get the latest changes."
msgstr ""

# 364d8f99039b4af092e60c293cf8d8b8
#: ../../intro/whatsnext.txt:146
msgid ""
"You can check out the latest Django documentation from Subversion using this "
"shell command:"
msgstr ""

# 63359b2a6df54681814cb856e9582cb4
#: ../../intro/whatsnext.txt:153
msgid ""
"One low-tech way of taking advantage of the text documentation is by using "
"the Unix ``grep`` utility to search for a phrase in all of the "
"documentation. For example, this will show you each mention of the phrase "
"\"max_length\" in any Django document:"
msgstr ""

# 91d3e80d0e3543859d28dcb224ac90c5
#: ../../intro/whatsnext.txt:163
msgid "As HTML, locally"
msgstr ""

# eca44919a42643c48502f7f23314d7dc
#: ../../intro/whatsnext.txt:165
msgid ""
"You can get a local copy of the HTML documentation following a few easy "
"steps:"
msgstr ""

# 90f099c1fa4d468aa11cbd450b4ff1de
#: ../../intro/whatsnext.txt:167
msgid ""
"Django's documentation uses a system called Sphinx__ to convert from plain "
"text to HTML. You'll need to install Sphinx by either downloading and "
"installing the package from the Sphinx Web site, or with ``pip``:"
msgstr ""

# d3f13b0ab2ae4ff2884d9ed763a55441
#: ../../intro/whatsnext.txt:175
msgid ""
"Then, just use the included ``Makefile`` to turn the documentation into HTML:"
msgstr ""

# b8ddc2e87b064acabb46d0591ddee8a4
#: ../../intro/whatsnext.txt:183
msgid "You'll need `GNU Make`__ installed for this."
msgstr ""

# 25eb7f2fa2dc4ee69426d5dac7ed199d
#: ../../intro/whatsnext.txt:185
msgid "If you're on Windows you can alternatively use the included batch file:"
msgstr ""

# b9f40d54dde54740a8805a784baa6102
#: ../../intro/whatsnext.txt:192
msgid "The HTML documentation will be placed in ``docs/_build/html``."
msgstr ""

# f0d208cdfb8c4bf4a8fb2fbcf1e1ed8a
#: ../../intro/whatsnext.txt:196
msgid ""
"Generation of the Django documentation will work with Sphinx version 0.6 or "
"newer, but we recommend going straight to Sphinx 1.0.2 or newer."
msgstr ""

# 5e434594e3e34bbd8abcb27d7361a2da
#: ../../intro/whatsnext.txt:203
msgid "Differences between versions"
msgstr ""

# 8d4c522c7e2d469896c51a3016999a95
#: ../../intro/whatsnext.txt:205
msgid ""
"As previously mentioned, the text documentation in our Subversion repository "
"contains the \"latest and greatest\" changes and additions. These changes "
"often include documentation of new features added in the Django development "
"version -- the Subversion (\"trunk\") version of Django. For that reason, "
"it's worth pointing out our policy on keeping straight the documentation for "
"various versions of the framework."
msgstr ""

# 5799828faac9428aa5ae5320fa20ea7e
#: ../../intro/whatsnext.txt:212
msgid "We follow this policy:"
msgstr ""

# 373d3811923c4865bcd19c1e7ff2ac3d
#: ../../intro/whatsnext.txt:214
msgid ""
"The primary documentation on djangoproject.com is an HTML version of the "
"latest docs in Subversion. These docs always correspond to the latest "
"official Django release, plus whatever features we've added/changed in the "
"framework *since* the latest release."
msgstr ""

# 03335372f79d4a1a99bb1b92c22707d2
#: ../../intro/whatsnext.txt:219
msgid ""
"As we add features to Django's development version, we try to update the "
"documentation in the same Subversion commit transaction."
msgstr ""

# 75c80e7d59904ba58dca5912164b6f1a
#: ../../intro/whatsnext.txt:222
msgid ""
"To distinguish feature changes/additions in the docs, we use the phrase: "
"\"New in version X.Y\", being X.Y the next release version (hence, the one "
"being developed)."
msgstr ""

# e75953e5e5474514943cca9a5d428f37
#: ../../intro/whatsnext.txt:226
msgid ""
"Documentation for a particular Django release is frozen once the version has "
"been released officially. It remains a snapshot of the docs as of the moment "
"of the release. We will make exceptions to this rule in the case of "
"retroactive security updates or other such retroactive changes. Once "
"documentation is frozen, we add a note to the top of each frozen document "
"that says \"These docs are frozen for Django version XXX\" and links to the "
"current version of that document."
msgstr ""

# 22e050e4f3bf47538d97ff25030a47dd
#: ../../intro/whatsnext.txt:234
msgid ""
"The `main documentation Web page`_ includes links to documentation for all "
"previous versions."
msgstr ""
