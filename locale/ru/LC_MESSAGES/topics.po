# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2012.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-03-12 13:35\n"
"PO-Revision-Date: 2012-03-12 13:35\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# d7beb8b5a00940d1aacf8a14da332a6f
#: ../../topics/auth.txt:3
msgid "User authentication in Django"
msgstr ""

# b5e2604f8476448789fdefe5919e565c
#: ../../topics/auth.txt:8
msgid ""
"Django comes with a user authentication system. It handles user accounts, "
"groups, permissions and cookie-based user sessions. This document explains "
"how things work."
msgstr ""

# 9a8c836b318744efa55e62e1f7b02095
# bb1120ea56564b729f41c40a6b94febe
# 9e661349e84a43fc8f8eb75c3bbeabbf
# ef011f900f184619b253eea559be9a3a
# 9edcf8f8b05540aa92efb8b769523f24
# ca3e66886c1f4a718798432b6951e7c3
# fda1f57d508c484785e747fd635c2467
#: ../../topics/auth.txt:13 ../../topics/forms/index.txt:26
#: ../../topics/http/urls.txt:20 ../../topics/i18n/formatting.txt:10
#: ../../topics/i18n/index.txt:14 ../../topics/i18n/timezones.txt:12
#: ../../topics/i18n/translation.txt:8
msgid "Overview"
msgstr ""

# cf3f8739fddc49f785e0efc2a511db76
#: ../../topics/auth.txt:15
msgid "The auth system consists of:"
msgstr ""

# 4b7a7c77a842436b923c080358b29589
# 235680071c3b40478326b6ee63fcfa31
# f441f53973304c93aabfd5372a73d3a9
#: ../../topics/auth.txt:17 ../../topics/auth.txt:50
#: ../../topics/auth.txt:1632
msgid "Users"
msgstr ""

# 1d762b33cd8444ac95cd7ba5af8e86eb
#: ../../topics/auth.txt:18
msgid ""
"Permissions: Binary (yes/no) flags designating whether a user may perform a "
"certain task."
msgstr ""

# 107e172bc993448f8fe09acded598c4e
#: ../../topics/auth.txt:20
msgid ""
"Groups: A generic way of applying labels and permissions to more than one "
"user."
msgstr ""

# 9177756a592e4979858d0ee1d65e5b83
#: ../../topics/auth.txt:24
msgid "Installation"
msgstr ""

# 253a682a72164afd96ddba9309802295
#: ../../topics/auth.txt:26
msgid ""
"Authentication support is bundled as a Django application in ``django."
"contrib.auth``. To install it, do the following:"
msgstr ""

# 09164014e6054fb1926e12bfd9c49904
#: ../../topics/auth.txt:29
msgid ""
"Put ``'django.contrib.auth'`` and ``'django.contrib.contenttypes'`` in your :"
"setting:`INSTALLED_APPS` setting. (The :class:`~django.contrib.auth.models."
"Permission` model in :mod:`django.contrib.auth` depends on :mod:`django."
"contrib.contenttypes`.)"
msgstr ""

# b56772a77f0f40ebadba7187ea5d8ae4
#: ../../topics/auth.txt:33
msgid "Run the command ``manage.py syncdb``."
msgstr ""

# 6da0513c247a4bc6a672e9b85c179b73
#: ../../topics/auth.txt:35
msgid ""
"Note that the default :file:`settings.py` file created by :djadmin:`django-"
"admin.py startproject <startproject>` includes ``'django.contrib.auth'`` and "
"``'django.contrib.contenttypes'`` in :setting:`INSTALLED_APPS` for "
"convenience.  If your :setting:`INSTALLED_APPS` already contains these apps, "
"feel free to run :djadmin:`manage.py syncdb <syncdb>` again; you can run "
"that command as many times as you'd like, and each time it'll only install "
"what's needed."
msgstr ""

# 4edab19edb18498b85b69f1a7cc346f3
#: ../../topics/auth.txt:43
msgid ""
"The :djadmin:`syncdb` command creates the necessary database tables, creates "
"permission objects for all installed apps that need 'em, and prompts you to "
"create a superuser account the first time you run it."
msgstr ""

# 802db2152f0941c8bf2f69a7563aa1f6
#: ../../topics/auth.txt:47
msgid "Once you've taken those steps, that's it."
msgstr ""

# 9e00c87b2dce4bc598161c54b351321f
# 748d80003d8c4ed687a16cf37048eb90
# 7ff23a129a6b4d16adfd1fe27c08e386
#: ../../topics/auth.txt:55 ../../topics/auth.txt:1563
#: ../../topics/auth.txt:1709
msgid "API reference"
msgstr ""

# fba6e8f1e1a040f8905358a2b341e989
# eb6bad598e674a59a86a7103f7e84657
# 452607e9b7b442fcb2163e8e29b1e3c2
# 61fd84ca618d47d98ffa5044e890bace
#: ../../topics/auth.txt:58 ../../topics/auth.txt:1570
#: ../../topics/auth.txt:1714 ../../topics/db/models.txt:90
msgid "Fields"
msgstr ""

# baece429135246d2abcb668a82e452c9
#: ../../topics/auth.txt:62
msgid ""
":class:`~django.contrib.auth.models.User` objects have the following fields:"
msgstr ""

# c26071dfedb94288b3d2ede80126c3c3
#: ../../topics/auth.txt:67
msgid ""
"Required. 30 characters or fewer. Alphanumeric characters only (letters, "
"digits and underscores)."
msgstr ""

# 6bb7d3e89edc46b9b5d88780f6091a5f
# efdc475ed0994fc9b98641c2ada5ef4c
#: ../../topics/auth.txt:75 ../../topics/auth.txt:79
msgid "Optional. 30 characters or fewer."
msgstr ""

# ca3f298828d4412780941b5613b1b9e7
#: ../../topics/auth.txt:83
msgid "Optional. Email address."
msgstr ""

# 285f926dcabb4638a6a26cdaae698ecd
#: ../../topics/auth.txt:87
msgid ""
"Required. A hash of, and metadata about, the password. (Django doesn't store "
"the raw password.) Raw passwords can be arbitrarily long and can contain any "
"character. See the \"Passwords\" section below."
msgstr ""

# 5bb04546f3db4439a63379a3d6b862ea
#: ../../topics/auth.txt:93
msgid "Boolean. Designates whether this user can access the admin site."
msgstr ""

# b67ec29218d24aa4b4c971cab909f766
#: ../../topics/auth.txt:97
msgid ""
"Boolean. Designates whether this user account should be considered active. "
"We recommend that you set this flag to ``False`` instead of deleting "
"accounts; that way, if your applications have any foreign keys to users, the "
"foreign keys won't break."
msgstr ""

# b6aefd49fed94471bbb05954d6a9f9ae
#: ../../topics/auth.txt:102
msgid ""
"This doesn't necessarily control whether or not the user can log in. "
"Authentication backends aren't required to check for the ``is_active`` flag, "
"so if you want to reject a login based on ``is_active`` being ``False``, "
"it's up to you to check that in your own login view. However, the :class:"
"`~django.contrib.auth.forms.AuthenticationForm` used by the :func:`~django."
"contrib.auth.views.login` view *does* perform this check, as do the "
"permission-checking methods such as :meth:`~models.User.has_perm` and the "
"authentication in the Django admin. All of those functions/methods will "
"return ``False`` for inactive users."
msgstr ""

# d754d4a56621407fb4a4a14fc4a31056
#: ../../topics/auth.txt:115
msgid ""
"Boolean. Designates that this user has all permissions without explicitly "
"assigning them."
msgstr ""

# f186b7fc08c64af9b2b04392e833c934
#: ../../topics/auth.txt:120
msgid ""
"A datetime of the user's last login. Is set to the current date/time by "
"default."
msgstr ""

# a8cd618faa8149ca9304d64813544a93
#: ../../topics/auth.txt:125
msgid ""
"A datetime designating when the account was created. Is set to the current "
"date/time by default when the account is created."
msgstr ""

# 5225aac5f57047d7bfcd52641aa4697c
# 6e8b89dcdde847009b9474964755c17a
# 3b0e5c4cce2e4c05800ebd943b96287a
# ae68d8eafc654998becd1f13fcf4fb0e
# 067630b8005e4228b3664b3874a1adde
#: ../../topics/auth.txt:129 ../../topics/auth.txt:1589
#: ../../topics/pagination.txt:169 ../../topics/pagination.txt:240
#: ../../topics/testing.txt:2078
msgid "Methods"
msgstr ""

# f4918f3225834ae4bf8a8487b8ecc19a
#: ../../topics/auth.txt:133
msgid ""
":class:`~django.contrib.auth.models.User` objects have two many-to-many "
"fields: ``groups`` and ``user_permissions``. :class:`~django.contrib.auth."
"models.User` objects can access their related objects in the same way as any "
"other :doc:`Django model </topics/db/models>`:"
msgstr ""

# 5a1091a5ff284217919110ac49f7e60b
#: ../../topics/auth.txt:150
msgid ""
"In addition to those automatic API methods, :class:`~django.contrib.auth."
"models.User` objects have the following custom methods:"
msgstr ""

# 8454cfe7ac254a63bf045f54c2383f0c
#: ../../topics/auth.txt:156
msgid ""
"Always returns ``False``. This is a way of differentiating :class:`~django."
"contrib.auth.models.User` and :class:`~django.contrib.auth.models."
"AnonymousUser` objects. Generally, you should prefer using :meth:`~django."
"contrib.auth.models.User.is_authenticated()` to this method."
msgstr ""

# 130fb7ea54a74bf9b1d697fc37f05377
#: ../../topics/auth.txt:165
msgid ""
"Always returns ``True``. This is a way to tell if the user has been "
"authenticated. This does not imply any permissions, and doesn't check if the "
"user is active - it only indicates that the user has provided a valid "
"username and password."
msgstr ""

# 7dfa3868286d46088f49cf626b15b9a0
#: ../../topics/auth.txt:172
msgid ""
"Returns the :attr:`~django.contrib.auth.models.User.first_name` plus the :"
"attr:`~django.contrib.auth.models.User.last_name`, with a space in between."
msgstr ""

# 4c81d8a4614e4c2281a19a5c10262204
#: ../../topics/auth.txt:178
msgid ""
"Sets the user's password to the given raw string, taking care of the "
"password hashing. Doesn't save the :class:`~django.contrib.auth.models.User` "
"object."
msgstr ""

# 7b38aea72597416e93d9da9070a3d040
#: ../../topics/auth.txt:184
msgid ""
"Returns ``True`` if the given raw string is the correct password for the "
"user. (This takes care of the password hashing in making the comparison.)"
msgstr ""

# 17716537ce5b42a88b5f5c11a4cd3042
#: ../../topics/auth.txt:190
msgid ""
"Marks the user as having no password set.  This isn't the same as having a "
"blank string for a password. :meth:`~django.contrib.auth.models.User."
"check_password()` for this user will never return ``True``. Doesn't save "
"the :class:`~django.contrib.auth.models.User` object."
msgstr ""

# 259e6672425d4d9f8c1bd419de6b1f99
#: ../../topics/auth.txt:196
msgid ""
"You may need this if authentication for your application takes place against "
"an existing external source such as an LDAP directory."
msgstr ""

# 7c80f7d519a34bfdafc1452af58cc774
#: ../../topics/auth.txt:201
msgid ""
"Returns ``False`` if :meth:`~django.contrib.auth.models.User."
"set_unusable_password()` has been called for this user."
msgstr ""

# 7ff9cdde7e3848cab4910d689abdef0f
#: ../../topics/auth.txt:207
msgid ""
"Returns a set of permission strings that the user has, through his/her "
"groups."
msgstr ""

# 1694e4592e774fa3af652f622244dbde
#: ../../topics/auth.txt:212
msgid ""
"If ``obj`` is passed in, only returns the group permissions for this "
"specific object."
msgstr ""

# b872d5fa178f43e986081da83c0b4c5c
#: ../../topics/auth.txt:217
msgid ""
"Returns a set of permission strings that the user has, both through group "
"and user permissions."
msgstr ""

# 53c10a0707714875b573162c71de4457
#: ../../topics/auth.txt:222
msgid ""
"If ``obj`` is passed in, only returns the permissions for this specific "
"object."
msgstr ""

# fc8402e0cf4e4e9c829ed7bda7f33e57
#: ../../topics/auth.txt:227
msgid ""
"Returns ``True`` if the user has the specified permission, where perm is in "
"the format ``\"<app label>.<permission codename>\"``. (see `permissions`_ "
"section below). If the user is inactive, this method will always return "
"``False``."
msgstr ""

# b4e91ff47538479b93fd1f5b36ddcf3e
#: ../../topics/auth.txt:234
msgid ""
"If ``obj`` is passed in, this method won't check for a permission for the "
"model, but for this specific object."
msgstr ""

# c0fdfe1e6fb3418bb48f0f52e7438c7f
#: ../../topics/auth.txt:239
msgid ""
"Returns ``True`` if the user has each of the specified permissions, where "
"each perm is in the format ``\"<app label>.<permission codename>\"``. If the "
"user is inactive, this method will always return ``False``."
msgstr ""

# 45a3b95ebc6b4daabbda2fef6ab19f8b
#: ../../topics/auth.txt:246
msgid ""
"If ``obj`` is passed in, this method won't check for permissions for the "
"model, but for the specific object."
msgstr ""

# 46113f5635ff430081037745e897b75d
#: ../../topics/auth.txt:251
msgid ""
"Returns ``True`` if the user has any permissions in the given package (the "
"Django app label). If the user is inactive, this method will always return "
"``False``."
msgstr ""

# dcbe3ce5ec474d1689dad1adbba3234c
#: ../../topics/auth.txt:257
msgid ""
"Sends an email to the user. If :attr:`~django.contrib.auth.models.User."
"from_email` is ``None``, Django uses the :setting:`DEFAULT_FROM_EMAIL`."
msgstr ""

# a61e313654a04e4b8c04a8fb2e4b0ef1
#: ../../topics/auth.txt:263
msgid ""
"Returns a site-specific profile for this user. Raises :exc:`django.contrib."
"auth.models.SiteProfileNotAvailable` if the current site doesn't allow "
"profiles, or :exc:`django.core.exceptions.ObjectDoesNotExist` if the user "
"does not have a profile. For information on how to define a site-specific "
"user profile, see the section on `storing additional user information`_ "
"below."
msgstr ""

# ff26b51144984da192da4381e017aadc
#: ../../topics/auth.txt:273
msgid "Manager functions"
msgstr ""

# 4cdaf8d3a57b4872b9cf4bf96f300241
#: ../../topics/auth.txt:277
msgid ""
"The :class:`~django.contrib.auth.models.User` model has a custom manager "
"that has the following helper functions:"
msgstr ""

# 2cbfe44a07004574b3bc510b1aff99f5
#: ../../topics/auth.txt:287
msgid "Creates, saves and returns a :class:`~django.contrib.auth.models.User`."
msgstr ""

# 40493a1bf06645c6926c06d2bd2fb873
#: ../../topics/auth.txt:289
msgid ""
"The :attr:`~django.contrib.auth.models.User.username` and :attr:`~django."
"contrib.auth.models.User.password` are set as given. The domain portion of :"
"attr:`~django.contrib.auth.models.User.email` is automatically converted to "
"lowercase, and the returned :class:`~django.contrib.auth.models.User` object "
"will have :attr:`~models.User.is_active` set to ``True``."
msgstr ""

# 81045d17f1ef45078bd99545c1b5647e
#: ../../topics/auth.txt:296
msgid ""
"If no password is provided, :meth:`~django.contrib.auth.models.User."
"set_unusable_password()` will be called."
msgstr ""

# 70838cb5b28840aca6b9c024a1b9e94c
#: ../../topics/auth.txt:300
msgid "See `Creating users`_ for example usage."
msgstr ""

# 3e7766b42fcb4a588b8d332402dc588e
#: ../../topics/auth.txt:304
msgid ""
"Returns a random password with the given length and given string of allowed "
"characters. (Note that the default value of ``allowed_chars`` doesn't "
"contain letters that can cause user confusion, including:"
msgstr ""

# 173b242f4d5f438d9680ba4d4bfc1e60
#: ../../topics/auth.txt:308
msgid ""
"``i``, ``l``, ``I``, and ``1`` (lowercase letter i, lowercase letter L, "
"uppercase letter i, and the number one)"
msgstr ""

# b2fe8bc90e16454b80c2f8f147d8761f
#: ../../topics/auth.txt:310
msgid ""
"``o``, ``O``, and ``0`` (uppercase letter o, lowercase letter o, and zero)"
msgstr ""

# f2d2e7adc9d8475cb3b4f3bd821a832a
#: ../../topics/auth.txt:314
msgid "Basic usage"
msgstr ""

# 96b045a15e8043ed9f687b308ae28e44
#: ../../topics/auth.txt:319
msgid "Creating users"
msgstr ""

# f5683ab7877a4ee2813001e0b1cce2ea
#: ../../topics/auth.txt:321
msgid ""
"The most basic way to create users is to use the :meth:`~django.contrib.auth."
"models.UserManager.create_user` helper function that comes with Django::"
msgstr ""

# 08522acfbecc471d879bc3844f1ad3fa
#: ../../topics/auth.txt:334
msgid ""
"You can also create users using the Django admin site. Assuming you've "
"enabled the admin site and hooked it to the URL ``/admin/``, the \"Add user"
"\" page is at ``/admin/auth/user/add/``. You should also see a link to "
"\"Users\" in the \"Auth\" section of the main admin index page. The \"Add "
"user\" admin page is different than standard admin pages in that it requires "
"you to choose a username and password before allowing you to edit the rest "
"of the user's fields."
msgstr ""

# 0c4774d94376489aaa6464620bfb04ef
#: ../../topics/auth.txt:341
msgid ""
"Also note: if you want your own user account to be able to create users "
"using the Django admin site, you'll need to give yourself permission to add "
"users *and* change users (i.e., the \"Add user\" and \"Change user\" "
"permissions). If your account has permission to add users but not to change "
"them, you won't be able to add users. Why? Because if you have permission to "
"add users, you have the power to create superusers, which can then, in turn, "
"change other users. So Django requires add *and* change permissions as a "
"slight security measure."
msgstr ""

# 0724a9ce09704c73911bd263fac8a430
#: ../../topics/auth.txt:350
msgid "Changing passwords"
msgstr ""

# 0ce1dc1828a74cf198cc7e52903aaae4
#: ../../topics/auth.txt:355
msgid ""
":djadmin:`manage.py changepassword *username* <changepassword>` offers a "
"method of changing a User's password from the command line. It prompts you "
"to change the password of a given user which you must enter twice. If they "
"both match, the new password will be changed immediately. If you do not "
"supply a user, the command will attempt to change the password whose "
"username matches the current user."
msgstr ""

# 3dd40feaf2cf42a2a8eb28eadb3ab481
#: ../../topics/auth.txt:362
msgid ""
"You can also change a password programmatically, using :meth:`~django."
"contrib.auth.models.User.set_password()`:"
msgstr ""

# 2028e6eccbbd47d6961cbeb544829b6d
#: ../../topics/auth.txt:372
msgid ""
"Don't set the :attr:`~django.contrib.auth.models.User.password` attribute "
"directly unless you know what you're doing. This is explained in the next "
"section."
msgstr ""

# 0e53f583047d41bda65ee17d46133e51
#: ../../topics/auth.txt:379
msgid "How Django stores passwords"
msgstr ""

# 97aecbf9b71549c6b991482f5694cac4
#: ../../topics/auth.txt:386
msgid ""
"The :attr:`~django.contrib.auth.models.User.password` attribute of a :class:"
"`~django.contrib.auth.models.User` object is a string in this format::"
msgstr ""

# 5427980849ea4d30ae8fdc1cfcc8999d
#: ../../topics/auth.txt:391
msgid ""
"That's a storage algorithm, and hash, separated by the dollar-sign "
"character. The algorithm is one of a number of one way hashing or password "
"storage algorithms Django can use; see below. The hash is the result of the "
"one- way function."
msgstr ""

# 673775b69d4a41db8adaf487d6edcc5a
#: ../../topics/auth.txt:396
msgid ""
"By default, Django uses the PBKDF2_ algorithm with a SHA256 hash, a password "
"stretching mechanism recommended by NIST_. This should be sufficient for "
"most users: it's quite secure, requiring massive amounts of computing time "
"to break."
msgstr ""

# d82695613edb4d139b1b2c6cc6564f6c
#: ../../topics/auth.txt:401
msgid ""
"However, depending on your requirements, you may choose a different "
"algorithm, or even use a custom algorithm to match your specific security "
"situation. Again, most users shouldn't need to do this -- if you're not "
"sure, you probably don't.  If you do, please read on:"
msgstr ""

# 38d777701ac04d0fa30f04bb01bc4c7e
#: ../../topics/auth.txt:406
msgid ""
"Django chooses the an algorithm by consulting the :setting:"
"`PASSWORD_HASHERS` setting. This is a list of hashing algorithm classes that "
"this Django installation supports. The first entry in this list (that is, "
"``settings.PASSWORD_HASHERS[0]``) will be used to store passwords, and all "
"the other entries are valid hashers that can be used to check existing "
"passwords. This means that if you want to use a different algorithm, you'll "
"need to modify :setting:`PASSWORD_HASHERS` to list your prefered algorithm "
"first in the list."
msgstr ""

# 0f7cef8cfb874c28a4f0b20cfbf49aaf
#: ../../topics/auth.txt:414
msgid "The default for :setting:`PASSWORD_HASHERS` is::"
msgstr ""

# c23165101cd94098b35503f30a3b42ba
#: ../../topics/auth.txt:425
msgid ""
"This means that Django will use PBKDF2_ to store all passwords, but will "
"support checking passwords stored with PBKDF2SHA1, bcrypt_, SHA1_, etc. The "
"next few sections describe a couple of common ways advanced users may want "
"to modify this setting."
msgstr ""

# 544ac8a41c6a4818bd0d013585ef6d24
#: ../../topics/auth.txt:431
msgid "Using bcrypt with Django"
msgstr ""

# 8349a8706a2d4d529c761fbad24c09b5
#: ../../topics/auth.txt:433
msgid ""
"Bcrypt_ is a popular password storage algorithm that's specifically designed "
"for long-term password storage. It's not the default used by Django since it "
"requires the use of third-party libraries, but since many people may want to "
"use it Django supports bcrypt with minimal effort."
msgstr ""

# 46f40beb57c4493d8b48223002c4708c
#: ../../topics/auth.txt:438
msgid "To use Bcrypt as your default storage algorithm, do the following:"
msgstr ""

# 8662648b7556493b897fe5a0bba70223
#: ../../topics/auth.txt:440
msgid ""
"Install the `py-bcrypt`_ library (probably by running ``sudo pip install py-"
"bcrypt``, or downloading the library and installing it with ``python setup."
"py install``)."
msgstr ""

# 14b30051733341229cc998ed14b0fa87
#: ../../topics/auth.txt:444
msgid ""
"Modify :setting:`PASSWORD_HASHERS` to list ``BCryptPasswordHasher`` first. "
"That is, in your settings file, you'd put::"
msgstr ""

# 8c8f635b10a14dd6a4e0a0834c0cb1fc
#: ../../topics/auth.txt:456
msgid ""
"(You need to keep the other entries in this list, or else Django won't be "
"able to upgrade passwords; see below)."
msgstr ""

# d2092ce44fb74d41bd209a419b17f24f
#: ../../topics/auth.txt:459
msgid ""
"That's it -- now your Django install will use Bcrypt as the default storage "
"algorithm."
msgstr ""

# 32b518b4c5024b6f98beb3822a0fe882
#: ../../topics/auth.txt:464
msgid ""
"There are several other implementations that allow bcrypt to be used with "
"Django. Django's bcrypt support is NOT directly compatible with these. To "
"upgrade, you will need to modify the hashes in your database to be in the "
"form `bcrypt$(raw bcrypt output)`. For example: `bcrypt$$2a"
"$12$NT0I31Sa7ihGEWpka9ASYrEFkhuTNeBQ2xfZskIiiJeyFXhRgS.Sy`."
msgstr ""

# 10a993ac1bee41fb960654f26fbfd423
#: ../../topics/auth.txt:472
msgid "Increasing the work factor"
msgstr ""

# f3adac9fdd284df78681839a738b2cec
#: ../../topics/auth.txt:474
msgid ""
"The PDKDF2 and bcrypt algorithms use a number of iterations or rounds of "
"hashing. This deliberately slows down attackers, making attacks against "
"hashed passwords harder. However, as computing power increases, the number "
"of iterations needs to be increased. We've chosen a reasonable default (and "
"will increase it with each release of Django), but you may wish to tune it "
"up or down, depending on your security needs and available processing power. "
"To do so, you'll subclass the appropriate algorithm and override the "
"``iterations`` parameters. For example, to increase the number of iterations "
"used by the default PDKDF2 algorithm:"
msgstr ""

# 24edbb7c14ed4bcab74585cabee23cd4
#: ../../topics/auth.txt:484
msgid ""
"Create a subclass of ``django.contrib.auth.hashers.PBKDF2PasswordHasher``::"
msgstr ""

# 820709237ad042d1b0e644c41982a120
#: ../../topics/auth.txt:494
msgid ""
"Save this somewhere in your project. For example, you might put this in a "
"file like ``myproject/hashers.py``."
msgstr ""

# f8374b35f7aa4ef5a54df28e9dbcb147
#: ../../topics/auth.txt:497
msgid "Add your new hasher as the first entry in :setting:`PASSWORD_HASHERS`::"
msgstr ""

# 1f33f44c70c74ec9ab28d2138d5873a4
#: ../../topics/auth.txt:510
msgid ""
"That's it -- now your Django install will use more iterations when it stores "
"passwords using PBKDF2."
msgstr ""

# 9d6f97311be84ba1a5ce7b75d73fe208
#: ../../topics/auth.txt:514
msgid "Password upgrading"
msgstr ""

# 9795bdbe22c14d57b23cfae54519b73e
#: ../../topics/auth.txt:516
msgid ""
"When users log in, if their passwords are stored with anything other than "
"the preferred algorithm, Django will automatically upgrade the algorithm to "
"the preferred one. This means that old installs of Django will get "
"automatically more secure as users log in, and it also means that you can "
"switch to new (and better) storage algorithms as they get invented."
msgstr ""

# 8a66c92de45d4a8d8deb5e341b74766a
#: ../../topics/auth.txt:522
msgid ""
"However, Django can only upgrade passwords that use algorithms mentioned in :"
"setting:`PASSWORD_HASHERS`, so as you upgrade to new systems you should make "
"sure never to *remove* entries from this list. If you do, users using un- "
"mentioned algorithms won't be able to upgrade."
msgstr ""

# 72279d9ca61c470694c34387c68e6d6d
#: ../../topics/auth.txt:534
msgid "Anonymous users"
msgstr ""

# f9d34a4c59c446d6a114b8bfb1693120
#: ../../topics/auth.txt:538
msgid ""
":class:`django.contrib.auth.models.AnonymousUser` is a class that implements "
"the :class:`django.contrib.auth.models.User` interface, with these "
"differences:"
msgstr ""

# 94549cbe8fd444309d0e9dcd06895f84
#: ../../topics/auth.txt:542
msgid ":attr:`~django.contrib.auth.models.User.id` is always ``None``."
msgstr ""

# f3c4cedcc7bc4049b3a062d21137ee7a
#: ../../topics/auth.txt:543
msgid ""
":attr:`~django.contrib.auth.models.User.is_staff` and :attr:`~django.contrib."
"auth.models.User.is_superuser` are always ``False``."
msgstr ""

# 8c8e05d3e17e44018e0c4f07b08ab889
#: ../../topics/auth.txt:546
msgid ":attr:`~django.contrib.auth.models.User.is_active` is always ``False``."
msgstr ""

# 1346bed9b18e4efb88dc7ba9f4a2cb47
#: ../../topics/auth.txt:547
msgid ""
":attr:`~django.contrib.auth.models.User.groups` and :attr:`~django.contrib."
"auth.models.User.user_permissions` are always empty."
msgstr ""

# 94f840f4c7d24caf8e3cffd49556e58a
#: ../../topics/auth.txt:550
msgid ""
":meth:`~django.contrib.auth.models.User.is_anonymous()` returns ``True`` "
"instead of ``False``."
msgstr ""

# 90159d6d1b274d2c947a322a4fda71b9
#: ../../topics/auth.txt:552
msgid ""
":meth:`~django.contrib.auth.models.User.is_authenticated()` returns "
"``False`` instead of ``True``."
msgstr ""

# f6fe7f80fb2f44fea7c3d6d036e6a387
#: ../../topics/auth.txt:554
msgid ""
":meth:`~django.contrib.auth.models.User.set_password()`, :meth:`~django."
"contrib.auth.models.User.check_password()`, :meth:`~django.contrib.auth."
"models.User.save()`, :meth:`~django.contrib.auth.models.User.delete()`, :"
"meth:`~django.contrib.auth.models.User.set_groups()` and :meth:`~django."
"contrib.auth.models.User.set_permissions()` raise :exc:`NotImplementedError`."
msgstr ""

# df5fc316afa942949783f430acae6f6a
#: ../../topics/auth.txt:562
msgid ""
"In practice, you probably won't need to use :class:`~django.contrib.auth."
"models.AnonymousUser` objects on your own, but they're used by Web requests, "
"as explained in the next section."
msgstr ""

# d6252e259b4545a4be1b8fa2f089daa2
#: ../../topics/auth.txt:569
msgid "Creating superusers"
msgstr ""

# c1887165baf04cc2abe7282f3bb869c7
#: ../../topics/auth.txt:571
msgid ""
":djadmin:`manage.py syncdb <syncdb>` prompts you to create a superuser the "
"first time you run it after adding ``'django.contrib.auth'`` to your :"
"setting:`INSTALLED_APPS`. If you need to create a superuser at a later date, "
"you can use a command line utility::"
msgstr ""

# 090df700e2944621b40fa313fd103ee6
#: ../../topics/auth.txt:578
msgid ""
"You will be prompted for a password. After you enter one, the user will be "
"created immediately. If you leave off the :djadminopt:`--username` or the :"
"djadminopt:`--email` options, it will prompt you for those values."
msgstr ""

# ebb8b4070afc4dd89757895a9e3f1ab9
#: ../../topics/auth.txt:582
msgid ""
"If you're using an older release of Django, the old way of creating a "
"superuser on the command line still works::"
msgstr ""

# aca2faecc274444a8f0ddf84fd73f750
#: ../../topics/auth.txt:587
msgid ""
"...where :file:`/path/to` is the path to the Django codebase on your "
"filesystem. The ``manage.py`` command is preferred because it figures out "
"the correct path and environment for you."
msgstr ""

# 31b4a9da03e44754b530bd6b69e8f56e
#: ../../topics/auth.txt:594
msgid "Storing additional information about users"
msgstr ""

# 71eb7ac5c24b44f1b8220d4f7a71caec
#: ../../topics/auth.txt:596
msgid ""
"If you'd like to store additional information related to your users, Django "
"provides a method to specify a site-specific related model -- termed a "
"\"user profile\" -- for this purpose."
msgstr ""

# d1daaa3a584b46d9b3c1c32788b863ff
#: ../../topics/auth.txt:600
msgid ""
"To make use of this feature, define a model with fields for the additional "
"information you'd like to store, or additional methods you'd like to have "
"available, and also add a :class:`~django.db.models.Field.OneToOneField` "
"named ``user`` from your model to the :class:`~django.contrib.auth.models."
"User` model. This will ensure only one instance of your model can be created "
"for each :class:`~django.contrib.auth.models.User`. For example::"
msgstr ""

# 3a989d6213074b999208940bf79fcef6
#: ../../topics/auth.txt:619
msgid ""
"To indicate that this model is the user profile model for a given site, fill "
"in the setting :setting:`AUTH_PROFILE_MODULE` with a string consisting of "
"the following items, separated by a dot:"
msgstr ""

# 7cb47ee9b23b41b195c46715252e1627
#: ../../topics/auth.txt:623
msgid ""
"The name of the application (case sensitive) in which the user profile model "
"is defined (in other words, the name which was passed to :djadmin:`manage.py "
"startapp <startapp>` to create the application)."
msgstr ""

# 0e081d3934bc455cb1546f86980f3e51
#: ../../topics/auth.txt:628
msgid "The name of the model (not case sensitive) class."
msgstr ""

# ac0064e1a222469b84d781d20de47018
#: ../../topics/auth.txt:630
msgid ""
"For example, if the profile model was a class named ``UserProfile`` and was "
"defined inside an application named ``accounts``, the appropriate setting "
"would be::"
msgstr ""

# a62102c0ced946bea9d788552ab49602
#: ../../topics/auth.txt:636
msgid ""
"When a user profile model has been defined and specified in this manner, "
"each :class:`~django.contrib.auth.models.User` object will have a method -- :"
"class:`~django.contrib.auth.models.User.get_profile()` -- which returns the "
"instance of the user profile model associated with that :class:`~django."
"contrib.auth.models.User`."
msgstr ""

# 0960ff9347464944beeaaa0ae80b7853
#: ../../topics/auth.txt:642
msgid ""
"The method :class:`~django.contrib.auth.models.User.get_profile()` does not "
"create a profile if one does not exist. You need to register a handler for "
"the User model's :attr:`django.db.models.signals.post_save` signal and, in "
"the handler, if ``created`` is ``True``, create the associated user profile::"
msgstr ""

# 268a72bf0ee743e5a1c469998521df77
#: ../../topics/auth.txt:665
msgid "Authentication in Web requests"
msgstr ""

# 0d323179f4a4465888dae5444ee73626
#: ../../topics/auth.txt:667
msgid ""
"Until now, this document has dealt with the low-level APIs for manipulating "
"authentication-related objects. On a higher level, Django can hook this "
"authentication framework into its system of :class:`request objects <django."
"http.HttpRequest>`."
msgstr ""

# ff2d025273bd4844897f594e07a26b1e
#: ../../topics/auth.txt:672
msgid ""
"First, install the :class:`~django.contrib.sessions.middleware."
"SessionMiddleware` and :class:`~django.contrib.auth.middleware."
"AuthenticationMiddleware` middlewares by adding them to your :setting:"
"`MIDDLEWARE_CLASSES` setting. See the :doc:`session documentation </topics/"
"http/sessions>` for more information."
msgstr ""

# db340b4f9a034fa8906d06e0ca16a04e
#: ../../topics/auth.txt:678
msgid ""
"Once you have those middlewares installed, you'll be able to access :attr:"
"`request.user <django.http.HttpRequest.user>` in views. :attr:`request.user "
"<django.http.HttpRequest.user>` will give you a :class:`~django.contrib.auth."
"models.User` object representing the currently logged-in user. If a user "
"isn't currently logged in, :attr:`request.user <django.http.HttpRequest."
"user>` will be set to an instance of :class:`~django.contrib.auth.models."
"AnonymousUser` (see the previous section). You can tell them apart with :"
"meth:`~django.contrib.auth.models.User.is_authenticated()`, like so::"
msgstr ""

# 2db9956d47004c60b71d6daa1be093bb
#: ../../topics/auth.txt:696
msgid "How to log a user in"
msgstr ""

# 183285fcfa334647b36aca663f2eba5f
#: ../../topics/auth.txt:698
msgid ""
"Django provides two functions in :mod:`django.contrib.auth`: :func:`~django."
"contrib.auth.authenticate()` and :func:`~django.contrib.auth.login()`."
msgstr ""

# b4b60725d0df4e9aa357be06d9457d9c
#: ../../topics/auth.txt:704
msgid ""
"To authenticate a given username and password, use :func:`~django.contrib."
"auth.authenticate()`. It takes two keyword arguments, ``username`` and "
"``password``, and it returns a :class:`~django.contrib.auth.models.User` "
"object if the password is valid for the given username. If the password is "
"invalid, :func:`~django.contrib.auth.authenticate()` returns ``None``. "
"Example::"
msgstr ""

# 9f26e70e2b3b4eb197615b142e2d7d1a
#: ../../topics/auth.txt:723
msgid ""
"To log a user in, in a view, use :func:`~django.contrib.auth.login()`. It "
"takes an :class:`~django.http.HttpRequest` object and a :class:`~django."
"contrib.auth.models.User` object. :func:`~django.contrib.auth.login()` saves "
"the user's ID in the session, using Django's session framework, so, as "
"mentioned above, you'll need to make sure to have the session middleware "
"installed."
msgstr ""

# 29cce53fcd8b45ffb6ddc1a833eece2c
#: ../../topics/auth.txt:730
msgid ""
"This example shows how you might use both :func:`~django.contrib.auth."
"authenticate()` and :func:`~django.contrib.auth.login()`::"
msgstr ""

# f50317e2dd0647468123b3b59d8f017d
#: ../../topics/auth.txt:751
msgid ""
"When you're manually logging a user in, you *must* call :func:`~django."
"contrib.auth.authenticate()` before you call :func:`~django.contrib.auth."
"login()`. :func:`~django.contrib.auth.authenticate()` sets an attribute on "
"the :class:`~django.contrib.auth.models.User` noting which authentication "
"backend successfully authenticated that user (see the `backends "
"documentation`_ for details), and this information is needed later during "
"the login process."
msgstr ""

# 1ef330a53c074d4c8a9b6e9d8f44df70
#: ../../topics/auth.txt:763
msgid "Manually managing a user's password"
msgstr ""

# 8bd8b88a9cfd4673831824e991b39620
#: ../../topics/auth.txt:776
msgid ""
"If you'd like to manually authenticate a user by comparing a plain-text "
"password to the hashed password in the database, use the convenience "
"function :func:`django.contrib.auth.hashers.check_password`. It takes two "
"arguments: the plain-text password to check, and the full value of a user's "
"``password`` field in the database to check against, and returns ``True`` if "
"they match, ``False`` otherwise."
msgstr ""

# 1c3af9350e014ffca90c89a82d8753da
#: ../../topics/auth.txt:787
msgid ""
"Creates a hashed password in the format used by this application. It takes "
"two arguments: hashing algorithm to use and the password in plain-text. "
"Currently supported algorithms are: ``'sha1'``, ``'md5'`` and ``'crypt'`` if "
"you have the ``crypt`` library installed. If the second argument is "
"``None``, an unusable password is returned (a one that will be never "
"accepted by :func:`django.contrib.auth.hashers.check_password`)."
msgstr ""

# 57e383b47ba349a38716787b9f90ede0
#: ../../topics/auth.txt:798
msgid ""
"Checks if the given string is a hashed password that has a chance of being "
"verified against :func:`django.contrib.auth.hashers.check_password`."
msgstr ""

# 71d4842f180c431286bc6ca2ee1dd038
#: ../../topics/auth.txt:803
msgid "How to log a user out"
msgstr ""

# 3bec698d09e046b1b5f0d080ba1d6a08
#: ../../topics/auth.txt:809
msgid ""
"To log out a user who has been logged in via :func:`django.contrib.auth.login"
"()`, use :func:`django.contrib.auth.logout()` within your view. It takes an :"
"class:`~django.http.HttpRequest` object and has no return value. Example::"
msgstr ""

# 6f029dd27567418f93ae6471b6681614
#: ../../topics/auth.txt:821
msgid ""
"Note that :func:`~django.contrib.auth.logout()` doesn't throw any errors if "
"the user wasn't logged in."
msgstr ""

# 02be13df65d44e5784b12daa94093ed8
#: ../../topics/auth.txt:824
msgid ""
"When you call :func:`~django.contrib.auth.logout()`, the session data for "
"the current request is completely cleaned out. All existing data is removed. "
"This is to prevent another person from using the same Web browser to log in "
"and have access to the previous user's session data. If you want to put "
"anything into the session that will be available to the user immediately "
"after logging out, do that *after* calling :func:`django.contrib.auth.logout"
"()`."
msgstr ""

# 387e89aa1ff44d6cac9eabce46482df5
#: ../../topics/auth.txt:835
msgid "Login and logout signals"
msgstr ""

# a9cdc450a7e049c2b10d223d020ddb57
#: ../../topics/auth.txt:839
msgid ""
"The auth framework uses two :doc:`signals </topics/signals>` that can be "
"used for notification when a user logs in or out."
msgstr ""

# a6979600a23944749232a8f02a169e50
#: ../../topics/auth.txt:844
msgid "Sent when a user logs in successfully."
msgstr ""

# c4983178e5d74b02b8cf55756b4ac36e
#: ../../topics/auth.txt:846
msgid "Arguments sent with this signal:"
msgstr ""

# 4180f662eb10492484f361b50d75e6dc
#: ../../topics/auth.txt:849
msgid "As above: the class of the user that just logged in."
msgstr ""

# 0eef4564653a47699aeba66e5d4e970f
# e41031392a354a54baadf1e785649895
#: ../../topics/auth.txt:852 ../../topics/auth.txt:866
msgid "The current :class:`~django.http.HttpRequest` instance."
msgstr ""

# 220ea6afdc2b49a3b1449129b7a83c8b
#: ../../topics/auth.txt:855
msgid "The user instance that just logged in."
msgstr ""

# f39490b5696c4162a155bdacce997c8d
#: ../../topics/auth.txt:859
msgid "Sent when the logout method is called."
msgstr ""

# 0e4110feefa249e8acadb2104e96bb70
#: ../../topics/auth.txt:862
msgid ""
"As above: the class of the user that just logged out or ``None`` if the user "
"was not authenticated."
msgstr ""

# 0a059c48de6a48c8a50aed9ba7fb0577
#: ../../topics/auth.txt:869
msgid ""
"The user instance that just logged out or ``None`` if the user was not "
"authenticated."
msgstr ""

# 1e1843885df4429f8d9ce6764a6a46aa
#: ../../topics/auth.txt:873
msgid "Limiting access to logged-in users"
msgstr ""

# 02e5eb9046dd4110ab3bc60763b7e18c
#: ../../topics/auth.txt:876
msgid "The raw way"
msgstr ""

# 5868f1ca5b404aef88fcccf2d645d316
#: ../../topics/auth.txt:878
msgid ""
"The simple, raw way to limit access to pages is to check :meth:`request.user."
"is_authenticated() <django.contrib.auth.models.User.is_authenticated()>` and "
"either redirect to a login page::"
msgstr ""

# 040ba396998b49e6b959e9b0520527d6
#: ../../topics/auth.txt:890
msgid "...or display an error message::"
msgstr ""

# ee574f3332704f1f9951063201df3abd
#: ../../topics/auth.txt:898
msgid "The login_required decorator"
msgstr ""

# 22254335c3ed4dfaaaae33f9e8054171
#: ../../topics/auth.txt:902
msgid ""
"As a shortcut, you can use the convenient :func:`~django.contrib.auth."
"decorators.login_required` decorator::"
msgstr ""

# 2b20b9beb24c46fc93f4a96904406904
#: ../../topics/auth.txt:911
msgid ""
":func:`~django.contrib.auth.decorators.login_required` does the following:"
msgstr ""

# 456ddaa18ab04615a08a739d82a1e2a0
#: ../../topics/auth.txt:913
msgid ""
"If the user isn't logged in, redirect to :setting:`settings.LOGIN_URL "
"<LOGIN_URL>`, passing the current absolute path in the query string. "
"Example: ``/accounts/login/?next=/polls/3/``."
msgstr ""

# 75ba2b9c2f6c40f1b040fa340a44c0a9
#: ../../topics/auth.txt:917
msgid ""
"If the user is logged in, execute the view normally. The view code is free "
"to assume the user is logged in."
msgstr ""

# 7a0373dfab914165b9f7f69c14122d10
#: ../../topics/auth.txt:920
msgid ""
"By default, the path that the user should be redirected to upon successful "
"authentication is stored in a query string parameter called ``\"next\"``. If "
"you would prefer to use a different name for this parameter, :func:`~django."
"contrib.auth.decorators.login_required` takes an optional "
"``redirect_field_name`` parameter::"
msgstr ""

# 0534bd3e482642e88d3bc6de86625344
#: ../../topics/auth.txt:932
msgid ""
"Note that if you provide a value to ``redirect_field_name``, you will most "
"likely need to customize your login template as well, since the template "
"context variable which stores the redirect path will use the value of "
"``redirect_field_name`` as its key rather than ``\"next\"`` (the default)."
msgstr ""

# 170776b8ddf84497af40b963b5491fd5
#: ../../topics/auth.txt:939
msgid ""
":func:`~django.contrib.auth.decorators.login_required` also takes an "
"optional ``login_url`` parameter. Example::"
msgstr ""

# 7d27a57279fb45bd9d75da88bdb487de
#: ../../topics/auth.txt:948
msgid ""
"Note that if you don't specify the ``login_url`` parameter, you'll need to "
"map the appropriate Django view to :setting:`settings.LOGIN_URL "
"<LOGIN_URL>`. For example, using the defaults, add the following line to "
"your URLconf::"
msgstr ""

# 75856cd61a4240af9cc129052a5f4e14
#: ../../topics/auth.txt:956
msgid "**URL name:** ``login``"
msgstr ""

# 22d30440161840598ee9d7cdfd523aed
# 162cb7cbbffe4695bbeb90f2dc6ba29e
#: ../../topics/auth.txt:958 ../../topics/auth.txt:1078
msgid ""
"See :doc:`the URL documentation </topics/http/urls>` for details on using "
"named URL patterns."
msgstr ""

# fb8b94ea583046d2acce4eb692382a4e
#: ../../topics/auth.txt:961
msgid "Here's what ``django.contrib.auth.views.login`` does:"
msgstr ""

# b70c53f662ca454aa253e1cd36663c83
#: ../../topics/auth.txt:963
msgid ""
"If called via ``GET``, it displays a login form that POSTs to the same URL. "
"More on this in a bit."
msgstr ""

# 58f7b591cf84449cb0a35f9955504d97
#: ../../topics/auth.txt:966
msgid ""
"If called via ``POST``, it tries to log the user in. If login is successful, "
"the view redirects to the URL specified in ``next``. If ``next`` isn't "
"provided, it redirects to :setting:`settings.LOGIN_REDIRECT_URL "
"<LOGIN_REDIRECT_URL>` (which defaults to ``/accounts/profile/``). If login "
"isn't successful, it redisplays the login form."
msgstr ""

# f05fb0bcdb69431b8b76b9bf935aa408
#: ../../topics/auth.txt:973
msgid ""
"It's your responsibility to provide the login form in a template called "
"``registration/login.html`` by default. This template gets passed four "
"template context variables:"
msgstr ""

# cf0fdcd953e04e7282b512e72d56aaa4
#: ../../topics/auth.txt:977
msgid ""
"``form``: A :class:`~django.forms.Form` object representing the login form. "
"See the :doc:`forms documentation </topics/forms/index>` for more on "
"``Form`` objects."
msgstr ""

# cadaf7b1ce224846aae74e7e4c71ec4c
#: ../../topics/auth.txt:981
msgid ""
"``next``: The URL to redirect to after successful login. This may contain a "
"query string, too."
msgstr ""

# e9171b2760d5460e9422b029e342e946
# 147d17c13c834164ad2bedb879f08d4a
#: ../../topics/auth.txt:984 ../../topics/auth.txt:1097
msgid ""
"``site``: The current :class:`~django.contrib.sites.models.Site`, according "
"to the :setting:`SITE_ID` setting. If you don't have the site framework "
"installed, this will be set to an instance of :class:`~django.contrib.sites."
"models.RequestSite`, which derives the site name and domain from the "
"current :class:`~django.http.HttpRequest`."
msgstr ""

# 1282e3bead9e4306819b61b140c4dfe2
# 74d61f929c4c4a0e8d01d80dcebf4850
# bdf91fd93ce44f948ab15582c8ed3e58
#: ../../topics/auth.txt:991 ../../topics/auth.txt:1104
#: ../../topics/auth.txt:1217
msgid ""
"``site_name``: An alias for ``site.name``. If you don't have the site "
"framework installed, this will be set to the value of :attr:`request.META"
"['SERVER_NAME'] <django.http.HttpRequest.META>`. For more on sites, see :doc:"
"`/ref/contrib/sites`."
msgstr ""

# 319a16bdca8d4f36a3785464e41e85eb
#: ../../topics/auth.txt:996
msgid ""
"If you'd prefer not to call the template :file:`registration/login.html`, "
"you can pass the ``template_name`` parameter via the extra arguments to the "
"view in your URLconf. For example, this URLconf line would use :file:`myapp/"
"login.html` instead::"
msgstr ""

# 9f0f9b94135c41a983adb064f4c55cbc
#: ../../topics/auth.txt:1003
msgid ""
"You can also specify the name of the ``GET`` field which contains the URL to "
"redirect to after login by passing ``redirect_field_name`` to the view. By "
"default, the field is called ``next``."
msgstr ""

# 4ec2b4672cab4015ae6ff3d012854b32
#: ../../topics/auth.txt:1007
msgid ""
"Here's a sample :file:`registration/login.html` template you can use as a "
"starting point. It assumes you have a :file:`base.html` template that "
"defines a ``content`` block:"
msgstr ""

# 300d9bdad70d44cf9ef518b553f394de
#: ../../topics/auth.txt:1043
msgid ""
"If you are using alternate authentication (see :ref:`authentication-"
"backends`) you can pass a custom authentication form to the login view via "
"the ``authentication_form`` parameter. This form must accept a ``request`` "
"keyword argument in its ``__init__`` method, and provide a ``get_user`` "
"method which returns the authenticated user object (this method is only ever "
"called after successful form validation)."
msgstr ""

# 67460d98437840b29bcfb141fc2fb545
#: ../../topics/auth.txt:1055
msgid ""
"The :func:`~views.login` view and the :ref:`other-built-in-views` now all "
"return a :class:`~django.template.response.TemplateResponse` instance, which "
"allows you to easily customize the response data before rendering. For more "
"details, see the :doc:`TemplateResponse documentation </ref/template-"
"response>`."
msgstr ""

# bba759c3030a4ccabfd69320ab280986
#: ../../topics/auth.txt:1064
msgid "Other built-in views"
msgstr ""

# 1308d325e46448a6a1909d115dd62ff4
#: ../../topics/auth.txt:1068
msgid ""
"In addition to the :func:`~views.login` view, the authentication system "
"includes a few other useful built-in views located in :mod:`django.contrib."
"auth.views`:"
msgstr ""

# 8a9fe1f51ea54cb7a0886bcbb81d73c6
#: ../../topics/auth.txt:1074
msgid "Logs a user out."
msgstr ""

# fdfdf77887bf43618bee88b9e47aeb69
#: ../../topics/auth.txt:1076
msgid "**URL name:** ``logout``"
msgstr ""

# 2f77d7d0fa7540a19e096e7ac7c99881
# ddac4209d6a34e0898d3b6bbdfdbd323
# a4c6cdc58e3e4b4691e9d00a3ebd36af
# ecc8a99acf4c4d6ba664e2b5f8327374
# 48b62f2a604247a7ab2dc5a1363323ab
# a459ce007d3b49f5b28a595bae7956a9
# 1b60f902fd7b435eb26b5099f3a45bdc
# 216074a82cb1483389fb678f342147c4
# ea89ae46412f4ac0b672adc0e86fc871
#: ../../topics/auth.txt:1081 ../../topics/auth.txt:1115
#: ../../topics/auth.txt:1126 ../../topics/auth.txt:1152
#: ../../topics/auth.txt:1175 ../../topics/auth.txt:1252
#: ../../topics/auth.txt:1264 ../../topics/auth.txt:1299
#: ../../topics/auth.txt:1318
msgid "**Optional arguments:**"
msgstr ""

# 5bd29bf50104467f9613e62c0e3b6b31
#: ../../topics/auth.txt:1083
msgid "``next_page``: The URL to redirect to after logout."
msgstr ""

# 6e9f652d0aa341ac955769f980d80c6e
#: ../../topics/auth.txt:1085
msgid ""
"``template_name``: The full name of a template to display after logging the "
"user out. Defaults to :file:`registration/logged_out.html` if no argument is "
"supplied."
msgstr ""

# a6fc15e44cfa4a69ba18908dcd453de0
#: ../../topics/auth.txt:1089
msgid ""
"``redirect_field_name``: The name of a ``GET`` field containing the URL to "
"redirect to after log out. Overrides ``next_page`` if the given ``GET`` "
"parameter is passed."
msgstr ""

# ebe55c0c10ee4c76a601a86bcf29dad3
# 7d201a4f15474fb69ad92cc8ea1ac096
# f695b76fa13b4de4ba8eb74e30a2aeae
# e1b010a468c7493087a95cc9937176b1
#: ../../topics/auth.txt:1093 ../../topics/auth.txt:1142
#: ../../topics/auth.txt:1204 ../../topics/auth.txt:1284
msgid "**Template context:**"
msgstr ""

# c638537ba0b6448280377a92f5800d57
#: ../../topics/auth.txt:1095
msgid "``title``: The string \"Logged out\", localized."
msgstr ""

# ef58f9320a3644659e24c48c4425f584
#: ../../topics/auth.txt:1111
msgid "Logs a user out, then redirects to the login page."
msgstr ""

# 299a664b9d794788bb584468df62bbfe
#: ../../topics/auth.txt:1113
msgid "**URL name:** No default URL provided"
msgstr ""

# 0e09c4fdd38a455bb124fa32d520f868
# 391d3099e6e0417abe14593881d5ee85
#: ../../topics/auth.txt:1117 ../../topics/auth.txt:1320
msgid ""
"``login_url``: The URL of the login page to redirect to. Defaults to :"
"setting:`settings.LOGIN_URL <LOGIN_URL>` if not supplied."
msgstr ""

# 9025775aaddb4115af8701c0fb797f24
#: ../../topics/auth.txt:1122
msgid "Allows a user to change their password."
msgstr ""

# 7c029d792c5a4a9681d95e471f68f784
#: ../../topics/auth.txt:1124
msgid "**URL name:** ``password_change``"
msgstr ""

# d0a55de947234ef4ba17419be04dfa0d
#: ../../topics/auth.txt:1128
msgid ""
"``template_name``: The full name of a template to use for displaying the "
"password change form. Defaults to :file:`registration/password_change_form."
"html` if not supplied."
msgstr ""

# d5a65cfc02a346caa03511c2b49e3098
#: ../../topics/auth.txt:1132
msgid ""
"``post_change_redirect``: The URL to redirect to after a successful password "
"change."
msgstr ""

# 183a74434561425385d3a18d355811f6
#: ../../topics/auth.txt:1137
msgid ""
"``password_change_form``: A custom \"change password\" form which must "
"accept a ``user`` keyword argument. The form is responsible for actually "
"changing the user's password. Defaults to :class:`~django.contrib.auth.forms."
"PasswordChangeForm`."
msgstr ""

# fcaa9a8cd7c84dcabfd982acc9328642
#: ../../topics/auth.txt:1144
msgid ""
"``form``: The password change form (see ``password_change_form`` above)."
msgstr ""

# a33e8846ce5448efbc4579f0efc62b03
#: ../../topics/auth.txt:1148
msgid "The page shown after a user has changed their password."
msgstr ""

# 6d59063b21ce47189ee38b8d7b4a6371
#: ../../topics/auth.txt:1150
msgid "**URL name:** ``password_change_done``"
msgstr ""

# 81eb59a242ad419ba76b726113319473
#: ../../topics/auth.txt:1154
msgid ""
"``template_name``: The full name of a template to use. Defaults to :file:"
"`registration/password_change_done.html` if not supplied."
msgstr ""

# fc8fa56c858f40e89de64ae169496f54
#: ../../topics/auth.txt:1160
msgid ""
"Allows a user to reset their password by generating a one-time use link that "
"can be used to reset the password, and sending that link to the user's "
"registered email address."
msgstr ""

# c1b4f0f928ee4a1a83622672d1d3d723
#: ../../topics/auth.txt:1173
msgid "**URL name:** ``password_reset``"
msgstr ""

# f516dbd21669411bb57e3d763c7cbbc3
#: ../../topics/auth.txt:1177
msgid ""
"``template_name``: The full name of a template to use for displaying the "
"password reset form. Defaults to :file:`registration/password_reset_form."
"html` if not supplied."
msgstr ""

# 365fcb2dca654f279b9bfc7ced86fba0
#: ../../topics/auth.txt:1181
msgid ""
"``email_template_name``: The full name of a template to use for generating "
"the email with the new password. Defaults to :file:`registration/"
"password_reset_email.html` if not supplied."
msgstr ""

# 6f01a07ef0e24f28b59aea574b16bcbe
#: ../../topics/auth.txt:1185
msgid ""
"``subject_template_name``: The full name of a template to use for the "
"subject of the email with the new password. Defaults to :file:`registration/"
"password_reset_subject.txt` if not supplied."
msgstr ""

# 185b00da0cb245a7ad86fce68c050c3b
#: ../../topics/auth.txt:1191
msgid ""
"``password_reset_form``: Form that will be used to set the password. "
"Defaults to :class:`~django.contrib.auth.forms.PasswordResetForm`."
msgstr ""

# 65cf0b64380a4d209e02cf8a62f0665b
# 49ed524a384c483e9279e01ef338a055
#: ../../topics/auth.txt:1194 ../../topics/auth.txt:1274
msgid ""
"``token_generator``: Instance of the class to check the password. This will "
"default to ``default_token_generator``, it's an instance of ``django.contrib."
"auth.tokens.PasswordResetTokenGenerator``."
msgstr ""

# 481359ea34944603bba3a3b67e72de99
#: ../../topics/auth.txt:1198
msgid ""
"``post_reset_redirect``: The URL to redirect to after a successful password "
"change."
msgstr ""

# 966f44f55ea14e3290143e18314e5424
#: ../../topics/auth.txt:1201
msgid ""
"``from_email``: A valid email address. By default Django uses the :setting:"
"`DEFAULT_FROM_EMAIL`."
msgstr ""

# ceb24b42330642f68967011dbd2c2c69
#: ../../topics/auth.txt:1206
msgid ""
"``form``: The form (see ``password_reset_form`` above) for resetting the "
"user's password."
msgstr ""

# 5a01f70f0a3f4c85ae72722f962075e3
#: ../../topics/auth.txt:1209
msgid "**Email template context:**"
msgstr ""

# 858413cb02264ebf829147b9827bd641
#: ../../topics/auth.txt:1211
msgid "``email``: An alias for ``user.email``"
msgstr ""

# 4ae9da2a5e29449db316f6e528ba8d50
#: ../../topics/auth.txt:1213
msgid ""
"``user``: The current :class:`~django.contrib.auth.models.User`, according "
"to the ``email`` form field. Only active users are able to reset their "
"passwords (``User.is_active is True``)."
msgstr ""

# f186b888f2584b75b87f633ed85486ee
#: ../../topics/auth.txt:1222
msgid ""
"``domain``: An alias for ``site.domain``. If you don't have the site "
"framework installed, this will be set to the value of ``request.get_host()``."
msgstr ""

# 8a7ab94e725c4d85924cd33493fc5067
#: ../../topics/auth.txt:1226
msgid "``protocol``: http or https"
msgstr ""

# 52a83b2bc7884ea5b9de709321ba9fa5
#: ../../topics/auth.txt:1228
msgid "``uid``: The user's id encoded in base 36."
msgstr ""

# 2bd60b99e5de4f2d82c9cf231e7d39ac
#: ../../topics/auth.txt:1230
msgid "``token``: Token to check that the password is valid."
msgstr ""

# 8e210dafa5d9499eae7d055beaddca1e
#: ../../topics/auth.txt:1232
msgid ""
"Sample ``registration/password_reset_email.html`` (email body template):"
msgstr ""

# 2db7d596934a4863a6f20c39ff7c9395
#: ../../topics/auth.txt:1240
msgid ""
"The same template context is used for subject template. Subject must be "
"single line plain text string."
msgstr ""

# cc6c962cdd6c43898e8b36b910c20c16
#: ../../topics/auth.txt:1246
msgid ""
"The page shown after a user has been emailed a link to reset their password. "
"This view is called by default if the :func:`password_reset` view doesn't "
"have an explicit ``post_reset_redirect`` URL set."
msgstr ""

# be30edc84fd248d3ae1b9a578f11a33d
#: ../../topics/auth.txt:1250
msgid "**URL name:** ``password_reset_done``"
msgstr ""

# cefa269dac944521b53abc3c60d57ee6
#: ../../topics/auth.txt:1254
msgid ""
"``template_name``: The full name of a template to use. Defaults to :file:"
"`registration/password_reset_done.html` if not supplied."
msgstr ""

# 49dff576a361484e8042e1ad1ac12a57
#: ../../topics/auth.txt:1260
msgid "Presents a form for entering a new password."
msgstr ""

# 6eae86e2100746ad876a5d6717921734
#: ../../topics/auth.txt:1262
msgid "**URL name:** ``password_reset_confirm``"
msgstr ""

# 9af0b9b452374333b694050141228f76
#: ../../topics/auth.txt:1266
msgid "``uidb36``: The user's id encoded in base 36. Defaults to ``None``."
msgstr ""

# c77a61401d8f4e6aa593021fd9d81777
#: ../../topics/auth.txt:1268
msgid ""
"``token``: Token to check that the password is valid. Defaults to ``None``."
msgstr ""

# 0e8fdc0c7ce14101938b874c52952a95
#: ../../topics/auth.txt:1271
msgid ""
"``template_name``: The full name of a template to display the confirm "
"password view. Default value is :file:`registration/password_reset_confirm."
"html`."
msgstr ""

# e3d94774d9554e99a934dd6a766ed08e
#: ../../topics/auth.txt:1278
msgid ""
"``set_password_form``: Form that will be used to set the password. Defaults "
"to :class:`~django.contrib.auth.forms.SetPasswordForm`"
msgstr ""

# ba19a5e6ac5f41a584a7c065e1ff6989
#: ../../topics/auth.txt:1281
msgid ""
"``post_reset_redirect``: URL to redirect after the password reset done. "
"Defaults to ``None``."
msgstr ""

# e573565406ae40e5beebd19cf3c431ec
#: ../../topics/auth.txt:1286
msgid ""
"``form``: The form (see ``set_password_form`` above) for setting the new "
"user's password."
msgstr ""

# 7530631ae2a24e9ba91010dd6cde3236
#: ../../topics/auth.txt:1289
msgid ""
"``validlink``: Boolean, True if the link (combination of uidb36 and token) "
"is valid or unused yet."
msgstr ""

# aa570985904d4410b93ba293169343ba
#: ../../topics/auth.txt:1294
msgid ""
"Presents a view which informs the user that the password has been "
"successfully changed."
msgstr ""

# 66f33647e42f42c0a58b22784aff1223
#: ../../topics/auth.txt:1297
msgid "**URL name:** ``password_reset_complete``"
msgstr ""

# d3085026ca454997913b3ae6256149e1
#: ../../topics/auth.txt:1301
msgid ""
"``template_name``: The full name of a template to display the view. Defaults "
"to :file:`registration/password_reset_complete.html`."
msgstr ""

# e08f42c398fa46dd9a2b80696d6e9af3
#: ../../topics/auth.txt:1305
msgid "Helper functions"
msgstr ""

# 2e35dbff4df94d56b90e08259337981d
#: ../../topics/auth.txt:1311
msgid ""
"Redirects to the login page, and then back to another URL after a successful "
"login."
msgstr ""

# 774715c21ed84dc08e6684a670e88e46
#: ../../topics/auth.txt:1314
msgid "**Required arguments:**"
msgstr ""

# efefe995cce2446b910f230411295e86
#: ../../topics/auth.txt:1316
msgid "``next``: The URL to redirect to after a successful login."
msgstr ""

# d4114504ea5b47b280710b07ece5314d
#: ../../topics/auth.txt:1323
msgid ""
"``redirect_field_name``: The name of a ``GET`` field containing the URL to "
"redirect to after log out. Overrides ``next`` if the given ``GET`` parameter "
"is passed."
msgstr ""

# a8229345ba8e467da8bf35527911ce25
#: ../../topics/auth.txt:1328
msgid "Built-in forms"
msgstr ""

# ab0ada57e123453ba130b26e901ec163
#: ../../topics/auth.txt:1332
msgid ""
"If you don't want to use the built-in views, but want the convenience of not "
"having to write forms for this functionality, the authentication system "
"provides several built-in forms located in :mod:`django.contrib.auth.forms`:"
msgstr ""

# 3379d7848fc3445e923b41dd5e47d380
#: ../../topics/auth.txt:1338
msgid "A form used in the admin interface to change a user's password."
msgstr ""

# c2a836ace71e4c288be63cfb79db1af0
#: ../../topics/auth.txt:1342
msgid "A form for logging a user in."
msgstr ""

# 95f97c06fc014c8b8d70456b2885bf71
#: ../../topics/auth.txt:1346
msgid "A form for allowing a user to change their password."
msgstr ""

# c501fbba0f134f53ad1e527b80300001
#: ../../topics/auth.txt:1350
msgid ""
"A form for generating and emailing a one-time use link to reset a user's "
"password."
msgstr ""

# 749f514480844920b80dddaa8fb496c5
#: ../../topics/auth.txt:1355
msgid ""
"A form that lets a user change his/her password without entering the old "
"password."
msgstr ""

# e294f115e1494bb185d3dd90bf301756
#: ../../topics/auth.txt:1360
msgid ""
"A form used in the admin interface to change a user's information and "
"permissions."
msgstr ""

# 3589b803418b46ea9326bb30e5fbea50
#: ../../topics/auth.txt:1365
msgid "A form for creating a new user."
msgstr ""

# 385e7b1f559640b985b161b8e87c676f
#: ../../topics/auth.txt:1368
msgid "Limiting access to logged-in users that pass a test"
msgstr ""

# a87dc2dda547489cb884a63ec6da56e5
#: ../../topics/auth.txt:1372
msgid ""
"To limit access based on certain permissions or some other test, you'd do "
"essentially the same thing as described in the previous section."
msgstr ""

# 659f8d31b3704864bfb200b3221ca51f
#: ../../topics/auth.txt:1375
msgid ""
"The simple way is to run your test on :attr:`request.user <django.http."
"HttpRequest.user>` in the view directly. For example, this view checks to "
"make sure the user is logged in and has the permission ``polls.can_vote``::"
msgstr ""

# 66bc5656faa5404181c39a9fc2568148
#: ../../topics/auth.txt:1387
msgid ""
"As a shortcut, you can use the convenient ``user_passes_test`` decorator::"
msgstr ""

# 1327eabf7b6b4fbbb9978e787f989fdb
#: ../../topics/auth.txt:1395
msgid ""
"We're using this particular test as a relatively simple example. However, if "
"you just want to test whether a permission is available to a user, you can "
"use the :func:`~django.contrib.auth.decorators.permission_required()` "
"decorator, described later in this document."
msgstr ""

# f516fb1987734877a4cb42af28bd5b4f
#: ../../topics/auth.txt:1400
msgid ""
":func:`~django.contrib.auth.decorators.user_passes_test` takes a required "
"argument: a callable that takes a :class:`~django.contrib.auth.models.User` "
"object and returns ``True`` if the user is allowed to view the page. Note "
"that :func:`~django.contrib.auth.decorators.user_passes_test` does not "
"automatically check that the :class:`~django.contrib.auth.models.User` is "
"not anonymous."
msgstr ""

# 7fe54bbdbe944155ae1d44a2b0268fc0
#: ../../topics/auth.txt:1408
msgid ""
":func:`~django.contrib.auth.decorators.user_passes_test()` takes an optional "
"``login_url`` argument, which lets you specify the URL for your login page (:"
"setting:`settings.LOGIN_URL <LOGIN_URL>` by default)."
msgstr ""

# 2156280a4f1b424fbd9d2fa1afc67cb7
# 7e6410520d38430aa02240c774df3b0a
# b5cc0d8163eb4eefa326b115ad9079f0
# 033451e27f004b0d8cc09d9b164ad55f
# 1b47243026dc462e8accd92a025a2caa
# 531cfc3609604b84991d094769a953db
# 75c273332665450f9abdf4e9c3936af5
# a22030a016d244da8ac9eba611da66be
# bdcf0e1c0b59413d9fe824615b6b6dc2
# 6db8bc6018c7446ab27945d1bdee501d
# a5e92a4f677241deba34e0937ce791f3
# 039c82e4567b457383e910bfb9f75bed
# 7ee4183879b946a68701d1c887c4fd41
# 9c90258c27cc4fadacc82d4ccd805906
# 2b65e82c38c74defaa73450d7f432cc3
# 48d2faef4c604185abd7aaa416de95b4
# 7b0482f78f3f4ed09e54692aaa289d61
# bbd4ac9684af4f5ba129c2d9792be17a
# 93adc2d5ce754b71b2a6d7635d55c22c
#: ../../topics/auth.txt:1412 ../../topics/db/managers.txt:147
#: ../../topics/db/queries.txt:1186 ../../topics/email.txt:271
#: ../../topics/email.txt:314 ../../topics/forms/modelforms.txt:23
#: ../../topics/http/urls.txt:571 ../../topics/i18n/formatting.txt:122
#: ../../topics/i18n/formatting.txt:142 ../../topics/i18n/timezones.txt:345
#: ../../topics/i18n/timezones.txt:358 ../../topics/i18n/timezones.txt:374
#: ../../topics/i18n/translation.txt:177 ../../topics/i18n/translation.txt:265
#: ../../topics/i18n/translation.txt:1298 ../../topics/serialization.txt:167
#: ../../topics/templates.txt:136 ../../topics/testing.txt:1348
#: ../../topics/testing.txt:1386
msgid "For example::"
msgstr ""

# 23bf7ebd22ea436d88e41589ba537b71
#: ../../topics/auth.txt:1421
msgid "The permission_required decorator"
msgstr ""

# 3c21df5b1e85420b8a686c93fc6ce762
#: ../../topics/auth.txt:1425
msgid ""
"It's a relatively common task to check whether a user has a particular "
"permission. For that reason, Django provides a shortcut for that case: the :"
"func:`~django.contrib.auth.decorators.permission_required()` decorator. "
"Using this decorator, the earlier example can be written as::"
msgstr ""

# 9753f1cf389d44ab85c96c4ee69246bd
#: ../../topics/auth.txt:1436
msgid ""
"As for the :meth:`User.has_perm` method, permission names take the form ``"
"\"<app label>.<permission codename>\"`` (i.e. ``polls.can_vote`` for a "
"permission on a model in the ``polls`` application)."
msgstr ""

# aafc0f6a503d4f50874be7ade6a86b0e
#: ../../topics/auth.txt:1440
msgid ""
"Note that :func:`~django.contrib.auth.decorators.permission_required()` also "
"takes an optional ``login_url`` parameter. Example::"
msgstr ""

# 7db446b112da45cb85ab8144f029aeed
#: ../../topics/auth.txt:1449
msgid ""
"As in the :func:`~decorators.login_required` decorator, ``login_url`` "
"defaults to :setting:`settings.LOGIN_URL <LOGIN_URL>`."
msgstr ""

# e44568a98ece42c1b490fe37ff41b48a
#: ../../topics/auth.txt:1454
msgid ""
"Added ``raise_exception`` parameter. If given, the decorator will raise :exc:"
"`~django.core.exceptions.PermissionDenied`, prompting :ref:`the 403 (HTTP "
"Forbidden) view<http_forbidden_view>` instead of redirecting to the login "
"page."
msgstr ""

# 62b829e51aec4173872d8bd35b0be935
#: ../../topics/auth.txt:1462
msgid "Limiting access to generic views"
msgstr ""

# 489c8836b5be4a979cf25a6623a8b0ba
#: ../../topics/auth.txt:1464
msgid ""
"To limit access to a :doc:`class-based generic view </ref/class-based-"
"views>`, decorate the :meth:`View.dispatch <django.views.generic.base.View."
"dispatch>` method on the class. See :ref:`decorating-class-based-views` for "
"details."
msgstr ""

# d873e4dfcf0b4c2e8ae961c5231769b7
#: ../../topics/auth.txt:1469
msgid "Function-based generic views"
msgstr ""

# f34aac06048a4a77909f50b0de64ad0a
#: ../../topics/auth.txt:1471
msgid ""
"To limit access to a :doc:`function-based generic view </ref/generic-"
"views>`, write a thin wrapper around the view, and point your URLconf to "
"your wrapper instead of the generic view itself. For example::"
msgstr ""

# 3d51a1a1da9340938156d0a1bc13b222
# 4aeb9b9c0c08488b9a708c40103b70d0
#: ../../topics/auth.txt:1484 ../../topics/auth.txt:1651
msgid "Permissions"
msgstr ""

# 3a37b45539e94ddaa053987d1b5a1081
#: ../../topics/auth.txt:1486
msgid ""
"Django comes with a simple permissions system. It provides a way to assign "
"permissions to specific users and groups of users."
msgstr ""

# cb201ab60ad24828a5b4d4d4901d51d9
#: ../../topics/auth.txt:1489
msgid ""
"It's used by the Django admin site, but you're welcome to use it in your own "
"code."
msgstr ""

# 8c5d5eda55394d2097f77dbe086a53b7
#: ../../topics/auth.txt:1492
msgid "The Django admin site uses permissions as follows:"
msgstr ""

# 615b686bce734382ae303aa2758b7416
#: ../../topics/auth.txt:1494
msgid ""
"Access to view the \"add\" form and add an object is limited to users with "
"the \"add\" permission for that type of object."
msgstr ""

# cd75205e68f741bd8f388eb5e6ffd37b
#: ../../topics/auth.txt:1496
msgid ""
"Access to view the change list, view the \"change\" form and change an "
"object is limited to users with the \"change\" permission for that type of "
"object."
msgstr ""

# a6f4cd1ec51644dcbe3b1842f7f837fe
#: ../../topics/auth.txt:1499
msgid ""
"Access to delete an object is limited to users with the \"delete\" "
"permission for that type of object."
msgstr ""

# e2daece470b942a4850f2d4fc462ce27
#: ../../topics/auth.txt:1502
msgid ""
"Permissions are set globally per type of object, not per specific object "
"instance. For example, it's possible to say \"Mary may change news stories,"
"\" but it's not currently possible to say \"Mary may change news stories, "
"but only the ones she created herself\" or \"Mary may only change news "
"stories that have a certain status, publication date or ID.\" The latter "
"functionality is something Django developers are currently discussing."
msgstr ""

# 39b2604726b5459e93d1868d96926e9b
#: ../../topics/auth.txt:1510
msgid "Default permissions"
msgstr ""

# 4fdda39e078440f9ad94036a1bc577ab
#: ../../topics/auth.txt:1512
msgid ""
"When ``django.contrib.auth`` is listed in your :setting:`INSTALLED_APPS` "
"setting, it will ensure that three default permissions -- add, change and "
"delete -- are created for each Django model defined in one of your installed "
"applications."
msgstr ""

# 7248792a05414bf7a103af93c894c4fd
#: ../../topics/auth.txt:1517
msgid ""
"These permissions will be created when you run :djadmin:`manage.py syncdb "
"<syncdb>`; the first time you run ``syncdb`` after adding ``django.contrib."
"auth`` to :setting:`INSTALLED_APPS`, the default permissions will be created "
"for all previously-installed models, as well as for any new models being "
"installed at that time. Afterward, it will create default permissions for "
"new models each time you run :djadmin:`manage.py syncdb <syncdb>`."
msgstr ""

# ecef1ac145f2498fa1aabe5745146c24
#: ../../topics/auth.txt:1525
msgid ""
"Assuming you have an application with an :attr:`~django.db.models.Options."
"app_label` ``foo`` and a model named ``Bar``, to test for basic permissions "
"you should use:"
msgstr ""

# c51af9c539fd4f8cbbd287550df6dd0d
#: ../../topics/auth.txt:1529
msgid "add: ``user.has_perm('foo.add_bar')``"
msgstr ""

# f88700e12f4548fc86943e8b750673f4
#: ../../topics/auth.txt:1530
msgid "change: ``user.has_perm('foo.change_bar')``"
msgstr ""

# 337286bdc94e425dab5741122908f7a0
#: ../../topics/auth.txt:1531
msgid "delete: ``user.has_perm('foo.delete_bar')``"
msgstr ""

# 91e45e8c4b7b46b38f1c971d84730fd5
#: ../../topics/auth.txt:1536
msgid "Custom permissions"
msgstr ""

# e597a5f0a0b345a3ad7bf5ccbaf9fede
#: ../../topics/auth.txt:1538
msgid ""
"To create custom permissions for a given model object, use the "
"``permissions`` :ref:`model Meta attribute <meta-options>`."
msgstr ""

# ba27552b3018485494207fb44c7ed95b
#: ../../topics/auth.txt:1541
msgid ""
"This example Task model creates three custom permissions, i.e., actions "
"users can or cannot do with Task instances, specific to your application::"
msgstr ""

# fc6bdfe2923b4c3b9f020984967d5374
#: ../../topics/auth.txt:1553
msgid ""
"The only thing this does is create those extra permissions when you run :"
"djadmin:`manage.py syncdb <syncdb>`. Your code is in charge of checking the "
"value of these permissions when an user is trying to access the "
"functionality provided by the application (viewing tasks, changing the "
"status of tasks, closing tasks.) Continuing the above example, the following "
"checks if a user may view tasks::"
msgstr ""

# 77f31b7f127a495d9ff40c00370bf71b
#: ../../topics/auth.txt:1572
msgid ""
":class:`~django.contrib.auth.models.Permission` objects have the following "
"fields:"
msgstr ""

# 11b62f2e90b54979b429dd031f7bd559
#: ../../topics/auth.txt:1577
msgid "Required. 50 characters or fewer. Example: ``'Can vote'``."
msgstr ""

# 148a1e404ffe47c5a9f3d001061d6caf
#: ../../topics/auth.txt:1581
msgid ""
"Required. A reference to the ``django_content_type`` database table, which "
"contains a record for each installed Django model."
msgstr ""

# 44ecd177d28247ef8dfd4ade84e6e158
#: ../../topics/auth.txt:1586
msgid "Required. 100 characters or fewer. Example: ``'can_vote'``."
msgstr ""

# 9290bb9c832e4f01b5b636d6e4443f75
#: ../../topics/auth.txt:1591
msgid ""
":class:`~django.contrib.auth.models.Permission` objects have the standard "
"data-access methods like any other :doc:`Django model </ref/models/"
"instances>`."
msgstr ""

# fbd634cb53bf4d32a954e57e0e40a720
#: ../../topics/auth.txt:1597
msgid "Programmatically creating permissions"
msgstr ""

# 1899edbe528e4e2eae27b0f585cb64fc
#: ../../topics/auth.txt:1599
msgid ""
"While custom permissions can be defined within a model's ``Meta`` class, you "
"can also create permissions directly. For example, you can create the "
"``can_publish`` permission for a ``BlogPost`` model in ``myapp``::"
msgstr ""

# b1c445bb0b1942fdaa82ad2e75a289eb
#: ../../topics/auth.txt:1611
msgid ""
"The permission can then be assigned to a :class:`~django.contrib.auth.models."
"User` via its ``user_permissions`` attribute or to a :class:`~django.contrib."
"auth.models.Group` via its ``permissions`` attribute."
msgstr ""

# e5ad3e51ff2d415fad0704907dd3cd2f
#: ../../topics/auth.txt:1617
msgid "Authentication data in templates"
msgstr ""

# 5df2dcb269db4ec19dc022b2204cb04f
#: ../../topics/auth.txt:1619
msgid ""
"The currently logged-in user and his/her permissions are made available in "
"the :doc:`template context </ref/templates/api>` when you use :class:"
"`~django.template.context.RequestContext`."
msgstr ""

# 0e473bdcfe6b47919f881bdc095dc28e
#: ../../topics/auth.txt:1625
msgid ""
"Technically, these variables are only made available in the template context "
"if you use :class:`~django.template.context.RequestContext` *and* your :"
"setting:`TEMPLATE_CONTEXT_PROCESSORS` setting contains ``\"django.contrib."
"auth.context_processors.auth\"``, which is default. For more, see the :ref:"
"`RequestContext docs <subclassing-context-requestcontext>`."
msgstr ""

# 00655bd3d1bf4ca5a626f2762189f590
#: ../../topics/auth.txt:1634
msgid ""
"When rendering a template :class:`~django.template.context.RequestContext`, "
"the currently logged-in user, either a  :class:`~django.contrib.auth.models."
"User` instance or an :class:`~django.contrib.auth.models.AnonymousUser` "
"instance, is stored in the template variable ``{{ user }}``:"
msgstr ""

# 99a052646b4447eeb01b0db9ce95aea7
#: ../../topics/auth.txt:1647
msgid ""
"This template context variable is not available if a ``RequestContext`` is "
"not being used."
msgstr ""

# eb063d53e00b49b2bc6908c5b6bdb4d1
#: ../../topics/auth.txt:1653
msgid ""
"The currently logged-in user's permissions are stored in the template "
"variable ``{{ perms }}``. This is an instance of :class:`django.contrib.auth."
"context_processors.PermWrapper`, which is a template-friendly proxy of "
"permissions."
msgstr ""

# 8d85b541ac8349c69573d2f0eefae6fc
#: ../../topics/auth.txt:1662
msgid ""
"In the ``{{ perms }}`` object, single-attribute lookup is a proxy to :meth:"
"`User.has_module_perms <django.contrib.auth.models.User.has_module_perms>`. "
"This example would display ``True`` if the logged-in user had any "
"permissions in the ``foo`` app::"
msgstr ""

# 1ec973978cee4926950ba82bf4da8e76
#: ../../topics/auth.txt:1669
msgid ""
"Two-level-attribute lookup is a proxy to :meth:`User.has_perm <django."
"contrib.auth.models.User.has_perm>`. This example would display ``True`` if "
"the logged-in user had the permission ``foo.can_vote``::"
msgstr ""

# 2ba42f385cba4e79a46d9e1c9c0d009f
#: ../../topics/auth.txt:1676
msgid "Thus, you can check permissions in template ``{% if %}`` statements:"
msgstr ""

# 322045f92ca24e8fb7df9215c2c77da6
#: ../../topics/auth.txt:1693
msgid "Groups"
msgstr ""

# b096370459d44fd3b88eeb46e0b611fa
#: ../../topics/auth.txt:1695
msgid ""
"Groups are a generic way of categorizing users so you can apply permissions, "
"or some other label, to those users. A user can belong to any number of "
"groups."
msgstr ""

# a731bfa5cb2f4e0880b6fe3cf9806a01
#: ../../topics/auth.txt:1698
msgid ""
"A user in a group automatically has the permissions granted to that group. "
"For example, if the group ``Site editors`` has the permission "
"``can_edit_home_page``, any user in that group will have that permission."
msgstr ""

# 6a19c745790c46ca8e927644e44cdb7f
#: ../../topics/auth.txt:1702
msgid ""
"Beyond permissions, groups are a convenient way to categorize users to give "
"them some label, or extended functionality. For example, you could create a "
"group ``'Special users'``, and you could write code that could, say, give "
"them access to a members-only portion of your site, or send them members-"
"only email messages."
msgstr ""

# 44bc13ec149e4387b59d03234acd7d2f
#: ../../topics/auth.txt:1716
msgid ""
":class:`~django.contrib.auth.models.Group` objects have the following fields:"
msgstr ""

# 38eae937e4774f72937971a1a91ab518
#: ../../topics/auth.txt:1720
msgid ""
"Required. 80 characters or fewer. Any characters are permitted. Example: "
"``'Awesome Users'``."
msgstr ""

# c791c24f42ad42f08282b8f737458a92
#: ../../topics/auth.txt:1725
msgid ""
"Many-to-many field to :class:`~django.contrib.auth.models.Permissions`::"
msgstr ""

# e221db085b8347b695bfb1807be0b1fb
#: ../../topics/auth.txt:1735
msgid "Other authentication sources"
msgstr ""

# aae8cb5d97d04d84a950e6957fb96a59
#: ../../topics/auth.txt:1737
msgid ""
"The authentication that comes with Django is good enough for most common "
"cases, but you may have the need to hook into another authentication source "
"-- that is, another source of usernames and passwords or authentication "
"methods."
msgstr ""

# 874c30b7ccb0499fb819bdd27485502b
#: ../../topics/auth.txt:1741
msgid ""
"For example, your company may already have an LDAP setup that stores a "
"username and password for every employee. It'd be a hassle for both the "
"network administrator and the users themselves if users had separate "
"accounts in LDAP and the Django-based applications."
msgstr ""

# 5868b2a0bd124ade868b98418315ce3e
#: ../../topics/auth.txt:1746
msgid ""
"So, to handle situations like this, the Django authentication system lets "
"you plug in other authentication sources. You can override Django's default "
"database-based scheme, or you can use the default system in tandem with "
"other systems."
msgstr ""

# f08a775b609a4860b1b332b00f8f51c0
#: ../../topics/auth.txt:1751
msgid ""
"See the :doc:`authentication backend reference </ref/authbackends>` for "
"information on the authentication backends included with Django."
msgstr ""

# 64b05670a3974aa79e06cc637ecd5055
#: ../../topics/auth.txt:1755
msgid "Specifying authentication backends"
msgstr ""

# a7db1b14bff54e61aa2add990bb32f31
#: ../../topics/auth.txt:1757
msgid ""
"Behind the scenes, Django maintains a list of \"authentication backends\" "
"that it checks for authentication. When somebody calls :func:`django.contrib."
"auth.authenticate()` -- as described in :ref:`How to log a user in <how-to-"
"log-a-user-in>` above -- Django tries authenticating across all of its "
"authentication backends. If the first authentication method fails, Django "
"tries the second one, and so on, until all backends have been attempted."
msgstr ""

# d7c883d538a34edaadab70e6b4e9e0cb
#: ../../topics/auth.txt:1764
msgid ""
"The list of authentication backends to use is specified in the :setting:"
"`AUTHENTICATION_BACKENDS` setting. This should be a tuple of Python path "
"names that point to Python classes that know how to authenticate. These "
"classes can be anywhere on your Python path."
msgstr ""

# 60533a4cdc2144f19da40aef47a971f1
#: ../../topics/auth.txt:1769
msgid "By default, :setting:`AUTHENTICATION_BACKENDS` is set to::"
msgstr ""

# bc230d66ca1e4ab095428e2749b79356
#: ../../topics/auth.txt:1773
msgid ""
"That's the basic authentication scheme that checks the Django users database."
msgstr ""

# c65a95ee56d048098299f653048e2475
#: ../../topics/auth.txt:1775
msgid ""
"The order of :setting:`AUTHENTICATION_BACKENDS` matters, so if the same "
"username and password is valid in multiple backends, Django will stop "
"processing at the first positive match."
msgstr ""

# 97256cb1eedd4743a0092fe9e27faf19
#: ../../topics/auth.txt:1781
msgid ""
"Once a user has authenticated, Django stores which backend was used to "
"authenticate the user in the user's session, and re-uses the same backend "
"for subsequent authentication attempts for that user. This effectively means "
"that authentication sources are cached, so if you change :setting:"
"`AUTHENTICATION_BACKENDS`, you'll need to clear out session data if you need "
"to force users to re-authenticate using different methods. A simple way to "
"do that is simply to execute ``Session.objects.all().delete()``."
msgstr ""

# b2dc40e423034ee08d22891852efe78b
#: ../../topics/auth.txt:1790
msgid "Writing an authentication backend"
msgstr ""

# 39025ec6a4dd4ee89649546cc8610fb0
#: ../../topics/auth.txt:1792
msgid ""
"An authentication backend is a class that implements two methods: ``get_user"
"(user_id)`` and ``authenticate(**credentials)``."
msgstr ""

# f791147d87404d2e8c16659662440d9e
#: ../../topics/auth.txt:1795
msgid ""
"The ``get_user`` method takes a ``user_id`` -- which could be a username, "
"database ID or whatever -- and returns a ``User`` object."
msgstr ""

# 4327c3db26fc422bab03e90c0ea4d165
#: ../../topics/auth.txt:1798
msgid ""
"The ``authenticate`` method takes credentials as keyword arguments. Most of "
"the time, it'll just look like this::"
msgstr ""

# 9aaa0b689b3841daa0f6bec970ca7cd1
#: ../../topics/auth.txt:1805
msgid "But it could also authenticate a token, like so::"
msgstr ""

# 16310fb0cfef475788a6d253a2b90282
#: ../../topics/auth.txt:1811
msgid ""
"Either way, ``authenticate`` should check the credentials it gets, and it "
"should return a ``User`` object that matches those credentials, if the "
"credentials are valid. If they're not valid, it should return ``None``."
msgstr ""

# b81de55e8c544bd7b246548c04f268d9
#: ../../topics/auth.txt:1815
msgid ""
"The Django admin system is tightly coupled to the Django ``User`` object "
"described at the beginning of this document. For now, the best way to deal "
"with this is to create a Django ``User`` object for each user that exists "
"for your backend (e.g., in your LDAP directory, your external SQL database, "
"etc.) You can either write a script to do this in advance, or your "
"``authenticate`` method can do it the first time a user logs in."
msgstr ""

# f9c08d8653704167aec5f6acb8bd40ae
#: ../../topics/auth.txt:1822
msgid ""
"Here's an example backend that authenticates against a username and password "
"variable defined in your ``settings.py`` file and creates a Django ``User`` "
"object the first time a user authenticates::"
msgstr ""

# a75b26bd51e54aa4b7cc3a97c3019786
#: ../../topics/auth.txt:1865
msgid "Handling authorization in custom backends"
msgstr ""

# 3c81fbac5f95442695e8cc025e83925e
#: ../../topics/auth.txt:1867
msgid "Custom auth backends can provide their own permissions."
msgstr ""

# dfe0f5e1749e4bd39fbdc45920c78e58
#: ../../topics/auth.txt:1869
msgid ""
"The user model will delegate permission lookup functions (:meth:`~django."
"contrib.auth.models.User.get_group_permissions()`, :meth:`~django.contrib."
"auth.models.User.get_all_permissions()`, :meth:`~django.contrib.auth.models."
"User.has_perm()`, and :meth:`~django.contrib.auth.models.User."
"has_module_perms()`) to any authentication backend that implements these "
"functions."
msgstr ""

# 81c89a25fc624a3e8ecf5fbda6abd12b
#: ../../topics/auth.txt:1876
msgid ""
"The permissions given to the user will be the superset of all permissions "
"returned by all backends. That is, Django grants a permission to a user that "
"any one backend grants."
msgstr ""

# 2c8ce1b804234924856fdcca4cbeefa8
#: ../../topics/auth.txt:1880
msgid ""
"The simple backend above could implement permissions for the magic admin "
"fairly simply::"
msgstr ""

# 731b6154245b4151a7954edf970d919c
#: ../../topics/auth.txt:1893
msgid ""
"This gives full permissions to the user granted access in the above example. "
"Notice that the backend auth functions all take the user object as an "
"argument, and they also accept the same arguments given to the associated :"
"class:`django.contrib.auth.models.User` functions."
msgstr ""

# 69edb395cdab42e086e23b404cc052bb
#: ../../topics/auth.txt:1898
msgid ""
"A full authorization implementation can be found in `django/contrib/auth/"
"backends.py`_, which is the default backend and queries the "
"``auth_permission`` table most of the time."
msgstr ""

# 36c1922f65d64c518d6357b4a051a85a
#: ../../topics/auth.txt:1907
msgid "Authorization for anonymous users"
msgstr ""

# dbc5ca3ffee54a078bddb8a35d475050
#: ../../topics/auth.txt:1911
msgid ""
"An anonymous user is one that is not authenticated i.e. they have provided "
"no valid authentication details. However, that does not necessarily mean "
"they are not authorized to do anything. At the most basic level, most Web "
"sites authorize anonymous users to browse most of the site, and many allow "
"anonymous posting of comments etc."
msgstr ""

# 9f8519da26184944801de8a2e3714a3a
#: ../../topics/auth.txt:1917
msgid ""
"Django's permission framework does not have a place to store permissions for "
"anonymous users. However, it has a foundation that allows custom "
"authentication backends to specify authorization for anonymous users. This "
"is especially useful for the authors of re-usable apps, who can delegate all "
"questions of authorization to the auth backend, rather than needing "
"settings, for example, to control anonymous access."
msgstr ""

# db51dc934d574e18b0cb0f8e4334766a
#: ../../topics/auth.txt:1926
msgid "Authorization for inactive users"
msgstr ""

# d4926387c7c64b2dbaab6efcf9d51ca5
#: ../../topics/auth.txt:1930
msgid ""
"An inactive user is a one that is authenticated but has its attribute "
"``is_active`` set to ``False``. However this does not mean they are not "
"authorized to do anything. For example they are allowed to activate their "
"account."
msgstr ""

# bb93207fe9e344bbbefec9c0514f1e6d
#: ../../topics/auth.txt:1935
msgid ""
"The support for anonymous users in the permission system allows for "
"anonymous users to have permissions to do something while inactive "
"authenticated users do not."
msgstr ""

# ebf50298dc6346789a292283484e138a
#: ../../topics/auth.txt:1939
msgid ""
"To enable this on your own backend, you must set the class attribute "
"``supports_inactive_user`` to ``True``."
msgstr ""

# 29d546b4c7c14d2c911553d1ff18f9ba
#: ../../topics/auth.txt:1942
msgid ""
"A nonexisting ``supports_inactive_user`` attribute will raise a "
"``PendingDeprecationWarning`` if used in Django 1.3. In Django 1.4, this "
"warning will be updated to a ``DeprecationWarning`` which will be displayed "
"loudly. Additionally ``supports_inactive_user`` will be set to ``False``. "
"Django 1.5 will assume that every backend supports inactive users being "
"passed to the authorization methods."
msgstr ""

# 592bbfd87b5947c8a477a000bd63a132
#: ../../topics/auth.txt:1951
msgid "Handling object permissions"
msgstr ""

# 0e803942ac314356b3a5ebe2eef39095
#: ../../topics/auth.txt:1953
msgid ""
"Django's permission framework has a foundation for object permissions, "
"though there is no implementation for it in the core. That means that "
"checking for object permissions will always return ``False`` or an empty "
"list (depending on the check performed)."
msgstr ""

# 4808a672f91a452880475ae0a46f3140
#: ../../topics/cache.txt:3
msgid "Django's cache framework"
msgstr ""

# ee54a9a708164a43855fc0bb354ff025
#: ../../topics/cache.txt:5
msgid ""
"A fundamental trade-off in dynamic Web sites is, well, they're dynamic. Each "
"time a user requests a page, the Web server makes all sorts of calculations "
"-- from database queries to template rendering to business logic -- to "
"create the page that your site's visitor sees. This is a lot more expensive, "
"from a processing-overhead perspective, than your standard read-a-file-off-"
"the-filesystem server arrangement."
msgstr ""

# fba5e58f4e2d4c9487a1a8971d8f677c
#: ../../topics/cache.txt:12
msgid ""
"For most Web applications, this overhead isn't a big deal. Most Web "
"applications aren't washingtonpost.com or slashdot.org; they're simply "
"small- to medium-sized sites with so-so traffic. But for medium- to high-"
"traffic sites, it's essential to cut as much overhead as possible."
msgstr ""

# 0a714b37a4544a979f79905b9d775c30
#: ../../topics/cache.txt:17
msgid "That's where caching comes in."
msgstr ""

# 6e36c22efce44ab2932e54614e1ce059
#: ../../topics/cache.txt:19
msgid ""
"To cache something is to save the result of an expensive calculation so that "
"you don't have to perform the calculation next time. Here's some pseudocode "
"explaining how this would work for a dynamically generated Web page::"
msgstr ""

# 8920086c75554476b5456ba534f14511
#: ../../topics/cache.txt:31
msgid ""
"Django comes with a robust cache system that lets you save dynamic pages so "
"they don't have to be calculated for each request. For convenience, Django "
"offers different levels of cache granularity: You can cache the output of "
"specific views, you can cache only the pieces that are difficult to produce, "
"or you can cache your entire site."
msgstr ""

# 67fb432a950248a3ad05534cbe232742
#: ../../topics/cache.txt:37
msgid ""
"Django also works well with \"upstream\" caches, such as `Squid <http://www."
"squid-cache.org>`_ and browser-based caches. These are the types of caches "
"that you don't directly control but to which you can provide hints (via HTTP "
"headers) about which parts of your site should be cached, and how."
msgstr ""

# 09ca756a247145c283031624433d23aa
#: ../../topics/cache.txt:43
msgid "Setting up the cache"
msgstr ""

# 0244584baa374f288ce2b06a12eba488
#: ../../topics/cache.txt:45
msgid ""
"The cache system requires a small amount of setup. Namely, you have to tell "
"it where your cached data should live -- whether in a database, on the "
"filesystem or directly in memory. This is an important decision that affects "
"your cache's performance; yes, some cache types are faster than others."
msgstr ""

# 8040f2f181e04405bd59d2deb23967ec
#: ../../topics/cache.txt:50
msgid ""
"Your cache preference goes in the :setting:`CACHES` setting in your settings "
"file. Here's an explanation of all available values for :setting:`CACHES`."
msgstr ""

# 3a101c671ad5449bbadb2f36fdc50242
#: ../../topics/cache.txt:64
msgid "Memcached"
msgstr ""

# cd1caa5cf5d64831b6e9858a8087e1b9
#: ../../topics/cache.txt:66
msgid ""
"By far the fastest, most efficient type of cache available to Django, "
"Memcached__ is an entirely memory-based cache framework originally developed "
"to handle high loads at LiveJournal.com and subsequently open-sourced by "
"Danga Interactive.  It is used by sites such as Facebook and Wikipedia to "
"reduce database access and dramatically increase site performance."
msgstr ""

# d4407cb4d58145aba6caa58371471e75
#: ../../topics/cache.txt:74
msgid ""
"Memcached runs as a daemon and is allotted a specified amount of RAM. All it "
"does is provide a fast interface for adding, retrieving and deleting "
"arbitrary data in the cache.  All data is stored directly in memory, so "
"there's no overhead of database or filesystem usage."
msgstr ""

# ed24580ae70d4dfd8c8b562ce03b0de4
#: ../../topics/cache.txt:79
msgid ""
"After installing Memcached itself, you'll need to install a memcached "
"binding. There are several python memcached bindings available; the two most "
"common are `python-memcached`_ and `pylibmc`_."
msgstr ""

# 1b4376ed75434336ae2d0e593b76ea80
#: ../../topics/cache.txt:95
msgid "To use Memcached with Django:"
msgstr ""

# 50afc2e7a9bc40b79e1593fa7e145188
#: ../../topics/cache.txt:97
msgid ""
"Set :setting:`BACKEND <CACHES-BACKEND>` to ``django.core.cache.backends."
"memcached.MemcachedCache`` or ``django.core.cache.backends.memcached."
"PyLibMCCache`` (depending on your chosen memcached binding)"
msgstr ""

# 29e0787c17e34504a581f010f6ed049b
#: ../../topics/cache.txt:102
msgid ""
"Set :setting:`LOCATION <CACHES-LOCATION>` to ``ip:port`` values, where "
"``ip`` is the IP address of the Memcached daemon and ``port`` is the port on "
"which Memcached is running, or to a ``unix:path`` value, where ``path`` is "
"the path to a Memcached Unix socket file."
msgstr ""

# 3b0e2683406b4568b34d460cb342510e
#: ../../topics/cache.txt:107
msgid ""
"In this example, Memcached is running on localhost (127.0.0.1) port 11211, "
"using the ``python-memcached`` binding::"
msgstr ""

# 87e6292e0c044fe6a8eff31a209ad839
#: ../../topics/cache.txt:117
msgid ""
"In this example, Memcached is available through a local Unix socket file :"
"file:`/tmp/memcached.sock` using the ``python-memcached`` binding::"
msgstr ""

# 47714e2f6ed34d689fdd4bc02b4db17b
#: ../../topics/cache.txt:127
msgid ""
"One excellent feature of Memcached is its ability to share cache over "
"multiple servers. This means you can run Memcached daemons on multiple "
"machines, and the program will treat the group of machines as a *single* "
"cache, without the need to duplicate cache values on each machine. To take "
"advantage of this feature, include all server addresses in :setting:"
"`LOCATION <CACHES-LOCATION>`, either separated by semicolons or as a list."
msgstr ""

# 15690c9b53f344549405aa5004947658
#: ../../topics/cache.txt:134
msgid ""
"In this example, the cache is shared over Memcached instances running on IP "
"address 172.19.26.240 and 172.19.26.242, both on port 11211::"
msgstr ""

# 5eb88f7005ca433f9b6f1596dc2e80c5
#: ../../topics/cache.txt:147
msgid ""
"In the following example, the cache is shared over Memcached instances "
"running on the IP addresses 172.19.26.240 (port 11211), 172.19.26.242 (port "
"11212), and 172.19.26.244 (port 11213)::"
msgstr ""

# dfc06bb706b24d6eaa663ed4b8694be5
#: ../../topics/cache.txt:162
msgid ""
"A final point about Memcached is that memory-based caching has one "
"disadvantage: Because the cached data is stored in memory, the data will be "
"lost if your server crashes. Clearly, memory isn't intended for permanent "
"data storage, so don't rely on memory-based caching as your only data "
"storage. Without a doubt, *none* of the Django caching backends should be "
"used for permanent storage -- they're all intended to be solutions for "
"caching, not storage -- but we point this out here because memory-based "
"caching is particularly temporary."
msgstr ""

# c694d315bd924b35b1b49c2c638f2932
#: ../../topics/cache.txt:172
msgid "Database caching"
msgstr ""

# 93f6cd2dc312456ea46e7297a8e6ab33
#: ../../topics/cache.txt:174
msgid ""
"To use a database table as your cache backend, first create a cache table in "
"your database by running this command::"
msgstr ""

# 1b93d31149f845ecace69e515a9b3ba0
#: ../../topics/cache.txt:179
msgid ""
"...where ``[cache_table_name]`` is the name of the database table to create. "
"(This name can be whatever you want, as long as it's a valid table name "
"that's not already being used in your database.) This command creates a "
"single table in your database that is in the proper format that Django's "
"database-cache system expects."
msgstr ""

# 29d7957bad774bc1867166606032d842
#: ../../topics/cache.txt:185
msgid ""
"Once you've created that database table, set your :setting:`BACKEND <CACHES-"
"BACKEND>` setting to ``\"django.core.cache.backends.db.DatabaseCache\"``, "
"and :setting:`LOCATION <CACHES-LOCATION>` to ``tablename`` -- the name of "
"the database table. In this example, the cache table's name is "
"``my_cache_table``::"
msgstr ""

# 342c67198c08401ab63baeee71f53eb8
#: ../../topics/cache.txt:199
msgid ""
"The database caching backend uses the same database as specified in your "
"settings file. You can't use a different database backend for your cache "
"table."
msgstr ""

# 5b8b3f0fe4374327b4b5d697cde47388
#: ../../topics/cache.txt:202
msgid ""
"Database caching works best if you've got a fast, well-indexed database "
"server."
msgstr ""

# 1da9d583f3dd49b4a9be09c52cf44f6b
#: ../../topics/cache.txt:205
msgid "Database caching and multiple databases"
msgstr ""

# b5f5bcd0e12443979d2ea9ade83f5933
#: ../../topics/cache.txt:207
msgid ""
"If you use database caching with multiple databases, you'll also need to set "
"up routing instructions for your database cache table. For the purposes of "
"routing, the database cache table appears as a model named ``CacheEntry``, "
"in an application named ``django_cache``. This model won't appear in the "
"models cache, but the model details can be used for routing purposes."
msgstr ""

# 0021b01a364547128b869f692b10e446
#: ../../topics/cache.txt:214
msgid ""
"For example, the following router would direct all cache read operations to "
"``cache_slave``, and all write operations to ``cache_master``. The cache "
"table will only be synchronized onto ``cache_master``::"
msgstr ""

# 3472f191035a4ded827aa5c4dbe56e94
#: ../../topics/cache.txt:240
msgid ""
"If you don't specify routing directions for the database cache model, the "
"cache backend will use the ``default`` database."
msgstr ""

# 11666904044447578337f61df916fd08
#: ../../topics/cache.txt:243
msgid ""
"Of course, if you don't use the database cache backend, you don't need to "
"worry about providing routing instructions for the database cache model."
msgstr ""

# d261565e09614f54ae9506768e669169
#: ../../topics/cache.txt:248
msgid "Filesystem caching"
msgstr ""

# 6a37cfab52af4611b5bf62e7422a398f
#: ../../topics/cache.txt:250
msgid ""
"To store cached items on a filesystem, use ``\"django.core.cache.backends."
"filebased.FileBasedCache\"`` for :setting:`BACKEND <CACHES-BACKEND>`. For "
"example, to store cached data in ``/var/tmp/django_cache``, use this "
"setting::"
msgstr ""

# 044836f19c5442cd8645d5f45243e879
#: ../../topics/cache.txt:263
msgid ""
"If you're on Windows, put the drive letter at the beginning of the path, "
"like this::"
msgstr ""

# a22cf8db28f747f59c296d88b37d2bbd
#: ../../topics/cache.txt:273
msgid ""
"The directory path should be absolute -- that is, it should start at the "
"root of your filesystem. It doesn't matter whether you put a slash at the "
"end of the setting."
msgstr ""

# 8527a42e1cf6451395679f293902775b
#: ../../topics/cache.txt:277
msgid ""
"Make sure the directory pointed-to by this setting exists and is readable "
"and writable by the system user under which your Web server runs. Continuing "
"the above example, if your server runs as the user ``apache``, make sure the "
"directory ``/var/tmp/django_cache`` exists and is readable and writable by "
"the user ``apache``."
msgstr ""

# 7448589e8dff4ce99f2c534e24c3c089
#: ../../topics/cache.txt:283
msgid ""
"Each cache value will be stored as a separate file whose contents are the "
"cache data saved in a serialized (\"pickled\") format, using Python's "
"``pickle`` module. Each file's name is the cache key, escaped for safe "
"filesystem use."
msgstr ""

# 3a6f15f4e4b9427b948438b3b51e22f7
#: ../../topics/cache.txt:288
msgid "Local-memory caching"
msgstr ""

# 125e351bb3164825aad3f8228125f091
#: ../../topics/cache.txt:290
msgid ""
"If you want the speed advantages of in-memory caching but don't have the "
"capability of running Memcached, consider the local-memory cache backend. "
"This cache is multi-process and thread-safe. To use it, set :setting:"
"`BACKEND <CACHES-BACKEND>` to ``\"django.core.cache.backends.locmem."
"LocMemCache\"``. For example::"
msgstr ""

# a7273619b0674b44959be2459885f7aa
#: ../../topics/cache.txt:303
msgid ""
"The cache :setting:`LOCATION <CACHES-LOCATION>` is used to identify "
"individual memory stores. If you only have one locmem cache, you can omit "
"the :setting:`LOCATION <CACHES-LOCATION>`; however, if you have more that "
"one local memory cache, you will need to assign a name to at least one of "
"them in order to keep them separate."
msgstr ""

# 9f38dc6528054deeb3fedbecb2e02f51
#: ../../topics/cache.txt:309
msgid ""
"Note that each process will have its own private cache instance, which means "
"no cross-process caching is possible. This obviously also means the local "
"memory cache isn't particularly memory-efficient, so it's probably not a "
"good choice for production environments. It's nice for development."
msgstr ""

# 723c2170ce7e41adba758e306706fc90
#: ../../topics/cache.txt:315
msgid "Dummy caching (for development)"
msgstr ""

# 6d9dc0eef7a24d7192fd97955cdf1b5f
#: ../../topics/cache.txt:317
msgid ""
"Finally, Django comes with a \"dummy\" cache that doesn't actually cache -- "
"it just implements the cache interface without doing anything."
msgstr ""

# b55c3e398d9a461298c6f6c3a3aa01f1
#: ../../topics/cache.txt:320
msgid ""
"This is useful if you have a production site that uses heavy-duty caching in "
"various places but a development/test environment where you don't want to "
"cache and don't want to have to change your code to special-case the latter. "
"To activate dummy caching, set :setting:`BACKEND <CACHES-BACKEND>` like so::"
msgstr ""

# 2cc75e40724e4232bac7fe15979e4591
#: ../../topics/cache.txt:332
msgid "Using a custom cache backend"
msgstr ""

# 38eb034117e840cdb29455fae214b364
#: ../../topics/cache.txt:334
msgid ""
"While Django includes support for a number of cache backends out-of-the-box, "
"sometimes you might want to use a customized cache backend. To use an "
"external cache backend with Django, use the Python import path as the :"
"setting:`BACKEND <CACHES-BACKEND>` of the :setting:`CACHES` setting, like "
"so::"
msgstr ""

# 01bed749aa1c43a393d4845e1e14430c
#: ../../topics/cache.txt:345
msgid ""
"If you're building your own backend, you can use the standard cache backends "
"as reference implementations. You'll find the code in the ``django/core/"
"cache/backends/`` directory of the Django source."
msgstr ""

# ec7c59c349954d60a0f5dea53a0e5f92
#: ../../topics/cache.txt:349
msgid ""
"Note: Without a really compelling reason, such as a host that doesn't "
"support them, you should stick to the cache backends included with Django. "
"They've been well-tested and are easy to use."
msgstr ""

# c6bd24002b724a29a5d27ef7fe0a43bf
#: ../../topics/cache.txt:354
msgid "Cache arguments"
msgstr ""

# c11a603ba00f42ab9e96f6ea45b710c7
#: ../../topics/cache.txt:356
msgid ""
"In addition to the defining the engine and name of the each cache backend, "
"each cache backend can be given additional arguments to control caching "
"behavior. These arguments are provided as additional keys in the :setting:"
"`CACHES` setting. Valid arguments are as follows:"
msgstr ""

# c9290dbae73a46a88e0f0134f94ac477
#: ../../topics/cache.txt:361
msgid ""
":setting:`TIMEOUT <CACHES-TIMEOUT>`: The default timeout, in seconds, to use "
"for the cache. This argument defaults to 300 seconds (5 minutes)."
msgstr ""

# bafe89da84e1413e90f44dc33009749d
#: ../../topics/cache.txt:365
msgid ""
":setting:`OPTIONS <CACHES-OPTIONS>`: Any options that should be passed to "
"cache backend. The list options understood by each backend vary with each "
"backend."
msgstr ""

# c96e73eadbb2432986e7cd58ea817980
#: ../../topics/cache.txt:369
msgid ""
"Cache backends that implement their own culling strategy (i.e., the "
"``locmem``, ``filesystem`` and ``database`` backends) will honor the "
"following options:"
msgstr ""

# 1bc00b67aa1f40ba93c01d7970ab8662
#: ../../topics/cache.txt:373
msgid ""
"``MAX_ENTRIES``: the maximum number of entries allowed in the cache before "
"old values are deleted. This argument defaults to ``300``."
msgstr ""

# edec5dd5d98c48cd8fbf8f07c0ffbcaf
#: ../../topics/cache.txt:377
msgid ""
"``CULL_FREQUENCY``: The fraction of entries that are culled when "
"``MAX_ENTRIES`` is reached. The actual ratio is ``1/CULL_FREQUENCY``, so set "
"``CULL_FREQUENCY``: to ``2`` to cull half of the entries when "
"``MAX_ENTRIES`` is reached."
msgstr ""

# 207ce1bf8cdd4d5686c6af970ff934c7
#: ../../topics/cache.txt:382
msgid ""
"A value of ``0`` for ``CULL_FREQUENCY`` means that the entire cache will be "
"dumped when ``MAX_ENTRIES`` is reached. This makes culling *much* faster at "
"the expense of more cache misses."
msgstr ""

# 34c5ccc8e36b4fdab5274a4cd329ab5e
#: ../../topics/cache.txt:387
msgid ""
"Cache backends backed by a third-party library will pass their options "
"directly to the underlying cache library. As a result, the list of valid "
"options depends on the library in use."
msgstr ""

# 2f45eee8ced54556b2422b1f8c2bc5f2
#: ../../topics/cache.txt:391
msgid ""
":setting:`KEY_PREFIX <CACHES-KEY_PREFIX>`: A string that will be "
"automatically included (prepended by default) to all cache keys used by the "
"Django server."
msgstr ""

# f322594dfa5846a88d28a37e8e029b1b
#: ../../topics/cache.txt:395
msgid ""
"See the :ref:`cache documentation <cache_key_prefixing>` for more "
"information."
msgstr ""

# 23faf126bff54c11a76b5626fddb682f
#: ../../topics/cache.txt:398
msgid ""
":setting:`VERSION <CACHES-VERSION>`: The default version number for cache "
"keys generated by the Django server."
msgstr ""

# faaff3bc252e4b30be7195be2e0319e1
#: ../../topics/cache.txt:401
msgid ""
"See the :ref:`cache documentation <cache_versioning>` for more information."
msgstr ""

# 6a778d15dd494f6eaac1c8442efdc37c
#: ../../topics/cache.txt:404
msgid ""
":setting:`KEY_FUNCTION <CACHES-KEY_FUNCTION>` A string containing a dotted "
"path to a function that defines how to compose a prefix, version and key "
"into a final cache key."
msgstr ""

# 3dc81977fbcd49839b032b893b32df6e
#: ../../topics/cache.txt:408
msgid ""
"See the :ref:`cache documentation <cache_key_transformation>` for more "
"information."
msgstr ""

# 32308e693c704b4c989a72fa08b574fd
#: ../../topics/cache.txt:411
msgid ""
"In this example, a filesystem backend is being configured with a timeout of "
"60 seconds, and a maximum capacity of 1000 items::"
msgstr ""

# c59b7de15fb746ce8f58a1c750f4ea78
#: ../../topics/cache.txt:425
msgid ""
"Invalid arguments are silently ignored, as are invalid values of known "
"arguments."
msgstr ""

# 2db2c1f09dbd4a7b806af4486f4cd581
#: ../../topics/cache.txt:429
msgid "The per-site cache"
msgstr ""

# e99ee780051f4df08f0d29201710151e
#: ../../topics/cache.txt:431
msgid ""
"Once the cache is set up, the simplest way to use caching is to cache your "
"entire site. You'll need to add ``'django.middleware.cache."
"UpdateCacheMiddleware'`` and ``'django.middleware.cache."
"FetchFromCacheMiddleware'`` to your :setting:`MIDDLEWARE_CLASSES` setting, "
"as in this example::"
msgstr ""

# 64e5f04ea1994cdbaf51a84b28efd9a8
#: ../../topics/cache.txt:445
msgid ""
"No, that's not a typo: the \"update\" middleware must be first in the list, "
"and the \"fetch\" middleware must be last. The details are a bit obscure, "
"but see `Order of MIDDLEWARE_CLASSES`_ below if you'd like the full story."
msgstr ""

# 2877c70554514b07ab480352300d18be
#: ../../topics/cache.txt:449
msgid "Then, add the following required settings to your Django settings file:"
msgstr ""

# c03cb0e4de95494aa5ad34ba304b9b8c
#: ../../topics/cache.txt:451
msgid ""
":setting:`CACHE_MIDDLEWARE_ALIAS` -- The cache alias to use for storage."
msgstr ""

# 5e4ac3584af54aa388a4151e9371573e
#: ../../topics/cache.txt:452
msgid ""
":setting:`CACHE_MIDDLEWARE_SECONDS` -- The number of seconds each page "
"should be cached."
msgstr ""

# e0d29c318b8c4e2ab4961d86481cf99e
#: ../../topics/cache.txt:454
msgid ""
":setting:`CACHE_MIDDLEWARE_KEY_PREFIX` -- If the cache is shared across "
"multiple sites using the same Django installation, set this to the name of "
"the site, or some other string that is unique to this Django instance, to "
"prevent key collisions. Use an empty string if you don't care."
msgstr ""

# 527a1e0ad3dc46ce83bee66f4c3380b8
#: ../../topics/cache.txt:459
msgid ""
"The cache middleware caches GET and HEAD responses with status 200, where "
"the request and response headers allow. Responses to requests for the same "
"URL with different query parameters are considered to be unique pages and "
"are cached separately. Optionally, if the :setting:"
"`CACHE_MIDDLEWARE_ANONYMOUS_ONLY` setting is ``True``, only anonymous "
"requests (i.e., not those made by a logged-in user) will be cached. This is "
"a simple and effective way of disabling caching for any user-specific pages "
"(including Django's admin interface). Note that if you use :setting:"
"`CACHE_MIDDLEWARE_ANONYMOUS_ONLY`, you should make sure you've activated "
"``AuthenticationMiddleware``. The cache middleware expects that a HEAD "
"request is answered with the same response headers as the corresponding GET "
"request; in which case it can return a cached GET response for HEAD request."
msgstr ""

# fa98b3c851c8459da3233454164a6eff
#: ../../topics/cache.txt:472
msgid ""
"Additionally, the cache middleware automatically sets a few headers in each :"
"class:`~django.http.HttpResponse`:"
msgstr ""

# 3fb9d48c031c4f1a9ca9f0d26d26ba5a
#: ../../topics/cache.txt:475
msgid ""
"Sets the ``Last-Modified`` header to the current date/time when a fresh "
"(uncached) version of the page is requested."
msgstr ""

# 40b9822f2d03487795ae0442e195b8f2
#: ../../topics/cache.txt:478
msgid ""
"Sets the ``Expires`` header to the current date/time plus the defined :"
"setting:`CACHE_MIDDLEWARE_SECONDS`."
msgstr ""

# 00b10d0171ae4e6c892f8dc55d32600a
#: ../../topics/cache.txt:481
msgid ""
"Sets the ``Cache-Control`` header to give a max age for the page -- again, "
"from the :setting:`CACHE_MIDDLEWARE_SECONDS` setting."
msgstr ""

# cda6bbd5b769442eb97dd9a217164b10
#: ../../topics/cache.txt:484
msgid "See :doc:`/topics/http/middleware` for more on middleware."
msgstr ""

# 9172dae73dc34ef5a126451dac8de7c4
#: ../../topics/cache.txt:486
msgid ""
"If a view sets its own cache expiry time (i.e. it has a ``max-age`` section "
"in its ``Cache-Control`` header) then the page will be cached until the "
"expiry time, rather than :setting:`CACHE_MIDDLEWARE_SECONDS`. Using the "
"decorators in ``django.views.decorators.cache`` you can easily set a view's "
"expiry time (using the ``cache_control`` decorator) or disable caching for a "
"view (using the ``never_cache`` decorator). See the `using other headers`__ "
"section for more on these decorators."
msgstr ""

# 9d564018718249ee825b5e9e9d5f530a
#: ../../topics/cache.txt:498
msgid ""
"If :setting:`USE_I18N` is set to ``True`` then the generated cache key will "
"include the name of the active :term:`language<language code>` -- see also :"
"ref:`how-django-discovers-language-preference`). This allows you to easily "
"cache multilingual sites without having to create the cache key yourself."
msgstr ""

# 7597e7cb3f7840bfb453aa35e1f84e72
#: ../../topics/cache.txt:505
msgid ""
"Cache keys also include the active :term:`language <language code>` when :"
"setting:`USE_L10N` is set to ``True`` and the :ref:`current time zone "
"<default-current-time-zone>` when :setting:`USE_TZ` is set to ``True``."
msgstr ""

# f378a1c707f540f9b07352279546d720
#: ../../topics/cache.txt:512
msgid "The per-view cache"
msgstr ""

# 60e1ab48f7a34a93b512e39069c6a9d3
#: ../../topics/cache.txt:516
msgid ""
"A more granular way to use the caching framework is by caching the output of "
"individual views. ``django.views.decorators.cache`` defines a ``cache_page`` "
"decorator that will automatically cache the view's response for you. It's "
"easy to use::"
msgstr ""

# a148f0fae07b453589ae97722e3c69ae
#: ../../topics/cache.txt:527
msgid ""
"``cache_page`` takes a single argument: the cache timeout, in seconds. In "
"the above example, the result of the ``my_view()`` view will be cached for "
"15 minutes. (Note that we've written it as ``60 * 15`` for the purpose of "
"readability. ``60 * 15`` will be evaluated to ``900`` -- that is, 15 minutes "
"multiplied by 60 seconds per minute.)"
msgstr ""

# fb35cf5303054ca0a0565c115e7ed69e
#: ../../topics/cache.txt:533
msgid ""
"The per-view cache, like the per-site cache, is keyed off of the URL. If "
"multiple URLs point at the same view, each URL will be cached separately. "
"Continuing the ``my_view`` example, if your URLconf looks like this::"
msgstr ""

# a1a335663a3945d2bbaf7ef5dd318a5a
#: ../../topics/cache.txt:541
msgid ""
"then requests to ``/foo/1/`` and ``/foo/23/`` will be cached separately, as "
"you may expect. But once a particular URL (e.g., ``/foo/23/``) has been "
"requested, subsequent requests to that URL will use the cache."
msgstr ""

# 868459cc9fdb4c0eba5864f50f397d08
#: ../../topics/cache.txt:545
msgid ""
"``cache_page`` can also take an optional keyword argument, ``cache``, which "
"directs the decorator to use a specific cache (from your :setting:`CACHES` "
"setting) when caching view results. By default, the ``default`` cache will "
"be used, but you can specify any cache you want::"
msgstr ""

# 761e05243b834d84a3e119f54e66ab6a
#: ../../topics/cache.txt:555
msgid ""
"You can also override the cache prefix on a per-view basis. ``cache_page`` "
"takes an optional keyword argument, ``key_prefix``, which works in the same "
"way as the :setting:`CACHE_MIDDLEWARE_KEY_PREFIX` setting for the "
"middleware.  It can be used like this::"
msgstr ""

# 14930b783aa44891b25762935e22b72f
#: ../../topics/cache.txt:564
msgid ""
"The two settings can also be combined. If you specify a ``cache`` *and* a "
"``key_prefix``, you will get all the settings of the requested cache alias, "
"but with the key_prefix overridden."
msgstr ""

# 4fb77c207b574d4d80cf8a66643a41ba
#: ../../topics/cache.txt:569
msgid "Specifying per-view cache in the URLconf"
msgstr ""

# 18e3c5ab464f4a5cb175e6ecfb51983c
#: ../../topics/cache.txt:571
msgid ""
"The examples in the previous section have hard-coded the fact that the view "
"is cached, because ``cache_page`` alters the ``my_view`` function in place. "
"This approach couples your view to the cache system, which is not ideal for "
"several reasons. For instance, you might want to reuse the view functions on "
"another, cache-less site, or you might want to distribute the views to "
"people who might want to use them without being cached. The solution to "
"these problems is to specify the per-view cache in the URLconf rather than "
"next to the view functions themselves."
msgstr ""

# 3b68fb6e66a44a78a8ffa5eb8362fcc9
#: ../../topics/cache.txt:580
msgid ""
"Doing so is easy: simply wrap the view function with ``cache_page`` when you "
"refer to it in the URLconf. Here's the old URLconf from earlier::"
msgstr ""

# 4e8d9be1627c48c5bf2cab8992c9e479
#: ../../topics/cache.txt:587
msgid "Here's the same thing, with ``my_view`` wrapped in ``cache_page``::"
msgstr ""

# 4f2ef4d966c54fc399398dbe8385001d
#: ../../topics/cache.txt:598
msgid "Template fragment caching"
msgstr ""

# b846d5485a204683a4794455828a6aa9
#: ../../topics/cache.txt:600
msgid ""
"If you're after even more control, you can also cache template fragments "
"using the ``cache`` template tag. To give your template access to this tag, "
"put ``{% load cache %}`` near the top of your template."
msgstr ""

# faad63035bd74d27a8a6ab4c0f435fc2
#: ../../topics/cache.txt:604
msgid ""
"The ``{% cache %}`` template tag caches the contents of the block for a "
"given amount of time. It takes at least two arguments: the cache timeout, in "
"seconds, and the name to give the cache fragment. For example:"
msgstr ""

# 8fe36111bcb1464da4d7d81019f3ed09
#: ../../topics/cache.txt:615
msgid ""
"Sometimes you might want to cache multiple copies of a fragment depending on "
"some dynamic data that appears inside the fragment. For example, you might "
"want a separate cached copy of the sidebar used in the previous example for "
"every user of your site. Do this by passing additional arguments to the ``{% "
"cache %}`` template tag to uniquely identify the cache fragment:"
msgstr ""

# fe9310f7b84b45f0858b0aaff977946a
#: ../../topics/cache.txt:628
msgid ""
"It's perfectly fine to specify more than one argument to identify the "
"fragment. Simply pass as many arguments to ``{% cache %}`` as you need."
msgstr ""

# 82cfc210dbe04f6d860df08943fe9200
#: ../../topics/cache.txt:631
msgid ""
"If :setting:`USE_I18N` is set to ``True`` the per-site middleware cache "
"will :ref:`respect the active language<i18n-cache-key>`. For the ``cache`` "
"template tag you could use one of the :ref:`translation-specific "
"variables<template-translation-vars>` available in templates to achieve the "
"same result:"
msgstr ""

# 800aad8ea406431085b5dcd3f21b2571
#: ../../topics/cache.txt:648
msgid ""
"The cache timeout can be a template variable, as long as the template "
"variable resolves to an integer value. For example, if the template variable "
"``my_timeout`` is set to the value ``600``, then the following two examples "
"are equivalent:"
msgstr ""

# 18f4540bd0344e6db16ccc5719c82dff
#: ../../topics/cache.txt:658
msgid ""
"This feature is useful in avoiding repetition in templates. You can set the "
"timeout in a variable, in one place, and just reuse that value."
msgstr ""

# 8178f2c32dd84a7ca5ccdf6729c96717
#: ../../topics/cache.txt:662
msgid "The low-level cache API"
msgstr ""

# fcffc57b3a224690a4c56aff7d4a17d4
#: ../../topics/cache.txt:666
msgid ""
"Sometimes, caching an entire rendered page doesn't gain you very much and "
"is, in fact, inconvenient overkill."
msgstr ""

# 9b38dbbc8fc14563a0d674f957fa8b05
#: ../../topics/cache.txt:669
msgid ""
"Perhaps, for instance, your site includes a view whose results depend on "
"several expensive queries, the results of which change at different "
"intervals. In this case, it would not be ideal to use the full-page caching "
"that the per-site or per-view cache strategies offer, because you wouldn't "
"want to cache the entire result (since some of the data changes often), but "
"you'd still want to cache the results that rarely change."
msgstr ""

# abb59b14d5ad44f5b36fec1a3c145097
#: ../../topics/cache.txt:676
msgid ""
"For cases like this, Django exposes a simple, low-level cache API. You can "
"use this API to store objects in the cache with any level of granularity you "
"like. You can cache any Python object that can be pickled safely: strings, "
"dictionaries, lists of model objects, and so forth. (Most common Python "
"objects can be pickled; refer to the Python documentation for more "
"information about pickling.)"
msgstr ""

# b696de24c7fd4c99944cfd057a6b61f5
#: ../../topics/cache.txt:683
msgid ""
"The cache module, ``django.core.cache``, has a ``cache`` object that's "
"automatically created from the ``'default'`` entry in the :setting:`CACHES` "
"setting::"
msgstr ""

# cd829ccaaf8149faac37bbe9d0838a9e
#: ../../topics/cache.txt:689
msgid "The basic interface is ``set(key, value, timeout)`` and ``get(key)``::"
msgstr ""

# a33f82434f374d67a763893bd2807423
#: ../../topics/cache.txt:695
msgid ""
"The ``timeout`` argument is optional and defaults to the ``timeout`` "
"argument of the ``'default'`` backend in :setting:`CACHES` setting "
"(explained above). It's the number of seconds the value should be stored in "
"the cache."
msgstr ""

# c99de24dda0446f1b69ce661da9eec43
#: ../../topics/cache.txt:700
msgid ""
"If the object doesn't exist in the cache, ``cache.get()`` returns ``None``::"
msgstr ""

# 141098fa798d48348e70e275f5dd01ee
#: ../../topics/cache.txt:707
msgid ""
"We advise against storing the literal value ``None`` in the cache, because "
"you won't be able to distinguish between your stored ``None`` value and a "
"cache miss signified by a return value of ``None``."
msgstr ""

# d4beb84efb38425584ebb4f3702499c7
#: ../../topics/cache.txt:711
msgid ""
"``cache.get()`` can take a ``default`` argument. This specifies which value "
"to return if the object doesn't exist in the cache::"
msgstr ""

# f339faebc6734490990f6e31e484148a
#: ../../topics/cache.txt:717
msgid ""
"To add a key only if it doesn't already exist, use the ``add()`` method. It "
"takes the same parameters as ``set()``, but it will not attempt to update "
"the cache if the key specified is already present::"
msgstr ""

# 386edc38fe8c46808c6932cb9d7a9efc
#: ../../topics/cache.txt:726
msgid ""
"If you need to know whether ``add()`` stored a value in the cache, you can "
"check the return value. It will return ``True`` if the value was stored, "
"``False`` otherwise."
msgstr ""

# 780880725c39456f9967215dae5fe606
#: ../../topics/cache.txt:730
msgid ""
"There's also a ``get_many()`` interface that only hits the cache once. "
"``get_many()`` returns a dictionary with all the keys you asked for that "
"actually exist in the cache (and haven't expired)::"
msgstr ""

# befa63bdb1b24c77bc2e986c3d4684ff
#: ../../topics/cache.txt:742
msgid ""
"To set multiple values more efficiently, use ``set_many()`` to pass a "
"dictionary of key-value pairs::"
msgstr ""

# 55a72732e6684bc7b9b2cfff0b13ba9a
#: ../../topics/cache.txt:749
msgid ""
"Like ``cache.set()``, ``set_many()`` takes an optional ``timeout`` parameter."
msgstr ""

# 5b9573f3bc674b22bb2899e97e1d89f5
#: ../../topics/cache.txt:751
msgid ""
"You can delete keys explicitly with ``delete()``. This is an easy way of "
"clearing the cache for a particular object::"
msgstr ""

# a9d76d8ab52e4cc49ada12283b621d19
#: ../../topics/cache.txt:758
msgid ""
"If you want to clear a bunch of keys at once, ``delete_many()`` can take a "
"list of keys to be cleared::"
msgstr ""

# bf3974a4d8d64896a775e8bca6c45ca5
#: ../../topics/cache.txt:765
msgid ""
"Finally, if you want to delete all the keys in the cache, use ``cache.clear()"
"``.  Be careful with this; ``clear()`` will remove *everything* from the "
"cache, not just the keys set by your application. ::"
msgstr ""

# a5a8ea031df744a09625442ee431f0de
#: ../../topics/cache.txt:771
msgid ""
"You can also increment or decrement a key that already exists using the "
"``incr()`` or ``decr()`` methods, respectively. By default, the existing "
"cache value will incremented or decremented by 1. Other increment/decrement "
"values can be specified by providing an argument to the increment/decrement "
"call. A ValueError will be raised if you attempt to increment or decrement a "
"nonexistent cache key.::"
msgstr ""

# 7068a36f784e46e282e3932b1386ef35
#: ../../topics/cache.txt:790
msgid ""
"``incr()``/``decr()`` methods are not guaranteed to be atomic. On those "
"backends that support atomic increment/decrement (most notably, the "
"memcached backend), increment and decrement operations will be atomic. "
"However, if the backend doesn't natively provide an increment/decrement "
"operation, it will be implemented using a two-step retrieve/update."
msgstr ""

# 7a8680c0321642b5b9219b564cef5785
#: ../../topics/cache.txt:799
msgid "Cache key prefixing"
msgstr ""

# e45c3eff81374117bf328ab315c82c46
#: ../../topics/cache.txt:803
msgid ""
"If you are sharing a cache instance between servers, or between your "
"production and development environments, it's possible for data cached by "
"one server to be used by another server. If the format of cached data is "
"different between servers, this can lead to some very hard to diagnose "
"problems."
msgstr ""

# 0b4a9f6863c94e69a98ad565dbd3dfc7
#: ../../topics/cache.txt:809
msgid ""
"To prevent this, Django provides the ability to prefix all cache keys used "
"by a server. When a particular cache key is saved or retrieved, Django will "
"automatically prefix the cache key with the value of the :setting:"
"`KEY_PREFIX <CACHES-KEY_PREFIX>` cache setting."
msgstr ""

# 83db0d97a38d43c7851ed432122b70c3
#: ../../topics/cache.txt:814
msgid ""
"By ensuring each Django instance has a different :setting:`KEY_PREFIX "
"<CACHES-KEY_PREFIX>`, you can ensure that there will be no collisions in "
"cache values."
msgstr ""

# ceaabcf85aa44f3ba9af6f5f08afe4b4
#: ../../topics/cache.txt:821
msgid "Cache versioning"
msgstr ""

# dce8dea9fdb54caaba31090cb76e401d
#: ../../topics/cache.txt:825
msgid ""
"When you change running code that uses cached values, you may need to purge "
"any existing cached values. The easiest way to do this is to flush the "
"entire cache, but this can lead to the loss of cache values that are still "
"valid and useful."
msgstr ""

# 51993d3953cd4ef497f51cc8d6e97f46
#: ../../topics/cache.txt:830
msgid ""
"Django provides a better way to target individual cache values. Django's "
"cache framework has a system-wide version identifier, specified using the :"
"setting:`VERSION <CACHES-VERSION>` cache setting. The value of this setting "
"is automatically combined with the cache prefix and the user-provided cache "
"key to obtain the final cache key."
msgstr ""

# 61fe1c577bc7414989ec97e52035d6d7
#: ../../topics/cache.txt:836
msgid ""
"By default, any key request will automatically include the site default "
"cache key version. However, the primitive cache functions all include a "
"``version`` argument, so you can specify a particular cache key version to "
"set or get. For example::"
msgstr ""

# 82b6cac8af904c3ab3bebdce5501b11b
#: ../../topics/cache.txt:850
msgid ""
"The version of a specific key can be incremented and decremented using the :"
"func:`incr_version()` and :func:`decr_version()` methods. This enables "
"specific keys to be bumped to a new version, leaving other keys unaffected. "
"Continuing our previous example::"
msgstr ""

# 24d95f5ca87a4199963a7f08dfac69f4
#: ../../topics/cache.txt:870
msgid "Cache key transformation"
msgstr ""

# 2c6b915412d141f29e6086a66998a89f
#: ../../topics/cache.txt:874
msgid ""
"As described in the previous two sections, the cache key provided by a user "
"is not used verbatim -- it is combined with the cache prefix and key version "
"to provide a final cache key. By default, the three parts are joined using "
"colons to produce a final string::"
msgstr ""

# c6187f032aa84aedb8eb39d22326d6cc
#: ../../topics/cache.txt:882
msgid ""
"If you want to combine the parts in different ways, or apply other "
"processing to the final key (e.g., taking a hash digest of the key parts), "
"you can provide a custom key function."
msgstr ""

# 8449262b6ee54c5abff86e3b11eba5e4
#: ../../topics/cache.txt:886
msgid ""
"The :setting:`KEY_FUNCTION <CACHES-KEY_FUNCTION>` cache setting specifies a "
"dotted-path to a function matching the prototype of :func:`make_key()` "
"above. If provided, this custom key function will be used instead of the "
"default key combining function."
msgstr ""

# 9a9281052f19445bb0b742868accae61
#: ../../topics/cache.txt:892
msgid "Cache key warnings"
msgstr ""

# 1ac76e98b436482e9b585bb05e9fdfe0
#: ../../topics/cache.txt:896
msgid ""
"Memcached, the most commonly-used production cache backend, does not allow "
"cache keys longer than 250 characters or containing whitespace or control "
"characters, and using such keys will cause an exception. To encourage cache-"
"portable code and minimize unpleasant surprises, the other built-in cache "
"backends issue a warning (``django.core.cache.backends.base."
"CacheKeyWarning``) if a key is used that would cause an error on memcached."
msgstr ""

# 781e221dbf724ecdad913469871cc773
#: ../../topics/cache.txt:903
msgid ""
"If you are using a production backend that can accept a wider range of keys "
"(a custom backend, or one of the non-memcached built-in backends), and want "
"to use this wider range without warnings, you can silence "
"``CacheKeyWarning`` with this code in the ``management`` module of one of "
"your :setting:`INSTALLED_APPS`::"
msgstr ""

# 2e07daf4515143078e330648aece8f6a
#: ../../topics/cache.txt:915
msgid ""
"If you want to instead provide custom key validation logic for one of the "
"built-in backends, you can subclass it, override just the ``validate_key`` "
"method, and follow the instructions for `using a custom cache backend`_. For "
"instance, to do this for the ``locmem`` backend, put this code in a module::"
msgstr ""

# f8747e877bfe4741b2f7680a744ed8a3
#: ../../topics/cache.txt:927
msgid ""
"...and use the dotted Python path to this class in the :setting:`BACKEND "
"<CACHES-BACKEND>` portion of your :setting:`CACHES` setting."
msgstr ""

# 4080b3687e6b48509673b902547897cf
#: ../../topics/cache.txt:931
msgid "Upstream caches"
msgstr ""

# 48300692cf93445993e5e9242c1d3597
#: ../../topics/cache.txt:933
msgid ""
"So far, this document has focused on caching your *own* data. But another "
"type of caching is relevant to Web development, too: caching performed by "
"\"upstream\" caches. These are systems that cache pages for users even "
"before the request reaches your Web site."
msgstr ""

# c73414bcff234c4d832cc7cf432c67d1
#: ../../topics/cache.txt:938
msgid "Here are a few examples of upstream caches:"
msgstr ""

# bea77222e998478297a7351a10e3aa90
#: ../../topics/cache.txt:940
msgid ""
"Your ISP may cache certain pages, so if you requested a page from http://"
"example.com/, your ISP would send you the page without having to access "
"example.com directly. The maintainers of example.com have no knowledge of "
"this caching; the ISP sits between example.com and your Web browser, "
"handling all of the caching transparently."
msgstr ""

# b61158e032104ad2a531a14092fb0048
#: ../../topics/cache.txt:946
msgid ""
"Your Django Web site may sit behind a *proxy cache*, such as Squid Web Proxy "
"Cache (http://www.squid-cache.org/), that caches pages for performance. In "
"this case, each request first would be handled by the proxy, and it would be "
"passed to your application only if needed."
msgstr ""

# d0b242b8bec348619180a1c81a69126a
#: ../../topics/cache.txt:951
msgid ""
"Your Web browser caches pages, too. If a Web page sends out the appropriate "
"headers, your browser will use the local cached copy for subsequent requests "
"to that page, without even contacting the Web page again to see whether it "
"has changed."
msgstr ""

# 81116c7fb4034d5a954f552c3fa69ff2
#: ../../topics/cache.txt:956
msgid ""
"Upstream caching is a nice efficiency boost, but there's a danger to it: "
"Many Web pages' contents differ based on authentication and a host of other "
"variables, and cache systems that blindly save pages based purely on URLs "
"could expose incorrect or sensitive data to subsequent visitors to those "
"pages."
msgstr ""

# 8dd3bdb8694f43da906d0b8f716b11ee
#: ../../topics/cache.txt:961
msgid ""
"For example, say you operate a Web email system, and the contents of the "
"\"inbox\" page obviously depend on which user is logged in. If an ISP "
"blindly cached your site, then the first user who logged in through that ISP "
"would have his user-specific inbox page cached for subsequent visitors to "
"the site. That's not cool."
msgstr ""

# e5f3530da70b46bc95c9ba38ed3aac90
#: ../../topics/cache.txt:967
msgid ""
"Fortunately, HTTP provides a solution to this problem. A number of HTTP "
"headers exist to instruct upstream caches to differ their cache contents "
"depending on designated variables, and to tell caching mechanisms not to "
"cache particular pages. We'll look at some of these headers in the sections "
"that follow."
msgstr ""

# 70bfa2758b1b42fdabf69a2f46cba4c4
#: ../../topics/cache.txt:975
msgid "Using Vary headers"
msgstr ""

# 3bcafd7b232547538c433a8d0a131d6d
#: ../../topics/cache.txt:977
msgid ""
"The ``Vary`` header defines which request headers a cache mechanism should "
"take into account when building its cache key. For example, if the contents "
"of a Web page depend on a user's language preference, the page is said to "
"\"vary on language.\""
msgstr ""

# 812be057ec674f8cba1684ba2dbe5852
#: ../../topics/cache.txt:986
msgid ""
"By default, Django's cache system creates its cache keys using the requested "
"path and query -- e.g., ``\"/stories/2005/?order_by=author\"``. This means "
"every request to that URL will use the same cached version, regardless of "
"user-agent differences such as cookies or language preferences. However, if "
"this page produces different content based on some difference in request "
"headers -- such as a cookie, or a language, or a user-agent -- you'll need "
"to use the ``Vary`` header to tell caching mechanisms that the page output "
"depends on those things."
msgstr ""

# 366a69c97cc34d6a8626cc56c8c5d3b2
#: ../../topics/cache.txt:994
msgid ""
"To do this in Django, use the convenient ``vary_on_headers`` view decorator, "
"like so::"
msgstr ""

# 075514e6f3764af69bdc3134aaf47d1c
#: ../../topics/cache.txt:1003
msgid ""
"In this case, a caching mechanism (such as Django's own cache middleware) "
"will cache a separate version of the page for each unique user-agent."
msgstr ""

# 3bc369cc8543430684bad178149a5465
#: ../../topics/cache.txt:1006
msgid ""
"The advantage to using the ``vary_on_headers`` decorator rather than "
"manually setting the ``Vary`` header (using something like ``response"
"['Vary'] = 'user-agent'``) is that the decorator *adds* to the ``Vary`` "
"header (which may already exist), rather than setting it from scratch and "
"potentially overriding anything that was already in there."
msgstr ""

# d457880254b841f5b0da19f46e0ebca2
#: ../../topics/cache.txt:1012
msgid "You can pass multiple headers to ``vary_on_headers()``::"
msgstr ""

# c9a69d8edc8f40638a1500e9aabc7d82
#: ../../topics/cache.txt:1018
msgid ""
"This tells upstream caches to vary on *both*, which means each combination "
"of user-agent and cookie will get its own cache value. For example, a "
"request with the user-agent ``Mozilla`` and the cookie value ``foo=bar`` "
"will be considered different from a request with the user-agent ``Mozilla`` "
"and the cookie value ``foo=ham``."
msgstr ""

# 1f11eb5599d249c896b30e64d3525293
#: ../../topics/cache.txt:1024
msgid ""
"Because varying on cookie is so common, there's a ``vary_on_cookie`` "
"decorator. These two views are equivalent::"
msgstr ""

# c3e57251782242c1b95c7865bc1db88e
#: ../../topics/cache.txt:1035
msgid ""
"The headers you pass to ``vary_on_headers`` are not case sensitive; ``\"User-"
"Agent\"`` is the same thing as ``\"user-agent\"``."
msgstr ""

# edbc33c2db444b89b5eeac8561879d69
#: ../../topics/cache.txt:1038
msgid ""
"You can also use a helper function, ``django.utils.cache."
"patch_vary_headers``, directly. This function sets, or adds to, the ``Vary "
"header``. For example::"
msgstr ""

# e9c8615f001b48419b13acecfe52c3c2
#: ../../topics/cache.txt:1049
msgid ""
"``patch_vary_headers`` takes an :class:`~django.http.HttpResponse` instance "
"as its first argument and a list/tuple of case-insensitive header names as "
"its second argument."
msgstr ""

# 9666bafb4cf146baac94e1ee0a60b722
#: ../../topics/cache.txt:1053
msgid "For more on Vary headers, see the `official Vary spec`_."
msgstr ""

# 6ca26e5cf0a441f089b4f619d6ddcab7
#: ../../topics/cache.txt:1058
msgid "Controlling cache: Using other headers"
msgstr ""

# 9c33e85efd8c41fba0ac388a74b90418
#: ../../topics/cache.txt:1060
msgid ""
"Other problems with caching are the privacy of data and the question of "
"where data should be stored in a cascade of caches."
msgstr ""

# 48d155884b464072b524a5d5e3d16592
#: ../../topics/cache.txt:1063
msgid ""
"A user usually faces two kinds of caches: his or her own browser cache (a "
"private cache) and his or her provider's cache (a public cache). A public "
"cache is used by multiple users and controlled by someone else. This poses "
"problems with sensitive data--you don't want, say, your bank account number "
"stored in a public cache. So Web applications need a way to tell caches "
"which data is private and which is public."
msgstr ""

# 488bfd1ee3ec43ed986af31cd13c7cac
#: ../../topics/cache.txt:1070
msgid ""
"The solution is to indicate a page's cache should be \"private.\" To do this "
"in Django, use the ``cache_control`` view decorator. Example::"
msgstr ""

# d6c2e9dca6fd40ea98b7ca0440cb90f1
#: ../../topics/cache.txt:1079
msgid ""
"This decorator takes care of sending out the appropriate HTTP header behind "
"the scenes."
msgstr ""

# f9304f4872644a0c890d3172dd5f4f0d
#: ../../topics/cache.txt:1082
msgid ""
"Note that the cache control settings \"private\" and \"public\" are mutually "
"exclusive. The decorator ensures that the \"public\" directive is removed if "
"\"private\" should be set (and vice versa). An example use of the two "
"directives would be a blog site that offers both private and public entries. "
"Public entries may be cached on any shared cache. The following code uses "
"``patch_cache_control``, the manual way to modify the cache control header "
"(it is internally called by the ``cache_control`` decorator)::"
msgstr ""

# 78b78b27d05743969ed1b42e7aa50e86
#: ../../topics/cache.txt:1104
msgid ""
"There are a few other ways to control cache parameters. For example, HTTP "
"allows applications to do the following:"
msgstr ""

# 5c5ed5cd328c44ec9faa7615a2109d38
#: ../../topics/cache.txt:1107
msgid "Define the maximum time a page should be cached."
msgstr ""

# 01dc42a0c044422c88a271b2835c9f4a
#: ../../topics/cache.txt:1109
msgid ""
"Specify whether a cache should always check for newer versions, only "
"delivering the cached content when there are no changes. (Some caches might "
"deliver cached content even if the server page changed, simply because the "
"cache copy isn't yet expired.)"
msgstr ""

# 50262d0ee0b449909cccfef885d4f559
#: ../../topics/cache.txt:1114
msgid ""
"In Django, use the ``cache_control`` view decorator to specify these cache "
"parameters. In this example, ``cache_control`` tells caches to revalidate "
"the cache on every access and to store cached versions for, at most, 3,600 "
"seconds::"
msgstr ""

# 11e5d531cc0d44e6a8842fc1315e6d8f
#: ../../topics/cache.txt:1124
msgid ""
"Any valid ``Cache-Control`` HTTP directive is valid in ``cache_control()``. "
"Here's a full list:"
msgstr ""

# 59b2d7d488094506ba732c1783f65d5a
#: ../../topics/cache.txt:1127
msgid "``public=True``"
msgstr ""

# 1804b375f4fd4192ba1abf6f4170acd8
#: ../../topics/cache.txt:1128
msgid "``private=True``"
msgstr ""

# e093ea81a98a4998acfd0e4b2c621d87
#: ../../topics/cache.txt:1129
msgid "``no_cache=True``"
msgstr ""

# 7836a9295da343609b67a84277f80c4e
#: ../../topics/cache.txt:1130
msgid "``no_transform=True``"
msgstr ""

# 98455206b0574b8da050f5939215aeb7
#: ../../topics/cache.txt:1131
msgid "``must_revalidate=True``"
msgstr ""

# 337be78d33304ce182f0df88b5ead22d
#: ../../topics/cache.txt:1132
msgid "``proxy_revalidate=True``"
msgstr ""

# 4cbd0737fa9846b698ff843733d1ed1a
#: ../../topics/cache.txt:1133
msgid "``max_age=num_seconds``"
msgstr ""

# b7db28cbc5f2475b891889e159d6a555
#: ../../topics/cache.txt:1134
msgid "``s_maxage=num_seconds``"
msgstr ""

# cd11b8778b3f4ef1a7dfe7ea959497f7
#: ../../topics/cache.txt:1136
msgid ""
"For explanation of Cache-Control HTTP directives, see the `Cache-Control "
"spec`_."
msgstr ""

# 50444f6b9a5d4d269b861d4e076b5e98
#: ../../topics/cache.txt:1138
msgid ""
"(Note that the caching middleware already sets the cache header's max-age "
"with the value of the :setting:`CACHE_MIDDLEWARE_SECONDS` setting. If you "
"use a custom ``max_age`` in a ``cache_control`` decorator, the decorator "
"will take precedence, and the header values will be merged correctly.)"
msgstr ""

# 574541c57c0c49bcab8b6b79a6d31c96
#: ../../topics/cache.txt:1143
msgid ""
"If you want to use headers to disable caching altogether, ``django.views."
"decorators.cache.never_cache`` is a view decorator that adds headers to "
"ensure the response won't be cached by browsers or other caches. Example::"
msgstr ""

# ffdf890b71e84b2e978585bab8632b80
#: ../../topics/cache.txt:1157
msgid "Other optimizations"
msgstr ""

# 8a9a08f0c3364609bb8102c130ade448
#: ../../topics/cache.txt:1159
msgid ""
"Django comes with a few other pieces of middleware that can help optimize "
"your site's performance:"
msgstr ""

# 25bbe49f4a8b46e097b37a9339629652
#: ../../topics/cache.txt:1162
msgid ""
"``django.middleware.http.ConditionalGetMiddleware`` adds support for modern "
"browsers to conditionally GET responses based on the ``ETag`` and ``Last-"
"Modified`` headers."
msgstr ""

# 1c397676b1654012bdd6a0576d04b9ef
#: ../../topics/cache.txt:1166
msgid ""
":class:`django.middleware.gzip.GZipMiddleware` compresses responses for all "
"modern browsers, saving bandwidth and transfer time."
msgstr ""

# a40d0c0bc3014e8b8b24b6c132588bc1
#: ../../topics/cache.txt:1170
msgid "Order of MIDDLEWARE_CLASSES"
msgstr ""

# 4cd642a6072c4ee8acfb726d6397d59d
#: ../../topics/cache.txt:1172
msgid ""
"If you use caching middleware, it's important to put each half in the right "
"place within the :setting:`MIDDLEWARE_CLASSES` setting. That's because the "
"cache middleware needs to know which headers by which to vary the cache "
"storage. Middleware always adds something to the ``Vary`` response header "
"when it can."
msgstr ""

# 011a40d080bc4b738cd46dc0ac91df00
#: ../../topics/cache.txt:1177
msgid ""
"``UpdateCacheMiddleware`` runs during the response phase, where middleware "
"is run in reverse order, so an item at the top of the list runs *last* "
"during the response phase. Thus, you need to make sure that "
"``UpdateCacheMiddleware`` appears *before* any other middleware that might "
"add something to the ``Vary`` header. The following middleware modules do so:"
msgstr ""

# a7fa35958b3f4696b4901e91a72e4c70
#: ../../topics/cache.txt:1183
msgid "``SessionMiddleware`` adds ``Cookie``"
msgstr ""

# 5a8d0867f13c45c19b78572671b15213
#: ../../topics/cache.txt:1184
msgid "``GZipMiddleware`` adds ``Accept-Encoding``"
msgstr ""

# be7ed0087ea442aca9779407628b9bd5
#: ../../topics/cache.txt:1185
msgid "``LocaleMiddleware`` adds ``Accept-Language``"
msgstr ""

# be3a960bcd8a4dbc889749d2ba8aedca
#: ../../topics/cache.txt:1187
msgid ""
"``FetchFromCacheMiddleware``, on the other hand, runs during the request "
"phase, where middleware is applied first-to-last, so an item at the top of "
"the list runs *first* during the request phase. The "
"``FetchFromCacheMiddleware`` also needs to run after other middleware "
"updates the ``Vary`` header, so ``FetchFromCacheMiddleware`` must be *after* "
"any item that does so."
msgstr ""

# 7a7d017c1a96467b870656e621946dac
#: ../../topics/class-based-views.txt:3
msgid "Class-based generic views"
msgstr ""

# 5f0e0dddacc149cab2168ef6e3920b9d
#: ../../topics/class-based-views.txt:8
msgid ""
"Prior to Django 1.3, generic views were implemented as functions. The "
"function-based implementation has been deprecated in favor of the class-"
"based approach described here."
msgstr ""

# de7f1254a07443a2bb8c80bd1ef518e4
#: ../../topics/class-based-views.txt:12
msgid ""
"For details on the previous generic views implementation, see the :doc:"
"`topic guide </topics/generic-views>` and :doc:`detailed reference </ref/"
"generic-views>`."
msgstr ""

# 324ac5a86e924e45b86f85ebb2421dbf
# cce666fbba02490ca956ad725cfdfdf6
#: ../../topics/class-based-views.txt:16 ../../topics/generic-views.txt:15
msgid ""
"Writing Web applications can be monotonous, because we repeat certain "
"patterns again and again. Django tries to take away some of that monotony at "
"the model and template layers, but Web developers also experience this "
"boredom at the view level."
msgstr ""

# 52573482f8624676a763089b270ffd2b
# 0e7993ffc1424b1ca181ab498dc9fb92
#: ../../topics/class-based-views.txt:21 ../../topics/generic-views.txt:20
msgid ""
"Django's *generic views* were developed to ease that pain. They take certain "
"common idioms and patterns found in view development and abstract them so "
"that you can quickly write common views of data without having to write too "
"much code."
msgstr ""

# fef4474747074ebdb3c5515b518c39c6
# 36b408416c15459084bbe039d4fde3d8
#: ../../topics/class-based-views.txt:26 ../../topics/generic-views.txt:25
msgid ""
"We can recognize certain common tasks, like displaying a list of objects, "
"and write code that displays a list of *any* object. Then the model in "
"question can be passed as an extra argument to the URLconf."
msgstr ""

# bbfe1e4fc9be4e25a5bf31cb40c616b8
# 7ab9c21ed3ed4f2ab8fb0574b021ed08
#: ../../topics/class-based-views.txt:30 ../../topics/generic-views.txt:29
msgid "Django ships with generic views to do the following:"
msgstr ""

# 96d5a96034d14ca9b456d9baf246d89d
# 91492e4f4c0a478685939d81df4ad4d3
#: ../../topics/class-based-views.txt:32 ../../topics/generic-views.txt:31
msgid ""
"Perform common \"simple\" tasks: redirect to a different page and render a "
"given template."
msgstr ""

# 4a51f1904a7c4bc4937aea170b372bcf
#: ../../topics/class-based-views.txt:35
msgid ""
"Display list and detail pages for a single object. If we were creating an "
"application to manage conferences then a ``TalkListView`` and a "
"``RegisteredUserListView`` would be examples of list views. A single talk "
"page is an example of what we call a \"detail\" view."
msgstr ""

# 0df955c7efbd4765b22d7843e268f17e
#: ../../topics/class-based-views.txt:40
msgid ""
"Present date-based objects in year/month/day archive pages, associated "
"detail, and \"latest\" pages. `The Django Weblog <http://www.djangoproject."
"com/weblog/>`_'s year, month, and day archives are built with these, as "
"would be a typical newspaper's archives."
msgstr ""

# 368d3427de284a2a9ddac047ced5c2ea
# 1d72634e33004b77942451771a02744c
#: ../../topics/class-based-views.txt:46 ../../topics/generic-views.txt:45
msgid ""
"Allow users to create, update, and delete objects -- with or without "
"authorization."
msgstr ""

# 53fd05a2c4534062a6c4dc2d1c7c1911
# cfa12bf98b9b4bddad84521ada284857
#: ../../topics/class-based-views.txt:49 ../../topics/generic-views.txt:48
msgid ""
"Taken together, these views provide easy interfaces to perform the most "
"common tasks developers encounter."
msgstr ""

# 65b8457063104e7a821475f132a86053
#: ../../topics/class-based-views.txt:54
msgid "Simple usage"
msgstr ""

# bb813aa17b7048fd963eeaecb3decf38
#: ../../topics/class-based-views.txt:56
msgid ""
"Class-based generic views (and any class-based views that inherit from the "
"base classes Django provides) can be configured in two ways: subclassing, or "
"passing in arguments directly in the URLconf."
msgstr ""

# 037493449fef46fa84ccb638389cfe56
#: ../../topics/class-based-views.txt:60
msgid ""
"When you subclass a class-based view, you can override attributes (such as "
"the ``template_name``) or methods (such as ``get_context_data``) in your "
"subclass to provide new values or methods. Consider, for example, a view "
"that just displays one template, ``about.html``. Django has a generic view "
"to do this - :class:`~django.views.generic.base.TemplateView` - so we can "
"just subclass it, and override the template name::"
msgstr ""

# e55cd67b4aba4d8d899de07700e65551
#: ../../topics/class-based-views.txt:73
msgid ""
"Then, we just need to add this new view into our URLconf. As the class-based "
"views themselves are classes, we point the URL to the ``as_view`` class "
"method instead, which is the entry point for class-based views::"
msgstr ""

# ea6a2ce9e1f44c429da4105879f1ecd2
#: ../../topics/class-based-views.txt:85
msgid ""
"Alternatively, if you're only changing a few simple attributes on a class-"
"based view, you can simply pass the new attributes into the ``as_view`` "
"method call itself::"
msgstr ""

# 02a012108b01488ea10b6a26245aa8eb
#: ../../topics/class-based-views.txt:96
msgid ""
"A similar overriding pattern can be used for the ``url`` attribute on :class:"
"`~django.views.generic.base.RedirectView`, another simple generic view."
msgstr ""

# 940faa0e2c54432baa87395400b6ff46
# b3c0be2fbc6243e4b5b17af8ce1bc019
#: ../../topics/class-based-views.txt:102 ../../topics/generic-views.txt:128
msgid "Generic views of objects"
msgstr ""

# c72ec78bc40846928f1325abbdd08a2d
#: ../../topics/class-based-views.txt:104
msgid ""
":class:`~django.views.generic.base.TemplateView` certainly is useful, but "
"Django's generic views really shine when it comes to presenting views of "
"your database content. Because it's such a common task, Django comes with a "
"handful of built-in generic views that make generating list and detail views "
"of objects incredibly easy."
msgstr ""

# 3713bf8834a54902baf42ba2a866fbea
# 3a106e1f9ce9491282d81b6833226169
#: ../../topics/class-based-views.txt:110 ../../topics/generic-views.txt:135
msgid ""
"Let's take a look at one of these generic views: the \"object list\" view. "
"We'll be using these models::"
msgstr ""

# 106332fe9caa453595567d26e775c009
# 02220d889aa84c6b977f3869a54e7e3c
#: ../../topics/class-based-views.txt:136 ../../topics/generic-views.txt:161
msgid ""
"To build a list page of all publishers, we'd use a URLconf along these "
"lines::"
msgstr ""

# ae6280c19161444889b3fc0d9dee2600
#: ../../topics/class-based-views.txt:148
msgid ""
"That's all the Python code we need to write. We still need to write a "
"template, however. We could explicitly tell the view which template to use "
"by including a ``template_name`` key in the arguments to as_view, but in the "
"absence of an explicit template Django will infer one from the object's "
"name. In this case, the inferred template will be ``\"books/publisher_list."
"html\"`` -- the \"books\" part comes from the name of the app that defines "
"the model, while the \"publisher\" bit is just the lowercased version of the "
"model's name."
msgstr ""

# ebb30d2cdfb7469ca2ba30581cf4ddba
#: ../../topics/class-based-views.txt:158
msgid ""
"Thus, when (for example) the :class:`django.template.loaders.app_directories."
"Loader` template loader is enabled in :setting:`TEMPLATE_LOADERS`, the "
"template location would be::"
msgstr ""

# b3e2d0fced714119a04e12f4a6837ca5
# 1d687074ec3342b78c358e7b8bdc28ae
#: ../../topics/class-based-views.txt:166 ../../topics/generic-views.txt:186
msgid ""
"This template will be rendered against a context containing a variable "
"called ``object_list`` that contains all the publisher objects. A very "
"simple template might look like the following::"
msgstr ""

# 7d30015c7a6b478d9004a1ee02c3cf5b
#: ../../topics/class-based-views.txt:181
msgid ""
"That's really all there is to it. All the cool features of generic views "
"come from changing the \"info\" dictionary passed to the generic view. The :"
"doc:`generic views reference</ref/class-based-views>` documents all the "
"generic views and their options in detail; the rest of this document will "
"consider some of the common ways you might customize and extend generic "
"views."
msgstr ""

# dec1bc7736d04988912fbdbdf1b621a0
# b02e766aa5994cd6bb00a1072ad63e9b
#: ../../topics/class-based-views.txt:189 ../../topics/generic-views.txt:208
msgid "Extending generic views"
msgstr ""

# 132764900ec3479cb2f044b157166422
# 048e1158dfa94f51b8f78b627ad969ad
#: ../../topics/class-based-views.txt:193 ../../topics/generic-views.txt:212
msgid ""
"There's no question that using generic views can speed up development "
"substantially. In most projects, however, there comes a moment when the "
"generic views no longer suffice. Indeed, the most common question asked by "
"new Django developers is how to make generic views handle a wider array of "
"situations."
msgstr ""

# 73e07efda62d4eb6ab0c5f7e9cdaa1d1
#: ../../topics/class-based-views.txt:199
msgid ""
"This is one of the reasons generic views were redesigned for the 1.3 release "
"- previously, they were just view functions with a bewildering array of "
"options; now, rather than passing in a large amount of configuration in the "
"URLconf, the recommended way to extend generic views is to subclass them, "
"and override their attributes or methods."
msgstr ""

# 8e3fb6698c224a09a3d0bbfe19cfb64e
# a56ffc4d6648464d9f452f15c5f3f0c2
#: ../../topics/class-based-views.txt:207 ../../topics/generic-views.txt:223
msgid "Making \"friendly\" template contexts"
msgstr ""

# 097997891e8f446799838678a583eb2f
#: ../../topics/class-based-views.txt:209
msgid ""
"You might have noticed that our sample publisher list template stores all "
"the publishers in a variable named ``object_list``. While this works just "
"fine, it isn't all that \"friendly\" to template authors: they have to "
"\"just know\" that they're dealing with publishers here."
msgstr ""

# 665ba005ba5b4acd8ec27625ae99c5ac
#: ../../topics/class-based-views.txt:214
msgid ""
"Well, if you're dealing with a model object, this is already done for you. "
"When you are dealing with an object or queryset, Django is able to populate "
"the context using the verbose name (or the plural verbose name, in the case "
"of a list of objects) of the object being displayed. This is provided in "
"addition to the default ``object_list`` entry, but contains exactly the same "
"data."
msgstr ""

# b1a865af4d984b4f9100a475634958fd
#: ../../topics/class-based-views.txt:221
msgid ""
"If the verbose name (or plural verbose name) still isn't a good match, you "
"can manually set the name of the context variable. The "
"``context_object_name`` attribute on a generic view specifies the context "
"variable to use. In this example, we'll override it in the URLconf, since "
"it's a simple change:"
msgstr ""

# a681861bc9ba499bba94ef11bdc96cac
#: ../../topics/class-based-views.txt:236
msgid ""
"Providing a useful ``context_object_name`` is always a good idea. Your "
"coworkers who design templates will thank you."
msgstr ""

# ea2281d6d7e4416cbef74ce22ffb0cca
# 1d0966094d0e4b259c9a99129e7262ae
#: ../../topics/class-based-views.txt:241 ../../topics/generic-views.txt:249
msgid "Adding extra context"
msgstr ""

# 5eea9e768729418d995ae9d9ce09a5e7
#: ../../topics/class-based-views.txt:243
msgid ""
"Often you simply need to present some extra information beyond that provided "
"by the generic view. For example, think of showing a list of all the books "
"on each publisher detail page. The :class:`~django.views.generic.detail."
"DetailView` generic view provides the publisher to the context, but it seems "
"there's no way to get additional information in that template."
msgstr ""

# 15dae95c8e2c4689a5a9bb6a5bc90abf
#: ../../topics/class-based-views.txt:250
msgid ""
"However, there is; you can subclass :class:`~django.views.generic.detail."
"DetailView` and provide your own implementation of the ``get_context_data`` "
"method. The default implementation of this that comes with :class:`~django."
"views.generic.detail.DetailView` simply adds in the object being displayed "
"to the template, but you can override it to show more::"
msgstr ""

# 37fe84e4aff4486fa3d04e03936f66f4
# 630a312847f7452f8057812055ac091d
#: ../../topics/class-based-views.txt:275 ../../topics/generic-views.txt:322
msgid "Viewing subsets of objects"
msgstr ""

# 6eae5cdd22c648b9a0fa3fe26cdf72e5
#: ../../topics/class-based-views.txt:277
msgid ""
"Now let's take a closer look at the ``model`` argument we've been using all "
"along. The ``model`` argument, which specifies the database model that the "
"view will operate upon, is available on all the generic views that operate "
"on a single object or a collection of objects. However, the ``model`` "
"argument is not the only way to specify the objects that the view will "
"operate upon -- you can also specify the list of objects using the "
"``queryset`` argument::"
msgstr ""

# f028f314b738472db431256e431263c6
#: ../../topics/class-based-views.txt:293
msgid ""
"Specifying ``model = Publisher`` is really just shorthand for saying "
"``queryset = Publisher.objects.all()``. However, by using ``queryset`` to "
"define a filtered list of objects you can be more specific about the objects "
"that will be visible in the view (see :doc:`/topics/db/queries` for more "
"information about :class:`QuerySet` objects, and see the :doc:`class-based "
"views reference </ref/class-based-views>` for the complete details)."
msgstr ""

# f284ea4675ed4054a87172af767246f8
#: ../../topics/class-based-views.txt:301
msgid ""
"To pick a simple example, we might want to order a list of books by "
"publication date, with the most recent first::"
msgstr ""

# 034a775986b94e02bb0194711ca43f23
#: ../../topics/class-based-views.txt:316
msgid ""
"That's a pretty simple example, but it illustrates the idea nicely. Of "
"course, you'll usually want to do more than just reorder objects. If you "
"want to present a list of books by a particular publisher, you can use the "
"same technique (here, illustrated using subclassing rather than by passing "
"arguments in the URLconf)::"
msgstr ""

# 2b36831609a1450abc458a2f73ed25eb
# 5bf304c8e6db4e9fbd3fcdd8cb5c6f8b
#: ../../topics/class-based-views.txt:331 ../../topics/generic-views.txt:362
msgid ""
"Notice that along with a filtered ``queryset``, we're also using a custom "
"template name. If we didn't, the generic view would use the same template as "
"the \"vanilla\" object list, which might not be what we want."
msgstr ""

# a7e6c0fc4aba40d7af991f9e034a71ae
# 8b8e3a1610d24743bf2f7e1a48064625
#: ../../topics/class-based-views.txt:335 ../../topics/generic-views.txt:366
msgid ""
"Also notice that this isn't a very elegant way of doing publisher-specific "
"books. If we want to add another publisher page, we'd need another handful "
"of lines in the URLconf, and more than a few publishers would get "
"unreasonable. We'll deal with this problem in the next section."
msgstr ""

# 7e400f7ec73545ce8393bf498e48a6a3
#: ../../topics/class-based-views.txt:342
msgid ""
"If you get a 404 when requesting ``/books/acme/``, check to ensure you "
"actually have a Publisher with the name 'ACME Publishing'.  Generic views "
"have an ``allow_empty`` parameter for this case.  See the :doc:`class-based-"
"views reference</ref/class-based-views>` for more details."
msgstr ""

# a5de6bb7dece46bc802cfd61efec77c6
#: ../../topics/class-based-views.txt:349
msgid "Dynamic filtering"
msgstr ""

# 076bc1e9703448a0a3e0faa31ab330a6
#: ../../topics/class-based-views.txt:351
msgid ""
"Another common need is to filter down the objects given in a list page by "
"some key in the URL. Earlier we hard-coded the publisher's name in the "
"URLconf, but what if we wanted to write a view that displayed all the books "
"by some arbitrary publisher?"
msgstr ""

# cd845278991b40ccaca0189bd09ad15b
#: ../../topics/class-based-views.txt:356
msgid ""
"Handily, the ``ListView`` has a :meth:`~django.views.generic.detail.ListView."
"get_queryset` method we can override. Previously, it has just been returning "
"the value of the ``queryset`` attribute, but now we can add more logic."
msgstr ""

# ed1d8a99cff24a74b8920206941a9ef6
#: ../../topics/class-based-views.txt:361
msgid ""
"The key part to making this work is that when class-based views are called, "
"various useful things are stored on ``self``; as well as the request (``self."
"request``) this includes the positional (``self.args``) and name-based "
"(``self.kwargs``) arguments captured according to the URLconf."
msgstr ""

# 873ab676ab5c47698902253215d7fe0b
#: ../../topics/class-based-views.txt:366
msgid "Here, we have a URLconf with a single captured group::"
msgstr ""

# 6efd670930bc442db1f7ebc2681db111
#: ../../topics/class-based-views.txt:374
msgid "Next, we'll write the ``PublisherBookListView`` view itself::"
msgstr ""

# d8aa31a1c1474b9b8e92121f62100655
#: ../../topics/class-based-views.txt:389
msgid ""
"As you can see, it's quite easy to add more logic to the queryset selection; "
"if we wanted, we could use ``self.request.user`` to filter using the current "
"user, or other more complex logic."
msgstr ""

# a73fb3468e674e319179b28e619ccc0b
#: ../../topics/class-based-views.txt:393
msgid ""
"We can also add the publisher into the context at the same time, so we can "
"use it in the template::"
msgstr ""

# 9baafc5888734fddaf7b22c024459f28
# 1691f4145b8c44d79d81dbf173c63a28
#: ../../topics/class-based-views.txt:413 ../../topics/generic-views.txt:433
msgid "Performing extra work"
msgstr ""

# ba21c70e1ff74c6bb334d8935291a162
# 7855517b5cf44b8abf9c8e367a6dccbe
#: ../../topics/class-based-views.txt:415 ../../topics/generic-views.txt:435
msgid ""
"The last common pattern we'll look at involves doing some extra work before "
"or after calling the generic view."
msgstr ""

# e51253a984a84c228802a7919d4bbf9c
# c4a1fd9b06304ca58662c854fc4a3dd4
#: ../../topics/class-based-views.txt:418 ../../topics/generic-views.txt:438
msgid ""
"Imagine we had a ``last_accessed`` field on our ``Author`` object that we "
"were using to keep track of the last time anybody looked at that author::"
msgstr ""

# 552e440250af4f2fb0d5af308a0d37f7
#: ../../topics/class-based-views.txt:431
msgid ""
"The generic ``DetailView`` class, of course, wouldn't know anything about "
"this field, but once again we could easily write a custom view to keep that "
"field updated."
msgstr ""

# d70003462e8e4bc596bd751ac3dde65a
# 5d4d94ed821e44f6ad88584e7a1adea6
#: ../../topics/class-based-views.txt:435 ../../topics/generic-views.txt:455
msgid ""
"First, we'd need to add an author detail bit in the URLconf to point to a "
"custom view:"
msgstr ""

# 19411cfe3c95498e8fe65679bcdc440c
#: ../../topics/class-based-views.txt:447
msgid ""
"Then we'd write our new view -- ``get_object`` is the method that retrieves "
"the object -- so we simply override it and wrap the call::"
msgstr ""

# 7bb7027f7a7442e19f69759997e974a3
# ca33257b8734411dbac4a6817850f2be
#: ../../topics/class-based-views.txt:470 ../../topics/generic-views.txt:491
msgid ""
"This code won't actually work unless you create a ``books/author_detail."
"html`` template."
msgstr ""

# cf216063f064484fb41249da026164a8
#: ../../topics/class-based-views.txt:475
msgid ""
"The URLconf here uses the named group ``pk`` - this name is the default name "
"that ``DetailView`` uses to find the value of the primary key used to filter "
"the queryset."
msgstr ""

# 30036b9051034955bf13315e5a5c75a1
#: ../../topics/class-based-views.txt:479
msgid ""
"If you want to change it, you'll need to do your own ``get()`` call on "
"``self.queryset`` using the new named parameter from ``self.kwargs``."
msgstr ""

# 2b7808a68ee94513ba2ed4b02868e067
#: ../../topics/class-based-views.txt:483
msgid "More than just HTML"
msgstr ""

# 0bf35b7b74a14db59eca7c5b1f6dc83a
#: ../../topics/class-based-views.txt:485
msgid ""
"So far, we've been focusing on rendering templates to generate responses. "
"However, that's not all generic views can do."
msgstr ""

# de39b510e4414a0b86324a2f68eafe6d
#: ../../topics/class-based-views.txt:488
msgid ""
"Each generic view is composed out of a series of mixins, and each mixin "
"contributes a little piece of the entire view. Some of these mixins -- such "
"as :class:`~django.views.generic.base.TemplateResponseMixin` -- are "
"specifically designed for rendering content to an HTML response using a "
"template. However, you can write your own mixins that perform different "
"rendering behavior."
msgstr ""

# 8e6c21c43fcd4cc3af9461a9c8f43b91
#: ../../topics/class-based-views.txt:496
msgid "For example, a simple JSON mixin might look something like this::"
msgstr ""

# 015a84e223304a15a1acb16bdc6fc4a5
#: ../../topics/class-based-views.txt:520
msgid ""
"Then, you could build a JSON-returning :class:`~django.views.generic.detail."
"DetailView` by mixing your :class:`JSONResponseMixin` with the :class:"
"`~django.views.generic.detail.BaseDetailView` -- (the :class:`~django.views."
"generic.detail.DetailView` before template rendering behavior has been mixed "
"in)::"
msgstr ""

# 237d5edebe4f4a54bcfcee7f121637bf
#: ../../topics/class-based-views.txt:530
msgid ""
"This view can then be deployed in the same way as any other :class:`~django."
"views.generic.detail.DetailView`, with exactly the same behavior -- except "
"for the format of the response."
msgstr ""

# 0d15a4e97c804b2388d5d81ef1123762
#: ../../topics/class-based-views.txt:534
msgid ""
"If you want to be really adventurous, you could even mix a :class:`~django."
"views.generic.detail.DetailView` subclass that is able to return *both* HTML "
"and JSON content, depending on some property of the HTTP request, such as a "
"query argument or a HTTP header. Just mix in both the :class:"
"`JSONResponseMixin` and a :class:`~django.views.generic.detail."
"SingleObjectTemplateResponseMixin`, and override the implementation of :func:"
"`render_to_response()` to defer to the appropriate subclass depending on the "
"type of response that the user requested::"
msgstr ""

# 859eb9a071d84e8d8688ba7f1fef2d70
#: ../../topics/class-based-views.txt:552
msgid ""
"Because of the way that Python resolves method overloading, the local "
"``render_to_response()`` implementation will override the versions provided "
"by :class:`JSONResponseMixin` and :class:`~django.views.generic.detail."
"SingleObjectTemplateResponseMixin`."
msgstr ""

# 1a2692cf4325466fbb3492b1a593a6eb
#: ../../topics/class-based-views.txt:558
msgid "Decorating class-based views"
msgstr ""

# 6d03cdf4edf14e7489f8f754f4448506
#: ../../topics/class-based-views.txt:562
msgid ""
"The extension of class-based views isn't limited to using mixins. You can "
"use also use decorators."
msgstr ""

# cf0f48fa81514610bf98284f291a36fd
#: ../../topics/class-based-views.txt:566
msgid "Decorating in URLconf"
msgstr ""

# 710e796e210747869d7fefd44e2916b7
#: ../../topics/class-based-views.txt:568
msgid ""
"The simplest way of decorating class-based views is to decorate the result "
"of the :meth:`~django.views.generic.base.View.as_view` method. The easiest "
"place to do this is in the URLconf where you deploy your view::"
msgstr ""

# 99fccdb2023542a1920ae03785007055
#: ../../topics/class-based-views.txt:583
msgid ""
"This approach applies the decorator on a per-instance basis. If you want "
"every instance of a view to be decorated, you need to take a different "
"approach."
msgstr ""

# 8640f768c96d4498af09d55631705718
#: ../../topics/class-based-views.txt:590
msgid "Decorating the class"
msgstr ""

# b5bc2348ce4842bba0070959f047ea78
#: ../../topics/class-based-views.txt:592
msgid ""
"To decorate every instance of a class-based view, you need to decorate the "
"class definition itself. To do this you apply the decorator to the :meth:"
"`~django.views.generic.base.View.dispatch` method of the class."
msgstr ""

# 3e5614e01b044e809a8df018eeee507f
#: ../../topics/class-based-views.txt:596
msgid ""
"A method on a class isn't quite the same as a standalone function, so you "
"can't just apply a function decorator to the method -- you need to transform "
"it into a method decorator first. The ``method_decorator`` decorator "
"transforms a function decorator into a method decorator so that it can be "
"used on an instance method. For example::"
msgstr ""

# cd1611fdbe62464ba12c87853a2ac17a
#: ../../topics/class-based-views.txt:613
msgid ""
"In this example, every instance of ``ProtectedView`` will have login "
"protection."
msgstr ""

# 7b9ddb9032ef47539fea614674629b84
#: ../../topics/class-based-views.txt:618
msgid ""
"``method_decorator`` passes ``*args`` and ``**kwargs`` as parameters to the "
"decorated method on the class. If your method does not accept a compatible "
"set of parameters it will raise a ``TypeError`` exception."
msgstr ""

# c2331b4dfbaa4fb08a86171c801e26d0
#: ../../topics/conditional-view-processing.txt:3
msgid "Conditional View Processing"
msgstr ""

# b1a1e3c4785942f395895f76907975d2
#: ../../topics/conditional-view-processing.txt:5
msgid ""
"HTTP clients can send a number of headers to tell the server about copies of "
"a resource that they have already seen. This is commonly used when "
"retrieving a Web page (using an HTTP ``GET`` request) to avoid sending all "
"the data for something the client has already retrieved. However, the same "
"headers can be used for all HTTP methods (``POST``, ``PUT``, ``DELETE``, "
"etc)."
msgstr ""

# 50515e8db3dd412f960e77ffc2762eb1
#: ../../topics/conditional-view-processing.txt:11
msgid ""
"For each page (response) that Django sends back from a view, it might "
"provide two HTTP headers: the ``ETag`` header and the ``Last-Modified`` "
"header. These headers are optional on HTTP responses. They can be set by "
"your view function, or you can rely on the :class:`~django.middleware.common."
"CommonMiddleware` middleware to set the ``ETag`` header."
msgstr ""

# 5479eaa4e06c48648b5852225d82cb9b
#: ../../topics/conditional-view-processing.txt:17
msgid ""
"When the client next requests the same resource, it might send along a "
"header such as `If-modified-since`_, containing the date of the last "
"modification time it was sent, or `If-none-match`_, containing the ``ETag`` "
"it was sent. If the current version of the page matches the ``ETag`` sent by "
"the client, or if the resource has not been modified, a 304 status code can "
"be sent back, instead of a full response, telling the client that nothing "
"has changed."
msgstr ""

# ac54069dbed046438f1b1802759fbab0
#: ../../topics/conditional-view-processing.txt:27
msgid ""
"When you need more fine-grained control you may use per-view conditional "
"processing functions."
msgstr ""

# 8800da87c45b447aa751bd06e20738b1
#: ../../topics/conditional-view-processing.txt:33
msgid "The ``condition`` decorator"
msgstr ""

# 726ea78b723f462cac0ed2db245db2a2
#: ../../topics/conditional-view-processing.txt:35
msgid ""
"Sometimes (in fact, quite often) you can create functions to rapidly compute "
"the ETag_ value or the last-modified time for a resource, **without** "
"needing to do all the computations needed to construct the full view. Django "
"can then use these functions to provide an \"early bailout\" option for the "
"view processing. Telling the client that the content has not been modified "
"since the last request, perhaps."
msgstr ""

# 4a07263a46ff4d0783c1c6142a7a803d
#: ../../topics/conditional-view-processing.txt:44
msgid ""
"These two functions are passed as parameters the ``django.views.decorators."
"http.condition`` decorator. This decorator uses the two functions (you only "
"need to supply one, if you can't compute both quantities easily and quickly) "
"to work out if the headers in the HTTP request match those on the resource. "
"If they don't match, a new copy of the resource must be computed and your "
"normal view is called."
msgstr ""

# 0ed8e8db10ad40ff873a786476b9a04b
#: ../../topics/conditional-view-processing.txt:51
msgid "The ``condition`` decorator's signature looks like this::"
msgstr ""

# a7067df37a9b45a2a942c490b315d913
#: ../../topics/conditional-view-processing.txt:55
msgid ""
"The two functions, to compute the ETag and the last modified time, will be "
"passed the incoming ``request`` object and the same parameters, in the same "
"order, as the view function they are helping to wrap. The function passed "
"``last_modified_func`` should return a standard datetime value specifying "
"the last time the resource was modified, or ``None`` if the resource doesn't "
"exist. The function passed to the ``etag`` decorator should return a string "
"representing the `Etag`_ for the resource, or ``None`` if it doesn't exist."
msgstr ""

# 5f3d771aa5094157a11c8830ba2c4d47
#: ../../topics/conditional-view-processing.txt:63
msgid ""
"Using this feature usefully is probably best explained with an example. "
"Suppose you have this pair of models, representing a simple blog system::"
msgstr ""

# 73d31cb32fb645fa832565bfbd221236
#: ../../topics/conditional-view-processing.txt:77
msgid ""
"If the front page, displaying the latest blog entries, only changes when you "
"add a new blog entry, you can compute the last modified time very quickly. "
"You need the latest ``published`` date for every entry associated with that "
"blog. One way to do this would be::"
msgstr ""

# b53152f76ce44b1894c78b8c518cda10
#: ../../topics/conditional-view-processing.txt:85
msgid ""
"You can then use this function to provide early detection of an unchanged "
"page for your front page view::"
msgstr ""

# 889ee927840348d6836682bb53e803e8
#: ../../topics/conditional-view-processing.txt:95
msgid "Shortcuts for only computing one value"
msgstr ""

# 25dc91fcfd3941ef8e3c73816534d768
#: ../../topics/conditional-view-processing.txt:97
msgid ""
"As a general rule, if you can provide functions to compute *both* the ETag "
"and the last modified time, you should do so. You don't know which headers "
"any given HTTP client will send you, so be prepared to handle both. However, "
"sometimes only one value is easy to compute and Django provides decorators "
"that handle only ETag or only last-modified computations."
msgstr ""

# 792da55715be4c8f979c5c7dfbb021f6
#: ../../topics/conditional-view-processing.txt:103
msgid ""
"The ``django.views.decorators.http.etag`` and ``django.views.decorators.http."
"last_modified`` decorators are passed the same type of functions as the "
"``condition`` decorator. Their signatures are::"
msgstr ""

# 2c336a8e7e404bc19050e644535af800
#: ../../topics/conditional-view-processing.txt:110
msgid ""
"We could write the earlier example, which only uses a last-modified "
"function, using one of these decorators::"
msgstr ""

# 6bd092ab453a4f8bb746618670e292ac
#: ../../topics/conditional-view-processing.txt:117
msgid "...or::"
msgstr ""

# 42c7b327ed6746a08b123c8827cc3a7e
#: ../../topics/conditional-view-processing.txt:124
msgid "Use ``condition`` when testing both conditions"
msgstr ""

# c85ce5756b59494c83e03ba8bc640389
#: ../../topics/conditional-view-processing.txt:126
msgid ""
"It might look nicer to some people to try and chain the ``etag`` and "
"``last_modified`` decorators if you want to test both preconditions. "
"However, this would lead to incorrect behavior."
msgstr ""

# d3723ac86da141849ff15f497b8c2fa7
#: ../../topics/conditional-view-processing.txt:140
msgid ""
"The first decorator doesn't know anything about the second and might answer "
"that the response is not modified even if the second decorators would "
"determine otherwise. The ``condition`` decorator uses both callback "
"functions simultaneously to work out the right action to take."
msgstr ""

# f0da00a1ed174e228a1ff4f1d1137185
#: ../../topics/conditional-view-processing.txt:146
msgid "Using the decorators with other HTTP methods"
msgstr ""

# 49fb3dca63e74f4898f5240e753714e8
#: ../../topics/conditional-view-processing.txt:148
msgid ""
"The ``condition`` decorator is useful for more than only ``GET`` and "
"``HEAD`` requests (``HEAD`` requests are the same as ``GET`` in this "
"situation). It can be used also to be used to provide checking for ``POST``, "
"``PUT`` and ``DELETE`` requests. In these situations, the idea isn't to "
"return a \"not modified\" response, but to tell the client that the resource "
"they are trying to change has been altered in the meantime."
msgstr ""

# eb42f35e5d4b4eba868f4f9729621eef
#: ../../topics/conditional-view-processing.txt:155
msgid ""
"For example, consider the following exchange between the client and server:"
msgstr ""

# 722b8b0f38934643b8445a3470145822
#: ../../topics/conditional-view-processing.txt:157
msgid "Client requests ``/foo/``."
msgstr ""

# 7f35abc5b37b4b369a7c7068af25357a
#: ../../topics/conditional-view-processing.txt:158
msgid "Server responds with some content with an ETag of ``\"abcd1234\"``."
msgstr ""

# a7b46784ab3a4d64ba68866c50250e07
#: ../../topics/conditional-view-processing.txt:159
msgid ""
"Client sends an HTTP ``PUT`` request to ``/foo/`` to update the resource. It "
"also sends an ``If-Match: \"abcd1234\"`` header to specify the version it is "
"trying to update."
msgstr ""

# 36dd9d6aecef4d8fa86d615b6effeb9a
#: ../../topics/conditional-view-processing.txt:162
msgid ""
"Server checks to see if the resource has changed, by computing the ETag the "
"same way it does for a ``GET`` request (using the same function). If the "
"resource *has* changed, it will return a 412 status code code, meaning "
"\"precondition failed\"."
msgstr ""

# 1fde4bf8feb146bd8b6d61a46e31e1da
#: ../../topics/conditional-view-processing.txt:166
msgid ""
"Client sends a ``GET`` request to ``/foo/``, after receiving a 412 response, "
"to retrieve an updated version of the content before updating it."
msgstr ""

# d58edb6f82214fedac51e42dd723dfcd
#: ../../topics/conditional-view-processing.txt:170
msgid ""
"The important thing this example shows is that the same functions can be "
"used to compute the ETag and last modification values in all situations. In "
"fact, you **should** use the same functions, so that the same values are "
"returned every time."
msgstr ""

# 7105b4547aba4319a7b84e55f2c3944e
#: ../../topics/conditional-view-processing.txt:176
msgid "Comparison with middleware conditional processing"
msgstr ""

# 19f28284a9494e4a8eeafce73017b51b
#: ../../topics/conditional-view-processing.txt:178
msgid ""
"You may notice that Django already provides simple and straightforward "
"conditional ``GET`` handling via the :class:`django.middleware.http."
"ConditionalGetMiddleware` and :class:`~django.middleware.common."
"CommonMiddleware`. Whilst certainly being easy to use and suitable for many "
"situations, those pieces of middleware functionality have limitations for "
"advanced usage:"
msgstr ""

# a79611cef32540c0a77080da41531fb9
#: ../../topics/conditional-view-processing.txt:185
msgid "They are applied globally to all views in your project"
msgstr ""

# a90d4f7876ec423f849cb0d63c01a026
#: ../../topics/conditional-view-processing.txt:186
msgid ""
"They don't save you from generating the response itself, which may be "
"expensive"
msgstr ""

# 22a0c7882b4544029cfbfb933ba9d7f7
#: ../../topics/conditional-view-processing.txt:188
msgid "They are only appropriate for HTTP ``GET`` requests."
msgstr ""

# 7a4f3d44b26446718951a244028a7dda
#: ../../topics/conditional-view-processing.txt:190
msgid ""
"You should choose the most appropriate tool for your particular problem "
"here. If you have a way to compute ETags and modification times quickly and "
"if some view takes a while to generate the content, you should consider "
"using the ``condition`` decorator described in this document. If everything "
"already runs fairly quickly, stick to using the middleware and the amount of "
"network traffic sent back to the clients will still be reduced if the view "
"hasn't changed."
msgstr ""

# 3f22f452256c447dae4d9e8ed43328bb
#: ../../topics/db/aggregation.txt:3
msgid "Aggregation"
msgstr ""

# f24e3709046644b69896cace814ccbb3
#: ../../topics/db/aggregation.txt:7
msgid ""
"The topic guide on :doc:`Django's database-abstraction API </topics/db/"
"queries>` described the way that you can use Django queries that create, "
"retrieve, update and delete individual objects. However, sometimes you will "
"need to retrieve values that are derived by summarizing or *aggregating* a "
"collection of objects. This topic guide describes the ways that aggregate "
"values can be generated and returned using Django queries."
msgstr ""

# dc9ab28313cf48a593a1f9130866ba15
#: ../../topics/db/aggregation.txt:14
msgid ""
"Throughout this guide, we'll refer to the following models. These models are "
"used to track the inventory for a series of online bookstores:"
msgstr ""

# 8055223f1417459ca426d9e3c9fed01f
#: ../../topics/db/aggregation.txt:45
msgid "Cheat sheet"
msgstr ""

# 1a8d606ea932485583b9522598dcea13
#: ../../topics/db/aggregation.txt:47
msgid ""
"In a hurry? Here's how to do common aggregate queries, assuming the models "
"above::"
msgstr ""

# 925f7a91f53b49f29c8277c7f67c0c55
#: ../../topics/db/aggregation.txt:82
msgid "Generating aggregates over a QuerySet"
msgstr ""

# b94554ae90144d46adb2d7e60823d0bf
#: ../../topics/db/aggregation.txt:84
msgid ""
"Django provides two ways to generate aggregates. The first way is to "
"generate summary values over an entire ``QuerySet``. For example, say you "
"wanted to calculate the average price of all books available for sale. "
"Django's query syntax provides a means for describing the set of all books::"
msgstr ""

# 9e07d69d40c5425e9da0f40ca8cddec8
#: ../../topics/db/aggregation.txt:91
msgid ""
"What we need is a way to calculate summary values over the objects that "
"belong to this ``QuerySet``. This is done by appending an ``aggregate()`` "
"clause onto the ``QuerySet``::"
msgstr ""

# 4439352b34c44eb0862f0ac2e6189c56
#: ../../topics/db/aggregation.txt:99
msgid ""
"The ``all()`` is redundant in this example, so this could be simplified to::"
msgstr ""

# 5e8e60934ed34542b7ac68d09b88e565
#: ../../topics/db/aggregation.txt:104
msgid ""
"The argument to the ``aggregate()`` clause describes the aggregate value "
"that we want to compute - in this case, the average of the ``price`` field "
"on the ``Book`` model. A list of the aggregate functions that are available "
"can be found in the :ref:`QuerySet reference <aggregation-functions>`."
msgstr ""

# 4010d52648b941f2968cca5d92279468
#: ../../topics/db/aggregation.txt:109
msgid ""
"``aggregate()`` is a terminal clause for a ``QuerySet`` that, when invoked, "
"returns a dictionary of name-value pairs. The name is an identifier for the "
"aggregate value; the value is the computed aggregate. The name is "
"automatically generated from the name of the field and the aggregate "
"function. If you want to manually specify a name for the aggregate value, "
"you can do so by providing that name when you specify the aggregate clause::"
msgstr ""

# 9086e8e46e3541f9b29a23db74970132
#: ../../topics/db/aggregation.txt:119
msgid ""
"If you want to generate more than one aggregate, you just add another "
"argument to the ``aggregate()`` clause. So, if we also wanted to know the "
"maximum and minimum price of all books, we would issue the query::"
msgstr ""

# dae27a8ec8e54ca785cf23fa28214952
#: ../../topics/db/aggregation.txt:128
msgid "Generating aggregates for each item in a QuerySet"
msgstr ""

# f0687dd88d7f4c9aaff4b7bb63e96e6b
#: ../../topics/db/aggregation.txt:130
msgid ""
"The second way to generate summary values is to generate an independent "
"summary for each object in a ``QuerySet``. For example, if you are "
"retrieving a list of books, you may want to know how many authors "
"contributed to each book. Each Book has a many-to-many relationship with the "
"Author; we want to summarize this relationship for each book in the "
"``QuerySet``."
msgstr ""

# 1ed65ee9601a47adb84914766b59c0c4
#: ../../topics/db/aggregation.txt:136
msgid ""
"Per-object summaries can be generated using the ``annotate()`` clause. When "
"an ``annotate()`` clause is specified, each object in the ``QuerySet`` will "
"be annotated with the specified values."
msgstr ""

# 72fa43295bce4aa2b64a381f2bf439ec
#: ../../topics/db/aggregation.txt:140
msgid ""
"The syntax for these annotations is identical to that used for the "
"``aggregate()`` clause. Each argument to ``annotate()`` describes an "
"aggregate that is to be calculated. For example, to annotate Books with the "
"number of authors::"
msgstr ""

# d989ab8a87b9490ab3af154be2055a92
#: ../../topics/db/aggregation.txt:158
msgid ""
"As with ``aggregate()``, the name for the annotation is automatically "
"derived from the name of the aggregate function and the name of the field "
"being aggregated. You can override this default name by providing an alias "
"when you specify the annotation::"
msgstr ""

# 2928920dff0742f7b31a0781a75f87e9
#: ../../topics/db/aggregation.txt:169
msgid ""
"Unlike ``aggregate()``, ``annotate()`` is *not* a terminal clause. The "
"output of the ``annotate()`` clause is a ``QuerySet``; this ``QuerySet`` can "
"be modified using any other ``QuerySet`` operation, including ``filter()``, "
"``order_by``, or even additional calls to ``annotate()``."
msgstr ""

# 7177239414f24302b2316ee13bc91a16
#: ../../topics/db/aggregation.txt:175
msgid "Joins and aggregates"
msgstr ""

# b32df44eb43a43e2a5f5fec6fb826e6e
#: ../../topics/db/aggregation.txt:177
msgid ""
"So far, we have dealt with aggregates over fields that belong to the model "
"being queried. However, sometimes the value you want to aggregate will "
"belong to a model that is related to the model you are querying."
msgstr ""

# fba95fb25d6a47d09a0a4d7155b4cd24
#: ../../topics/db/aggregation.txt:181
msgid ""
"When specifying the field to be aggregated in an aggregate function, Django "
"will allow you to use the same :ref:`double underscore notation <field-"
"lookups-intro>` that is used when referring to related fields in filters. "
"Django will then handle any table joins that are required to retrieve and "
"aggregate the related value."
msgstr ""

# db8f14f1b00a4633afecf92bc47782a2
#: ../../topics/db/aggregation.txt:187
msgid ""
"For example, to find the price range of books offered in each store, you "
"could use the annotation::"
msgstr ""

# 0ee996fdaedf4b099830855c6f2d6dbd
#: ../../topics/db/aggregation.txt:192
msgid ""
"This tells Django to retrieve the Store model, join (through the many-to-"
"many relationship) with the Book model, and aggregate on the price field of "
"the book model to produce a minimum and maximum value."
msgstr ""

# ed24168478ad494ea8d79485c2bd8ca0
#: ../../topics/db/aggregation.txt:196
msgid ""
"The same rules apply to the ``aggregate()`` clause. If you wanted to know "
"the lowest and highest price of any book that is available for sale in a "
"store, you could use the aggregate::"
msgstr ""

# 0d693b8b947d4baf8789648c0d979703
#: ../../topics/db/aggregation.txt:202
msgid ""
"Join chains can be as deep as you require. For example, to extract the age "
"of the youngest author of any book available for sale, you could issue the "
"query::"
msgstr ""

# 5378466337b84e8aa06adc22930a15aa
#: ../../topics/db/aggregation.txt:209
msgid "Aggregations and other QuerySet clauses"
msgstr ""

# 7fb15bb81dc545a0932acca48b2c4df1
#: ../../topics/db/aggregation.txt:212
msgid "``filter()`` and ``exclude()``"
msgstr ""

# 451ba7099d1d4801852db1deb41a9863
#: ../../topics/db/aggregation.txt:214
msgid ""
"Aggregates can also participate in filters. Any ``filter()`` (or ``exclude()"
"``) applied to normal model fields will have the effect of constraining the "
"objects that are considered for aggregation."
msgstr ""

# 0fca58caaf4a40f3a060428e77beed79
#: ../../topics/db/aggregation.txt:218
msgid ""
"When used with an ``annotate()`` clause, a filter has the effect of "
"constraining the objects for which an annotation is calculated. For example, "
"you can generate an annotated list of all books that have a title starting "
"with \"Django\" using the query::"
msgstr ""

# c570ff0b00824fac8b7462bba6c40e47
#: ../../topics/db/aggregation.txt:225
msgid ""
"When used with an ``aggregate()`` clause, a filter has the effect of "
"constraining the objects over which the aggregate is calculated. For "
"example, you can generate the average price of all books with a title that "
"starts with \"Django\" using the query::"
msgstr ""

# 2077cc3d61bb4b7c9a4e633c0562aa07
#: ../../topics/db/aggregation.txt:233
msgid "Filtering on annotations"
msgstr ""

# 06d01a43077640ba84427d7944d9d3b2
#: ../../topics/db/aggregation.txt:235
msgid ""
"Annotated values can also be filtered. The alias for the annotation can be "
"used in ``filter()`` and ``exclude()`` clauses in the same way as any other "
"model field."
msgstr ""

# 1dbf3805e4994b7f8ad339c4e4ca6629
#: ../../topics/db/aggregation.txt:239
msgid ""
"For example, to generate a list of books that have more than one author, you "
"can issue the query::"
msgstr ""

# 20a519199a4f4fa98497d64c25b0aae9
#: ../../topics/db/aggregation.txt:244
msgid ""
"This query generates an annotated result set, and then generates a filter "
"based upon that annotation."
msgstr ""

# 13242eebf99d420f8226900136a1aea6
#: ../../topics/db/aggregation.txt:248
msgid "Order of ``annotate()`` and ``filter()`` clauses"
msgstr ""

# 48b7861c5db54d348fcbe48109bfa2d9
#: ../../topics/db/aggregation.txt:250
msgid ""
"When developing a complex query that involves both ``annotate()`` and "
"``filter()`` clauses, particular attention should be paid to the order in "
"which the clauses are applied to the ``QuerySet``."
msgstr ""

# 0605eeb312e048868078f3180535bb90
#: ../../topics/db/aggregation.txt:254
msgid ""
"When an ``annotate()`` clause is applied to a query, the annotation is "
"computed over the state of the query up to the point where the annotation is "
"requested. The practical implication of this is that ``filter()`` and "
"``annotate()`` are not commutative operations -- that is, there is a "
"difference between the query::"
msgstr ""

# a8d97803974a40b1bd0d076d1a290d0f
#: ../../topics/db/aggregation.txt:262
msgid "and the query::"
msgstr ""

# 91a2ecee6e4542928fa2d50be439aa3f
#: ../../topics/db/aggregation.txt:266
msgid ""
"Both queries will return a list of Publishers that have at least one good "
"book (i.e., a book with a rating exceeding 3.0). However, the annotation in "
"the first query will provide the total number of all books published by the "
"publisher; the second query will only include good books in the annotated "
"count. In the first query, the annotation precedes the filter, so the filter "
"has no effect on the annotation. In the second query, the filter precedes "
"the annotation, and as a result, the filter constrains the objects "
"considered when calculating the annotation."
msgstr ""

# 91db09a18f27428bb4a9fe0c7159fd64
#: ../../topics/db/aggregation.txt:276
msgid "``order_by()``"
msgstr ""

# 9c17e10fae3743cf853f866c55965eb8
#: ../../topics/db/aggregation.txt:278
msgid ""
"Annotations can be used as a basis for ordering. When you define an "
"``order_by()`` clause, the aggregates you provide can reference any alias "
"defined as part of an ``annotate()`` clause in the query."
msgstr ""

# feecd73ba175438da4fcb52f2f7b1820
#: ../../topics/db/aggregation.txt:282
msgid ""
"For example, to order a ``QuerySet`` of books by the number of authors that "
"have contributed to the book, you could use the following query::"
msgstr ""

# 8e2769a534f14686bca85923b0727344
#: ../../topics/db/aggregation.txt:288
msgid "``values()``"
msgstr ""

# feaac1fa80ec44cfa290a71189d5a73c
#: ../../topics/db/aggregation.txt:290
msgid ""
"Ordinarily, annotations are generated on a per-object basis - an annotated "
"``QuerySet`` will return one result for each object in the original "
"``QuerySet``. However, when a ``values()`` clause is used to constrain the "
"columns that are returned in the result set, the method for evaluating "
"annotations is slightly different. Instead of returning an annotated result "
"for each result in the original ``QuerySet``, the original results are "
"grouped according to the unique combinations of the fields specified in the "
"``values()`` clause. An annotation is then provided for each unique group; "
"the annotation is computed over all members of the group."
msgstr ""

# 492ffa809b8142c29dd6d4001d5b23fc
#: ../../topics/db/aggregation.txt:300
msgid ""
"For example, consider an author query that attempts to find out the average "
"rating of books written by each author:"
msgstr ""

# 210fc1a137134af6ba44af17d3c4ab19
#: ../../topics/db/aggregation.txt:305
msgid ""
"This will return one result for each author in the database, annotated with "
"their average book rating."
msgstr ""

# cb0251b4717649af96ad236222c3d4df
#: ../../topics/db/aggregation.txt:308
msgid ""
"However, the result will be slightly different if you use a ``values()`` "
"clause::"
msgstr ""

# 829a8a132d854279a481d94bdd4c26f9
#: ../../topics/db/aggregation.txt:312
msgid ""
"In this example, the authors will be grouped by name, so you will only get "
"an annotated result for each *unique* author name. This means if you have "
"two authors with the same name, their results will be merged into a single "
"result in the output of the query; the average will be computed as the "
"average over the books written by both authors."
msgstr ""

# 534c9b2197584430b930e0e8850ef88a
#: ../../topics/db/aggregation.txt:319
msgid "Order of ``annotate()`` and ``values()`` clauses"
msgstr ""

# b57b9b289c774f75b38dfbf3dbf8139f
#: ../../topics/db/aggregation.txt:321
msgid ""
"As with the ``filter()`` clause, the order in which ``annotate()`` and "
"``values()`` clauses are applied to a query is significant. If the ``values()"
"`` clause precedes the ``annotate()``, the annotation will be computed using "
"the grouping described by the ``values()`` clause."
msgstr ""

# a4328a091c624f768ffff7a2835cecb8
#: ../../topics/db/aggregation.txt:326
msgid ""
"However, if the ``annotate()`` clause precedes the ``values()`` clause, the "
"annotations will be generated over the entire query set. In this case, the "
"``values()`` clause only constrains the fields that are generated on output."
msgstr ""

# 86d0c9845ff84feb875c5b7185547a91
#: ../../topics/db/aggregation.txt:331
msgid ""
"For example, if we reverse the order of the ``values()`` and ``annotate()`` "
"clause from our previous example::"
msgstr ""

# a7d8018e12294651964c3d577e6398db
#: ../../topics/db/aggregation.txt:336
msgid ""
"This will now yield one unique result for each author; however, only the "
"author's name and the ``average_rating`` annotation will be returned in the "
"output data."
msgstr ""

# 543ae1a241694b1782fb1901e434c8a7
#: ../../topics/db/aggregation.txt:340
msgid ""
"You should also note that ``average_rating`` has been explicitly included in "
"the list of values to be returned. This is required because of the ordering "
"of the ``values()`` and ``annotate()`` clause."
msgstr ""

# d800cf03a7a84d02b0fbf5532590eeaf
#: ../../topics/db/aggregation.txt:344
msgid ""
"If the ``values()`` clause precedes the ``annotate()`` clause, any "
"annotations will be automatically added to the result set. However, if the "
"``values()`` clause is applied after the ``annotate()`` clause, you need to "
"explicitly include the aggregate column."
msgstr ""

# c758c4fba83141ca99187d315a0e8045
#: ../../topics/db/aggregation.txt:350
msgid "Interaction with default ordering or ``order_by()``"
msgstr ""

# 9374676777894cc499cd8776321aa1f5
#: ../../topics/db/aggregation.txt:352
msgid ""
"Fields that are mentioned in the ``order_by()`` part of a queryset (or which "
"are used in the default ordering on a model) are used when selecting the "
"output data, even if they are not otherwise specified in the ``values()`` "
"call. These extra fields are used to group \"like\" results together and "
"they can make otherwise identical result rows appear to be separate. This "
"shows up, particularly, when counting things."
msgstr ""

# f3eaef104988459c8f5d9bd91a31151c
#: ../../topics/db/aggregation.txt:359
msgid "By way of example, suppose you have a model like this::"
msgstr ""

# 7e1fd867bd2941078924d2f1663008e2
#: ../../topics/db/aggregation.txt:368
msgid ""
"The important part here is the default ordering on the ``name`` field. If "
"you want to count how many times each distinct ``data`` value appears, you "
"might try this::"
msgstr ""

# a123b0c6ba5b4aafb1acebac46c9fd2a
#: ../../topics/db/aggregation.txt:375
msgid ""
"...which will group the ``Item`` objects by their common ``data`` values and "
"then count the number of ``id`` values in each group. Except that it won't "
"quite work. The default ordering by ``name`` will also play a part in the "
"grouping, so this query will group by distinct ``(data, name)`` pairs, which "
"isn't what you want. Instead, you should construct this queryset::"
msgstr ""

# 1bafd465e3f542a7aa48ee8db2d422eb
#: ../../topics/db/aggregation.txt:383
msgid ""
"...clearing any ordering in the query. You could also order by, say, "
"``data`` without any harmful effects, since that is already playing a role "
"in the query."
msgstr ""

# f84eedee69b7476f86db3d0e8c7e55be
#: ../../topics/db/aggregation.txt:387
msgid ""
"This behavior is the same as that noted in the queryset documentation for :"
"meth:`~django.db.models.query.QuerySet.distinct` and the general rule is the "
"same: normally you won't want extra columns playing a part in the result, so "
"clear out the ordering, or at least make sure it's restricted only to those "
"fields you also select in a ``values()`` call."
msgstr ""

# ed1e163b6b414c438c88e5412fdb6533
#: ../../topics/db/aggregation.txt:394
msgid ""
"You might reasonably ask why Django doesn't remove the extraneous columns "
"for you. The main reason is consistency with ``distinct()`` and other "
"places: Django **never** removes ordering constraints that you have "
"specified (and we can't change those other methods' behavior, as that would "
"violate our :doc:`/misc/api-stability` policy)."
msgstr ""

# 6ce9ce60e41f42a5886b54656c9c6c75
#: ../../topics/db/aggregation.txt:401
msgid "Aggregating annotations"
msgstr ""

# 499324555e76429ebc8508a0f1876b54
#: ../../topics/db/aggregation.txt:403
msgid ""
"You can also generate an aggregate on the result of an annotation. When you "
"define an ``aggregate()`` clause, the aggregates you provide can reference "
"any alias defined as part of an ``annotate()`` clause in the query."
msgstr ""

# 82bd03e7c3fb46ceb7d894720d64be8d
#: ../../topics/db/aggregation.txt:407
msgid ""
"For example, if you wanted to calculate the average number of authors per "
"book you first annotate the set of books with the author count, then "
"aggregate that author count, referencing the annotation field::"
msgstr ""

# 5559352a48b54428a2bfe98173da46c0
#: ../../topics/db/index.txt:2
msgid "Models and databases"
msgstr ""

# cca8f9344a8046e3b09620ed2ebbe806
# fcbfdf96d0b844108bc69bed9597e7a7
#: ../../topics/db/index.txt:6 ../../topics/db/models.txt:7
msgid ""
"A model is the single, definitive source of data about your data. It "
"contains the essential fields and behaviors of the data you're storing. "
"Generally, each model maps to a single database table."
msgstr ""

# 0f30834d51d14f6f95d825297a014236
#: ../../topics/db/managers.txt:3
msgid "Managers"
msgstr ""

# bbc15400c3064be490efeba0e3aeb95a
#: ../../topics/db/managers.txt:9
msgid ""
"A ``Manager`` is the interface through which database query operations are "
"provided to Django models. At least one ``Manager`` exists for every model "
"in a Django application."
msgstr ""

# 05af4ee7e2a84ab8ace1060cd56bef16
#: ../../topics/db/managers.txt:13
msgid ""
"The way ``Manager`` classes work is documented in :doc:`/topics/db/queries`; "
"this document specifically touches on model options that customize "
"``Manager`` behavior."
msgstr ""

# 5322b6cbcf4b4f7e99229c934c38cb34
#: ../../topics/db/managers.txt:20
msgid "Manager names"
msgstr ""

# c507f1944a534bd6aeece93ea2076280
#: ../../topics/db/managers.txt:22
msgid ""
"By default, Django adds a ``Manager`` with the name ``objects`` to every "
"Django model class. However, if you want to use ``objects`` as a field name, "
"or if you want to use a name other than ``objects`` for the ``Manager``, you "
"can rename it on a per-model basis. To rename the ``Manager`` for a given "
"class, define a class attribute of type ``models.Manager()`` on that model. "
"For example::"
msgstr ""

# 1227945c3b494d889334f6314dc85e36
#: ../../topics/db/managers.txt:34
msgid ""
"Using this example model, ``Person.objects`` will generate an "
"``AttributeError`` exception, but ``Person.people.all()`` will provide a "
"list of all ``Person`` objects."
msgstr ""

# 5c89afa978ec4624b4c4d87bce453c7a
#: ../../topics/db/managers.txt:41
msgid "Custom Managers"
msgstr ""

# a9ab1e02fb13464bb7ec55b0f16f7cad
#: ../../topics/db/managers.txt:43
msgid ""
"You can use a custom ``Manager`` in a particular model by extending the base "
"``Manager`` class and instantiating your custom ``Manager`` in your model."
msgstr ""

# ec7c732001034b4a84613ded3db02688
#: ../../topics/db/managers.txt:46
msgid ""
"There are two reasons you might want to customize a ``Manager``: to add "
"extra ``Manager`` methods, and/or to modify the initial ``QuerySet`` the "
"``Manager`` returns."
msgstr ""

# c662b7904db245679edcea5e6fa270eb
#: ../../topics/db/managers.txt:51
msgid "Adding extra Manager methods"
msgstr ""

# 1684dadd33694fe68ce995aab7a96c1a
#: ../../topics/db/managers.txt:53
msgid ""
"Adding extra ``Manager`` methods is the preferred way to add \"table-level\" "
"functionality to your models. (For \"row-level\" functionality -- i.e., "
"functions that act on a single instance of a model object -- use :ref:`Model "
"methods <model-methods>`, not custom ``Manager`` methods.)"
msgstr ""

# fad267cff0df420dae1aa8a4c2311cc0
#: ../../topics/db/managers.txt:58
msgid ""
"A custom ``Manager`` method can return anything you want. It doesn't have to "
"return a ``QuerySet``."
msgstr ""

# 0b93732b158d4960b8b3a616f2ed9377
#: ../../topics/db/managers.txt:61
msgid ""
"For example, this custom ``Manager`` offers a method ``with_counts()``, "
"which returns a list of all ``OpinionPoll`` objects, each with an extra "
"``num_responses`` attribute that is the result of an aggregate query::"
msgstr ""

# 0988da7364c5451091f7d4d7ac2d5b01
#: ../../topics/db/managers.txt:92
msgid ""
"With this example, you'd use ``OpinionPoll.objects.with_counts()`` to return "
"that list of ``OpinionPoll`` objects with ``num_responses`` attributes."
msgstr ""

# ed1089ae84004302805f0fa79940d0ac
#: ../../topics/db/managers.txt:95
msgid ""
"Another thing to note about this example is that ``Manager`` methods can "
"access ``self.model`` to get the model class to which they're attached."
msgstr ""

# 1b3f6314fdb74d8493d95f1e8e99f961
#: ../../topics/db/managers.txt:99
msgid "Modifying initial Manager QuerySets"
msgstr ""

# 77590d2a76304f13b25c2a9ca8731141
#: ../../topics/db/managers.txt:101
msgid ""
"A ``Manager``'s base ``QuerySet`` returns all objects in the system. For "
"example, using this model::"
msgstr ""

# 11fd910ac8c14ec29f05734ff7c55ec1
#: ../../topics/db/managers.txt:108
msgid ""
"...the statement ``Book.objects.all()`` will return all books in the "
"database."
msgstr ""

# ce1fee99db59453aaf86e2ce872b2f5b
#: ../../topics/db/managers.txt:110
msgid ""
"You can override a ``Manager``\\'s base ``QuerySet`` by overriding the "
"``Manager.get_query_set()`` method. ``get_query_set()`` should return a "
"``QuerySet`` with the properties you require."
msgstr ""

# a814761eaa3c4ac89ddc7cfe1329af73
#: ../../topics/db/managers.txt:114
msgid ""
"For example, the following model has *two* ``Manager``\\s -- one that "
"returns all objects, and one that returns only the books by Roald Dahl::"
msgstr ""

# 1caa2c190355485da2df6c64edbc15d7
#: ../../topics/db/managers.txt:130
msgid ""
"With this sample model, ``Book.objects.all()`` will return all books in the "
"database, but ``Book.dahl_objects.all()`` will only return the ones written "
"by Roald Dahl."
msgstr ""

# 7fce17bbf7a449938436bcaaa6b70c22
#: ../../topics/db/managers.txt:134
msgid ""
"Of course, because ``get_query_set()`` returns a ``QuerySet`` object, you "
"can use ``filter()``, ``exclude()`` and all the other ``QuerySet`` methods "
"on it. So these statements are all legal::"
msgstr ""

# c4d94ef76c844e0782fd94ffaf45337b
#: ../../topics/db/managers.txt:142
msgid ""
"This example also pointed out another interesting technique: using multiple "
"managers on the same model. You can attach as many ``Manager()`` instances "
"to a model as you'd like. This is an easy way to define common \"filters\" "
"for your models."
msgstr ""

# a307ffaaf58843ec90fbed99c60435a8
#: ../../topics/db/managers.txt:165
msgid ""
"This example allows you to request ``Person.men.all()``, ``Person.women.all()"
"``, and ``Person.people.all()``, yielding predictable results."
msgstr ""

# 76849c97547f48d9a64eef3564a29f48
#: ../../topics/db/managers.txt:168
msgid ""
"If you use custom ``Manager`` objects, take note that the first ``Manager`` "
"Django encounters (in the order in which they're defined in the model) has a "
"special status. Django interprets the first ``Manager`` defined in a class "
"as the \"default\" ``Manager``, and several parts of Django (including :"
"djadmin:`dumpdata`) will use that ``Manager`` exclusively for that model. As "
"a result, it's a good idea to be careful in your choice of default manager "
"in order to avoid a situation where overriding ``get_query_set()`` results "
"in an inability to retrieve objects you'd like to work with."
msgstr ""

# e0b70517c89540a2b48bab58eb296577
#: ../../topics/db/managers.txt:181
msgid "Using managers for related object access"
msgstr ""

# 6431ab349f5840178a1cc556f875a992
#: ../../topics/db/managers.txt:183
msgid ""
"By default, Django uses an instance of a \"plain\" manager class when "
"accessing related objects (i.e. ``choice.poll``), not the default manager on "
"the related object. This is because Django needs to be able to retrieve the "
"related object, even if it would otherwise be filtered out (and hence be "
"inaccessible) by the default manager."
msgstr ""

# fa83a8361c604a68a5f5c3526d6f1788
#: ../../topics/db/managers.txt:189
msgid ""
"If the normal plain manager class (:class:`django.db.models.Manager`) is not "
"appropriate for your circumstances, you can force Django to use the same "
"class as the default manager for your model by setting the "
"`use_for_related_fields` attribute on the manager class. This is documented "
"fully below_."
msgstr ""

# 315c6113ddfe450bb1321cdeeed19c2a
#: ../../topics/db/managers.txt:199
msgid "Custom managers and model inheritance"
msgstr ""

# c375806e38404974b8022dc90c036676
#: ../../topics/db/managers.txt:201
msgid ""
"Class inheritance and model managers aren't quite a perfect match for each "
"other. Managers are often specific to the classes they are defined on and "
"inheriting them in subclasses isn't necessarily a good idea. Also, because "
"the first manager declared is the *default manager*, it is important to "
"allow that to be controlled. So here's how Django handles custom managers "
"and :ref:`model inheritance <model-inheritance>`:"
msgstr ""

# bcc772b917cf408eb0eaefa6df6ef86b
#: ../../topics/db/managers.txt:208
msgid ""
"Managers defined on non-abstract base classes are *not* inherited by child "
"classes. If you want to reuse a manager from a non-abstract base, redeclare "
"it explicitly on the child class. These sorts of managers are likely to be "
"fairly specific to the class they are defined on, so inheriting them can "
"often lead to unexpected results (particularly as far as the default manager "
"goes). Therefore, they aren't passed onto child classes."
msgstr ""

# ebfdf06c59c5496eaba1dc18a1e75dbe
#: ../../topics/db/managers.txt:216
msgid ""
"Managers from abstract base classes are always inherited by the child class, "
"using Python's normal name resolution order (names on the child class "
"override all others; then come names on the first parent class, and so on). "
"Abstract base classes are designed to capture information and behavior that "
"is common to their child classes. Defining common managers is an appropriate "
"part of this common information."
msgstr ""

# 930c4f2c184a49f6a619779506e39041
#: ../../topics/db/managers.txt:223
msgid ""
"The default manager on a class is either the first manager declared on the "
"class, if that exists, or the default manager of the first abstract base "
"class in the parent hierarchy, if that exists. If no default manager is "
"explicitly declared, Django's normal default manager is used."
msgstr ""

# 878bc829c4ff4d58bdbd4ba95289fa9e
#: ../../topics/db/managers.txt:229
msgid ""
"These rules provide the necessary flexibility if you want to install a "
"collection of custom managers on a group of models, via an abstract base "
"class, but still customize the default manager. For example, suppose you "
"have this base class::"
msgstr ""

# 03aaaf97ecce41d4a20a3a55dc02f338
#: ../../topics/db/managers.txt:241
msgid ""
"If you use this directly in a subclass, ``objects`` will be the default "
"manager if you declare no managers in the base class::"
msgstr ""

# 724d02f93cee49edb1bfc231517266ea
#: ../../topics/db/managers.txt:248
msgid ""
"If you want to inherit from ``AbstractBase``, but provide a different "
"default manager, you can provide the default manager on the child class::"
msgstr ""

# 588f8598edf448929837755627ebfb83
#: ../../topics/db/managers.txt:256
msgid ""
"Here, ``default_manager`` is the default. The ``objects`` manager is still "
"available, since it's inherited. It just isn't used as the default."
msgstr ""

# 22c6b0e49d254d5c9718b98890cb602c
#: ../../topics/db/managers.txt:259
msgid ""
"Finally for this example, suppose you want to add extra managers to the "
"child class, but still use the default from ``AbstractBase``. You can't add "
"the new manager directly in the child class, as that would override the "
"default and you would have to also explicitly include all the managers from "
"the abstract base class. The solution is to put the extra managers in "
"another base class and introduce it into the inheritance hierarchy *after* "
"the defaults::"
msgstr ""

# 605a9f54616c428abf01d097c4003ac8
#: ../../topics/db/managers.txt:278
msgid "Implementation concerns"
msgstr ""

# 8573b4754c4048edb3e3534f485e4ac9
#: ../../topics/db/managers.txt:280
msgid ""
"Whatever features you add to your custom ``Manager``, it must be possible to "
"make a shallow copy of a ``Manager`` instance; i.e., the following code must "
"work::"
msgstr ""

# e10cd8f575a2441eb770fa1becec1b6e
#: ../../topics/db/managers.txt:288
msgid ""
"Django makes shallow copies of manager objects during certain queries; if "
"your Manager cannot be copied, those queries will fail."
msgstr ""

# 39e7844b0e244856b7797bb9d8234195
#: ../../topics/db/managers.txt:291
msgid ""
"This won't be an issue for most custom managers. If you are just adding "
"simple methods to your ``Manager``, it is unlikely that you will "
"inadvertently make instances of your ``Manager`` uncopyable. However, if "
"you're overriding ``__getattr__`` or some other private method of your "
"``Manager`` object that controls object state, you should ensure that you "
"don't affect the ability of your ``Manager`` to be copied."
msgstr ""

# 23bd43dbc1174b6d940ce1dd49be75d9
#: ../../topics/db/managers.txt:302
msgid "Controlling automatic Manager types"
msgstr ""

# 865c0ad768b6468cabdd9ddebe2f7f86
#: ../../topics/db/managers.txt:304
msgid ""
"This document has already mentioned a couple of places where Django creates "
"a manager class for you: `default managers`_ and the \"plain\" manager used "
"to `access related objects`_. There are other places in the implementation "
"of Django where temporary plain managers are needed. Those automatically "
"created managers will normally be instances of the :class:`django.db.models."
"Manager` class."
msgstr ""

# e4d404f3acdf4d479abc91af9eeaebd1
#: ../../topics/db/managers.txt:314
msgid ""
"Throughout this section, we will use the term \"automatic manager\" to mean "
"a manager that Django creates for you -- either as a default manager on a "
"model with no managers, or to use temporarily when accessing related objects."
msgstr ""

# b76d3e59073948d388f501848214b5c9
#: ../../topics/db/managers.txt:318
msgid ""
"Sometimes this default class won't be the right choice. One example is in "
"the :mod:`django.contrib.gis` application that ships with Django itself. All "
"``gis`` models must use a special manager class (:class:`~django.contrib.gis."
"db.models.GeoManager`) because they need a special queryset (:class:`~django."
"contrib.gis.db.models.GeoQuerySet`) to be used for interacting with the "
"database.  It turns out that models which require a special manager like "
"this need to use the same manager class wherever an automatic manager is "
"created."
msgstr ""

# d5bdb6b6f005442e8118d9da523a2705
#: ../../topics/db/managers.txt:326
msgid ""
"Django provides a way for custom manager developers to say that their "
"manager class should be used for automatic managers whenever it is the "
"default manager on a model. This is done by setting the "
"``use_for_related_fields`` attribute on the manager class::"
msgstr ""

# 628d596d63394a128cb2aa5c3f2325a8
#: ../../topics/db/managers.txt:336
msgid ""
"If this attribute is set on the *default* manager for a model (only the "
"default manager is considered in these situations), Django will use that "
"class whenever it needs to automatically create a manager for the class.  "
"Otherwise, it will use :class:`django.db.models.Manager`."
msgstr ""

# 2d17eb5a0039406f8bf7191215b63be1
#: ../../topics/db/managers.txt:343
msgid ""
"Given the purpose for which it's used, the name of this attribute "
"(``use_for_related_fields``) might seem a little odd. Originally, the "
"attribute only controlled the type of manager used for related field access, "
"which is where the name came from. As it became clear the concept was more "
"broadly useful, the name hasn't been changed. This is primarily so that "
"existing code will :doc:`continue to work </misc/api-stability>` in future "
"Django versions."
msgstr ""

# 0871729e3fa94122973b78a210ffaf62
#: ../../topics/db/managers.txt:352
msgid "Writing correct Managers for use in automatic Manager instances"
msgstr ""

# 1e551a99458e4ff3ab0ff1b0e0ac6a3b
#: ../../topics/db/managers.txt:354
msgid ""
"As already suggested by the `django.contrib.gis` example, above, the "
"``use_for_related_fields`` feature is primarily for managers that need to "
"return a custom ``QuerySet`` subclass. In providing this functionality in "
"your manager, there are a couple of things to remember."
msgstr ""

# ee3404e25c0a44ff868e231745bc8f2d
#: ../../topics/db/managers.txt:360
msgid "Do not filter away any results in this type of manager subclass"
msgstr ""

# e2908eb92fe44c32bbf540609633efaf
#: ../../topics/db/managers.txt:362
msgid ""
"One reason an automatic manager is used is to access objects that are "
"related to from some other model. In those situations, Django has to be able "
"to see all the objects for the model it is fetching, so that *anything* "
"which is referred to can be retrieved."
msgstr ""

# 080e2554075b4704a75335bc4b6232f3
#: ../../topics/db/managers.txt:367
msgid ""
"If you override the ``get_query_set()`` method and filter out any rows, "
"Django will return incorrect results. Don't do that. A manager that filters "
"results in ``get_query_set()`` is not appropriate for use as an automatic "
"manager."
msgstr ""

# 5e28396973bd4f7e86d11662737fa254
#: ../../topics/db/managers.txt:372
msgid "Set ``use_for_related_fields`` when you define the class"
msgstr ""

# 127322e4ec8141e29904d4766809f1d1
#: ../../topics/db/managers.txt:374
msgid ""
"The ``use_for_related_fields`` attribute must be set on the manager *class*, "
"not on an *instance* of the class. The earlier example shows the correct way "
"to set it, whereas the following will not work::"
msgstr ""

# fe8a065650d9426e892a8ad516015dd4
#: ../../topics/db/managers.txt:393
msgid ""
"You also shouldn't change the attribute on the class object after it has "
"been used in a model, since the attribute's value is processed when the "
"model class is created and not subsequently reread. Set the attribute on the "
"manager class when it is first defined, as in the initial example of this "
"section and everything will work smoothly."
msgstr ""

# f4f1c2b821364baa9c2faa158caef933
#: ../../topics/db/models.txt:3
msgid "Models"
msgstr ""

# c07f75cf650541a698db157b550d5c3c
#: ../../topics/db/models.txt:11
msgid "The basics:"
msgstr ""

# 652c4c87427047888c0c1ef3d47194ec
#: ../../topics/db/models.txt:13
msgid ""
"Each model is a Python class that subclasses :class:`django.db.models.Model`."
msgstr ""

# 83d78adc4db548d5a8f03b4efce54c68
#: ../../topics/db/models.txt:16
msgid "Each attribute of the model represents a database field."
msgstr ""

# 100567ab2f75434289cc815e200b7a48
#: ../../topics/db/models.txt:18
msgid ""
"With all of this, Django gives you an automatically-generated database-"
"access API; see :doc:`/topics/db/queries`."
msgstr ""

# 92842aed157e466fad163d4dd159d314
#: ../../topics/db/models.txt:23
msgid ""
"A companion to this document is the `official repository of model "
"examples`_. (In the Django source distribution, these examples are in the "
"``tests/modeltests`` directory.)"
msgstr ""

# 28e0025dc3a14566bc66f0f20ee1cb33
# 03c88bbae0e9431489de0fa0ac376977
#: ../../topics/db/models.txt:30 ../../topics/email.txt:17
msgid "Quick example"
msgstr ""

# d60766a7ead644d1880638986f7b6d3e
#: ../../topics/db/models.txt:32
msgid ""
"This example model defines a ``Person``, which has a ``first_name`` and "
"``last_name``::"
msgstr ""

# 4c997af4e20944449be76486e5bf102f
#: ../../topics/db/models.txt:41
msgid ""
"``first_name`` and ``last_name`` are fields_ of the model. Each field is "
"specified as a class attribute, and each attribute maps to a database column."
msgstr ""

# a56d3c70dd524a5e8ba40af7d7f17ac4
#: ../../topics/db/models.txt:44
msgid "The above ``Person`` model would create a database table like this:"
msgstr ""

# 8317dd4a5daf42efbeaf3db73adf923b
#: ../../topics/db/models.txt:54
msgid "Some technical notes:"
msgstr ""

# a21c01b9f9d64e288ac8056c7afba5cf
#: ../../topics/db/models.txt:56
msgid ""
"The name of the table, ``myapp_person``, is automatically derived from some "
"model metadata but can be overridden. See :ref:`table-names` for more "
"details.."
msgstr ""

# 60f2a7c561c14c77a3aaee40a35802a4
#: ../../topics/db/models.txt:60
msgid ""
"An ``id`` field is added automatically, but this behavior can be overridden. "
"See :ref:`automatic-primary-key-fields`."
msgstr ""

# c5cdbae251bf47f28d07271bf469e63c
#: ../../topics/db/models.txt:63
msgid ""
"The ``CREATE TABLE`` SQL in this example is formatted using PostgreSQL "
"syntax, but it's worth noting Django uses SQL tailored to the database "
"backend specified in your :doc:`settings file </topics/settings>`."
msgstr ""

# c950261ae8be49b9b18de835d1f51615
#: ../../topics/db/models.txt:68
msgid "Using models"
msgstr ""

# c02e03c8c2e0412bb65df374e3c042fb
#: ../../topics/db/models.txt:70
msgid ""
"Once you have defined your models, you need to tell Django you're going to "
"*use* those models. Do this by editing your settings file and changing the :"
"setting:`INSTALLED_APPS` setting to add the name of the module that contains "
"your ``models.py``."
msgstr ""

# 4332bdb65b0e4bcc96b12587bb119401
#: ../../topics/db/models.txt:75
msgid ""
"For example, if the models for your application live in the module ``mysite."
"myapp.models`` (the package structure that is created for an application by "
"the :djadmin:`manage.py startapp <startapp>` script), :setting:"
"`INSTALLED_APPS` should read, in part::"
msgstr ""

# ffbcc171f0824071975375eb74210c0f
#: ../../topics/db/models.txt:86
msgid ""
"When you add new apps to :setting:`INSTALLED_APPS`, be sure to run :djadmin:"
"`manage.py syncdb <syncdb>`."
msgstr ""

# 47fff45e61c847ce878aeca00c9f2afb
#: ../../topics/db/models.txt:92
msgid ""
"The most important part of a model -- and the only required part of a model "
"-- is the list of database fields it defines. Fields are specified by class "
"attributes."
msgstr ""

# d305675ee5924fea98bba4d8b19fc41b
# afd9ff0903974913954b50665307666f
# 0278a663d6df4f71aec35152136f0321
# 9dcf6640307c4573807c795187e3f890
# c79464019d3d4b5f8f799587208866f0
# 17c32bb7bbda4be5b693f602ed141e86
#: ../../topics/db/models.txt:96 ../../topics/db/queries.txt:258
#: ../../topics/db/queries.txt:1031 ../../topics/db/queries.txt:1080
#: ../../topics/db/transactions.txt:120 ../../topics/settings.txt:180
msgid "Example::"
msgstr ""

# 4edefa92b9f6449f8f91753e5ed64ab4
# 8138a4541aa44c01885b871cafc80c6e
#: ../../topics/db/models.txt:110 ../../topics/forms/modelforms.txt:40
msgid "Field types"
msgstr ""

# 601e7912a55d4adbb1fb6ab83abf009d
#: ../../topics/db/models.txt:112
msgid ""
"Each field in your model should be an instance of the appropriate :class:"
"`~django.db.models.Field` class. Django uses the field class types to "
"determine a few things:"
msgstr ""

# e3d7c61b54cb417f9c3a569a16acc4ef
#: ../../topics/db/models.txt:116
msgid "The database column type (e.g. ``INTEGER``, ``VARCHAR``)."
msgstr ""

# a2592c69021943a19cbb871179519027
#: ../../topics/db/models.txt:118
msgid ""
"The :doc:`widget </ref/forms/widgets>` to use in Django's admin interface, "
"if you care to use it (e.g. ``<input type=\"text\">``, ``<select>``)."
msgstr ""

# b7d327c5ef08415dbd6342cb4c46bb23
#: ../../topics/db/models.txt:121
msgid ""
"The minimal validation requirements, used in Django's admin and in "
"automatically-generated forms."
msgstr ""

# 2f032930452946108c7ec204d3f74a09
#: ../../topics/db/models.txt:124
msgid ""
"Django ships with dozens of built-in field types; you can find the complete "
"list in the :ref:`model field reference <model-field-types>`. You can easily "
"write your own fields if Django's built-in ones don't do the trick; see :doc:"
"`/howto/custom-model-fields`."
msgstr ""

# fe2b528ea33a4b02b07bd51c5f9bf72a
#: ../../topics/db/models.txt:130
msgid "Field options"
msgstr ""

# 84691a7d3eee4c38a2437483f24d6962
#: ../../topics/db/models.txt:132
msgid ""
"Each field takes a certain set of field-specific arguments (documented in "
"the :ref:`model field reference <model-field-types>`). For example, :class:"
"`~django.db.models.CharField` (and its subclasses) require a :attr:`~django."
"db.models.CharField.max_length` argument which specifies the size of the "
"``VARCHAR`` database field used to store the data."
msgstr ""

# 532588528fda40c7a9020eda9bb28a70
#: ../../topics/db/models.txt:138
msgid ""
"There's also a set of common arguments available to all field types. All are "
"optional. They're fully explained in the :ref:`reference <common-model-field-"
"options>`, but here's a quick summary of the most often-used ones:"
msgstr ""

# 0a84e2a475d648e58ea5aa9284a3c08b
#: ../../topics/db/models.txt:144
msgid ""
"If ``True``, Django will store empty values as ``NULL`` in the database. "
"Default is ``False``."
msgstr ""

# 54a1f12e29af4e489e85e023ff926702
#: ../../topics/db/models.txt:148
msgid "If ``True``, the field is allowed to be blank. Default is ``False``."
msgstr ""

# 0fd08ffd5b1243bd9d2e6971aa97d5ac
#: ../../topics/db/models.txt:150
msgid ""
"Note that this is different than :attr:`~Field.null`. :attr:`~Field.null` is "
"purely database-related, whereas :attr:`~Field.blank` is validation-related. "
"If a field has :attr:`blank=True <Field.blank>`, validation on Django's "
"admin site will allow entry of an empty value. If a field has :attr:"
"`blank=False <Field.blank>`, the field will be required."
msgstr ""

# 49058bbc28774a8eb484bccc6e427d34
#: ../../topics/db/models.txt:158
msgid ""
"An iterable (e.g., a list or tuple) of 2-tuples to use as choices for this "
"field. If this is given, Django's admin will use a select box instead of the "
"standard text field and will limit choices to the choices given."
msgstr ""

# 66d503898b1c409ca839b52a220972a2
#: ../../topics/db/models.txt:163
msgid "A choices list looks like this::"
msgstr ""

# 47be5ca01a744d9f83ebcfc0e8041657
#: ../../topics/db/models.txt:173
msgid ""
"The first element in each tuple is the value that will be stored in the "
"database, the second element will be displayed by the admin interface, or in "
"a ModelChoiceField. Given an instance of a model object, the display value "
"for a choices field can be accessed using the ``get_FOO_display`` method. "
"For example::"
msgstr ""

# 4e782d237670468b81d0cfae3b03d86c
#: ../../topics/db/models.txt:199
msgid ""
"The default value for the field. This can be a value or a callable object. "
"If callable it will be called every time a new object is created."
msgstr ""

# 6ff13925e45a4e339f5e941da163a9f6
#: ../../topics/db/models.txt:204
msgid ""
"Extra \"help\" text to be displayed under the field on the object's admin "
"form. It's useful for documentation even if your object doesn't have an "
"admin form."
msgstr ""

# 63ef5c9daf384799b5605ab3f091bcf8
#: ../../topics/db/models.txt:209
msgid "If ``True``, this field is the primary key for the model."
msgstr ""

# 4b45949ef7874c5e969cee2e52d0a33b
#: ../../topics/db/models.txt:211
msgid ""
"If you don't specify :attr:`primary_key=True <Field.primary_key>` for any "
"fields in your model, Django will automatically add an :class:`IntegerField` "
"to hold the primary key, so you don't need to set :attr:`primary_key=True "
"<Field.primary_key>` on any of your fields unless you want to override the "
"default primary-key behavior. For more, see :ref:`automatic-primary-key-"
"fields`."
msgstr ""

# 2f7f7f13b1be47088cb812402ce3b3fb
#: ../../topics/db/models.txt:219
msgid "If ``True``, this field must be unique throughout the table."
msgstr ""

# 59a74b9400d14856acf1896114182a6d
#: ../../topics/db/models.txt:221
msgid ""
"Again, these are just short descriptions of the most common field options. "
"Full details can be found in the :ref:`common model field option reference "
"<common-model-field-options>`."
msgstr ""

# 0c5d044b9ec74e2c8647c64783a9066a
#: ../../topics/db/models.txt:228
msgid "Automatic primary key fields"
msgstr ""

# 425063b93e374a109f09e9406b3d573d
#: ../../topics/db/models.txt:230
msgid "By default, Django gives each model the following field::"
msgstr ""

# 8dc4a7be8a8b441a8535e69f882d958c
#: ../../topics/db/models.txt:234
msgid "This is an auto-incrementing primary key."
msgstr ""

# 747635376ce749dbb065564dc9f1a73d
#: ../../topics/db/models.txt:236
msgid ""
"If you'd like to specify a custom primary key, just specify :attr:"
"`primary_key=True <Field.primary_key>` on one of your fields. If Django sees "
"you've explicitly set :attr:`Field.primary_key`, it won't add the automatic "
"``id`` column."
msgstr ""

# d91d383b8fd1481c9a882bc3b13dcad9
#: ../../topics/db/models.txt:241
msgid ""
"Each model requires exactly one field to have :attr:`primary_key=True <Field."
"primary_key>`."
msgstr ""

# 452a968aa6a24e0f85227740744b7e58
#: ../../topics/db/models.txt:247
msgid "Verbose field names"
msgstr ""

# 8482196d24bc49beab9b889df926ce41
#: ../../topics/db/models.txt:249
msgid ""
"Each field type, except for :class:`~django.db.models.ForeignKey`, :class:"
"`~django.db.models.ManyToManyField` and :class:`~django.db.models."
"OneToOneField`, takes an optional first positional argument -- a verbose "
"name. If the verbose name isn't given, Django will automatically create it "
"using the field's attribute name, converting underscores to spaces."
msgstr ""

# 34b40c184c64452d873bb8025f4195b4
#: ../../topics/db/models.txt:256
msgid "In this example, the verbose name is ``\"person's first name\"``::"
msgstr ""

# 3dc13008283f420cb0eef41ff52ad26c
#: ../../topics/db/models.txt:260
msgid "In this example, the verbose name is ``\"first name\"``::"
msgstr ""

# 8ff01b48e5fc48478d9f58fec98214d9
#: ../../topics/db/models.txt:264
msgid ""
":class:`~django.db.models.ForeignKey`, :class:`~django.db.models."
"ManyToManyField` and :class:`~django.db.models.OneToOneField` require the "
"first argument to be a model class, so use the :attr:`~Field.verbose_name` "
"keyword argument::"
msgstr ""

# 043b077e3cc54016bb77678b74888727
#: ../../topics/db/models.txt:273
msgid ""
"The convention is not to capitalize the first letter of the :attr:`~Field."
"verbose_name`. Django will automatically capitalize the first letter where "
"it needs to."
msgstr ""

# a6098fc2eef445319d975b56ec07bb57
#: ../../topics/db/models.txt:278
msgid "Relationships"
msgstr ""

# ddb72f7272b8448db3f09ffb96b0f810
#: ../../topics/db/models.txt:280
msgid ""
"Clearly, the power of relational databases lies in relating tables to each "
"other. Django offers ways to define the three most common types of database "
"relationships: many-to-one, many-to-many and one-to-one."
msgstr ""

# 2fe798ee00d64276aecbbbc13c82d4c4
#: ../../topics/db/models.txt:285
msgid "Many-to-one relationships"
msgstr ""

# 379f52281af34bf7a23778cd2e0e0ecc
#: ../../topics/db/models.txt:287
msgid ""
"To define a many-to-one relationship, use :class:`django.db.models."
"ForeignKey`. You use it just like any other :class:`~django.db.models.Field` "
"type: by including it as a class attribute of your model."
msgstr ""

# 55bde499e88e40488ec2e0d41d76be51
#: ../../topics/db/models.txt:291
msgid ""
":class:`~django.db.models.ForeignKey` requires a positional argument: the "
"class to which the model is related."
msgstr ""

# b436eb4971e4448ca226793cec5522f0
#: ../../topics/db/models.txt:294
msgid ""
"For example, if a ``Car`` model has a ``Manufacturer`` -- that is, a "
"``Manufacturer`` makes multiple cars but each ``Car`` only has one "
"``Manufacturer`` -- use the following definitions::"
msgstr ""

# e65060d8fdce41f8b7e42f96e1ddcd05
#: ../../topics/db/models.txt:305
msgid ""
"You can also create :ref:`recursive relationships <recursive-relationships>` "
"(an object with a many-to-one relationship to itself) and :ref:"
"`relationships to models not yet defined <lazy-relationships>`; see :ref:"
"`the model field reference <ref-foreignkey>` for details."
msgstr ""

# 3111b49ad55046d1b4a9f28658e073c4
#: ../../topics/db/models.txt:310
msgid ""
"It's suggested, but not required, that the name of a :class:`~django.db."
"models.ForeignKey` field (``manufacturer`` in the example above) be the name "
"of the model, lowercase. You can, of course, call the field whatever you "
"want. For example::"
msgstr ""

# 1a3b77bd79784a99b42015b2ae331290
#: ../../topics/db/models.txt:321
msgid ""
":class:`~django.db.models.ForeignKey` fields accept a number of extra "
"arguments which are explained in :ref:`the model field reference <foreign-"
"key-arguments>`. These options help define how the relationship should work; "
"all are optional."
msgstr ""

# f3108f5caa344aff8d23ec371cba38aa
#: ../../topics/db/models.txt:326
msgid ""
"For details on accessing backwards-related objects, see the :ref:`Following "
"relationships backward example <backwards-related-objects>`."
msgstr ""

# d649e5ef045e4cc7b04d2bddd4879801
#: ../../topics/db/models.txt:329
msgid "For sample code, see the `Many-to-one relationship model tests`_."
msgstr ""

# ac17b8c3510d412cbfb96f491024668a
# f675bec5efb24e9a8cbe3d521cb7d4bb
#: ../../topics/db/models.txt:334 ../../topics/db/queries.txt:1152
msgid "Many-to-many relationships"
msgstr ""

# 57ab24460595441eaa10b895d974cde1
#: ../../topics/db/models.txt:336
msgid ""
"To define a many-to-many relationship, use :class:`~django.db.models."
"ManyToManyField`. You use it just like any other :class:`~django.db.models."
"Field` type: by including it as a class attribute of your model."
msgstr ""

# 504c54568f69498d8ae189f8f9f253a4
#: ../../topics/db/models.txt:341
msgid ""
":class:`~django.db.models.ManyToManyField` requires a positional argument: "
"the class to which the model is related."
msgstr ""

# 9d591b9c513f4374a6ab019ca23de0eb
#: ../../topics/db/models.txt:344
msgid ""
"For example, if a ``Pizza`` has multiple ``Topping`` objects -- that is, a "
"``Topping`` can be on multiple pizzas and each ``Pizza`` has multiple "
"toppings -- here's how you'd represent that::"
msgstr ""

# c89fb7e23301432db7e6780d27756ce7
#: ../../topics/db/models.txt:355
msgid ""
"As with :class:`~django.db.models.ForeignKey`, you can also create :ref:"
"`recursive relationships <recursive-relationships>` (an object with a many-"
"to-many relationship to itself) and :ref:`relationships to models not yet "
"defined <lazy-relationships>`; see :ref:`the model field reference <ref-"
"manytomany>` for details."
msgstr ""

# d9791e184d584a82a445dacbf34cc985
#: ../../topics/db/models.txt:361
msgid ""
"It's suggested, but not required, that the name of a :class:`~django.db."
"models.ManyToManyField` (``toppings`` in the example above) be a plural "
"describing the set of related model objects."
msgstr ""

# 6f8c605dc5a247cd9eec822f85f59450
#: ../../topics/db/models.txt:365
msgid ""
"It doesn't matter which model has the :class:`~django.db.models."
"ManyToManyField`, but you should only put it in one of the models -- not "
"both."
msgstr ""

# 4159bebfb464465ba0013706bc4fbfbd
#: ../../topics/db/models.txt:369
msgid ""
"Generally, :class:`~django.db.models.ManyToManyField` instances should go in "
"the object that's going to be edited in the admin interface, if you're using "
"Django's admin. In the above example, ``toppings`` is in ``Pizza`` (rather "
"than ``Topping`` having a ``pizzas`` :class:`~django.db.models."
"ManyToManyField` ) because it's more natural to think about a pizza having "
"toppings than a topping being on multiple pizzas. The way it's set up above, "
"the ``Pizza`` admin form would let users select the toppings."
msgstr ""

# a4831ea866004a92a8867294530f9c53
#: ../../topics/db/models.txt:379
msgid "See the `Many-to-many relationship model example`_ for a full example."
msgstr ""

# 47eab027a6ed47428534c64a0bbfd327
#: ../../topics/db/models.txt:383
msgid ""
":class:`~django.db.models.ManyToManyField` fields also accept a number of "
"extra arguments which are explained in :ref:`the model field reference "
"<manytomany-arguments>`. These options help define how the relationship "
"should work; all are optional."
msgstr ""

# af77f11c77e34f20b35b4105a1fd8d6e
#: ../../topics/db/models.txt:391
msgid "Extra fields on many-to-many relationships"
msgstr ""

# 6b850fc313cc47e297bc7b283ae978ea
#: ../../topics/db/models.txt:393
msgid ""
"When you're only dealing with simple many-to-many relationships such as "
"mixing and matching pizzas and toppings, a standard :class:`~django.db."
"models.ManyToManyField` is all you need. However, sometimes you may need to "
"associate data with the relationship between two models."
msgstr ""

# 143fa0eb6bbe422f8b57fd284ca72e04
#: ../../topics/db/models.txt:397
msgid ""
"For example, consider the case of an application tracking the musical groups "
"which musicians belong to. There is a many-to-many relationship between a "
"person and the groups of which they are a member, so you could use a :class:"
"`~django.db.models.ManyToManyField` to represent this relationship. However, "
"there is a lot of detail about the membership that you might want to "
"collect, such as the date at which the person joined the group."
msgstr ""

# ab88f9bc31a34c78a757da7d9a780b7f
#: ../../topics/db/models.txt:404
msgid ""
"For these situations, Django allows you to specify the model that will be "
"used to govern the many-to-many relationship. You can then put extra fields "
"on the intermediate model. The intermediate model is associated with the :"
"class:`~django.db.models.ManyToManyField` using the :attr:`through "
"<ManyToManyField.through>` argument to point to the model that will act as "
"an intermediary. For our musician example, the code would look something "
"like this::"
msgstr ""

# 53f1e4756dfe4ca4af8d797d9d126709
#: ../../topics/db/models.txt:431
msgid ""
"When you set up the intermediary model, you explicitly specify foreign keys "
"to the models that are involved in the ManyToMany relation. This explicit "
"declaration defines how the two models are related."
msgstr ""

# 8f6114e9f7cb41b99348f399d8d20c43
#: ../../topics/db/models.txt:435
msgid "There are a few restrictions on the intermediate model:"
msgstr ""

# 27ca5ac420ed4cb3af28b95e5653b9b2
#: ../../topics/db/models.txt:437
msgid ""
"Your intermediate model must contain one - and *only* one - foreign key to "
"the target model (this would be ``Person`` in our example). If you have more "
"than one foreign key, a validation error will be raised."
msgstr ""

# 62e727193b8640e9ad93967ee6b2488b
#: ../../topics/db/models.txt:441
msgid ""
"Your intermediate model must contain one - and *only* one - foreign key to "
"the source model (this would be ``Group`` in our example). If you have more "
"than one foreign key, a validation error will be raised."
msgstr ""

# 9381a0e6237544aea0ab5d307818baad
#: ../../topics/db/models.txt:445
msgid ""
"The only exception to this is a model which has a many-to-many relationship "
"to itself, through an intermediary model. In this case, two foreign keys to "
"the same model are permitted, but they will be treated as the two "
"(different) sides of the many-to-many relation."
msgstr ""

# 399883017d164daab5aad27f6d6ea726
#: ../../topics/db/models.txt:451
msgid ""
"When defining a many-to-many relationship from a model to itself, using an "
"intermediary model, you *must* use :attr:`symmetrical=False <ManyToManyField."
"symmetrical>` (see :ref:`the model field reference <manytomany-arguments>`)."
msgstr ""

# 2bee31c6c5e34be8befd0e1f8ab275c4
#: ../../topics/db/models.txt:456
msgid ""
"Now that you have set up your :class:`~django.db.models.ManyToManyField` to "
"use your intermediary model (``Membership``, in this case), you're ready to "
"start creating some many-to-many relationships. You do this by creating "
"instances of the intermediate model::"
msgstr ""

# a93227213b6043eeaed32eaf2a7f92e8
#: ../../topics/db/models.txt:478
msgid ""
"Unlike normal many-to-many fields, you *can't* use ``add``, ``create``, or "
"assignment (i.e., ``beatles.members = [...]``) to create relationships::"
msgstr ""

# de1d9e091ca146639f920ead1d019a9c
#: ../../topics/db/models.txt:488
msgid ""
"Why? You can't just create a relationship between a ``Person`` and a "
"``Group`` - you need to specify all the detail for the relationship required "
"by the ``Membership`` model. The simple ``add``, ``create`` and assignment "
"calls don't provide a way to specify this extra detail. As a result, they "
"are disabled for many-to-many relationships that use an intermediate model. "
"The only way to create this type of relationship is to create instances of "
"the intermediate model."
msgstr ""

# 8ae56811fe4a433c943d91946145ef08
#: ../../topics/db/models.txt:496
msgid ""
"The :meth:`~django.db.models.fields.related.RelatedManager.remove` method is "
"disabled for similar reasons. However, the :meth:`~django.db.models.fields."
"related.RelatedManager.clear` method can be used to remove all many-to-many "
"relationships for an instance::"
msgstr ""

# f3a8eb26b34b435b94a4822825bff0b9
#: ../../topics/db/models.txt:504
msgid ""
"Once you have established the many-to-many relationships by creating "
"instances of your intermediate model, you can issue queries. Just as with "
"normal many-to-many relationships, you can query using the attributes of the "
"many-to-many-related model::"
msgstr ""

# d27adf2ec154427bb2c7b1f2845be88c
#: ../../topics/db/models.txt:513
msgid ""
"As you are using an intermediate model, you can also query on its "
"attributes::"
msgstr ""

# 3d3c939d92d64c35b4666857facf8f95
#: ../../topics/db/models.txt:521
msgid ""
"If you need to access a membership's information you may do so by directly "
"querying the ``Membership`` model::"
msgstr ""

# aac585291dd24cfea0a84a64c897be11
#: ../../topics/db/models.txt:530
msgid ""
"Another way to access the same information is by querying the :ref:`many-to-"
"many reverse relationship<m2m-reverse-relationships>` from a ``Person`` "
"object::"
msgstr ""

# 5f93ea8115de4aa9804f38dcbf4a04f7
# 7c7244d65bbe49848a152aa06532cc58
#: ../../topics/db/models.txt:542 ../../topics/db/queries.txt:1179
msgid "One-to-one relationships"
msgstr ""

# 1a7a844631ce4c03927cc46501557683
#: ../../topics/db/models.txt:544
msgid ""
"To define a one-to-one relationship, use :class:`~django.db.models."
"OneToOneField`. You use it just like any other ``Field`` type: by including "
"it as a class attribute of your model."
msgstr ""

# 1db30bbd85f74e7fbc7cf0a685e8ee8b
#: ../../topics/db/models.txt:548
msgid ""
"This is most useful on the primary key of an object when that object "
"\"extends\" another object in some way."
msgstr ""

# 32bc1f89e0ef4e8e83ab8ca7683f6840
#: ../../topics/db/models.txt:551
msgid ""
":class:`~django.db.models.OneToOneField` requires a positional argument: the "
"class to which the model is related."
msgstr ""

# 0c85eaa4cb2840c0afac58d08024cdde
#: ../../topics/db/models.txt:554
msgid ""
"For example, if you were building a database of \"places\", you would build "
"pretty standard stuff such as address, phone number, etc. in the database. "
"Then, if you wanted to build a database of restaurants on top of the places, "
"instead of repeating yourself and replicating those fields in the "
"``Restaurant`` model, you could make ``Restaurant`` have a :class:`~django."
"db.models.OneToOneField` to ``Place`` (because a restaurant \"is a\" place; "
"in fact, to handle this you'd typically use :ref:`inheritance <model-"
"inheritance>`, which involves an implicit one-to-one relation)."
msgstr ""

# 15ffecf7a130441ca830665f63690426
#: ../../topics/db/models.txt:564
msgid ""
"As with :class:`~django.db.models.ForeignKey`, a :ref:`recursive "
"relationship <recursive-relationships>` can be defined and :ref:`references "
"to as-yet undefined models <lazy-relationships>` can be made; see :ref:`the "
"model field reference <ref-onetoone>` for details."
msgstr ""

# 1c385a5ed0ea47e7bf6d82122c374046
#: ../../topics/db/models.txt:572
msgid "See the `One-to-one relationship model example`_ for a full example."
msgstr ""

# 3aabbba27da64805b51f71b29d69436f
#: ../../topics/db/models.txt:576
msgid ""
":class:`~django.db.models.OneToOneField` fields also accept one optional "
"argument described in the :ref:`model field reference <ref-onetoone>`."
msgstr ""

# 0bc1319b664a4f2ab99613b01367762d
#: ../../topics/db/models.txt:579
msgid ""
":class:`~django.db.models.OneToOneField` classes used to automatically "
"become the primary key on a model. This is no longer true (although you can "
"manually pass in the :attr:`~django.db.models.Field.primary_key` argument if "
"you like). Thus, it's now possible to have multiple fields of type :class:"
"`~django.db.models.OneToOneField` on a single model."
msgstr ""

# 8706d8416bd04d2dba645750b88af76b
#: ../../topics/db/models.txt:586
msgid "Models across files"
msgstr ""

# 0e670c81e8bf4934b7a88f8d4b876bf4
#: ../../topics/db/models.txt:588
msgid ""
"It's perfectly OK to relate a model to one from another app. To do this, "
"import the related model at the top of the model that holds your model. "
"Then, just refer to the other model class wherever needed. For example::"
msgstr ""

# ca330fa303934d98ad988a0ad2ae7b73
#: ../../topics/db/models.txt:599
msgid "Field name restrictions"
msgstr ""

# ff2ca9071a634d8780823900f6aec82b
#: ../../topics/db/models.txt:601
msgid "Django places only two restrictions on model field names:"
msgstr ""

# 91a790b5c1444bd0bca3577034c9dd4f
#: ../../topics/db/models.txt:603
msgid ""
"A field name cannot be a Python reserved word, because that would result in "
"a Python syntax error. For example::"
msgstr ""

# dde91fee6ad0441fb13e3d4e0b7db2f7
#: ../../topics/db/models.txt:609
msgid ""
"A field name cannot contain more than one underscore in a row, due to the "
"way Django's query lookup syntax works. For example::"
msgstr ""

# db347ec6e6c040c3adc7a63d4347c5ed
#: ../../topics/db/models.txt:615
msgid ""
"These limitations can be worked around, though, because your field name "
"doesn't necessarily have to match your database column name. See the :attr:"
"`~Field.db_column` option."
msgstr ""

# c99b6122dfdb400391352f30ff73a58c
#: ../../topics/db/models.txt:619
msgid ""
"SQL reserved words, such as ``join``, ``where`` or ``select``, *are* allowed "
"as model field names, because Django escapes all database table names and "
"column names in every underlying SQL query. It uses the quoting syntax of "
"your particular database engine."
msgstr ""

# 572cd9f9b4644d8991527169f211e7f5
#: ../../topics/db/models.txt:625
msgid "Custom field types"
msgstr ""

# 1eccbb87fedc40f19fa1bf79b2451072
#: ../../topics/db/models.txt:627
msgid ""
"If one of the existing model fields cannot be used to fit your purposes, or "
"if you wish to take advantage of some less common database column types, you "
"can create your own field class. Full coverage of creating your own fields "
"is provided in :doc:`/howto/custom-model-fields`."
msgstr ""

# 0f6d3ec94fda422cb8cb9aacfb004d3c
#: ../../topics/db/models.txt:635
msgid "Meta options"
msgstr ""

# 0ed1d0db4637452eae298ee19aafa0d3
#: ../../topics/db/models.txt:637
msgid "Give your model metadata by using an inner ``class Meta``, like so::"
msgstr ""

# 5fcfbd49693b4ec999f9c5dc477e8f33
#: ../../topics/db/models.txt:646
msgid ""
"Model metadata is \"anything that's not a field\", such as ordering options "
"(:attr:`~Options.ordering`), database table name (:attr:`~Options."
"db_table`), or human-readable singular and plural names (:attr:`~Options."
"verbose_name` and :attr:`~Options.verbose_name_plural`). None are required, "
"and adding ``class Meta`` to a model is completely optional."
msgstr ""

# 03df44be4deb4562962a9940d3117199
#: ../../topics/db/models.txt:652
msgid ""
"A complete list of all possible ``Meta`` options can be found in the :doc:"
"`model option reference </ref/models/options>`."
msgstr ""

# 65e7cc5d684644069f7782429a2279c3
#: ../../topics/db/models.txt:658
msgid "Model methods"
msgstr ""

# ad275df9965448cdb2864e5dfcc84972
#: ../../topics/db/models.txt:660
msgid ""
"Define custom methods on a model to add custom \"row-level\" functionality "
"to your objects. Whereas :class:`~django.db.models.Manager` methods are "
"intended to do \"table-wide\" things, model methods should act on a "
"particular model instance."
msgstr ""

# 578e9bd7408e4c0eb3d7b716aac5231e
#: ../../topics/db/models.txt:664
msgid ""
"This is a valuable technique for keeping business logic in one place -- the "
"model."
msgstr ""

# bbdd4d7367ac49179aa570edef982a00
#: ../../topics/db/models.txt:667
msgid "For example, this model has a few custom methods::"
msgstr ""

# b36f24bf827b4616b1fd8c2cfe48eb76
#: ../../topics/db/models.txt:697
msgid "The last method in this example is a :term:`property`."
msgstr ""

# d1c0e260c4a34ac5a1d44c43aea31b9e
#: ../../topics/db/models.txt:699
msgid ""
"The :doc:`model instance reference </ref/models/instances>` has a complete "
"list of :ref:`methods automatically given to each model <model-instance-"
"methods>`. You can override most of these -- see `overriding predefined "
"model methods`_, below -- but there are a couple that you'll almost always "
"want to define:"
msgstr ""

# 439d33cbfbdb4676b8ca5d2c844fb013
#: ../../topics/db/models.txt:705
msgid ""
"A Python \"magic method\" that returns a unicode \"representation\" of any "
"object. This is what Python and Django will use whenever a model instance "
"needs to be coerced and displayed as a plain string. Most notably, this "
"happens when you display an object in an interactive console or in the admin."
msgstr ""

# 0e994e2cb1ab4ec3959004d5b1835542
#: ../../topics/db/models.txt:711
msgid ""
"You'll always want to define this method; the default isn't very helpful at "
"all."
msgstr ""

# 04e06fe421cb41e2b853c708bb9e9967
#: ../../topics/db/models.txt:715
msgid ""
"This tells Django how to calculate the URL for an object. Django uses this "
"in its admin interface, and any time it needs to figure out a URL for an "
"object."
msgstr ""

# 67e8c52ef2a64386a4a29165c4bd968f
#: ../../topics/db/models.txt:719
msgid ""
"Any object that has a URL that uniquely identifies it should define this "
"method."
msgstr ""

# 9e15a69cf2484a68a4b713ada4ed53c7
#: ../../topics/db/models.txt:725
msgid "Overriding predefined model methods"
msgstr ""

# 3c5fa3ee28bd4bf0b2422bd96304e702
#: ../../topics/db/models.txt:727
msgid ""
"There's another set of :ref:`model methods <model-instance-methods>` that "
"encapsulate a bunch of database behavior that you'll want to customize. In "
"particular you'll often want to change the way :meth:`~Model.save` and :meth:"
"`~Model.delete` work."
msgstr ""

# e5f48b2be49b44f3b84528892f4744f0
#: ../../topics/db/models.txt:732
msgid ""
"You're free to override these methods (and any other model method) to alter "
"behavior."
msgstr ""

# 36238f7c204d4dfea663513d8009bc85
#: ../../topics/db/models.txt:735
msgid ""
"A classic use-case for overriding the built-in methods is if you want "
"something to happen whenever you save an object. For example (see :meth:"
"`~Model.save` for documentation of the parameters it accepts)::"
msgstr ""

# 8bd00f2cd9824ba3aa81d82e92dc82ed
#: ../../topics/db/models.txt:748
msgid "You can also prevent saving::"
msgstr ""

# a42e2bfd1e8842969cff5ba4a95c9181
#: ../../topics/db/models.txt:760
msgid ""
"It's important to remember to call the superclass method -- that's that "
"``super(Blog, self).save(*args, **kwargs)`` business -- to ensure that the "
"object still gets saved into the database. If you forget to call the "
"superclass method, the default behavior won't happen and the database won't "
"get touched."
msgstr ""

# 99a1d9c64d244a3ebc60590368eebbbf
#: ../../topics/db/models.txt:766
msgid ""
"It's also important that you pass through the arguments that can be passed "
"to the model method -- that's what the ``*args, **kwargs`` bit does. Django "
"will, from time to time, extend the capabilities of built-in model methods, "
"adding new arguments. If you use ``*args, **kwargs`` in your method "
"definitions, you are guaranteed that your code will automatically support "
"those arguments when they are added."
msgstr ""

# 79603be831a940a2ae0d8b90c0bd05eb
#: ../../topics/db/models.txt:775
msgid ""
"Note that the :meth:`~Model.delete()` method for an object is not "
"necessarily called when :ref:`deleting objects in bulk using a "
"QuerySet<topics-db-queries-delete>`. To ensure customized delete logic gets "
"executed, you can use :data:`~django.db.models.signals.pre_delete` and/or :"
"data:`~django.db.models.signals.post_delete` signals."
msgstr ""

# cf43dc210c6342c097742cf66d1a7e7a
#: ../../topics/db/models.txt:782
msgid "Executing custom SQL"
msgstr ""

# f240fb4c2f994bbeb328b4bcbcc31ca5
#: ../../topics/db/models.txt:784
msgid ""
"Another common pattern is writing custom SQL statements in model methods and "
"module-level methods. For more details on using raw SQL, see the "
"documentation on :doc:`using raw SQL</topics/db/sql>`."
msgstr ""

# 264d870437e94dc1845ec604fd4fe8d0
#: ../../topics/db/models.txt:791
msgid "Model inheritance"
msgstr ""

# 6da14cbc851744f58f00ab9717176451
#: ../../topics/db/models.txt:793
msgid ""
"Model inheritance in Django works almost identically to the way normal class "
"inheritance works in Python. The only decision you have to make is whether "
"you want the parent models to be models in their own right (with their own "
"database tables), or if the parents are just holders of common information "
"that will only be visible through the child models."
msgstr ""

# 1bdec39171b042b492d5c1273bc0dc4a
#: ../../topics/db/models.txt:800
msgid "There are three styles of inheritance that are possible in Django."
msgstr ""

# 46ed4d94b4214ccc910fc27b5bafa54e
#: ../../topics/db/models.txt:802
msgid ""
"Often, you will just want to use the parent class to hold information that "
"you don't want to have to type out for each child model. This class isn't "
"going to ever be used in isolation, so :ref:`abstract-base-classes` are what "
"you're after."
msgstr ""

# f291a00547a6423b9d62dd487dc5d01a
#: ../../topics/db/models.txt:806
msgid ""
"If you're subclassing an existing model (perhaps something from another "
"application entirely) and want each model to have its own database table, :"
"ref:`multi-table-inheritance` is the way to go."
msgstr ""

# 24a581d4d5ab48e19c7dc30c7edf5173
#: ../../topics/db/models.txt:809
msgid ""
"Finally, if you only want to modify the Python-level behavior of a model, "
"without changing the models fields in any way, you can use :ref:`proxy-"
"models`."
msgstr ""

# 05490d4329f04b31932e9147c08b8ac3
#: ../../topics/db/models.txt:816
msgid "Abstract base classes"
msgstr ""

# e64d8f49d0b549f4928696ff1ca10dde
#: ../../topics/db/models.txt:818
msgid ""
"Abstract base classes are useful when you want to put some common "
"information into a number of other models. You write your base class and put "
"``abstract=True`` in the :ref:`Meta <meta-options>` class. This model will "
"then not be used to create any database table. Instead, when it is used as a "
"base class for other models, its fields will be added to those of the child "
"class. It is an error to have fields in the abstract base class with the "
"same name as those in the child (and Django will raise an exception)."
msgstr ""

# 4b9e0fc9aabf4abe9dedc282c8c96c97
# 60ab34c1f8554b86a6ef1cbc97859530
#: ../../topics/db/models.txt:827 ../../topics/i18n/translation.txt:574
msgid "An example::"
msgstr ""

# fec6586a12164c0795a3267db4b54b93
#: ../../topics/db/models.txt:839
msgid ""
"The ``Student`` model will have three fields: ``name``, ``age`` and "
"``home_group``. The ``CommonInfo`` model cannot be used as a normal Django "
"model, since it is an abstract base class. It does not generate a database "
"table or have a manager, and cannot be instantiated or saved directly."
msgstr ""

# 87092c1ba50a41b99c697fb0099b9e69
#: ../../topics/db/models.txt:844
msgid ""
"For many uses, this type of model inheritance will be exactly what you want. "
"It provides a way to factor out common information at the Python level, "
"whilst still only creating one database table per child model at the "
"database level."
msgstr ""

# 6d8a2e59695d4032a547b11bec45851c
#: ../../topics/db/models.txt:849
msgid "``Meta`` inheritance"
msgstr ""

# b28e715768dc47aebe4e74ba37c270e9
#: ../../topics/db/models.txt:851
msgid ""
"When an abstract base class is created, Django makes any :ref:`Meta <meta-"
"options>` inner class you declared in the base class available as an "
"attribute. If a child class does not declare its own :ref:`Meta <meta-"
"options>` class, it will inherit the parent's :ref:`Meta <meta-options>`. If "
"the child wants to extend the parent's :ref:`Meta <meta-options>` class, it "
"can subclass it. For example::"
msgstr ""

# 5c0adae171c44f67b47d29607ea727a4
#: ../../topics/db/models.txt:868
msgid ""
"Django does make one adjustment to the :ref:`Meta <meta-options>` class of "
"an abstract base class: before installing the :ref:`Meta <meta-options>` "
"attribute, it sets ``abstract=False``. This means that children of abstract "
"base classes don't automatically become abstract classes themselves. Of "
"course, you can make an abstract base class that inherits from another "
"abstract base class. You just need to remember to explicitly set "
"``abstract=True`` each time."
msgstr ""

# fb817954577d4f098afa5a9cb7cb8bec
#: ../../topics/db/models.txt:875
msgid ""
"Some attributes won't make sense to include in the :ref:`Meta <meta-"
"options>` class of an abstract base class. For example, including "
"``db_table`` would mean that all the child classes (the ones that don't "
"specify their own :ref:`Meta <meta-options>`) would use the same database "
"table, which is almost certainly not what you want."
msgstr ""

# a44f58481bdc45daa97f9bfb5d9ec4fe
#: ../../topics/db/models.txt:883
msgid "Be careful with ``related_name``"
msgstr ""

# 37f7c7dfdf07435ca1751c53524caaae
#: ../../topics/db/models.txt:885
msgid ""
"If you are using the :attr:`~django.db.models.ForeignKey.related_name` "
"attribute on a ``ForeignKey`` or ``ManyToManyField``, you must always "
"specify a *unique* reverse name for the field. This would normally cause a "
"problem in abstract base classes, since the fields on this class are "
"included into each of the child classes, with exactly the same values for "
"the attributes (including :attr:`~django.db.models.ForeignKey.related_name`) "
"each time."
msgstr ""

# ee2206924a7c4ed78b21c584c42563e2
#: ../../topics/db/models.txt:893
msgid ""
"To work around this problem, when you are using :attr:`~django.db.models."
"ForeignKey.related_name` in an abstract base class (only), part of the name "
"should contain ``'%(app_label)s'`` and ``'%(class)s'``."
msgstr ""

# 0d450a9a1d9d47cda1929cb6867ba857
#: ../../topics/db/models.txt:897
msgid ""
"``'%(class)s'`` is replaced by the lower-cased name of the child class that "
"the field is used in."
msgstr ""

# 56ceb27d14734c11bfa2519211296984
#: ../../topics/db/models.txt:899
msgid ""
"``'%(app_label)s'`` is replaced by the lower-cased name of the app the child "
"class is contained within. Each installed application name must be unique "
"and the model class names within each app must also be unique, therefore the "
"resulting name will end up being different."
msgstr ""

# 59da0b6e9d9b4147becc0006b6360ee7
#: ../../topics/db/models.txt:904
msgid "For example, given an app ``common/models.py``::"
msgstr ""

# 8e872b013a404ff58c91f41a029f54ae
#: ../../topics/db/models.txt:918
msgid "Along with another app ``rare/models.py``::"
msgstr ""

# 09e5babc78ef40349aeaa72e8d5aa728
#: ../../topics/db/models.txt:925
msgid ""
"The reverse name of the ``common.ChildA.m2m`` field will be "
"``common_childa_related``, whilst the reverse name of the ``common.ChildB."
"m2m`` field will be ``common_childb_related``, and finally the reverse name "
"of the ``rare.ChildB.m2m`` field will be ``rare_childb_related``. It is up "
"to you how you use the ``'%(class)s'`` and ``'%(app_label)s`` portion to "
"construct your related name, but if you forget to use it, Django will raise "
"errors when you validate your models (or run :djadmin:`syncdb`)."
msgstr ""

# 1bf50f140f9f4435b689467bc0ad1417
#: ../../topics/db/models.txt:933
msgid ""
"If you don't specify a :attr:`~django.db.models.ForeignKey.related_name` "
"attribute for a field in an abstract base class, the default reverse name "
"will be the name of the child class followed by ``'_set'``, just as it "
"normally would be if you'd declared the field directly on the child class. "
"For example, in the above code, if the :attr:`~django.db.models.ForeignKey."
"related_name` attribute was omitted, the reverse name for the ``m2m`` field "
"would be ``childa_set`` in the ``ChildA`` case and ``childb_set`` for the "
"``ChildB`` field."
msgstr ""

# fa2c54b45d5843a99b60f5456deaab07
#: ../../topics/db/models.txt:945
msgid "Multi-table inheritance"
msgstr ""

# d5d1034f33064bda855749d48e342130
#: ../../topics/db/models.txt:947
msgid ""
"The second type of model inheritance supported by Django is when each model "
"in the hierarchy is a model all by itself. Each model corresponds to its own "
"database table and can be queried and created individually. The inheritance "
"relationship introduces links between the child model and each of its "
"parents (via an automatically-created :class:`~django.db.models."
"OneToOneField`). For example::"
msgstr ""

# bcb390d3bfc749d1b36848e49f1e8e91
#: ../../topics/db/models.txt:962
msgid ""
"All of the fields of ``Place`` will also be available in ``Restaurant``, "
"although the data will reside in a different database table. So these are "
"both possible::"
msgstr ""

# 2acfdb1c804b43c1ac59f4b47cb582ac
#: ../../topics/db/models.txt:969
msgid ""
"If you have a ``Place`` that is also a ``Restaurant``, you can get from the "
"``Place`` object to the ``Restaurant`` object by using the lower-case "
"version of the model name::"
msgstr ""

# e6284995c668450dbbd7b8749ecb32f7
#: ../../topics/db/models.txt:978
msgid ""
"However, if ``p`` in the above example was *not* a ``Restaurant`` (it had "
"been created directly as a ``Place`` object or was the parent of some other "
"class), referring to ``p.restaurant`` would raise a Restaurant.DoesNotExist "
"exception."
msgstr ""

# cb98aa8f7820498c96d660f124eaa2c9
#: ../../topics/db/models.txt:983
msgid "``Meta`` and multi-table inheritance"
msgstr ""

# b82b08f362bc429e82e78c10d66844dd
#: ../../topics/db/models.txt:985
msgid ""
"In the multi-table inheritance situation, it doesn't make sense for a child "
"class to inherit from its parent's :ref:`Meta <meta-options>` class. All "
"the :ref:`Meta <meta-options>` options have already been applied to the "
"parent class and applying them again would normally only lead to "
"contradictory behavior (this is in contrast with the abstract base class "
"case, where the base class doesn't exist in its own right)."
msgstr ""

# 265e797e3e80419eb7772f3c01544867
#: ../../topics/db/models.txt:992
msgid ""
"So a child model does not have access to its parent's :ref:`Meta <meta-"
"options>` class. However, there are a few limited cases where the child "
"inherits behavior from the parent: if the child does not specify an :attr:"
"`~django.db.models.Options.ordering` attribute or a :attr:`~django.db.models."
"Options.get_latest_by` attribute, it will inherit these from its parent."
msgstr ""

# 8da2b9d74a5d4c76a322db0571412d17
#: ../../topics/db/models.txt:999
msgid ""
"If the parent has an ordering and you don't want the child to have any "
"natural ordering, you can explicitly disable it::"
msgstr ""

# e12b2d0ebc87415cb82789c4c9629a8d
#: ../../topics/db/models.txt:1009
msgid "Inheritance and reverse relations"
msgstr ""

# 48a69d7e7bd0471a85f396b035bb8594
#: ../../topics/db/models.txt:1011
msgid ""
"Because multi-table inheritance uses an implicit :class:`~django.db.models."
"OneToOneField` to link the child and the parent, it's possible to move from "
"the parent down to the child, as in the above example. However, this uses up "
"the name that is the default :attr:`~django.db.models.ForeignKey."
"related_name` value for :class:`~django.db.models.ForeignKey` and :class:"
"`~django.db.models.ManyToManyField` relations.  If you are putting those "
"types of relations on a subclass of another model, you **must** specify the :"
"attr:`~django.db.models.ForeignKey.related_name` attribute on each such "
"field. If you forget, Django will raise an error when you run :djadmin:"
"`validate` or :djadmin:`syncdb`."
msgstr ""

# 4dac2e2f57c84eb5a7a49dddc10a122e
#: ../../topics/db/models.txt:1024
msgid ""
"For example, using the above ``Place`` class again, let's create another "
"subclass with a :class:`~django.db.models.ManyToManyField`::"
msgstr ""

# 85f8e13713ed45bba9a133e7980041bd
#: ../../topics/db/models.txt:1033
msgid "Specifying the parent link field"
msgstr ""

# bdddd40b534647f4a5e11fb9be1d49bc
#: ../../topics/db/models.txt:1035
msgid ""
"As mentioned, Django will automatically create a :class:`~django.db.models."
"OneToOneField` linking your child class back any non-abstract parent models. "
"If you want to control the name of the attribute linking back to the parent, "
"you can create your own :class:`~django.db.models.OneToOneField` and set :"
"attr:`parent_link=True <django.db.models.OneToOneField.parent_link>` to "
"indicate that your field is the link back to the parent class."
msgstr ""

# 8c727cc129504c6dab75600b33bced1f
#: ../../topics/db/models.txt:1046
msgid "Proxy models"
msgstr ""

# 0ea2e42490e44261b0fb00aade8d18ec
#: ../../topics/db/models.txt:1048
msgid ""
"When using :ref:`multi-table inheritance <multi-table-inheritance>`, a new "
"database table is created for each subclass of a model. This is usually the "
"desired behavior, since the subclass needs a place to store any additional "
"data fields that are not present on the base class. Sometimes, however, you "
"only want to change the Python behavior of a model -- perhaps to change the "
"default manager, or add a new method."
msgstr ""

# 8c51b9f0004b4166a055ee8da6758a47
#: ../../topics/db/models.txt:1055
msgid ""
"This is what proxy model inheritance is for: creating a *proxy* for the "
"original model. You can create, delete and update instances of the proxy "
"model and all the data will be saved as if you were using the original (non-"
"proxied) model. The difference is that you can change things like the "
"default model ordering or the default manager in the proxy, without having "
"to alter the original."
msgstr ""

# 327697d71af64fa48afabe8f2494d417
#: ../../topics/db/models.txt:1062
msgid ""
"Proxy models are declared like normal models. You tell Django that it's a "
"proxy model by setting the :attr:`~django.db.models.Options.proxy` attribute "
"of the ``Meta`` class to ``True``."
msgstr ""

# a57df3252f064a00a11b302c33766dda
#: ../../topics/db/models.txt:1066
msgid ""
"For example, suppose you want to add a method to the standard :class:"
"`~django.contrib.auth.models.User` model that will be used in your "
"templates. You can do it like this::"
msgstr ""

# 48b9f21f945f4f5db08bf7927d3e63b3
#: ../../topics/db/models.txt:1079
msgid ""
"The ``MyUser`` class operates on the same database table as its parent :"
"class:`~django.contrib.auth.models.User` class. In particular, any new "
"instances of :class:`~django.contrib.auth.models.User` will also be "
"accessible through ``MyUser``, and vice-versa::"
msgstr ""

# 891e8707afd040fa92cd035eba6bd61a
#: ../../topics/db/models.txt:1088
msgid ""
"You could also use a proxy model to define a different default ordering on a "
"model. The standard :class:`~django.contrib.auth.models.User` model has no "
"ordering defined on it (intentionally; sorting is expensive and we don't "
"want to do it all the time when we fetch users). You might want to regularly "
"order by the ``username`` attribute when you use the proxy. This is easy::"
msgstr ""

# 239454a29210480da4245aaeeded0e5c
#: ../../topics/db/models.txt:1099
msgid ""
"Now normal :class:`~django.contrib.auth.models.User` queries will be "
"unordered and ``OrderedUser`` queries will be ordered by ``username``."
msgstr ""

# b75890319ec14ed9bb2cf3fb093a1d08
#: ../../topics/db/models.txt:1103
msgid "QuerySets still return the model that was requested"
msgstr ""

# 73fb675aa0f64c70ac789f3fcfceace1
#: ../../topics/db/models.txt:1105
msgid ""
"There is no way to have Django return, say, a ``MyUser`` object whenever you "
"query for :class:`~django.contrib.auth.models.User` objects. A queryset for "
"``User`` objects will return those types of objects. The whole point of "
"proxy objects is that code relying on the original ``User`` will use those "
"and your own code can use the extensions you included (that no other code is "
"relying on anyway). It is not a way to replace the ``User`` (or any other) "
"model everywhere with something of your own creation."
msgstr ""

# 6186bc16dc814925b849c1e30a5bb904
#: ../../topics/db/models.txt:1114
msgid "Base class restrictions"
msgstr ""

# d5a04e685e884dd39252fd39af335842
#: ../../topics/db/models.txt:1116
msgid ""
"A proxy model must inherit from exactly one non-abstract model class. You "
"can't inherit from multiple non-abstract models as the proxy model doesn't "
"provide any connection between the rows in the different database tables. A "
"proxy model can inherit from any number of abstract model classes, providing "
"they do *not* define any model fields."
msgstr ""

# 54dc4abd984c41e9b776bb9b7fa8c2a4
#: ../../topics/db/models.txt:1122
msgid ""
"Proxy models inherit any ``Meta`` options that they don't define from their "
"non-abstract model parent (the model they are proxying for)."
msgstr ""

# cb8ce83062204603a6725b1a4a389008
#: ../../topics/db/models.txt:1126
msgid "Proxy model managers"
msgstr ""

# 9e863ab051df4f33890ab0a3a9d7597d
#: ../../topics/db/models.txt:1128
msgid ""
"If you don't specify any model managers on a proxy model, it inherits the "
"managers from its model parents. If you define a manager on the proxy model, "
"it will become the default, although any managers defined on the parent "
"classes will still be available."
msgstr ""

# b8c6b1500ae24c1695e9bd8b4c08269f
#: ../../topics/db/models.txt:1133
msgid ""
"Continuing our example from above, you could change the default manager used "
"when you query the ``User`` model like this::"
msgstr ""

# 9cec67ba29a6430994c62db164475285
#: ../../topics/db/models.txt:1145
msgid ""
"If you wanted to add a new manager to the Proxy, without replacing the "
"existing default, you can use the techniques described in the :ref:`custom "
"manager <custom-managers-and-inheritance>` documentation: create a base "
"class containing the new managers and inherit that after the primary base "
"class::"
msgstr ""

# d12fa5184b404068993cccb993d5934b
#: ../../topics/db/models.txt:1161
msgid ""
"You probably won't need to do this very often, but, when you do, it's "
"possible."
msgstr ""

# b852818ffa174212a0c55d294203ee79
#: ../../topics/db/models.txt:1167
msgid "Differences between proxy inheritance and  unmanaged models"
msgstr ""

# 3889e17144f04179b2bec5dc2f6131d7
#: ../../topics/db/models.txt:1169
msgid ""
"Proxy model inheritance might look fairly similar to creating an unmanaged "
"model, using the :attr:`~django.db.models.Options.managed` attribute on a "
"model's ``Meta`` class. The two alternatives are not quite the same and it's "
"worth considering which one you should use."
msgstr ""

# 31acf6b249f64450908ccf29a8f21c04
#: ../../topics/db/models.txt:1174
msgid ""
"One difference is that you can (and, in fact, must unless you want an empty "
"model) specify model fields on models with ``Meta.managed=False``. You "
"could, with careful setting of :attr:`Meta.db_table <django.db.models."
"Options.db_table>` create an unmanaged model that shadowed an existing model "
"and add Python methods to it. However, that would be very repetitive and "
"fragile as you need to keep both copies synchronized if you make any changes."
msgstr ""

# 1255f0870b5b4105a38511c1b5e168d3
#: ../../topics/db/models.txt:1182
msgid ""
"The other difference that is more important for proxy models, is how model "
"managers are handled. Proxy models are intended to behave exactly like the "
"model they are proxying for. So they inherit the parent model's managers, "
"including the default manager. In the normal multi-table model inheritance "
"case, children do not inherit managers from their parents as the custom "
"managers aren't always appropriate when extra fields are involved. The :ref:"
"`manager documentation <custom-managers-and-inheritance>` has more details "
"about this latter case."
msgstr ""

# eb49f17d708c4198a0e8bd1c583f6eb1
#: ../../topics/db/models.txt:1191
msgid ""
"When these two features were implemented, attempts were made to squash them "
"into a single option. It turned out that interactions with inheritance, in "
"general, and managers, in particular, made the API very complicated and "
"potentially difficult to understand and use. It turned out that two options "
"were needed in any case, so the current separation arose."
msgstr ""

# b846d9874a9f477398cc88c0e8be959f
#: ../../topics/db/models.txt:1197
msgid "So, the general rules are:"
msgstr ""

# 36ee2dfe6bbb40c0a40b08f5b57cf5cd
#: ../../topics/db/models.txt:1199
msgid ""
"If you are mirroring an existing model or database table and don't want all "
"the original database table columns, use ``Meta.managed=False``. That option "
"is normally useful for modeling database views and tables not under the "
"control of Django."
msgstr ""

# c8f239873e084af599602950b6473a7f
#: ../../topics/db/models.txt:1203
msgid ""
"If you are wanting to change the Python-only behavior of a model, but keep "
"all the same fields as in the original, use ``Meta.proxy=True``. This sets "
"things up so that the proxy model is an exact copy of the storage structure "
"of the original model when data is saved."
msgstr ""

# 83b566c4869c4abdb73406ec623a4e30
#: ../../topics/db/models.txt:1209
msgid "Multiple inheritance"
msgstr ""

# e17db0ae67244bf88e1871bfd612fa2d
#: ../../topics/db/models.txt:1211
msgid ""
"Just as with Python's subclassing, it's possible for a Django model to "
"inherit from multiple parent models. Keep in mind that normal Python name "
"resolution rules apply. The first base class that a particular name (e.g. :"
"ref:`Meta <meta-options>`) appears in will be the one that is used; for "
"example, this means that if multiple parents contain a :ref:`Meta <meta-"
"options>` class, only the first one is going to be used, and all others will "
"be ignored."
msgstr ""

# cf242ea1a5024ac0ae435e8d9d634372
#: ../../topics/db/models.txt:1218
msgid ""
"Generally, you won't need to inherit from multiple parents. The main use-"
"case where this is useful is for \"mix-in\" classes: adding a particular "
"extra field or method to every class that inherits the mix-in. Try to keep "
"your inheritance hierarchies as simple and straightforward as possible so "
"that you won't have to struggle to work out where a particular piece of "
"information is coming from."
msgstr ""

# 49888014ea9647919c7e2ecffa8abc7d
#: ../../topics/db/models.txt:1226
msgid "Field name \"hiding\" is not permitted"
msgstr ""

# 7698810f0edc433b854047cc6530aa65
#: ../../topics/db/models.txt:1228
msgid ""
"In normal Python class inheritance, it is permissible for a child class to "
"override any attribute from the parent class. In Django, this is not "
"permitted for attributes that are :class:`~django.db.models.Field` instances "
"(at least, not at the moment). If a base class has a field called "
"``author``, you cannot create another model field called ``author`` in any "
"class that inherits from that base class."
msgstr ""

# 67ec481ea0174765813eaa85b4cae136
#: ../../topics/db/models.txt:1235
msgid ""
"Overriding fields in a parent model leads to difficulties in areas such as "
"initializing new instances (specifying which field is being initialized in "
"``Model.__init__``) and serialization. These are features which normal "
"Python class inheritance doesn't have to deal with in quite the same way, so "
"the difference between Django model inheritance and Python class inheritance "
"isn't arbitrary."
msgstr ""

# aedabce03718473d905f62006df7f390
#: ../../topics/db/models.txt:1242
msgid ""
"This restriction only applies to attributes which are :class:`~django.db."
"models.Field` instances. Normal Python attributes can be overridden if you "
"wish. It also only applies to the name of the attribute as Python sees it: "
"if you are manually specifying the database column name, you can have the "
"same column name appearing in both a child and an ancestor model for multi-"
"table inheritance (they are columns in two different database tables)."
msgstr ""

# 2cd8482f684343c8abfeeee366131298
#: ../../topics/db/models.txt:1250
msgid ""
"Django will raise a :exc:`~django.core.exceptions.FieldError` if you "
"override any model field in any ancestor model."
msgstr ""

# 85185b91eee8442a8e20ca3160f7a190
#: ../../topics/db/multi-db.txt:3
msgid "Multiple databases"
msgstr ""

# 3c1499d89fd14a97a9c8e1ad18474fd9
#: ../../topics/db/multi-db.txt:7
msgid ""
"This topic guide describes Django's support for interacting with multiple "
"databases. Most of the rest of Django's documentation assumes you are "
"interacting with a single database. If you want to interact with multiple "
"databases, you'll need to take some additional steps."
msgstr ""

# c7e26a09edc14eeab4d8557478de177f
#: ../../topics/db/multi-db.txt:13
msgid "Defining your databases"
msgstr ""

# 73c48c69cf4f4e8ba9d27a4ce88a7333
#: ../../topics/db/multi-db.txt:15
msgid ""
"The first step to using more than one database with Django is to tell Django "
"about the database servers you'll be using. This is done using the :setting:"
"`DATABASES` setting. This setting maps database aliases, which are a way to "
"refer to a specific database throughout Django, to a dictionary of settings "
"for that specific connection. The settings in the inner dictionaries are "
"described fully in the :setting:`DATABASES` documentation."
msgstr ""

# 22b29295cb284667be4596d18d165843
#: ../../topics/db/multi-db.txt:23
msgid ""
"Databases can have any alias you choose. However, the alias ``default`` has "
"special significance. Django uses the database with the alias of ``default`` "
"when no other database has been selected. If you don't have a ``default`` "
"database, you need to be careful to always specify the database that you "
"want to use."
msgstr ""

# b0473ded1eee4ce19e55c07b06c43733
#: ../../topics/db/multi-db.txt:29
msgid ""
"The following is an example ``settings.py`` snippet defining two databases "
"-- a default PostgreSQL database and a MySQL database called ``users``:"
msgstr ""

# 88d30e1a508e4d96b4442f932bc4ac58
#: ../../topics/db/multi-db.txt:50
msgid ""
"If you attempt to access a database that you haven't defined in your :"
"setting:`DATABASES` setting, Django will raise a ``django.db.utils."
"ConnectionDoesNotExist`` exception."
msgstr ""

# bc1c92f20688421488ca8c3ef8073823
#: ../../topics/db/multi-db.txt:55
msgid "Synchronizing your databases"
msgstr ""

# 83fd207cda6a450ca77fbcf31e7e238a
#: ../../topics/db/multi-db.txt:57
msgid ""
"The :djadmin:`syncdb` management command operates on one database at a time. "
"By default, it operates on the ``default`` database, but by providing a :"
"djadminopt:`--database` argument, you can tell syncdb to synchronize a "
"different database. So, to synchronize all models onto all databases in our "
"example, you would need to call::"
msgstr ""

# 22e9a8d9b20442af99706b64670abf1f
#: ../../topics/db/multi-db.txt:66
msgid ""
"If you don't want every application to be synchronized onto a particular "
"database, you can define a :ref:`database router<topics-db-multi-db-"
"routing>` that implements a policy constraining the availability of "
"particular models."
msgstr ""

# d08ceea02a2e4e25bf3b4de95632cb17
#: ../../topics/db/multi-db.txt:71
msgid ""
"Alternatively, if you want fine-grained control of synchronization, you can "
"pipe all or part of the output of :djadmin:`sqlall` for a particular "
"application directly into your database prompt, like this::"
msgstr ""

# 90b370b305174123a8a8af69e77d746d
#: ../../topics/db/multi-db.txt:78
msgid "Using other management commands"
msgstr ""

# 3945142705a04393b7a8a7a7488108c7
#: ../../topics/db/multi-db.txt:80
msgid ""
"The other ``django-admin.py`` commands that interact with the database "
"operate in the same way as :djadmin:`syncdb` -- they only ever operate on "
"one database at a time, using :djadminopt:`--database` to control the "
"database used."
msgstr ""

# 36bdf68685bc4b34b42795919235c0d3
#: ../../topics/db/multi-db.txt:88
msgid "Automatic database routing"
msgstr ""

# f352f867c4d24948869f01590e42dc01
#: ../../topics/db/multi-db.txt:90
msgid ""
"The easiest way to use multiple databases is to set up a database routing "
"scheme. The default routing scheme ensures that objects remain 'sticky' to "
"their original database (i.e., an object retrieved from the ``foo`` database "
"will be saved on the same database). The default routing scheme ensures that "
"if a database isn't specified, all queries fall back to the ``default`` "
"database."
msgstr ""

# 3356811663bc4bb1a828afee1378f823
#: ../../topics/db/multi-db.txt:97
msgid ""
"You don't have to do anything to activate the default routing scheme -- it "
"is provided 'out of the box' on every Django project. However, if you want "
"to implement more interesting database allocation behaviors, you can define "
"and install your own database routers."
msgstr ""

# d47ce19aae474b06841539178fadf4bb
#: ../../topics/db/multi-db.txt:103
msgid "Database routers"
msgstr ""

# 98d91dee8c7b40df84df0e7d2aa0fea9
#: ../../topics/db/multi-db.txt:105
msgid "A database Router is a class that provides up to four methods:"
msgstr ""

# 53c693f3e9c641419a22b71090dca123
#: ../../topics/db/multi-db.txt:109
msgid ""
"Suggest the database that should be used for read operations for objects of "
"type ``model``."
msgstr ""

# 549da367590c42ff9f1cef6824a9ecb4
# a42da457d1cd499c9eca8c5a63e31500
#: ../../topics/db/multi-db.txt:112 ../../topics/db/multi-db.txt:124
msgid ""
"If a database operation is able to provide any additional information that "
"might assist in selecting a database, it will be provided in the ``hints`` "
"dictionary. Details on valid hints are provided :ref:`below <topics-db-multi-"
"db-hints>`."
msgstr ""

# 5a33923e5cfd420dbd46e485ffae4c7b
# 2efb655b27ac4f76b3eecc0190e02974
#: ../../topics/db/multi-db.txt:117 ../../topics/db/multi-db.txt:129
msgid "Returns None if there is no suggestion."
msgstr ""

# a4e99c10866c4404acc9b2597e7ce40b
#: ../../topics/db/multi-db.txt:121
msgid ""
"Suggest the database that should be used for writes of objects of type Model."
msgstr ""

# c7f4c920b9214e2a9db63772477be622
#: ../../topics/db/multi-db.txt:133
msgid ""
"Return True if a relation between obj1 and obj2 should be allowed, False if "
"the relation should be prevented, or None if the router has no opinion. This "
"is purely a validation operation, used by foreign key and many to many "
"operations to determine if a relation should be allowed between two objects."
msgstr ""

# a3d7ef1f4e4d4777928f2b4bf848ee57
#: ../../topics/db/multi-db.txt:141
msgid ""
"Determine if the ``model`` should be synchronized onto the database with "
"alias ``db``. Return True if the model should be synchronized, False if it "
"should not be synchronized, or None if the router has no opinion. This "
"method can be used to determine the availability of a model on a given "
"database."
msgstr ""

# df5512862e304fd0b5b419dcd51dc374
#: ../../topics/db/multi-db.txt:147
msgid ""
"A router doesn't have to provide *all* these methods -- it may omit one or "
"more of them. If one of the methods is omitted, Django will skip that router "
"when performing the relevant check."
msgstr ""

# e75d777486744462b31ea96a3d22f34a
#: ../../topics/db/multi-db.txt:154
msgid "Hints"
msgstr ""

# ff80ebcd3e794a46bb2b4afd2231b486
#: ../../topics/db/multi-db.txt:156
msgid ""
"The hints received by the database router can be used to decide which "
"database should receive a given request."
msgstr ""

# 533c27c2c7904f3cb590343ef18ecd79
#: ../../topics/db/multi-db.txt:159
msgid ""
"At present, the only hint that will be provided is ``instance``, an object "
"instance that is related to the read or write operation that is underway. "
"This might be the instance that is being saved, or it might be an instance "
"that is being added in a many-to-many relation. In some cases, no instance "
"hint will be provided at all. The router checks for the existence of an "
"instance hint, and determine if that hint should be used to alter routing "
"behavior."
msgstr ""

# 16bc2829b2794afb9ef8eb03144b0e95
#: ../../topics/db/multi-db.txt:168
msgid "Using routers"
msgstr ""

# 02eda997f26f42cf8f2a4a86c0fef544
#: ../../topics/db/multi-db.txt:170
msgid ""
"Database routers are installed using the :setting:`DATABASE_ROUTERS` "
"setting. This setting defines a list of class names, each specifying a "
"router that should be used by the master router (``django.db.router``)."
msgstr ""

# bc85dda6c249439c8dba7ffba952c858
#: ../../topics/db/multi-db.txt:175
msgid ""
"The master router is used by Django's database operations to allocate "
"database usage. Whenever a query needs to know which database to use, it "
"calls the master router, providing a model and a hint (if available). Django "
"then tries each router in turn until a database suggestion can be found. If "
"no suggestion can be found, it tries the current ``_state.db`` of the hint "
"instance. If a hint instance wasn't provided, or the instance doesn't "
"currently have database state, the master router will allocate the "
"``default`` database."
msgstr ""

# 4968f8e7af074ee7a3b297200aee099a
# a957f4d4e3de4e528ae77354530bbcf2
# 1e79d2a23bf34f338c2fce9b4080f1ee
#: ../../topics/db/multi-db.txt:185 ../../topics/db/tablespaces.txt:45
#: ../../topics/logging.txt:231
msgid "An example"
msgstr ""

# 042ccc7cb1034e55a6cf38b1d723981e
#: ../../topics/db/multi-db.txt:189
msgid ""
"This example is intended as a demonstration of how the router infrastructure "
"can be used to alter database usage. It intentionally ignores some complex "
"issues in order to demonstrate how routers are used."
msgstr ""

# cedcdf5428084a28ae2fdc2b41c99c0d
#: ../../topics/db/multi-db.txt:194
msgid ""
"This example won't work if any of the models in ``myapp`` contain "
"relationships to models outside of the ``other`` database. :ref:`Cross-"
"database relationships <no_cross_database_relations>` introduce referential "
"integrity problems that Django can't currently handle."
msgstr ""

# 419668d2c2514732a3a39d8741064a1d
#: ../../topics/db/multi-db.txt:200
msgid ""
"The master/slave configuration described is also flawed -- it doesn't "
"provide any solution for handling replication lag (i.e., query "
"inconsistencies introduced because of the time taken for a write to "
"propagate to the slaves). It also doesn't consider the interaction of "
"transactions with the database utilization strategy."
msgstr ""

# b7e9c770e0064bbca90f94f286ebc0cc
#: ../../topics/db/multi-db.txt:206
msgid ""
"So - what does this mean in practice? Say you want ``myapp`` to exist on the "
"``other`` database, and you want all other models in a master/slave "
"relationship between the databases ``master``, ``slave1`` and ``slave2``. To "
"implement this, you would need 2 routers::"
msgstr ""

# 8039fdded20a4ee2ba7c1fe7541079b8
#: ../../topics/db/multi-db.txt:263
msgid ""
"Then, in your settings file, add the following (substituting ``path.to.`` "
"with the actual python path to the module where you define the routers)::"
msgstr ""

# 287e4fd1f3d84f0b9079bce09c021d5a
#: ../../topics/db/multi-db.txt:268
msgid ""
"The order in which routers are processed is significant. Routers will be "
"queried in the order the are listed in the :setting:`DATABASE_ROUTERS` "
"setting . In this example, the ``MyAppRouter`` is processed before the "
"``MasterSlaveRouter``, and as a result, decisions concerning the models in "
"``myapp`` are processed before any other decision is made. If the :setting:"
"`DATABASE_ROUTERS` setting listed the two routers in the other order, "
"``MasterSlaveRouter.allow_syncdb()`` would be processed first. The catch-all "
"nature of the MasterSlaveRouter implementation would mean that all models "
"would be available on all databases."
msgstr ""

# 2adc66903a0d4e4f941faa2838a43e07
#: ../../topics/db/multi-db.txt:279
msgid "With this setup installed, lets run some Django code::"
msgstr ""

# ad3745ae5754440b92f0dc54ad3fb24c
#: ../../topics/db/multi-db.txt:306
msgid "Manually selecting a database"
msgstr ""

# d3931fdbd46348649cc2f43dfeb932a1
#: ../../topics/db/multi-db.txt:308
msgid ""
"Django also provides an API that allows you to maintain complete control "
"over database usage in your code. A manually specified database allocation "
"will take priority over a database allocated by a router."
msgstr ""

# ca32de6085a94442ba6ddb88198f2672
#: ../../topics/db/multi-db.txt:313
msgid "Manually selecting a database for a ``QuerySet``"
msgstr ""

# 5b5e1b4498f34fc4a4d0ff35136bd106
#: ../../topics/db/multi-db.txt:315
msgid ""
"You can select the database for a ``QuerySet`` at any point in the "
"``QuerySet`` \"chain.\" Just call ``using()`` on the ``QuerySet`` to get "
"another ``QuerySet`` that uses the specified database."
msgstr ""

# 6631c88e8b564ebda538049a591145cd
#: ../../topics/db/multi-db.txt:319
msgid ""
"``using()`` takes a single argument: the alias of the database on which you "
"want to run the query. For example::"
msgstr ""

# e4f2aa09ccfa425e85b17e77c5988b36
#: ../../topics/db/multi-db.txt:332
msgid "Selecting a database for ``save()``"
msgstr ""

# 862c141fb6f5426f85d75d8502cfc426
#: ../../topics/db/multi-db.txt:334
msgid ""
"Use the ``using`` keyword to ``Model.save()`` to specify to which database "
"the data should be saved."
msgstr ""

# ebf428f5f31d4d749f1c30beaa6dedc6
#: ../../topics/db/multi-db.txt:337
msgid ""
"For example, to save an object to the ``legacy_users`` database, you'd use "
"this::"
msgstr ""

# 93b46d89d7f841fbb649b975b73d0fb4
#: ../../topics/db/multi-db.txt:342
msgid ""
"If you don't specify ``using``, the ``save()`` method will save into the "
"default database allocated by the routers."
msgstr ""

# 600276f26c234327bb1235930b3a9607
#: ../../topics/db/multi-db.txt:346
msgid "Moving an object from one database to another"
msgstr ""

# d757f606d2c746d0a3287e7a4b2be232
#: ../../topics/db/multi-db.txt:348
msgid ""
"If you've saved an instance to one database, it might be tempting to use "
"``save(using=...)`` as a way to migrate the instance to a new database. "
"However, if you don't take appropriate steps, this could have some "
"unexpected consequences."
msgstr ""

# 4769fd1052ba4dae8dcd15787b55e787
#: ../../topics/db/multi-db.txt:353
msgid "Consider the following example::"
msgstr ""

# 52152430bde04ec792efb84f866ef653
#: ../../topics/db/multi-db.txt:359
msgid ""
"In statement 1, a new ``Person`` object is saved to the ``first`` database. "
"At this time, ``p`` doesn't have a primary key, so Django issues a SQL "
"``INSERT`` statement. This creates a primary key, and Django assigns that "
"primary key to ``p``."
msgstr ""

# 1e0d58e5f99546df9ffa7678df5adf66
#: ../../topics/db/multi-db.txt:364
msgid ""
"When the save occurs in statement 2, ``p`` already has a primary key value, "
"and Django will attempt to use that primary key on the new database. If the "
"primary key value isn't in use in the ``second`` database, then you won't "
"have any problems -- the object will be copied to the new database."
msgstr ""

# fab96df9c98e48e6b911c192d1c89e90
#: ../../topics/db/multi-db.txt:370
msgid ""
"However, if the primary key of ``p`` is already in use on the ``second`` "
"database, the existing object in the ``second`` database will be overridden "
"when ``p`` is saved."
msgstr ""

# cfc6041118e04acb8a0a8762bba37063
#: ../../topics/db/multi-db.txt:374
msgid ""
"You can avoid this in two ways. First, you can clear the primary key of the "
"instance. If an object has no primary key, Django will treat it as a new "
"object, avoiding any loss of data on the ``second`` database::"
msgstr ""

# aa6c234af022406a903fb4068d9bb6e9
#: ../../topics/db/multi-db.txt:384
msgid ""
"The second option is to use the ``force_insert`` option to ``save()`` to "
"ensure that Django does a SQL ``INSERT``::"
msgstr ""

# fdbfff85941041469141056e4281a488
#: ../../topics/db/multi-db.txt:391
msgid ""
"This will ensure that the person named ``Fred`` will have the same primary "
"key on both databases. If that primary key is already in use when you try to "
"save onto the ``second`` database, an error will be raised."
msgstr ""

# 4b3c9095144c40ffbab34400bac2101b
#: ../../topics/db/multi-db.txt:397
msgid "Selecting a database to delete from"
msgstr ""

# 6596dfa7b25d4e08b3530826a08958d8
#: ../../topics/db/multi-db.txt:399
msgid ""
"By default, a call to delete an existing object will be executed on the same "
"database that was used to retrieve the object in the first place::"
msgstr ""

# 0b2dedb1b0a740f593a2d598a602fa52
#: ../../topics/db/multi-db.txt:406
msgid ""
"To specify the database from which a model will be deleted, pass a ``using`` "
"keyword argument to the ``Model.delete()`` method. This argument works just "
"like the ``using`` keyword argument to ``save()``."
msgstr ""

# b2b54fd53cc44547a482d6d6532d0063
#: ../../topics/db/multi-db.txt:410
msgid ""
"For example, if you're migrating a user from the ``legacy_users`` database "
"to the ``new_users`` database, you might use these commands::"
msgstr ""

# 10168321ee6d4a60bc085d7cbd7dea96
#: ../../topics/db/multi-db.txt:417
msgid "Using managers with multiple databases"
msgstr ""

# 68e6d5077ef14d7db248893df865b32c
#: ../../topics/db/multi-db.txt:419
msgid ""
"Use the ``db_manager()`` method on managers to give managers access to a non-"
"default database."
msgstr ""

# de2616300ee1444a89d60769d100fd24
#: ../../topics/db/multi-db.txt:422
msgid ""
"For example, say you have a custom manager method that touches the database "
"-- ``User.objects.create_user()``. Because ``create_user()`` is a manager "
"method, not a ``QuerySet`` method, you can't do ``User.objects.using"
"('new_users').create_user()``. (The ``create_user()`` method is only "
"available on ``User.objects``, the manager, not on ``QuerySet`` objects "
"derived from the manager.) The solution is to use ``db_manager()``, like "
"this::"
msgstr ""

# f3e50dee856b4fe08de61e21cf14f237
#: ../../topics/db/multi-db.txt:432
msgid ""
"``db_manager()`` returns a copy of the manager bound to the database you "
"specify."
msgstr ""

# 9cee1c15d1284283a0e1da311c5c0e93
#: ../../topics/db/multi-db.txt:435
msgid "Using ``get_query_set()`` with multiple databases"
msgstr ""

# 60432553407243d1802724eefdf8f9ac
#: ../../topics/db/multi-db.txt:437
msgid ""
"If you're overriding ``get_query_set()`` on your manager, be sure to either "
"call the method on the parent (using ``super()``) or do the appropriate "
"handling of the ``_db`` attribute on the manager (a string containing the "
"name of the database to use)."
msgstr ""

# 9dcf6c87d36b49b6beccb6483858e8cd
#: ../../topics/db/multi-db.txt:442
msgid ""
"For example, if you want to return a custom ``QuerySet`` class from the "
"``get_query_set`` method, you could do this::"
msgstr ""

# 2d073950b5e5492cbd0b1f5c4eb04f93
#: ../../topics/db/multi-db.txt:453
msgid "Exposing multiple databases in Django's admin interface"
msgstr ""

# 1ef3fb589c684353b8804841dfaf412b
#: ../../topics/db/multi-db.txt:455
msgid ""
"Django's admin doesn't have any explicit support for multiple databases. If "
"you want to provide an admin interface for a model on a database other than "
"that specified by your router chain, you'll need to write custom :class:"
"`~django.contrib.admin.ModelAdmin` classes that will direct the admin to use "
"a specific database for content."
msgstr ""

# 3dd7f9b886704832bb36550276aff1fd
#: ../../topics/db/multi-db.txt:461
msgid ""
"``ModelAdmin`` objects have five methods that require customization for "
"multiple-database support::"
msgstr ""

# 0c76c320d8094395b7fcc432e075b42f
#: ../../topics/db/multi-db.txt:490
msgid ""
"The implementation provided here implements a multi-database strategy where "
"all objects of a given type are stored on a specific database (e.g., all "
"``User`` objects are in the ``other`` database). If your usage of multiple "
"databases is more complex, your ``ModelAdmin`` will need to reflect that "
"strategy."
msgstr ""

# 4a7a1035d2e3476da3869502c7ecf9f5
#: ../../topics/db/multi-db.txt:496
msgid ""
"Inlines can be handled in a similar fashion. They require three customized "
"methods::"
msgstr ""

# 114625a895714a31b60de008ac5cdf88
#: ../../topics/db/multi-db.txt:515
msgid ""
"Once you've written your model admin definitions, they can be registered "
"with any ``Admin`` instance::"
msgstr ""

# 8e0aefd661a84b088091bd74fb23c4c6
#: ../../topics/db/multi-db.txt:533
msgid ""
"This example sets up two admin sites. On the first site, the ``Author`` and "
"``Publisher`` objects are exposed; ``Publisher`` objects have an tabular "
"inline showing books published by that publisher. The second site exposes "
"just publishers, without the inlines."
msgstr ""

# aac29e819c3c49f980229eccaad9ede4
#: ../../topics/db/multi-db.txt:540
msgid "Using raw cursors with multiple databases"
msgstr ""

# 56869dc8c6014177880572031805765b
# 5e37e1738c8047d0a758e09691e0fb80
#: ../../topics/db/multi-db.txt:542 ../../topics/db/sql.txt:232
msgid ""
"If you are using more than one database you can use ``django.db."
"connections`` to obtain the connection (and cursor) for a specific database. "
"``django.db.connections`` is a dictionary-like object that allows you to "
"retrieve a specific connection using its alias::"
msgstr ""

# 858bd9c0ea114cc3836ff2f416876f29
#: ../../topics/db/multi-db.txt:552
msgid "Limitations of multiple databases"
msgstr ""

# a2a1aa6455c6415d820bb8887c15fd95
#: ../../topics/db/multi-db.txt:557
msgid "Cross-database relations"
msgstr ""

# f70f02fb011f4c68b719d51dc6034f92
#: ../../topics/db/multi-db.txt:559
msgid ""
"Django doesn't currently provide any support for foreign key or many-to-many "
"relationships spanning multiple databases. If you have used a router to "
"partition models to different databases, any foreign key and many-to-many "
"relationships defined by those models must be internal to a single database."
msgstr ""

# af6f1417a608449fa67e731b6273fb7a
#: ../../topics/db/multi-db.txt:565
msgid ""
"This is because of referential integrity. In order to maintain a "
"relationship between two objects, Django needs to know that the primary key "
"of the related object is valid. If the primary key is stored on a separate "
"database, it's not possible to easily evaluate the validity of a primary key."
msgstr ""

# d6df386ac78046c4a7a2da836de42758
#: ../../topics/db/multi-db.txt:571
msgid ""
"If you're using Postgres, Oracle, or MySQL with InnoDB, this is enforced at "
"the database integrity level -- database level key constraints prevent the "
"creation of relations that can't be validated."
msgstr ""

# 45673c1982794e509ba9911c6a74ab6d
#: ../../topics/db/multi-db.txt:575
msgid ""
"However, if you're using SQLite or MySQL with MyISAM tables, there is no "
"enforced referential integrity; as a result, you may be able to 'fake' cross "
"database foreign keys. However, this configuration is not officially "
"supported by Django."
msgstr ""

# 50730e4614c641bf844d84c3b87391fa
#: ../../topics/db/optimization.txt:3
msgid "Database access optimization"
msgstr ""

# c800a4e5a1b040fb8291551aa9d87928
#: ../../topics/db/optimization.txt:5
msgid ""
"Django's database layer provides various ways to help developers get the "
"most out of their databases. This document gathers together links to the "
"relevant documentation, and adds various tips, organized under a number of "
"headings that outline the steps to take when attempting to optimize your "
"database usage."
msgstr ""

# 67e4ea5903c648488a93d677b5712e66
#: ../../topics/db/optimization.txt:11
msgid "Profile first"
msgstr ""

# 25aa2b469a63457da7ca603b419ee339
#: ../../topics/db/optimization.txt:13
msgid ""
"As general programming practice, this goes without saying. Find out :ref:"
"`what queries you are doing and what they are costing you <faq-see-raw-sql-"
"queries>`. You may also want to use an external project like django-debug-"
"toolbar_, or a tool that monitors your database directly."
msgstr ""

# ff615f782be944e9b03d11b15bc3c51b
#: ../../topics/db/optimization.txt:18
msgid ""
"Remember that you may be optimizing for speed or memory or both, depending "
"on your requirements. Sometimes optimizing for one will be detrimental to "
"the other, but sometimes they will help each other. Also, work that is done "
"by the database process might not have the same cost (to you) as the same "
"amount of work done in your Python process. It is up to you to decide what "
"your priorities are, where the balance must lie, and profile all of these as "
"required since this will depend on your application and server."
msgstr ""

# ec09bd0607f2419c9ba3796a3a7f496c
#: ../../topics/db/optimization.txt:26
msgid ""
"With everything that follows, remember to profile after every change to "
"ensure that the change is a benefit, and a big enough benefit given the "
"decrease in readability of your code. **All** of the suggestions below come "
"with the caveat that in your circumstances the general principle might not "
"apply, or might even be reversed."
msgstr ""

# ffbb8c261db747aaa6ac88535f5f6103
#: ../../topics/db/optimization.txt:35
msgid "Use standard DB optimization techniques"
msgstr ""

# 15048370fd374be1b05a0ac000297aa8
#: ../../topics/db/optimization.txt:37
msgid "...including:"
msgstr ""

# 1112bf023e114eacb2b195adbaf8af13
#: ../../topics/db/optimization.txt:39
msgid ""
"Indexes. This is a number one priority, *after* you have determined from "
"profiling what indexes should be added. Use :attr:`django.db.models.Field."
"db_index` to add these from Django."
msgstr ""

# f5f6b1f4abd4421d9cbfa96e16ea6f5e
#: ../../topics/db/optimization.txt:43
msgid "Appropriate use of field types."
msgstr ""

# b39957634de04c96ab2c08bcef685e44
#: ../../topics/db/optimization.txt:45
msgid ""
"We will assume you have done the obvious things above. The rest of this "
"document focuses on how to use Django in such a way that you are not doing "
"unnecessary work. This document also does not address other optimization "
"techniques that apply to all expensive operations, such as :doc:`general "
"purpose caching </topics/cache>`."
msgstr ""

# 4a656643c2a749f098de0194d6edbf57
#: ../../topics/db/optimization.txt:52
msgid "Understand QuerySets"
msgstr ""

# 66fdcf8ad835428399ec7adab0225687
#: ../../topics/db/optimization.txt:54
msgid ""
"Understanding :doc:`QuerySets </ref/models/querysets>` is vital to getting "
"good performance with simple code. In particular:"
msgstr ""

# 730528ae8dbe48cb918be743de7864aa
#: ../../topics/db/optimization.txt:58
msgid "Understand QuerySet evaluation"
msgstr ""

# 1f6d19bdad4941e58a9d9f245b319a54
#: ../../topics/db/optimization.txt:60
msgid "To avoid performance problems, it is important to understand:"
msgstr ""

# d98a125fc61e45aba3a78e9c8486b993
#: ../../topics/db/optimization.txt:62
msgid "that :ref:`QuerySets are lazy <querysets-are-lazy>`."
msgstr ""

# 143ca3b0a503469b8e25f2f1dede846b
#: ../../topics/db/optimization.txt:64
msgid "when :ref:`they are evaluated <when-querysets-are-evaluated>`."
msgstr ""

# dccbdb71d100498285b8e03902c56f0a
#: ../../topics/db/optimization.txt:66
msgid "how :ref:`the data is held in memory <caching-and-querysets>`."
msgstr ""

# 23565a5141d84024956b7714b9153875
#: ../../topics/db/optimization.txt:69
msgid "Understand cached attributes"
msgstr ""

# 21e60ccb77f849cc836fa94352403ac7
#: ../../topics/db/optimization.txt:71
msgid ""
"As well as caching of the whole ``QuerySet``, there is caching of the result "
"of attributes on ORM objects. In general, attributes that are not callable "
"will be cached. For example, assuming the :ref:`example Weblog models "
"<queryset-model-example>`::"
msgstr ""

# d76332b233b9470c8023a13ca375d71c
#: ../../topics/db/optimization.txt:80
msgid "But in general, callable attributes cause DB lookups every time::"
msgstr ""

# 24e339f4be5b42acaf5931a4e1d26e03
#: ../../topics/db/optimization.txt:86
msgid ""
"Be careful when reading template code - the template system does not allow "
"use of parentheses, but will call callables automatically, hiding the above "
"distinction."
msgstr ""

# 02a561569d06485f90047fcffa59df1a
#: ../../topics/db/optimization.txt:90
msgid ""
"Be careful with your own custom properties - it is up to you to implement "
"caching."
msgstr ""

# dc9c18e92db343e68d5f11a18db095db
#: ../../topics/db/optimization.txt:94
msgid "Use the ``with`` template tag"
msgstr ""

# de3fef78c30749d4a5cbf1777658fd26
#: ../../topics/db/optimization.txt:96
msgid ""
"To make use of the caching behavior of ``QuerySet``, you may need to use "
"the :ttag:`with` template tag."
msgstr ""

# e9f05bac5bb24b8eb4929da9ddaf01a9
#: ../../topics/db/optimization.txt:100
msgid "Use ``iterator()``"
msgstr ""

# 02a3535845814db6a63e89b84ca177f4
#: ../../topics/db/optimization.txt:102
msgid ""
"When you have a lot of objects, the caching behavior of the ``QuerySet`` can "
"cause a large amount of memory to be used. In this case, :meth:`~django.db."
"models.query.QuerySet.iterator()` may help."
msgstr ""

# 8a56d26fc2984f11b587bcc2712fdc67
#: ../../topics/db/optimization.txt:107
msgid "Do database work in the database rather than in Python"
msgstr ""

# baedb7b813f74ee18524013503654029
#: ../../topics/db/optimization.txt:109
msgid "For instance:"
msgstr ""

# 8bf02ca01e634cddbc5ae4eadb73efa9
#: ../../topics/db/optimization.txt:111
msgid ""
"At the most basic level, use :ref:`filter and exclude <queryset-api>` to do "
"filtering in the database."
msgstr ""

# 646f3d17baaa4a9bab0d05195e19dc6e
#: ../../topics/db/optimization.txt:114
msgid ""
"Use :ref:`F() object query expressions <query-expressions>` to do filtering "
"against other fields within the same model."
msgstr ""

# 8b6e18ff4e2141a9ba9aa0f5004d6e23
#: ../../topics/db/optimization.txt:117
msgid ""
"Use :doc:`annotate to do aggregation in the database </topics/db/"
"aggregation>`."
msgstr ""

# 512967eb63b64c47a584c70e3128a8d5
#: ../../topics/db/optimization.txt:119
msgid "If these aren't enough to generate the SQL you need:"
msgstr ""

# eda8f1a9de3746998b0c85f745ecf82f
#: ../../topics/db/optimization.txt:122
msgid "Use ``QuerySet.extra()``"
msgstr ""

# ac04af0546264cff8d856346d891cff1
#: ../../topics/db/optimization.txt:124
msgid ""
"A less portable but more powerful method is :meth:`~django.db.models.query."
"QuerySet.extra()`, which allows some SQL to be explicitly added to the "
"query. If that still isn't powerful enough:"
msgstr ""

# 8400626e8c3a42ec90aa1620f24b95f3
#: ../../topics/db/optimization.txt:129
msgid "Use raw SQL"
msgstr ""

# 572724dd3e5448a980f7199ff0c791e5
#: ../../topics/db/optimization.txt:131
msgid ""
"Write your own :doc:`custom SQL to retrieve data or populate models </topics/"
"db/sql>`. Use ``django.db.connection.queries`` to find out what Django is "
"writing for you and start from there."
msgstr ""

# 08f0764e014b41ed8cfd33d3a5c06407
#: ../../topics/db/optimization.txt:136
msgid "Retrieve everything at once if you know you will need it"
msgstr ""

# c2c3e19ee79f482e9f0c9d25cc979cfa
#: ../../topics/db/optimization.txt:138
msgid ""
"Hitting the database multiple times for different parts of a single 'set' of "
"data that you will need all parts of is, in general, less efficient than "
"retrieving it all in one query. This is particularly important if you have a "
"query that is executed in a loop, and could therefore end up doing many "
"database queries, when only one was needed. So:"
msgstr ""

# 2cb1c7cade154f14ab4e7fe3239f8440
#: ../../topics/db/optimization.txt:145
msgid "Use ``QuerySet.select_related()`` and ``prefetch_related()``"
msgstr ""

# b4b50ba3b80c4e55a015b56d85647de5
#: ../../topics/db/optimization.txt:147
msgid ""
"Understand :meth:`~django.db.models.query.QuerySet.select_related` and :meth:"
"`~django.db.models.query.QuerySet.prefetch_related` thoroughly, and use them:"
msgstr ""

# d14d71053d1e45bcb8440d27bc16cdab
#: ../../topics/db/optimization.txt:151
msgid "in view code,"
msgstr ""

# 56eb5832acd746ff8f64a423fa98c72b
#: ../../topics/db/optimization.txt:153
msgid ""
"and in :doc:`managers and default managers </topics/db/managers>` where "
"appropriate. Be aware when your manager is and is not used; sometimes this "
"is tricky so don't make assumptions."
msgstr ""

# 9664f309336d44ffa065edcc328ea41d
#: ../../topics/db/optimization.txt:158
msgid "Don't retrieve things you don't need"
msgstr ""

# ef2f84eacb804ed5a2869a8825970877
#: ../../topics/db/optimization.txt:161
msgid "Use ``QuerySet.values()`` and ``values_list()``"
msgstr ""

# bd00995871cb4181aafce51bf64581f9
#: ../../topics/db/optimization.txt:163
msgid ""
"When you just want a ``dict`` or ``list`` of values, and don't need ORM "
"model objects, make appropriate usage of :meth:`~django.db.models.query."
"QuerySet.values()`. These can be useful for replacing model objects in "
"template code - as long as the dicts you supply have the same attributes as "
"those used in the template, you are fine."
msgstr ""

# f0c28bf8e62a4f7e9e2896a1073336d0
#: ../../topics/db/optimization.txt:171
msgid "Use ``QuerySet.defer()`` and ``only()``"
msgstr ""

# db53aa906e4f4c69b522d73500ea6739
#: ../../topics/db/optimization.txt:173
msgid ""
"Use :meth:`~django.db.models.query.QuerySet.defer()` and :meth:`~django.db."
"models.query.QuerySet.only()` if there are database columns you know that "
"you won't need (or won't need in most cases) to avoid loading them. Note "
"that if you *do* use them, the ORM will have to go and get them in a "
"separate query, making this a pessimization if you use it inappropriately."
msgstr ""

# 38c9dcadd8854702afe1aacda3cedecf
#: ../../topics/db/optimization.txt:179
msgid ""
"Also, be aware that there is some (small extra) overhead incurred inside "
"Django when constructing a model with deferred fields. Don't be too "
"aggressive in deferring fields without profiling as the database has to read "
"most of the non-text, non-VARCHAR data from the disk for a single row in the "
"results, even if it ends up only using a few columns. The ``defer()`` and "
"``only()`` methods are most useful when you can avoid loading a lot of text "
"data or for fields that might take a lot of processing to convert back to "
"Python. As always, profile first, then optimize."
msgstr ""

# f239201d161844488185d561330e5c5d
#: ../../topics/db/optimization.txt:189
msgid "Use QuerySet.count()"
msgstr ""

# b2b18012df114145baa26e8c9bbfbd31
#: ../../topics/db/optimization.txt:191
msgid "...if you only want the count, rather than doing ``len(queryset)``."
msgstr ""

# 72251664a2be42c7bead0a4d9a431907
#: ../../topics/db/optimization.txt:194
msgid "Use QuerySet.exists()"
msgstr ""

# 72a862bcc9b848e591d3e552568c1fc0
#: ../../topics/db/optimization.txt:196
msgid ""
"...if you only want to find out if at least one result exists, rather than "
"``if queryset``."
msgstr ""

# c072479498554b2687918ba0f07f58fa
#: ../../topics/db/optimization.txt:199
msgid "But:"
msgstr ""

# 9e010f4e543d4b9c8c994e4046681715
#: ../../topics/db/optimization.txt:202
msgid "Don't overuse ``count()`` and ``exists()``"
msgstr ""

# 2e984a94485d4e5c87288e4267758675
#: ../../topics/db/optimization.txt:204
msgid ""
"If you are going to need other data from the QuerySet, just evaluate it."
msgstr ""

# b91554c3c9644945ba77ff06c5dc3b95
#: ../../topics/db/optimization.txt:206
msgid ""
"For example, assuming an Email model that has a ``body`` attribute and a "
"many-to-many relation to User, the following template code is optimal:"
msgstr ""

# 4eac6fbe0f374d42863fabfcde2511d5
#: ../../topics/db/optimization.txt:225
msgid "It is optimal because:"
msgstr ""

# 0eb36197e9454d8489284ffb37b431d3
#: ../../topics/db/optimization.txt:227
msgid ""
"Since QuerySets are lazy, this does no database queries if 'display_inbox' "
"is False."
msgstr ""

# c6a2d0f878d5465f87d3ba9b93c55d11
#: ../../topics/db/optimization.txt:230
msgid ""
"Use of :ttag:`with` means that we store ``user.emails.all`` in a variable "
"for later use, allowing its cache to be re-used."
msgstr ""

# 01756998af65486a8149c35984da4bf5
#: ../../topics/db/optimization.txt:233
msgid ""
"The line ``{% if emails %}`` causes ``QuerySet.__nonzero__()`` to be called, "
"which causes the ``user.emails.all()`` query to be run on the database, and "
"at the least the first line to be turned into an ORM object. If there aren't "
"any results, it will return False, otherwise True."
msgstr ""

# 5aefd26b984345e68dea385f4887fb6f
#: ../../topics/db/optimization.txt:238
msgid ""
"The use of ``{{ emails|length }}`` calls ``QuerySet.__len__()``, filling out "
"the rest of the cache without doing another query."
msgstr ""

# 3697b1549c234f3a8a3ee241650878e6
#: ../../topics/db/optimization.txt:241
msgid "The :ttag:`for` loop iterates over the already filled cache."
msgstr ""

# 3a2d9754708c47b7baf1eb7c369fecc6
#: ../../topics/db/optimization.txt:243
msgid ""
"In total, this code does either one or zero database queries. The only "
"deliberate optimization performed is the use of the :ttag:`with` tag. Using "
"``QuerySet.exists()`` or ``QuerySet.count()`` at any point would cause "
"additional queries."
msgstr ""

# 61fec23ce6ab4524abec1006bb55e357
#: ../../topics/db/optimization.txt:249
msgid "Use ``QuerySet.update()`` and ``delete()``"
msgstr ""

# 80388c42b2894cf19fbf0886a809f1cb
#: ../../topics/db/optimization.txt:251
msgid ""
"Rather than retrieve a load of objects, set some values, and save them "
"individual, use a bulk SQL UPDATE statement, via :ref:`QuerySet.update() "
"<topics-db-queries-update>`. Similarly, do :ref:`bulk deletes <topics-db-"
"queries-delete>` where possible."
msgstr ""

# cd1710e6863b46b49a4cef12f635138c
#: ../../topics/db/optimization.txt:256
msgid ""
"Note, however, that these bulk update methods cannot call the ``save()`` or "
"``delete()`` methods of individual instances, which means that any custom "
"behavior you have added for these methods will not be executed, including "
"anything driven from the normal database object :doc:`signals </ref/"
"signals>`."
msgstr ""

# b50f469f4a0d4c55bf87a03e171a081a
#: ../../topics/db/optimization.txt:262
msgid "Use foreign key values directly"
msgstr ""

# df594c71f65340c7aaf8ef2e94469dbc
#: ../../topics/db/optimization.txt:264
msgid ""
"If you only need a foreign key value, use the foreign key value that is "
"already on the object you've got, rather than getting the whole related "
"object and taking its primary key. i.e. do::"
msgstr ""

# 4e936b88921f456fb27ab87d5276b406
#: ../../topics/db/optimization.txt:270
msgid "instead of::"
msgstr ""

# 69a7507fc1014e1ab672e088b2c64110
#: ../../topics/db/optimization.txt:275
msgid "Insert in bulk"
msgstr ""

# 995f4ce9a7414d0cb9f77b4a0034d941
#: ../../topics/db/optimization.txt:277
msgid ""
"When creating objects, where possible, use the :meth:`~django.db.models."
"query.QuerySet.bulk_create()` method to reduce the number of SQL queries. "
"For example::"
msgstr ""

# a4ec0e0b7efe4c87a401c8d9fa982289
# 5cdf8cfc71fe4536a01ecd68266bbc60
#: ../../topics/db/optimization.txt:286 ../../topics/db/optimization.txt:300
msgid "...is preferable to::"
msgstr ""

# 177abf8fc7d7481894edea0a500f2311
#: ../../topics/db/optimization.txt:291
msgid ""
"Note that there are a number of :meth:`caveats to this method <django.db."
"models.query.QuerySet.bulk_create>`, so make sure it's appropriate for your "
"use case."
msgstr ""

# 04d1d73e4684449fbee730759a0b3fde
#: ../../topics/db/optimization.txt:295
msgid ""
"This also applies to :class:`ManyToManyFields <django.db.models."
"ManyToManyField>`, so doing::"
msgstr ""

# 79ada349167d4c65bd46ec6160824d35
#: ../../topics/db/optimization.txt:305
msgid "...where ``Bands`` and ``Artists`` have a many-to-many relationship."
msgstr ""

# f032d1f68e0e4da09dd4a46effe04518
#: ../../topics/db/queries.txt:3
msgid "Making queries"
msgstr ""

# 78f0c7c6c4b04e1e99f0d3fe644ee77d
#: ../../topics/db/queries.txt:7
msgid ""
"Once you've created your :doc:`data models </topics/db/models>`, Django "
"automatically gives you a database-abstraction API that lets you create, "
"retrieve, update and delete objects. This document explains how to use this "
"API. Refer to the :doc:`data model reference </ref/models/index>` for full "
"details of all the various model lookup options."
msgstr ""

# 24a8b8565604477f98d8b32bbc10baef
#: ../../topics/db/queries.txt:13
msgid ""
"Throughout this guide (and in the reference), we'll refer to the following "
"models, which comprise a Weblog application:"
msgstr ""

# 83148ad80571479991a5903903f84782
#: ../../topics/db/queries.txt:49
msgid "Creating objects"
msgstr ""

# 96a43ce53cf647128e6a49286199f23a
#: ../../topics/db/queries.txt:51
msgid ""
"To represent database-table data in Python objects, Django uses an intuitive "
"system: A model class represents a database table, and an instance of that "
"class represents a particular record in the database table."
msgstr ""

# d5bffb6611484561b15b87b126e83f17
#: ../../topics/db/queries.txt:55
msgid ""
"To create an object, instantiate it using keyword arguments to the model "
"class, then call :meth:`~django.db.models.Model.save` to save it to the "
"database."
msgstr ""

# bdf4f2560d6c43f7a136e5ddea8a5c26
#: ../../topics/db/queries.txt:58
msgid ""
"You import the model class from wherever it lives on the Python path, as you "
"may expect. (We point this out here because previous Django versions "
"required funky model importing.)"
msgstr ""

# ad18b61ae4794deabfb4eec1f9343619
#: ../../topics/db/queries.txt:62
msgid ""
"Assuming models live in a file ``mysite/blog/models.py``, here's an example::"
msgstr ""

# f84315cccad2413f86c9dd6b586543e2
#: ../../topics/db/queries.txt:68
msgid ""
"This performs an ``INSERT`` SQL statement behind the scenes. Django doesn't "
"hit the database until you explicitly call :meth:`~django.db.models.Model."
"save`."
msgstr ""

# 4ed82445ee614c49bd303833a66436ed
#: ../../topics/db/queries.txt:71
msgid "The :meth:`~django.db.models.Model.save` method has no return value."
msgstr ""

# 89c97813901a4bacb5500b74bad03265
#: ../../topics/db/queries.txt:75
msgid ""
":meth:`~django.db.models.Model.save` takes a number of advanced options not "
"described here. See the documentation for :meth:`~django.db.models.Model."
"save` for complete details."
msgstr ""

# de27894182e042afa2294bdcd8323652
#: ../../topics/db/queries.txt:79
msgid ""
"To create and save an object in a single step, use the :meth:`~django.db."
"models.query.QuerySet.create()` method."
msgstr ""

# 90e4f6f3a7d34199b444e1b9cbf5e512
#: ../../topics/db/queries.txt:83
msgid "Saving changes to objects"
msgstr ""

# ac1c9be4122649db8c98654f4e093f0e
#: ../../topics/db/queries.txt:85
msgid ""
"To save changes to an object that's already in the database, use :meth:"
"`~django.db.models.Model.save`."
msgstr ""

# 4598eb742b0045ab92c773700d292678
#: ../../topics/db/queries.txt:88
msgid ""
"Given a ``Blog`` instance ``b5`` that has already been saved to the "
"database, this example changes its name and updates its record in the "
"database::"
msgstr ""

# ba2c4979cf8746978221614d8c9df93d
#: ../../topics/db/queries.txt:94
msgid ""
"This performs an ``UPDATE`` SQL statement behind the scenes. Django doesn't "
"hit the database until you explicitly call :meth:`~django.db.models.Model."
"save`."
msgstr ""

# b675aaa43bd74fa2bc14bfab35c9a0a8
#: ../../topics/db/queries.txt:98
msgid "Saving ``ForeignKey`` and ``ManyToManyField`` fields"
msgstr ""

# 2363af0573c242bda0e128f802458343
#: ../../topics/db/queries.txt:100
msgid ""
"Updating a :class:`~django.db.models.ForeignKey` field works exactly the "
"same way as saving a normal field -- simply assign an object of the right "
"type to the field in question. This example updates the ``blog`` attribute "
"of an ``Entry`` instance ``entry``::"
msgstr ""

# 3efb43f34fad4a67bb4c6df1233c8618
#: ../../topics/db/queries.txt:111
msgid ""
"Updating a :class:`~django.db.models.ManyToManyField` works a little "
"differently -- use the :meth:`~django.db.models.fields.related."
"RelatedManager.add` method on the field to add a record to the relation. "
"This example adds the ``Author`` instance ``joe`` to the ``entry`` object::"
msgstr ""

# 681d157221e641398860a5dc3008c35a
#: ../../topics/db/queries.txt:121
msgid ""
"To add multiple records to a :class:`~django.db.models.ManyToManyField` in "
"one go, include multiple arguments in the call to :meth:`~django.db.models."
"fields.related.RelatedManager.add`, like this::"
msgstr ""

# b10664617c74438bb6b3107b1143c2fe
#: ../../topics/db/queries.txt:131
msgid ""
"Django will complain if you try to assign or add an object of the wrong type."
msgstr ""

# 500c2fc3ce33431fa6404ca305ba4634
#: ../../topics/db/queries.txt:134
msgid "Retrieving objects"
msgstr ""

# ec5b2b7b786543d1b34319647ea7a8f7
#: ../../topics/db/queries.txt:136
msgid ""
"To retrieve objects from your database, construct a :class:`~django.db."
"models.query.QuerySet` via a :class:`~django.db.models.Manager` on your "
"model class."
msgstr ""

# da342bc62589439e8cd3a97e4ca3014b
#: ../../topics/db/queries.txt:140
msgid ""
"A :class:`~django.db.models.query.QuerySet` represents a collection of "
"objects from your database. It can have zero, one or many *filters* -- "
"criteria that narrow down the collection based on given parameters. In SQL "
"terms, a :class:`~django.db.models.query.QuerySet` equates to a ``SELECT`` "
"statement, and a filter is a limiting clause such as ``WHERE`` or ``LIMIT``."
msgstr ""

# 1533a355d382496899adcc943d625080
#: ../../topics/db/queries.txt:146
msgid ""
"You get a :class:`~django.db.models.query.QuerySet` by using your model's :"
"class:`~django.db.models.Manager`. Each model has at least one :class:"
"`~django.db.models.Manager`, and it's called ``objects`` by default. Access "
"it directly via the model class, like so::"
msgstr ""

# 7e007f82056d4eadbd2fba859d63e828
#: ../../topics/db/queries.txt:161
msgid ""
"``Managers`` are accessible only via model classes, rather than from model "
"instances, to enforce a separation between \"table-level\" operations and "
"\"record-level\" operations."
msgstr ""

# e02ebb83210040ec988cb4fd55c0e8a1
#: ../../topics/db/queries.txt:165
msgid ""
"The :class:`~django.db.models.Manager` is the main source of ``QuerySets`` "
"for a model. It acts as a \"root\" :class:`~django.db.models.query.QuerySet` "
"that describes all objects in the model's database table. For example, "
"``Blog.objects`` is the initial :class:`~django.db.models.query.QuerySet` "
"that contains all ``Blog`` objects in the database."
msgstr ""

# b28f85862d194143802269d53e71e659
#: ../../topics/db/queries.txt:172
msgid "Retrieving all objects"
msgstr ""

# 10b1217c42c44385be844dc538baa642
#: ../../topics/db/queries.txt:174
msgid ""
"The simplest way to retrieve objects from a table is to get all of them. To "
"do this, use the :meth:`~django.db.models.query.QuerySet.all` method on a :"
"class:`~django.db.models.Manager`::"
msgstr ""

# 112ee742244a4eb0a90e3b2bd6698468
#: ../../topics/db/queries.txt:180
msgid ""
"The :meth:`~django.db.models.query.QuerySet.all` method returns a :class:"
"`~django.db.models.query.QuerySet` of all the objects in the database."
msgstr ""

# 569fbcf0bf9b431ab0551128eb0f2039
#: ../../topics/db/queries.txt:183
msgid ""
"(If ``Entry.objects`` is a :class:`~django.db.models.query.QuerySet`, why "
"can't we just do ``Entry.objects``?  That's because ``Entry.objects``, the "
"root :class:`~django.db.models.query.QuerySet`, is a special case that "
"cannot be evaluated. The :meth:`~django.db.models.query.QuerySet.all` method "
"returns a :class:`~django.db.models.query.QuerySet` that *can* be evaluated.)"
msgstr ""

# 6474c5828cff4f51b2d25cc5f7770678
#: ../../topics/db/queries.txt:191
msgid "Retrieving specific objects with filters"
msgstr ""

# 391f7723ab2040d6b34661295b95d5ef
#: ../../topics/db/queries.txt:193
msgid ""
"The root :class:`~django.db.models.query.QuerySet` provided by the :class:"
"`~django.db.models.Manager` describes all objects in the database table. "
"Usually, though, you'll need to select only a subset of the complete set of "
"objects."
msgstr ""

# 77fd4241a9324d9495d40cea65eacf9d
#: ../../topics/db/queries.txt:198
msgid ""
"To create such a subset, you refine the initial :class:`~django.db.models."
"query.QuerySet`, adding filter conditions. The two most common ways to "
"refine a :class:`~django.db.models.query.QuerySet` are:"
msgstr ""

# b1d3b04475044dc6a7c9e7226fbcfd2a
#: ../../topics/db/queries.txt:203
msgid ""
"Returns a new :class:`~django.db.models.query.QuerySet` containing objects "
"that match the given lookup parameters."
msgstr ""

# e9c37df53bcf4321ac3443031f1e7fe0
#: ../../topics/db/queries.txt:207
msgid ""
"Returns a new :class:`~django.db.models.query.QuerySet` containing objects "
"that do *not* match the given lookup parameters."
msgstr ""

# 9ce4e3e555fc4ff29b59004a3117d04b
#: ../../topics/db/queries.txt:210
msgid ""
"The lookup parameters (``**kwargs`` in the above function definitions) "
"should be in the format described in `Field lookups`_ below."
msgstr ""

# 0ea98e81585e4af48571f97d5d97f362
#: ../../topics/db/queries.txt:213
msgid ""
"For example, to get a :class:`~django.db.models.query.QuerySet` of blog "
"entries from the year 2006, use :meth:`~django.db.models.query.QuerySet."
"filter` like so::"
msgstr ""

# 48a5180138a241f6ad9cccda4be6be42
#: ../../topics/db/queries.txt:219
msgid ""
"We don't have to add an :meth:`~django.db.models.query.QuerySet.all` -- "
"``Entry.objects.all().filter(...)``. That would still work, but you only "
"need :meth:`~django.db.models.query.QuerySet.all` when you want all objects "
"from the root :class:`~django.db.models.query.QuerySet`."
msgstr ""

# a4d5923c1970494c979b648d63b74b98
#: ../../topics/db/queries.txt:227
msgid "Chaining filters"
msgstr ""

# 95aba830c37e4360a3c5e8b3fbe2309c
#: ../../topics/db/queries.txt:229
msgid ""
"The result of refining a :class:`~django.db.models.query.QuerySet` is itself "
"a :class:`~django.db.models.query.QuerySet`, so it's possible to chain "
"refinements together. For example::"
msgstr ""

# aec61aa15dcf41f3bf2aa86276b478e8
#: ../../topics/db/queries.txt:241
msgid ""
"This takes the initial :class:`~django.db.models.query.QuerySet` of all "
"entries in the database, adds a filter, then an exclusion, then another "
"filter. The final result is a :class:`~django.db.models.query.QuerySet` "
"containing all entries with a headline that starts with \"What\", that were "
"published between January 1, 2005, and the current day."
msgstr ""

# e603f03eefa1484ba2b3cd2d25c79021
#: ../../topics/db/queries.txt:250
msgid "Filtered QuerySets are unique"
msgstr ""

# 68bf83a4ef0f4c1cb1a2ffba389c3a29
#: ../../topics/db/queries.txt:252
msgid ""
"Each time you refine a :class:`~django.db.models.query.QuerySet`, you get a "
"brand-new :class:`~django.db.models.query.QuerySet` that is in no way bound "
"to the previous :class:`~django.db.models.query.QuerySet`. Each refinement "
"creates a separate and distinct :class:`~django.db.models.query.QuerySet` "
"that can be stored, used and reused."
msgstr ""

# a4390d9658504b6d8579e446ea45ad31
#: ../../topics/db/queries.txt:264
msgid ""
"These three ``QuerySets`` are separate. The first is a base :class:`~django."
"db.models.query.QuerySet` containing all entries that contain a headline "
"starting with \"What\". The second is a subset of the first, with an "
"additional criteria that excludes records whose ``pub_date`` is greater than "
"now. The third is a subset of the first, with an additional criteria that "
"selects only the records whose ``pub_date`` is greater than now. The "
"initial :class:`~django.db.models.query.QuerySet` (``q1``) is unaffected by "
"the refinement process."
msgstr ""

# 8cb253a4e734469f82927ecd8bdee5e4
#: ../../topics/db/queries.txt:276
msgid "QuerySets are lazy"
msgstr ""

# 6bed14fbf54b43789441dd49aec60c52
#: ../../topics/db/queries.txt:278
msgid ""
"``QuerySets`` are lazy -- the act of creating a :class:`~django.db.models."
"query.QuerySet` doesn't involve any database activity. You can stack filters "
"together all day long, and Django won't actually run the query until the :"
"class:`~django.db.models.query.QuerySet` is *evaluated*. Take a look at this "
"example::"
msgstr ""

# 12aeb53452504fdb842f54fd336475e7
#: ../../topics/db/queries.txt:289
msgid ""
"Though this looks like three database hits, in fact it hits the database "
"only once, at the last line (``print q``). In general, the results of a :"
"class:`~django.db.models.query.QuerySet` aren't fetched from the database "
"until you \"ask\" for them. When you do, the :class:`~django.db.models.query."
"QuerySet` is *evaluated* by accessing the database. For more details on "
"exactly when evaluation takes place, see :ref:`when-querysets-are-evaluated`."
msgstr ""

# c15acf95ed9543dc9a30a717d7dca893
#: ../../topics/db/queries.txt:301
msgid "Retrieving a single object with get"
msgstr ""

# 75836f1d11ea4882957da525b584cdba
#: ../../topics/db/queries.txt:303
msgid ""
":meth:`~django.db.models.query.QuerySet.filter` will always give you a :"
"class:`~django.db.models.query.QuerySet`, even if only a single object "
"matches the query - in this case, it will be a :class:`~django.db.models."
"query.QuerySet` containing a single element."
msgstr ""

# e99cdd1d54c94dfd968b2adcfc851996
#: ../../topics/db/queries.txt:308
msgid ""
"If you know there is only one object that matches your query, you can use "
"the :meth:`~django.db.models.query.QuerySet.get` method on a `Manager` which "
"returns the object directly::"
msgstr ""

# 5cbd1eee44494561b20fae8543e501f3
#: ../../topics/db/queries.txt:314
msgid ""
"You can use any query expression with :meth:`~django.db.models.query."
"QuerySet.get`, just like with :meth:`~django.db.models.query.QuerySet."
"filter` - again, see `Field lookups`_ below."
msgstr ""

# 680686d64a794798a5f53c99ff1077b1
#: ../../topics/db/queries.txt:319
msgid ""
"Note that there is a difference between using :meth:`~django.db.models.query."
"QuerySet.get`, and using :meth:`~django.db.models.query.QuerySet.filter` "
"with a slice of ``[0]``. If there are no results that match the query, :meth:"
"`~django.db.models.query.QuerySet.get` will raise a ``DoesNotExist`` "
"exception. This exception is an attribute of the model class that the query "
"is being performed on - so in the code above, if there is no ``Entry`` "
"object with a primary key of 1, Django will raise ``Entry.DoesNotExist``."
msgstr ""

# 4dd6a8f44feb44949b5e1231c936bd09
#: ../../topics/db/queries.txt:328
msgid ""
"Similarly, Django will complain if more than one item matches the :meth:"
"`~django.db.models.query.QuerySet.get` query. In this case, it will raise "
"``MultipleObjectsReturned``, which again is an attribute of the model class "
"itself."
msgstr ""

# 871f6d8ffe854f298286fa426a9f5bd3
#: ../../topics/db/queries.txt:335
msgid "Other QuerySet methods"
msgstr ""

# f8f8248c8a11456cb504950407c94759
#: ../../topics/db/queries.txt:337
msgid ""
"Most of the time you'll use :meth:`~django.db.models.query.QuerySet.all`, :"
"meth:`~django.db.models.query.QuerySet.get`, :meth:`~django.db.models.query."
"QuerySet.filter` and :meth:`~django.db.models.query.QuerySet.exclude` when "
"you need to look up objects from the database. However, that's far from all "
"there is; see the :ref:`QuerySet API Reference <queryset-api>` for a "
"complete list of all the various :class:`~django.db.models.query.QuerySet` "
"methods."
msgstr ""

# 96b863c8907c46b8979c8c6664e99bdf
#: ../../topics/db/queries.txt:348
msgid "Limiting QuerySets"
msgstr ""

# ba7dc2d43e4d48e4b99e8f61b06ebdcc
#: ../../topics/db/queries.txt:350
msgid ""
"Use a subset of Python's array-slicing syntax to limit your :class:`~django."
"db.models.query.QuerySet` to a certain number of results. This is the "
"equivalent of SQL's ``LIMIT`` and ``OFFSET`` clauses."
msgstr ""

# a6ba01ba1ac74258af243e2d5a96aa19
#: ../../topics/db/queries.txt:354
msgid "For example, this returns the first 5 objects (``LIMIT 5``)::"
msgstr ""

# 8d09e2038a8f40cf994b7920de814102
#: ../../topics/db/queries.txt:358
msgid "This returns the sixth through tenth objects (``OFFSET 5 LIMIT 5``)::"
msgstr ""

# c2a670278f3b4b20aec9d9771c390c77
#: ../../topics/db/queries.txt:362
msgid "Negative indexing (i.e. ``Entry.objects.all()[-1]``) is not supported."
msgstr ""

# 44d5220ded414c64b996ac7f412a3aff
#: ../../topics/db/queries.txt:364
msgid ""
"Generally, slicing a :class:`~django.db.models.query.QuerySet` returns a "
"new :class:`~django.db.models.query.QuerySet` -- it doesn't evaluate the "
"query. An exception is if you use the \"step\" parameter of Python slice "
"syntax. For example, this would actually execute the query in order to "
"return a list of every *second* object of the first 10::"
msgstr ""

# c42e7b0ef2b24716a4a72f909ca019c5
#: ../../topics/db/queries.txt:372
msgid ""
"To retrieve a *single* object rather than a list (e.g. ``SELECT foo FROM bar "
"LIMIT 1``), use a simple index instead of a slice. For example, this returns "
"the first ``Entry`` in the database, after ordering entries alphabetically "
"by headline::"
msgstr ""

# 80d3f8761b544f76b55e6d20e215ef53
#: ../../topics/db/queries.txt:379
msgid "This is roughly equivalent to::"
msgstr ""

# 6988c4e318d74c44a9c0d255da3ed049
#: ../../topics/db/queries.txt:383
msgid ""
"Note, however, that the first of these will raise ``IndexError`` while the "
"second will raise ``DoesNotExist`` if no objects match the given criteria. "
"See :meth:`~django.db.models.query.QuerySet.get` for more details."
msgstr ""

# 50ea579934074c288966ee1e34d904b3
#: ../../topics/db/queries.txt:390
msgid "Field lookups"
msgstr ""

# f92da3e431994af490a2b9d428feda06
#: ../../topics/db/queries.txt:392
msgid ""
"Field lookups are how you specify the meat of an SQL ``WHERE`` clause. "
"They're specified as keyword arguments to the :class:`~django.db.models."
"query.QuerySet` methods :meth:`~django.db.models.query.QuerySet.filter`, :"
"meth:`~django.db.models.query.QuerySet.exclude` and :meth:`~django.db.models."
"query.QuerySet.get`."
msgstr ""

# a365d8a614f04fd4bf989f7a849fd146
#: ../../topics/db/queries.txt:398
msgid ""
"Basic lookups keyword arguments take the form ``field__lookuptype=value``. "
"(That's a double-underscore). For example::"
msgstr ""

# 3dd8910ddc744a63b6129584786a42ed
#: ../../topics/db/queries.txt:403
msgid "translates (roughly) into the following SQL::"
msgstr ""

# 813b13cf83d74a32bf1aca61894cdf89
#: ../../topics/db/queries.txt:409
msgid ""
"Python has the ability to define functions that accept arbitrary name-value "
"arguments whose names and values are evaluated at runtime. For more "
"information, see `Keyword Arguments`_ in the official Python tutorial."
msgstr ""

# c1b3dbf9d6654c9b9a83334bf883f71d
#: ../../topics/db/queries.txt:424
msgid ""
"If you pass an invalid keyword argument, a lookup function will raise "
"``TypeError``."
msgstr ""

# 6dec8061386041e980c9081dae5a6701
#: ../../topics/db/queries.txt:427
msgid ""
"The database API supports about two dozen lookup types; a complete reference "
"can be found in the :ref:`field lookup reference <field-lookups>`. To give "
"you a taste of what's available, here's some of the more common lookups "
"you'll probably use:"
msgstr ""

# 4df9cae7439b4d9dbf334182d80faf31
#: ../../topics/db/queries.txt:433
msgid "An \"exact\" match. For example::"
msgstr ""

# 6fee80f2735b42b98c7491e6a6c3cdc1
#: ../../topics/db/queries.txt:437
msgid "Would generate SQL along these lines:"
msgstr ""

# 3392ec39651e49ef943dc0b98d5fda91
#: ../../topics/db/queries.txt:443
msgid ""
"If you don't provide a lookup type -- that is, if your keyword argument "
"doesn't contain a double underscore -- the lookup type is assumed to be "
"``exact``."
msgstr ""

# ad6ad9df123f426a9e9acc79459262d3
#: ../../topics/db/queries.txt:447
msgid "For example, the following two statements are equivalent::"
msgstr ""

# 24568da9ac384b61a0276e4f79f00c14
#: ../../topics/db/queries.txt:452
msgid "This is for convenience, because ``exact`` lookups are the common case."
msgstr ""

# e8089a014aca4acc8fdf5511601c1913
#: ../../topics/db/queries.txt:455
msgid "A case-insensitive match. So, the query::"
msgstr ""

# 5a71d14fef124eb4a991d51909dc06a4
#: ../../topics/db/queries.txt:459
msgid ""
"Would match a ``Blog`` titled \"Beatles Blog\", \"beatles blog\", or even "
"\"BeAtlES blOG\"."
msgstr ""

# 0fe23618b3974f0da200c2cb373f7728
#: ../../topics/db/queries.txt:463
msgid "Case-sensitive containment test. For example::"
msgstr ""

# 93a9aff10da34340933a88ee8648e125
#: ../../topics/db/queries.txt:467
msgid "Roughly translates to this SQL:"
msgstr ""

# 10da0f0b92454da39023912cea7fd3aa
#: ../../topics/db/queries.txt:473
msgid ""
"Note this will match the headline ``'Today Lennon honored'`` but not "
"``'today lennon honored'``."
msgstr ""

# 03a4b93d0a1843a795206cb3ac161863
#: ../../topics/db/queries.txt:476
msgid "There's also a case-insensitive version, :lookup:`icontains`."
msgstr ""

# 734fcc8f46904e2e9c3c50bd32066af1
#: ../../topics/db/queries.txt:479
msgid ""
"Starts-with and ends-with search, respectively. There are also case-"
"insensitive versions called :lookup:`istartswith` and :lookup:`iendswith`."
msgstr ""

# eedee4545d1b4002b201e0d2d1e435e3
#: ../../topics/db/queries.txt:483
msgid ""
"Again, this only scratches the surface. A complete reference can be found in "
"the :ref:`field lookup reference <field-lookups>`."
msgstr ""

# 10ac9a09057943888353c26275c5052e
#: ../../topics/db/queries.txt:487
msgid "Lookups that span relationships"
msgstr ""

# 21e5e72e5d6447f2b274c58356c599f2
#: ../../topics/db/queries.txt:489
msgid ""
"Django offers a powerful and intuitive way to \"follow\" relationships in "
"lookups, taking care of the SQL ``JOIN``\\s for you automatically, behind "
"the scenes. To span a relationship, just use the field name of related "
"fields across models, separated by double underscores, until you get to the "
"field you want."
msgstr ""

# 5e2720ee14dc49bcb299c5cc2a0eded1
#: ../../topics/db/queries.txt:495
msgid ""
"This example retrieves all ``Entry`` objects with a ``Blog`` whose ``name`` "
"is ``'Beatles Blog'``::"
msgstr ""

# df8d11191dd8466b8e4ba63f427f4358
#: ../../topics/db/queries.txt:500
msgid "This spanning can be as deep as you'd like."
msgstr ""

# 94f1d04745ac41c4b4bf58f9a9caae9e
#: ../../topics/db/queries.txt:502
msgid ""
"It works backwards, too. To refer to a \"reverse\" relationship, just use "
"the lowercase name of the model."
msgstr ""

# 38c5a1020ef847cfb383e7a1a43b8099
#: ../../topics/db/queries.txt:505
msgid ""
"This example retrieves all ``Blog`` objects which have at least one "
"``Entry`` whose ``headline`` contains ``'Lennon'``::"
msgstr ""

# fca7d3e7e08f412597b6397c929aaeeb
#: ../../topics/db/queries.txt:510
msgid ""
"If you are filtering across multiple relationships and one of the "
"intermediate models doesn't have a value that meets the filter condition, "
"Django will treat it as if there is an empty (all values are ``NULL``), but "
"valid, object there. All this means is that no error will be raised. For "
"example, in this filter::"
msgstr ""

# 0e3c40040fd140f79e8e2d1873536db6
#: ../../topics/db/queries.txt:517
msgid ""
"(if there was a related ``Author`` model), if there was no ``author`` "
"associated with an entry, it would be treated as if there was also no "
"``name`` attached, rather than raising an error because of the missing "
"``author``. Usually this is exactly what you want to have happen. The only "
"case where it might be confusing is if you are using :lookup:`isnull`. Thus::"
msgstr ""

# 18693f42592044bf94d16cc597ab138e
#: ../../topics/db/queries.txt:525
msgid ""
"will return ``Blog`` objects that have an empty ``name`` on the ``author`` "
"and also those which have an empty ``author`` on the ``entry``. If you don't "
"want those latter objects, you could write::"
msgstr ""

# 4997f47a9ee7434095cbd02f4c0b60d2
#: ../../topics/db/queries.txt:533
msgid "Spanning multi-valued relationships"
msgstr ""

# a66311a8d87741eebfbbdf666ceb64b8
#: ../../topics/db/queries.txt:535
msgid ""
"When you are filtering an object based on a :class:`~django.db.models."
"ManyToManyField` or a reverse :class:`~django.db.models.ForeignKey`, there "
"are two different sorts of filter you may be interested in. Consider the "
"``Blog``/``Entry`` relationship (``Blog`` to ``Entry`` is a one-to-many "
"relation). We might be interested in finding blogs that have an entry which "
"has both *\"Lennon\"* in the headline and was published in 2008. Or we might "
"want to find blogs that have an entry with *\"Lennon\"* in the headline as "
"well as an entry that was published in 2008. Since there are multiple "
"entries associated with a single ``Blog``, both of these queries are "
"possible and make sense in some situations."
msgstr ""

# 40d0945f5b66415fac021df9f6325cf9
#: ../../topics/db/queries.txt:546
msgid ""
"The same type of situation arises with a :class:`~django.db.models."
"ManyToManyField`. For example, if an ``Entry`` has a :class:`~django.db."
"models.ManyToManyField` called ``tags``, we might want to find entries "
"linked to tags called *\"music\"* and *\"bands\"* or we might want an entry "
"that contains a tag with a name of *\"music\"* and a status of *\"public\"*."
msgstr ""

# 01d3899ee7fb49d98b66e3beeff3ec2d
#: ../../topics/db/queries.txt:552
msgid ""
"To handle both of these situations, Django has a consistent way of "
"processing :meth:`~django.db.models.query.QuerySet.filter` and :meth:"
"`~django.db.models.query.QuerySet.exclude` calls. Everything inside a "
"single :meth:`~django.db.models.query.QuerySet.filter` call is applied "
"simultaneously to filter out items matching all those requirements. "
"Successive :meth:`~django.db.models.query.QuerySet.filter` calls further "
"restrict the set of objects, but for multi-valued relations, they apply to "
"any object linked to the primary model, not necessarily those objects that "
"were selected by an earlier :meth:`~django.db.models.query.QuerySet.filter` "
"call."
msgstr ""

# 7f0f091bdda24b31ba264f7b89070cb4
#: ../../topics/db/queries.txt:562
msgid ""
"That may sound a bit confusing, so hopefully an example will clarify. To "
"select all blogs that contain entries with both *\"Lennon\"* in the headline "
"and that were published in 2008 (the same entry satisfying both conditions), "
"we would write::"
msgstr ""

# b14df5ee88be4f13ad36c5744ee905de
#: ../../topics/db/queries.txt:570
msgid ""
"To select all blogs that contain an entry with *\"Lennon\"* in the headline "
"**as well as** an entry that was published in 2008, we would write::"
msgstr ""

# 08a32f930abf4ce3b05fc8310ada57d9
#: ../../topics/db/queries.txt:576
msgid ""
"In this second example, the first filter restricted the queryset to all "
"those blogs linked to that particular type of entry. The second filter "
"restricted the set of blogs *further* to those that are also linked to the "
"second type of entry. The entries select by the second filter may or may not "
"be the same as the entries in the first filter. We are filtering the "
"``Blog`` items with each filter statement, not the ``Entry`` items."
msgstr ""

# c45e9a9c34a543cfb7212038b33b5132
#: ../../topics/db/queries.txt:583
msgid ""
"All of this behavior also applies to :meth:`~django.db.models.query.QuerySet."
"exclude`: all the conditions in a single :meth:`~django.db.models.query."
"QuerySet.exclude` statement apply to a single instance (if those conditions "
"are talking about the same multi-valued relation). Conditions in subsequent :"
"meth:`~django.db.models.query.QuerySet.filter` or :meth:`~django.db.models."
"query.QuerySet.exclude` calls that refer to the same relation may end up "
"filtering on different linked objects."
msgstr ""

# 2d095198acf742658d00a7c4f7d49492
#: ../../topics/db/queries.txt:595
msgid "Filters can reference fields on the model"
msgstr ""

# ed005c8dbfdd4afbb78ca07d2559f390
#: ../../topics/db/queries.txt:597
msgid ""
"In the examples given so far, we have constructed filters that compare the "
"value of a model field with a constant. But what if you want to compare the "
"value of a model field with another field on the same model?"
msgstr ""

# f6abea48e1f14e9dbfb6bc7fc9d3bb2e
#: ../../topics/db/queries.txt:601
msgid ""
"Django provides the :ref:`F() expressions <query-expressions>` to allow such "
"comparisons. Instances of ``F()`` act as a reference to a model field within "
"a query. These references can then be used in query filters to compare the "
"values of two different fields on the same model instance."
msgstr ""

# 517beeb1b95e43a390eec3604f65ab75
#: ../../topics/db/queries.txt:606
msgid ""
"For example, to find a list of all blog entries that have had more comments "
"than pingbacks, we construct an ``F()`` object to reference the pingback "
"count, and use that ``F()`` object in the query::"
msgstr ""

# 5f645e8cd8b54bc6abca1efa72f2d485
#: ../../topics/db/queries.txt:613
msgid ""
"Django supports the use of addition, subtraction, multiplication, division "
"and modulo arithmetic with ``F()`` objects, both with constants and with "
"other ``F()`` objects. To find all the blog entries with more than *twice* "
"as many comments as pingbacks, we modify the query::"
msgstr ""

# 9e32d6fcc6db457cb1fffeda7b945748
#: ../../topics/db/queries.txt:620
msgid ""
"To find all the entries where the rating of the entry is less than the sum "
"of the pingback count and comment count, we would issue the query::"
msgstr ""

# 34a1a927ce4f45d28600af937e60bb7c
#: ../../topics/db/queries.txt:626
msgid ""
"You can also use the double underscore notation to span relationships in an "
"``F()`` object. An ``F()`` object with a double underscore will introduce "
"any joins needed to access the related object. For example, to retrieve all "
"the entries where the author's name is the same as the blog name, we could "
"issue the query::"
msgstr ""

# 3339f3c82c36456c85e6bcf531ecaa6b
#: ../../topics/db/queries.txt:636
msgid ""
"For date and date/time fields, you can add or subtract a :class:`~datetime."
"timedelta` object. The following would return all entries that were modified "
"more than 3 days after they were published::"
msgstr ""

# 5585c761f31b4d2f99c6b6fad7c72a37
#: ../../topics/db/queries.txt:644
msgid "The pk lookup shortcut"
msgstr ""

# 286380a46cc54ad98eccfd77cc07506a
#: ../../topics/db/queries.txt:646
msgid ""
"For convenience, Django provides a ``pk`` lookup shortcut, which stands for "
"\"primary key\"."
msgstr ""

# 77c7675a9774494a8fcad54ca08c50a1
#: ../../topics/db/queries.txt:649
msgid ""
"In the example ``Blog`` model, the primary key is the ``id`` field, so these "
"three statements are equivalent::"
msgstr ""

# 9f9e6c97441a4ade95523fbc4bfa1cbf
#: ../../topics/db/queries.txt:656
msgid ""
"The use of ``pk`` isn't limited to ``__exact`` queries -- any query term can "
"be combined with ``pk`` to perform a query on the primary key of a model::"
msgstr ""

# ce113f500e0f400fb54b5e7993bb6ff0
#: ../../topics/db/queries.txt:665
msgid ""
"``pk`` lookups also work across joins. For example, these three statements "
"are equivalent::"
msgstr ""

# 2dd63eed499e404db09ff9640bcd89cd
#: ../../topics/db/queries.txt:673
msgid "Escaping percent signs and underscores in LIKE statements"
msgstr ""

# 5964178453e34f10b266e6257dd10c5b
#: ../../topics/db/queries.txt:675
msgid ""
"The field lookups that equate to ``LIKE`` SQL statements (``iexact``, "
"``contains``, ``icontains``, ``startswith``, ``istartswith``, ``endswith`` "
"and ``iendswith``) will automatically escape the two special characters used "
"in ``LIKE`` statements -- the percent sign and the underscore. (In a "
"``LIKE`` statement, the percent sign signifies a multiple-character wildcard "
"and the underscore signifies a single-character wildcard.)"
msgstr ""

# 730d6e4e3b9c4ecabf950e02f462c4ef
#: ../../topics/db/queries.txt:682
msgid ""
"This means things should work intuitively, so the abstraction doesn't leak. "
"For example, to retrieve all the entries that contain a percent sign, just "
"use the percent sign as any other character::"
msgstr ""

# 81a338297d764d6c9c3a5050a108af92
#: ../../topics/db/queries.txt:688
msgid ""
"Django takes care of the quoting for you; the resulting SQL will look "
"something like this:"
msgstr ""

# 6aed6059f05747afa04a97892dbe167a
#: ../../topics/db/queries.txt:695
msgid ""
"Same goes for underscores. Both percentage signs and underscores are handled "
"for you transparently."
msgstr ""

# d471e08ee8c54fdc8be9a05e9546b43c
#: ../../topics/db/queries.txt:701
msgid "Caching and QuerySets"
msgstr ""

# 3ba50be10e88425d92d3cdbc159cba25
#: ../../topics/db/queries.txt:703
msgid ""
"Each :class:`~django.db.models.query.QuerySet` contains a cache, to minimize "
"database access. It's important to understand how it works, in order to "
"write the most efficient code."
msgstr ""

# 53eb526224de406f82c85e22f54e6ee2
#: ../../topics/db/queries.txt:707
msgid ""
"In a newly created :class:`~django.db.models.query.QuerySet`, the cache is "
"empty. The first time a :class:`~django.db.models.query.QuerySet` is "
"evaluated -- and, hence, a database query happens -- Django saves the query "
"results in the :class:`~django.db.models.query.QuerySet`\\'s cache and "
"returns the results that have been explicitly requested (e.g., the next "
"element, if the :class:`~django.db.models.query.QuerySet` is being iterated "
"over). Subsequent evaluations of the :class:`~django.db.models.query."
"QuerySet` reuse the cached results."
msgstr ""

# d394b406d85d45b8a30f103b88b41058
#: ../../topics/db/queries.txt:716
msgid ""
"Keep this caching behavior in mind, because it may bite you if you don't use "
"your :class:`~django.db.models.query.QuerySet`\\s correctly. For example, "
"the following will create two :class:`~django.db.models.query.QuerySet`\\s, "
"evaluate them, and throw them away::"
msgstr ""

# 64b884dccabb4135b9c4db564e52716d
#: ../../topics/db/queries.txt:724
msgid ""
"That means the same database query will be executed twice, effectively "
"doubling your database load. Also, there's a possibility the two lists may "
"not include the same database records, because an ``Entry`` may have been "
"added or deleted in the split second between the two requests."
msgstr ""

# ff15b9e1ef40436c8837525b2802819e
#: ../../topics/db/queries.txt:729
msgid ""
"To avoid this problem, simply save the :class:`~django.db.models.query."
"QuerySet` and reuse it::"
msgstr ""

# 028c6f1b4ba542c5803c250cc87b7ff8
#: ../../topics/db/queries.txt:739
msgid "Complex lookups with Q objects"
msgstr ""

# 2000e7c7d2a7470b9ba2b4dab5173542
#: ../../topics/db/queries.txt:741
msgid ""
"Keyword argument queries -- in :meth:`~django.db.models.query.QuerySet."
"filter`, etc. -- are \"AND\"ed together. If you need to execute more complex "
"queries (for example, queries with ``OR`` statements), you can use ``Q`` "
"objects."
msgstr ""

# a904d91c5ac6479fb7f02c7b564a30ee
#: ../../topics/db/queries.txt:747
msgid ""
"A :class:`~django.db.models.Q` object (``django.db.models.Q``) is an object "
"used to encapsulate a collection of keyword arguments. These keyword "
"arguments are specified as in \"Field lookups\" above."
msgstr ""

# 2a7f69798b2a41778ed2e3147dc1ab49
#: ../../topics/db/queries.txt:751
msgid "For example, this ``Q`` object encapsulates a single ``LIKE`` query::"
msgstr ""

# 8f59cb908ae445fcb31868ff4bb62f5b
#: ../../topics/db/queries.txt:756
msgid ""
"``Q`` objects can be combined using the ``&`` and ``|`` operators. When an "
"operator is used on two ``Q`` objects, it yields a new ``Q`` object."
msgstr ""

# 9cf61186b13d47638e9e26f19c253127
#: ../../topics/db/queries.txt:759
msgid ""
"For example, this statement yields a single ``Q`` object that represents the "
"\"OR\" of two ``\"question__startswith\"`` queries::"
msgstr ""

# bae1c1f5bd9a4c1c8f0d3a1de3a97478
#: ../../topics/db/queries.txt:764
msgid "This is equivalent to the following SQL ``WHERE`` clause::"
msgstr ""

# f48c29a6103341c6991e831ece7ced37
#: ../../topics/db/queries.txt:768
msgid ""
"You can compose statements of arbitrary complexity by combining ``Q`` "
"objects with the ``&`` and ``|`` operators and use parenthetical grouping. "
"Also, ``Q`` objects can be negated using the ``~`` operator, allowing for "
"combined lookups that combine both a normal query and a negated (``NOT``) "
"query::"
msgstr ""

# 6871bb5fd0c34c5c974b3381dbe13566
#: ../../topics/db/queries.txt:775
msgid ""
"Each lookup function that takes keyword-arguments (e.g. :meth:`~django.db."
"models.query.QuerySet.filter`, :meth:`~django.db.models.query.QuerySet."
"exclude`, :meth:`~django.db.models.query.QuerySet.get`) can also be passed "
"one or more ``Q`` objects as positional (not-named) arguments. If you "
"provide multiple ``Q`` object arguments to a lookup function, the arguments "
"will be \"AND\"ed together. For example::"
msgstr ""

# d92f3c019db2493c89f79d5f11c543cc
#: ../../topics/db/queries.txt:788
msgid "... roughly translates into the SQL::"
msgstr ""

# a5c4be0990b6402e83082724ac0fa1e7
#: ../../topics/db/queries.txt:793
msgid ""
"Lookup functions can mix the use of ``Q`` objects and keyword arguments. All "
"arguments provided to a lookup function (be they keyword arguments or ``Q`` "
"objects) are \"AND\"ed together. However, if a ``Q`` object is provided, it "
"must precede the definition of any keyword arguments. For example::"
msgstr ""

# 7d41531219514d96a1af6787c81ab69d
#: ../../topics/db/queries.txt:802
msgid "... would be a valid query, equivalent to the previous example; but::"
msgstr ""

# 21fcef02caa841958082440a4d2d6f86
#: ../../topics/db/queries.txt:809
msgid "... would not be valid."
msgstr ""

# 4e5c06a66bbd4bae969b3959b2226af8
#: ../../topics/db/queries.txt:813
msgid ""
"The `OR lookups examples`_ in the Django unit tests show some possible uses "
"of ``Q``."
msgstr ""

# 34b2db1c12a14a1ab1b9b2c543a3330d
#: ../../topics/db/queries.txt:819
msgid "Comparing objects"
msgstr ""

# 457ea891cb474343951be14dd78c6704
#: ../../topics/db/queries.txt:821
msgid ""
"To compare two model instances, just use the standard Python comparison "
"operator, the double equals sign: ``==``. Behind the scenes, that compares "
"the primary key values of two models."
msgstr ""

# 6bbb00ae25dd4a5eb6992207deda320c
#: ../../topics/db/queries.txt:825
msgid ""
"Using the ``Entry`` example above, the following two statements are "
"equivalent::"
msgstr ""

# be9213fc84a64847ab91b3ae8c4581e3
#: ../../topics/db/queries.txt:830
msgid ""
"If a model's primary key isn't called ``id``, no problem. Comparisons will "
"always use the primary key, whatever it's called. For example, if a model's "
"primary key field is called ``name``, these two statements are equivalent::"
msgstr ""

# 2660e7af97f545ac9344ac2b2d307448
#: ../../topics/db/queries.txt:840
msgid "Deleting objects"
msgstr ""

# 4189903e1ab1438fbeb240bf71b766ca
#: ../../topics/db/queries.txt:842
msgid ""
"The delete method, conveniently, is named :meth:`~django.db.models.Model."
"delete`. This method immediately deletes the object and has no return value. "
"Example::"
msgstr ""

# 876a7e8c31bf4aadbc0a3e1cad536255
#: ../../topics/db/queries.txt:848
msgid ""
"You can also delete objects in bulk. Every :class:`~django.db.models.query."
"QuerySet` has a :meth:`~django.db.models.query.QuerySet.delete` method, "
"which deletes all members of that :class:`~django.db.models.query.QuerySet`."
msgstr ""

# 59674eeec9b444989378b264f2314253
#: ../../topics/db/queries.txt:853
msgid ""
"For example, this deletes all ``Entry`` objects with a ``pub_date`` year of "
"2005::"
msgstr ""

# a8a6cf2a093d479ea0d5138be220a8b3
#: ../../topics/db/queries.txt:858
msgid ""
"Keep in mind that this will, whenever possible, be executed purely in SQL, "
"and so the ``delete()`` methods of individual object instances will not "
"necessarily be called during the process. If you've provided a custom "
"``delete()`` method on a model class and want to ensure that it is called, "
"you will need to \"manually\" delete instances of that model (e.g., by "
"iterating over a :class:`~django.db.models.query.QuerySet` and calling "
"``delete()`` on each object individually) rather than using the bulk :meth:"
"`~django.db.models.query.QuerySet.delete` method of a :class:`~django.db."
"models.query.QuerySet`."
msgstr ""

# 7b242b57eaca40d19f732e44a22770f2
#: ../../topics/db/queries.txt:868
msgid ""
"When Django deletes an object, by default it emulates the behavior of the "
"SQL constraint ``ON DELETE CASCADE`` -- in other words, any objects which "
"had foreign keys pointing at the object to be deleted will be deleted along "
"with it. For example::"
msgstr ""

# e8a8180568b44f4c97fa8cb6bf2f3172
#: ../../topics/db/queries.txt:882
msgid ""
"Note that :meth:`~django.db.models.query.QuerySet.delete` is the only :class:"
"`~django.db.models.query.QuerySet` method that is not exposed on a :class:"
"`~django.db.models.Manager` itself. This is a safety mechanism to prevent "
"you from accidentally requesting ``Entry.objects.delete()``, and deleting "
"*all* the entries. If you *do* want to delete all the objects, then you have "
"to explicitly request a complete query set::"
msgstr ""

# 98a1a06db64a41028b3ca8ef08d82135
#: ../../topics/db/queries.txt:894
msgid "Copying model instances"
msgstr ""

# 16101a57f448486c80af146c416585a1
#: ../../topics/db/queries.txt:896
msgid ""
"Although there is no built-in method for copying model instances, it is "
"possible to easily create new instance with all fields' values copied. In "
"the simplest case, you can just set ``pk`` to ``None``. Using our blog "
"example::"
msgstr ""

# 1c9e636b98da4c288a39ffebb115927f
#: ../../topics/db/queries.txt:906
msgid ""
"Things get more complicated if you use inheritance. Consider a subclass of "
"``Blog``::"
msgstr ""

# 393e2e27363147fab0c4cf656bb87a0a
#: ../../topics/db/queries.txt:915
msgid ""
"Due to how inheritance works, you have to set both ``pk`` and ``id`` to "
"None::"
msgstr ""

# bde7f4f8a1d94bea9f60524dd377e5a3
#: ../../topics/db/queries.txt:921
msgid ""
"This process does not copy related objects. If you want to copy relations, "
"you have to write a little bit more code. In our example, ``Entry`` has a "
"many to many field to ``Author``::"
msgstr ""

# 329cb4a29c854a9c83b4688bb3372680
#: ../../topics/db/queries.txt:934
msgid "Updating multiple objects at once"
msgstr ""

# 37e937a071e34d90892fca0b884da314
#: ../../topics/db/queries.txt:936
msgid ""
"Sometimes you want to set a field to a particular value for all the objects "
"in a :class:`~django.db.models.query.QuerySet`. You can do this with the :"
"meth:`~django.db.models.query.QuerySet.update` method. For example::"
msgstr ""

# c83d70336d3a4281b3f838fe46cc5db3
#: ../../topics/db/queries.txt:943
msgid ""
"You can only set non-relation fields and :class:`~django.db.models."
"ForeignKey` fields using this method. To update a non-relation field, "
"provide the new value as a constant. To update :class:`~django.db.models."
"ForeignKey` fields, set the new value to be the new model instance you want "
"to point to. For example::"
msgstr ""

# 353df30a63ea46eeb084d3303c200e35
#: ../../topics/db/queries.txt:953
msgid ""
"The ``update()`` method is applied instantly and returns the number of rows "
"affected by the query. The only restriction on the :class:`~django.db.models."
"query.QuerySet` that is updated is that it can only access one database "
"table, the model's main table. You can filter based on related fields, but "
"you can only update columns in the model's main table. Example::"
msgstr ""

# affe87d2db034c119aa8daac68e3c0cf
#: ../../topics/db/queries.txt:965
msgid ""
"Be aware that the ``update()`` method is converted directly to an SQL "
"statement. It is a bulk operation for direct updates. It doesn't run any :"
"meth:`~django.db.models.Model.save` methods on your models, or emit the "
"``pre_save`` or ``post_save`` signals (which are a consequence of calling :"
"meth:`~django.db.models.Model.save`). If you want to save every item in a :"
"class:`~django.db.models.query.QuerySet` and make sure that the :meth:"
"`~django.db.models.Model.save` method is called on each instance, you don't "
"need any special function to handle that. Just loop over them and call :meth:"
"`~django.db.models.Model.save`::"
msgstr ""

# 148279375c2647eca5fe312b19ae16a4
#: ../../topics/db/queries.txt:978
msgid ""
"Calls to update can also use :ref:`F() objects <query-expressions>` to "
"update one field based on the value of another field in the model. This is "
"especially useful for incrementing counters based upon their current value. "
"For example, to increment the pingback count for every entry in the blog::"
msgstr ""

# f2385f022bb54aff94094a29d10de10b
#: ../../topics/db/queries.txt:985
msgid ""
"However, unlike ``F()`` objects in filter and exclude clauses, you can't "
"introduce joins when you use ``F()`` objects in an update -- you can only "
"reference fields local to the model being updated. If you attempt to "
"introduce a join with an ``F()`` object, a ``FieldError`` will be raised::"
msgstr ""

# 063be58074b44610b9d53d6f37d14cdf
#: ../../topics/db/queries.txt:996
msgid "Related objects"
msgstr ""

# 2d4c29269c4040e9a34394e0363c4ca9
#: ../../topics/db/queries.txt:998
msgid ""
"When you define a relationship in a model (i.e., a :class:`~django.db.models."
"ForeignKey`, :class:`~django.db.models.OneToOneField`, or :class:`~django.db."
"models.ManyToManyField`), instances of that model will have a convenient API "
"to access the related object(s)."
msgstr ""

# 2a8b5fe8f2634214a6df8cd8b1a33cd9
#: ../../topics/db/queries.txt:1004
msgid ""
"Using the models at the top of this page, for example, an ``Entry`` object "
"``e`` can get its associated ``Blog`` object by accessing the ``blog`` "
"attribute: ``e.blog``."
msgstr ""

# 2a553d46023648dea5d9bdba368280d3
#: ../../topics/db/queries.txt:1008
msgid ""
"(Behind the scenes, this functionality is implemented by Python "
"descriptors_. This shouldn't really matter to you, but we point it out here "
"for the curious.)"
msgstr ""

# eca2f327914646028e8c9fa447ea5686
#: ../../topics/db/queries.txt:1011
msgid ""
"Django also creates API accessors for the \"other\" side of the relationship "
"-- the link from the related model to the model that defines the "
"relationship. For example, a ``Blog`` object ``b`` has access to a list of "
"all related ``Entry`` objects via the ``entry_set`` attribute: ``b.entry_set."
"all()``."
msgstr ""

# 0bee09ebc5f14a9184ca0ea9bc94d79d
#: ../../topics/db/queries.txt:1016
msgid ""
"All examples in this section use the sample ``Blog``, ``Author`` and "
"``Entry`` models defined at the top of this page."
msgstr ""

# 06da680a47f64eb1a17b43ee8ddfaad4
#: ../../topics/db/queries.txt:1022
msgid "One-to-many relationships"
msgstr ""

# 73beba1a1c8d442590a9d886fb872d36
#: ../../topics/db/queries.txt:1025
msgid "Forward"
msgstr ""

# e3b0f7ddd60a44b788f9e9bf00d56141
#: ../../topics/db/queries.txt:1027
msgid ""
"If a model has a :class:`~django.db.models.ForeignKey`, instances of that "
"model will have access to the related (foreign) object via a simple "
"attribute of the model."
msgstr ""

# c71f8ae4e51a4ff597e825d6f37f4e36
#: ../../topics/db/queries.txt:1036
msgid ""
"You can get and set via a foreign-key attribute. As you may expect, changes "
"to the foreign key aren't saved to the database until you call :meth:"
"`~django.db.models.Model.save`. Example::"
msgstr ""

# 90acfdb4fe484623b3d32c63e6c85b31
#: ../../topics/db/queries.txt:1044
msgid ""
"If a :class:`~django.db.models.ForeignKey` field has ``null=True`` set (i."
"e., it allows ``NULL`` values), you can assign ``None`` to it. Example::"
msgstr ""

# c4efed60001047b0a1fc6e045eabb98a
#: ../../topics/db/queries.txt:1051
msgid ""
"Forward access to one-to-many relationships is cached the first time the "
"related object is accessed. Subsequent accesses to the foreign key on the "
"same object instance are cached. Example::"
msgstr ""

# 1ff4d125b3f14df1837478d5efb7ec60
#: ../../topics/db/queries.txt:1059
msgid ""
"Note that the :meth:`~django.db.models.query.QuerySet.select_related` :class:"
"`~django.db.models.query.QuerySet` method recursively prepopulates the cache "
"of all one-to-many relationships ahead of time. Example::"
msgstr ""

# 4ebd772a894542f6bda075ec7c775ab8
#: ../../topics/db/queries.txt:1070
msgid "Following relationships \"backward\""
msgstr ""

# e11decd5ea72438e822ebf26906bc4b6
#: ../../topics/db/queries.txt:1072
msgid ""
"If a model has a :class:`~django.db.models.ForeignKey`, instances of the "
"foreign-key model will have access to a :class:`~django.db.models.Manager` "
"that returns all instances of the first model. By default, this :class:"
"`~django.db.models.Manager` is named ``FOO_set``, where ``FOO`` is the "
"source model name, lowercased. This :class:`~django.db.models.Manager` "
"returns ``QuerySets``, which can be filtered and manipulated as described in "
"the \"Retrieving objects\" section above."
msgstr ""

# b2932698332f46f88e3a10b2085bdd08
#: ../../topics/db/queries.txt:1089
msgid ""
"You can override the ``FOO_set`` name by setting the ``related_name`` "
"parameter in the ``ForeignKey()`` definition. For example, if the ``Entry`` "
"model was altered to ``blog = ForeignKey(Blog, related_name='entries')``, "
"the above example code would look like this::"
msgstr ""

# 11059245185e43de8ab8fe00d7cea541
#: ../../topics/db/queries.txt:1101
msgid ""
"You cannot access a reverse :class:`~django.db.models.ForeignKey` :class:"
"`~django.db.models.Manager` from the class; it must be accessed from an "
"instance::"
msgstr ""

# 6bad955282fe4e708929b1572d03bdfe
#: ../../topics/db/queries.txt:1110
msgid ""
"In addition to the :class:`~django.db.models.query.QuerySet` methods defined "
"in \"Retrieving objects\" above, the :class:`~django.db.models.ForeignKey` :"
"class:`~django.db.models.Manager` has additional methods used to handle the "
"set of related objects. A synopsis of each is below, and complete details "
"can be found in the :doc:`related objects reference </ref/models/relations>`."
msgstr ""

# 90acb4ef191247ee8997cf06b963ef61
#: ../../topics/db/queries.txt:1117
msgid "Adds the specified model objects to the related object set."
msgstr ""

# f903d95f59c44e6cab3b41dd59fed368
#: ../../topics/db/queries.txt:1120
msgid ""
"Creates a new object, saves it and puts it in the related object set. "
"Returns the newly created object."
msgstr ""

# 6888b4363e61476b876cb2307ab3c0d0
#: ../../topics/db/queries.txt:1124
msgid "Removes the specified model objects from the related object set."
msgstr ""

# cad7a5660d7d4a99ac91758ebf347225
#: ../../topics/db/queries.txt:1127
msgid "Removes all objects from the related object set."
msgstr ""

# f500a47a8d7345d0929ab0739108890d
#: ../../topics/db/queries.txt:1129
msgid ""
"To assign the members of a related set in one fell swoop, just assign to it "
"from any iterable object. The iterable can contain object instances, or just "
"a list of primary key values. For example::"
msgstr ""

# 2cefa0126a2d444aa9a474addca770e8
#: ../../topics/db/queries.txt:1136
msgid ""
"In this example, ``e1`` and ``e2`` can be full Entry instances, or integer "
"primary key values."
msgstr ""

# be4204fecc294bd69b3e2085ab966cbd
#: ../../topics/db/queries.txt:1139
msgid ""
"If the ``clear()`` method is available, any pre-existing objects will be "
"removed from the ``entry_set`` before all objects in the iterable (in this "
"case, a list) are added to the set. If the ``clear()`` method is *not* "
"available, all objects in the iterable will be added without removing any "
"existing elements."
msgstr ""

# 1f40be8abf6d4b0fa132c7787efe2a06
#: ../../topics/db/queries.txt:1145
msgid ""
"Each \"reverse\" operation described in this section has an immediate effect "
"on the database. Every addition, creation and deletion is immediately and "
"automatically saved to the database."
msgstr ""

# edb5fc93b9024dd891684eb392a9e564
#: ../../topics/db/queries.txt:1154
msgid ""
"Both ends of a many-to-many relationship get automatic API access to the "
"other end. The API works just as a \"backward\" one-to-many relationship, "
"above."
msgstr ""

# 25cf5eae531143329696044ed6f813e3
#: ../../topics/db/queries.txt:1157
msgid ""
"The only difference is in the attribute naming: The model that defines the :"
"class:`~django.db.models.ManyToManyField` uses the attribute name of that "
"field itself, whereas the \"reverse\" model uses the lowercased model name "
"of the original model, plus ``'_set'`` (just like reverse one-to-many "
"relationships)."
msgstr ""

# 0e122e26e40a4a8c986e79ef87c35f8a
#: ../../topics/db/queries.txt:1162
msgid "An example makes this easier to understand::"
msgstr ""

# 33aabd0bc39d4be8af66efc67ff23c74
#: ../../topics/db/queries.txt:1172
msgid ""
"Like :class:`~django.db.models.ForeignKey`, :class:`~django.db.models."
"ManyToManyField` can specify ``related_name``. In the above example, if the :"
"class:`~django.db.models.ManyToManyField` in ``Entry`` had specified "
"``related_name='entries'``, then each ``Author`` instance would have an "
"``entries`` attribute instead of ``entry_set``."
msgstr ""

# 629fce538d884204b6210c8818ff5c18
#: ../../topics/db/queries.txt:1181
msgid ""
"One-to-one relationships are very similar to many-to-one relationships. If "
"you define a :class:`~django.db.models.OneToOneField` on your model, "
"instances of that model will have access to the related object via a simple "
"attribute of the model."
msgstr ""

# 4cb423acf4ff458985fc476fb51ec8c5
#: ../../topics/db/queries.txt:1195
msgid ""
"The difference comes in \"reverse\" queries. The related model in a one-to-"
"one relationship also has access to a :class:`~django.db.models.Manager` "
"object, but that :class:`~django.db.models.Manager` represents a single "
"object, rather than a collection of objects::"
msgstr ""

# 55217fdc18c7425c9cfa29c763aa1340
#: ../../topics/db/queries.txt:1203
msgid ""
"If no object has been assigned to this relationship, Django will raise a "
"``DoesNotExist`` exception."
msgstr ""

# 496632743c78471fa5ceaa69aca8a602
#: ../../topics/db/queries.txt:1206
msgid ""
"Instances can be assigned to the reverse relationship in the same way as you "
"would assign the forward relationship::"
msgstr ""

# bc8b97f3ec2b4a74ad7f46d83ad19211
#: ../../topics/db/queries.txt:1212
msgid "How are the backward relationships possible?"
msgstr ""

# b7344325ff714d7686c35d96d004dceb
#: ../../topics/db/queries.txt:1214
msgid ""
"Other object-relational mappers require you to define relationships on both "
"sides. The Django developers believe this is a violation of the DRY (Don't "
"Repeat Yourself) principle, so Django only requires you to define the "
"relationship on one end."
msgstr ""

# 1beb0045d55e440c990764755c1a11fa
#: ../../topics/db/queries.txt:1219
msgid ""
"But how is this possible, given that a model class doesn't know which other "
"model classes are related to it until those other model classes are loaded?"
msgstr ""

# ed65253d457b42f98a496667a56943ce
#: ../../topics/db/queries.txt:1222
msgid ""
"The answer lies in the :setting:`INSTALLED_APPS` setting. The first time any "
"model is loaded, Django iterates over every model in :setting:"
"`INSTALLED_APPS` and creates the backward relationships in memory as needed. "
"Essentially, one of the functions of :setting:`INSTALLED_APPS` is to tell "
"Django the entire model domain."
msgstr ""

# b09964832e7f4510aecf56cd4e23c015
#: ../../topics/db/queries.txt:1229
msgid "Queries over related objects"
msgstr ""

# d5af598002d8473198ea062fde5a697d
#: ../../topics/db/queries.txt:1231
msgid ""
"Queries involving related objects follow the same rules as queries involving "
"normal value fields. When specifying the value for a query to match, you may "
"use either an object instance itself, or the primary key value for the "
"object."
msgstr ""

# a9dd8ea809b1453f9902675d3c8f81b8
#: ../../topics/db/queries.txt:1235
msgid ""
"For example, if you have a Blog object ``b`` with ``id=5``, the following "
"three queries would be identical::"
msgstr ""

# a1ac4f5f06af49b3b700aa60774e06e0
#: ../../topics/db/queries.txt:1243
msgid "Falling back to raw SQL"
msgstr ""

# 5196c4acf5ec4248baeb1b6fccc8a56a
#: ../../topics/db/queries.txt:1245
msgid ""
"If you find yourself needing to write an SQL query that is too complex for "
"Django's database-mapper to handle, you can fall back on writing SQL by "
"hand. Django has a couple of options for writing raw SQL queries; see :doc:`/"
"topics/db/sql`."
msgstr ""

# 39a4a83b5a7b4cbfa1f83450c6d829c5
#: ../../topics/db/queries.txt:1250
msgid ""
"Finally, it's important to note that the Django database layer is merely an "
"interface to your database. You can access your database via other tools, "
"programming languages or database frameworks; there's nothing Django-"
"specific about your database."
msgstr ""

# 2048a273aca4497e9766f7c9a2e3788f
#: ../../topics/db/sql.txt:3
msgid "Performing raw SQL queries"
msgstr ""

# f2f4a6630bf84ad6a91fdaf955523cc3
#: ../../topics/db/sql.txt:7
msgid ""
"When the :doc:`model query APIs </topics/db/queries>` don't go far enough, "
"you can fall back to writing raw SQL. Django gives you two ways of "
"performing raw SQL queries: you can use :meth:`Manager.raw()` to `perform "
"raw queries and return model instances`__, or you can avoid the model layer "
"entirely and `execute custom SQL directly`__."
msgstr ""

# 72ff6332f1504198828d6743e1601929
#: ../../topics/db/sql.txt:19
msgid "Performing raw queries"
msgstr ""

# 995a11bac48d4783b83d739029d5beca
#: ../../topics/db/sql.txt:23
msgid ""
"The ``raw()`` manager method can be used to perform raw SQL queries that "
"return model instances:"
msgstr ""

# 7e9036ffa76b4e5d903c902219ebd2c5
#: ../../topics/db/sql.txt:28
msgid ""
"This method method takes a raw SQL query, executes it, and returns a :class:"
"`~django.db.models.query.RawQuerySet` instance. This :class:`~django.db."
"models.query.RawQuerySet` instance can be iterated over just like an normal "
"QuerySet to provide object instances."
msgstr ""

# 6d761f2e3d88461cbc628c795761a49e
#: ../../topics/db/sql.txt:33
msgid ""
"This is best illustrated with an example. Suppose you've got the following "
"model::"
msgstr ""

# 15455fb2255e4dd2835d9f3e195a8aaf
#: ../../topics/db/sql.txt:40
msgid "You could then execute custom SQL like so::"
msgstr ""

# f5a854cc53854c22b13ff14db496c54d
#: ../../topics/db/sql.txt:47
msgid ""
"Of course, this example isn't very exciting -- it's exactly the same as "
"running ``Person.objects.all()``. However, ``raw()`` has a bunch of other "
"options that make it very powerful."
msgstr ""

# 71c85b4b52fc48448880105021a718cf
#: ../../topics/db/sql.txt:53
msgid "Where'd the name of the ``Person`` table come from in that example?"
msgstr ""

# 382ba772e7f643428967ecc1bb5f9e7e
#: ../../topics/db/sql.txt:55
msgid ""
"By default, Django figures out a database table name by joining the model's "
"\"app label\" -- the name you used in ``manage.py startapp`` -- to the "
"model's class name, with an underscore between them. In the example we've "
"assumed that the ``Person`` model lives in an app named ``myapp``, so its "
"table would be ``myapp_person``."
msgstr ""

# 5e0ac6a4b4bc4dcb9d0d3351598c749b
#: ../../topics/db/sql.txt:61
msgid ""
"For more details check out the documentation for the :attr:`~Options."
"db_table` option, which also lets you manually set the database table name."
msgstr ""

# 3ca88a045a7f434fb2165b5a5f09becf
#: ../../topics/db/sql.txt:67
msgid ""
"No checking is done on the SQL statement that is passed in to ``.raw()``. "
"Django expects that the statement will return a set of rows from the "
"database, but does nothing to enforce that. If the query does not return "
"rows, a (possibly cryptic) error will result."
msgstr ""

# 39006d243ae144c09c3b51a24f6ac72b
#: ../../topics/db/sql.txt:73
msgid "Mapping query fields to model fields"
msgstr ""

# 05e3c22da6c94d8e9a05aad8637060d3
#: ../../topics/db/sql.txt:75
msgid ""
"``raw()`` automatically maps fields in the query to fields on the model."
msgstr ""

# 9f936a8798d842d683465b2dfd145738
#: ../../topics/db/sql.txt:77
msgid ""
"The order of fields in your query doesn't matter. In other words, both of "
"the following queries work identically::"
msgstr ""

# 0f4da5ee29d84306831912d88777227a
#: ../../topics/db/sql.txt:85
msgid ""
"Matching is done by name. This means that you can use SQL's ``AS`` clauses "
"to map fields in the query to model fields. So if you had some other table "
"that had ``Person`` data in it, you could easily map it into ``Person`` "
"instances::"
msgstr ""

# ff9f1d97274e4fbfb461482be8e4e9d8
#: ../../topics/db/sql.txt:95
msgid ""
"As long as the names match, the model instances will be created correctly."
msgstr ""

# 4982a562d0fb47b598846b393b6c360d
#: ../../topics/db/sql.txt:97
msgid ""
"Alternatively, you can map fields in the query to model fields using the "
"``translations`` argument to ``raw()``. This is a dictionary mapping names "
"of fields in the query to names of fields on the model. For example, the "
"above query could also be written::"
msgstr ""

# 109d58c1cb79479785a01ccfb876bfaf
#: ../../topics/db/sql.txt:106
msgid "Index lookups"
msgstr ""

# 7fbbf01d41b24140b38316bd241d934f
#: ../../topics/db/sql.txt:108
msgid ""
"``raw()`` supports indexing, so if you need only the first result you can "
"write::"
msgstr ""

# aa600bdcbe9c4ca795387a41f4f03a63
#: ../../topics/db/sql.txt:113
msgid ""
"However, the indexing and slicing are not performed at the database level. "
"If you have a big amount of ``Person`` objects in your database, it is more "
"efficient to limit the query at the SQL level::"
msgstr ""

# 0c6a01dd097b4f35a7421361cd4a03a2
#: ../../topics/db/sql.txt:120
msgid "Deferring model fields"
msgstr ""

# c754baed5a3c4d64af7480180f2d2421
#: ../../topics/db/sql.txt:122
msgid "Fields may also be left out::"
msgstr ""

# 7dc82cdd9e174a6ab1ee8e81966739d2
#: ../../topics/db/sql.txt:126
msgid ""
"The ``Person`` objects returned by this query will be deferred model "
"instances (see :meth:`~django.db.models.query.QuerySet.defer()`). This means "
"that the fields that are omitted from the query will be loaded on demand. "
"For example::"
msgstr ""

# 3bee50f332914765bf78c0341011edc4
#: ../../topics/db/sql.txt:137
msgid ""
"From outward appearances, this looks like the query has retrieved both the "
"first name and last name. However, this example actually issued 3 queries. "
"Only the first names were retrieved by the raw() query -- the last names "
"were both retrieved on demand when they were printed."
msgstr ""

# f0cd0b42e7ec420285f72c4786f1cbe5
#: ../../topics/db/sql.txt:142
msgid ""
"There is only one field that you can't leave out - the primary key field. "
"Django uses the primary key to identify model instances, so it must always "
"be included in a raw query. An ``InvalidQuery`` exception will be raised if "
"you forget to include the primary key."
msgstr ""

# 3ec43dcb785d48d8934cc725d2412fa5
#: ../../topics/db/sql.txt:148
msgid "Adding annotations"
msgstr ""

# cdf6c7e2c32e41cabcf93ecd729f8953
#: ../../topics/db/sql.txt:150
msgid ""
"You can also execute queries containing fields that aren't defined on the "
"model. For example, we could use `PostgreSQL's age() function`__ to get a "
"list of people with their ages calculated by the database::"
msgstr ""

# 515a8301a47e4d2ca54359298ba0b70e
#: ../../topics/db/sql.txt:164
msgid "Passing parameters into ``raw()``"
msgstr ""

# 3b844d54bdec4f27b52769965a2f81f4
#: ../../topics/db/sql.txt:166
msgid ""
"If you need to perform parameterized queries, you can use the ``params`` "
"argument to ``raw()``::"
msgstr ""

# ae3cf0824c2d4299a6b8a3ef851046b2
#: ../../topics/db/sql.txt:172
msgid ""
"``params`` is a list of parameters. You'll use ``%s`` placeholders in the "
"query string (regardless of your database engine); they'll be replaced with "
"parameters from the ``params`` list."
msgstr ""

# 9718cf16ba174627919c97e627f53a6f
#: ../../topics/db/sql.txt:178
msgid "**Do not use string formatting on raw queries!**"
msgstr ""

# 960c63b71a384e6d98b3bd191a53922f
#: ../../topics/db/sql.txt:180
msgid "It's tempting to write the above query as::"
msgstr ""

# 621e92578bcf41f1a12cc207d488309b
#: ../../topics/db/sql.txt:185
msgid "**Don't.**"
msgstr ""

# 64c5713ff9e04c2caec9943d24afba93
#: ../../topics/db/sql.txt:187
msgid ""
"Using the ``params`` list completely protects you from `SQL injection "
"attacks`__, a common exploit where attackers inject arbitrary SQL into your "
"database. If you use string interpolation, sooner or later you'll fall "
"victim to SQL injection. As long as you remember to always use the "
"``params`` list you'll be protected."
msgstr ""

# 28430097e88649f6b54af5a50dad6449
#: ../../topics/db/sql.txt:198
msgid "Executing custom SQL directly"
msgstr ""

# 39510aec53354029acc5eb51b58080a1
#: ../../topics/db/sql.txt:200
msgid ""
"Sometimes even :meth:`Manager.raw` isn't quite enough: you might need to "
"perform queries that don't map cleanly to models, or directly execute "
"``UPDATE``, ``INSERT``, or ``DELETE`` queries."
msgstr ""

# 225b15755fcf4d85937f95054c751198
#: ../../topics/db/sql.txt:204
msgid ""
"In these cases, you can always access the database directly, routing around "
"the model layer entirely."
msgstr ""

# 147fcd851b5848ebb2825fdcda72a584
#: ../../topics/db/sql.txt:207
msgid ""
"The object ``django.db.connection`` represents the default database "
"connection, and ``django.db.transaction`` represents the default database "
"transaction. To use the database connection, call ``connection.cursor()`` to "
"get a cursor object. Then, call ``cursor.execute(sql, [params])`` to execute "
"the SQL and ``cursor.fetchone()`` or ``cursor.fetchall()`` to return the "
"resulting rows. After performing a data changing operation, you should then "
"call ``transaction.commit_unless_managed()`` to ensure your changes are "
"committed to the database. If your query is purely a data retrieval "
"operation, no commit is required. For example::"
msgstr ""

# 52439bd47d094f2fbbb2846188b0c811
#: ../../topics/db/sql.txt:243
msgid ""
"By default, the Python DB API will return results without their field names, "
"which means you end up with a ``list`` of values, rather than a ``dict``. At "
"a small performance cost, you can return results as a ``dict`` by using "
"something like this::"
msgstr ""

# de8c4844290e4b3dbae6c2579a5559a1
#: ../../topics/db/sql.txt:256
msgid "Here is an example of the difference between the two::"
msgstr ""

# e920285562d64ce687d3bfa119cff7ee
#: ../../topics/db/sql.txt:270
msgid "Transactions and raw SQL"
msgstr ""

# 0a50efc9f0cb4e919b99a7b709d512c6
#: ../../topics/db/sql.txt:272
msgid ""
"When you make a raw SQL call, Django will automatically mark the current "
"transaction as dirty. You must then ensure that the transaction containing "
"those calls is closed correctly. See :ref:`the notes on the requirements of "
"Django's transaction handling <topics-db-transactions-requirements>` for "
"more details."
msgstr ""

# c07e584a81644f7ebd452fbed985c365
#: ../../topics/db/sql.txt:280
msgid ""
"Prior to Django 1.3, it was necessary to manually mark a transaction as "
"dirty using ``transaction.set_dirty()`` when using raw SQL calls."
msgstr ""

# d61d442083a84cb69931c3e8977333c3
#: ../../topics/db/sql.txt:284
msgid "Connections and cursors"
msgstr ""

# 1f4bfff50353481088a3f49f94837431
#: ../../topics/db/sql.txt:286
msgid ""
"``connection`` and ``cursor`` mostly implement the standard Python DB-API "
"described in :pep:`249` (except when it comes to :doc:`transaction handling "
"</topics/db/transactions>`). If you're not familiar with the Python DB-API, "
"note that the SQL statement in ``cursor.execute()`` uses placeholders, ``\"%s"
"\"``, rather than adding parameters directly within the SQL. If you use this "
"technique, the underlying database library will automatically add quotes and "
"escaping to your parameter(s) as necessary. (Also note that Django expects "
"the ``\"%s\"`` placeholder, *not* the ``\"?\"`` placeholder, which is used "
"by the SQLite Python bindings. This is for the sake of consistency and "
"sanity.)"
msgstr ""

# c40a8da49cb546e38c31048ddd88c626
#: ../../topics/db/tablespaces.txt:3
msgid "Tablespaces"
msgstr ""

# 9709665b1c034f8d95b6e50e8b8929e0
#: ../../topics/db/tablespaces.txt:5
msgid ""
"A common paradigm for optimizing performance in database systems is the use "
"of `tablespaces`_ to organize disk layout."
msgstr ""

# 6de58a51148f427c81837474e559274f
#: ../../topics/db/tablespaces.txt:11
msgid ""
"Django does not create the tablespaces for you. Please refer to your "
"database engine's documentation for details on creating and managing "
"tablespaces."
msgstr ""

# a282fe34e0364e6ca64cfc3f307538a6
#: ../../topics/db/tablespaces.txt:17
msgid "Declaring tablespaces for tables"
msgstr ""

# 923179721e384a1993301510a0d96499
#: ../../topics/db/tablespaces.txt:19
msgid ""
"A tablespace can be specified for the table generated by a model by "
"supplying the :attr:`~django.db.models.Options.db_tablespace` option inside "
"the model's ``class Meta``. This option also affects tables automatically "
"created for :class:`~django.db.models.ManyToManyField`\\ s in the model."
msgstr ""

# f2b5143d0bd04428b37b8fdd9bf732b7
#: ../../topics/db/tablespaces.txt:24
msgid ""
"You can use the :setting:`DEFAULT_TABLESPACE` setting to specify a default "
"value for :attr:`~django.db.models.Options.db_tablespace`. This is useful "
"for setting a tablespace for the built-in Django apps and other applications "
"whose code you cannot control."
msgstr ""

# 0ef3ec8e06ec4a3882f2bc93292148f1
#: ../../topics/db/tablespaces.txt:30
msgid "Declaring tablespaces for indexes"
msgstr ""

# c6281cb4a3db4b13809715f0658a04df
#: ../../topics/db/tablespaces.txt:32
msgid ""
"You can pass the :attr:`~django.db.models.Field.db_tablespace` option to a "
"``Field`` constructor to specify an alternate tablespace for the ``Field``'s "
"column index. If no index would be created for the column, the option is "
"ignored."
msgstr ""

# 5e9e0420992a49dd8b976541ba29de1f
#: ../../topics/db/tablespaces.txt:37
msgid ""
"You can use the :setting:`DEFAULT_INDEX_TABLESPACE` setting to specify a "
"default value for :attr:`~django.db.models.Field.db_tablespace`."
msgstr ""

# 3e258cc0929c47bdbcc88ea627fa3b90
#: ../../topics/db/tablespaces.txt:40
msgid ""
"If :attr:`~django.db.models.Field.db_tablespace` isn't specified and you "
"didn't set :setting:`DEFAULT_INDEX_TABLESPACE`, the index is created in the "
"same tablespace as the tables."
msgstr ""

# 90ddd2f60dbe4e439d92be784f7106f6
#: ../../topics/db/tablespaces.txt:57
msgid ""
"In this example, the tables generated by the ``TablespaceExample`` model (i."
"e. the model table and the many-to-many table) would be stored in the "
"``tables`` tablespace. The index for the name field and the indexes on the "
"many-to-many table would be stored in the ``indexes`` tablespace. The "
"``data`` field would also generate an index, but no tablespace for it is "
"specified, so it would be stored in the model tablespace ``tables`` by "
"default."
msgstr ""

# f776b5f33d9a434381ad2d647e6fd8d0
#: ../../topics/db/tablespaces.txt:65
msgid "Database support"
msgstr ""

# 11cf892770484c528ef886d8fea5be71
#: ../../topics/db/tablespaces.txt:67
msgid "PostgreSQL and Oracle support tablespaces. SQLite and MySQL don't."
msgstr ""

# 9071c05cbe5248a8960db45d55097206
#: ../../topics/db/tablespaces.txt:69
msgid ""
"When you use a backend that lacks support for tablespaces, Django ignores "
"all tablespace-related options."
msgstr ""

# 83d878d99a1c451c96ad979459b35728
#: ../../topics/db/transactions.txt:3
msgid "Managing database transactions"
msgstr ""

# e826dfcc0f6440669bb832475c120725
#: ../../topics/db/transactions.txt:7
msgid ""
"Django gives you a few ways to control how database transactions are "
"managed, if you're using a database that supports transactions."
msgstr ""

# fa3db734706a422f826d611603426915
#: ../../topics/db/transactions.txt:11
msgid "Django's default transaction behavior"
msgstr ""

# 103753243e384b508844759a5b0ea5b8
#: ../../topics/db/transactions.txt:13
msgid ""
"Django's default behavior is to run with an open transaction which it "
"commits automatically when any built-in, data-altering model function is "
"called. For example, if you call ``model.save()`` or ``model.delete()``, the "
"change will be committed immediately."
msgstr ""

# 3a4f233dba4041a0a9d88edc4968a395
#: ../../topics/db/transactions.txt:18
msgid ""
"This is much like the auto-commit setting for most databases. As soon as you "
"perform an action that needs to write to the database, Django produces the "
"``INSERT``/``UPDATE``/``DELETE`` statements and then does the ``COMMIT``. "
"There's no implicit ``ROLLBACK``."
msgstr ""

# be19b373e52340ef9dbed79b6ef14f30
#: ../../topics/db/transactions.txt:24
msgid "Tying transactions to HTTP requests"
msgstr ""

# a3c0c201445342a99e3fca2cffb7116f
#: ../../topics/db/transactions.txt:26
msgid ""
"The recommended way to handle transactions in Web requests is to tie them to "
"the request and response phases via Django's ``TransactionMiddleware``."
msgstr ""

# 8ab3249d1e1747a9a908cb5b6c7e7dce
#: ../../topics/db/transactions.txt:29
msgid ""
"It works like this: When a request starts, Django starts a transaction. If "
"the response is produced without problems, Django commits any pending "
"transactions. If the view function produces an exception, Django rolls back "
"any pending transactions."
msgstr ""

# bf7ad913fa924b3190eb6595a48d5c62
#: ../../topics/db/transactions.txt:34
msgid ""
"To activate this feature, just add the ``TransactionMiddleware`` middleware "
"to your :setting:`MIDDLEWARE_CLASSES` setting::"
msgstr ""

# ba9586ea35e04208a2a14729e9a0a860
#: ../../topics/db/transactions.txt:45
msgid ""
"The order is quite important. The transaction middleware applies not only to "
"view functions, but also for all middleware modules that come after it. So "
"if you use the session middleware after the transaction middleware, session "
"creation will be part of the transaction."
msgstr ""

# d9dc754170a241a6a111f5d904b51276
#: ../../topics/db/transactions.txt:50
msgid ""
"The various cache middlewares are an exception: :class:`~django.middleware."
"cache.CacheMiddleware`, :class:`~django.middleware.cache."
"UpdateCacheMiddleware`, and :class:`~django.middleware.cache."
"FetchFromCacheMiddleware` are never affected. Even when using database "
"caching, Django's cache backend uses its own database cursor (which is "
"mapped to its own database connection internally)."
msgstr ""

# 448c979d4b084b97af283043e7901b74
#: ../../topics/db/transactions.txt:60
msgid "Controlling transaction management in views"
msgstr ""

# ca820c2c4e724644929283b9727c3301
#: ../../topics/db/transactions.txt:65
msgid ""
"For most people, implicit request-based transactions work wonderfully. "
"However, if you need more fine-grained control over how transactions are "
"managed, you can use a set of functions in ``django.db.transaction`` to "
"control transactions on a per-function or per-code-block basis."
msgstr ""

# e0fd701a6b364372b7f4e5e26de5f95c
#: ../../topics/db/transactions.txt:70
msgid ""
"These functions, described in detail below, can be used in two different "
"ways:"
msgstr ""

# 5752313b326147f0a4eaba575dd3c8e7
#: ../../topics/db/transactions.txt:72
msgid "As a decorator_ on a particular function. For example::"
msgstr ""

# 20b54dbcbc0a41cfb7d484a4e7f0dfbf
#: ../../topics/db/transactions.txt:82
msgid "As a `context manager`_ around a particular block of code::"
msgstr ""

# af880124deea4eb691ef103b49eb84ea
#: ../../topics/db/transactions.txt:96
msgid ""
"Both techniques work with all supported version of Python. However, in "
"Python 2.5, you must add ``from __future__ import with_statement`` at the "
"beginning of your module if you are using the ``with`` statement."
msgstr ""

# ee6148e1114f4e39859ffef4c2d0c669
#: ../../topics/db/transactions.txt:103
msgid ""
"For maximum compatibility, all of the examples below show transactions using "
"the decorator syntax, but all of the follow functions may be used as context "
"managers, too."
msgstr ""

# 79e4bb26525e477cbc3b5a7a063843ce
#: ../../topics/db/transactions.txt:109
msgid ""
"Although the examples below use view functions as examples, these decorators "
"and context managers can be used anywhere in your code that you need to deal "
"with transactions."
msgstr ""

# 8d9e2cd0cc1244b292f9077e77818b00
#: ../../topics/db/transactions.txt:117
msgid ""
"Use the ``autocommit`` decorator to switch a view function to Django's "
"default commit behavior, regardless of the global transaction setting."
msgstr ""

# a2af5eb41438423eb8fb31c73c866e41
#: ../../topics/db/transactions.txt:132
msgid ""
"Within ``viewfunc()``, transactions will be committed as soon as you call "
"``model.save()``, ``model.delete()``, or any other function that writes to "
"the database.  ``viewfunc2()`` will have this same behavior, but for the ``"
"\"my_other_database\"`` connection."
msgstr ""

# 6e93ace0d3f840ce89ad832e5d452004
#: ../../topics/db/transactions.txt:139
msgid ""
"Use the ``commit_on_success`` decorator to use a single transaction for all "
"the work done in a function::"
msgstr ""

# 873a6ac841e64cdcbdb1e025c777aaa7
#: ../../topics/db/transactions.txt:152
msgid ""
"If the function returns successfully, then Django will commit all work done "
"within the function at that point. If the function raises an exception, "
"though, Django will roll back the transaction."
msgstr ""

# 5c89e16906014835b36cef927653f32a
#: ../../topics/db/transactions.txt:158
msgid ""
"Use the ``commit_manually`` decorator if you need full control over "
"transactions. It tells Django you'll be managing the transaction on your own."
msgstr ""

# 959822a7233847e1a8dde9fb233c39b6
#: ../../topics/db/transactions.txt:162
msgid ""
"If your view changes data and doesn't ``commit()`` or ``rollback()``, Django "
"will raise a ``TransactionManagementError`` exception."
msgstr ""

# 715b676806034c87a6e42b726301f9f4
#: ../../topics/db/transactions.txt:165
msgid "Manual transaction management looks like this::"
msgstr ""

# a9b1ca1c5e8d4e64af4899c92545880c
#: ../../topics/db/transactions.txt:191
msgid "Requirements for transaction handling"
msgstr ""

# ee1b59ca8dfb421abc0055c5fcac8df9
#: ../../topics/db/transactions.txt:195
msgid ""
"Django requires that every transaction that is opened is closed before the "
"completion of a request. If you are using :func:`autocommit` (the default "
"commit mode) or :func:`commit_on_success`, this will be done for you "
"automatically. However, if you are manually managing transactions (using "
"the :func:`commit_manually` decorator), you must ensure that the transaction "
"is either committed or rolled back before a request is completed."
msgstr ""

# 0fc374d928d045568e4c2fd9ad3f8e70
#: ../../topics/db/transactions.txt:203
msgid ""
"This applies to all database operations, not just write operations. Even if "
"your transaction only reads from the database, the transaction must be "
"committed or rolled back before you complete a request."
msgstr ""

# 197eaf4d14bc4e5db75576d57258e3f8
#: ../../topics/db/transactions.txt:208
msgid "How to globally deactivate transaction management"
msgstr ""

# d3a98377564a40788baf948ed06ae2dd
#: ../../topics/db/transactions.txt:210
msgid ""
"Control freaks can totally disable all transaction management by setting "
"``DISABLE_TRANSACTION_MANAGEMENT`` to ``True`` in the Django settings file."
msgstr ""

# 2a094a9b46b749279e021782c64e2464
#: ../../topics/db/transactions.txt:213
msgid ""
"If you do this, Django won't provide any automatic transaction management "
"whatsoever. Middleware will no longer implicitly commit transactions, and "
"you'll need to roll management yourself. This even requires you to commit "
"changes done by middleware somewhere else."
msgstr ""

# 1acb45dcf51345b0a0d1235ec060d427
#: ../../topics/db/transactions.txt:218
msgid ""
"Thus, this is best used in situations where you want to run your own "
"transaction-controlling middleware or do something really strange. In almost "
"all situations, you'll be better off using the default behavior, or the "
"transaction middleware, and only modify selected functions as needed."
msgstr ""

# df6dd014704f46aab34de1f3d8ef4933
#: ../../topics/db/transactions.txt:226
msgid "Savepoints"
msgstr ""

# e904f843e3bf4d5f9b5d9d75a6a2070c
#: ../../topics/db/transactions.txt:228
msgid ""
"A savepoint is a marker within a transaction that enables you to roll back "
"part of a transaction, rather than the full transaction. Savepoints are "
"available with the PostgreSQL 8, Oracle and MySQL (version 5.0.3 and newer, "
"when using the InnoDB storage engine) backends. Other backends provide the "
"savepoint functions, but they're empty operations -- they don't actually do "
"anything."
msgstr ""

# b5951b2a97994de593ec40baf4ee2b93
#: ../../topics/db/transactions.txt:237
msgid ""
"Savepoints aren't especially useful if you are using the default "
"``autocommit`` behavior of Django. However, if you are using "
"``commit_on_success`` or ``commit_manually``, each open transaction will "
"build up a series of database operations, awaiting a commit or rollback. If "
"you issue a rollback, the entire transaction is rolled back. Savepoints "
"provide the ability to perform a fine-grained rollback, rather than the full "
"rollback that would be performed by ``transaction.rollback()``."
msgstr ""

# 88a0e022b52b48859e22f7d2eff03192
#: ../../topics/db/transactions.txt:245
msgid ""
"Each of these functions takes a ``using`` argument which should be the name "
"of a database for which the behavior applies.  If no ``using`` argument is "
"provided then the ``\"default\"`` database is used."
msgstr ""

# 19395dc4831f4c76a33e8c41e020f534
#: ../../topics/db/transactions.txt:249
msgid "Savepoints are controlled by three methods on the transaction object:"
msgstr ""

# f20e2340767f44cda167be1210641a88
#: ../../topics/db/transactions.txt:253
msgid ""
"Creates a new savepoint. This marks a point in the transaction that is known "
"to be in a \"good\" state."
msgstr ""

# 65eae49ef0d5415aa44a6a0831b50249
#: ../../topics/db/transactions.txt:256
msgid "Returns the savepoint ID (sid)."
msgstr ""

# 2330cc28ccae4409b7514259b18d8f5a
#: ../../topics/db/transactions.txt:260
msgid ""
"Updates the savepoint to include any operations that have been performed "
"since the savepoint was created, or since the last commit."
msgstr ""

# 96c2df7da5764b7db4de79264388fb7e
#: ../../topics/db/transactions.txt:265
msgid ""
"Rolls the transaction back to the last point at which the savepoint was "
"committed."
msgstr ""

# e05f9c67cf2245f6983d7a1593553903
#: ../../topics/db/transactions.txt:268
msgid "The following example demonstrates the use of savepoints::"
msgstr ""

# 3e223f69c7d74d52b0444dca902cb040
#: ../../topics/db/transactions.txt:292
msgid "Transactions in MySQL"
msgstr ""

# ca0121510c124b74971d5ddee9334467
#: ../../topics/db/transactions.txt:294
msgid ""
"If you're using MySQL, your tables may or may not support transactions; it "
"depends on your MySQL version and the table types you're using. (By \"table "
"types,\" we mean something like \"InnoDB\" or \"MyISAM\".) MySQL transaction "
"peculiarities are outside the scope of this article, but the MySQL site has "
"`information on MySQL transactions`_."
msgstr ""

# b1c3840ebb8144e58691cd4b4d539f5c
#: ../../topics/db/transactions.txt:300
msgid ""
"If your MySQL setup does *not* support transactions, then Django will "
"function in auto-commit mode: Statements will be executed and committed as "
"soon as they're called. If your MySQL setup *does* support transactions, "
"Django will handle transactions as explained in this document."
msgstr ""

# c3bb4e61e5ae436da5a66f1af5688e80
#: ../../topics/db/transactions.txt:308
msgid "Handling exceptions within PostgreSQL transactions"
msgstr ""

# 6769ba1943a2457db9d116c932d007b3
#: ../../topics/db/transactions.txt:310
msgid ""
"When a call to a PostgreSQL cursor raises an exception (typically "
"``IntegrityError``), all subsequent SQL in the same transaction will fail "
"with the error \"current transaction is aborted, queries ignored until end "
"of transaction block\". Whilst simple use of ``save()`` is unlikely to raise "
"an exception in PostgreSQL, there are more advanced usage patterns which "
"might, such as saving objects with unique fields, saving using the "
"force_insert/force_update flag, or invoking custom SQL."
msgstr ""

# d50789b9a5e64bc9947338790bbfe2d7
#: ../../topics/db/transactions.txt:318
msgid "There are several ways to recover from this sort of error."
msgstr ""

# 55486f095dbc41a994dac824935f8405
#: ../../topics/db/transactions.txt:321
msgid "Transaction rollback"
msgstr ""

# aaf5ee4e7f7c42a29bafad164b740fc2
#: ../../topics/db/transactions.txt:323
msgid "The first option is to roll back the entire transaction. For example::"
msgstr ""

# 81bc5e10ab9b4a58a9fd837a5108f36e
#: ../../topics/db/transactions.txt:332
msgid ""
"Calling ``transaction.rollback()`` rolls back the entire transaction. Any "
"uncommitted database operations will be lost. In this example, the changes "
"made by ``a.save()`` would be lost, even though that operation raised no "
"error itself."
msgstr ""

# 9620c3778cf94217a7a7f5ce096c7136
#: ../../topics/db/transactions.txt:338
msgid "Savepoint rollback"
msgstr ""

# 2abdb144ecf743c5977bfc152a371cbe
#: ../../topics/db/transactions.txt:340
msgid ""
"If you are using PostgreSQL 8 or later, you can use :ref:`savepoints <topics-"
"db-transactions-savepoints>` to control the extent of a rollback. Before "
"performing a database operation that could fail, you can set or update the "
"savepoint; that way, if the operation fails, you can roll back the single "
"offending operation, rather than the entire transaction. For example::"
msgstr ""

# 22a00ed35e304bb997b016550846644b
#: ../../topics/db/transactions.txt:355
msgid ""
"In this example, ``a.save()`` will not be undone in the case where ``b.save()"
"`` raises an exception."
msgstr ""

# aa3bb6e317a241e383cca183dc5c96ae
#: ../../topics/db/transactions.txt:359
msgid "Database-level autocommit"
msgstr ""

# ae38345fb09141da911b0dc85adc9892
#: ../../topics/db/transactions.txt:361
msgid ""
"With PostgreSQL 8.2 or later, there is an advanced option to run PostgreSQL "
"with :doc:`database-level autocommit </ref/databases>`. If you use this "
"option, there is no constantly open transaction, so it is always possible to "
"continue after catching an exception. For example::"
msgstr ""

# 8f834e2d22a54d3391df8e8848389e55
#: ../../topics/db/transactions.txt:375
msgid ""
"This is not the same as the :ref:`autocommit decorator <topics-db-"
"transactions-autocommit>`. When using database level autocommit there is no "
"database transaction at all. The ``autocommit`` decorator still uses "
"transactions, automatically committing each transaction when a database "
"modifying operation occurs."
msgstr ""

# 7626179564da4f7eac0b1cc42a043cbf
#: ../../topics/email.txt:3
msgid "Sending email"
msgstr ""

# d0b66aa6fc334a3da9650162a992dc50
#: ../../topics/email.txt:8
msgid ""
"Although Python makes sending email relatively easy via the :mod:`smtplib` "
"module, Django provides a couple of light wrappers over it. These wrappers "
"are provided to make sending email extra quick, to make it easy to test "
"email sending during development, and to provide support for platforms that "
"can't use SMTP."
msgstr ""

# c784cc550967449d860084e2e3bb1c93
#: ../../topics/email.txt:14
msgid "The code lives in the ``django.core.mail`` module."
msgstr ""

# c8d3e780cd954aacbdb34901d9a1c019
#: ../../topics/email.txt:19
msgid "In two lines::"
msgstr ""

# 41312ed7c2aa47efab84f58686b9c30c
#: ../../topics/email.txt:26
msgid ""
"Mail is sent using the SMTP host and port specified in the :setting:"
"`EMAIL_HOST` and :setting:`EMAIL_PORT` settings. The :setting:"
"`EMAIL_HOST_USER` and :setting:`EMAIL_HOST_PASSWORD` settings, if set, are "
"used to authenticate to the SMTP server, and the :setting:`EMAIL_USE_TLS` "
"setting controls whether a secure connection is used."
msgstr ""

# 7ac4e8c253384eb2bb235169626158a4
#: ../../topics/email.txt:34
msgid ""
"The character set of email sent with ``django.core.mail`` will be set to the "
"value of your :setting:`DEFAULT_CHARSET` setting."
msgstr ""

# 5087c63fd6254526a26f8af55b4a79ab
#: ../../topics/email.txt:38
msgid "send_mail()"
msgstr ""

# 95cbb1e295bc4d08b0f09ae46e3407e8
#: ../../topics/email.txt:42
msgid ""
"The simplest way to send email is using ``django.core.mail.send_mail()``."
msgstr ""

# 2d1ac73d80f14896ade8af66bd2dc8f1
#: ../../topics/email.txt:45
msgid ""
"The ``subject``, ``message``, ``from_email`` and ``recipient_list`` "
"parameters are required."
msgstr ""

# df1c477ffb2a48298c303132f43eb022
#: ../../topics/email.txt:48
msgid "``subject``: A string."
msgstr ""

# b8ed91134f1a4ffebb83fa8823be98ab
#: ../../topics/email.txt:49
msgid "``message``: A string."
msgstr ""

# 0eb20a80a3da48458732262f003905f1
#: ../../topics/email.txt:50
msgid "``from_email``: A string."
msgstr ""

# 9cfdb4e4aebe4f5992c4e4546abc2e29
#: ../../topics/email.txt:51
msgid ""
"``recipient_list``: A list of strings, each an email address. Each member of "
"``recipient_list`` will see the other recipients in the \"To:\" field of the "
"email message."
msgstr ""

# c67e449cbd574af5b8de66f69b283e9b
#: ../../topics/email.txt:54
msgid ""
"``fail_silently``: A boolean. If it's ``False``, ``send_mail`` will raise "
"an :exc:`smtplib.SMTPException`. See the :mod:`smtplib` docs for a list of "
"possible exceptions, all of which are subclasses of :exc:`~smtplib."
"SMTPException`."
msgstr ""

# 615f192ddb8f43f6b2bf7299ca9f1006
#: ../../topics/email.txt:58
msgid ""
"``auth_user``: The optional username to use to authenticate to the SMTP "
"server. If this isn't provided, Django will use the value of the :setting:"
"`EMAIL_HOST_USER` setting."
msgstr ""

# 340487d122f64ecc8a845aed603e57c0
#: ../../topics/email.txt:61
msgid ""
"``auth_password``: The optional password to use to authenticate to the SMTP "
"server. If this isn't provided, Django will use the value of the :setting:"
"`EMAIL_HOST_PASSWORD` setting."
msgstr ""

# ef79875fd24743ffbce81c9b2f18e017
#: ../../topics/email.txt:64
msgid ""
"``connection``: The optional email backend to use to send the mail. If "
"unspecified, an instance of the default backend will be used. See the "
"documentation on :ref:`Email backends <topic-email-backends>` for more "
"details."
msgstr ""

# ec9dc1baf7984356bf2f244ca00b2364
#: ../../topics/email.txt:70
msgid "send_mass_mail()"
msgstr ""

# 0caad2da02984c1997eb3f48e5c0915a
#: ../../topics/email.txt:74
msgid ""
"``django.core.mail.send_mass_mail()`` is intended to handle mass emailing."
msgstr ""

# 7570ab9bed0c4be4b5fa7e7a3bce127b
#: ../../topics/email.txt:76
msgid "``datatuple`` is a tuple in which each element is in this format::"
msgstr ""

# 6d406bde4f4d4996b589b9f2697bc344
#: ../../topics/email.txt:80
msgid ""
"``fail_silently``, ``auth_user`` and ``auth_password`` have the same "
"functions as in :meth:`~django.core.mail.send_mail()`."
msgstr ""

# 29f8b526b9d4472e8fa9a98839d52db7
#: ../../topics/email.txt:83
msgid ""
"Each separate element of ``datatuple`` results in a separate email message. "
"As in :meth:`~django.core.mail.send_mail()`, recipients in the same "
"``recipient_list`` will all see the other addresses in the email messages' "
"\"To:\" field."
msgstr ""

# 85165c3259564b5388e5e28f9b84489f
#: ../../topics/email.txt:88
msgid ""
"For example, the following code would send two different messages to two "
"different sets of recipients; however, only one connection to the mail "
"server would be opened::"
msgstr ""

# aaaac75eacb047d2ab0eedb97ba00002
#: ../../topics/email.txt:97
msgid "send_mass_mail() vs. send_mail()"
msgstr ""

# 0d1e72ebbf3d417eb1d890553f81fe62
#: ../../topics/email.txt:99
msgid ""
"The main difference between :meth:`~django.core.mail.send_mass_mail()` and :"
"meth:`~django.core.mail.send_mail()` is that :meth:`~django.core.mail."
"send_mail()` opens a connection to the mail server each time it's executed, "
"while :meth:`~django.core.mail.send_mass_mail()` uses a single connection "
"for all of its messages. This makes :meth:`~django.core.mail.send_mass_mail()"
"` slightly more efficient."
msgstr ""

# c4e5586fac804efdbc4a0f9944c88d15
#: ../../topics/email.txt:107
msgid "mail_admins()"
msgstr ""

# 65b3af8c83904de1949e2d4d74e40ff5
#: ../../topics/email.txt:111
msgid ""
"``django.core.mail.mail_admins()`` is a shortcut for sending an email to the "
"site admins, as defined in the :setting:`ADMINS` setting."
msgstr ""

# fe1895ebabcb48c6b1b394cfef141624
#: ../../topics/email.txt:114
msgid ""
"``mail_admins()`` prefixes the subject with the value of the :setting:"
"`EMAIL_SUBJECT_PREFIX` setting, which is ``\"[Django] \"`` by default."
msgstr ""

# c712a88ef8c34ab7b1c7530f54705e97
#: ../../topics/email.txt:117
msgid ""
"The \"From:\" header of the email will be the value of the :setting:"
"`SERVER_EMAIL` setting."
msgstr ""

# e5b7df3699d64d24a9f04ee3dba88e36
#: ../../topics/email.txt:120
msgid "This method exists for convenience and readability."
msgstr ""

# fd92b521af8947898bfd773f5817eb06
#: ../../topics/email.txt:124
msgid ""
"If ``html_message`` is provided, the resulting email will be a :mimetype:"
"`multipart/alternative` email with ``message`` as the :mimetype:`text/plain` "
"content type and ``html_message`` as the :mimetype:`text/html` content type."
msgstr ""

# 438930355fb94d3fa887b18cd5c0c7c6
#: ../../topics/email.txt:130
msgid "mail_managers()"
msgstr ""

# 231219e9bad448b4825152a1e1eee41a
#: ../../topics/email.txt:134
msgid ""
"``django.core.mail.mail_managers()`` is just like ``mail_admins()``, except "
"it sends an email to the site managers, as defined in the :setting:"
"`MANAGERS` setting."
msgstr ""

# 09f0722315e44dab9882c6f44d4e7edb
# 7f0aa03144924c429221c983c2420182
# 1b608c217c404517abf6174611837964
#: ../../topics/email.txt:139 ../../topics/http/sessions.txt:277
#: ../../topics/http/shortcuts.txt:176
msgid "Examples"
msgstr ""

# 969c22ad94e346c0a39702acb2fd98d3
#: ../../topics/email.txt:141
msgid ""
"This sends a single email to john@example.com and jane@example.com, with "
"them both appearing in the \"To:\"::"
msgstr ""

# 6742345ae88a41d3bb9eeb206418030e
#: ../../topics/email.txt:147
msgid ""
"This sends a message to john@example.com and jane@example.com, with them "
"both receiving a separate email::"
msgstr ""

# 23dfa6a505644026808f110b28bd35c1
#: ../../topics/email.txt:157
msgid "Preventing header injection"
msgstr ""

# 84be6cfa29c044efab88343f34390dd1
#: ../../topics/email.txt:159
msgid ""
"`Header injection`_ is a security exploit in which an attacker inserts extra "
"email headers to control the \"To:\" and \"From:\" in email messages that "
"your scripts generate."
msgstr ""

# f5763e94d80f4672aff12a5ee88a3023
#: ../../topics/email.txt:163
msgid ""
"The Django email functions outlined above all protect against header "
"injection by forbidding newlines in header values. If any ``subject``, "
"``from_email`` or ``recipient_list`` contains a newline (in either Unix, "
"Windows or Mac style), the email function (e.g. :meth:`~django.core.mail."
"send_mail()`) will raise ``django.core.mail.BadHeaderError`` (a subclass of "
"``ValueError``) and, hence, will not send the email. It's your "
"responsibility to validate all data before passing it to the email functions."
msgstr ""

# 49ad7a1954b54a69b584abd061ece43b
#: ../../topics/email.txt:171
msgid ""
"If a ``message`` contains headers at the start of the string, the headers "
"will simply be printed as the first bit of the email message."
msgstr ""

# 385a7d292ca74505a917f70a6aadca9e
#: ../../topics/email.txt:174
msgid ""
"Here's an example view that takes a ``subject``, ``message`` and "
"``from_email`` from the request's POST data, sends that to admin@example.com "
"and redirects to \"/contact/thanks/\" when it's done::"
msgstr ""

# cb92963b156647f4b64a9883bf53463b
#: ../../topics/email.txt:200
msgid "The EmailMessage class"
msgstr ""

# f9c512def9bf4ec18004a26cc47fe26c
#: ../../topics/email.txt:202
msgid ""
"Django's :meth:`~django.core.mail.send_mail()` and :meth:`~django.core.mail."
"send_mass_mail()` functions are actually thin wrappers that make use of the :"
"class:`~django.core.mail.EmailMessage` class."
msgstr ""

# c08c38fcf7254eb382e3ecbe2966eda9
#: ../../topics/email.txt:206
msgid ""
"Not all features of the :class:`~django.core.mail.EmailMessage` class are "
"available through the :meth:`~django.core.mail.send_mail()` and related "
"wrapper functions. If you wish to use advanced features, such as BCC'ed "
"recipients, file attachments, or multi-part email, you'll need to create :"
"class:`~django.core.mail.EmailMessage` instances directly."
msgstr ""

# 60094f07727d48578083f3a44e88eede
#: ../../topics/email.txt:213
msgid ""
"This is a design feature. :meth:`~django.core.mail.send_mail()` and related "
"functions were originally the only interface Django provided. However, the "
"list of parameters they accepted was slowly growing over time. It made sense "
"to move to a more object-oriented design for email messages and retain the "
"original functions only for backwards compatibility."
msgstr ""

# 744a8944d5a84051a0c6297563cc728e
#: ../../topics/email.txt:220
msgid ""
":class:`~django.core.mail.EmailMessage` is responsible for creating the "
"email message itself. The :ref:`email backend <topic-email-backends>` is "
"then responsible for sending the email."
msgstr ""

# 6746642d7fb64d75bba6d18443367ead
#: ../../topics/email.txt:224
msgid ""
"For convenience, :class:`~django.core.mail.EmailMessage` provides a simple "
"``send()`` method for sending a single email. If you need to send multiple "
"messages, the email backend API :ref:`provides an alternative <topics-"
"sending-multiple-emails>`."
msgstr ""

# c23df40349934412b36b42a68ffee9fc
#: ../../topics/email.txt:230
msgid "EmailMessage Objects"
msgstr ""

# 8551bcdc98db48b88576957240bc7ae6
#: ../../topics/email.txt:234
msgid ""
"The :class:`~django.core.mail.EmailMessage` class is initialized with the "
"following parameters (in the given order, if positional arguments are used). "
"All parameters are optional and can be set at any time prior to calling the "
"``send()`` method."
msgstr ""

# 9e55bc28a3ad49239db32cd840337144
#: ../../topics/email.txt:242
msgid "``subject``: The subject line of the email."
msgstr ""

# 0ccc7f3b987e4cd2a62464dc976b8f8a
#: ../../topics/email.txt:244
msgid "``body``: The body text. This should be a plain text message."
msgstr ""

# 62faba15e467439d80fc9c8832aa4cf0
#: ../../topics/email.txt:246
msgid ""
"``from_email``: The sender's address. Both ``fred@example.com`` and ``Fred "
"<fred@example.com>`` forms are legal. If omitted, the :setting:"
"`DEFAULT_FROM_EMAIL` setting is used."
msgstr ""

# 24d1e7699dd34df8a67522b12104f1f2
#: ../../topics/email.txt:250
msgid "``to``: A list or tuple of recipient addresses."
msgstr ""

# b1ac318b725a4d6c9f231639bcc578d2
#: ../../topics/email.txt:252
msgid ""
"``bcc``: A list or tuple of addresses used in the \"Bcc\" header when "
"sending the email."
msgstr ""

# 3bd2fb93624a47e0b69969efb6db0aa6
#: ../../topics/email.txt:255
msgid ""
"``connection``: An email backend instance. Use this parameter if you want to "
"use the same connection for multiple messages. If omitted, a new connection "
"is created when ``send()`` is called."
msgstr ""

# 826ed96624904cf5b343a8e882d7b175
#: ../../topics/email.txt:259
msgid ""
"``attachments``: A list of attachments to put on the message. These can be "
"either ``email.MIMEBase.MIMEBase`` instances, or ``(filename, content, "
"mimetype)`` triples."
msgstr ""

# 0c81ad87c46d444a80a250b7fcf3a426
#: ../../topics/email.txt:263
msgid ""
"``headers``: A dictionary of extra headers to put on the message. The keys "
"are the header name, values are the header values. It's up to the caller to "
"ensure header names and values are in the correct format for an email "
"message."
msgstr ""

# a6d5523ab371445eab227579fe5bbfa6
#: ../../topics/email.txt:268
msgid ""
"``cc``: A list or tuple of recipient addresses used in the \"Cc\" header "
"when sending the email."
msgstr ""

# 7d540f3ad85348208ee855e04b38edae
#: ../../topics/email.txt:277
msgid "The class has the following methods:"
msgstr ""

# 3e20a0d090824fa5bf63f9c416877697
#: ../../topics/email.txt:279
msgid ""
"``send(fail_silently=False)`` sends the message. If a connection was "
"specified when the email was constructed, that connection will be used. "
"Otherwise, an instance of the default backend will be instantiated and used. "
"If the keyword argument ``fail_silently`` is ``True``, exceptions raised "
"while sending the message will be quashed."
msgstr ""

# 0b643c1a94c140f88a543082ce89ea38
#: ../../topics/email.txt:285
msgid ""
"``message()`` constructs a ``django.core.mail.SafeMIMEText`` object (a "
"subclass of Python's ``email.MIMEText.MIMEText`` class) or a ``django.core."
"mail.SafeMIMEMultipart`` object holding the message to be sent. If you ever "
"need to extend the :class:`~django.core.mail.EmailMessage` class, you'll "
"probably want to override this method to put the content you want into the "
"MIME object."
msgstr ""

# b1da0c126ee64d37a5e13da9eebdb220
#: ../../topics/email.txt:292
msgid ""
"``recipients()`` returns a list of all the recipients of the message, "
"whether they're recorded in the ``to`` or ``bcc`` attributes. This is "
"another method you might need to override when subclassing, because the SMTP "
"server needs to be told the full list of recipients when the message is "
"sent. If you add another way to specify recipients in your class, they need "
"to be returned from this method as well."
msgstr ""

# 7fe46b5362c14f82851fa31b2f24c2c5
#: ../../topics/email.txt:299
msgid ""
"``attach()`` creates a new file attachment and adds it to the message. There "
"are two ways to call ``attach()``:"
msgstr ""

# ab440949f1804919a16d1fe822ba58ed
#: ../../topics/email.txt:302
msgid ""
"You can pass it a single argument that is an ``email.MIMEBase.MIMEBase`` "
"instance. This will be inserted directly into the resulting message."
msgstr ""

# 963084bd23bc4ce895068a1b7ea3f051
#: ../../topics/email.txt:306
msgid ""
"Alternatively, you can pass ``attach()`` three arguments: ``filename``, "
"``content`` and ``mimetype``. ``filename`` is the name of the file "
"attachment as it will appear in the email, ``content`` is the data that will "
"be contained inside the attachment and ``mimetype`` is the optional MIME "
"type for the attachment. If you omit ``mimetype``, the MIME content type "
"will be guessed from the filename of the attachment."
msgstr ""

# ef38508cd0ea4bcc8b3d276e30375c99
#: ../../topics/email.txt:318
msgid ""
"``attach_file()`` creates a new attachment using a file from your "
"filesystem. Call it with the path of the file to attach and, optionally, the "
"MIME type to use for the attachment. If the MIME type is omitted, it will be "
"guessed from the filename. The simplest use would be::"
msgstr ""

# 89638cf26c184dc6aeaf0bf9e5f30d69
#: ../../topics/email.txt:328
msgid "Sending alternative content types"
msgstr ""

# dbbecdfb4ab3484c9df85e5c05374e77
#: ../../topics/email.txt:330
msgid ""
"It can be useful to include multiple versions of the content in an email; "
"the classic example is to send both text and HTML versions of a message. "
"With Django's email library, you can do this using the "
"``EmailMultiAlternatives`` class. This subclass of :class:`~django.core.mail."
"EmailMessage` has an ``attach_alternative()`` method for including extra "
"versions of the message body in the email. All the other methods (including "
"the class initialization) are inherited directly from :class:`~django.core."
"mail.EmailMessage`."
msgstr ""

# 7b1de3f4263a454bb2b29586c0561e4f
#: ../../topics/email.txt:338
msgid "To send a text and HTML combination, you could write::"
msgstr ""

# e9767a265df649ef8bd33d8225e0b98a
#: ../../topics/email.txt:349
msgid ""
"By default, the MIME type of the ``body`` parameter in an :class:`~django."
"core.mail.EmailMessage` is ``\"text/plain\"``. It is good practice to leave "
"this alone, because it guarantees that any recipient will be able to read "
"the email, regardless of their mail client. However, if you are confident "
"that your recipients can handle an alternative content type, you can use the "
"``content_subtype`` attribute on the :class:`~django.core.mail.EmailMessage` "
"class to change the main content type. The major type will always be ``\"text"
"\"``, but you can change the subtype. For example::"
msgstr ""

# 0fad58f8ff214fbcac5c655895c97967
#: ../../topics/email.txt:366
msgid "Email backends"
msgstr ""

# 627b204fd0204edd9929738fc18cc3ba
#: ../../topics/email.txt:370
msgid "The actual sending of an email is handled by the email backend."
msgstr ""

# 8da7013f6be64332beb5694134a940d1
#: ../../topics/email.txt:372
msgid "The email backend class has the following methods:"
msgstr ""

# cb9267ec678b4bb488d42bb13bbfbb04
#: ../../topics/email.txt:374
msgid "``open()`` instantiates an long-lived email-sending connection."
msgstr ""

# b8b0857202b24325a12e0caae557501e
#: ../../topics/email.txt:376
msgid "``close()`` closes the current email-sending connection."
msgstr ""

# 1a8bb21ec51d4ad597411d0a5e1befef
#: ../../topics/email.txt:378
msgid ""
"``send_messages(email_messages)`` sends a list of :class:`~django.core.mail."
"EmailMessage` objects. If the connection is not open, this call will "
"implicitly open the connection, and close the connection afterwards. If the "
"connection is already open, it will be left open after mail has been sent."
msgstr ""

# 320918bef1b4432a8bcfe514955f4203
#: ../../topics/email.txt:385
msgid "Obtaining an instance of an email backend"
msgstr ""

# d231dc1975c0436db96605efd76596a8
#: ../../topics/email.txt:387
msgid ""
"The :meth:`get_connection` function in ``django.core.mail`` returns an "
"instance of the email backend that you can use."
msgstr ""

# 38acf8cf3d4943938f19ba064937d823
#: ../../topics/email.txt:394
msgid ""
"By default, a call to ``get_connection()`` will return an instance of the "
"email backend specified in :setting:`EMAIL_BACKEND`. If you specify the "
"``backend`` argument, an instance of that backend will be instantiated."
msgstr ""

# 04c5fdf370524d399a842860fff5cc82
#: ../../topics/email.txt:398
msgid ""
"The ``fail_silently`` argument controls how the backend should handle "
"errors. If ``fail_silently`` is True, exceptions during the email sending "
"process will be silently ignored."
msgstr ""

# 698256b38d97471683dfd205dc7442cf
#: ../../topics/email.txt:402
msgid ""
"All other arguments are passed directly to the constructor of the email "
"backend."
msgstr ""

# fab461c8022641a69ab0c903cdd8284d
#: ../../topics/email.txt:405
msgid ""
"Django ships with several email sending backends. With the exception of the "
"SMTP backend (which is the default), these backends are only useful during "
"testing and development. If you have special email sending requirements, you "
"can :ref:`write your own email backend <topic-custom-email-backend>`."
msgstr ""

# a1e6c1896eef42ad9ba14c0f8676b8af
#: ../../topics/email.txt:413
msgid "SMTP backend"
msgstr ""

# 67172b728f4e4b8cb06f8e465f4812a1
#: ../../topics/email.txt:415
msgid ""
"This is the default backend. Email will be sent through a SMTP server. The "
"server address and authentication credentials are set in the :setting:"
"`EMAIL_HOST`, :setting:`EMAIL_PORT`, :setting:`EMAIL_HOST_USER`, :setting:"
"`EMAIL_HOST_PASSWORD` and :setting:`EMAIL_USE_TLS` settings in your settings "
"file."
msgstr ""

# 99a981638a404fe08b1784c3191ccf3a
#: ../../topics/email.txt:421
msgid ""
"The SMTP backend is the default configuration inherited by Django. If you "
"want to specify it explicitly, put the following in your settings::"
msgstr ""

# 7f6d1b97ab46486c99325c4f73e8a7e4
#: ../../topics/email.txt:428
msgid ""
"Prior to version 1.2, Django provided a :class:`~django.core.mail."
"SMTPConnection` class. This class provided a way to directly control the use "
"of SMTP to send email. This class has been deprecated in favor of the "
"generic email backend API."
msgstr ""

# d514af5bc96a4c399cd635b145239b3e
#: ../../topics/email.txt:433
msgid ""
"For backwards compatibility :class:`~django.core.mail.SMTPConnection` is "
"still available in ``django.core.mail`` as an alias for the SMTP backend. "
"New code should use :meth:`~django.core.mail.get_connection` instead."
msgstr ""

# f09015bb08e24d36bd93e85604037c8e
#: ../../topics/email.txt:440
msgid "Console backend"
msgstr ""

# b707775a5c0b490e85a5a8cefa5a2c5f
#: ../../topics/email.txt:442
msgid ""
"Instead of sending out real emails the console backend just writes the "
"emails that would be send to the standard output. By default, the console "
"backend writes to ``stdout``. You can use a different stream-like object by "
"providing the ``stream`` keyword argument when constructing the connection."
msgstr ""

# dbc58c25ae594e2b9dd7df62acaec832
# 846be5138c1746d39de0b9424c3250f7
# 4a29353b43474dc18dbf803fdf5fcc43
#: ../../topics/email.txt:447 ../../topics/email.txt:465
#: ../../topics/email.txt:484
msgid "To specify this backend, put the following in your settings::"
msgstr ""

# fa620fc87cf14b8fa2ce65fdb7a32acf
# 9db7a2510aa44459811e0ba143dfd0bf
# 27892576680e48659f446e4f73b873f5
#: ../../topics/email.txt:451 ../../topics/email.txt:470
#: ../../topics/email.txt:501
msgid ""
"This backend is not intended for use in production -- it is provided as a "
"convenience that can be used during development."
msgstr ""

# bd7005a5d5c24755a657bcbcf6c4cdd0
#: ../../topics/email.txt:457
msgid "File backend"
msgstr ""

# 0fb9b7a4ecd54de5bfc760fbccdaf286
#: ../../topics/email.txt:459
msgid ""
"The file backend writes emails to a file. A new file is created for each new "
"session that is opened on this backend. The directory to which the files are "
"written is either taken from the :setting:`EMAIL_FILE_PATH` setting or from "
"the ``file_path`` keyword when creating a connection with :meth:`~django."
"core.mail.get_connection`."
msgstr ""

# 8bcf83ebfe1644868e13706a4edf197d
#: ../../topics/email.txt:476
msgid "In-memory backend"
msgstr ""

# 07c7f338411943c594da196c954646c8
#: ../../topics/email.txt:478
msgid ""
"The ``'locmem'`` backend stores messages in a special attribute of the "
"``django.core.mail`` module. The ``outbox`` attribute is created when the "
"first message is sent. It's a list with an :class:`~django.core.mail."
"EmailMessage` instance for each message that would be send."
msgstr ""

# 6ecf3654094a488c811cf424012b73e7
#: ../../topics/email.txt:488
msgid ""
"This backend is not intended for use in production -- it is provided as a "
"convenience that can be used during development and testing."
msgstr ""

# 888b493c34ea405ea09c3bc66a6ee1b9
#: ../../topics/email.txt:494
msgid "Dummy backend"
msgstr ""

# 54d7799c5bf14983bf4aba7c82c39508
#: ../../topics/email.txt:496
msgid ""
"As the name suggests the dummy backend does nothing with your messages. To "
"specify this backend, put the following in your settings::"
msgstr ""

# 9e9fe1725ff943358dc976304d7a1b38
#: ../../topics/email.txt:507
msgid "Defining a custom email backend"
msgstr ""

# a43854d7583b4a9eb1441019ce0b3fd4
#: ../../topics/email.txt:509
msgid ""
"If you need to change how emails are sent you can write your own email "
"backend. The :setting:`EMAIL_BACKEND` setting in your settings file is then "
"the Python import path for your backend class."
msgstr ""

# 2d5e8f24aae044be8ed386cf77d64638
#: ../../topics/email.txt:513
msgid ""
"Custom email backends should subclass ``BaseEmailBackend`` that is located "
"in the ``django.core.mail.backends.base`` module. A custom email backend "
"must implement the ``send_messages(email_messages)`` method. This method "
"receives a list of :class:`~django.core.mail.EmailMessage` instances and "
"returns the number of successfully delivered messages. If your backend has "
"any concept of a persistent session or connection, you should also implement "
"the ``open()`` and ``close()`` methods. Refer to ``smtp.EmailBackend`` for a "
"reference implementation."
msgstr ""

# 42bf26b1c0544e1d89f40ca68d342828
#: ../../topics/email.txt:525
msgid "Sending multiple emails"
msgstr ""

# 36cf22f1d20b4334b61debe2cf0cd4bc
#: ../../topics/email.txt:527
msgid ""
"Establishing and closing an SMTP connection (or any other network "
"connection, for that matter) is an expensive process. If you have a lot of "
"emails to send, it makes sense to reuse an SMTP connection, rather than "
"creating and destroying a connection every time you want to send an email."
msgstr ""

# c53e4f5881e048f1904ac255c1b1a3fa
#: ../../topics/email.txt:532
msgid "There are two ways you tell an email backend to reuse a connection."
msgstr ""

# 5e778a714adf46448b4c63ec375884d3
#: ../../topics/email.txt:534
msgid ""
"Firstly, you can use the ``send_messages()`` method. ``send_messages()`` "
"takes a list of :class:`~django.core.mail.EmailMessage` instances (or "
"subclasses), and sends them all using a single connection."
msgstr ""

# 3d7e74021a934e76ad302366a59a2912
#: ../../topics/email.txt:538
msgid ""
"For example, if you have a function called ``get_notification_email()`` that "
"returns a list of :class:`~django.core.mail.EmailMessage` objects "
"representing some periodic email you wish to send out, you could send these "
"emails using a single call to send_messages::"
msgstr ""

# 6753d8ab6ec441fa8856a2e1ade513e9
#: ../../topics/email.txt:548
msgid ""
"In this example, the call to ``send_messages()`` opens a connection on the "
"backend, sends the list of messages, and then closes the connection again."
msgstr ""

# 8f7669142e8e442aa16cebdf445fa65b
#: ../../topics/email.txt:551
msgid ""
"The second approach is to use the ``open()`` and ``close()`` methods on the "
"email backend to manually control the connection. ``send_messages()`` will "
"not manually open or close the connection if it is already open, so if you "
"manually open the connection, you can control when it is closed. For "
"example::"
msgstr ""

# a3fba029e0524bdbb23b7c56e3063a55
#: ../../topics/email.txt:581
msgid "Testing email sending"
msgstr ""

# 8d2244cdf93c42358aca687fd6611ae7
#: ../../topics/email.txt:583
msgid ""
"There are times when you do not want Django to send emails at all. For "
"example, while developing a Web site, you probably don't want to send out "
"thousands of emails -- but you may want to validate that emails will be sent "
"to the right people under the right conditions, and that those emails will "
"contain the correct content."
msgstr ""

# 048c39e93070467f9754f7378fa1945d
#: ../../topics/email.txt:589
msgid ""
"The easiest way to test your project's use of email is to use the "
"``console`` email backend. This backend redirects all email to stdout, "
"allowing you to inspect the content of mail."
msgstr ""

# f3c3b11a229b4faf9e888a0852cf3cda
#: ../../topics/email.txt:593
msgid ""
"The ``file`` email backend can also be useful during development -- this "
"backend dumps the contents of every SMTP connection to a file that can be "
"inspected at your leisure."
msgstr ""

# 426e7c5559e04dfc8f31d71c5d0a8ac1
#: ../../topics/email.txt:597
msgid ""
"Another approach is to use a \"dumb\" SMTP server that receives the emails "
"locally and displays them to the terminal, but does not actually send "
"anything. Python has a built-in way to accomplish this with a single "
"command::"
msgstr ""

# ada604e639dd48a793b8e8db6d650a53
#: ../../topics/email.txt:603
msgid ""
"This command will start a simple SMTP server listening on port 1025 of "
"localhost. This server simply prints to standard output all email headers "
"and the email body. You then only need to set the :setting:`EMAIL_HOST` and :"
"setting:`EMAIL_PORT` accordingly, and you are set."
msgstr ""

# 6a271726e7cd499788d8d15978516247
#: ../../topics/email.txt:608
msgid ""
"For a more detailed discussion of testing and processing of emails locally, "
"see the Python documentation for the :mod:`smtpd` module."
msgstr ""

# fa1440bb44104820983902c70378dfb8
#: ../../topics/email.txt:612
msgid "SMTPConnection"
msgstr ""

# 6e4e8f3636a4445cb21bb6ac9b364140
#: ../../topics/email.txt:618
msgid ""
"The ``SMTPConnection`` class has been deprecated in favor of the generic "
"email backend API."
msgstr ""

# 1aded87ee45e4b048fdc5c8e4d170c20
#: ../../topics/email.txt:621
msgid ""
"For backwards compatibility ``SMTPConnection`` is still available in "
"``django.core.mail`` as an alias for the :ref:`SMTP backend <topic-email-"
"smtp-backend>`. New code should use :meth:`~django.core.mail.get_connection` "
"instead."
msgstr ""

# 5fd526e09dfb4d5da275e0b22eec24d1
#: ../../topics/files.txt:3
msgid "Managing files"
msgstr ""

# f079accf24ff4080996008bc85c0bfdf
#: ../../topics/files.txt:5
msgid "This document describes Django's file access APIs."
msgstr ""

# 1d737900346443df94089c65ca1cd135
#: ../../topics/files.txt:7
msgid ""
"By default, Django stores files locally, using the :setting:`MEDIA_ROOT` "
"and :setting:`MEDIA_URL` settings. The examples below assume that you're "
"using these defaults."
msgstr ""

# 4446043905a54b6fbdfc9bfac31c4ffc
#: ../../topics/files.txt:11
msgid ""
"However, Django provides ways to write custom `file storage systems`_ that "
"allow you to completely customize where and how Django stores files. The "
"second half of this document describes how these storage systems work."
msgstr ""

# 2ac1ec2e19344ee7b525f0d85c0b7c7f
#: ../../topics/files.txt:18
msgid "Using files in models"
msgstr ""

# ec956f0ec8e149c58aec397ab8ed0a7a
#: ../../topics/files.txt:20
msgid ""
"When you use a :class:`~django.db.models.FileField` or :class:`~django.db."
"models.ImageField`, Django provides a set of APIs you can use to deal with "
"that file."
msgstr ""

# 9672506cfef14c5580dd6f20af35274a
#: ../../topics/files.txt:24
msgid ""
"Consider the following model, using an :class:`~django.db.models.ImageField` "
"to store a photo::"
msgstr ""

# f2edf48ee38249c3a20a7a6e7bf66ec6
#: ../../topics/files.txt:32
msgid ""
"Any ``Car`` instance will have a ``photo`` attribute that you can use to get "
"at the details of the attached photo::"
msgstr ""

# 48312ad658174e7898a1324d6eed571b
#: ../../topics/files.txt:45
msgid ""
"This object -- ``car.photo`` in the example -- is a ``File`` object, which "
"means it has all the methods and attributes described below."
msgstr ""

# 4498ed41b059437ea17f14e961482e92
#: ../../topics/files.txt:49
msgid ""
"The file is saved as part of saving the model in the database, so the actual "
"file name used on disk cannot be relied on until after the model has been "
"saved."
msgstr ""

# d27ca4fedd7e47f4883cd22c67a3b498
#: ../../topics/files.txt:55
msgid "The ``File`` object"
msgstr ""

# 02da3672a36b480c929d66f10e46af10
#: ../../topics/files.txt:57
msgid ""
"Internally, Django uses a :class:`django.core.files.File` instance any time "
"it needs to represent a file. This object is a thin wrapper around Python's "
"`built-in file object`_ with some Django-specific additions."
msgstr ""

# f1834db3460d49c589de1ea4f972d087
#: ../../topics/files.txt:63
msgid ""
"Most of the time you'll simply use a ``File`` that Django's given you (i.e. "
"a file attached to a model as above, or perhaps an uploaded file)."
msgstr ""

# f65de8814e2a4a8790f88d51ec11a1b5
#: ../../topics/files.txt:66
msgid ""
"If you need to construct a ``File`` yourself, the easiest way is to create "
"one using a Python built-in ``file`` object::"
msgstr ""

# deac0d42364a419baf2a418379a3d6d1
#: ../../topics/files.txt:75
msgid ""
"Now you can use any of the documented attributes and methods of the :class:"
"`~django.core.files.File` class."
msgstr ""

# 142ff5a3348640f9ac58728d42988f72
#: ../../topics/files.txt:79
msgid "File storage"
msgstr ""

# 6ebc25fc54da49e48bc216b15d75ccbe
#: ../../topics/files.txt:81
msgid ""
"Behind the scenes, Django delegates decisions about how and where to store "
"files to a file storage system. This is the object that actually understands "
"things like file systems, opening and reading files, etc."
msgstr ""

# 59b9d4d7748641d68eaf82d29ff57652
#: ../../topics/files.txt:85
msgid ""
"Django's default file storage is given by the :setting:"
"`DEFAULT_FILE_STORAGE` setting; if you don't explicitly provide a storage "
"system, this is the one that will be used."
msgstr ""

# 2b89e1ebcb5d4b899e7141de00c0411c
#: ../../topics/files.txt:89
msgid ""
"See below for details of the built-in default file storage system, and see :"
"doc:`/howto/custom-file-storage` for information on writing your own file "
"storage system."
msgstr ""

# da8c0f0584f4445197b4eeb7dfdf01dd
#: ../../topics/files.txt:94
msgid "Storage objects"
msgstr ""

# dc8a029e0ee74ff09a2a4ccaf7a7e27a
#: ../../topics/files.txt:96
msgid ""
"Though most of the time you'll want to use a ``File`` object (which "
"delegates to the proper storage for that file), you can use file storage "
"systems directly. You can create an instance of some custom file storage "
"class, or -- often more useful -- you can use the global default storage "
"system::"
msgstr ""

# f7d721cf0bea44e09483216fc20ca93b
#: ../../topics/files.txt:117
msgid "See :doc:`/ref/files/storage` for the file storage API."
msgstr ""

# a321a2b5854f47abb6a26cca21822cb0
#: ../../topics/files.txt:120
msgid "The built-in filesystem storage class"
msgstr ""

# 8cc47a72bc1741f0ac917a5beeee68c2
#: ../../topics/files.txt:122
msgid ""
"Django ships with a built-in ``FileSystemStorage`` class (defined in "
"``django.core.files.storage``) which implements basic local filesystem file "
"storage. Its initializer takes two arguments:"
msgstr ""

# dccb28011e0c49e09256a174c924a11e
#: ../../topics/files.txt:127
msgid "Argument"
msgstr ""

# dee29be5e7b5474f89d30b0fafcf1e0c
#: ../../topics/files.txt:127
msgid "Description"
msgstr ""

# 0c973a6d40254bc2a466dbe63721ca2d
#: ../../topics/files.txt:129
msgid "``location``"
msgstr ""

# 0b012159a8454a83a2961268a68d3fd7
#: ../../topics/files.txt:129
msgid ""
"Optional. Absolute path to the directory that will hold the files. If "
"omitted, it will be set to the value of your :setting:`MEDIA_ROOT` setting."
msgstr ""

# 88e10f139f6b4ff59c2605ddddcfcfa6
#: ../../topics/files.txt:132
msgid "``base_url``"
msgstr ""

# 1d388ea0b3d44a52b333b6b1627ecb05
#: ../../topics/files.txt:132
msgid ""
"Optional. URL that serves the files stored at this location. If omitted, it "
"will default to the value of your :setting:`MEDIA_URL` setting."
msgstr ""

# ab4be1e7663143a6a78cae2ab6efe13f
#: ../../topics/files.txt:137
msgid ""
"For example, the following code will store uploaded files under ``/media/"
"photos`` regardless of what your :setting:`MEDIA_ROOT` setting is::"
msgstr ""

# eda6e880500f4554abe0ba3d69dcddbc
#: ../../topics/files.txt:149
msgid ""
":doc:`Custom storage systems </howto/custom-file-storage>` work the same "
"way: you can pass them in as the ``storage`` argument to a :class:`~django."
"db.models.FileField`."
msgstr ""

# 7a56240842474e3bb387a828c1619afb
#: ../../topics/forms/formsets.txt:4
msgid "Formsets"
msgstr ""

# 8a169ecfb9104945aaf2fa7d18effcd9
#: ../../topics/forms/formsets.txt:6
msgid ""
"A formset is a layer of abstraction to working with multiple forms on the "
"same page. It can be best compared to a data grid. Let's say you have the "
"following form::"
msgstr ""

# 9bfe6aa4070446ff8b05bcf57d078713
#: ../../topics/forms/formsets.txt:15
msgid ""
"You might want to allow the user to create several articles at once. To "
"create a formset out of an ``ArticleForm`` you would do::"
msgstr ""

# b4f12b7374354ba0a467293d92685924
#: ../../topics/forms/formsets.txt:21
msgid ""
"You now have created a formset named ``ArticleFormSet``. The formset gives "
"you the ability to iterate over the forms in the formset and display them as "
"you would with a regular form::"
msgstr ""

# 9a6ac068a674410d9d55bc85a5f2f02c
#: ../../topics/forms/formsets.txt:31
msgid ""
"As you can see it only displayed one empty form. The number of empty forms "
"that is displayed is controlled by the ``extra`` parameter. By default, "
"``formset_factory`` defines one extra form; the following example will "
"display two blank forms::"
msgstr ""

# 13987b5111f24c6f838e730280ab8c46
#: ../../topics/forms/formsets.txt:40
msgid ""
"Prior to Django 1.3, formset instances were not iterable. To render the "
"formset you iterated over the ``forms`` attribute::"
msgstr ""

# be680e0beb204f868cb779c8e3df643b
#: ../../topics/forms/formsets.txt:47
msgid ""
"Iterating over ``formset.forms`` will render the forms in the order they "
"were created. The default formset iterator also renders the forms in this "
"order, but you can change this order by providing an alternate "
"implementation for the :meth:`__iter__()` method."
msgstr ""

# 5c091d2cbbaa45029aa72d745a534b16
#: ../../topics/forms/formsets.txt:52
msgid ""
"Formsets can also be indexed into, which returns the corresponding form. If "
"you override ``__iter__``, you will need to also override ``__getitem__`` to "
"have matching behavior."
msgstr ""

# 35f4921a02ce4d2aa695dac31a31c34b
#: ../../topics/forms/formsets.txt:59
msgid "Using initial data with a formset"
msgstr ""

# 7fb149461e5e47d08dc880b094691b74
#: ../../topics/forms/formsets.txt:61
msgid ""
"Initial data is what drives the main usability of a formset. As shown above "
"you can define the number of extra forms. What this means is that you are "
"telling the formset how many additional forms to show in addition to the "
"number of forms it generates from the initial data. Lets take a look at an "
"example::"
msgstr ""

# 62e5189804e2404a9e5e7f689dee09ad
#: ../../topics/forms/formsets.txt:82
msgid ""
"There are now a total of three forms showing above. One for the initial data "
"that was passed in and two extra forms. Also note that we are passing in a "
"list of dictionaries as the initial data."
msgstr ""

# 9ad7b0f44c384b4185e83325af464489
#: ../../topics/forms/formsets.txt:88
msgid ""
":ref:`Creating formsets from models with model formsets <model-formsets>`."
msgstr ""

# ba146c299dcc48139316f3585c9d1042
#: ../../topics/forms/formsets.txt:93
msgid "Limiting the maximum number of forms"
msgstr ""

# 3114f1c3904c4f548839361c4bbdd4d9
#: ../../topics/forms/formsets.txt:95
msgid ""
"The ``max_num`` parameter to ``formset_factory`` gives you the ability to "
"limit the maximum number of empty forms the formset will display::"
msgstr ""

# 0b7a3f130c524cac851b5f87f9464e41
#: ../../topics/forms/formsets.txt:107
msgid ""
"If the value of ``max_num`` is greater than the number of existing objects, "
"up to ``extra`` additional blank forms will be added to the formset, so long "
"as the total number of forms does not exceed ``max_num``."
msgstr ""

# 26d0ca0635de4bb193f98eb3a7da9613
#: ../../topics/forms/formsets.txt:111
msgid ""
"A ``max_num`` value of ``None`` (the default) puts no limit on the number of "
"forms displayed. Please note that the default value of ``max_num`` was "
"changed from ``0`` to ``None`` in version 1.2 to allow ``0`` as a valid "
"value."
msgstr ""

# 948c84be15954b4da6feb7317c35bc67
#: ../../topics/forms/formsets.txt:116
msgid "Formset validation"
msgstr ""

# c8e3389df14740fb9e43ebbe4a8da016
#: ../../topics/forms/formsets.txt:118
msgid ""
"Validation with a formset is almost identical to a regular ``Form``. There "
"is an ``is_valid`` method on the formset to provide a convenient way to "
"validate all forms in the formset::"
msgstr ""

# 8c822758e3824cb8b5dc8f827e15f7b1
#: ../../topics/forms/formsets.txt:132
msgid ""
"We passed in no data to the formset which is resulting in a valid form. The "
"formset is smart enough to ignore extra forms that were not changed. If we "
"provide an invalid article::"
msgstr ""

# 8235fcba9521444c8b7e6d749c67a547
#: ../../topics/forms/formsets.txt:151
msgid ""
"As we can see, ``formset.errors`` is a list whose entries correspond to the "
"forms in the formset. Validation was performed for each of the two forms, "
"and the expected error message appears for the second item."
msgstr ""

# 8adb8098e8f4447b9628482b3f973887
#: ../../topics/forms/formsets.txt:155
msgid ""
"We can also check if form data differs from the initial data (i.e. the form "
"was sent without any data)::"
msgstr ""

# 1c5103007a4947248ebc4a6d572cbf66
#: ../../topics/forms/formsets.txt:172
msgid "Understanding the ManagementForm"
msgstr ""

# 9216563203f64ce0aff8b057dd8d9b20
#: ../../topics/forms/formsets.txt:174
msgid ""
"You may have noticed the additional data (``form-TOTAL_FORMS``, ``form-"
"INITIAL_FORMS`` and ``form-MAX_NUM_FORMS``) that was required in the "
"formset's data above. This data is required for the ``ManagementForm``. This "
"form is used by the formset to manage the collection of forms contained in "
"the formset. If you don't provide this management data, an exception will be "
"raised::"
msgstr ""

# ddd7a5ace0314f00aceec2247881d66c
#: ../../topics/forms/formsets.txt:190
msgid ""
"It is used to keep track of how many form instances are being displayed. If "
"you are adding new forms via JavaScript, you should increment the count "
"fields in this form as well."
msgstr ""

# 81b5ecb6b97843438fa918f9d131d270
#: ../../topics/forms/formsets.txt:194
msgid ""
"The management form is available as an attribute of the formset itself. When "
"rendering a formset in a template, you can include all the management data "
"by rendering ``{{ my_formset.management_form }}`` (substituting the name of "
"your formset as appropriate)."
msgstr ""

# 988df47eb44c4e31b9b73b69fe7261d9
#: ../../topics/forms/formsets.txt:200
msgid "``total_form_count`` and ``initial_form_count``"
msgstr ""

# 31edd097a9524e1fac2a06981f63a0e4
#: ../../topics/forms/formsets.txt:202
msgid ""
"``BaseFormSet`` has a couple of methods that are closely related to the "
"``ManagementForm``, ``total_form_count`` and ``initial_form_count``."
msgstr ""

# fbe3c524dccd42829ca67c0e5b166606
#: ../../topics/forms/formsets.txt:205
msgid ""
"``total_form_count`` returns the total number of forms in this formset. "
"``initial_form_count`` returns the number of forms in the formset that were "
"pre-filled, and is also used to determine how many forms are required. You "
"will probably never need to override either of these methods, so please be "
"sure you understand what they do before doing so."
msgstr ""

# a81e4b4c2da54429851d7e0d748e550d
#: ../../topics/forms/formsets.txt:214
msgid "``empty_form``"
msgstr ""

# 4951ed4c23f54af9a107adf9603dd2f2
#: ../../topics/forms/formsets.txt:216
msgid ""
"``BaseFormSet`` provides an additional attribute ``empty_form`` which "
"returns a form instance with a prefix of ``__prefix__`` for easier use in "
"dynamic forms with JavaScript."
msgstr ""

# 312842ec0c2648aa8ad5905386f0cf58
#: ../../topics/forms/formsets.txt:221
msgid "Custom formset validation"
msgstr ""

# 0e5491b123f8420c96ec6ae1b194f146
#: ../../topics/forms/formsets.txt:223
msgid ""
"A formset has a ``clean`` method similar to the one on a ``Form`` class. "
"This is where you define your own validation that works at the formset "
"level::"
msgstr ""

# fe0baba48c274ebd9e90d3be547138b3
#: ../../topics/forms/formsets.txt:260
msgid ""
"The formset ``clean`` method is called after all the ``Form.clean`` methods "
"have been called. The errors will be found using the ``non_form_errors()`` "
"method on the formset."
msgstr ""

# 50115335c6f8404694978844cea111b9
#: ../../topics/forms/formsets.txt:265
msgid "Dealing with ordering and deletion of forms"
msgstr ""

# 13304dfbd3874fa98f2c78fdb3c8a434
#: ../../topics/forms/formsets.txt:267
msgid ""
"Common use cases with a formset is dealing with ordering and deletion of the "
"form instances. This has been dealt with for you. The ``formset_factory`` "
"provides two optional parameters ``can_order`` and ``can_delete`` that will "
"do the extra work of adding the extra fields and providing simpler ways of "
"getting to that data."
msgstr ""

# a9482d5f90be4ec0afbe4ab34f28cf0b
#: ../../topics/forms/formsets.txt:274
msgid "``can_order``"
msgstr ""

# 7fb4adb6701442d6a3e0869211555ce2
# b83dc60133014597aaad33101f42d72a
# c329c2faa8f1478caaa899f0f1747f49
# 0459e53e95b641bcb5c9c1587ccb998f
# e3e7a678ff0347619b3a6f1f4e2a2918
#: ../../topics/forms/formsets.txt:276 ../../topics/forms/formsets.txt:332
#: ../../topics/http/sessions.txt:543 ../../topics/http/sessions.txt:552
#: ../../topics/http/sessions.txt:560
msgid "Default: ``False``"
msgstr ""

# f6601af0876d491f9093178ec4bf883b
#: ../../topics/forms/formsets.txt:278
msgid "Lets you create a formset with the ability to order::"
msgstr ""

# 398aa59e7c414cc3bf180df0a6088f26
#: ../../topics/forms/formsets.txt:297
msgid ""
"This adds an additional field to each form. This new field is named "
"``ORDER`` and is an ``forms.IntegerField``. For the forms that came from the "
"initial data it automatically assigned them a numeric value. Let's look at "
"what will happen when the user changes these values::"
msgstr ""

# 02acc68df1f64f40b3e3b58209520bfc
#: ../../topics/forms/formsets.txt:330
msgid "``can_delete``"
msgstr ""

# 6b37c8b28cc54cdfac108bcc897816a1
#: ../../topics/forms/formsets.txt:334
msgid "Lets you create a formset with the ability to delete::"
msgstr ""

# 3eebe042bad94b318d3cea342f2cefb0
#: ../../topics/forms/formsets.txt:354
msgid ""
"Similar to ``can_order`` this adds a new field to each form named ``DELETE`` "
"and is a ``forms.BooleanField``. When data comes through marking any of the "
"delete fields you can access them with ``deleted_forms``::"
msgstr ""

# 0cf743bb6e7d4c27b492cc309962739d
#: ../../topics/forms/formsets.txt:381
msgid "Adding additional fields to a formset"
msgstr ""

# c936683fd7b9418b847d5706f176f059
#: ../../topics/forms/formsets.txt:383
msgid ""
"If you need to add additional fields to the formset this can be easily "
"accomplished. The formset base class provides an ``add_fields`` method. You "
"can simply override this method to add your own fields or even redefine the "
"default fields/attributes of the order and deletion fields::"
msgstr ""

# a708fdbadb7549da96a14213987a4813
#: ../../topics/forms/formsets.txt:402
msgid "Using a formset in views and templates"
msgstr ""

# 23f37953bb0143b9bb2e2604e9f8cfad
#: ../../topics/forms/formsets.txt:404
msgid ""
"Using a formset inside a view is as easy as using a regular ``Form`` class. "
"The only thing you will want to be aware of is making sure to use the "
"management form inside the template. Let's look at a sample view:"
msgstr ""

# 17567c6f0ccc4b86ab77c2f2efac2948
#: ../../topics/forms/formsets.txt:421
msgid "The ``manage_articles.html`` template might look like this:"
msgstr ""

# 7bc846cc420046dcb29cedff23e4b0be
#: ../../topics/forms/formsets.txt:434
msgid ""
"However the above can be slightly shortcutted and let the formset itself "
"deal with the management form:"
msgstr ""

# 2fd7d6870533496ba46616b9165b9345
#: ../../topics/forms/formsets.txt:445
msgid "The above ends up calling the ``as_table`` method on the formset class."
msgstr ""

# 9fa7c9e819df48b1b9db883d40742809
#: ../../topics/forms/formsets.txt:450
msgid "Manually rendered ``can_delete`` and ``can_order``"
msgstr ""

# 058823c1aed047a49b964b1bd4a9e644
#: ../../topics/forms/formsets.txt:452
msgid ""
"If you manually render fields in the template, you can render ``can_delete`` "
"parameter with ``{{ form.DELETE }}``:"
msgstr ""

# 79a234e604dc423299dfb340c764e671
#: ../../topics/forms/formsets.txt:471
msgid ""
"Similarly, if the formset has the ability to order (``can_order=True``), it "
"is possible to render it with ``{{ form.ORDER }}``."
msgstr ""

# 0fc00dba3114408ba6660842685594d7
#: ../../topics/forms/formsets.txt:475
msgid "Using more than one formset in a view"
msgstr ""

# 68e960e5aea44cd1bf4291a4337b4a5f
#: ../../topics/forms/formsets.txt:477
msgid ""
"You are able to use more than one formset in a view if you like. Formsets "
"borrow much of its behavior from forms. With that said you are able to use "
"``prefix`` to prefix formset form field names with a given value to allow "
"more than one formset to be sent to a view without name clashing. Lets take "
"a look at how this might be accomplished:"
msgstr ""

# ae28b33218fe465eb3694e3f9c6d2b1d
#: ../../topics/forms/formsets.txt:502
msgid ""
"You would then render the formsets as normal. It is important to point out "
"that you need to pass ``prefix`` on both the POST and non-POST cases so that "
"it is rendered and processed correctly."
msgstr ""

# 6f8db14d86cc446daff4ccb5e41a0d4a
#: ../../topics/forms/index.txt:3
msgid "Working with forms"
msgstr ""

# e10dfc9b277d4202b564575ee337cb3b
#: ../../topics/forms/index.txt:7
msgid ""
"This document provides an introduction to Django's form handling features. "
"For a more detailed look at specific areas of the forms API, see :doc:`/ref/"
"forms/api`, :doc:`/ref/forms/fields`, and :doc:`/ref/forms/validation`."
msgstr ""

# a08984c9401140e0a29c104af73a01e2
#: ../../topics/forms/index.txt:14
msgid "``django.forms`` is Django's form-handling library."
msgstr ""

# a3ca13ab3f204272aba04a5aa68a37b4
#: ../../topics/forms/index.txt:16
msgid ""
"While it is possible to process form submissions just using Django's :class:"
"`~django.http.HttpRequest` class, using the form library takes care of a "
"number of common form-related tasks. Using it, you can:"
msgstr ""

# 73d9811c76654da7b42a72c0e72782bf
#: ../../topics/forms/index.txt:20
msgid "Display an HTML form with automatically generated form widgets."
msgstr ""

# d55b75e43d154d659b6d9ed3eb273943
#: ../../topics/forms/index.txt:21
msgid "Check submitted data against a set of validation rules."
msgstr ""

# 231614b2a15a443f93fad69f49229994
#: ../../topics/forms/index.txt:22
msgid "Redisplay a form in the case of validation errors."
msgstr ""

# 0b6f61804cc8430db506b2676715991c
#: ../../topics/forms/index.txt:23
msgid "Convert submitted form data to the relevant Python data types."
msgstr ""

# f4689de38dc3496690dfbc21bb883374
#: ../../topics/forms/index.txt:28
msgid "The library deals with these concepts:"
msgstr ""

# 9b1871458a0c4cbc86361dc8c35bee61
#: ../../topics/forms/index.txt:33
msgid ""
"A class that corresponds to an HTML form widget, e.g. ``<input type=\"text"
"\">`` or ``<textarea>``. This handles rendering of the widget as HTML."
msgstr ""

# 2d5534f7efcc4b409b34166b6555a692
#: ../../topics/forms/index.txt:38
msgid ""
"A class that is responsible for doing validation, e.g. an ``EmailField`` "
"that makes sure its data is a valid email address."
msgstr ""

# 7b85fd9626144061a540d7a31445256b
#: ../../topics/forms/index.txt:42
msgid ""
"A collection of fields that knows how to validate itself and display itself "
"as HTML."
msgstr ""

# d25083c75a8e4c688d112f848a9076f2
#: ../../topics/forms/index.txt:46
msgid "The CSS and JavaScript resources that are required to render a form."
msgstr ""

# a14df8260fb0448e8a4ed243be9a01a9
#: ../../topics/forms/index.txt:48
msgid ""
"The library is decoupled from the other Django components, such as the "
"database layer, views and templates. It relies only on Django settings, a "
"couple of ``django.utils`` helper functions and Django's "
"internationalization hooks (but you're not required to be using "
"internationalization features to use this library)."
msgstr ""

# 9533934d79414f94ba5292e8b9fc3b32
#: ../../topics/forms/index.txt:55
msgid "Form objects"
msgstr ""

# 434ec59bf2e54f9d990ba92705b9f966
#: ../../topics/forms/index.txt:57
msgid ""
"A Form object encapsulates a sequence of form fields and a collection of "
"validation rules that must be fulfilled in order for the form to be "
"accepted. Form classes are created as subclasses of ``django.forms.Form`` "
"and make use of a declarative style that you'll be familiar with if you've "
"used Django's database models."
msgstr ""

# 13c9f2acd8064f68a84bab6bdc340167
#: ../../topics/forms/index.txt:63
msgid ""
"For example, consider a form used to implement \"contact me\" functionality "
"on a personal Web site:"
msgstr ""

# abda684bfc27437f84dc8db9b64c757d
#: ../../topics/forms/index.txt:76
msgid ""
"A form is composed of ``Field`` objects. In this case, our form has four "
"fields: ``subject``, ``message``, ``sender`` and ``cc_myself``. "
"``CharField``, ``EmailField`` and ``BooleanField`` are just three of the "
"available field types; a full list can be found in :doc:`/ref/forms/fields`."
msgstr ""

# 9fd47c6b5efa45a1a2a00d33b34213d1
#: ../../topics/forms/index.txt:81
msgid ""
"If your form is going to be used to directly add or edit a Django model, you "
"can use a :doc:`ModelForm </topics/forms/modelforms>` to avoid duplicating "
"your model description."
msgstr ""

# fa3760b49da04dc1a5a036e0cf993192
#: ../../topics/forms/index.txt:86
msgid "Using a form in a view"
msgstr ""

# d95609ccb3b249febf684dbc5819b154
#: ../../topics/forms/index.txt:88
msgid "The standard pattern for processing a form in a view looks like this:"
msgstr ""

# 039b2d584da640d9a416f40f82f52d22
#: ../../topics/forms/index.txt:107
msgid "There are three code paths here:"
msgstr ""

# 4ab7f3c4847e49cbb7829300601b1697
#: ../../topics/forms/index.txt:109
msgid ""
"If the form has not been submitted, an unbound instance of ContactForm is "
"created and passed to the template."
msgstr ""

# c423d3d3810c4c07969b95c2ac5afb21
#: ../../topics/forms/index.txt:111
msgid ""
"If the form has been submitted, a bound instance of the form is created "
"using ``request.POST``. If the submitted data is valid, it is processed and "
"the user is re-directed to a \"thanks\" page."
msgstr ""

# d3a59421bfa343ffaaf974593f52ff42
#: ../../topics/forms/index.txt:114
msgid ""
"If the form has been submitted but is invalid, the bound form instance is "
"passed on to the template."
msgstr ""

# b316947e4e2945d1959f71a16b6ace60
#: ../../topics/forms/index.txt:117
msgid ""
"The distinction between **bound** and **unbound** forms is important. An "
"unbound form does not have any data associated with it; when rendered to the "
"user, it will be empty or will contain default values. A bound form does "
"have submitted data, and hence can be used to tell if that data is valid. If "
"an invalid bound form is rendered it can include inline error messages "
"telling the user where they went wrong."
msgstr ""

# 2a7147525cfc497699a44ee0099d4617
#: ../../topics/forms/index.txt:124
msgid ""
"See :ref:`ref-forms-api-bound-unbound` for further information on the "
"differences between bound and unbound forms."
msgstr ""

# 5d4e5f2777db4ff39fb8a28c654e6f7d
#: ../../topics/forms/index.txt:128
msgid "Handling file uploads with a form"
msgstr ""

# 6a44efba4b364fb886ac2a51edf13c0f
#: ../../topics/forms/index.txt:130
msgid ""
"To see how to handle file uploads with your form see :ref:`binding-uploaded-"
"files` for more information."
msgstr ""

# 44a53abce6b54dd9b81843d90a344b54
#: ../../topics/forms/index.txt:134
msgid "Processing the data from a form"
msgstr ""

# 27a462e1e4c54aa2b914af65c4091f03
#: ../../topics/forms/index.txt:136
msgid ""
"Once ``is_valid()`` returns ``True``, you can process the form submission "
"safe in the knowledge that it conforms to the validation rules defined by "
"your form. While you could access ``request.POST`` directly at this point, "
"it is better to access ``form.cleaned_data``. This data has not only been "
"validated but will also be converted in to the relevant Python types for "
"you. In the above example, ``cc_myself`` will be a boolean value. Likewise, "
"fields such as ``IntegerField`` and ``FloatField`` convert values to a "
"Python int and float respectively. Note that read-only fields are not "
"available in ``form.cleaned_data`` (and setting a value in a custom ``clean()"
"`` method won't have any effect) because these fields are displayed as text "
"rather than as input elements, and thus are not posted back to the server."
msgstr ""

# e1d9106b10f04214981ae8ef7aba5ddd
#: ../../topics/forms/index.txt:148
msgid ""
"Extending the above example, here's how the form data could be processed:"
msgstr ""

# 3a919c5b57624e19b6c6d919865a3f94
#: ../../topics/forms/index.txt:166
msgid "For more on sending email from Django, see :doc:`/topics/email`."
msgstr ""

# ef1cde4cd87b408693687032f7877ea5
#: ../../topics/forms/index.txt:169
msgid "Displaying a form using a template"
msgstr ""

# bd4262d98ada48ecb640639caaf71ce4
#: ../../topics/forms/index.txt:171
msgid ""
"Forms are designed to work with the Django template language. In the above "
"example, we passed our ``ContactForm`` instance to the template using the "
"context variable ``form``. Here's a simple example template::"
msgstr ""

# 25fee2679be5400fabc390ee663f8360
#: ../../topics/forms/index.txt:180
msgid ""
"The form only outputs its own fields; it is up to you to provide the "
"surrounding ``<form>`` tags and the submit button."
msgstr ""

# 8c7e41208dff41d4b492d0798fccb9f3
#: ../../topics/forms/index.txt:185
msgid ""
"Django ships with an easy-to-use :doc:`protection against Cross Site Request "
"Forgeries </ref/contrib/csrf>`. When submitting a form via POST with CSRF "
"protection enabled you must use the :ttag:`csrf_token` template tag as in "
"the preceding example. However, since CSRF protection is not directly tied "
"to forms in templates, this tag is omitted from the following examples in "
"this document."
msgstr ""

# cd8dc3e1a7e344358ee45de466566022
#: ../../topics/forms/index.txt:192
msgid ""
"``form.as_p`` will output the form with each form field and accompanying "
"label wrapped in a paragraph. Here's the output for our example template::"
msgstr ""

# c909c37bd1914dbab9a3bb4b13e4f9c8
#: ../../topics/forms/index.txt:207
msgid ""
"Note that each form field has an ID attribute set to ``id_<field-name>``, "
"which is referenced by the accompanying label tag. This is important for "
"ensuring forms are accessible to assistive technology such as screen reader "
"software. You can also :ref:`customize the way in which labels and ids are "
"generated <ref-forms-api-configuring-label>`."
msgstr ""

# 00b291f005f640989d810ab10a5fc0cf
#: ../../topics/forms/index.txt:213
msgid ""
"You can also use ``form.as_table`` to output table rows (you'll need to "
"provide your own ``<table>`` tags) and ``form.as_ul`` to output list items."
msgstr ""

# 8d4e93f4d23d44dc884d99bda963f6a3
#: ../../topics/forms/index.txt:217
msgid "Customizing the form template"
msgstr ""

# 8dd69947fdd645e7ba39647cbcb09391
#: ../../topics/forms/index.txt:219
msgid ""
"If the default generated HTML is not to your taste, you can completely "
"customize the way a form is presented using the Django template language. "
"Extending the above example::"
msgstr ""

# bfed29cbd1b94d7fb93cb21fe6b1522f
#: ../../topics/forms/index.txt:248
msgid ""
"Each named form-field can be output to the template using ``{{ form."
"name_of_field }}``, which will produce the HTML needed to display the form "
"widget. Using ``{{ form.name_of_field.errors }}`` displays a list of form "
"errors, rendered as an unordered list. This might look like::"
msgstr ""

# 20689dd99e3f4dd0a58a779d5245d410
#: ../../topics/forms/index.txt:257
msgid ""
"The list has a CSS class of ``errorlist`` to allow you to style its "
"appearance. If you wish to further customize the display of errors you can "
"do so by looping over them::"
msgstr ""

# 5f6761a975164cd0ae8f2c3194bc501d
#: ../../topics/forms/index.txt:270
msgid "Looping over the form's fields"
msgstr ""

# 063f2381feaf44acacb61905f3ac037a
#: ../../topics/forms/index.txt:272
msgid ""
"If you're using the same HTML for each of your form fields, you can reduce "
"duplicate code by looping through each field in turn using a ``{% for %}`` "
"loop::"
msgstr ""

# 7135d6521f83453b837eebd1481dfe8c
#: ../../topics/forms/index.txt:286
msgid ""
"Within this loop, ``{{ field }}`` is an instance of :class:`BoundField`. "
"``BoundField`` also has the following attributes, which can be useful in "
"your templates:"
msgstr ""

# 25b6d6dbfe2e4570a478e45b48a99c75
#: ../../topics/forms/index.txt:291
msgid "The label of the field, e.g. ``Email address``."
msgstr ""

# b597cb4a21bf43ceae4917d50e2a7dd7
#: ../../topics/forms/index.txt:294
msgid ""
"The field's label wrapped in the appropriate HTML ``<label>`` tag, e.g. "
"``<label for=\"id_email\">Email address</label>``"
msgstr ""

# 8d5332a2061f40c8ab348df6bad82b8d
#: ../../topics/forms/index.txt:298
msgid "The value of the field. e.g ``someone@example.com``"
msgstr ""

# 8e2a60b4b9ce48d0b4328f7ee601f881
#: ../../topics/forms/index.txt:301
msgid ""
"The name of the field that will be used in the input element's name field. "
"This takes the form prefix into account, if it has been set."
msgstr ""

# 5b24b94fdf6f435fa04d95dc28cac0ec
#: ../../topics/forms/index.txt:305
msgid "Any help text that has been associated with the field."
msgstr ""

# a5e1a8a971d54277be15f6112ab9863b
#: ../../topics/forms/index.txt:308
msgid ""
"Outputs a ``<ul class=\"errorlist\">`` containing any validation errors "
"corresponding to this field. You can customize the presentation of the "
"errors with a ``{% for error in field.errors %}`` loop. In this case, each "
"object in the loop is a simple string containing the error message."
msgstr ""

# e63927f3b51d4fe7908699ae14f42a43
#: ../../topics/forms/index.txt:315
msgid ""
"This attribute is ``True`` if the form field is a hidden field and ``False`` "
"otherwise. It's not particularly useful as a template variable, but could be "
"useful in conditional tests such as::"
msgstr ""

# 1a9f0032ed7f407781bd61d7e10d7dda
#: ../../topics/forms/index.txt:324
msgid "Looping over hidden and visible fields"
msgstr ""

# fb37c8165ebe40f6858b1fb018deabc9
#: ../../topics/forms/index.txt:326
msgid ""
"If you're manually laying out a form in a template, as opposed to relying on "
"Django's default form layout, you might want to treat ``<input type=\"hidden"
"\">`` fields differently than non-hidden fields. For example, because hidden "
"fields don't display anything, putting error messages \"next to\" the field "
"could cause confusion for your users -- so errors for those fields should be "
"handled differently."
msgstr ""

# 19986e09d960454898444591e7a8d551
#: ../../topics/forms/index.txt:333
msgid ""
"Django provides two methods on a form that allow you to loop over the hidden "
"and visible fields independently: ``hidden_fields()`` and ``visible_fields()"
"``. Here's a modification of an earlier example that uses these two methods::"
msgstr ""

# 4e625d1a0ec04a2f819255520d5ec85e
#: ../../topics/forms/index.txt:353
msgid ""
"This example does not handle any errors in the hidden fields. Usually, an "
"error in a hidden field is a sign of form tampering, since normal form "
"interaction won't alter them. However, you could easily insert some error "
"displays for those form errors, as well."
msgstr ""

# 45c48e9963d3438694b8277608895798
#: ../../topics/forms/index.txt:359
msgid "Reusable form templates"
msgstr ""

# 8dbb03c400a5421094a70b47927777d0
#: ../../topics/forms/index.txt:361
msgid ""
"If your site uses the same rendering logic for forms in multiple places, you "
"can reduce duplication by saving the form's loop in a standalone template "
"and using the :ttag:`include` tag to reuse it in other templates::"
msgstr ""

# 6315c0570865408f97b35273c8deaf89
#: ../../topics/forms/index.txt:379
msgid ""
"If the form object passed to a template has a different name within the "
"context, you can alias it using the ``with`` argument of the :ttag:`include` "
"tag::"
msgstr ""

# 41777737b6fd4ccb8a322bec83472a07
#: ../../topics/forms/index.txt:388
msgid ""
"If you find yourself doing this often, you might consider creating a custom :"
"ref:`inclusion tag<howto-custom-template-tags-inclusion-tags>`."
msgstr ""

# 8c964f163a34488e922b949cf5bbc8ca
#: ../../topics/forms/index.txt:392
msgid "Further topics"
msgstr ""

# ecd9ece31a5447ed89ec61afbe2f642e
#: ../../topics/forms/index.txt:394
msgid "This covers the basics, but forms can do a whole lot more:"
msgstr ""

# 7a7767e32ea142bca223403079f1fe7f
#: ../../topics/forms/index.txt:406
msgid ""
"Covers the full API reference, including form fields, form widgets, and form "
"and field validation."
msgstr ""

# 3be4c5ca22134c7a92095c65e2897880
#: ../../topics/forms/media.txt:2
msgid "Form Media"
msgstr ""

# e3f97524c19e4f27b06808677ca80c6a
#: ../../topics/forms/media.txt:4
msgid ""
"Rendering an attractive and easy-to-use Web form requires more than just "
"HTML - it also requires CSS stylesheets, and if you want to use fancy "
"\"Web2.0\" widgets, you may also need to include some JavaScript on each "
"page. The exact combination of CSS and JavaScript that is required for any "
"given page will depend upon the widgets that are in use on that page."
msgstr ""

# ef070763bca7467e96e00d22fa878e9f
#: ../../topics/forms/media.txt:10
msgid ""
"This is where Django media definitions come in. Django allows you to "
"associate different media files with the forms and widgets that require that "
"media. For example, if you want to use a calendar to render DateFields, you "
"can define a custom Calendar widget. This widget can then be associated with "
"the CSS and JavaScript that is required to render the calendar. When the "
"Calendar widget is used on a form, Django is able to identify the CSS and "
"JavaScript files that are required, and provide the list of file names in a "
"form suitable for easy inclusion on your Web page."
msgstr ""

# 5c1c05ec85144dd3ab2d764b77f6a4ec
#: ../../topics/forms/media.txt:21
msgid ""
"The Django Admin application defines a number of customized widgets for "
"calendars, filtered selections, and so on. These widgets define media "
"requirements, and the Django Admin uses the custom widgets in place of the "
"Django defaults. The Admin templates will only include those media files "
"that are required to render the widgets on any given page."
msgstr ""

# da2da5cab7234da9beebe18c4b21e54f
#: ../../topics/forms/media.txt:28
msgid ""
"If you like the widgets that the Django Admin application uses, feel free to "
"use them in your own application! They're all stored in ``django.contrib."
"admin.widgets``."
msgstr ""

# 8f8dd1a161494f09a9cce56ccd774466
#: ../../topics/forms/media.txt:34
msgid ""
"Many JavaScript toolkits exist, and many of them include widgets (such as "
"calendar widgets) that can be used to enhance your application. Django has "
"deliberately avoided blessing any one JavaScript toolkit. Each toolkit has "
"its own relative strengths and weaknesses - use whichever toolkit suits your "
"requirements. Django is able to integrate with any JavaScript toolkit."
msgstr ""

# 466149c00d014b10b2b97b3493e81d46
#: ../../topics/forms/media.txt:42
msgid "Media as a static definition"
msgstr ""

# b4567b7e31014fce80056ea1e71dadaf
#: ../../topics/forms/media.txt:44
msgid ""
"The easiest way to define media is as a static definition. Using this "
"method, the media declaration is an inner class. The properties of the inner "
"class define the media requirements."
msgstr ""

# e1e50e0724c147c0a4ae9e5fea626e30
#: ../../topics/forms/media.txt:48
msgid "Here's a simple example::"
msgstr ""

# 229fc68a24a74f6c9626a30c3ceb5d7d
#: ../../topics/forms/media.txt:57
msgid ""
"This code defines a ``CalendarWidget``, which will be based on "
"``TextInput``. Every time the CalendarWidget is used on a form, that form "
"will be directed to include the CSS file ``pretty.css``, and the JavaScript "
"files ``animations.js`` and ``actions.js``."
msgstr ""

# ef00c3f811d4481fbb0b155980b80f48
#: ../../topics/forms/media.txt:62
msgid ""
"This static media definition is converted at runtime into a widget property "
"named ``media``. The media for a CalendarWidget instance can be retrieved "
"through this property::"
msgstr ""

# 6c4c818bfc0449bb977b10f5ae09074f
#: ../../topics/forms/media.txt:72
msgid ""
"Here's a list of all possible ``Media`` options. There are no required "
"options."
msgstr ""

# 522aa36590604843b1a72bf6cabf7a6c
#: ../../topics/forms/media.txt:75
msgid "``css``"
msgstr ""

# 6dcc3158129f48b8b8d2fc9c5d7802ba
#: ../../topics/forms/media.txt:77
msgid ""
"A dictionary describing the CSS files required for various forms of output "
"media."
msgstr ""

# 57ef8f2010f443e3968a1917edb6c1e6
#: ../../topics/forms/media.txt:80
msgid ""
"The values in the dictionary should be a tuple/list of file names. See `the "
"section on media paths`_ for details of how to specify paths to media files."
msgstr ""

# 696a1e96f8ff4188b1cea72f0fb3bf7d
#: ../../topics/forms/media.txt:86
msgid ""
"The keys in the dictionary are the output media types. These are the same "
"types accepted by CSS files in media declarations: 'all', 'aural', "
"'braille', 'embossed', 'handheld', 'print', 'projection', 'screen', 'tty' "
"and 'tv'. If you need to have different stylesheets for different media "
"types, provide a list of CSS files for each output medium. The following "
"example would provide two CSS options -- one for the screen, and one for "
"print::"
msgstr ""

# dc80c4f11d174259880be25ea48aed8c
#: ../../topics/forms/media.txt:99
msgid ""
"If a group of CSS files are appropriate for multiple output media types, the "
"dictionary key can be a comma separated list of output media types. In the "
"following example, TV's and projectors will have the same media "
"requirements::"
msgstr ""

# 6c22b967d16c4f3d9730e3c865afcc5e
#: ../../topics/forms/media.txt:111
msgid ""
"If this last CSS definition were to be rendered, it would become the "
"following HTML::"
msgstr ""

# ea8638e9f0db4918ab6b4aeb6f745938
#: ../../topics/forms/media.txt:118
msgid "``js``"
msgstr ""

# aa45b6b9dfe64d898cd7c5002eb7e261
#: ../../topics/forms/media.txt:120
msgid ""
"A tuple describing the required JavaScript files. See `the section on media "
"paths`_ for details of how to specify paths to media files."
msgstr ""

# 69f487352edd4eeab145a2985262bc29
#: ../../topics/forms/media.txt:125
msgid "``extend``"
msgstr ""

# 22ece3f7da9149318db6b354e761b7e0
#: ../../topics/forms/media.txt:127
msgid "A boolean defining inheritance behavior for media declarations."
msgstr ""

# 3ec418ed960d4c589d6d3345f5210ade
#: ../../topics/forms/media.txt:129
msgid ""
"By default, any object using a static media definition will inherit all the "
"media associated with the parent widget. This occurs regardless of how the "
"parent defines its media requirements. For example, if we were to extend our "
"basic Calendar widget from the example above::"
msgstr ""

# 87e74799ed1c494d80aba94094eb3432
#: ../../topics/forms/media.txt:149
msgid ""
"The FancyCalendar widget inherits all the media from it's parent widget. If "
"you don't want media to be inherited in this way, add an ``extend=False`` "
"declaration to the media declaration::"
msgstr ""

# 152782efaa364a30b17d003ca04bd800
#: ../../topics/forms/media.txt:166
msgid ""
"If you require even more control over media inheritance, define your media "
"using a `dynamic property`_. Dynamic properties give you complete control "
"over which media files are inherited, and which are not."
msgstr ""

# 432efbe12edb42fb8534e08e2ab50079
#: ../../topics/forms/media.txt:173
msgid "Media as a dynamic property"
msgstr ""

# 7eb2c0c6e3a442799d09e3e3c32b1235
#: ../../topics/forms/media.txt:175
msgid ""
"If you need to perform some more sophisticated manipulation of media "
"requirements, you can define the media property directly. This is done by "
"defining a widget property that returns an instance of ``forms.Media``. The "
"constructor for ``forms.Media`` accepts ``css`` and ``js`` keyword arguments "
"in the same format as that used in a static media definition."
msgstr ""

# 7f5ba86b4e504a3e918afde635d8c38d
#: ../../topics/forms/media.txt:181
msgid ""
"For example, the static media definition for our Calendar Widget could also "
"be defined in a dynamic fashion::"
msgstr ""

# 9f49871671d24d85abc6661a28f8928a
#: ../../topics/forms/media.txt:190
msgid ""
"See the section on `Media objects`_ for more details on how to construct "
"return values for dynamic media properties."
msgstr ""

# f769b3bf46024894881214ee5b914b52
#: ../../topics/forms/media.txt:196
msgid "Paths in media definitions"
msgstr ""

# c2486c48fe484a2aaf8e6e112e561255
#: ../../topics/forms/media.txt:200
msgid ""
"Paths used to specify media can be either relative or absolute. If a path "
"starts with '/', 'http://' or 'https://', it will be interpreted as an "
"absolute path, and left as-is. All other paths will be prepended with the "
"value of the appropriate prefix."
msgstr ""

# b0221b8deb0345d2b627e3f5af5cc3d4
#: ../../topics/forms/media.txt:205
msgid ""
"As part of the introduction of the :doc:`staticfiles app </ref/contrib/"
"staticfiles>` two new settings were added to refer to \"static files"
"\" (images, CSS, Javascript, etc.) that are needed to render a complete web "
"page: :setting:`STATIC_URL` and :setting:`STATIC_ROOT`."
msgstr ""

# 5761994ce2ef4899a3aa45cc0a0f60e5
#: ../../topics/forms/media.txt:210
msgid ""
"To find the appropriate prefix to use, Django will check if the :setting:"
"`STATIC_URL` setting is not ``None`` and automatically fall back to using :"
"setting:`MEDIA_URL`. For example, if the :setting:`MEDIA_URL` for your site "
"was ``'http://uploads.example.com/'`` and :setting:`STATIC_URL` was "
"``None``::"
msgstr ""

# 35ad8e80cbc040429903d6bc3caeca89
#: ../../topics/forms/media.txt:229
msgid "But if :setting:`STATIC_URL` is ``'http://static.example.com/'``::"
msgstr ""

# 699cdc1c6af64a8a8bd1766429c10ca4
#: ../../topics/forms/media.txt:239
msgid "Media objects"
msgstr ""

# 967f942510804f31a962659d5c7cb2c4
#: ../../topics/forms/media.txt:241
msgid ""
"When you interrogate the media attribute of a widget or form, the value that "
"is returned is a ``forms.Media`` object. As we have already seen, the string "
"representation of a Media object is the HTML required to include media in "
"the ``<head>`` block of your HTML page."
msgstr ""

# 821817170dab49fe80ac093ea2810447
#: ../../topics/forms/media.txt:246
msgid "However, Media objects have some other interesting properties."
msgstr ""

# a4ef66e893924bd495bc5ac4f49c5f2f
#: ../../topics/forms/media.txt:249
msgid "Media subsets"
msgstr ""

# c1d492e2029b4a59a6f7208d1e2f01a4
#: ../../topics/forms/media.txt:251
msgid ""
"If you only want media of a particular type, you can use the subscript "
"operator to filter out a medium of interest. For example::"
msgstr ""

# 57e7113525444bcf85ab714199af75b1
#: ../../topics/forms/media.txt:263
msgid ""
"When you use the subscript operator, the value that is returned is a new "
"Media object -- but one that only contains the media of interest."
msgstr ""

# be97b7de75fa403184442c22e40e8bea
#: ../../topics/forms/media.txt:267
msgid "Combining media objects"
msgstr ""

# 5d3917cc5da04c9a8a66d13f92941d04
#: ../../topics/forms/media.txt:269
msgid ""
"Media objects can also be added together. When two media objects are added, "
"the resulting Media object contains the union of the media from both files::"
msgstr ""

# 51b0d6e4ca6c424ebaab630114f225bf
#: ../../topics/forms/media.txt:292
msgid "Media on Forms"
msgstr ""

# 4105ff0f12714db9b07f2dd4c2760cec
#: ../../topics/forms/media.txt:294
msgid ""
"Widgets aren't the only objects that can have media definitions -- forms can "
"also define media. The rules for media definitions on forms are the same as "
"the rules for widgets: declarations can be static or dynamic; path and "
"inheritance rules for those declarations are exactly the same."
msgstr ""

# 0107ae1e5440480f8d0a73125aadead8
#: ../../topics/forms/media.txt:299
msgid ""
"Regardless of whether you define a media declaration, *all* Form objects "
"have a media property. The default value for this property is the result of "
"adding the media definitions for all widgets that are part of the form::"
msgstr ""

# f8696fc6f39d440f800a062022af3cef
#: ../../topics/forms/media.txt:314
msgid ""
"If you want to associate additional media with a form -- for example, CSS "
"for form layout -- simply add a media declaration to the form::"
msgstr ""

# 379cb89d9e034b08a7d307a04edb8667
#: ../../topics/forms/modelforms.txt:3
msgid "Creating forms from models"
msgstr ""

# e626725622bf4e4bbc4a6a451b90c59c
#: ../../topics/forms/modelforms.txt:11
msgid "``ModelForm``"
msgstr ""

# 976c2dd8871142efb12dece48b1f2b9e
#: ../../topics/forms/modelforms.txt:14
msgid ""
"If you're building a database-driven app, chances are you'll have forms that "
"map closely to Django models. For instance, you might have a ``BlogComment`` "
"model, and you want to create a form that lets people submit comments. In "
"this case, it would be redundant to define the field types in your form, "
"because you've already defined the fields in your model."
msgstr ""

# b995cac94d754aff85d21a2163f73c90
#: ../../topics/forms/modelforms.txt:20
msgid ""
"For this reason, Django provides a helper class that let you create a "
"``Form`` class from a Django model."
msgstr ""

# 42802957cb094bad92c29107b8c2bd26
#: ../../topics/forms/modelforms.txt:42
msgid ""
"The generated ``Form`` class will have a form field for every model field. "
"Each model field has a corresponding default form field. For example, a "
"``CharField`` on a model is represented as a ``CharField`` on a form. A "
"model ``ManyToManyField`` is represented as a ``MultipleChoiceField``. Here "
"is the full list of conversions:"
msgstr ""

# ff744a1530124e458a9ca1378c95fb9e
#: ../../topics/forms/modelforms.txt:49
msgid "Model field"
msgstr ""

# df90cb106b4a42bca2492a1005e3800e
#: ../../topics/forms/modelforms.txt:49
msgid "Form field"
msgstr ""

# 98e15e302eb04ba08356d7805ba89f75
#: ../../topics/forms/modelforms.txt:51
msgid "``AutoField``"
msgstr ""

# 4fc720784ed1434c93c8048e7460b11f
#: ../../topics/forms/modelforms.txt:51
msgid "Not represented in the form"
msgstr ""

# 94a4f9bc5c5245cc94e3112150a05c33
#: ../../topics/forms/modelforms.txt:53
msgid "``BigIntegerField``"
msgstr ""

# 84b1e074e29243e5b5f10c033ebbff54
#: ../../topics/forms/modelforms.txt:53
msgid ""
"``IntegerField`` with ``min_value`` set to -9223372036854775808 and "
"``max_value`` set to 9223372036854775807."
msgstr ""

# b6a7325d455e481690d21a572259591a
# 66b47a5c04ca4512b4cb41cab2708244
#: ../../topics/forms/modelforms.txt:57
msgid "``BooleanField``"
msgstr ""

# e3984d07941f43769db4538a5b560d5b
# c18b00d0b874495b989b89efc1dd7f40
# 50ee2a6f78de4031a6501978bde5f09b
# 000653845ad64819a313f735e1bcd88f
#: ../../topics/forms/modelforms.txt:59 ../../topics/forms/modelforms.txt:62
#: ../../topics/forms/modelforms.txt:74 ../../topics/forms/modelforms.txt:91
msgid "``CharField``"
msgstr ""

# 1bcbf5aa06d74cb49bd3d899be7fa6f4
#: ../../topics/forms/modelforms.txt:59
msgid ""
"``CharField`` with ``max_length`` set to the model field's ``max_length``"
msgstr ""

# f218db47d713462c92ec8c2fa47bf049
#: ../../topics/forms/modelforms.txt:62
msgid "``CommaSeparatedIntegerField``"
msgstr ""

# 661ec494707d4364af21f207c7dc4259
# 857b41259ca24e2f9ec3cfeb300a6aa4
#: ../../topics/forms/modelforms.txt:64
msgid "``DateField``"
msgstr ""

# c10ef23874144bf094b2ee837c34a5a0
# c7e25ca6ca73484292029c4d4639a324
#: ../../topics/forms/modelforms.txt:66
msgid "``DateTimeField``"
msgstr ""

# 33bc6d32c7d54615bd141a49f71443db
# 8e8db5e383d941b88358e403fef95203
#: ../../topics/forms/modelforms.txt:68
msgid "``DecimalField``"
msgstr ""

# e56a93bdd35f46f4a057a85ddf33258a
# 66c4553a93ab475093e51057079582cf
#: ../../topics/forms/modelforms.txt:70
msgid "``EmailField``"
msgstr ""

# c49d23850d5c4984b57708bc426931cf
# 42b47200f95c4e1dbc3db6907c99f293
#: ../../topics/forms/modelforms.txt:72
msgid "``FileField``"
msgstr ""

# 8764243b54d846eeb7ba808f7164c734
#: ../../topics/forms/modelforms.txt:74
msgid "``FilePathField``"
msgstr ""

# efa11955c3c84a0a980518689d8c63a4
# a3cf844bd5d94a5bb2b891d0ca1fcea3
#: ../../topics/forms/modelforms.txt:76
msgid "``FloatField``"
msgstr ""

# 21384aa8c1f54461987730b23f512619
#: ../../topics/forms/modelforms.txt:78
msgid "``ForeignKey``"
msgstr ""

# f91c090e382141bdacff9ef3fa8762ad
#: ../../topics/forms/modelforms.txt:78
msgid "``ModelChoiceField`` (see below)"
msgstr ""

# c72fa12e55fb4710b76791f2df9bb6b2
# d9ed328cac5746b9b20319d64d17df5f
#: ../../topics/forms/modelforms.txt:80
msgid "``ImageField``"
msgstr ""

# 1245259779164e3bbb3322c6379c8d59
# f4a138fc06e542dea27847b01d66e9c8
# 645e4c814b0347fb891f60f5574dcb53
# 81710ff55f0546aebcaf77adbc40930b
# 3809b4e1d5f04146933ca28a4b4038d3
#: ../../topics/forms/modelforms.txt:82 ../../topics/forms/modelforms.txt:96
#: ../../topics/forms/modelforms.txt:98 ../../topics/forms/modelforms.txt:102
msgid "``IntegerField``"
msgstr ""

# 6bbc5581d0724fc4b6f4129654c5599a
# d8fa418a1de04bd0832554c28b0a5dae
#: ../../topics/forms/modelforms.txt:84
msgid "``IPAddressField``"
msgstr ""

# 816d0283938b464b86287472defad058
# 545d44457fb84045b189e1ab4596485a
#: ../../topics/forms/modelforms.txt:86
msgid "``GenericIPAddressField``"
msgstr ""

# 421460ccd87742b298fa3c947629ea6e
#: ../../topics/forms/modelforms.txt:88
msgid "``ManyToManyField``"
msgstr ""

# 81aff50962ca4198a47c0293863a9ecb
#: ../../topics/forms/modelforms.txt:88
msgid "``ModelMultipleChoiceField`` (see below)"
msgstr ""

# 1fd5aac86cb24ea3affa42e500b0137e
#: ../../topics/forms/modelforms.txt:91
msgid "``NullBooleanField``"
msgstr ""

# 8cb63eef569a46948a52d0f0c53ef939
#: ../../topics/forms/modelforms.txt:93
msgid "``PhoneNumberField``"
msgstr ""

# 6ae8ca95521e447289cf292c820e5b66
#: ../../topics/forms/modelforms.txt:93
msgid "``USPhoneNumberField`` (from ``django.contrib.localflavor.us``)"
msgstr ""

# b62aca9ecae048ee8794c8758df50362
#: ../../topics/forms/modelforms.txt:96
msgid "``PositiveIntegerField``"
msgstr ""

# 66315c2be8634bceaad54b1b7d865368
#: ../../topics/forms/modelforms.txt:98
msgid "``PositiveSmallIntegerField``"
msgstr ""

# 8453713ad0524f9abd9e513d5ea77bc3
# a65aaf0a279c46e79b8ec1f2742431c1
#: ../../topics/forms/modelforms.txt:100
msgid "``SlugField``"
msgstr ""

# 9071904322354d3298423dff8bc139f8
#: ../../topics/forms/modelforms.txt:102
msgid "``SmallIntegerField``"
msgstr ""

# eef689f579c148528bc603fefc0ae9c6
#: ../../topics/forms/modelforms.txt:104
msgid "``TextField``"
msgstr ""

# ec5dd758e8cc48aebb49b9bff3f057a5
#: ../../topics/forms/modelforms.txt:104
msgid "``CharField`` with ``widget=forms.Textarea``"
msgstr ""

# 74c36398357c42e8b5205af6daf7491c
# 70fdbd446f3a4c68be5a64e441179992
#: ../../topics/forms/modelforms.txt:107
msgid "``TimeField``"
msgstr ""

# 76c227648c594ad3a7118f402f0a17ce
#: ../../topics/forms/modelforms.txt:109
msgid "``URLField``"
msgstr ""

# d21924b3a80b47a2861351cbf3912140
#: ../../topics/forms/modelforms.txt:109
msgid ""
"``URLField`` with ``verify_exists`` set to the model field's "
"``verify_exists``"
msgstr ""

# d8e5d398bf3d429da9668a75b53610bc
#: ../../topics/forms/modelforms.txt:117
msgid ""
"As you might expect, the ``ForeignKey`` and ``ManyToManyField`` model field "
"types are special cases:"
msgstr ""

# 3f70e766518b4fbd8e8a02aa49dc70a3
#: ../../topics/forms/modelforms.txt:120
msgid ""
"``ForeignKey`` is represented by ``django.forms.ModelChoiceField``, which is "
"a ``ChoiceField`` whose choices are a model ``QuerySet``."
msgstr ""

# 575ab9e2d065461288e84b50d8f50813
#: ../../topics/forms/modelforms.txt:123
msgid ""
"``ManyToManyField`` is represented by ``django.forms."
"ModelMultipleChoiceField``, which is a ``MultipleChoiceField`` whose choices "
"are a model ``QuerySet``."
msgstr ""

# 616fb04c1f174e63b4472418535fbffb
#: ../../topics/forms/modelforms.txt:127
msgid "In addition, each generated form field has attributes set as follows:"
msgstr ""

# 379d3de86dd64306821c687a4d91324f
#: ../../topics/forms/modelforms.txt:129
msgid ""
"If the model field has ``blank=True``, then ``required`` is set to ``False`` "
"on the form field. Otherwise, ``required=True``."
msgstr ""

# d0ec10fa42834b9fb142457f9e7862ea
#: ../../topics/forms/modelforms.txt:132
msgid ""
"The form field's ``label`` is set to the ``verbose_name`` of the model "
"field, with the first character capitalized."
msgstr ""

# d6003399f104476e89fa60808ae6a63e
#: ../../topics/forms/modelforms.txt:135
msgid ""
"The form field's ``help_text`` is set to the ``help_text`` of the model "
"field."
msgstr ""

# 5d9c58fda71645c19d8f026a96166970
#: ../../topics/forms/modelforms.txt:138
msgid ""
"If the model field has ``choices`` set, then the form field's ``widget`` "
"will be set to ``Select``, with choices coming from the model field's "
"``choices``. The choices will normally include the blank choice which is "
"selected by default. If the field is required, this forces the user to make "
"a selection. The blank choice will not be included if the model field has "
"``blank=False`` and an explicit ``default`` value (the ``default`` value "
"will be initially selected instead)."
msgstr ""

# e601ef90e37f4bf2b7429543115fbef4
#: ../../topics/forms/modelforms.txt:146
msgid ""
"Finally, note that you can override the form field used for a given model "
"field. See `Overriding the default field types or widgets`_ below."
msgstr ""

# d3a8dce017724f678bba5e753cc9dc70
#: ../../topics/forms/modelforms.txt:150
msgid "A full example"
msgstr ""

# d33c37c0ac59452f8c96f3bfc4d98d98
#: ../../topics/forms/modelforms.txt:152
msgid "Consider this set of models::"
msgstr ""

# b02a2281dec04502955c5fb0e93409f5
#: ../../topics/forms/modelforms.txt:183
msgid ""
"With these models, the ``ModelForm`` subclasses above would be roughly "
"equivalent to this (the only difference being the ``save()`` method, which "
"we'll discuss in a moment.)::"
msgstr ""

# f4f92dae1d7a4e649e59f515e8e20f95
#: ../../topics/forms/modelforms.txt:200
msgid "The ``is_valid()`` method and ``errors``"
msgstr ""

# 102efa058a7d4ca189783c619765c864
#: ../../topics/forms/modelforms.txt:202
msgid ""
"The first time you call ``is_valid()`` or access the ``errors`` attribute of "
"a ``ModelForm`` triggers form validation as well as :ref:`model validation "
"<validating-objects>`. This has the side-effect of cleaning the model you "
"pass to the ``ModelForm`` constructor. For instance, calling ``is_valid()`` "
"on your form will convert any date fields on your model to actual date "
"objects."
msgstr ""

# 59ff0730d50d4051b74feed1a1ba73c0
#: ../../topics/forms/modelforms.txt:210
msgid "The ``save()`` method"
msgstr ""

# a1e4175e18a943d1b2c05fb6c1909eae
#: ../../topics/forms/modelforms.txt:212
msgid ""
"Every form produced by ``ModelForm`` also has a ``save()`` method. This "
"method creates and saves a database object from the data bound to the form. "
"A subclass of ``ModelForm`` can accept an existing model instance as the "
"keyword argument ``instance``; if this is supplied, ``save()`` will update "
"that instance. If it's not supplied, ``save()`` will create a new instance "
"of the specified model::"
msgstr ""

# c7c2df7bb5714845952a905f57ad9e58
#: ../../topics/forms/modelforms.txt:236
msgid ""
"Note that ``save()`` will raise a ``ValueError`` if the data in the form "
"doesn't validate -- i.e., if form.errors evaluates to True."
msgstr ""

# ac460c71beb94da299fd74f38ae0740f
#: ../../topics/forms/modelforms.txt:239
msgid ""
"This ``save()`` method accepts an optional ``commit`` keyword argument, "
"which accepts either ``True`` or ``False``. If you call ``save()`` with "
"``commit=False``, then it will return an object that hasn't yet been saved "
"to the database. In this case, it's up to you to call ``save()`` on the "
"resulting model instance. This is useful if you want to do custom processing "
"on the object before saving it, or if you want to use one of the "
"specialized :ref:`model saving options <ref-models-force-insert>`. "
"``commit`` is ``True`` by default."
msgstr ""

# a099db13a8aa43e78e5bdc2fcef8ad84
#: ../../topics/forms/modelforms.txt:248
msgid ""
"Another side effect of using ``commit=False`` is seen when your model has a "
"many-to-many relation with another model. If your model has a many-to-many "
"relation and you specify ``commit=False`` when you save a form, Django "
"cannot immediately save the form data for the many-to-many relation. This is "
"because it isn't possible to save many-to-many data for an instance until "
"the instance exists in the database."
msgstr ""

# e25fd4b486f143b999a17013b3dd9dba
#: ../../topics/forms/modelforms.txt:255
msgid ""
"To work around this problem, every time you save a form using "
"``commit=False``, Django adds a ``save_m2m()`` method to your ``ModelForm`` "
"subclass. After you've manually saved the instance produced by the form, you "
"can invoke ``save_m2m()`` to save the many-to-many form data. For example::"
msgstr ""

# 5f39453ac64d4e3184162909bc904baa
#: ../../topics/forms/modelforms.txt:275
msgid ""
"Calling ``save_m2m()`` is only required if you use ``save(commit=False)``. "
"When you use a simple ``save()`` on a form, all data -- including many-to-"
"many data -- is saved without the need for any additional method calls. For "
"example::"
msgstr ""

# 976c7fdd4690445188ab7a257b84b037
#: ../../topics/forms/modelforms.txt:287
msgid ""
"Other than the ``save()`` and ``save_m2m()`` methods, a ``ModelForm`` works "
"exactly the same way as any other ``forms`` form. For example, the ``is_valid"
"()`` method is used to check for validity, the ``is_multipart()`` method is "
"used to determine whether a form requires multipart file upload (and hence "
"whether ``request.FILES`` must be passed to the form), etc. See :ref:"
"`binding-uploaded-files` for more information."
msgstr ""

# 159229b967d440fa971664ae624f64f8
#: ../../topics/forms/modelforms.txt:295
msgid "Using a subset of fields on the form"
msgstr ""

# f21d73cc68114d769e9a607ae925aef4
#: ../../topics/forms/modelforms.txt:297
msgid ""
"In some cases, you may not want all the model fields to appear on the "
"generated form. There are three ways of telling ``ModelForm`` to use only a "
"subset of the model fields:"
msgstr ""

# ab66a37acb654e8487a39f3f06af0016
#: ../../topics/forms/modelforms.txt:301
msgid ""
"Set ``editable=False`` on the model field. As a result, *any* form created "
"from the model via ``ModelForm`` will not include that field."
msgstr ""

# 6484d5fb8994460f871f05d84cd78f45
#: ../../topics/forms/modelforms.txt:305
msgid ""
"Use the ``fields`` attribute of the ``ModelForm``'s inner ``Meta`` class.  "
"This attribute, if given, should be a list of field names to include in the "
"form. The order in which the fields names are specified in that list is "
"respected when the form renders them."
msgstr ""

# 07679bc265a843f2bcc33263801d4698
#: ../../topics/forms/modelforms.txt:310
msgid ""
"Use the ``exclude`` attribute of the ``ModelForm``'s inner ``Meta`` class.  "
"This attribute, if given, should be a list of field names to exclude from "
"the form."
msgstr ""

# 3c77d5ec20654d5d8d2785aebcd7ea05
#: ../../topics/forms/modelforms.txt:314
msgid ""
"For example, if you want a form for the ``Author`` model (defined above) "
"that includes only the ``name`` and ``title`` fields, you would specify "
"``fields`` or ``exclude`` like this::"
msgstr ""

# 6413fc80f1ea435fa8b4a5650dba5dc1
#: ../../topics/forms/modelforms.txt:328
msgid ""
"Since the Author model has only 3 fields, 'name', 'title', and 'birth_date', "
"the forms above will contain exactly the same fields."
msgstr ""

# 69365d100fa344209fe9e53ff62bae89
#: ../../topics/forms/modelforms.txt:333
msgid ""
"If you specify ``fields`` or ``exclude`` when creating a form with "
"``ModelForm``, then the fields that are not in the resulting form will not "
"be set by the form's ``save()`` method. Also, if you manually add the "
"excluded fields back to the form, they will not be initialized from the "
"model instance."
msgstr ""

# 7706dc4d8a9f45dea80e78917bd8733c
#: ../../topics/forms/modelforms.txt:339
msgid ""
"Django will prevent any attempt to save an incomplete model, so if the model "
"does not allow the missing fields to be empty, and does not provide a "
"default value for the missing fields, any attempt to ``save()`` a "
"``ModelForm`` with missing fields will fail.  To avoid this failure, you "
"must instantiate your model with initial values for the missing, but "
"required fields::"
msgstr ""

# 97747657ef5a467fb5745285f0b8dd36
#: ../../topics/forms/modelforms.txt:350
msgid ""
"Alternatively, you can use ``save(commit=False)`` and manually set any extra "
"required fields::"
msgstr ""

# d77cb45b0fa342d0ad3d8e830d3a757f
#: ../../topics/forms/modelforms.txt:358
msgid ""
"See the `section on saving forms`_ for more details on using ``save"
"(commit=False)``."
msgstr ""

# 038db83571244b4289538f627fd96e57
#: ../../topics/forms/modelforms.txt:364
msgid "Overriding the default field types or widgets"
msgstr ""

# 5a19a0476457486cbb5d5e6aca2e32e6
#: ../../topics/forms/modelforms.txt:369
msgid ""
"The default field types, as described in the `Field types`_ table above, are "
"sensible defaults. If you have a ``DateField`` in your model, chances are "
"you'd want that to be represented as a ``DateField`` in your form. But "
"``ModelForm`` gives you the flexibility of changing the form field type and "
"widget for a given model field."
msgstr ""

# 85e3e1dd4c6242819caf18d56d724297
#: ../../topics/forms/modelforms.txt:375
msgid ""
"To specify a custom widget for a field, use the ``widgets`` attribute of the "
"inner ``Meta`` class. This should be a dictionary mapping field names to "
"widget classes or instances."
msgstr ""

# 33e67caed1d14f1bacd7aeaaedf5cb1c
#: ../../topics/forms/modelforms.txt:379
msgid ""
"For example, if you want the a ``CharField`` for the ``name`` attribute of "
"``Author`` to be represented by a ``<textarea>`` instead of its default "
"``<input type=\"text\">``, you can override the field's widget::"
msgstr ""

# 5c88ded26a2c4e8581dfb56eb8a08cd1
#: ../../topics/forms/modelforms.txt:394
msgid ""
"The ``widgets`` dictionary accepts either widget instances (e.g., ``Textarea"
"(...)``) or classes (e.g., ``Textarea``)."
msgstr ""

# c1ccecb5913f442c8c2a4ce70e2865a2
#: ../../topics/forms/modelforms.txt:397
msgid ""
"If you want to further customize a field -- including its type, label, etc. "
"-- you can do this by declaratively specifying fields like you would in a "
"regular ``Form``. Declared fields will override the default ones generated "
"by using the ``model`` attribute."
msgstr ""

# 1f4cdf68f0704593ba7509e8c79b9a3a
#: ../../topics/forms/modelforms.txt:402
msgid ""
"For example, if you wanted to use ``MyDateFormField`` for the ``pub_date`` "
"field, you could do the following::"
msgstr ""

# 179e9a4196b04039a17e6931b018b5da
#: ../../topics/forms/modelforms.txt:411
msgid ""
"If you want to override a field's default label, then specify the ``label`` "
"parameter when declaring the form field::"
msgstr ""

# 180d6a886ce949eca3d6969719b09335
#: ../../topics/forms/modelforms.txt:422
msgid ""
"If you explicitly instantiate a form field like this, Django assumes that "
"you want to completely define its behavior; therefore, default attributes "
"(such as ``max_length`` or ``required``) are not drawn from the "
"corresponding model. If you want to maintain the behavior specified in the "
"model, you must set the relevant arguments explicitly when declaring the "
"form field."
msgstr ""

# fc368e34c0b84eeba22c81936a74357d
#: ../../topics/forms/modelforms.txt:428
msgid "For example, if the ``Article`` model looks like this::"
msgstr ""

# 45f1c698375448eea5a554f28d336012
#: ../../topics/forms/modelforms.txt:435
msgid ""
"and you want to do some custom validation for ``headline``, while keeping "
"the ``blank`` and ``help_text`` values as specified, you might define "
"``ArticleForm`` like this::"
msgstr ""

# a93b9742d110436aa95142592660e37d
#: ../../topics/forms/modelforms.txt:446
msgid ""
"See the :doc:`form field documentation </ref/forms/fields>` for more "
"information on fields and their arguments."
msgstr ""

# 1c3defb037dd4fd094aa00b637a8746a
#: ../../topics/forms/modelforms.txt:450
msgid "Changing the order of fields"
msgstr ""

# fc6800b81596481e8906bdcd8cdbcfb4
#: ../../topics/forms/modelforms.txt:452
msgid ""
"By default, a ``ModelForm`` will render fields in the same order that they "
"are defined on the model, with ``ManyToManyField`` instances appearing last. "
"If you want to change the order in which fields are rendered, you can use "
"the ``fields`` attribute on the ``Meta`` class."
msgstr ""

# c42042c8554a4bfa8e75290fe48c51ea
#: ../../topics/forms/modelforms.txt:457
msgid ""
"The ``fields`` attribute defines the subset of model fields that will be "
"rendered, and the order in which they will be rendered. For example given "
"this model::"
msgstr ""

# e9862480e96d478f9513aef161c2f9c9
#: ../../topics/forms/modelforms.txt:465
msgid ""
"the ``author`` field would be rendered first. If we wanted the title field "
"to be rendered first, we could specify the following ``ModelForm``::"
msgstr ""

# 63296a4fe90145c79658fe6815a9c4fd
#: ../../topics/forms/modelforms.txt:476
msgid "Overriding the clean() method"
msgstr ""

# 442e51b9c13549d2a95dd01bce4b4d1b
#: ../../topics/forms/modelforms.txt:478
msgid ""
"You can override the ``clean()`` method on a model form to provide "
"additional validation in the same way you can on a normal form."
msgstr ""

# 0a9c3e6c0baf4b9d9021a50acab34f18
#: ../../topics/forms/modelforms.txt:481
msgid ""
"In this regard, model forms have two specific characteristics when compared "
"to forms:"
msgstr ""

# be58f2c242a74000a0e9e4b8300b3987
#: ../../topics/forms/modelforms.txt:484
msgid ""
"By default the ``clean()`` method validates the uniqueness of fields that "
"are marked as ``unique``, ``unique_together`` or ``unique_for_date|month|"
"year`` on the model.  Therefore, if you would like to override the ``clean()"
"`` method and maintain the default validation, you must call the parent "
"class's ``clean()`` method."
msgstr ""

# 6057dc7e35004bbab55b9c34576efb10
#: ../../topics/forms/modelforms.txt:490
msgid ""
"Also, a model form instance bound to a model object will contain a ``self."
"instance`` attribute that gives model form methods access to that specific "
"model instance."
msgstr ""

# 5572bd4167d64e008dd6bd0116853c2e
#: ../../topics/forms/modelforms.txt:495
msgid "Form inheritance"
msgstr ""

# 47830ef652d8421b837f77d091ea836e
#: ../../topics/forms/modelforms.txt:497
msgid ""
"As with basic forms, you can extend and reuse ``ModelForms`` by inheriting "
"them. This is useful if you need to declare extra fields or extra methods on "
"a parent class for use in a number of forms derived from models. For "
"example, using the previous ``ArticleForm`` class::"
msgstr ""

# 1c28dfcfaa0c4fd590163f397d065c6d
#: ../../topics/forms/modelforms.txt:506
msgid ""
"This creates a form that behaves identically to ``ArticleForm``, except "
"there's some extra validation and cleaning for the ``pub_date`` field."
msgstr ""

# 4a3c30e1a2294a018005c6a3cfb8c5c5
#: ../../topics/forms/modelforms.txt:509
msgid ""
"You can also subclass the parent's ``Meta`` inner class if you want to "
"change the ``Meta.fields`` or ``Meta.excludes`` lists::"
msgstr ""

# be8b1672fe3a40cf81709561afbf6467
#: ../../topics/forms/modelforms.txt:516
msgid ""
"This adds the extra method from the ``EnhancedArticleForm`` and modifies the "
"original ``ArticleForm.Meta`` to remove one field."
msgstr ""

# 4895da4ebdbc43469aea14793567fd90
#: ../../topics/forms/modelforms.txt:519
msgid "There are a couple of things to note, however."
msgstr ""

# 76a182f7b0cc4462b80b2c8ca58820a9
#: ../../topics/forms/modelforms.txt:521
msgid ""
"Normal Python name resolution rules apply. If you have multiple base classes "
"that declare a ``Meta`` inner class, only the first one will be used. This "
"means the child's ``Meta``, if it exists, otherwise the ``Meta`` of the "
"first parent, etc."
msgstr ""

# f43e58017bea417bb69ee686be7e5aaf
#: ../../topics/forms/modelforms.txt:526
msgid ""
"For technical reasons, a subclass cannot inherit from both a ``ModelForm`` "
"and a ``Form`` simultaneously."
msgstr ""

# 7bf288d3ea7f41e58c325835bc4d9424
#: ../../topics/forms/modelforms.txt:529
msgid ""
"Chances are these notes won't affect you unless you're trying to do "
"something tricky with subclassing."
msgstr ""

# 62d0407a175d407fafaefdcc329a2e0e
#: ../../topics/forms/modelforms.txt:533
msgid "Interaction with model validation"
msgstr ""

# 5e9c8df10a784a9c9ba816e3db6ab6f5
#: ../../topics/forms/modelforms.txt:535
msgid ""
"As part of its validation process, ``ModelForm`` will call the ``clean()`` "
"method of each field on your model that has a corresponding field on your "
"form. If you have excluded any model fields, validation will not be run on "
"those fields. See the :doc:`form validation </ref/forms/validation>` "
"documentation for more on how field cleaning and validation work. Also, your "
"model's ``clean()`` method will be called before any uniqueness checks are "
"made. See :ref:`Validating objects <validating-objects>` for more "
"information on the model's ``clean()`` hook."
msgstr ""

# 3b9c203b812442f1a59ec8f85ee60938
#: ../../topics/forms/modelforms.txt:547
msgid "Model formsets"
msgstr ""

# 076c651eadd74db4946580ea1a37326d
#: ../../topics/forms/modelforms.txt:549
msgid ""
"Like :doc:`regular formsets </topics/forms/formsets>`, Django provides a "
"couple of enhanced formset classes that make it easy to work with Django "
"models. Let's reuse the ``Author`` model from above::"
msgstr ""

# 05b29d1b9a91425396b354ddcbfc06fb
#: ../../topics/forms/modelforms.txt:556
msgid ""
"This will create a formset that is capable of working with the data "
"associated with the ``Author`` model. It works just like a regular formset::"
msgstr ""

# 1ee0a45f0ec140ee8242050637b29652
#: ../../topics/forms/modelforms.txt:572
msgid ""
"``modelformset_factory`` uses ``formset_factory`` to generate formsets. This "
"means that a model formset is just an extension of a basic formset that "
"knows how to interact with a particular model."
msgstr ""

# c786f17278ab418c8bd7b37b5ab7173b
#: ../../topics/forms/modelforms.txt:577
msgid "Changing the queryset"
msgstr ""

# 1a4e26fcea184aceb980ec8c996d8f5d
#: ../../topics/forms/modelforms.txt:579
msgid ""
"By default, when you create a formset from a model, the formset will use a "
"queryset that includes all objects in the model (e.g., ``Author.objects.all()"
"``). You can override this behavior by using the ``queryset`` argument::"
msgstr ""

# c53eda72b4224cea8309fbceea5545b0
#: ../../topics/forms/modelforms.txt:586
msgid ""
"Alternatively, you can create a subclass that sets ``self.queryset`` in "
"``__init__``::"
msgstr ""

# 86efb35738e24ef597642d29e221f8ae
#: ../../topics/forms/modelforms.txt:596
msgid "Then, pass your ``BaseAuthorFormSet`` class to the factory function::"
msgstr ""

# 553721bf399041a699476d4be6a35159
#: ../../topics/forms/modelforms.txt:600
msgid ""
"If you want to return a formset that doesn't include *any* pre-existing "
"instances of the model, you can specify an empty QuerySet::"
msgstr ""

# 30793efb05874e60bc8d878f6ac63937
#: ../../topics/forms/modelforms.txt:607
msgid "Controlling which fields are used with ``fields`` and ``exclude``"
msgstr ""

# f90e87993c67429fa85d76dbbce1d745
#: ../../topics/forms/modelforms.txt:609
msgid ""
"By default, a model formset uses all fields in the model that are not marked "
"with ``editable=False``. However, this can be overridden at the formset "
"level::"
msgstr ""

# 6962d08382314ebe89d3d6d84b582e80
#: ../../topics/forms/modelforms.txt:614
msgid ""
"Using ``fields`` restricts the formset to use only the given fields. "
"Alternatively, you can take an \"opt-out\" approach, specifying which fields "
"to exclude::"
msgstr ""

# f9eaedde3291407f9fd0b6ba98632d82
#: ../../topics/forms/modelforms.txt:621
msgid "Providing initial values"
msgstr ""

# 62524518ef764eac98202d544b575bf7
#: ../../topics/forms/modelforms.txt:625
msgid ""
"As with regular formsets, it's possible to :ref:`specify initial data "
"<formsets-initial-data>` for forms in the formset by specifying an "
"``initial`` parameter when instantiating the model formset class returned by "
"``modelformset_factory``. However, with model formsets, the initial values "
"only apply to extra forms, those that aren't bound to an existing object "
"instance."
msgstr ""

# 6697ae52fb5c40ffb6c3e378aef98e2e
#: ../../topics/forms/modelforms.txt:634
msgid "Saving objects in the formset"
msgstr ""

# 4989863a97674280bffb147f92d85cfa
#: ../../topics/forms/modelforms.txt:636
msgid ""
"As with a ``ModelForm``, you can save the data as a model object. This is "
"done with the formset's ``save()`` method::"
msgstr ""

# 4f2f19f46fd54d85a0045fcbb32dd8f9
#: ../../topics/forms/modelforms.txt:645
msgid ""
"The ``save()`` method returns the instances that have been saved to the "
"database. If a given instance's data didn't change in the bound data, the "
"instance won't be saved to the database and won't be included in the return "
"value (``instances``, in the above example)."
msgstr ""

# 10a28aedfb1249a8a769382235a85935
#: ../../topics/forms/modelforms.txt:650
msgid ""
"When fields are missing from the form (for example because they have been "
"excluded), these fields will not be set by the ``save()`` method. You can "
"find more information about this restriction, which also holds for regular "
"``ModelForms``, in `Using a subset of fields on the form`_."
msgstr ""

# 05acf16f516e4ffaa1d9259e0eecb3a6
#: ../../topics/forms/modelforms.txt:656
msgid "Pass ``commit=False`` to return the unsaved model instances::"
msgstr ""

# 16e85297a9cd4de8a61629c405d685d8
#: ../../topics/forms/modelforms.txt:664
msgid ""
"This gives you the ability to attach data to the instances before saving "
"them to the database. If your formset contains a ``ManyToManyField``, you'll "
"also need to call ``formset.save_m2m()`` to ensure the many-to-many "
"relationships are saved properly."
msgstr ""

# d8a0157413084a019d4f1260f9865ec1
#: ../../topics/forms/modelforms.txt:672
msgid "Limiting the number of editable objects"
msgstr ""

# 396514425c12457ab0ad639b563e6e01
#: ../../topics/forms/modelforms.txt:676
msgid ""
"As with regular formsets, you can use the ``max_num`` and ``extra`` "
"parameters to ``modelformset_factory`` to limit the number of extra forms "
"displayed."
msgstr ""

# fb753ddad7ae4d00bb85f970fce5e3a7
#: ../../topics/forms/modelforms.txt:679
msgid "``max_num`` does not prevent existing objects from being displayed::"
msgstr ""

# 3a152e3c4d2548cab52d7aea1c112b62
#: ../../topics/forms/modelforms.txt:689
msgid ""
"If the value of ``max_num`` is greater than the number of existing related "
"objects, up to ``extra`` additional blank forms will be added to the "
"formset, so long as the total number of forms does not exceed ``max_num``::"
msgstr ""

# 1772b5c896134cf8a5b411f20ce8cec9
#: ../../topics/forms/modelforms.txt:704
msgid ""
"A ``max_num`` value of ``None`` (the default) puts no limit on the number of "
"forms displayed."
msgstr ""

# 6b37ec40525041a5939d6948d4066e84
#: ../../topics/forms/modelforms.txt:708
msgid "Using a model formset in a view"
msgstr ""

# d65a5e43d36d49f6a0573804476e2aeb
#: ../../topics/forms/modelforms.txt:710
msgid ""
"Model formsets are very similar to formsets. Let's say we want to present a "
"formset to edit ``Author`` model instances::"
msgstr ""

# ade2a7df4b0e4df39ec53a964a8c7f03
#: ../../topics/forms/modelforms.txt:726
msgid ""
"As you can see, the view logic of a model formset isn't drastically "
"different than that of a \"normal\" formset. The only difference is that we "
"call ``formset.save()`` to save the data into the database. (This was "
"described above, in :ref:`saving-objects-in-the-formset`.)"
msgstr ""

# 6b3b36bdaae3453696a36e62e383a3b2
#: ../../topics/forms/modelforms.txt:732
msgid "Overiding ``clean()`` on a ``model_formset``"
msgstr ""

# e164ffd55e0c4a9cb67317b495f0c0b1
#: ../../topics/forms/modelforms.txt:734
msgid ""
"Just like with ``ModelForms``, by default the ``clean()`` method of a "
"``model_formset`` will validate that none of the items in the formset "
"violate the unique constraints on your model (either ``unique``, "
"``unique_together`` or ``unique_for_date|month|year``).  If you want to "
"override the ``clean()`` method on a ``model_formset`` and maintain this "
"validation, you must call the parent class's ``clean`` method::"
msgstr ""

# a210b5b33de14b6cb67f7647529d64f4
#: ../../topics/forms/modelforms.txt:749
msgid "Using a custom queryset"
msgstr ""

# 0a092f863efa45bf8f8d672a888a65ef
#: ../../topics/forms/modelforms.txt:751
msgid ""
"As stated earlier, you can override the default queryset used by the model "
"formset::"
msgstr ""

# 6938d3361c1c413d809b800dcdf8e31d
#: ../../topics/forms/modelforms.txt:768
msgid ""
"Note that we pass the ``queryset`` argument in both the ``POST`` and ``GET`` "
"cases in this example."
msgstr ""

# 3b2980b888ed48cc9a5c70869f0d3450
#: ../../topics/forms/modelforms.txt:772
msgid "Using the formset in the template"
msgstr ""

# 0284bb737ab041a7be93410582b0ed8f
#: ../../topics/forms/modelforms.txt:776
msgid "There are three ways to render a formset in a Django template."
msgstr ""

# 7aee049027da4ab790b1671cc37ed034
#: ../../topics/forms/modelforms.txt:778
msgid "First, you can let the formset do most of the work::"
msgstr ""

# d97db249a2bf415d92987ae7e8918ed0
#: ../../topics/forms/modelforms.txt:784
msgid ""
"Second, you can manually render the formset, but let the form deal with "
"itself::"
msgstr ""

# 593b7cd5b9ba44299acfb292a5c01416
#: ../../topics/forms/modelforms.txt:794
msgid ""
"When you manually render the forms yourself, be sure to render the "
"management form as shown above. See the :ref:`management form documentation "
"<understanding-the-managementform>`."
msgstr ""

# f6fafc94731d437e9e7fddcbd96a7b4d
#: ../../topics/forms/modelforms.txt:798
msgid "Third, you can manually render each field::"
msgstr ""

# c9e959120a494cff903db1622c15d02b
#: ../../topics/forms/modelforms.txt:809
msgid ""
"If you opt to use this third method and you don't iterate over the fields "
"with a ``{% for %}`` loop, you'll need to render the primary key field. For "
"example, if you were rendering the ``name`` and ``age`` fields of a model::"
msgstr ""

# 633612c770b44fd8bb92f12c30dff76f
#: ../../topics/forms/modelforms.txt:824
msgid ""
"Notice how we need to explicitly render ``{{ form.id }}``. This ensures that "
"the model formset, in the ``POST`` case, will work correctly. (This example "
"assumes a primary key named ``id``. If you've explicitly defined your own "
"primary key that isn't called ``id``, make sure it gets rendered.)"
msgstr ""

# 5554b8f4a56f4793a7b0b6ef3817bfb7
#: ../../topics/forms/modelforms.txt:832
msgid "Inline formsets"
msgstr ""

# 72285d766ae7418b9fa6339a46c565f3
#: ../../topics/forms/modelforms.txt:834
msgid ""
"Inline formsets is a small abstraction layer on top of model formsets. These "
"simplify the case of working with related objects via a foreign key. Suppose "
"you have these two models::"
msgstr ""

# 7ae3c177c58c4e9893a60b117808ba1e
#: ../../topics/forms/modelforms.txt:845
msgid ""
"If you want to create a formset that allows you to edit books belonging to a "
"particular author, you could do this::"
msgstr ""

# 4e4eadc98e8b4ccf8abc615f83ea680f
#: ../../topics/forms/modelforms.txt:854
msgid ""
"``inlineformset_factory`` uses ``modelformset_factory`` and marks "
"``can_delete=True``."
msgstr ""

# 4464dad2da0e4425823141b6ff153ec9
#: ../../topics/forms/modelforms.txt:859
msgid ""
":ref:`Manually rendered can_delete and can_order <manually-rendered-can-"
"delete-and-can-order>`."
msgstr ""

# b5af38258f324f2abe030cd58b6bff40
#: ../../topics/forms/modelforms.txt:862
msgid "More than one foreign key to the same model"
msgstr ""

# a37b22a1bb9e401f8e9fa476aee6b67f
#: ../../topics/forms/modelforms.txt:864
msgid ""
"If your model contains more than one foreign key to the same model, you'll "
"need to resolve the ambiguity manually using ``fk_name``. For example, "
"consider the following model::"
msgstr ""

# 2f9ce60f5092413b8d910cafba83ad10
#: ../../topics/forms/modelforms.txt:873
msgid "To resolve this, you can use ``fk_name`` to ``inlineformset_factory``::"
msgstr ""

# b3e0204a3d3948cc918d9b061379f315
#: ../../topics/forms/modelforms.txt:878
msgid "Using an inline formset in a view"
msgstr ""

# d0892d434f6543718f20affbc69e09bd
#: ../../topics/forms/modelforms.txt:880
msgid ""
"You may want to provide a view that allows a user to edit the related "
"objects of a model. Here's how you can do that::"
msgstr ""

# 5a3a09acf4a44b14b7751d2477f238aa
#: ../../topics/forms/modelforms.txt:897
msgid "Notice how we pass ``instance`` in both the ``POST`` and ``GET`` cases."
msgstr ""

# cd1e14cea8904c0d932216424ef7f929
# d84b87cd870249459a275df54f5995ff
#: ../../topics/generic-views.txt:3 ../../topics/http/generic-views.txt:3
msgid "Generic views"
msgstr ""

# daa19a8969844c029c45af43a01ee813
#: ../../topics/generic-views.txt:10
msgid ""
"From Django 1.3, function-based generic views have been deprecated in favor "
"of a class-based approach, described in the class-based views :doc:`topic "
"guide </topics/class-based-views>` and :doc:`detailed reference </ref/class-"
"based-views>`."
msgstr ""

# d0bcd114b779411eb3db38c034b9924f
#: ../../topics/generic-views.txt:34
msgid ""
"Display list and detail pages for a single object. If we were creating an "
"application to manage conferences then a ``talk_list`` view and a "
"``registered_user_list`` view would be examples of list views. A single talk "
"page is an example of what we call a \"detail\" view."
msgstr ""

# 58fe7bcd97db4146944599a4bbdb02a1
#: ../../topics/generic-views.txt:39
msgid ""
"Present date-based objects in year/month/day archive pages, associated "
"detail, and \"latest\" pages. The Django Weblog's (http://www.djangoproject."
"com/weblog/) year, month, and day archives are built with these, as would be "
"a typical newspaper's archives."
msgstr ""

# e7c472f24d2e4fb19143333b6b5fed0d
#: ../../topics/generic-views.txt:52
msgid "Using generic views"
msgstr ""

# 9d066288367f462b9093651a4c4f5b9b
#: ../../topics/generic-views.txt:54
msgid ""
"All of these views are used by creating configuration dictionaries in your "
"URLconf files and passing those dictionaries as the third member of the "
"URLconf tuple for a given pattern."
msgstr ""

# 84bf369edb644e3ea3ad4437797256a7
#: ../../topics/generic-views.txt:58
msgid ""
"For example, here's a simple URLconf you could use to present a static "
"\"about\" page::"
msgstr ""

# 50e90f9fd2e947d98a8eb2db8bafb242
#: ../../topics/generic-views.txt:70
msgid ""
"Though this might seem a bit \"magical\" at first glance  -- look, a view "
"with no code! --, actually the ``direct_to_template`` view simply grabs "
"information from the extra-parameters dictionary and uses that information "
"when rendering the view."
msgstr ""

# f36326fa1a3947df936895ec6759eb6f
#: ../../topics/generic-views.txt:75
msgid ""
"Because this generic view -- and all the others -- is a regular view "
"function like any other, we can reuse it inside our own views. As an "
"example, let's extend our \"about\" example to map URLs of the form ``/about/"
"<whatever>/`` to statically rendered ``about/<whatever>.html``. We'll do "
"this by first modifying the URLconf to point to a view function:"
msgstr ""

# eaa1c5619bb04455b8cb6e8a85ab3e35
#: ../../topics/generic-views.txt:94
msgid "Next, we'll write the ``about_pages`` view::"
msgstr ""

# 0d16917f86d84d528a4fb906da563749
#: ../../topics/generic-views.txt:106
msgid ""
"Here we're treating ``direct_to_template`` like any other function. Since it "
"returns an ``HttpResponse``, we can simply return it as-is. The only "
"slightly tricky business here is dealing with missing templates. We don't "
"want a nonexistent template to cause a server error, so we catch "
"``TemplateDoesNotExist`` exceptions and return 404 errors instead."
msgstr ""

# ee277f5968aa4bf9ad7839777edf3029
#: ../../topics/generic-views.txt:114
msgid ""
"Sharp-eyed readers may have noticed a possible security hole: we're "
"constructing the template name using interpolated content from the browser "
"(``template=\"about/%s.html\" % page``). At first glance, this looks like a "
"classic *directory traversal* vulnerability. But is it really?"
msgstr ""

# 02f851dcee354abf89e2af7ad2d6f1dd
#: ../../topics/generic-views.txt:119
msgid ""
"Not exactly. Yes, a maliciously crafted value of ``page`` could cause "
"directory traversal, but although ``page`` *is* taken from the request URL, "
"not every value will be accepted. The key is in the URLconf: we're using the "
"regular expression ``\\w+`` to match the ``page`` part of the URL, and ``"
"\\w`` only accepts letters and numbers. Thus, any malicious characters (dots "
"and slashes, here) will be rejected by the URL resolver before they reach "
"the view itself."
msgstr ""

# 2d735245bc9542d5a40425b27446de5a
#: ../../topics/generic-views.txt:130
msgid ""
"The ``direct_to_template`` certainly is useful, but Django's generic views "
"really shine when it comes to presenting views on your database content. "
"Because it's such a common task, Django comes with a handful of built-in "
"generic views that make generating list and detail views of objects "
"incredibly easy."
msgstr ""

# 7e51c3088df642c68420f28c14a40295
#: ../../topics/generic-views.txt:175
msgid ""
"That's all the Python code we need to write. We still need to write a "
"template, however. We could explicitly tell the ``object_list`` view which "
"template to use by including a ``template_name`` key in the extra arguments "
"dictionary, but in the absence of an explicit template Django will infer one "
"from the object's name. In this case, the inferred template will be ``"
"\"books/publisher_list.html\"`` -- the \"books\" part comes from the name of "
"the app that defines the model, while the \"publisher\" bit is just the "
"lowercased version of the model's name."
msgstr ""

# a988994ba5ab48098ec6fd0d5e6efef5
#: ../../topics/generic-views.txt:201
msgid ""
"That's really all there is to it. All the cool features of generic views "
"come from changing the \"info\" dictionary passed to the generic view. The :"
"doc:`generic views reference</ref/generic-views>` documents all the generic "
"views and all their options in detail; the rest of this document will "
"consider some of the common ways you might customize and extend generic "
"views."
msgstr ""

# 43680dabde2d4ce08593d9c3c86795d3
#: ../../topics/generic-views.txt:218
msgid ""
"Luckily, in nearly every one of these cases, there are ways to simply extend "
"generic views to handle a larger array of use cases. These situations "
"usually fall into a handful of patterns dealt with in the sections that "
"follow."
msgstr ""

# 876af712f9a54b91b10637503bb0aadf
#: ../../topics/generic-views.txt:225
msgid ""
"You might have noticed that our sample publisher list template stores all "
"the books in a variable named ``object_list``. While this works just fine, "
"it isn't all that \"friendly\" to template authors: they have to \"just know"
"\" that they're dealing with publishers here. A better name for that "
"variable would be ``publisher_list``; that variable's content is pretty "
"obvious."
msgstr ""

# e9c8de7182f647c88c2c2b226cafeec7
#: ../../topics/generic-views.txt:231
msgid ""
"We can change the name of that variable easily with the "
"``template_object_name`` argument:"
msgstr ""

# 299a987532b647259136dc9ab52e82e2
#: ../../topics/generic-views.txt:245
msgid ""
"Providing a useful ``template_object_name`` is always a good idea. Your "
"coworkers who design templates will thank you."
msgstr ""

# 97b1e8ea6d784d43a3ffd29832246c6e
#: ../../topics/generic-views.txt:251
msgid ""
"Often you simply need to present some extra information beyond that provided "
"by the generic view. For example, think of showing a list of all the books "
"on each publisher detail page. The ``object_detail`` generic view provides "
"the publisher to the context, but it seems there's no way to get additional "
"information in that template."
msgstr ""

# c423234e69c744ac82396c9ec33a96cf
#: ../../topics/generic-views.txt:257
msgid ""
"But there is: all generic views take an extra optional parameter, "
"``extra_context``. This is a dictionary of extra objects that will be added "
"to the template's context. So, to provide the list of all books on the "
"detail detail view, we'd use an info dict like this:"
msgstr ""

# 010f8d0514fd4060a9dfd86920da14f5
#: ../../topics/generic-views.txt:272
msgid ""
"This would populate a ``{{ book_list }}`` variable in the template context. "
"This pattern can be used to pass any information down into the template for "
"the generic view. It's very handy."
msgstr ""

# e22fb192b8e6456ea5afe5fad8ff89d0
#: ../../topics/generic-views.txt:276
msgid "However, there's actually a subtle bug here -- can you spot it?"
msgstr ""

# c4a48e52dfdd45b5965bb3b3000aa067
#: ../../topics/generic-views.txt:278
msgid ""
"The problem has to do with when the queries in ``extra_context`` are "
"evaluated. Because this example puts ``Book.objects.all()`` in the URLconf, "
"it will be evaluated only once (when the URLconf is first loaded). Once you "
"add or remove books, you'll notice that the generic view doesn't reflect "
"those changes until you reload the Web server (see :ref:`caching-and-"
"querysets` for more information about when QuerySets are cached and "
"evaluated)."
msgstr ""

# 68953130f7754750ab910494355819ab
#: ../../topics/generic-views.txt:287
msgid ""
"This problem doesn't apply to the ``queryset`` generic view argument. Since "
"Django knows that particular QuerySet should *never* be cached, the generic "
"view takes care of clearing the cache when each view is rendered."
msgstr ""

# e7fcbe0a61354409bb742405479f7585
#: ../../topics/generic-views.txt:291
msgid ""
"The solution is to use a callback in ``extra_context`` instead of a value. "
"Any callable (i.e., a function) that's passed to ``extra_context`` will be "
"evaluated when the view is rendered (instead of only once). You could do "
"this with an explicitly defined function:"
msgstr ""

# d42ca2f06ba94e349e5161d61e503713
#: ../../topics/generic-views.txt:307
msgid ""
"or you could use a less obvious but shorter version that relies on the fact "
"that ``Book.objects.all`` is itself a callable:"
msgstr ""

# 841414ccb1d843cfa9bc96d0832c672c
#: ../../topics/generic-views.txt:318
msgid ""
"Notice the lack of parentheses after ``Book.objects.all``; this references "
"the function without actually calling it (which the generic view will do "
"later)."
msgstr ""

# 545de033a1d445d681aaeae39b8a78b5
#: ../../topics/generic-views.txt:324
msgid ""
"Now let's take a closer look at this ``queryset`` key we've been using all "
"along. Most generic views take one of these ``queryset`` arguments -- it's "
"how the view knows which set of objects to display (see :doc:`/topics/db/"
"queries` for more information about ``QuerySet`` objects, and see the :doc:"
"`generic views reference</ref/generic-views>` for the complete details)."
msgstr ""

# 51b07760b79d496a84e492e6ea5ce9c1
#: ../../topics/generic-views.txt:330
msgid ""
"To pick a simple example, we might want to order a list of books by "
"publication date, with the most recent first:"
msgstr ""

# edc53c0b71254ec69b343eaf55caeee5
#: ../../topics/generic-views.txt:345
msgid ""
"That's a pretty simple example, but it illustrates the idea nicely. Of "
"course, you'll usually want to do more than just reorder objects. If you "
"want to present a list of books by a particular publisher, you can use the "
"same technique:"
msgstr ""

# 5fe0e13e4fdc46f2b5a35a4889e620ac
#: ../../topics/generic-views.txt:373
msgid ""
"If you get a 404 when requesting ``/books/acme/``, check to ensure you "
"actually have a Publisher with the name 'ACME Publishing'.  Generic views "
"have an ``allow_empty`` parameter for this case.  See the :doc:`generic "
"views reference</ref/generic-views>` for more details."
msgstr ""

# 99629493bd834fe39918181cb89739eb
#: ../../topics/generic-views.txt:379
msgid "Complex filtering with wrapper functions"
msgstr ""

# 5d5fd58ce3c745f48cfaa2f9e697d97e
#: ../../topics/generic-views.txt:381
msgid ""
"Another common need is to filter down the objects given in a list page by "
"some key in the URL. Earlier we hard-coded the publisher's name in the "
"URLconf, but what if we wanted to write a view that displayed all the books "
"by some arbitrary publisher? We can \"wrap\" the ``object_list`` generic "
"view to avoid writing a lot of code by hand. As usual, we'll start by "
"writing a URLconf:"
msgstr ""

# 3154e64e5ae542deaf480df06c6727f3
#: ../../topics/generic-views.txt:396
msgid "Next, we'll write the ``books_by_publisher`` view itself::"
msgstr ""

# ddc96a5ca0c943cc91ec68d5fdca6b2a
#: ../../topics/generic-views.txt:419
msgid ""
"This works because there's really nothing special about generic views -- "
"they're just Python functions. Like any view function, generic views expect "
"a certain set of arguments and return ``HttpResponse`` objects. Thus, it's "
"incredibly easy to wrap a small function around a generic view that does "
"additional work before (or after; see the next section) handing things off "
"to the generic view."
msgstr ""

# e0e6e0a50bf947d6a57efc18cc4a7424
#: ../../topics/generic-views.txt:427
msgid ""
"Notice that in the preceding example we passed the current publisher being "
"displayed in the ``extra_context``. This is usually a good idea in wrappers "
"of this nature; it lets the template know which \"parent\" object is "
"currently being browsed."
msgstr ""

# b61fe3359f314eef96d3397fd916546e
#: ../../topics/generic-views.txt:451
msgid ""
"The generic ``object_detail`` view, of course, wouldn't know anything about "
"this field, but once again we could easily write a custom view to keep that "
"field updated."
msgstr ""

# d9133950165c48978a40b2f22955b5cd
#: ../../topics/generic-views.txt:467
msgid "Then we'd write our wrapper function::"
msgstr ""

# 118471e8b68649b39501947115d83e2a
#: ../../topics/generic-views.txt:494
msgid ""
"We can use a similar idiom to alter the response returned by the generic "
"view. If we wanted to provide a downloadable plain-text version of the list "
"of authors, we could use a view like this::"
msgstr ""

# 0e94107a8e4e473db98a82da98b2574f
#: ../../topics/generic-views.txt:508
msgid ""
"This works because the generic views return simple ``HttpResponse`` objects "
"that can be treated like dictionaries to set HTTP headers. This ``Content-"
"Disposition`` business, by the way, instructs the browser to download and "
"save the page instead of displaying it in the browser."
msgstr ""

# 7b69d894447c4ff2a1b428beef58bdee
#: ../../topics/generic-views-migration.txt:3
msgid "Migrating function-based generic views"
msgstr ""

# 36e245f2ab4f421abab028768adf092a
#: ../../topics/generic-views-migration.txt:5
msgid ""
"All the :doc:`function-based generic views</ref/generic-views>` that existed "
"in Django 1.2 have analogs as :doc:`class-based generic views</ref/class-"
"based-views>` in Django 1.3. The feature set exposed in those function-based "
"views can be replicated in a class-based way."
msgstr ""

# 17bc7f2dff5d418b952890bd2ddef696
#: ../../topics/generic-views-migration.txt:12
msgid "How to migrate"
msgstr ""

# 467185c7e9694339906dd38fdc3d1511
#: ../../topics/generic-views-migration.txt:15
msgid "Replace generic views with generic classes"
msgstr ""

# 006859f05d754bf9a918b7fb26c62abd
#: ../../topics/generic-views-migration.txt:17
msgid ""
"Existing usage of function-based generic views should be replaced with their "
"class-based analogs:"
msgstr ""

# a78310809f99451fb95b22a4cada8746
#: ../../topics/generic-views-migration.txt:21
msgid "Old function-based generic view"
msgstr ""

# 3bddf8850bfa486e8395e90437be8e25
#: ../../topics/generic-views-migration.txt:21
msgid "New class-based generic view"
msgstr ""

# a29be7cf690d4a609d7d839f025f8dfc
#: ../../topics/generic-views-migration.txt:23
msgid "``django.views.generic.simple.direct_to_template``"
msgstr ""

# b887ccb7ab664f7c959651e96fafa867
#: ../../topics/generic-views-migration.txt:23
msgid ":class:`django.views.generic.base.TemplateView`"
msgstr ""

# c2cf2bce70ff44729feeae20fab6c202
#: ../../topics/generic-views-migration.txt:24
msgid "``django.views.generic.simple.redirect_to``"
msgstr ""

# 8129dfdacd0648ad9288998952395abb
#: ../../topics/generic-views-migration.txt:24
msgid ":class:`django.views.generic.base.RedirectView`"
msgstr ""

# 7b508c74ec3c4462acf37ef8f85abb0f
#: ../../topics/generic-views-migration.txt:25
msgid "``django.views.generic.list_detail.object_list``"
msgstr ""

# fe66d229a22c495f951ebcc2bf56d169
#: ../../topics/generic-views-migration.txt:25
msgid ":class:`django.views.generic.list.ListView`"
msgstr ""

# 8cca6f452122403984079623d00a2418
#: ../../topics/generic-views-migration.txt:26
msgid "``django.views.generic.list_detail.object_detail``"
msgstr ""

# 1716857860dc4bff8493eafc9cff428b
#: ../../topics/generic-views-migration.txt:26
msgid ":class:`django.views.generic.detail.DetailView`"
msgstr ""

# 2c4b6204c825433090065c6a2fdfd5b1
#: ../../topics/generic-views-migration.txt:27
msgid "``django.views.generic.create_update.create_object``"
msgstr ""

# 52cce48eadb74d1cb7adab23458a2408
#: ../../topics/generic-views-migration.txt:27
msgid ":class:`django.views.generic.edit.CreateView`"
msgstr ""

# 55cd675cf65f4f3d881453ad1d28da4e
#: ../../topics/generic-views-migration.txt:28
msgid "``django.views.generic.create_update.update_object``"
msgstr ""

# 09dfba6f24f440e6825faf5b012a3c4a
#: ../../topics/generic-views-migration.txt:28
msgid ":class:`django.views.generic.edit.UpdateView`"
msgstr ""

# 252427c0b4f142eebc2b49b13d06a2ec
#: ../../topics/generic-views-migration.txt:29
msgid "``django.views.generic.create_update.delete_object``"
msgstr ""

# d7ad4c043af544e4874c5ffadfeee2fa
#: ../../topics/generic-views-migration.txt:29
msgid ":class:`django.views.generic.edit.DeleteView`"
msgstr ""

# cb80c70a961946c6b1195c584afc64ea
#: ../../topics/generic-views-migration.txt:30
msgid "``django.views.generic.date_based.archive_index``"
msgstr ""

# 7902eb4d7bd94777915e550017b3b53b
#: ../../topics/generic-views-migration.txt:30
msgid ":class:`django.views.generic.dates.ArchiveIndexView`"
msgstr ""

# 3fb7cc960e214ed48ff2ab58fc78b39d
#: ../../topics/generic-views-migration.txt:31
msgid "``django.views.generic.date_based.archive_year``"
msgstr ""

# 7720d5ec813e4edcae35d1413255540d
#: ../../topics/generic-views-migration.txt:31
msgid ":class:`django.views.generic.dates.YearArchiveView`"
msgstr ""

# 76e213dd5ec44e0bab539a3d8b538c1b
#: ../../topics/generic-views-migration.txt:32
msgid "``django.views.generic.date_based.archive_month``"
msgstr ""

# 2931c9a59dd64f82a861953ee3efcc1f
#: ../../topics/generic-views-migration.txt:32
msgid ":class:`django.views.generic.dates.MonthArchiveView`"
msgstr ""

# 4664ce5bed0844768525c9af4b89f70a
#: ../../topics/generic-views-migration.txt:33
msgid "``django.views.generic.date_based.archive_week``"
msgstr ""

# 9d980da601bb4ffd9eb22feccf19ddae
#: ../../topics/generic-views-migration.txt:33
msgid ":class:`django.views.generic.dates.WeekArchiveView`"
msgstr ""

# 2d53a5d57b044230b625b26d3b760dcc
#: ../../topics/generic-views-migration.txt:34
msgid "``django.views.generic.date_based.archive_day``"
msgstr ""

# 1727e680dd43495a93f307e991a25981
#: ../../topics/generic-views-migration.txt:34
msgid ":class:`django.views.generic.dates.DayArchiveView`"
msgstr ""

# afeb4e7beb6c48faac103f740574e9ae
#: ../../topics/generic-views-migration.txt:35
msgid "``django.views.generic.date_based.archive_today``"
msgstr ""

# f29cece0f0b140dd9396181446ff8e7a
#: ../../topics/generic-views-migration.txt:35
msgid ":class:`django.views.generic.dates.TodayArchiveView`"
msgstr ""

# 721a1056f6e44d6eac5f9146a329addf
#: ../../topics/generic-views-migration.txt:36
msgid "``django.views.generic.date_based.object_detail``"
msgstr ""

# e578cb1333d44e068eb358fe187f6d5d
#: ../../topics/generic-views-migration.txt:36
msgid ":class:`django.views.generic.dates.DateDetailView`"
msgstr ""

# b379468ad235402d88289e83b68f2f75
#: ../../topics/generic-views-migration.txt:39
msgid ""
"To do this, replace the reference to the generic view function with a "
"``as_view()`` instantiation of the class-based view. For example, the old-"
"style ``direct_to_template`` pattern::"
msgstr ""

# 2c34e5079f3e4cb4bcae1942f2d670ed
#: ../../topics/generic-views-migration.txt:45
msgid ""
"can be replaced with an instance of :class:`~django.views.generic.base."
"TemplateView`::"
msgstr ""

# 75d18ed382e446c4ac496c2813689a58
#: ../../topics/generic-views-migration.txt:51
msgid "``template`` argument to ``direct_to_template`` views"
msgstr ""

# 59516bcb9e6f4952adff09cb2b37c4bc
#: ../../topics/generic-views-migration.txt:53
msgid ""
"The ``template`` argument to the ``direct_to_template`` view has been "
"renamed ``template_name``. This has been done to maintain consistency with "
"other views."
msgstr ""

# cce2ca1b7a534f288c8bef603430b0ac
#: ../../topics/generic-views-migration.txt:57
msgid "``object_id`` argument to detail views"
msgstr ""

# 22597edb39e24ea19133a8ee630a889b
#: ../../topics/generic-views-migration.txt:59
msgid ""
"The object_id argument to the ``object_detail`` view has been renamed ``pk`` "
"on the :class:`~django.views.generic.detail.DetailView`."
msgstr ""

# 08eb5cab7ce44b8c958d94dfc575a4e6
#: ../../topics/generic-views-migration.txt:63
msgid "``template_object_name``"
msgstr ""

# b7869dd41b4147429cfeefb656dd464a
#: ../../topics/generic-views-migration.txt:65
msgid ""
"``template_object_name`` has been renamed ``context_object_name``, "
"reflecting the fact that the context data can be used for purposes other "
"than template rendering (e.g., to populate JSON output)."
msgstr ""

# 472b419c206640b0bde72022047e7d88
#: ../../topics/generic-views-migration.txt:70
msgid "The ``_list`` suffix on list views"
msgstr ""

# 02dff530edc642af8115564dfa555a6e
#: ../../topics/generic-views-migration.txt:72
msgid ""
"In a function-based :class:`ListView`, the ``template_object_name`` was "
"appended with the suffix ``'_list'`` to yield the final context variable "
"name. In a class-based ``ListView``, the ``context_object_name`` is used "
"verbatim. The ``'_list'`` suffix is only applied when generating a default "
"context object name."
msgstr ""

# faa7a2cc529d4337ac796c22acd5cc04
#: ../../topics/generic-views-migration.txt:79
msgid "The context data for ``object_list`` views"
msgstr ""

# 8b6cc744898e40e49509eb0f75bf1688
#: ../../topics/generic-views-migration.txt:81
msgid ""
"The context provided by :class:`~django.views.generic.list."
"MultipleObjectMixin` is quite different from that provided by "
"``object_list``, with most pagination related variables replaced by a single "
"``page_obj`` object. The following are no longer provided:"
msgstr ""

# f50ae19607c14d2eb0716010fbe51c9e
#: ../../topics/generic-views-migration.txt:86
msgid "``first_on_page``"
msgstr ""

# c3733184dac442948a9f127bdeb104a9
#: ../../topics/generic-views-migration.txt:87
msgid "``has_next``"
msgstr ""

# a1aafb3181284017873e02113dc6d406
#: ../../topics/generic-views-migration.txt:88
msgid "``has_previous``"
msgstr ""

# 25fb36ab7031404ea4879f4609101954
#: ../../topics/generic-views-migration.txt:89
msgid "``hits``"
msgstr ""

# 9fb46cdf676e4d13b5818e2b54b75f99
#: ../../topics/generic-views-migration.txt:90
msgid "``last_on_page``"
msgstr ""

# 178e93100ebd447883feaecd8253fb7b
#: ../../topics/generic-views-migration.txt:91
msgid "``next``"
msgstr ""

# 8ffe9977335540429216a75f957cc52a
#: ../../topics/generic-views-migration.txt:92
msgid "``page_range``"
msgstr ""

# 9f51b7e504ff4bd9bedcdf6627b625c1
#: ../../topics/generic-views-migration.txt:93
msgid "``page``"
msgstr ""

# 19b80d4ca8994d9e82d30b319980a48c
#: ../../topics/generic-views-migration.txt:94
msgid "``pages``"
msgstr ""

# e395f5e2790b4712a901314b93a0a880
#: ../../topics/generic-views-migration.txt:95
msgid "``previous``"
msgstr ""

# cf1f662ea07f4258805c4119b50605d6
#: ../../topics/generic-views-migration.txt:96
msgid "``results_per_page``"
msgstr ""

# 61badee2274e48b1bd5cc541e139b062
#: ../../topics/generic-views-migration.txt:99
msgid "``extra_context``"
msgstr ""

# 2460006ec6d64ab2b5b4524283bc3c96
#: ../../topics/generic-views-migration.txt:101
msgid ""
"Function-based generic views provided an ``extra_context`` argument as way "
"to insert extra items into the context at time of rendering."
msgstr ""

# 1cdf4e6f81ba4d6395bc76b1b87c595d
#: ../../topics/generic-views-migration.txt:104
msgid ""
"Class-based views don't provide an ``extra_context`` argument. Instead, you "
"subclass the view, overriding :meth:`get_context_data()`. For example::"
msgstr ""

# 73621a6e3b204a159982a5d2bd7445a6
#: ../../topics/generic-views-migration.txt:118
msgid "``post_save_redirect`` argument to create and update views"
msgstr ""

# 9610abd4287a46debdd8b7c788e387f0
#: ../../topics/generic-views-migration.txt:120
msgid ""
"The ``post_save_redirect`` argument to the create and update views has been "
"renamed ``success_url`` on the :class:`~django.views.generic.edit."
"ModelFormMixin`."
msgstr ""

# 184d61d4eb1145d681c5d20117711820
#: ../../topics/generic-views-migration.txt:125
msgid "``mimetype``"
msgstr ""

# b0092cd8962a4f26b244e0e40a26d0e8
#: ../../topics/generic-views-migration.txt:127
msgid ""
"Some function-based generic views provided a ``mimetype`` argument as way to "
"control the mimetype of the response."
msgstr ""

# 8bfd7dd6f5cb495d8489d8dac148a1c5
#: ../../topics/generic-views-migration.txt:130
msgid ""
"Class-based views don't provide a ``mimetype`` argument. Instead, you "
"subclass the view, overriding :meth:`TemplateResponseMixin.render_to_response"
"()` and pass in arguments for the TemplateResponse constructor. For example::"
msgstr ""

# 793a47ca94ef47e8a4675e7b5ea9f985
#: ../../topics/generic-views-migration.txt:141
msgid "``context_processors``"
msgstr ""

# e35ec14d521145cebd4aa90a6a9e3b73
#: ../../topics/generic-views-migration.txt:143
msgid ""
"Some function-based generic views provided a ``context_processors`` argument "
"that could be used to force the use of specialized context processors when "
"rendering template content."
msgstr ""

# 600c4dea34554a3381e6fd490702b002
#: ../../topics/generic-views-migration.txt:147
msgid ""
"Class-based views don't provide a ``context_processors`` argument. Instead, "
"you subclass the view, overriding :meth:`TemplateResponseMixin."
"render_to_response()`, and passing in a context instance that has been "
"instantiated with the processors you want to use. For example::"
msgstr ""

# 030360045f584d9cb7afd5ed8082c44b
#: ../../topics/http/decorators.txt:3
msgid "View decorators"
msgstr ""

# 45527c6353344c7393d6b4c9abf40c5c
#: ../../topics/http/decorators.txt:7
msgid ""
"Django provides several decorators that can be applied to views to support "
"various HTTP features."
msgstr ""

# 5154d70d06554176b5f765409cb54912
#: ../../topics/http/decorators.txt:11
msgid "Allowed HTTP methods"
msgstr ""

# a71af2586e314a73bcc3b81d3cfdc06e
#: ../../topics/http/decorators.txt:13
msgid ""
"The decorators in :mod:`django.views.decorators.http` can be used to "
"restrict access to views based on the request method. These decorators will "
"return a :class:`django.http.HttpResponseNotAllowed` if the conditions are "
"not met."
msgstr ""

# 69e7dd23fffd41cd959bed9858ba5d18
#: ../../topics/http/decorators.txt:19
msgid ""
"Decorator to require that a view only accept particular request methods. "
"Usage::"
msgstr ""

# 81dd6d36f21749da9dfda253feb83b53
#: ../../topics/http/decorators.txt:30
msgid "Note that request methods should be in uppercase."
msgstr ""

# 9d6c4d3c4c764e058c68cb8a0bb3d35d
#: ../../topics/http/decorators.txt:34
msgid "Decorator to require that a view only accept the GET method."
msgstr ""

# 773ce12520f74ffea7823db38667fd4b
#: ../../topics/http/decorators.txt:38
msgid "Decorator to require that a view only accept the POST method."
msgstr ""

# fc252382b84b47218ad6c0b7abeecce1
#: ../../topics/http/decorators.txt:44
msgid ""
"Decorator to require that a view only accept the GET and HEAD methods. These "
"methods are commonly considered \"safe\" because they should not have the "
"significance of taking an action other than retrieving the requested "
"resource."
msgstr ""

# 312261b730a64f1eb0c68f4d3122fea3
#: ../../topics/http/decorators.txt:50
msgid ""
"Django will automatically strip the content of responses to HEAD requests "
"while leaving the headers unchanged, so you may handle HEAD requests exactly "
"like GET requests in your views. Since some software, such as link checkers, "
"rely on HEAD requests, you might prefer using ``require_safe`` instead of "
"``require_GET``."
msgstr ""

# e98e43274f10466ea5e121654d6a0aa1
#: ../../topics/http/decorators.txt:57
msgid "Conditional view processing"
msgstr ""

# aeeb2d8378d44506bf47dccac9438056
#: ../../topics/http/decorators.txt:59
msgid ""
"The following decorators in :mod:`django.views.decorators.http` can be used "
"to control caching behavior on particular views."
msgstr ""

# 95f5f4107a3042ffb2bff118a3d5dd66
#: ../../topics/http/decorators.txt:68
msgid ""
"These decorators can be used to generate ``ETag`` and ``Last-Modified`` "
"headers; see :doc:`conditional view processing </topics/conditional-view-"
"processing>`."
msgstr ""

# 103874ac0f0a4686a320946ae1d8f986
#: ../../topics/http/decorators.txt:75
msgid "GZip compression"
msgstr ""

# ec15c95a3bd540c6b2112440968189a6
#: ../../topics/http/decorators.txt:77
msgid ""
"The decorators in :mod:`django.views.decorators.gzip` control content "
"compression on a per-view basis."
msgstr ""

# 8b832fed09c44b8fafd4da9fbce37891
#: ../../topics/http/decorators.txt:82
msgid ""
"This decorator compresses content if the browser allows gzip compression. It "
"sets the ``Vary`` header accordingly, so that caches will base their storage "
"on the ``Accept-Encoding`` header."
msgstr ""

# c055b80339e943578e3c64f4f20b1394
#: ../../topics/http/decorators.txt:89
msgid "Vary headers"
msgstr ""

# 875b3c7eeeba4f6795f5678e74f98865
#: ../../topics/http/decorators.txt:91
msgid ""
"The decorators in :mod:`django.views.decorators.vary` can be used to control "
"caching based on specific request headers."
msgstr ""

# e490fc1c753b469d822e6938968062e0
#: ../../topics/http/decorators.txt:98
msgid ""
"The ``Vary`` header defines which request headers a cache mechanism should "
"take into account when building its cache key."
msgstr ""

# b61eac913eaa4ae38e79c8eb38211f25
#: ../../topics/http/decorators.txt:101
msgid "See :ref:`using vary headers <using-vary-headers>`."
msgstr ""

# 5ef51807023f4c61a13bea52d7fcc949
#: ../../topics/http/file-uploads.txt:3
msgid "File Uploads"
msgstr ""

# 7f2d653a5b8c41759e9effbc33189f58
#: ../../topics/http/file-uploads.txt:7
msgid ""
"When Django handles a file upload, the file data ends up placed in :attr:"
"`request.FILES <django.http.HttpRequest.FILES>` (for more on the ``request`` "
"object see the documentation for :doc:`request and response objects </ref/"
"request-response>`). This document explains how files are stored on disk and "
"in memory, and how to customize the default behavior."
msgstr ""

# b26c0ad0eed64f3abf7f6ad4615d81e7
#: ../../topics/http/file-uploads.txt:14
msgid "Basic file uploads"
msgstr ""

# 240b2614f62f4fc7b9052c61026b09ba
#: ../../topics/http/file-uploads.txt:16
msgid "Consider a simple form containing a :class:`~django.forms.FileField`::"
msgstr ""

# 1132223f37db4bcd8c7f67a9df882094
#: ../../topics/http/file-uploads.txt:24
msgid ""
"A view handling this form will receive the file data in :attr:`request.FILES "
"<django.http.HttpRequest.FILES>`, which is a dictionary containing a key for "
"each :class:`~django.forms.FileField` (or :class:`~django.forms.ImageField`, "
"or other :class:`~django.forms.FileField` subclass) in the form. So the data "
"from the above form would be accessible as ``request.FILES['file']``."
msgstr ""

# 50eade78be7d41f292680129d4d96d07
#: ../../topics/http/file-uploads.txt:31
msgid ""
"Note that :attr:`request.FILES <django.http.HttpRequest.FILES>` will only "
"contain data if the request method was ``POST`` and the ``<form>`` that "
"posted the request has the attribute ``enctype=\"multipart/form-data\"``. "
"Otherwise, ``request.FILES`` will be empty."
msgstr ""

# 39112e1a2b2c4b7fa4980e085e8b0f46
#: ../../topics/http/file-uploads.txt:36
msgid ""
"Most of the time, you'll simply pass the file data from ``request`` into the "
"form as described in :ref:`binding-uploaded-files`. This would look "
"something like::"
msgstr ""

# b2bb1afd9b074b1baa21eeeed8eb61ff
#: ../../topics/http/file-uploads.txt:56
msgid ""
"Notice that we have to pass :attr:`request.FILES <django.http.HttpRequest."
"FILES>` into the form's constructor; this is how file data gets bound into a "
"form."
msgstr ""

# d140e7f91f814d399503d68fac047cb3
#: ../../topics/http/file-uploads.txt:60
msgid "Handling uploaded files"
msgstr ""

# 12a31fc46e754e9c8d9486b0bde00bd2
#: ../../topics/http/file-uploads.txt:64
msgid ""
"The final piece of the puzzle is handling the actual file data from :attr:"
"`request.FILES <django.http.HttpRequest.FILES>`. Each entry in this "
"dictionary is an ``UploadedFile`` object -- a simple wrapper around an "
"uploaded file. You'll usually use one of these methods to access the "
"uploaded content:"
msgstr ""

# 6e6e5c26af5848a9ad6c0e90e55a1720
#: ../../topics/http/file-uploads.txt:71
msgid ""
"Read the entire uploaded data from the file. Be careful with this method: if "
"the uploaded file is huge it can overwhelm your system if you try to read it "
"into memory. You'll probably want to use ``chunks()`` instead; see below."
msgstr ""

# 8caff05e3e8940dbb3add83e6ecf59e0
#: ../../topics/http/file-uploads.txt:78
msgid ""
"Returns ``True`` if the uploaded file is big enough to require reading in "
"multiple chunks. By default this will be any file larger than 2.5 megabytes, "
"but that's configurable; see below."
msgstr ""

# efc532b3a5084518a8c57e62ad4fea65
#: ../../topics/http/file-uploads.txt:84
msgid ""
"A generator returning chunks of the file. If ``multiple_chunks()`` is "
"``True``, you should use this method in a loop instead of ``read()``."
msgstr ""

# cb2cdd7f70b34429b5d5464228956de1
#: ../../topics/http/file-uploads.txt:87
msgid ""
"In practice, it's often easiest simply to use ``chunks()`` all the time; see "
"the example below."
msgstr ""

# 371986c8d7c543f981cd31941801c04d
#: ../../topics/http/file-uploads.txt:92
msgid "The name of the uploaded file (e.g. ``my_file.txt``)."
msgstr ""

# 5f11b903ac554cef98b8a6b2cd0b8e88
#: ../../topics/http/file-uploads.txt:96
msgid "The size, in bytes, of the uploaded file."
msgstr ""

# 826444526047476999271128e42d874c
#: ../../topics/http/file-uploads.txt:98
msgid ""
"There are a few other methods and attributes available on ``UploadedFile`` "
"objects; see `UploadedFile objects`_ for a complete reference."
msgstr ""

# 82a7867d91974b289298229b6b9bf07f
#: ../../topics/http/file-uploads.txt:101
msgid ""
"Putting it all together, here's a common way you might handle an uploaded "
"file::"
msgstr ""

# 3c508e70ff1a43f59f43d6006f1e42e6
#: ../../topics/http/file-uploads.txt:109
msgid ""
"Looping over ``UploadedFile.chunks()`` instead of using ``read()`` ensures "
"that large files don't overwhelm your system's memory."
msgstr ""

# cdd2de2c48b24ee197790a0719119a13
#: ../../topics/http/file-uploads.txt:113
msgid "Where uploaded data is stored"
msgstr ""

# 6131d7b3eb234bdb959906b9faade00c
#: ../../topics/http/file-uploads.txt:115
msgid "Before you save uploaded files, the data needs to be stored somewhere."
msgstr ""

# 1af7e181057445d08bb6451d0667be69
#: ../../topics/http/file-uploads.txt:117
msgid ""
"By default, if an uploaded file is smaller than 2.5 megabytes, Django will "
"hold the entire contents of the upload in memory. This means that saving the "
"file involves only a read from memory and a write to disk and thus is very "
"fast."
msgstr ""

# 7de557a50ba24313a2362503c28920aa
#: ../../topics/http/file-uploads.txt:121
msgid ""
"However, if an uploaded file is too large, Django will write the uploaded "
"file to a temporary file stored in your system's temporary directory. On a "
"Unix-like platform this means you can expect Django to generate a file "
"called something like ``/tmp/tmpzfp6I6.upload``. If an upload is large "
"enough, you can watch this file grow in size as Django streams the data onto "
"disk."
msgstr ""

# 532f0222973f46758ce2554de6c2c31b
#: ../../topics/http/file-uploads.txt:127
msgid ""
"These specifics -- 2.5 megabytes; ``/tmp``; etc. -- are simply \"reasonable "
"defaults\". Read on for details on how you can customize or completely "
"replace upload behavior."
msgstr ""

# d2852ac03a1a40bc9ebee19e5b76068f
#: ../../topics/http/file-uploads.txt:132
msgid "Changing upload handler behavior"
msgstr ""

# d0029b602da54d2ab06690a439cacf49
#: ../../topics/http/file-uploads.txt:134
msgid "Three settings control Django's file upload behavior:"
msgstr ""

# 8ddbe711b4cc4e78a3b9fca0a614758c
#: ../../topics/http/file-uploads.txt:137
msgid ""
"The maximum size, in bytes, for files that will be uploaded into memory. "
"Files larger than :setting:`FILE_UPLOAD_MAX_MEMORY_SIZE` will be streamed to "
"disk."
msgstr ""

# 636f725402d745089c3a4c29dfa61ed3
#: ../../topics/http/file-uploads.txt:141
msgid "Defaults to 2.5 megabytes."
msgstr ""

# 89c5b042a09948d696490a76a072e6d1
#: ../../topics/http/file-uploads.txt:144
msgid ""
"The directory where uploaded files larger than :setting:"
"`FILE_UPLOAD_MAX_MEMORY_SIZE` will be stored."
msgstr ""

# 65487faa897e4e5ab9daa9025ec3656e
#: ../../topics/http/file-uploads.txt:147
msgid ""
"Defaults to your system's standard temporary directory (i.e. ``/tmp`` on "
"most Unix-like systems)."
msgstr ""

# 8b415c9d192e4d898e1b01dcb9cf0ba7
#: ../../topics/http/file-uploads.txt:151
msgid ""
"The numeric mode (i.e. ``0644``) to set newly uploaded files to. For more "
"information about what these modes mean, see the documentation for :func:`os."
"chmod`."
msgstr ""

# 7b1492243eb049eb95fb8788105bfa02
#: ../../topics/http/file-uploads.txt:155
msgid ""
"If this isn't given or is ``None``, you'll get operating-system dependent "
"behavior. On most platforms, temporary files will have a mode of ``0600``, "
"and files saved from memory will be saved using the system's standard umask."
msgstr ""

# 7fea201f49b040b6a6fef0fed7465828
#: ../../topics/http/file-uploads.txt:162
msgid ""
"If you're not familiar with file modes, please note that the leading ``0`` "
"is very important: it indicates an octal number, which is the way that modes "
"must be specified. If you try to use ``644``, you'll get totally incorrect "
"behavior."
msgstr ""

# 08b85eccafaf4b42b950746619a89db9
#: ../../topics/http/file-uploads.txt:167
msgid "**Always prefix the mode with a 0.**"
msgstr ""

# 0e6a1f469a034f6384f9e0267993e20e
#: ../../topics/http/file-uploads.txt:170
msgid ""
"The actual handlers for uploaded files. Changing this setting allows "
"complete customization -- even replacement -- of Django's upload process. "
"See `upload handlers`_, below, for details."
msgstr ""

# 2e6c7f0e252c45438160d502fe224fc7
#: ../../topics/http/file-uploads.txt:174
msgid "Defaults to::"
msgstr ""

# bdfebd575fe446a7a34baacae0fc77df
#: ../../topics/http/file-uploads.txt:179
msgid ""
"Which means \"try to upload to memory first, then fall back to temporary "
"files.\""
msgstr ""

# af271244a15f4218b0d83129685e1e83
#: ../../topics/http/file-uploads.txt:183
msgid "``UploadedFile`` objects"
msgstr ""

# 706aca2cb7b04f86ac347abf5c2f074a
#: ../../topics/http/file-uploads.txt:185
msgid ""
"In addition to those inherited from :class:`File`, all ``UploadedFile`` "
"objects define the following methods/attributes:"
msgstr ""

# 42c68ffe185146f7b5e1a6ebb38c4ac4
#: ../../topics/http/file-uploads.txt:190
msgid ""
"The content-type header uploaded with the file (e.g. :mimetype:`text/plain` "
"or :mimetype:`application/pdf`). Like any data supplied by the user, you "
"shouldn't trust that the uploaded file is actually this type. You'll still "
"need to validate that the file contains the content that the content-type "
"header claims -- \"trust but verify.\""
msgstr ""

# b42b4fa144cc497e9d6c7ae8be4a99ef
#: ../../topics/http/file-uploads.txt:198
msgid ""
"For :mimetype:`text/*` content-types, the character set (i.e. ``utf8``) "
"supplied by the browser. Again, \"trust but verify\" is the best policy here."
msgstr ""

# 43cd950f327d41769f81a26f622ed0b1
#: ../../topics/http/file-uploads.txt:203
msgid ""
"Only files uploaded onto disk will have this method; it returns the full "
"path to the temporary uploaded file."
msgstr ""

# a4420ea66cc3490fb545ed3eaa350101
#: ../../topics/http/file-uploads.txt:208
msgid ""
"Like regular Python files, you can read the file line-by-line simply by "
"iterating over the uploaded file:"
msgstr ""

# 2dd39745305f4b73af266eb3bfed1e33
#: ../../topics/http/file-uploads.txt:216
msgid ""
"However, *unlike* standard Python files, :class:`UploadedFile` only "
"understands ``\\n`` (also known as \"Unix-style\") line endings. If you know "
"that you need to handle uploaded files with different line endings, you'll "
"need to do so in your view."
msgstr ""

# 10d634dac6c341d9b780bf82703ea178
#: ../../topics/http/file-uploads.txt:222
msgid "Upload Handlers"
msgstr ""

# f479aa77db4940bca50b98f58eb6c75e
#: ../../topics/http/file-uploads.txt:224
msgid ""
"When a user uploads a file, Django passes off the file data to an *upload "
"handler* -- a small class that handles file data as it gets uploaded. Upload "
"handlers are initially defined in the :setting:`FILE_UPLOAD_HANDLERS` "
"setting, which defaults to::"
msgstr ""

# 41aac27df5484c4e932b0caec636144d
#: ../../topics/http/file-uploads.txt:232
msgid ""
"Together the ``MemoryFileUploadHandler`` and ``TemporaryFileUploadHandler`` "
"provide Django's default file upload behavior of reading small files into "
"memory and large ones onto disk."
msgstr ""

# e5290706a00442f3bf89b36c4467496f
#: ../../topics/http/file-uploads.txt:236
msgid ""
"You can write custom handlers that customize how Django handles files. You "
"could, for example, use custom handlers to enforce user-level quotas, "
"compress data on the fly, render progress bars, and even send data to "
"another storage location directly without storing it locally."
msgstr ""

# 6a255c30e7bd417db97fdef2bdb1cad9
#: ../../topics/http/file-uploads.txt:244
msgid "Modifying upload handlers on the fly"
msgstr ""

# 8b494603a098482a916d76d12506dc8c
#: ../../topics/http/file-uploads.txt:246
msgid ""
"Sometimes particular views require different upload behavior. In these "
"cases, you can override upload handlers on a per-request basis by modifying "
"``request.upload_handlers``. By default, this list will contain the upload "
"handlers given by :setting:`FILE_UPLOAD_HANDLERS`, but you can modify the "
"list as you would any other list."
msgstr ""

# 0b8cd3a396824660a838b8958cb7446d
#: ../../topics/http/file-uploads.txt:252
msgid ""
"For instance, suppose you've written a ``ProgressBarUploadHandler`` that "
"provides feedback on upload progress to some sort of AJAX widget. You'd add "
"this handler to your upload handlers like this::"
msgstr ""

# d7f5290457174b37a8785a8427f3b5fd
#: ../../topics/http/file-uploads.txt:258
msgid ""
"You'd probably want to use ``list.insert()`` in this case (instead of "
"``append()``) because a progress bar handler would need to run *before* any "
"other handlers. Remember, the upload handlers are processed in order."
msgstr ""

# 667a25c9339f46bda828e5f722dc8471
#: ../../topics/http/file-uploads.txt:262
msgid ""
"If you want to replace the upload handlers completely, you can just assign a "
"new list::"
msgstr ""

# 78f5098738a4446c8daddc1f81184626
#: ../../topics/http/file-uploads.txt:269
msgid ""
"You can only modify upload handlers *before* accessing ``request.POST`` or "
"``request.FILES`` -- it doesn't make sense to change upload handlers after "
"upload handling has already started. If you try to modify ``request."
"upload_handlers`` after reading from ``request.POST`` or ``request.FILES`` "
"Django will throw an error."
msgstr ""

# 6fbc9b3b83ae4a1ab9bfa55e0586c659
#: ../../topics/http/file-uploads.txt:276
msgid ""
"Thus, you should always modify uploading handlers as early in your view as "
"possible."
msgstr ""

# 3713d53094d048ecab67d956488f731c
#: ../../topics/http/file-uploads.txt:279
msgid ""
"Also, ``request.POST`` is accessed by :class:`~django.middleware.csrf."
"CsrfViewMiddleware` which is enabled by default. This means you will need to "
"use :func:`~django.views.decorators.csrf.csrf_exempt` on your view to allow "
"you to change the upload handlers.  You will then need to use :func:`~django."
"views.decorators.csrf.csrf_protect` on the function that actually processes "
"the request.  Note that this means that the handlers may start receiving the "
"file upload before the CSRF checks have been done. Example code:"
msgstr ""

# 7ed97fe0dd9a48cc838a0c9be9454451
#: ../../topics/http/file-uploads.txt:304
msgid "Writing custom upload handlers"
msgstr ""

# 2aa52a3c4a1f4578ae148bdc0ed0d0ea
#: ../../topics/http/file-uploads.txt:306
msgid ""
"All file upload handlers should be subclasses of ``django.core.files."
"uploadhandler.FileUploadHandler``. You can define upload handlers wherever "
"you wish."
msgstr ""

# fd9766983e6f4b589ceb1921b37ff91b
#: ../../topics/http/file-uploads.txt:311
msgid "Required methods"
msgstr ""

# 0a540f1049b6416aba75b4747d07dca3
#: ../../topics/http/file-uploads.txt:313
msgid "Custom file upload handlers **must** define the following methods:"
msgstr ""

# 23ae8efb68db43f691c043f861e20c35
#: ../../topics/http/file-uploads.txt:316
msgid "Receives a \"chunk\" of data from the file upload."
msgstr ""

# 4cda38d2ec25480d9b26240f67f425e6
#: ../../topics/http/file-uploads.txt:318
msgid "``raw_data`` is a byte string containing the uploaded data."
msgstr ""

# 702ad8914b7b4cdf95c1bc757d2916fd
#: ../../topics/http/file-uploads.txt:320
msgid ""
"``start`` is the position in the file where this ``raw_data`` chunk begins."
msgstr ""

# 4ec5c1d1a33f421e8032eeedded76c20
#: ../../topics/http/file-uploads.txt:323
msgid ""
"The data you return will get fed into the subsequent upload handlers' "
"``receive_data_chunk`` methods. In this way, one handler can be a \"filter\" "
"for other handlers."
msgstr ""

# 2649759136704a818b60f274eec0dd3b
#: ../../topics/http/file-uploads.txt:327
msgid ""
"Return ``None`` from ``receive_data_chunk`` to sort-circuit remaining upload "
"handlers from getting this chunk.. This is useful if you're storing the "
"uploaded data yourself and don't want future handlers to store a copy of the "
"data."
msgstr ""

# ecf3dbf04c0d49bcacba60f43da0b696
#: ../../topics/http/file-uploads.txt:332
msgid ""
"If you raise a ``StopUpload`` or a ``SkipFile`` exception, the upload will "
"abort or the file will be completely skipped."
msgstr ""

# 60e4a09ce13f4ff2ac2fdef4b173d5d3
#: ../../topics/http/file-uploads.txt:336
msgid "Called when a file has finished uploading."
msgstr ""

# e2bdec6bf6fc46a2b0fc2051c9ca389c
#: ../../topics/http/file-uploads.txt:338
msgid ""
"The handler should return an ``UploadedFile`` object that will be stored in "
"``request.FILES``. Handlers may also return ``None`` to indicate that the "
"``UploadedFile`` object should come from subsequent upload handlers."
msgstr ""

# 10234944589040ef87b5e20fb09a1ae9
#: ../../topics/http/file-uploads.txt:343
msgid "Optional methods"
msgstr ""

# ecb189d24f4542d281bcd71d36917741
#: ../../topics/http/file-uploads.txt:345
msgid ""
"Custom upload handlers may also define any of the following optional methods "
"or attributes:"
msgstr ""

# 2bd8444e7e6a41acb12091a56c27b6b1
#: ../../topics/http/file-uploads.txt:349
msgid ""
"Size, in bytes, of the \"chunks\" Django should store into memory and feed "
"into the handler. That is, this attribute controls the size of chunks fed "
"into ``FileUploadHandler.receive_data_chunk``."
msgstr ""

# a9f81d2df2e443e19181f2b8d6100cd2
#: ../../topics/http/file-uploads.txt:353
msgid ""
"For maximum performance the chunk sizes should be divisible by ``4`` and "
"should not exceed 2 GB (2\\ :sup:`31` bytes) in size. When there are "
"multiple chunk sizes provided by multiple handlers, Django will use the "
"smallest chunk size defined by any handler."
msgstr ""

# ce56ece264e54d278762eff7ff683dbe
#: ../../topics/http/file-uploads.txt:358
msgid "The default is 64*2\\ :sup:`10` bytes, or 64 KB."
msgstr ""

# 01f115b3e45e4fc4ba9287af9c251812
#: ../../topics/http/file-uploads.txt:361
msgid ""
"Callback signaling that a new file upload is starting. This is called before "
"any data has been fed to any upload handlers."
msgstr ""

# b3574236f0d64321a3c2f061adcbb5da
#: ../../topics/http/file-uploads.txt:364
msgid "``field_name`` is a string name of the file ``<input>`` field."
msgstr ""

# 2aa21bd099e44ae196b575791e0494b3
#: ../../topics/http/file-uploads.txt:366
msgid "``file_name`` is the unicode filename that was provided by the browser."
msgstr ""

# 1bfb7ee943404327a15bf1178c130216
#: ../../topics/http/file-uploads.txt:368
msgid ""
"``content_type`` is the MIME type provided by the browser -- E.g. ``'image/"
"jpeg'``."
msgstr ""

# 50b640db6eb04a5cbcd3de153cb317c8
#: ../../topics/http/file-uploads.txt:371
msgid ""
"``content_length`` is the length of the image given by the browser. "
"Sometimes this won't be provided and will be ``None``."
msgstr ""

# cdfa77a5d6a54549bda1ec9cd32d2869
#: ../../topics/http/file-uploads.txt:374
msgid ""
"``charset`` is the character set (i.e. ``utf8``) given by the browser. Like "
"``content_length``, this sometimes won't be provided."
msgstr ""

# b3a85675971e44e1a8ce44b937ec8f74
#: ../../topics/http/file-uploads.txt:377
msgid ""
"This method may raise a ``StopFutureHandlers`` exception to prevent future "
"handlers from handling this file."
msgstr ""

# aa295dff601e4ae1a5b8d5d0bd4865f3
#: ../../topics/http/file-uploads.txt:381
msgid "Callback signaling that the entire upload (all files) has completed."
msgstr ""

# debb6829edc44ef69b5abd48ed40cf8c
#: ../../topics/http/file-uploads.txt:384
msgid ""
"Allows the handler to completely override the parsing of the raw HTTP input."
msgstr ""

# 3c6139c9ab68438b86468b11f3730262
#: ../../topics/http/file-uploads.txt:387
msgid "``input_data`` is a file-like object that supports ``read()``-ing."
msgstr ""

# bf32027d608d474097988a054a44eda9
#: ../../topics/http/file-uploads.txt:389
msgid "``META`` is the same object as ``request.META``."
msgstr ""

# b13978fa2d264446af455b5b63ea9f05
#: ../../topics/http/file-uploads.txt:391
msgid ""
"``content_length`` is the length of the data in ``input_data``. Don't read "
"more than ``content_length`` bytes from ``input_data``."
msgstr ""

# fad8a3a1cca24a52ad4b78e32985617c
#: ../../topics/http/file-uploads.txt:394
msgid "``boundary`` is the MIME boundary for this request."
msgstr ""

# b61f483fba0a4961a3314a8588fcfbc7
#: ../../topics/http/file-uploads.txt:396
msgid "``encoding`` is the encoding of the request."
msgstr ""

# 9afb5656bcea4bbbb06dd5e6e2ebbd76
#: ../../topics/http/file-uploads.txt:398
msgid ""
"Return ``None`` if you want upload handling to continue, or a tuple of ``"
"(POST, FILES)`` if you want to return the new data structures suitable for "
"the request directly."
msgstr ""

# d1bed47cef684aa0889d7f4e42ddd160
#: ../../topics/http/generic-views.txt:5
msgid "See :doc:`/ref/generic-views`."
msgstr ""

# c6e2204a526448ebb0c357a45e2c58a1
#: ../../topics/http/index.txt:2
msgid "Handling HTTP requests"
msgstr ""

# c6e01e8270144512a34e9b4d8d6f7ba0
#: ../../topics/http/index.txt:4
msgid "Information on handling HTTP requests in Django:"
msgstr ""

# 1550b035367b4d65bd25b4d34e1d6160
#: ../../topics/http/middleware.txt:3
msgid "Middleware"
msgstr ""

# 20c9eb25152c412cb691f9683a9f6bb6
#: ../../topics/http/middleware.txt:5
msgid ""
"Middleware is a framework of hooks into Django's request/response "
"processing. It's a light, low-level \"plugin\" system for globally altering "
"Django's input and/or output."
msgstr ""

# 11ac13b3b56b4f96b415e7186c5250e9
#: ../../topics/http/middleware.txt:9
msgid ""
"Each middleware component is responsible for doing some specific function. "
"For example, Django includes a middleware component, ``XViewMiddleware``, "
"that adds an ``\"X-View\"`` HTTP header to every response to a ``HEAD`` "
"request."
msgstr ""

# f3670193c3844a5a8a5e84cb0dad6a29
#: ../../topics/http/middleware.txt:13
msgid ""
"This document explains how middleware works, how you activate middleware, "
"and how to write your own middleware. Django ships with some built-in "
"middleware you can use right out of the box; they're documented in the :doc:"
"`built-in middleware reference </ref/middleware>`."
msgstr ""

# 6fcb033cd4154c05b7023c06f6aa3422
#: ../../topics/http/middleware.txt:19
msgid "Activating middleware"
msgstr ""

# 4055cfe815734b86af78d5100e990439
#: ../../topics/http/middleware.txt:21
msgid ""
"To activate a middleware component, add it to the :setting:"
"`MIDDLEWARE_CLASSES` list in your Django settings. In :setting:"
"`MIDDLEWARE_CLASSES`, each middleware component is represented by a string: "
"the full Python path to the middleware's class name. For example, here's the "
"default :setting:`MIDDLEWARE_CLASSES` created by :djadmin:`django-admin.py "
"startproject <startproject>`::"
msgstr ""

# 1ad60a9c18474863913a848482a17287
#: ../../topics/http/middleware.txt:35
msgid ""
"During the request phases (:meth:`process_request` and :meth:`process_view` "
"middleware), Django applies middleware in the order it's defined in :setting:"
"`MIDDLEWARE_CLASSES`, top-down. During the response phases (:meth:"
"`process_response` and :meth:`process_exception` middleware), the classes "
"are applied in reverse order, from the bottom up. You can think of it like "
"an onion: each middleware class is a \"layer\" that wraps the view:"
msgstr ""

# fa876251c4da4e7b8f4e9d21ccbcd476
#: ../../topics/http/middleware.txt:47
msgid ""
"A Django installation doesn't require any middleware -- e.g., :setting:"
"`MIDDLEWARE_CLASSES` can be empty, if you'd like -- but it's strongly "
"suggested that you at least use :class:`~django.middleware.common."
"CommonMiddleware`."
msgstr ""

# 122970d4455a47bf96d630af3f9d7add
#: ../../topics/http/middleware.txt:53
msgid "Writing your own middleware"
msgstr ""

# 8b9e1740d2a341339c6080a66fd2c988
#: ../../topics/http/middleware.txt:55
msgid ""
"Writing your own middleware is easy. Each middleware component is a single "
"Python class that defines one or more of the following methods:"
msgstr ""

# 11173d0f0585474e953d6908b65cad33
#: ../../topics/http/middleware.txt:61
msgid "``process_request``"
msgstr ""

# 1f5eee06e96540fca4192a08111ffd15
#: ../../topics/http/middleware.txt:65
msgid ""
"``request`` is an :class:`~django.http.HttpRequest` object. This method is "
"called on each request, before Django decides which view to execute."
msgstr ""

# 660a03ae6a7540b3b0cec858c0881ee0
#: ../../topics/http/middleware.txt:68
msgid ""
"``process_request()`` should return either ``None`` or an :class:`~django."
"http.HttpResponse` object. If it returns ``None``, Django will continue "
"processing this request, executing any other middleware and, then, the "
"appropriate view. If it returns an :class:`~django.http.HttpResponse` "
"object, Django won't bother calling ANY other request, view or exception "
"middleware, or the appropriate view; it'll return that :class:`~django.http."
"HttpResponse`. Response middleware is always called on every response."
msgstr ""

# 33a4bc65f1a24929ac1b4bc30fc6291d
#: ../../topics/http/middleware.txt:79
msgid "``process_view``"
msgstr ""

# b283f78836d24077963fe9b4b2e4749a
#: ../../topics/http/middleware.txt:83
msgid ""
"``request`` is an :class:`~django.http.HttpRequest` object. ``view_func`` is "
"the Python function that Django is about to use. (It's the actual function "
"object, not the name of the function as a string.) ``view_args`` is a list "
"of positional arguments that will be passed to the view, and ``view_kwargs`` "
"is a dictionary of keyword arguments that will be passed to the view. "
"Neither ``view_args`` nor ``view_kwargs`` include the first view argument "
"(``request``)."
msgstr ""

# ee667ef6d7284dd7842faaee8cb46eac
#: ../../topics/http/middleware.txt:91
msgid ""
"``process_view()`` is called just before Django calls the view. It should "
"return either ``None`` or an :class:`~django.http.HttpResponse` object. If "
"it returns ``None``, Django will continue processing this request, executing "
"any other ``process_view()`` middleware and, then, the appropriate view. If "
"it returns an :class:`~django.http.HttpResponse` object, Django won't bother "
"calling ANY other request, view or exception middleware, or the appropriate "
"view; it'll return that :class:`~django.http.HttpResponse`. Response "
"middleware is always called on every response."
msgstr ""

# e9d4fb8c08044aad8934211bda733a21
#: ../../topics/http/middleware.txt:102
msgid ""
"Accessing :attr:`request.POST <django.http.HttpRequest.POST>` or :attr:"
"`request.REQUEST <django.http.HttpRequest.REQUEST>` inside middleware from "
"``process_request`` or ``process_view`` will prevent any view running after "
"the middleware from being able to :ref:`modify the upload handlers for the "
"request <modifying_upload_handlers_on_the_fly>`, and should normally be "
"avoided."
msgstr ""

# 8aa66e8027414257b792a0fb73136b89
#: ../../topics/http/middleware.txt:109
msgid ""
"The :class:`~django.middleware.csrf.CsrfViewMiddleware` class can be "
"considered an exception, as it provides the :func:`~django.views.decorators."
"csrf.csrf_exempt` and :func:`~django.views.decorators.csrf.csrf_protect` "
"decorators which allow views to explicitly control at what point the CSRF "
"validation should occur."
msgstr ""

# 960e415e4cc64716b52e67000129ee36
#: ../../topics/http/middleware.txt:118
msgid "``process_template_response``"
msgstr ""

# 17c5b053240640b39190ea59edf90bd3
#: ../../topics/http/middleware.txt:124
msgid ""
"``request`` is an :class:`~django.http.HttpRequest` object. ``response`` is "
"a subclass of :class:`~django.template.response.SimpleTemplateResponse` (e."
"g. :class:`~django.template.response.TemplateResponse`) or any response "
"object that implements a ``render`` method."
msgstr ""

# 94cb6fcab8fc4a75929d3a2eaa601536
#: ../../topics/http/middleware.txt:129
msgid ""
"``process_template_response()`` must return a response object that "
"implements a ``render`` method. It could alter the given ``response`` by "
"changing ``response.template_name`` and ``response.context_data``, or it "
"could create and return a brand-new :class:`~django.template.response."
"SimpleTemplateResponse` or equivalent."
msgstr ""

# a1570503a19145e48e9a551ead64e7b3
#: ../../topics/http/middleware.txt:135
msgid ""
"``process_template_response()`` will only be called if the response instance "
"has a ``render()`` method, indicating that it is a :class:`~django.template."
"response.TemplateResponse` or equivalent."
msgstr ""

# 0037ff642dd246caaef39620aa746d72
#: ../../topics/http/middleware.txt:139
msgid ""
"You don't need to explicitly render responses -- responses will be "
"automatically rendered once all template response middleware has been called."
msgstr ""

# 1bb3867e582e451c8858bf086d4475d0
#: ../../topics/http/middleware.txt:143
msgid ""
"Middleware are run in reverse order during the response phase, which "
"includes process_template_response."
msgstr ""

# 46eac4f312ad4ba483eeca64551dbe97
#: ../../topics/http/middleware.txt:149
msgid "``process_response``"
msgstr ""

# 733eb560fc7f47e3826a74cd0fdaadb7
#: ../../topics/http/middleware.txt:153
msgid ""
"``request`` is an :class:`~django.http.HttpRequest` object. ``response`` is "
"the :class:`~django.http.HttpResponse` object returned by a Django view."
msgstr ""

# ac43902c13ce428b829a037707df6e5c
#: ../../topics/http/middleware.txt:156
msgid ""
"``process_response()`` must return an :class:`~django.http.HttpResponse` "
"object. It could alter the given ``response``, or it could create and return "
"a brand-new :class:`~django.http.HttpResponse`."
msgstr ""

# 2f0d2f64ee234ce79068371267d91f78
#: ../../topics/http/middleware.txt:160
msgid ""
"Unlike the ``process_request()`` and ``process_view()`` methods, the "
"``process_response()`` method is always called, even if the ``process_request"
"()`` and ``process_view()`` methods of the same middleware class were "
"skipped because an earlier middleware method returned an :class:`~django."
"http.HttpResponse` (this means that your ``process_response()`` method "
"cannot rely on setup done in ``process_request()``, for example). In "
"addition, during the response phase the classes are applied in reverse "
"order, from the bottom up. This means classes defined at the end of :setting:"
"`MIDDLEWARE_CLASSES` will be run first."
msgstr ""

# 8b0d8c9dad4c4dd482fff12bbe482ae8
#: ../../topics/http/middleware.txt:173
msgid "``process_exception``"
msgstr ""

# 1927777395a248dd953acaffc2e70dbc
#: ../../topics/http/middleware.txt:177
msgid ""
"``request`` is an :class:`~django.http.HttpRequest` object. ``exception`` is "
"an ``Exception`` object raised by the view function."
msgstr ""

# 9bd1e10316f94f70ab8a7a2d6cb801c7
#: ../../topics/http/middleware.txt:180
msgid ""
"Django calls ``process_exception()`` when a view raises an exception. "
"``process_exception()`` should return either ``None`` or an :class:`~django."
"http.HttpResponse` object. If it returns an :class:`~django.http."
"HttpResponse` object, the response will be returned to the browser. "
"Otherwise, default exception handling kicks in."
msgstr ""

# 06a8d365727d43e1af7ef53da6900174
#: ../../topics/http/middleware.txt:186
msgid ""
"Again, middleware are run in reverse order during the response phase, which "
"includes ``process_exception``. If an exception middleware returns a "
"response, the middleware classes above that middleware will not be called at "
"all."
msgstr ""

# 94aea5d1aff24b4ebb23fd75960767dd
#: ../../topics/http/middleware.txt:191
msgid "``__init__``"
msgstr ""

# 8a7d0d4e92fd4fc6b467c13ac921acd1
#: ../../topics/http/middleware.txt:193
msgid ""
"Most middleware classes won't need an initializer since middleware classes "
"are essentially placeholders for the ``process_*`` methods. If you do need "
"some global state you may use ``__init__`` to set up. However, keep in mind "
"a couple of caveats:"
msgstr ""

# 8ed629bf4b8047e49a3ef6215d1352f7
#: ../../topics/http/middleware.txt:198
msgid ""
"Django initializes your middleware without any arguments, so you can't "
"define ``__init__`` as requiring any arguments."
msgstr ""

# a739e6762a164179a32f91564f21628e
#: ../../topics/http/middleware.txt:201
msgid ""
"Unlike the ``process_*`` methods which get called once per request, "
"``__init__`` gets called only *once*, when the Web server starts up."
msgstr ""

# 3360028b9a8f4d37a171f6508e805ace
#: ../../topics/http/middleware.txt:205
msgid "Marking middleware as unused"
msgstr ""

# 9edae7213bda4a8d8f2cd5c0c862ff02
#: ../../topics/http/middleware.txt:207
msgid ""
"It's sometimes useful to determine at run-time whether a piece of middleware "
"should be used. In these cases, your middleware's ``__init__`` method may "
"raise ``django.core.exceptions.MiddlewareNotUsed``. Django will then remove "
"that piece of middleware from the middleware process."
msgstr ""

# 8f573a6b39ba491b95b256a9da59b2ec
#: ../../topics/http/middleware.txt:213
msgid "Guidelines"
msgstr ""

# fe55fe086a764dc19c1b00532276b8d0
#: ../../topics/http/middleware.txt:215
msgid "Middleware classes don't have to subclass anything."
msgstr ""

# 17739100770b4b4b80d07cb502773820
#: ../../topics/http/middleware.txt:217
msgid ""
"The middleware class can live anywhere on your Python path. All Django cares "
"about is that the :setting:`MIDDLEWARE_CLASSES` setting includes the path to "
"it."
msgstr ""

# 2818b2aa4c6e4ca0a2d3f5075a44d6b8
#: ../../topics/http/middleware.txt:221
msgid ""
"Feel free to look at :doc:`Django's available middleware </ref/middleware>` "
"for examples."
msgstr ""

# c4308adb51464a54bd4be866ef05b7ce
#: ../../topics/http/middleware.txt:224
msgid ""
"If you write a middleware component that you think would be useful to other "
"people, contribute to the community! :doc:`Let us know </internals/"
"contributing/index>`, and we'll consider adding it to Django."
msgstr ""

# e46be111cd344ad897c376a4b8bccafd
#: ../../topics/http/sessions.txt:3
msgid "How to use sessions"
msgstr ""

# 21454d658ed04d5381af16de4e3bac41
#: ../../topics/http/sessions.txt:8
msgid ""
"Django provides full support for anonymous sessions. The session framework "
"lets you store and retrieve arbitrary data on a per-site-visitor basis. It "
"stores data on the server side and abstracts the sending and receiving of "
"cookies. Cookies contain a session ID -- not the data itself (unless you're "
"using the :ref:`cookie based backend<cookie-session-backend>`)."
msgstr ""

# 6ee6769fd8544a76bac45bca1171e06c
#: ../../topics/http/sessions.txt:15
msgid "Enabling sessions"
msgstr ""

# 72ac7ca69f704367a9924f155f482471
#: ../../topics/http/sessions.txt:17
msgid ""
"Sessions are implemented via a piece of :doc:`middleware </ref/middleware>`."
msgstr ""

# b1ae2e29ec774b549a5b61c943c309dc
#: ../../topics/http/sessions.txt:19
msgid "To enable session functionality, do the following:"
msgstr ""

# 156fec5ff77745e0bfd27ccd6e4aeb7d
#: ../../topics/http/sessions.txt:21
msgid ""
"Edit the :setting:`MIDDLEWARE_CLASSES` setting and make sure it contains "
"``'django.contrib.sessions.middleware.SessionMiddleware'``. The default "
"``settings.py`` created by ``django-admin.py startproject`` has "
"``SessionMiddleware`` activated."
msgstr ""

# 02915a758b38442f995d14cae06efac3
#: ../../topics/http/sessions.txt:26
msgid ""
"If you don't want to use sessions, you might as well remove the "
"``SessionMiddleware`` line from :setting:`MIDDLEWARE_CLASSES` and ``'django."
"contrib.sessions'`` from your :setting:`INSTALLED_APPS`. It'll save you a "
"small bit of overhead."
msgstr ""

# 435b728bcdc94675a91ffc45b666af8e
#: ../../topics/http/sessions.txt:32
msgid "Configuring the session engine"
msgstr ""

# 8bc8205b5b0b49248623a0d45ccdc6bc
#: ../../topics/http/sessions.txt:34
msgid ""
"By default, Django stores sessions in your database (using the model "
"``django.contrib.sessions.models.Session``). Though this is convenient, in "
"some setups it's faster to store session data elsewhere, so Django can be "
"configured to store session data on your filesystem or in your cache."
msgstr ""

# 72a11eff9f5b49a7ba69d5c62450cbd5
#: ../../topics/http/sessions.txt:40
msgid "Using database-backed sessions"
msgstr ""

# 151e3db75b084c66b5a0da63272892f6
#: ../../topics/http/sessions.txt:42
msgid ""
"If you want to use a database-backed session, you need to add ``'django."
"contrib.sessions'`` to your :setting:`INSTALLED_APPS` setting."
msgstr ""

# d2faf6d1d56345bf87ce62799719fb6d
#: ../../topics/http/sessions.txt:45
msgid ""
"Once you have configured your installation, run ``manage.py syncdb`` to "
"install the single database table that stores session data."
msgstr ""

# 5303d55713b64e258c62b7517bdac470
#: ../../topics/http/sessions.txt:49
msgid "Using cached sessions"
msgstr ""

# dfdf1d47c6a845c2978efdfcad49d033
#: ../../topics/http/sessions.txt:51
msgid ""
"For better performance, you may want to use a cache-based session backend."
msgstr ""

# 3ba89e533d7a4f118739d36ce83d197e
#: ../../topics/http/sessions.txt:53
msgid ""
"To store session data using Django's cache system, you'll first need to make "
"sure you've configured your cache; see the :doc:`cache documentation </"
"topics/cache>` for details."
msgstr ""

# e0a146c487c0485a8a51518730fea611
#: ../../topics/http/sessions.txt:59
msgid ""
"You should only use cache-based sessions if you're using the Memcached cache "
"backend. The local-memory cache backend doesn't retain data long enough to "
"be a good choice, and it'll be faster to use file or database sessions "
"directly instead of sending everything through the file or database cache "
"backends."
msgstr ""

# d1a5ba60af3848a1ba74f082d0b0ad3b
#: ../../topics/http/sessions.txt:65
msgid ""
"Once your cache is configured, you've got two choices for how to store data "
"in the cache:"
msgstr ""

# fa17a892cfd0494abafac4f393dc8bc5
#: ../../topics/http/sessions.txt:68
msgid ""
"Set :setting:`SESSION_ENGINE` to ``\"django.contrib.sessions.backends.cache"
"\"`` for a simple caching session store. Session data will be stored "
"directly your cache. However, session data may not be persistent: cached "
"data can be evicted if the cache fills up or if the cache server is "
"restarted."
msgstr ""

# ea5b3d106ce54bfb828c9149daf5c9a2
#: ../../topics/http/sessions.txt:74
msgid ""
"For persistent, cached data, set :setting:`SESSION_ENGINE` to ``\"django."
"contrib.sessions.backends.cached_db\"``. This uses a write-through cache -- "
"every write to the cache will also be written to the database. Session reads "
"only use the database if the data is not already in the cache."
msgstr ""

# d12e2874727e46e98e977689f1a68b25
#: ../../topics/http/sessions.txt:80
msgid ""
"Both session stores are quite fast, but the simple cache is faster because "
"it disregards persistence. In most cases, the ``cached_db`` backend will be "
"fast enough, but if you need that last bit of performance, and are willing "
"to let session data be expunged from time to time, the ``cache`` backend is "
"for you."
msgstr ""

# 8137eeb29930470a9d99da32312f89ce
#: ../../topics/http/sessions.txt:85
msgid ""
"If you use the ``cached_db`` session backend, you also need to follow the "
"configuration instructions for the `using database-backed sessions`_."
msgstr ""

# 634191bfbb24476997f32c0ba4371502
#: ../../topics/http/sessions.txt:89
msgid "Using file-based sessions"
msgstr ""

# 7ab9e23ede05483bb7baf1abdb035d8a
#: ../../topics/http/sessions.txt:91
msgid ""
"To use file-based sessions, set the :setting:`SESSION_ENGINE` setting to ``"
"\"django.contrib.sessions.backends.file\"``."
msgstr ""

# 579ada514ce346618bf2b26f832c1ad0
#: ../../topics/http/sessions.txt:94
msgid ""
"You might also want to set the :setting:`SESSION_FILE_PATH` setting (which "
"defaults to output from ``tempfile.gettempdir()``, most likely ``/tmp``) to "
"control where Django stores session files. Be sure to check that your Web "
"server has permissions to read and write to this location."
msgstr ""

# 350326de75a74e3f9d36d107a76a14f1
#: ../../topics/http/sessions.txt:102
msgid "Using cookie-based sessions"
msgstr ""

# 875fefa7156d4782ba21a4fd6f0a5071
#: ../../topics/http/sessions.txt:106
msgid ""
"To use cookies-based sessions, set the :setting:`SESSION_ENGINE` setting to "
"``\"django.contrib.sessions.backends.signed_cookies\"``. The session data "
"will be stored using Django's tools for :doc:`cryptographic signing </topics/"
"signing>` and the :setting:`SECRET_KEY` setting."
msgstr ""

# b4ccbd2275cc465493c97ef218f0f356
#: ../../topics/http/sessions.txt:113
msgid ""
"It's recommended to leave the :setting:`SESSION_COOKIE_HTTPONLY` setting "
"``True`` to prevent tampering of the stored data from JavaScript."
msgstr ""

# deaa25933cc74aeb9d565511067c3a78
#: ../../topics/http/sessions.txt:118
msgid "**The session data is signed but not encrypted**"
msgstr ""

# 7338e13e508c4039b9ff240eed9db97a
#: ../../topics/http/sessions.txt:120
msgid ""
"When using the cookies backend the session data can be read by the client."
msgstr ""

# 0e63dd71f2cd44298a05b99ad95d811a
#: ../../topics/http/sessions.txt:122
msgid ""
"A MAC (Message Authentication Code) is used to protect the data against "
"changes by the client, so that the session data will be invalidated when "
"being tampered with. The same invalidation happens if the client storing the "
"cookie (e.g. your user's browser) can't store all of the session cookie and "
"drops data. Even though Django compresses the data, it's still entirely "
"possible to exceed the `common limit of 4096 bytes`_ per cookie."
msgstr ""

# 9c09628c5a4f4debae9d67e0e6bf69a6
#: ../../topics/http/sessions.txt:129
msgid "**No freshness guarantee**"
msgstr ""

# ab16448b5c764bc4a20f45edd6722547
#: ../../topics/http/sessions.txt:131
msgid ""
"Note also that while the MAC can guarantee the authenticity of the data "
"(that it was generated by your site, and not someone else), and the "
"integrity of the data (that it is all there and correct), it cannot "
"guarantee freshness i.e. that you are being sent back the last thing you "
"sent to the client. This means that for some uses of session data, the "
"cookie backend might open you up to `replay attacks`_. Cookies will only be "
"detected as 'stale' if they are older than your :setting:"
"`SESSION_COOKIE_AGE`."
msgstr ""

# 690882be5ed444d18651e8b214aa4062
#: ../../topics/http/sessions.txt:140
msgid "**Performance**"
msgstr ""

# 90d459e55978401685ec12297d9b1f5b
#: ../../topics/http/sessions.txt:142
msgid ""
"Finally, the size of a cookie can have an impact on the `speed of your "
"site`_."
msgstr ""

# dd419391879746beabca3f5f785df9f7
#: ../../topics/http/sessions.txt:149
msgid "Using sessions in views"
msgstr ""

# 710f4b44f6024b35b4feb753e2cb195a
#: ../../topics/http/sessions.txt:151
msgid ""
"When ``SessionMiddleware`` is activated, each :class:`~django.http."
"HttpRequest` object -- the first argument to any Django view function -- "
"will have a ``session`` attribute, which is a dictionary-like object."
msgstr ""

# aa06a63e13a84e419c495874d8b43bb1
#: ../../topics/http/sessions.txt:155
msgid ""
"You can read it and write to ``request.session`` at any point in your view. "
"You can edit it multiple times."
msgstr ""

# 51eb4fc1d08240e69526e8c5a23602bc
#: ../../topics/http/sessions.txt:160
msgid ""
"This is the base class for all session objects. It has the following "
"standard dictionary methods:"
msgstr ""

# 1daf3c9e85a84d3c895a271cbbf93b1f
#: ../../topics/http/sessions.txt:165
msgid "Example: ``fav_color = request.session['fav_color']``"
msgstr ""

# 0e717d21c655464db8aa9639507a4d8a
#: ../../topics/http/sessions.txt:169
msgid "Example: ``request.session['fav_color'] = 'blue'``"
msgstr ""

# 939efe6f4e99415eb41a41ea27233b32
#: ../../topics/http/sessions.txt:173
msgid ""
"Example: ``del request.session['fav_color']``. This raises ``KeyError`` if "
"the given ``key`` isn't already in the session."
msgstr ""

# c69a77963ac64d72b864ab2990774d67
#: ../../topics/http/sessions.txt:178
msgid "Example: ``'fav_color' in request.session``"
msgstr ""

# ea1c8fbb8a644963ae4fe609348a82bc
#: ../../topics/http/sessions.txt:182
msgid "Example: ``fav_color = request.session.get('fav_color', 'red')``"
msgstr ""

# b98364e155bf4297bd153655423a94e4
#: ../../topics/http/sessions.txt:186
msgid "Example: ``fav_color = request.session.pop('fav_color')``"
msgstr ""

# 496a0f29bb694b178466eb5bebd5825a
#: ../../topics/http/sessions.txt:196
msgid "It also has these methods:"
msgstr ""

# 0831d08224dc4bf4becca3073f9aec5a
#: ../../topics/http/sessions.txt:200
msgid ""
"Delete the current session data from the session and regenerate the session "
"key value that is sent back to the user in the cookie. This is used if you "
"want to ensure that the previous session data can't be accessed again from "
"the user's browser (for example, the :func:`django.contrib.auth.logout()` "
"function calls it)."
msgstr ""

# a1cabe5c52a645c79be9fa151698545a
#: ../../topics/http/sessions.txt:208
msgid ""
"Sets a test cookie to determine whether the user's browser supports cookies. "
"Due to the way cookies work, you won't be able to test this until the user's "
"next page request. See `Setting test cookies`_ below for more information."
msgstr ""

# 63d73040e13f40f8b8294bbccc05a118
#: ../../topics/http/sessions.txt:215
msgid ""
"Returns either ``True`` or ``False``, depending on whether the user's "
"browser accepted the test cookie. Due to the way cookies work, you'll have "
"to call ``set_test_cookie()`` on a previous, separate page request. See "
"`Setting test cookies`_ below for more information."
msgstr ""

# 110ec949838f4d0a99ff825f3a17b227
#: ../../topics/http/sessions.txt:222
msgid "Deletes the test cookie. Use this to clean up after yourself."
msgstr ""

# b245e4df93604cfb9daf6fa5120168ce
#: ../../topics/http/sessions.txt:226
msgid ""
"Sets the expiration time for the session. You can pass a number of different "
"values:"
msgstr ""

# aacd75a189314634a89d5740ae450023
#: ../../topics/http/sessions.txt:229
msgid ""
"If ``value`` is an integer, the session will expire after that many seconds "
"of inactivity. For example, calling ``request.session.set_expiry(300)`` "
"would make the session expire in 5 minutes."
msgstr ""

# 1e5f3fe3b4504490b6110671c989094a
#: ../../topics/http/sessions.txt:234
msgid ""
"If ``value`` is a ``datetime`` or ``timedelta`` object, the session will "
"expire at that specific date/time."
msgstr ""

# 0751835a55d642ee979f581644a40c67
#: ../../topics/http/sessions.txt:237
msgid ""
"If ``value`` is ``0``, the user's session cookie will expire when the user's "
"Web browser is closed."
msgstr ""

# 1a7f067897ce4523b782afb46bdfe795
#: ../../topics/http/sessions.txt:240
msgid ""
"If ``value`` is ``None``, the session reverts to using the global session "
"expiry policy."
msgstr ""

# 7be7cdf026874e20bcc9694c5f8ef2e0
#: ../../topics/http/sessions.txt:243
msgid ""
"Reading a session is not considered activity for expiration purposes. "
"Session expiration is computed from the last time the session was *modified*."
msgstr ""

# fda172c36cb14bb9a4afaa0782f59266
#: ../../topics/http/sessions.txt:249
msgid ""
"Returns the number of seconds until this session expires. For sessions with "
"no custom expiration (or those set to expire at browser close), this will "
"equal :setting:`SESSION_COOKIE_AGE`."
msgstr ""

# 6ab2b3ee15d848889a0258b88d017fab
#: ../../topics/http/sessions.txt:255
msgid ""
"Returns the date this session will expire. For sessions with no custom "
"expiration (or those set to expire at browser close), this will equal the "
"date :setting:`SESSION_COOKIE_AGE` seconds from now."
msgstr ""

# ce866f6fa1664fb28c9acd122223d466
#: ../../topics/http/sessions.txt:261
msgid ""
"Returns either ``True`` or ``False``, depending on whether the user's "
"session cookie will expire when the user's Web browser is closed."
msgstr ""

# d5879068f23944cd91d44be064839188
#: ../../topics/http/sessions.txt:265
msgid "Session object guidelines"
msgstr ""

# b2e43da6ff8e450d90e94a6622860188
#: ../../topics/http/sessions.txt:267
msgid ""
"Use normal Python strings as dictionary keys on ``request.session``. This is "
"more of a convention than a hard-and-fast rule."
msgstr ""

# 21c6b718e1cb43ad9660d0c2998c84ad
#: ../../topics/http/sessions.txt:270
msgid ""
"Session dictionary keys that begin with an underscore are reserved for "
"internal use by Django."
msgstr ""

# 9f744091c99c4183a188846841ebe6e7
#: ../../topics/http/sessions.txt:273
msgid ""
"Don't override ``request.session`` with a new object, and don't access or "
"set its attributes. Use it like a Python dictionary."
msgstr ""

# e2ab292d911e4bebb58116b3f47460cf
#: ../../topics/http/sessions.txt:279
msgid ""
"This simplistic view sets a ``has_commented`` variable to ``True`` after a "
"user posts a comment. It doesn't let a user post a comment more than once::"
msgstr ""

# a6524e54997c47fdafe897bc98089d6d
#: ../../topics/http/sessions.txt:290
msgid "This simplistic view logs in a \"member\" of the site::"
msgstr ""

# 4ca5592e416a44bca76ac4371ea2fe01
#: ../../topics/http/sessions.txt:300
msgid "...And this one logs a member out, according to ``login()`` above::"
msgstr ""

# 5e177b335b9b408b9bee8dbafbd303ee
#: ../../topics/http/sessions.txt:309
msgid ""
"The standard :meth:`django.contrib.auth.logout` function actually does a bit "
"more than this to prevent inadvertent data leakage. It calls the :meth:"
"`~backends.base.SessionBase.flush` method of ``request.session``. We are "
"using this example as a demonstration of how to work with session objects, "
"not as a full ``logout()`` implementation."
msgstr ""

# e01635d75ada43c9a4bb87642a993725
#: ../../topics/http/sessions.txt:316
msgid "Setting test cookies"
msgstr ""

# b97eadc4e8c1456ba35a8eabf0739b42
#: ../../topics/http/sessions.txt:318
msgid ""
"As a convenience, Django provides an easy way to test whether the user's "
"browser accepts cookies. Just call the :meth:`~backends.base.SessionBase."
"set_test_cookie` method of ``request.session`` in a view, and call :meth:"
"`~backends.base.SessionBase.test_cookie_worked` in a subsequent view -- not "
"in the same view call."
msgstr ""

# ad614e163bba470692a74df81da7492d
#: ../../topics/http/sessions.txt:325
msgid ""
"This awkward split between ``set_test_cookie()`` and ``test_cookie_worked()"
"`` is necessary due to the way cookies work. When you set a cookie, you "
"can't actually tell whether a browser accepted it until the browser's next "
"request."
msgstr ""

# 66ac5473578145a3a070c8fd54296f4a
#: ../../topics/http/sessions.txt:329
msgid ""
"It's good practice to use :meth:`~backends.base.SessionBase."
"delete_test_cookie()` to clean up after yourself. Do this after you've "
"verified that the test cookie worked."
msgstr ""

# 6ecf822f039148bfa04b56b59ee35eb7
#: ../../topics/http/sessions.txt:333
msgid "Here's a typical usage example::"
msgstr ""

# 4669c79b4f534cf2b96370b2a77247e2
#: ../../topics/http/sessions.txt:346
msgid "Using sessions out of views"
msgstr ""

# 7382510bd3d14af7a642420d2b53fa5d
#: ../../topics/http/sessions.txt:348
msgid "An API is available to manipulate session data outside of a view::"
msgstr ""

# aeb2cf7ad4634ee3b2f596e7e06fc1af
#: ../../topics/http/sessions.txt:358
msgid ""
"If ``session_key`` isn't provided, one will be generated automatically::"
msgstr ""

# 66950fc048194130be2e746a1d8e6925
#: ../../topics/http/sessions.txt:366
msgid ""
"If you're using the ``django.contrib.sessions.backends.db`` backend, each "
"session is just a normal Django model. The ``Session`` model is defined in "
"``django/contrib/sessions/models.py``. Because it's a normal model, you can "
"access sessions using the normal Django database API::"
msgstr ""

# 527f7faed1df49de865e0c9a6d9ef700
#: ../../topics/http/sessions.txt:376
msgid ""
"Note that you'll need to call ``get_decoded()`` to get the session "
"dictionary. This is necessary because the dictionary is stored in an encoded "
"format::"
msgstr ""

# b35cfdd59bb14cd9b7a91e7fb425421d
#: ../../topics/http/sessions.txt:385
msgid "When sessions are saved"
msgstr ""

# 66ca279bb941457fb79f1698514344fa
#: ../../topics/http/sessions.txt:387
msgid ""
"By default, Django only saves to the session database when the session has "
"been modified -- that is if any of its dictionary values have been assigned "
"or deleted::"
msgstr ""

# 8081c20b12b04870acc268e4624c6fe9
#: ../../topics/http/sessions.txt:404
msgid ""
"In the last case of the above example, we can tell the session object "
"explicitly that it has been modified by setting the ``modified`` attribute "
"on the session object::"
msgstr ""

# abf2f12802194ea1bbd61c0d8d86e763
#: ../../topics/http/sessions.txt:410
msgid ""
"To change this default behavior, set the :setting:"
"`SESSION_SAVE_EVERY_REQUEST` setting to ``True``. When set to ``True``, "
"Django will save the session to the database on every single request."
msgstr ""

# 4963bab688ed4e2fb057dff65f9afdbe
#: ../../topics/http/sessions.txt:414
msgid ""
"Note that the session cookie is only sent when a session has been created or "
"modified. If :setting:`SESSION_SAVE_EVERY_REQUEST` is ``True``, the session "
"cookie will be sent on every request."
msgstr ""

# ae318e1adce64894a9e9e96e68f41b37
#: ../../topics/http/sessions.txt:418
msgid ""
"Similarly, the ``expires`` part of a session cookie is updated each time the "
"session cookie is sent."
msgstr ""

# 77308883e62048c6bacc82421eab22cc
#: ../../topics/http/sessions.txt:422
msgid "Browser-length sessions vs. persistent sessions"
msgstr ""

# c0df6bf084664610be6b76118c8e1f0f
#: ../../topics/http/sessions.txt:424
msgid ""
"You can control whether the session framework uses browser-length sessions "
"vs. persistent sessions with the :setting:`SESSION_EXPIRE_AT_BROWSER_CLOSE` "
"setting."
msgstr ""

# 9884221aea57474090083716589c518b
#: ../../topics/http/sessions.txt:428
msgid ""
"By default, :setting:`SESSION_EXPIRE_AT_BROWSER_CLOSE` is set to ``False``, "
"which means session cookies will be stored in users' browsers for as long "
"as :setting:`SESSION_COOKIE_AGE`. Use this if you don't want people to have "
"to log in every time they open a browser."
msgstr ""

# a4a2f3953ddc49d494545e5d72459502
#: ../../topics/http/sessions.txt:433
msgid ""
"If :setting:`SESSION_EXPIRE_AT_BROWSER_CLOSE` is set to ``True``, Django "
"will use browser-length cookies -- cookies that expire as soon as the user "
"closes his or her browser. Use this if you want people to have to log in "
"every time they open a browser."
msgstr ""

# 139ae20ff55146f0ba570ecd2eb4445e
#: ../../topics/http/sessions.txt:438
msgid ""
"This setting is a global default and can be overwritten at a per-session "
"level by explicitly calling the :meth:`~backends.base.SessionBase."
"set_expiry` method of ``request.session`` as described above in `using "
"sessions in views`_."
msgstr ""

# 93a88158e5814569944046baf678e239
#: ../../topics/http/sessions.txt:443
msgid "Clearing the session table"
msgstr ""

# e94663093e924495a6121b1ad7a8d0bc
#: ../../topics/http/sessions.txt:445
msgid ""
"If you're using the database backend, note that session data can accumulate "
"in the ``django_session`` database table and Django does *not* provide "
"automatic purging. Therefore, it's your job to purge expired sessions on a "
"regular basis."
msgstr ""

# 37b47bce59f9428791e40018c3a515c1
#: ../../topics/http/sessions.txt:449
msgid ""
"To understand this problem, consider what happens when a user uses a "
"session. When a user logs in, Django adds a row to the ``django_session`` "
"database table. Django updates this row each time the session data changes. "
"If the user logs out manually, Django deletes the row. But if the user does "
"*not* log out, the row never gets deleted."
msgstr ""

# 5fce13cb9a184e8fb0ce3cb28c3ada18
#: ../../topics/http/sessions.txt:455
msgid ""
"Django provides a sample clean-up script: ``django-admin.py cleanup``. That "
"script deletes any session in the session table whose ``expire_date`` is in "
"the past -- but your application may have different requirements."
msgstr ""

# 8270fc8595ab4b7fa4ea20251fcc9a51
#: ../../topics/http/sessions.txt:460
msgid "Settings"
msgstr ""

# 617d6521dea14bc9983467ac61ef85fe
#: ../../topics/http/sessions.txt:462
msgid ""
"A few :doc:`Django settings </ref/settings>` give you control over session "
"behavior:"
msgstr ""

# 24570e81aad841fe91351fd5a5250442
#: ../../topics/http/sessions.txt:466
msgid "SESSION_ENGINE"
msgstr ""

# ed2e9c94a9ae415f8353236634f17189
#: ../../topics/http/sessions.txt:468
msgid "Default: ``django.contrib.sessions.backends.db``"
msgstr ""

# 4744c49f8fd54250afbfebc2b80ee2ac
#: ../../topics/http/sessions.txt:470
msgid "Controls where Django stores session data. Valid values are:"
msgstr ""

# f78e7019ccf74a78ab9455896564da6a
#: ../../topics/http/sessions.txt:472
msgid "``'django.contrib.sessions.backends.db'``"
msgstr ""

# 53cf259a48ee4ed38b9c982df4712852
#: ../../topics/http/sessions.txt:473
msgid "``'django.contrib.sessions.backends.file'``"
msgstr ""

# 9ec4d277d0254f309383bce09f4a93f7
#: ../../topics/http/sessions.txt:474
msgid "``'django.contrib.sessions.backends.cache'``"
msgstr ""

# a0ee466130524fccb7f118f6201ef6d7
#: ../../topics/http/sessions.txt:475
msgid "``'django.contrib.sessions.backends.cached_db'``"
msgstr ""

# 8c8f8d701094423e9c3d8e30289ebdca
#: ../../topics/http/sessions.txt:476
msgid "``'django.contrib.sessions.backends.signed_cookies'``"
msgstr ""

# 80ed283521a940dfba7d44d6ae9d87b6
#: ../../topics/http/sessions.txt:478
msgid "See `configuring the session engine`_ for more details."
msgstr ""

# 995a0bc9cc3e4749aaaa1e16b20af8c7
#: ../../topics/http/sessions.txt:481
msgid "SESSION_FILE_PATH"
msgstr ""

# df4f528d86644618a66a9992dff54cfa
#: ../../topics/http/sessions.txt:483
msgid "Default: ``/tmp/``"
msgstr ""

# 0e91582f10574aab92d9b2f70f9bedb8
#: ../../topics/http/sessions.txt:485
msgid ""
"If you're using file-based session storage, this sets the directory in which "
"Django will store session data."
msgstr ""

# 718b8f0e8c654bb88e4e00aaed7d6941
#: ../../topics/http/sessions.txt:489
msgid "SESSION_COOKIE_AGE"
msgstr ""

# eb5a23a7a7c7496095b446c66e7b09ae
#: ../../topics/http/sessions.txt:491
msgid "Default: ``1209600`` (2 weeks, in seconds)"
msgstr ""

# afc96aa2713248d882e80f2703c47110
#: ../../topics/http/sessions.txt:493
msgid "The age of session cookies, in seconds."
msgstr ""

# a91ff4cb1643430f950a2abd16a55301
#: ../../topics/http/sessions.txt:496
msgid "SESSION_COOKIE_DOMAIN"
msgstr ""

# 4af0fdb46b244857bc7502f2629fb09d
#: ../../topics/http/sessions.txt:498
msgid "Default: ``None``"
msgstr ""

# 719ab61786cc40f09e928c1f85e87a8a
#: ../../topics/http/sessions.txt:500
msgid ""
"The domain to use for session cookies. Set this to a string such as ``\"."
"lawrence.com\"`` (note the leading dot!) for cross-domain cookies, or use "
"``None`` for a standard domain cookie."
msgstr ""

# 4a9c3d5eedf74727b7f07f5e544b0e09
#: ../../topics/http/sessions.txt:505
msgid "SESSION_COOKIE_HTTPONLY"
msgstr ""

# fb2f6722ab184ebf9e42a9cf24c53040
#: ../../topics/http/sessions.txt:507
msgid "Default: ``True``"
msgstr ""

# 53485c62a04f43909ef3f84f4411c391
#: ../../topics/http/sessions.txt:509
msgid ""
"Whether to use HTTPOnly flag on the session cookie. If this is set to "
"``True``, client-side JavaScript will not to be able to access the session "
"cookie."
msgstr ""

# ae4cc41135f946c1985687030f402c98
#: ../../topics/http/sessions.txt:513
msgid ""
"HTTPOnly_ is a flag included in a Set-Cookie HTTP response header. It is not "
"part of the :rfc:`2109` standard for cookies, and it isn't honored "
"consistently by all browsers. However, when it is honored, it can be a "
"useful way to mitigate the risk of client side script accessing the "
"protected cookie data."
msgstr ""

# 1087094fc72a4c1a964a82cac54b0566
#: ../../topics/http/sessions.txt:522
msgid "SESSION_COOKIE_NAME"
msgstr ""

# 6a4a3a7b68c54081887d435935a122eb
#: ../../topics/http/sessions.txt:524
msgid "Default: ``'sessionid'``"
msgstr ""

# 3d7d3783afe3467a890e602973ec637f
#: ../../topics/http/sessions.txt:526
msgid ""
"The name of the cookie to use for sessions. This can be whatever you want."
msgstr ""

# 076a4542ede44b74a87f6f556b34c2c2
#: ../../topics/http/sessions.txt:529
msgid "SESSION_COOKIE_PATH"
msgstr ""

# a85a815aae6c4515a4ee26b21990499c
#: ../../topics/http/sessions.txt:531
msgid "Default: ``'/'``"
msgstr ""

# f3c9a7ffc208421e99102a9c20528c76
#: ../../topics/http/sessions.txt:533
msgid ""
"The path set on the session cookie. This should either match the URL path of "
"your Django installation or be parent of that path."
msgstr ""

# eccfe7e11f04454981f1a79c5e960af1
#: ../../topics/http/sessions.txt:536
msgid ""
"This is useful if you have multiple Django instances running under the same "
"hostname. They can use different cookie paths, and each instance will only "
"see its own session cookie."
msgstr ""

# c283d8d559bc4bc38f4ce247df96da12
#: ../../topics/http/sessions.txt:541
msgid "SESSION_COOKIE_SECURE"
msgstr ""

# 2b69cdb2ea1c4456a56297bfeb8937ba
#: ../../topics/http/sessions.txt:545
msgid ""
"Whether to use a secure cookie for the session cookie. If this is set to "
"``True``, the cookie will be marked as \"secure,\" which means browsers may "
"ensure that the cookie is only sent under an HTTPS connection."
msgstr ""

# 21a7e12beea7437d978fb1b2383fc6bd
#: ../../topics/http/sessions.txt:550
msgid "SESSION_EXPIRE_AT_BROWSER_CLOSE"
msgstr ""

# dfefa6f5cada455488aaa6cd7437b337
#: ../../topics/http/sessions.txt:554
msgid ""
"Whether to expire the session when the user closes his or her browser. See "
"\"Browser-length sessions vs. persistent sessions\" above."
msgstr ""

# c546ebfe72b1410d9470fcff71a3c877
#: ../../topics/http/sessions.txt:558
msgid "SESSION_SAVE_EVERY_REQUEST"
msgstr ""

# e9626b637abf4b9c9151aab24c484424
#: ../../topics/http/sessions.txt:562
msgid ""
"Whether to save the session data on every request. If this is ``False`` "
"(default), then the session data will only be saved if it has been modified "
"-- that is, if any of its dictionary values have been assigned or deleted."
msgstr ""

# bafcf6b8366840d08a969e90318ef208
#: ../../topics/http/sessions.txt:569
msgid "Technical details"
msgstr ""

# 9ba3ad9b9ed346bcb384bb0f3d17b4cc
#: ../../topics/http/sessions.txt:571
msgid ""
"The session dictionary should accept any pickleable Python object. See the :"
"mod:`pickle` module for more information."
msgstr ""

# 9ea889c8a0e44d3488cc8df49dbede30
#: ../../topics/http/sessions.txt:574
msgid "Session data is stored in a database table named ``django_session`` ."
msgstr ""

# 5166a5be5267489ba7356ccdedc78727
#: ../../topics/http/sessions.txt:576
msgid ""
"Django only sends a cookie if it needs to. If you don't set any session "
"data, it won't send a session cookie."
msgstr ""

# dd1da113f815435b8c437e4dd723232e
#: ../../topics/http/sessions.txt:580
msgid "Session IDs in URLs"
msgstr ""

# 2849dd2f733549f2846b8e129b57ee85
#: ../../topics/http/sessions.txt:582
msgid ""
"The Django sessions framework is entirely, and solely, cookie-based. It does "
"not fall back to putting session IDs in URLs as a last resort, as PHP does. "
"This is an intentional design decision. Not only does that behavior make "
"URLs ugly, it makes your site vulnerable to session-ID theft via the "
"\"Referer\" header."
msgstr ""

# 827bdcb7cdcf428992d231b9a67385d6
#: ../../topics/http/shortcuts.txt:3
msgid "Django shortcut functions"
msgstr ""

# 3ee1404987584cddb59c3eb8f6fabe12
#: ../../topics/http/shortcuts.txt:11
msgid ""
"The package ``django.shortcuts`` collects helper functions and classes that "
"\"span\" multiple levels of MVC. In other words, these functions/classes "
"introduce controlled coupling for convenience's sake."
msgstr ""

# 71e2a0f5abb94276bfad75bab38d66f4
#: ../../topics/http/shortcuts.txt:16
msgid "``render``"
msgstr ""

# 422c3b05455e4efda00c1e2f51cc408d
#: ../../topics/http/shortcuts.txt:22
msgid ""
"Combines a given template with a given context dictionary and returns an :"
"class:`~django.http.HttpResponse` object with that rendered text."
msgstr ""

# 7b1b02b3d9ca4c4395b888c79792d951
#: ../../topics/http/shortcuts.txt:25
msgid ""
":func:`render()` is the same as a call to :func:`render_to_response()` with "
"a `context_instance` argument that forces the use of a :class:`~django."
"template.RequestContext`."
msgstr ""

# e57bee6a90ea45689c57d3d062cab49a
# 8b2a0c4f47a144988602c4ce0f1745af
# eb23bdef109f40edb0e03163ba216bda
# 2df23b348e3b470a8383375ddef8d974
# 00ec568ef7444374baf1ca083bc3f80f
#: ../../topics/http/shortcuts.txt:30 ../../topics/http/shortcuts.txt:98
#: ../../topics/http/shortcuts.txt:228 ../../topics/http/shortcuts.txt:274
#: ../../topics/pagination.txt:141
msgid "Required arguments"
msgstr ""

# 8a7641a79df6473089eb45c626a2a270
#: ../../topics/http/shortcuts.txt:33
msgid "The request object used to generate this response."
msgstr ""

# 5f487c36d2b343e5872ccdf155979585
#: ../../topics/http/shortcuts.txt:36
msgid "The full name of a template to use or sequence of template names."
msgstr ""

# c135648c45724d2a919949ee57621e1d
# f0683f2fadbb4c19b1325fb53be5e49a
# 8af1ca94df8f4cba9b59fcc3df7ce7e3
#: ../../topics/http/shortcuts.txt:39 ../../topics/http/shortcuts.txt:107
#: ../../topics/pagination.txt:152
msgid "Optional arguments"
msgstr ""

# 3c99e47ee53c4fc5bcc09b412f0c9a1a
# e88816a6faf542a9b2c21e90d060bd81
#: ../../topics/http/shortcuts.txt:42 ../../topics/http/shortcuts.txt:110
msgid ""
"A dictionary of values to add to the template context. By default, this is "
"an empty dictionary. If a value in the dictionary is callable, the view will "
"call it just before rendering the template."
msgstr ""

# 36d6241cac2c46b0afbf2c2ae066bafd
#: ../../topics/http/shortcuts.txt:47
msgid ""
"The context instance to render the template with. By default, the template "
"will be rendered with a ``RequestContext`` instance (filled with values from "
"``request`` and ``dictionary``)."
msgstr ""

# 45d159caca204ffb9afc008b19617390
# 58ccb922830145e9b0acfe7465bbb26e
#: ../../topics/http/shortcuts.txt:52 ../../topics/http/shortcuts.txt:127
msgid ""
"The MIME type to use for the resulting document. Defaults to the value of "
"the :setting:`DEFAULT_CONTENT_TYPE` setting."
msgstr ""

# 15e8fd7695a943dca99f801a8b2816b6
#: ../../topics/http/shortcuts.txt:56
msgid "The status code for the response. Defaults to ``200``."
msgstr ""

# feaf0a86240c4232b3caaa05e8849db3
#: ../../topics/http/shortcuts.txt:59
msgid ""
"A hint indicating which application contains the current view. See the :ref:"
"`namespaced URL resolution strategy <topics-http-reversing-url-namespaces>` "
"for more information."
msgstr ""

# 7ee93c0020f04c70aec1fef038a265c9
# e27b4544718849b0bcb947bc7a1f2cd9
# 588256076d164c5ba3374506940c2b5d
# e25414459ad64b93902dc0df16b55fa0
# ffd851c6429a4469acb441abb2a08f78
# 08be5e6e435d48f38db71d53631fd838
# 41fc0d14b69048e28be35b094863e0e9
# d14a9055cb704a3e9ff9e5fd1f3ca439
#: ../../topics/http/shortcuts.txt:64 ../../topics/http/shortcuts.txt:131
#: ../../topics/http/shortcuts.txt:240 ../../topics/http/shortcuts.txt:286
#: ../../topics/http/urls.txt:67 ../../topics/pagination.txt:13
#: ../../topics/testing.txt:1011 ../../topics/testing.txt:1064
msgid "Example"
msgstr ""

# a795a3d071c7457fa70ac63253d4c93b
# 4c0c3a77b57f4cae880ac6bd1d66cd4a
#: ../../topics/http/shortcuts.txt:66 ../../topics/http/shortcuts.txt:133
msgid ""
"The following example renders the template ``myapp/index.html`` with the "
"MIME type :mimetype:`application/xhtml+xml`::"
msgstr ""

# 8a7587de21e54d8a9688c99e2051d15a
# ca27193706384f39b82dbeea9f3b93dc
# 16e8ec07f2e54003935e9237e9f611ce
# dc5132ee62ec4a64be077b3915b59d15
#: ../../topics/http/shortcuts.txt:76 ../../topics/http/shortcuts.txt:143
#: ../../topics/http/shortcuts.txt:250 ../../topics/http/shortcuts.txt:295
msgid "This example is equivalent to::"
msgstr ""

# da3b73977f1348c3a7fa44bed1d7ea9d
#: ../../topics/http/shortcuts.txt:90
msgid "``render_to_response``"
msgstr ""

# 40b3b21ae2aa4b6ba610c4b9bef461ee
#: ../../topics/http/shortcuts.txt:94
msgid ""
"Renders a given template with a given context dictionary and returns an :"
"class:`~django.http.HttpResponse` object with that rendered text."
msgstr ""

# 78a6fd614ffc4d8e8fcd0e366191cc9a
#: ../../topics/http/shortcuts.txt:101
msgid ""
"The full name of a template to use or sequence of template names. If a "
"sequence is given, the first template that exists will be used. See the :ref:"
"`template loader documentation <ref-templates-api-the-python-api>` for more "
"information on how templates are found."
msgstr ""

# e940a0a57f0a42809e62299316250ca7
#: ../../topics/http/shortcuts.txt:115
msgid ""
"The context instance to render the template with. By default, the template "
"will be rendered with a :class:`~django.template.Context` instance (filled "
"with values from ``dictionary``). If you need to use :ref:`context "
"processors <subclassing-context-requestcontext>`, render the template with "
"a :class:`~django.template.RequestContext` instance instead. Your code might "
"look something like this::"
msgstr ""

# 56d204d8ecb44eb68183a220d4b7c210
#: ../../topics/http/shortcuts.txt:156
msgid "``redirect``"
msgstr ""

# bb69cc7a109a434abfcbe14c8094ac89
#: ../../topics/http/shortcuts.txt:160
msgid ""
"Returns an :class:`~django.http.HttpResponseRedirect` to the appropriate URL "
"for the arguments passed."
msgstr ""

# f961021e64184d1d87f5a8cb835cbe5c
#: ../../topics/http/shortcuts.txt:163
msgid "The arguments could be:"
msgstr ""

# a6ffd4471d734cdeb63cc8c1276c4d52
#: ../../topics/http/shortcuts.txt:165
msgid "A model: the model's `get_absolute_url()` function will be called."
msgstr ""

# 0be30c25b211443687572ed7b9469890
#: ../../topics/http/shortcuts.txt:167
msgid ""
"A view name, possibly with arguments: `urlresolvers.reverse()` will be used "
"to reverse-resolve the name."
msgstr ""

# b0201c9c3cd14a07b73d91ce54b04c81
#: ../../topics/http/shortcuts.txt:170
msgid "A URL, which will be used as-is for the redirect location."
msgstr ""

# f46901c535da4853ab0048ab95a6103f
#: ../../topics/http/shortcuts.txt:172
msgid ""
"By default issues a temporary redirect; pass ``permanent=True`` to issue a "
"permanent redirect"
msgstr ""

# 71fb211412ed456aab8e15dfb42b809b
#: ../../topics/http/shortcuts.txt:178
msgid "You can use the :func:`redirect` function in a number of ways."
msgstr ""

# 96d3e10891224b66a62985a0a6f58bcd
#: ../../topics/http/shortcuts.txt:180
msgid ""
"By passing some object; that object's :meth:`~django.db.models.Model."
"get_absolute_url` method will be called to figure out the redirect URL::"
msgstr ""

# dbccfa1a77594d0f8274049d9fe0bcfc
#: ../../topics/http/shortcuts.txt:189
msgid ""
"By passing the name of a view and optionally some positional or keyword "
"arguments; the URL will be reverse resolved using the :func:`~django.core."
"urlresolvers.reverse` method::"
msgstr ""

# 810b03f96992441bb7f5c0a1260080e5
#: ../../topics/http/shortcuts.txt:197
msgid "By passing a hardcoded URL to redirect to::"
msgstr ""

# 97f515c2ef584280859cb51db3193a15
#: ../../topics/http/shortcuts.txt:203
msgid "This also works with full URLs::"
msgstr ""

# 41885d2b78ee4d159edb45c0a406a272
#: ../../topics/http/shortcuts.txt:209
msgid ""
"By default, :func:`redirect` returns a temporary redirect. All of the above "
"forms accept a ``permanent`` argument; if set to ``True`` a permanent "
"redirect will be returned::"
msgstr ""

# 00ae7c4bed3a4277a7000b53008b7158
#: ../../topics/http/shortcuts.txt:219
msgid "``get_object_or_404``"
msgstr ""

# 258abde6c4614794ae5f907f0cb87c97
#: ../../topics/http/shortcuts.txt:223
msgid ""
"Calls :meth:`~django.db.models.query.QuerySet.get()` on a given model "
"manager, but it raises :class:`~django.http.Http404` instead of the model's :"
"class:`~django.core.exceptions.DoesNotExist` exception."
msgstr ""

# ab2a8d46c0f6499fa596f277ef48b274
#: ../../topics/http/shortcuts.txt:231
msgid ""
"A :class:`~django.db.models.Model`, :class:`~django.db.models.Manager` or :"
"class:`~django.db.models.query.QuerySet` instance from which to get the "
"object."
msgstr ""

# bb593812a73040a289447576f9da9944
# 37d989af3588419981f7b2e73253ea7f
#: ../../topics/http/shortcuts.txt:236 ../../topics/http/shortcuts.txt:282
msgid ""
"Lookup parameters, which should be in the format accepted by ``get()`` and "
"``filter()``."
msgstr ""

# ec1f0d990ee84a4181dc4b116f3ead42
#: ../../topics/http/shortcuts.txt:242
msgid ""
"The following example gets the object with the primary key of 1 from "
"``MyModel``::"
msgstr ""

# 688075abb5164bc697b90cefc0ca1b2d
#: ../../topics/http/shortcuts.txt:260
msgid ""
"Note: As with ``get()``, a :class:`~django.core.exceptions."
"MultipleObjectsReturned` exception will be raised if more than one object is "
"found."
msgstr ""

# 8833744e0850489d8c82fd30f0ec5e0e
#: ../../topics/http/shortcuts.txt:265
msgid "``get_list_or_404``"
msgstr ""

# 8854f412dbbb44348f33af1835f7eddb
#: ../../topics/http/shortcuts.txt:269
msgid ""
"Returns the result of :meth:`~django.db.models.query.QuerySet.filter()` on a "
"given model manager, raising :class:`~django.http.Http404` if the resulting "
"list is empty."
msgstr ""

# b0f768e8b3334d6baefc2a08e3afe213
#: ../../topics/http/shortcuts.txt:277
msgid ""
"A :class:`~django.db.models.Model`, :class:`~django.db.models.Manager` or :"
"class:`~django.db.models.query.QuerySet` instance from which to get the list."
msgstr ""

# 35990d9ac0624acdadebff0be69f5067
#: ../../topics/http/shortcuts.txt:288
msgid "The following example gets all published objects from ``MyModel``::"
msgstr ""

# 095fa9d6168e46bf9b288ddf570f9319
#: ../../topics/http/urls.txt:3
msgid "URL dispatcher"
msgstr ""

# e6d974daa8644d4281f3ee1866de6b99
#: ../../topics/http/urls.txt:7
msgid ""
"A clean, elegant URL scheme is an important detail in a high-quality Web "
"application. Django lets you design URLs however you want, with no framework "
"limitations."
msgstr ""

# 410d2640228c42c9ac3d841d79c80b5c
#: ../../topics/http/urls.txt:11
msgid ""
"There's no ``.php`` or ``.cgi`` required, and certainly none of that "
"``0,2097,1-1-1928,00`` nonsense."
msgstr ""

# 511b1a8ca9804c3f988bd12a6fc146ea
#: ../../topics/http/urls.txt:14
msgid ""
"See `Cool URIs don't change`_, by World Wide Web creator Tim Berners-Lee, "
"for excellent arguments on why URLs should be clean and usable."
msgstr ""

# c478757dbc5f47e5b8ceb0dbfd07b6f7
#: ../../topics/http/urls.txt:22
msgid ""
"To design URLs for an app, you create a Python module informally called a "
"**URLconf** (URL configuration). This module is pure Python code and is a "
"simple mapping between URL patterns (as simple regular expressions) to "
"Python callback functions (your views)."
msgstr ""

# 199e53f2f59f4da4956629e6d993112b
#: ../../topics/http/urls.txt:27
msgid ""
"This mapping can be as short or as long as needed. It can reference other "
"mappings. And, because it's pure Python code, it can be constructed "
"dynamically."
msgstr ""

# be5e3dc0fede44cbb6d4554271cde5d5
#: ../../topics/http/urls.txt:39
msgid "How Django processes a request"
msgstr ""

# 7b3eb2d9455945bfb8de93c801a6e269
#: ../../topics/http/urls.txt:41
msgid ""
"When a user requests a page from your Django-powered site, this is the "
"algorithm the system follows to determine which Python code to execute:"
msgstr ""

# 5bcb75367b7340d4aba221485f517f14
#: ../../topics/http/urls.txt:44
msgid ""
"Django determines the root URLconf module to use. Ordinarily, this is the "
"value of the :setting:`ROOT_URLCONF` setting, but if the incoming "
"``HttpRequest`` object has an attribute called ``urlconf`` (set by "
"middleware :ref:`request processing <request-middleware>`), its value will "
"be used in place of the :setting:`ROOT_URLCONF` setting."
msgstr ""

# 28454a4f7cfe498d8e08f2f9359fdf9a
#: ../../topics/http/urls.txt:50
msgid ""
"Django loads that Python module and looks for the variable ``urlpatterns``. "
"This should be a Python list, in the format returned by the function :func:"
"`django.conf.urls.patterns`."
msgstr ""

# b105d10e37984b8189079d756e484f62
#: ../../topics/http/urls.txt:54
msgid ""
"Django runs through each URL pattern, in order, and stops at the first one "
"that matches the requested URL."
msgstr ""

# 56220e7b02c8452ea2f02be1f442f470
#: ../../topics/http/urls.txt:57
msgid ""
"Once one of the regexes matches, Django imports and calls the given view, "
"which is a simple Python function. The view gets passed an :class:`~django."
"http.HttpRequest` as its first argument and any values captured in the regex "
"as remaining arguments."
msgstr ""

# 0602b80180a84b26aea1cae142bf48ef
#: ../../topics/http/urls.txt:62
msgid ""
"If no regex matches, or if an exception is raised during any point in this "
"process, Django invokes an appropriate error-handling view. See `Error "
"handling`_ below."
msgstr ""

# ca4442411f2d4f24926a8a13b69bd545
#: ../../topics/http/urls.txt:69
msgid "Here's a sample URLconf::"
msgstr ""

# 78f741705526420aaaddda7ea196e751
# 8ddb861e95104c07be2b02ba984c3b9a
#: ../../topics/http/urls.txt:80 ../../topics/i18n/translation.txt:1413
msgid "Notes:"
msgstr ""

# 6a68e42d034f4ec4baf02c0e7c8f0be0
#: ../../topics/http/urls.txt:82
msgid "To capture a value from the URL, just put parenthesis around it."
msgstr ""

# 83c2cc35165b4ad1a023775a2ddaf780
#: ../../topics/http/urls.txt:84
msgid ""
"There's no need to add a leading slash, because every URL has that. For "
"example, it's ``^articles``, not ``^/articles``."
msgstr ""

# c85a6672508946fa993f8a33080c1596
#: ../../topics/http/urls.txt:87
msgid ""
"The ``'r'`` in front of each regular expression string is optional but "
"recommended. It tells Python that a string is \"raw\" -- that nothing in the "
"string should be escaped. See `Dive Into Python's explanation`_."
msgstr ""

# 5f1f0fb695af4304a7c04500160f391f
#: ../../topics/http/urls.txt:91
msgid "Example requests:"
msgstr ""

# fc5507b4414d4c60a9f1601045047bdf
#: ../../topics/http/urls.txt:93
msgid ""
"A request to ``/articles/2005/03/`` would match the third entry in the list. "
"Django would call the function ``news.views.month_archive(request, '2005', "
"'03')``."
msgstr ""

# 5b3204be32954150ae79a46d1b153ed4
#: ../../topics/http/urls.txt:97
msgid ""
"``/articles/2005/3/`` would not match any URL patterns, because the third "
"entry in the list requires two digits for the month."
msgstr ""

# fc5ee8bada7c49ed98f9c8e2c7c2cc7e
#: ../../topics/http/urls.txt:100
msgid ""
"``/articles/2003/`` would match the first pattern in the list, not the "
"second one, because the patterns are tested in order, and the first one is "
"the first test to pass. Feel free to exploit the ordering to insert special "
"cases like this."
msgstr ""

# 15666ff7787b4fe6bb804e92616f0eca
#: ../../topics/http/urls.txt:105
msgid ""
"``/articles/2003`` would not match any of these patterns, because each "
"pattern requires that the URL end with a slash."
msgstr ""

# fb68690ad70c476ba0ae2d6c11753b3e
#: ../../topics/http/urls.txt:108
msgid ""
"``/articles/2003/03/03/`` would match the final pattern. Django would call "
"the function ``news.views.article_detail(request, '2003', '03', '03')``."
msgstr ""

# a058d26bd0be482e8279dc19cf0636eb
#: ../../topics/http/urls.txt:114
msgid "Named groups"
msgstr ""

# e44ca03ebd214a83be157e1c7f57ff9e
#: ../../topics/http/urls.txt:116
msgid ""
"The above example used simple, *non-named* regular-expression groups (via "
"parenthesis) to capture bits of the URL and pass them as *positional* "
"arguments to a view. In more advanced usage, it's possible to use *named* "
"regular-expression groups to capture URL bits and pass them as *keyword* "
"arguments to a view."
msgstr ""

# 122003af561a4710b56172c3f8253634
#: ../../topics/http/urls.txt:122
msgid ""
"In Python regular expressions, the syntax for named regular-expression "
"groups is ``(?P<name>pattern)``, where ``name`` is the name of the group and "
"``pattern`` is some pattern to match."
msgstr ""

# 72a66593bed7400782ccd1d749ed9311
#: ../../topics/http/urls.txt:126
msgid "Here's the above example URLconf, rewritten to use named groups::"
msgstr ""

# e23b17ac98b04a5c9e0ae96697a07707
#: ../../topics/http/urls.txt:135
msgid ""
"This accomplishes exactly the same thing as the previous example, with one "
"subtle difference: The captured values are passed to view functions as "
"keyword arguments rather than positional arguments. For example:"
msgstr ""

# 10b1490e41ce4cf29b8466a145de4b33
#: ../../topics/http/urls.txt:139
msgid ""
"A request to ``/articles/2005/03/`` would call the function ``news.views."
"month_archive(request, year='2005', month='03')``, instead of ``news.views."
"month_archive(request, '2005', '03')``."
msgstr ""

# 0989436e585e4a438427f6102d8a391a
#: ../../topics/http/urls.txt:143
msgid ""
"A request to ``/articles/2003/03/03/`` would call the function ``news.views."
"article_detail(request, year='2003', month='03', day='03')``."
msgstr ""

# 2e9ee097ad964f7187896da3b42976e6
#: ../../topics/http/urls.txt:146
msgid ""
"In practice, this means your URLconfs are slightly more explicit and less "
"prone to argument-order bugs -- and you can reorder the arguments in your "
"views' function definitions. Of course, these benefits come at the cost of "
"brevity; some developers find the named-group syntax ugly and too verbose."
msgstr ""

# 708c5d9a6ccd4f889aac2d3fbdf54fe1
#: ../../topics/http/urls.txt:152
msgid "The matching/grouping algorithm"
msgstr ""

# beb6bafd4065426683d97b969573492a
#: ../../topics/http/urls.txt:154
msgid ""
"Here's the algorithm the URLconf parser follows, with respect to named "
"groups vs. non-named groups in a regular expression:"
msgstr ""

# 2b95aa8cd01549fea2f5f282ddbf2481
#: ../../topics/http/urls.txt:157
msgid ""
"If there are any named arguments, it will use those, ignoring non-named "
"arguments. Otherwise, it will pass all non-named arguments as positional "
"arguments."
msgstr ""

# a0f2abe22b2d4e049631fb855c7d6ba3
#: ../../topics/http/urls.txt:160
msgid ""
"In both cases, it will pass any extra keyword arguments as keyword "
"arguments. See \"Passing extra options to view functions\" below."
msgstr ""

# 3f42b6d7ec7346febfb6e31ad7aaad00
#: ../../topics/http/urls.txt:164
msgid "What the URLconf searches against"
msgstr ""

# eef2c934f73047e597726f0580d7fd11
#: ../../topics/http/urls.txt:166
msgid ""
"The URLconf searches against the requested URL, as a normal Python string. "
"This does not include GET or POST parameters, or the domain name."
msgstr ""

# 323a3d64c821475e8b00cd54320c9115
#: ../../topics/http/urls.txt:169
msgid ""
"For example, in a request to ``http://www.example.com/myapp/``, the URLconf "
"will look for ``myapp/``."
msgstr ""

# f89081155cb3488d939e41c3c73bfca2
#: ../../topics/http/urls.txt:172
msgid ""
"In a request to ``http://www.example.com/myapp/?page=3``, the URLconf will "
"look for ``myapp/``."
msgstr ""

# b091e1d2a43544c4a4256fd40b38973a
#: ../../topics/http/urls.txt:175
msgid ""
"The URLconf doesn't look at the request method. In other words, all request "
"methods -- ``POST``, ``GET``, ``HEAD``, etc. -- will be routed to the same "
"function for the same URL."
msgstr ""

# 56d3ce8d62a24b67b5161b6504bb9b09
#: ../../topics/http/urls.txt:180
msgid "Syntax of the urlpatterns variable"
msgstr ""

# deab06d3029d4ac9bd2375c12df53fe2
#: ../../topics/http/urls.txt:182
msgid ""
"``urlpatterns`` should be a Python list, in the format returned by the "
"function :func:`django.conf.urls.patterns`. Always use ``patterns()`` to "
"create the ``urlpatterns`` variable."
msgstr ""

# 337dcd19de444e2e87b79ba01c4401ab
#: ../../topics/http/urls.txt:187
msgid "``django.conf.urls`` utility functions"
msgstr ""

# e43c7e50017b4fc8829298fe207f5cd1
#: ../../topics/http/urls.txt:196
msgid ""
"Until Django 1.3 they were located in ``django.conf.urls.defaults``. You "
"still can import them from there but it will be removed in Django 1.6."
msgstr ""

# b9c2765d7af749d2b08a07438467425c
#: ../../topics/http/urls.txt:200
msgid "patterns"
msgstr ""

# ced778cc6d414e8fbfeba2e923407094
#: ../../topics/http/urls.txt:204
msgid ""
"A function that takes a prefix, and an arbitrary number of URL patterns, and "
"returns a list of URL patterns in the format Django needs."
msgstr ""

# 958430eec54a4e9b9b0c766be1e51aa4
#: ../../topics/http/urls.txt:207
msgid ""
"The first argument to ``patterns()`` is a string ``prefix``. See `The view "
"prefix`_ below."
msgstr ""

# 304b2b47b6c04140a1175b99755cc0f3
#: ../../topics/http/urls.txt:210
msgid "The remaining arguments should be tuples in this format::"
msgstr ""

# 5ff7b04048b04a34985a2f652250714d
#: ../../topics/http/urls.txt:214
msgid ""
"...where ``optional dictionary`` and ``optional name`` are optional. (See "
"`Passing extra options to view functions`_ below.)"
msgstr ""

# 4261c0fb0a124997b9fcedd2e926e3af
#: ../../topics/http/urls.txt:218
msgid ""
"Because `patterns()` is a function call, it accepts a maximum of 255 "
"arguments (URL patterns, in this case). This is a limit for all Python "
"function calls. This is rarely a problem in practice, because you'll "
"typically structure your URL patterns modularly by using `include()` "
"sections. However, on the off-chance you do hit the 255-argument limit, "
"realize that `patterns()` returns a Python list, so you can split up the "
"construction of the list."
msgstr ""

# b8095f2100da4d58aafdfa1a57f22ff1
#: ../../topics/http/urls.txt:235
msgid ""
"Python lists have unlimited size, so there's no limit to how many URL "
"patterns you can construct. The only limit is that you can only create 254 "
"at a time (the 255th argument is the initial prefix argument)."
msgstr ""

# 3f9481390f6c46ec9c50273445bee0e4
#: ../../topics/http/urls.txt:240
msgid "url"
msgstr ""

# 883f40a5f06d44c49affdda0675332c4
#: ../../topics/http/urls.txt:244
msgid ""
"You can use the ``url()`` function, instead of a tuple, as an argument to "
"``patterns()``. This is convenient if you want to specify a name without the "
"optional extra arguments dictionary. For example::"
msgstr ""

# 6f61296cfef545b1b27bb1307810da64
#: ../../topics/http/urls.txt:253
msgid "This function takes five arguments, most of which are optional::"
msgstr ""

# b0f1885365464c6e9c264e28a8d59793
#: ../../topics/http/urls.txt:257
msgid "See `Naming URL patterns`_ for why the ``name`` parameter is useful."
msgstr ""

# 6f169aa05f684b1eb69ed8e7863abfd5
#: ../../topics/http/urls.txt:259
msgid ""
"The ``prefix`` parameter has the same meaning as the first argument to "
"``patterns()`` and is only relevant when you're passing a string as the "
"``view`` parameter."
msgstr ""

# db1527839ed54504a862c1d2d716ed13
#: ../../topics/http/urls.txt:264
msgid "include"
msgstr ""

# 609102feb7e24e899c652fa2ac6753ed
#: ../../topics/http/urls.txt:268
msgid ""
"A function that takes a full Python import path to another URLconf module "
"that should be \"included\" in this place."
msgstr ""

# b26e83b289bd4808a4326dc1f59d5964
#: ../../topics/http/urls.txt:271
msgid ""
":func:`include` also accepts as an argument an iterable that returns URL "
"patterns."
msgstr ""

# d1fc3fba405f40a6bf03b4ae33192047
#: ../../topics/http/urls.txt:274
msgid "See `Including other URLconfs`_ below."
msgstr ""

# a7af646772b04d258421399441a480e7
#: ../../topics/http/urls.txt:277
msgid "Error handling"
msgstr ""

# 3c02e88da88a4b71be961d02db0c1e95
#: ../../topics/http/urls.txt:279
msgid ""
"When Django can't find a regex matching the requested URL, or when an "
"exception is raised, Django will invoke an error-handling view. The views to "
"use for these cases are specified by three variables which can be set in "
"your root URLconf. Setting these variables in any other URLconf will have no "
"effect."
msgstr ""

# b53a93ae245f40d0818c33d05cdfba09
#: ../../topics/http/urls.txt:285
msgid ""
"See the documentation on :ref:`customizing error views <customizing-error-"
"views>` for more details."
msgstr ""

# 6c50e09461c44635bdef0dcfec41240f
#: ../../topics/http/urls.txt:289
msgid "handler403"
msgstr ""

# 6e9f9bd388494937a3cbe99a820579c9
#: ../../topics/http/urls.txt:293
msgid ""
"A callable, or a string representing the full Python import path to the view "
"that should be called if the user doesn't have the permissions required to "
"access a resource."
msgstr ""

# 39d6133875a54d00b117dee8b98698f9
#: ../../topics/http/urls.txt:297
msgid ""
"By default, this is ``'django.views.defaults.permission_denied'``. That "
"default value should suffice."
msgstr ""

# aff73703a8a14c9e8314c6276fc073a7
#: ../../topics/http/urls.txt:300
msgid ""
"See the documentation about :ref:`the 403 (HTTP Forbidden) view "
"<http_forbidden_view>` for more information."
msgstr ""

# 4bcca6540d9b4ec08ab0ff22d1abb6a5
#: ../../topics/http/urls.txt:307
msgid "handler404"
msgstr ""

# a2011f82b75e4ab4943f7b5baa638a5d
#: ../../topics/http/urls.txt:311
msgid ""
"A callable, or a string representing the full Python import path to the view "
"that should be called if none of the URL patterns match."
msgstr ""

# bbb50681e7684444af5123b56518fc9e
#: ../../topics/http/urls.txt:314
msgid ""
"By default, this is ``'django.views.defaults.page_not_found'``. That default "
"value should suffice."
msgstr ""

# 55cfef2c006e4772a3c99da61623d831
#: ../../topics/http/urls.txt:321
msgid "handler500"
msgstr ""

# b68c9852f5524938a367287e8e20e998
#: ../../topics/http/urls.txt:325
msgid ""
"A callable, or a string representing the full Python import path to the view "
"that should be called in case of server errors. Server errors happen when "
"you have runtime errors in view code."
msgstr ""

# d22d81f26fde4b83904f58a8bf97d30f
#: ../../topics/http/urls.txt:329
msgid ""
"By default, this is ``'django.views.defaults.server_error'``. That default "
"value should suffice."
msgstr ""

# 49e05182ef6a4a0795b6353eecf66878
#: ../../topics/http/urls.txt:336
msgid "Notes on capturing text in URLs"
msgstr ""

# 1f705aa4616c40fbb3ecf7ac993866cd
#: ../../topics/http/urls.txt:338
msgid ""
"Each captured argument is sent to the view as a plain Python string, "
"regardless of what sort of match the regular expression makes. For example, "
"in this URLconf line::"
msgstr ""

# 0f1c03df7697459b82881291a8101407
#: ../../topics/http/urls.txt:344
msgid ""
"...the ``year`` argument to ``news.views.year_archive()`` will be a string, "
"not an integer, even though the ``\\d{4}`` will only match integer strings."
msgstr ""

# 7b4cc7c38019484fa4f2f9d51c0ecde8
#: ../../topics/http/urls.txt:347
msgid ""
"A convenient trick is to specify default parameters for your views' "
"arguments. Here's an example URLconf and view::"
msgstr ""

# 4d450b2226c1469c9e281ec83a9bf4fe
#: ../../topics/http/urls.txt:360
msgid ""
"In the above example, both URL patterns point to the same view -- ``blog."
"views.page`` -- but the first pattern doesn't capture anything from the URL. "
"If the first pattern matches, the ``page()`` function will use its default "
"argument for ``num``, ``\"1\"``. If the second pattern matches, ``page()`` "
"will use whatever ``num`` value was captured by the regex."
msgstr ""

# d96aee9d3bcd4d26a32bd364e866b68b
#: ../../topics/http/urls.txt:367
msgid "Performance"
msgstr ""

# 99ed0f7b20a74cffa5736f92c0afb3af
#: ../../topics/http/urls.txt:369
msgid ""
"Each regular expression in a ``urlpatterns`` is compiled the first time it's "
"accessed. This makes the system blazingly fast."
msgstr ""

# d95760c7b1bc4688a3cea1579e05e761
#: ../../topics/http/urls.txt:373
msgid "The view prefix"
msgstr ""

# 436442ac35c44a70ba637694f49873dc
#: ../../topics/http/urls.txt:375
msgid ""
"You can specify a common prefix in your ``patterns()`` call, to cut down on "
"code duplication."
msgstr ""

# d29c69bd3c1046f98615e864b5c4c510
#: ../../topics/http/urls.txt:378
msgid ""
"Here's the example URLconf from the :doc:`Django overview </intro/"
"overview>`::"
msgstr ""

# 83a374d4ce6948bf866b30be7cd57089
#: ../../topics/http/urls.txt:388
msgid ""
"In this example, each view has a common prefix -- ``'news.views'``. Instead "
"of typing that out for each entry in ``urlpatterns``, you can use the first "
"argument to the ``patterns()`` function to specify a prefix to apply to each "
"view function."
msgstr ""

# a615a944cac441e99171a150e117fa6f
#: ../../topics/http/urls.txt:393
msgid "With this in mind, the above example can be written more concisely as::"
msgstr ""

# 641a71a0de154daaa49059db1c929425
#: ../../topics/http/urls.txt:403
msgid ""
"Note that you don't put a trailing dot (``\".\"``) in the prefix. Django "
"puts that in automatically."
msgstr ""

# 8271a5603a33425aa1e0c0b7b5a9fe65
#: ../../topics/http/urls.txt:407
msgid "Multiple view prefixes"
msgstr ""

# fe0cafaab2d0497f9506fd5cc810526c
#: ../../topics/http/urls.txt:409
msgid ""
"In practice, you'll probably end up mixing and matching views to the point "
"where the views in your ``urlpatterns`` won't have a common prefix. However, "
"you can still take advantage of the view prefix shortcut to remove "
"duplication. Just add multiple ``patterns()`` objects together, like this:"
msgstr ""

# 924e6276cee5414298974c6ea449eeb5
#: ../../topics/http/urls.txt:414
msgid "Old::"
msgstr ""

# 232965f028d5413ebc271ba5a8fc4a74
#: ../../topics/http/urls.txt:424
msgid "New::"
msgstr ""

# e21b392b2688437a8d3c785785899d2a
#: ../../topics/http/urls.txt:438
msgid "Including other URLconfs"
msgstr ""

# 6c0322c0fbc54411890d348107ee7f5a
#: ../../topics/http/urls.txt:440
msgid ""
"At any point, your ``urlpatterns`` can \"include\" other URLconf modules. "
"This essentially \"roots\" a set of URLs below other ones."
msgstr ""

# 6fa11686ee1d43b4869700f039e0c8d8
#: ../../topics/http/urls.txt:443
msgid ""
"For example, here's an excerpt of the URLconf for the `Django Web site`_ "
"itself. It includes a number of other URLconfs::"
msgstr ""

# 6eb919ba26e74476800b196f76c448e7
#: ../../topics/http/urls.txt:457
msgid ""
"Note that the regular expressions in this example don't have a ``$`` (end-of-"
"string match character) but do include a trailing slash. Whenever Django "
"encounters ``include()``, it chops off whatever part of the URL matched up "
"to that point and sends the remaining string to the included URLconf for "
"further processing."
msgstr ""

# 266d9fea4f7c4d1bac4b43ea0e794498
#: ../../topics/http/urls.txt:463
msgid ""
"Another possibility is to include additional URL patterns not by specifying "
"the URLconf Python module defining them as the `include`_ argument but by "
"using directly the pattern list as returned by `patterns`_ instead. For "
"example::"
msgstr ""

# 17c7d501e7a747c98309c3bbbc8d1052
#: ../../topics/http/urls.txt:480
msgid ""
"This approach can be seen in use when you deploy an instance of the Django "
"Admin application. The Django Admin is deployed as instances of a :class:"
"`~django.contrib.admin.AdminSite`; each :class:`~django.contrib.admin."
"AdminSite` instance has an attribute ``urls`` that returns the url patterns "
"available to that instance. It is this attribute that you ``include()`` into "
"your projects ``urlpatterns`` when you deploy the admin instance."
msgstr ""

# e1711d1389394539861a3f0091164aef
#: ../../topics/http/urls.txt:491
msgid "Captured parameters"
msgstr ""

# 67de1a97a9354ad48810d4066a95f0ce
#: ../../topics/http/urls.txt:493
msgid ""
"An included URLconf receives any captured parameters from parent URLconfs, "
"so the following example is valid::"
msgstr ""

# 2d17820a86ff46d09435aaade453cb4d
#: ../../topics/http/urls.txt:507
msgid ""
"In the above example, the captured ``\"username\"`` variable is passed to "
"the included URLconf, as expected."
msgstr ""

# c4832a5671e345109700b5cde364daf8
#: ../../topics/http/urls.txt:513
msgid "Defining URL namespaces"
msgstr ""

# 29edc68f83cc469d8e16481d1bca3cab
#: ../../topics/http/urls.txt:515
msgid ""
"When you need to deploy multiple instances of a single application, it can "
"be helpful to be able to differentiate between instances. This is especially "
"important when using :ref:`named URL patterns <naming-url-patterns>`, since "
"multiple instances of a single application will share named URLs. Namespaces "
"provide a way to tell these named URLs apart."
msgstr ""

# 06bca06b6d0b45f18647244f93272ebc
#: ../../topics/http/urls.txt:521
msgid "A URL namespace comes in two parts, both of which are strings:"
msgstr ""

# a3bc542b252a42b7925372d82e75d775
#: ../../topics/http/urls.txt:523
msgid ""
"An **application namespace**. This describes the name of the application "
"that is being deployed. Every instance of a single application will have the "
"same application namespace. For example, Django's admin application has the "
"somewhat predictable application namespace of ``admin``."
msgstr ""

# 06be96b8cc5a4d84b58945a103b0a4a6
#: ../../topics/http/urls.txt:528
msgid ""
"An **instance namespace**. This identifies a specific instance of an "
"application. Instance namespaces should be unique across your entire "
"project. However, an instance namespace can be the same as the application "
"namespace. This is used to specify a default instance of an application. For "
"example, the default Django Admin instance has an instance namespace of "
"``admin``."
msgstr ""

# bc849048a44c48c3bed5e503ea7c06cd
#: ../../topics/http/urls.txt:535
msgid "URL Namespaces can be specified in two ways."
msgstr ""

# a6b37b86836b4e11b21a2ae27d366a17
#: ../../topics/http/urls.txt:537
msgid ""
"Firstly, you can provide the application and instance namespace as arguments "
"to ``include()`` when you construct your URL patterns. For example,::"
msgstr ""

# d30e9ab526d34df19c232b290fe347dd
#: ../../topics/http/urls.txt:542
msgid ""
"This will include the URLs defined in ``apps.help.urls`` into the "
"application namespace ``bar``, with the instance namespace ``foo``."
msgstr ""

# c29ed8b2f3814a59b9d55e15300c1be1
#: ../../topics/http/urls.txt:545
msgid ""
"Secondly, you can include an object that contains embedded namespace data. "
"If you ``include()`` a ``patterns`` object, that object will be added to the "
"global namespace. However, you can also ``include()`` an object that "
"contains a 3-tuple containing::"
msgstr ""

# eff26cd657b3455dbd9ad9e0cc50832a
#: ../../topics/http/urls.txt:552
msgid ""
"This will include the nominated URL patterns into the given application and "
"instance namespace. For example, the ``urls`` attribute of Django's :class:"
"`~django.contrib.admin.AdminSite` object returns a 3-tuple that contains all "
"the patterns in an admin site, plus the name of the admin instance, and the "
"application namespace ``admin``."
msgstr ""

# 33f6140c99854332a681ddf092777022
#: ../../topics/http/urls.txt:558
msgid ""
"Once you have defined namespaced URLs, you can reverse them. For details on "
"reversing namespaced urls, see the documentation on :ref:`reversing "
"namespaced URLs <topics-http-reversing-url-namespaces>`."
msgstr ""

# 2b9fdb1442ef41f4914fe917dba94c0b
#: ../../topics/http/urls.txt:563
msgid "Passing extra options to view functions"
msgstr ""

# f9158002fa604c439cd22fc24ab4a682
#: ../../topics/http/urls.txt:565
msgid ""
"URLconfs have a hook that lets you pass extra arguments to your view "
"functions, as a Python dictionary."
msgstr ""

# 8b66646adf8f4dbb98dfc6043a686173
#: ../../topics/http/urls.txt:568
msgid ""
"Any URLconf tuple can have an optional third element, which should be a "
"dictionary of extra keyword arguments to pass to the view function."
msgstr ""

# 81bdfd1d8fbd424b8c53db77753cd77e
#: ../../topics/http/urls.txt:577
msgid ""
"In this example, for a request to ``/blog/2005/``, Django will call the "
"``blog.views.year_archive()`` view, passing it these keyword arguments::"
msgstr ""

# cce14a1a90374567acc55389f8d4776c
#: ../../topics/http/urls.txt:582
msgid ""
"This technique is used in :doc:`generic views </ref/generic-views>` and in "
"the :doc:`syndication framework </ref/contrib/syndication>` to pass metadata "
"and options to views."
msgstr ""

# 6feb1376efcf414d8385ddcc99fd14dd
#: ../../topics/http/urls.txt:588
msgid ""
"It's possible to have a URL pattern which captures named keyword arguments, "
"and also passes arguments with the same names in its dictionary of extra "
"arguments. When this happens, the arguments in the dictionary will be used "
"instead of the arguments captured in the URL."
msgstr ""

# e26ebf8f81a344dcb892a23987f2bd1e
#: ../../topics/http/urls.txt:594
msgid "Passing extra options to ``include()``"
msgstr ""

# afef19b34e7247ceb4201181d77a6491
#: ../../topics/http/urls.txt:596
msgid ""
"Similarly, you can pass extra options to ``include()``. When you pass extra "
"options to ``include()``, *each* line in the included URLconf will be passed "
"the extra options."
msgstr ""

# eb9ca526b4464c21aaf7cfe28cd49e90
#: ../../topics/http/urls.txt:600
msgid "For example, these two URLconf sets are functionally identical:"
msgstr ""

# 7c86808631764ffc9aa64b2ef4340ffa
#: ../../topics/http/urls.txt:602
msgid "Set one::"
msgstr ""

# edc4a3083a5a4bb59410ebab5ec21cdc
#: ../../topics/http/urls.txt:615
msgid "Set two::"
msgstr ""

# 705975674ccc4786bb32aa10d8f0d1a3
#: ../../topics/http/urls.txt:628
msgid ""
"Note that extra options will *always* be passed to *every* line in the "
"included URLconf, regardless of whether the line's view actually accepts "
"those options as valid. For this reason, this technique is only useful if "
"you're certain that every view in the included URLconf accepts the extra "
"options you're passing."
msgstr ""

# 256fcce73bf14fe681fc63680400fd55
#: ../../topics/http/urls.txt:634
msgid "Passing callable objects instead of strings"
msgstr ""

# 7d803674cccf413095ce692645a52d03
#: ../../topics/http/urls.txt:636
msgid ""
"Some developers find it more natural to pass the actual Python function "
"object rather than a string containing the path to its module. This "
"alternative is supported -- you can pass any callable object as the view."
msgstr ""

# bc1a088a0b3440e08b362571b23a7358
#: ../../topics/http/urls.txt:640
msgid "For example, given this URLconf in \"string\" notation::"
msgstr ""

# fbcf12d231504d8f8dba334b60bb303c
#: ../../topics/http/urls.txt:648
msgid ""
"You can accomplish the same thing by passing objects rather than strings. "
"Just be sure to import the objects::"
msgstr ""

# 8ed6ec84af2f441eb2e49928081c66a5
#: ../../topics/http/urls.txt:659
msgid ""
"The following example is functionally identical. It's just a bit more "
"compact because it imports the module that contains the views, rather than "
"importing each view individually::"
msgstr ""

# 84ac2dd6c0474a1f9bbfad7c55bf23b5
#: ../../topics/http/urls.txt:671
msgid "The style you use is up to you."
msgstr ""

# b629419bef664b2e8dc451a9f380033e
#: ../../topics/http/urls.txt:673
msgid ""
"Note that if you use this technique -- passing objects rather than strings "
"-- the view prefix (as explained in \"The view prefix\" above) will have no "
"effect."
msgstr ""

# 76ea863df3674560998e35716a541c84
#: ../../topics/http/urls.txt:679
msgid "Naming URL patterns"
msgstr ""

# 0e40701102a341ada587dce3934fe2f1
#: ../../topics/http/urls.txt:681
msgid ""
"It's fairly common to use the same view function in multiple URL patterns in "
"your URLconf. For example, these two URL patterns both point to the "
"``archive`` view::"
msgstr ""

# 14ce044e6f8a4db287a80f9b1ae029da
#: ../../topics/http/urls.txt:690
msgid ""
"This is completely valid, but it leads to problems when you try to do "
"reverse URL matching (through the ``permalink()`` decorator or the :ttag:"
"`url` template tag). Continuing this example, if you wanted to retrieve the "
"URL for the ``archive`` view, Django's reverse URL matcher would get "
"confused, because *two* URL patterns point at that view."
msgstr ""

# 18bf77988b1e4d6dbae8027519bfb697
#: ../../topics/http/urls.txt:696
msgid ""
"To solve this problem, Django supports **named URL patterns**. That is, you "
"can give a name to a URL pattern in order to distinguish it from other "
"patterns using the same view and parameters. Then, you can use this name in "
"reverse URL matching."
msgstr ""

# e327e6bdb76943a5a20405bcbd525148
#: ../../topics/http/urls.txt:701
msgid "Here's the above example, rewritten to use named URL patterns::"
msgstr ""

# 2350af810dde477f9db1d55923ed3c98
#: ../../topics/http/urls.txt:708
msgid ""
"With these names in place (``full-archive`` and ``arch-summary``), you can "
"target each pattern individually by using its name:"
msgstr ""

# 9c6a7bacdf564d8d890deccc5bb5df89
#: ../../topics/http/urls.txt:716
msgid ""
"Even though both URL patterns refer to the ``archive`` view here, using the "
"``name`` parameter to ``url()`` allows you to tell them apart in templates."
msgstr ""

# cce2e122919e4aebaf455573668efd9a
#: ../../topics/http/urls.txt:719
msgid ""
"The string used for the URL name can contain any characters you like. You "
"are not restricted to valid Python names."
msgstr ""

# bf3cc53f0e074f7ab43bdfb83dd95653
#: ../../topics/http/urls.txt:724
msgid ""
"When you name your URL patterns, make sure you use names that are unlikely "
"to clash with any other application's choice of names. If you call your URL "
"pattern ``comment``, and another application does the same thing, there's no "
"guarantee which URL will be inserted into your template when you use this "
"name."
msgstr ""

# d0a8949799d84c189387e39577abba3f
#: ../../topics/http/urls.txt:730
msgid ""
"Putting a prefix on your URL names, perhaps derived from the application "
"name, will decrease the chances of collision. We recommend something like "
"``myapp-comment`` instead of ``comment``."
msgstr ""

# e961ac19b6024dadb374c13e54fc001f
#: ../../topics/http/urls.txt:737
msgid "URL namespaces"
msgstr ""

# 1d9bc04378ec47c99bf2551e8bb06773
#: ../../topics/http/urls.txt:739
msgid ""
"Namespaced URLs are specified using the ``:`` operator. For example, the "
"main index page of the admin application is referenced using ``admin:"
"index``. This indicates a namespace of ``admin``, and a named URL of "
"``index``."
msgstr ""

# c66863e68bb54931908514cff75f7ce5
#: ../../topics/http/urls.txt:743
msgid ""
"Namespaces can also be nested. The named URL ``foo:bar:whiz`` would look for "
"a pattern named ``whiz`` in the namespace ``bar`` that is itself defined "
"within the top-level namespace ``foo``."
msgstr ""

# c142514ecb4d4161b43c5ae6dbbfd3ce
#: ../../topics/http/urls.txt:747
msgid ""
"When given a namespaced URL (e.g. ``myapp:index``) to resolve, Django splits "
"the fully qualified name into parts, and then tries the following lookup:"
msgstr ""

# 136da2f4291040d29935aaba9bf244cf
#: ../../topics/http/urls.txt:750
msgid ""
"First, Django looks for a matching application namespace (in this example, "
"``myapp``). This will yield a list of instances of that application."
msgstr ""

# 0b494996bee84e51b7c9a45a64c4da8f
#: ../../topics/http/urls.txt:754
msgid ""
"If there is a *current* application defined, Django finds and returns the "
"URL resolver for that instance. The *current* application can be specified "
"as an attribute on the template context - applications that expect to have "
"multiple deployments should set the ``current_app`` attribute on any "
"``Context`` or ``RequestContext`` that is used to render a template."
msgstr ""

# 7cffc6e454284adca05948d6425f11ba
#: ../../topics/http/urls.txt:761
msgid ""
"The current application can also be specified manually as an argument to "
"the :func:`reverse()` function."
msgstr ""

# 426471aa6c084daea905e667bf3348d5
#: ../../topics/http/urls.txt:764
msgid ""
"If there is no current application. Django looks for a default application "
"instance. The default application instance is the instance that has an "
"instance namespace matching the application namespace (in this example, an "
"instance of the ``myapp`` called ``myapp``)."
msgstr ""

# ceec3bcc897441818c19f6106063e6e1
#: ../../topics/http/urls.txt:769
msgid ""
"If there is no default application instance, Django will pick the last "
"deployed instance of the application, whatever its instance name may be."
msgstr ""

# f3bd032fec704d9788644d98aa1eb7a2
#: ../../topics/http/urls.txt:772
msgid ""
"If the provided namespace doesn't match an application namespace in step 1, "
"Django will attempt a direct lookup of the namespace as an instance "
"namespace."
msgstr ""

# 4e40e44aad864c8788cb0d7d4219103f
#: ../../topics/http/urls.txt:776
msgid ""
"If there are nested namespaces, these steps are repeated for each part of "
"the namespace until only the view name is unresolved. The view name will "
"then be resolved into a URL in the namespace that has been found."
msgstr ""

# 8df945bd9d7849e0a22852f445d80b1b
#: ../../topics/http/urls.txt:780
msgid ""
"To show this resolution strategy in action, consider an example of two "
"instances of ``myapp``: one called ``foo``, and one called ``bar``. "
"``myapp`` has a main index page with a URL named `index`. Using this setup, "
"the following lookups are possible:"
msgstr ""

# 7aed3dd2797c42ee84ac4565050af9b4
# a71a97de05254ea4a1c102929100f92a
#: ../../topics/http/urls.txt:785 ../../topics/http/urls.txt:801
msgid ""
"If one of the instances is current - say, if we were rendering a utility "
"page in the instance ``bar`` - ``myapp:index`` will resolve to the index "
"page of the instance ``bar``."
msgstr ""

# d993f2a5fa094d01b1545e099a47fb96
#: ../../topics/http/urls.txt:789
msgid ""
"If there is no current instance - say, if we were rendering a page somewhere "
"else on the site - ``myapp:index`` will resolve to the last registered "
"instance of ``myapp``. Since there is no default instance, the last instance "
"of ``myapp`` that is registered will be used. This could be ``foo`` or "
"``bar``, depending on the order they are introduced into the urlpatterns of "
"the project."
msgstr ""

# 7548c1621826474cbbaf5dbabc7da069
#: ../../topics/http/urls.txt:796
msgid ""
"``foo:index`` will always resolve to the index page of the instance ``foo``."
msgstr ""

# 84c5707f24664ad4bfe47db22102e8d9
#: ../../topics/http/urls.txt:798
msgid ""
"If there was also a default instance - i.e., an instance named `myapp` - the "
"following would happen:"
msgstr ""

# a2e87c63098945d98907f02eff52a578
#: ../../topics/http/urls.txt:805
msgid ""
"If there is no current instance - say, if we were rendering a page somewhere "
"else on the site - ``myapp:index`` will resolve to the index page of the "
"default instance."
msgstr ""

# c3658768d082461ba5eb9d60e04df345
#: ../../topics/http/urls.txt:809
msgid ""
"``foo:index`` will again resolve to the index page of the instance ``foo``."
msgstr ""

# 1bb2631e6ab84374a444d7097bab8563
#: ../../topics/http/urls.txt:813
msgid "``django.core.urlresolvers`` utility functions"
msgstr ""

# dde475d0b5f141f3b12208286e953f41
#: ../../topics/http/urls.txt:818
msgid "reverse()"
msgstr ""

# 50510ff73d6d49bca1cec8e4c1040c25
#: ../../topics/http/urls.txt:820
msgid ""
"If you need to use something similar to the :ttag:`url` template tag in your "
"code, Django provides the following function (in the :mod:`django.core."
"urlresolvers` module):"
msgstr ""

# 09b514ab5f0a4f68b848270376621740
#: ../../topics/http/urls.txt:826
msgid ""
"``viewname`` is either the function name (either a function reference, or "
"the string version of the name, if you used that form in ``urlpatterns``) or "
"the `URL pattern name`_.  Normally, you won't need to worry about the "
"``urlconf`` parameter and will only pass in the positional and keyword "
"arguments to use in the URL matching. For example::"
msgstr ""

# fc7d00bf851c496db764adb68b412484
#: ../../topics/http/urls.txt:839
msgid ""
"The ``reverse()`` function can reverse a large variety of regular expression "
"patterns for URLs, but not every possible one. The main restriction at the "
"moment is that the pattern cannot contain alternative choices using the "
"vertical bar (``\"|\"``) character. You can quite happily use such patterns "
"for matching against incoming URLs and sending them off to views, but you "
"cannot reverse such patterns."
msgstr ""

# fb72af4ff8f84145a82088924ce73b49
#: ../../topics/http/urls.txt:846
msgid ""
"The ``current_app`` argument allows you to provide a hint to the resolver "
"indicating the application to which the currently executing view belongs. "
"This ``current_app`` argument is used as a hint to resolve application "
"namespaces into URLs on specific application instances, according to the :"
"ref:`namespaced URL resolution strategy <topics-http-reversing-url-"
"namespaces>`."
msgstr ""

# 134542127cbb4327a4769f7d1c365f77
#: ../../topics/http/urls.txt:852
msgid "You can use ``kwargs`` instead of ``args``. For example::"
msgstr ""

# 4f8564f508524f07beedcbb65c108903
#: ../../topics/http/urls.txt:857
msgid ""
"``args`` and ``kwargs`` cannot be passed to ``reverse()`` at the same time."
msgstr ""

# 948655f09fd24e84a431215fb91617c1
#: ../../topics/http/urls.txt:861
msgid ""
"As part of working out which URL names map to which patterns, the ``reverse()"
"`` function has to import all of your URLconf files and examine the name of "
"each view. This involves importing each view function. If there are *any* "
"errors whilst importing any of your view functions, it will cause ``reverse()"
"`` to raise an error, even if that view function is not the one you are "
"trying to reverse."
msgstr ""

# 99f72409670a48e7b012f0044423c2f6
#: ../../topics/http/urls.txt:868
msgid ""
"Make sure that any views you reference in your URLconf files exist and can "
"be imported correctly. Do not include lines that reference views you haven't "
"written yet, because those views will not be importable."
msgstr ""

# 54cb0ba740c541cbb9fd0baad2d7c22a
#: ../../topics/http/urls.txt:874
msgid ""
"The string returned by :meth:`~django.core.urlresolvers.reverse` is already :"
"ref:`urlquoted <uri-and-iri-handling>`. For example::"
msgstr ""

# aa845fd4abe7475c8d4ea9448450c1f3
#: ../../topics/http/urls.txt:880
msgid ""
"Applying further encoding (such as :meth:`~django.utils.http.urlquote` or "
"``urllib.quote``) to the output of :meth:`~django.core.urlresolvers.reverse` "
"may produce undesirable results."
msgstr ""

# ac6d60703b2445618b5af3c772823b07
#: ../../topics/http/urls.txt:885
msgid "reverse_lazy()"
msgstr ""

# dd267ce2c0cb420c987d127572415951
#: ../../topics/http/urls.txt:889
msgid "A lazily evaluated version of `reverse()`_."
msgstr ""

# ffb97aca295f4607b46bb8e6097c166d
#: ../../topics/http/urls.txt:893
msgid ""
"It is useful for when you need to use a URL reversal before your project's "
"URLConf is loaded. Some common cases where this function is necessary are:"
msgstr ""

# 30f9a4da1c8041d88d2fe6e0850a0a6b
#: ../../topics/http/urls.txt:896
msgid ""
"providing a reversed URL as the ``url`` attribute of a generic class-based "
"view."
msgstr ""

# da12dbfe1bdc445dba9cc0d5cca34a0f
#: ../../topics/http/urls.txt:899
msgid ""
"providing a reversed URL to a decorator (such as the ``login_url`` argument "
"for the :func:`django.contrib.auth.decorators.permission_required` "
"decorator)."
msgstr ""

# 3e0d022d08d2416c8d28c78be0277ed8
#: ../../topics/http/urls.txt:903
msgid ""
"providing a reversed URL as a default value for a parameter in a function's "
"signature."
msgstr ""

# 501a6667a1e34fc19d42a55b0cb4c340
#: ../../topics/http/urls.txt:907
msgid "resolve()"
msgstr ""

# d32b2e5b5c8b4ae9a1b911a328f69b21
#: ../../topics/http/urls.txt:909
msgid ""
"The :func:`django.core.urlresolvers.resolve` function can be used for "
"resolving URL paths to the corresponding view functions. It has the "
"following signature:"
msgstr ""

# 992bfb27befc444492e27684010a1e58
#: ../../topics/http/urls.txt:915
msgid ""
"``path`` is the URL path you want to resolve. As with :func:`~django.core."
"urlresolvers.reverse`, you don't need to worry about the ``urlconf`` "
"parameter. The function returns a :class:`ResolverMatch` object that allows "
"you to access various meta-data about the resolved URL."
msgstr ""

# b39eee5d656d41949c2157047e07dd66
#: ../../topics/http/urls.txt:921
msgid ""
"If the URL does not resolve, the function raises an :class:`~django.http."
"Http404` exception."
msgstr ""

# 8961db27d26b47bcbb1b3b394bfe88ff
#: ../../topics/http/urls.txt:928
msgid "The view function that would be used to serve the URL"
msgstr ""

# 23178485f76b49deaf53a1295aa69e7d
#: ../../topics/http/urls.txt:932
msgid ""
"The arguments that would be passed to the view function, as parsed from the "
"URL."
msgstr ""

# fafcc84be13746b7968b6865d5d2dfb2
#: ../../topics/http/urls.txt:937
msgid ""
"The keyword arguments that would be passed to the view function, as parsed "
"from the URL."
msgstr ""

# 9ae8bca2dc634421b0c5a4a8ab0ce5da
#: ../../topics/http/urls.txt:942
msgid "The name of the URL pattern that matches the URL."
msgstr ""

# d4938489c722458984f0884a03bbe028
#: ../../topics/http/urls.txt:946
msgid "The application namespace for the URL pattern that matches the URL."
msgstr ""

# a9010febd1a140d1b7922d9130349c4d
#: ../../topics/http/urls.txt:951
msgid "The instance namespace for the URL pattern that matches the URL."
msgstr ""

# a29e1702e93649debb45832d440224f7
#: ../../topics/http/urls.txt:956
msgid ""
"The list of individual namespace components in the full instance namespace "
"for the URL pattern that matches the URL. i.e., if the namespace is ``foo:"
"bar``, then namespaces will be ``['foo', 'bar']``."
msgstr ""

# 9a11108b301a4df398c3b4cb594415bd
#: ../../topics/http/urls.txt:961
msgid ""
"A :class:`ResolverMatch` object can then be interrogated to provide "
"information about the URL pattern that matches a URL::"
msgstr ""

# 492ba3831ceb479e8c653df5f347ce81
#: ../../topics/http/urls.txt:969
msgid "A :class:`ResolverMatch` object can also be assigned to a triple::"
msgstr ""

# 78a59ff53a204b6cba68dc38b1b2d250
#: ../../topics/http/urls.txt:980
msgid ""
"One possible use of :func:`~django.core.urlresolvers.resolve` would be to "
"test whether a view would raise a ``Http404`` error before redirecting to "
"it::"
msgstr ""

# 8b71798460364cc286ba6fd6c1071132
#: ../../topics/http/urls.txt:1004
msgid "permalink()"
msgstr ""

# 6116d42cc2324e0daeed7b8088c0773e
#: ../../topics/http/urls.txt:1006
msgid ""
"The :func:`django.db.models.permalink` decorator is useful for writing short "
"methods that return a full URL path. For example, a model's "
"``get_absolute_url()`` method. See :func:`django.db.models.permalink` for "
"more."
msgstr ""

# 31ff45dbc88141969c78ca90b12be444
#: ../../topics/http/urls.txt:1011
msgid "get_script_prefix()"
msgstr ""

# 43cc0567ffd049fab372b1f889deabe9
#: ../../topics/http/urls.txt:1015
msgid ""
"Normally, you should always use :func:`~django.core.urlresolvers.reverse` "
"or :func:`~django.db.models.permalink` to define URLs within your "
"application. However, if your application constructs part of the URL "
"hierarchy itself, you may occasionally need to generate URLs. In that case, "
"you need to be able to find the base URL of the Django project within its "
"Web server (normally, :func:`~django.core.urlresolvers.reverse` takes care "
"of this for you). In that case, you can call ``get_script_prefix()``, which "
"will return the script prefix portion of the URL for your Django project. If "
"your Django project is at the root of its Web server, this is always ``\"/"
"\"``, but it can be changed, for instance  by using ``django.root`` (see :"
"doc:`How to use Django with Apache and mod_python </howto/deployment/"
"modpython>`)."
msgstr ""

# a73064c5d44e42a1ae03b51941742e19
#: ../../topics/http/views.txt:3
msgid "Writing views"
msgstr ""

# 17514714105642228a0678d9324ca743
#: ../../topics/http/views.txt:5
msgid ""
"A view function, or *view* for short, is simply a Python function that takes "
"a Web request and returns a Web response. This response can be the HTML "
"contents of a Web page, or a redirect, or a 404 error, or an XML document, "
"or an image . . . or anything, really. The view itself contains whatever "
"arbitrary logic is necessary to return that response. This code can live "
"anywhere you want, as long as it's on your Python path. There's no other "
"requirement--no \"magic,\" so to speak. For the sake of putting the code "
"*somewhere*, the convention is to put views in a file called ``views.py``, "
"placed in your project or application directory."
msgstr ""

# 825087fdee28429b96dc2aa943571003
#: ../../topics/http/views.txt:16
msgid "A simple view"
msgstr ""

# 28058dcd18ca40bb840d5c88cbeed9ca
#: ../../topics/http/views.txt:18
msgid ""
"Here's a view that returns the current date and time, as an HTML document:"
msgstr ""

# c8ee0f778421410f89e02e43943f2601
#: ../../topics/http/views.txt:30
msgid "Let's step through this code one line at a time:"
msgstr ""

# 47aa625275504ef6899abecd84f302e8
#: ../../topics/http/views.txt:32
msgid ""
"First, we import the class :class:`~django.http.HttpResponse` from the :mod:"
"`django.http` module, along with Python's ``datetime`` library."
msgstr ""

# da7a03077d3a49dbbc6e37fae13b182d
#: ../../topics/http/views.txt:35
msgid ""
"Next, we define a function called ``current_datetime``. This is the view "
"function. Each view function takes an :class:`~django.http.HttpRequest` "
"object as its first parameter, which is typically named ``request``."
msgstr ""

# e828b53dddea49ba9c848aca14849b61
#: ../../topics/http/views.txt:39
msgid ""
"Note that the name of the view function doesn't matter; it doesn't have to "
"be named in a certain way in order for Django to recognize it. We're calling "
"it ``current_datetime`` here, because that name clearly indicates what it "
"does."
msgstr ""

# e070e4afde644967b575fee1fedff7c1
#: ../../topics/http/views.txt:44
msgid ""
"The view returns an :class:`~django.http.HttpResponse` object that contains "
"the generated response. Each view function is responsible for returning an :"
"class:`~django.http.HttpResponse` object. (There are exceptions, but we'll "
"get to those later.)"
msgstr ""

# 283f9c462ada4faaa07043ccc451c3bd
#: ../../topics/http/views.txt:51
msgid ""
"Django includes a :setting:`TIME_ZONE` setting that defaults to ``America/"
"Chicago``. This probably isn't where you live, so you might want to change "
"it in your settings file."
msgstr ""

# 7bb3a0ca51fb4748a24565f2e87d9aec
#: ../../topics/http/views.txt:56
msgid "Mapping URLs to views"
msgstr ""

# 87e6d678496442268ca34b3632a6052d
#: ../../topics/http/views.txt:58
msgid ""
"So, to recap, this view function returns an HTML page that includes the "
"current date and time. To display this view at a particular URL, you'll need "
"to create a *URLconf*; see :doc:`/topics/http/urls` for instructions."
msgstr ""

# 640b2ac6e311489d89f2545659b6b555
#: ../../topics/http/views.txt:63
msgid "Returning errors"
msgstr ""

# d829cd25323d4e00bf33fb64306e5bfc
#: ../../topics/http/views.txt:65
msgid ""
"Returning HTTP error codes in Django is easy. There are subclasses of :class:"
"`~django.http.HttpResponse` for a number of common HTTP status codes other "
"than 200 (which means *\"OK\"*). You can find the full list of available "
"subclasses in the :ref:`request/response <ref-httpresponse-subclasses>` "
"documentation.  Just return an instance of one of those subclasses instead "
"of a normal :class:`~django.http.HttpResponse` in order to signify an error. "
"For example::"
msgstr ""

# a5d466a201674b3c9b0975b151e46b79
#: ../../topics/http/views.txt:80
msgid ""
"There isn't a specialized subclass for every possible HTTP response code, "
"since many of them aren't going to be that common. However, as documented in "
"the :class:`~django.http.HttpResponse` documentation, you can also pass the "
"HTTP status code into the constructor for :class:`~django.http.HttpResponse` "
"to create a return class for any status code you like. For example::"
msgstr ""

# 4a00e3b00bb944a98214d39e7e08b6ec
#: ../../topics/http/views.txt:92
msgid ""
"Because 404 errors are by far the most common HTTP error, there's an easier "
"way to handle those errors."
msgstr ""

# 087b322bee1447438ed9876b7e51fcb8
#: ../../topics/http/views.txt:96
msgid "The Http404 exception"
msgstr ""

# 79f764a0271f4b5a9ff1d21dc00fcddb
#: ../../topics/http/views.txt:100
msgid ""
"When you return an error such as :class:`~django.http.HttpResponseNotFound`, "
"you're responsible for defining the HTML of the resulting error page::"
msgstr ""

# 192dde3685894ed086cf211fe6387df4
#: ../../topics/http/views.txt:105
msgid ""
"For convenience, and because it's a good idea to have a consistent 404 error "
"page across your site, Django provides an ``Http404`` exception. If you "
"raise ``Http404`` at any point in a view function, Django will catch it and "
"return the standard error page for your application, along with an HTTP "
"error code 404."
msgstr ""

# 6405576cfa23404691f857c3184d600a
#: ../../topics/http/views.txt:110
msgid "Example usage::"
msgstr ""

# 2cf5cc1333f04ddfab695984e3ecc178
#: ../../topics/http/views.txt:121
msgid ""
"In order to use the ``Http404`` exception to its fullest, you should create "
"a template that is displayed when a 404 error is raised. This template "
"should be called ``404.html`` and located in the top level of your template "
"tree."
msgstr ""

# 69253f2981c3497098ec5096ab957cd2
#: ../../topics/http/views.txt:128
msgid "Customizing error views"
msgstr ""

# 5b7b9fb4ee8945e7a854f5effd8c43a6
#: ../../topics/http/views.txt:131
msgid "The 404 (page not found) view"
msgstr ""

# bc94bd28304743d28a253eb858e09c18
#: ../../topics/http/views.txt:133
msgid ""
"When you raise an ``Http404`` exception, Django loads a special view devoted "
"to handling 404 errors. By default, it's the view ``django.views.defaults."
"page_not_found``, which loads and renders the template ``404.html``."
msgstr ""

# 60be230a041e4e008b7f082139d8367d
#: ../../topics/http/views.txt:138
msgid ""
"This means you need to define a ``404.html`` template in your root template "
"directory. This template will be used for all 404 errors. The default 404 "
"view will pass one variable to the template: ``request_path``, which is the "
"URL that resulted in the error."
msgstr ""

# 99856159354542bcb4bf78bce912139b
#: ../../topics/http/views.txt:143
msgid ""
"The ``page_not_found`` view should suffice for 99% of Web applications, but "
"if you want to override it, you can specify ``handler404`` in your URLconf, "
"like so::"
msgstr ""

# 654ea7f7bb844c8e8117507eeb69171d
#: ../../topics/http/views.txt:149
msgid ""
"Behind the scenes, Django determines the 404 view by looking for "
"``handler404`` in your root URLconf, and falling back to ``django.views."
"defaults.page_not_found`` if you did not define one."
msgstr ""

# 6c1c69f144f94af88d8d5e2b3a1a8fcf
#: ../../topics/http/views.txt:153
msgid "Four things to note about 404 views:"
msgstr ""

# db248a84721a4fa08a9cb0fe5fcc0e82
#: ../../topics/http/views.txt:155
msgid ""
"The 404 view is also called if Django doesn't find a match after checking "
"every regular expression in the URLconf."
msgstr ""

# 9a651903300f431493d4b4cb384bdf5a
#: ../../topics/http/views.txt:158
msgid ""
"If you don't define your own 404 view — and simply use the default, which is "
"recommended — you still have one obligation: you must create a ``404.html`` "
"template in the root of your template directory."
msgstr ""

# cae79b260da646ca8f44db83f9a61ffc
#: ../../topics/http/views.txt:162
msgid ""
"The 404 view is passed a :class:`~django.template.RequestContext` and will "
"have access to variables supplied by your :setting:"
"`TEMPLATE_CONTEXT_PROCESSORS` setting (e.g., ``MEDIA_URL``)."
msgstr ""

# 5e9b4b7a14214787b38fe07f6edff9bb
#: ../../topics/http/views.txt:166
msgid ""
"If :setting:`DEBUG` is set to ``True`` (in your settings module), then your "
"404 view will never be used, and your URLconf will be displayed instead, "
"with some debug information."
msgstr ""

# 4f0fc9d389274faf8e6ed8967fe1f786
#: ../../topics/http/views.txt:171
msgid "The 500 (server error) view"
msgstr ""

# 563f3fcd55a74a5dbb7c4fe4ff515059
#: ../../topics/http/views.txt:173
msgid ""
"Similarly, Django executes special-case behavior in the case of runtime "
"errors in view code. If a view results in an exception, Django will, by "
"default, call the view ``django.views.defaults.server_error``, which loads "
"and renders the template ``500.html``."
msgstr ""

# e57410616a2c46bd97999d9e2724af48
#: ../../topics/http/views.txt:178
msgid ""
"This means you need to define a ``500.html`` template in your root template "
"directory. This template will be used for all server errors. The default 500 "
"view passes no variables to this template and is rendered with an empty "
"``Context`` to lessen the chance of additional errors."
msgstr ""

# 39dbc8fcaa414618b9e49bfeda698041
#: ../../topics/http/views.txt:183
msgid ""
"This ``server_error`` view should suffice for 99% of Web applications, but "
"if you want to override the view, you can specify ``handler500`` in your "
"URLconf, like so::"
msgstr ""

# dcb438d5d8344ad8b16d30c7c1c2eb03
#: ../../topics/http/views.txt:189
msgid ""
"Behind the scenes, Django determines the 500 view by looking for "
"``handler500`` in your root URLconf, and falling back to ``django.views."
"defaults.server_error`` if you did not define one."
msgstr ""

# 93274b7a76ee401fb4588238b3083fa2
#: ../../topics/http/views.txt:193
msgid "Two things to note about 500 views:"
msgstr ""

# 5c907e4051c745629e0b3400dcf457c3
#: ../../topics/http/views.txt:195
msgid ""
"If you don't define your own 500 view — and simply use the default, which is "
"recommended — you still have one obligation: you must create a ``500.html`` "
"template in the root of your template directory."
msgstr ""

# 4329c9d5241a49559001249a46ce5f1f
#: ../../topics/http/views.txt:199
msgid ""
"If :setting:`DEBUG` is set to ``True`` (in your settings module), then your "
"500 view will never be used, and the traceback will be displayed instead, "
"with some debug information."
msgstr ""

# b1be98e898564b91be3723da9818dc8a
#: ../../topics/http/views.txt:206
msgid "The 403 (HTTP Forbidden) view"
msgstr ""

# 99f7155a94c14685866650d58fb4c02d
#: ../../topics/http/views.txt:210
msgid ""
"In the same vein as the 404 and 500 views, Django has a view to handle 403 "
"Forbidden errors. If a view results in a 403 exception then Django will, by "
"default, call the view ``django.views.defaults.permission_denied``."
msgstr ""

# 9c09f57c9bfb4fd5849c2b712d590575
#: ../../topics/http/views.txt:214
msgid ""
"This view loads and renders the template ``403.html`` in your root template "
"directory, or if this file does not exist, instead serves the text \"403 "
"Forbidden\", as per :rfc:`2616` (the HTTP 1.1 Specification)."
msgstr ""

# f528e28e91d0416184efcda1632e6d89
#: ../../topics/http/views.txt:218
msgid ""
"It is possible to override ``django.views.defaults.permission_denied`` in "
"the same way you can for the 404 and 500 views by specifying a "
"``handler403`` in your URLconf::"
msgstr ""

# 7be11d18808141d79f6880b18161a6c2
#: ../../topics/i18n/formatting.txt:5
msgid "Format localization"
msgstr ""

# 76477e3ea81f4fb883789f1a4e632880
#: ../../topics/i18n/formatting.txt:12
msgid ""
"Django's formatting system is capable to display dates, times and numbers in "
"templates using the format specified for the current :term:`locale <locale "
"name>`. It also handles localized input in forms."
msgstr ""

# 1af77c9b20eb4d779b82ac23a62a9f4c
#: ../../topics/i18n/formatting.txt:15
msgid ""
"When it's enabled, two users accessing the same content may see dates, times "
"and numbers formatted in different ways, depending on the formats for their "
"current locale."
msgstr ""

# 860febb199524293a5cb1ec9f38eac6d
#: ../../topics/i18n/formatting.txt:19
msgid ""
"The formatting system is disabled by default. To enable it, it's necessary "
"to set :setting:`USE_L10N = True <USE_L10N>` in your settings file."
msgstr ""

# 8911c60b4fc146978d2995fb0e5bab11
#: ../../topics/i18n/formatting.txt:24
msgid ""
"The default :file:`settings.py` file created by :djadmin:`django-admin.py "
"startproject <startproject>` includes :setting:`USE_L10N = True <USE_L10N>` "
"for convenience."
msgstr ""

# e66737b93c5b402698600a286fc79925
#: ../../topics/i18n/formatting.txt:30
msgid ""
"There is also an independent but related :setting:`USE_I18N` setting that "
"controls if Django should activate translation. See :doc:`/topics/i18n/"
"translation` for more details."
msgstr ""

# 24d98d40bb8844a4b1fa8c9478230796
#: ../../topics/i18n/formatting.txt:35
msgid "Locale aware input in forms"
msgstr ""

# 3484d4cd87b2424c8f7bd237f474644b
#: ../../topics/i18n/formatting.txt:37
msgid ""
"When formatting is enabled, Django can use localized formats when parsing "
"dates, times and numbers in forms. That means it tries different formats for "
"different locales when guessing the format used by the user when inputting "
"data on forms."
msgstr ""

# 0ad1bab19a4244019443d44c4e791552
#: ../../topics/i18n/formatting.txt:42
msgid ""
"Django uses different formats for displaying data to those it uses for "
"parsing data. Most notably, the formats for parsing dates can't use the ``"
"%a`` (abbreviated weekday name), ``%A`` (full weekday name), ``%b`` "
"(abbreviated month name), ``%B`` (full month name), or ``%p`` (AM/PM)."
msgstr ""

# d43d08331ac14db29003f2cd3ef9cb61
#: ../../topics/i18n/formatting.txt:48
msgid ""
"To enable a form field to localize input and output data simply use its "
"``localize`` argument::"
msgstr ""

# ea4d9854c4e74602b14a5c00738eb2ec
#: ../../topics/i18n/formatting.txt:58
msgid "Controlling localization in templates"
msgstr ""

# 8c1efe8f06e44ec496033207f6fd36a3
#: ../../topics/i18n/formatting.txt:60
msgid ""
"When you have enabled formatting with :setting:`USE_L10N`, Django will try "
"to use a locale specific format whenever it outputs a value in a template."
msgstr ""

# 9b1cd3f454cf4062ab0407d2e6816a5c
#: ../../topics/i18n/formatting.txt:64
msgid ""
"However, it may not always be appropriate to use localized values -- for "
"example, if you're outputting Javascript or XML that is designed to be "
"machine-readable, you will always want unlocalized values. You may also want "
"to use localization in selected templates, rather than using localization "
"everywhere."
msgstr ""

# 9330060f4c7b489b92d4ad5e0218bd69
#: ../../topics/i18n/formatting.txt:70
msgid ""
"To allow for fine control over the use of localization, Django provides the "
"``l10n`` template library that contains the following tags and filters."
msgstr ""

# 5ea996cd14fe453c9ea24ac75b861443
# 539954bd8eae49ca887b580e964392b9
#: ../../topics/i18n/formatting.txt:75 ../../topics/i18n/timezones.txt:259
msgid "Template tags"
msgstr ""

# df95cead93054d309461a8d3591a577d
# 8b36f8f95b384532bb1c7ff79947e562
#: ../../topics/i18n/formatting.txt:80 ../../topics/i18n/formatting.txt:116
msgid "localize"
msgstr ""

# c3fb200f133a436d88b6aaab05ea0b0f
#: ../../topics/i18n/formatting.txt:84
msgid ""
"Enables or disables localization of template variables in the contained "
"block."
msgstr ""

# 05f3a8d157944038ae8c7bb2f4e6b87a
#: ../../topics/i18n/formatting.txt:87
msgid ""
"This tag allows a more fine grained control of localization than :setting:"
"`USE_L10N`."
msgstr ""

# 3d5e92507c7a465b97d342f8e3fb45f4
#: ../../topics/i18n/formatting.txt:90
msgid "To activate or deactivate localization for a template block, use::"
msgstr ""

# b6123c8129f64b209a7ca95fac4c4f2d
#: ../../topics/i18n/formatting.txt:104
msgid ""
"The value of :setting:`USE_L10N` isn't respected inside of a ``{% localize %}"
"`` block."
msgstr ""

# 98f2d5def87d48838312ecff8749b09b
#: ../../topics/i18n/formatting.txt:107
msgid ""
"See :tfilter:`localize` and :tfilter:`unlocalize` for template filters that "
"will do the same job on a per-variable basis."
msgstr ""

# d53f84f8c0b94e1ea6fbd9d7da8a1be8
# d8ca57e459c14db4b896861c9f538e11
#: ../../topics/i18n/formatting.txt:111 ../../topics/i18n/timezones.txt:332
msgid "Template filters"
msgstr ""

# 648fc44ef4964e54abedb2c2d08441a0
#: ../../topics/i18n/formatting.txt:120
msgid "Forces localization of a single value."
msgstr ""

# 750911fb7f174aef88b9d1525b83a9af
#: ../../topics/i18n/formatting.txt:128
msgid ""
"To disable localization on a single value, use :tfilter:`unlocalize`. To "
"control localization over a large section of a template, use the :ttag:"
"`localize` template tag."
msgstr ""

# ca082d6f67d24d1eb7c3ca52e950d027
#: ../../topics/i18n/formatting.txt:136
msgid "unlocalize"
msgstr ""

# 8d153578b8ac4a769b7312108ed0f426
#: ../../topics/i18n/formatting.txt:140
msgid "Forces a single value to be printed without localization."
msgstr ""

# 31e2641ef7d14b02b52072949ee472e6
#: ../../topics/i18n/formatting.txt:148
msgid ""
"To force localization of a single value, use :tfilter:`localize`. To control "
"localization over a large section of a template, use the :ttag:`localize` "
"template tag."
msgstr ""

# 1e67bfe73f4c4c4faacdc247ae9b2a48
#: ../../topics/i18n/formatting.txt:155
msgid "Creating custom format files"
msgstr ""

# 917f5e4d440b4bda89458bce16d77fa8
#: ../../topics/i18n/formatting.txt:157
msgid ""
"Django provides format definitions for many locales, but sometimes you might "
"want to create your own, because a format files doesn't exist for your "
"locale, or because you want to overwrite some of the values."
msgstr ""

# 63bc1125c553453e902400a55a1d18fa
#: ../../topics/i18n/formatting.txt:161
msgid ""
"To use custom formats, specify the path where you'll place format files "
"first. To do that, just set your :setting:`FORMAT_MODULE_PATH` setting to "
"the package where format files will exist, for instance::"
msgstr ""

# f15bb19047ce4e3dbd473816babe5e72
#: ../../topics/i18n/formatting.txt:167
msgid ""
"Files are not placed directly in this directory, but in a directory named as "
"the locale, and must be named ``formats.py``."
msgstr ""

# 65c74654782640c6b325bb20b65cd7f8
#: ../../topics/i18n/formatting.txt:170
msgid ""
"To customize the English formats, a structure like this would be needed::"
msgstr ""

# 35e9ec43c9294593944842b485618a96
#: ../../topics/i18n/formatting.txt:179
msgid ""
"where :file:`formats.py` contains custom format definitions. For example::"
msgstr ""

# be33c51eddb94b778a393aed51bcc3ac
#: ../../topics/i18n/formatting.txt:183
msgid ""
"to use a non-breaking space (Unicode ``00A0``) as a thousand separator, "
"instead of the default for English, a comma."
msgstr ""

# 1e99ff68606d4b938530738d76dbbefd
#: ../../topics/i18n/formatting.txt:187
msgid "Limitations of the provided locale formats"
msgstr ""

# 9bcbd51ab2504edb98adf7620453463f
#: ../../topics/i18n/formatting.txt:189
msgid ""
"Some locales use context-sensitive formats for numbers, which Django's "
"localization system cannot handle automatically."
msgstr ""

# 9a951eee33d14323827c2946353e166d
#: ../../topics/i18n/formatting.txt:193
msgid "Switzerland (German)"
msgstr ""

# 29e161c02d084d5594039e208838c959
#: ../../topics/i18n/formatting.txt:195
msgid ""
"The Swiss number formatting depends on the type of number that is being "
"formatted. For monetary values, a comma is used as the thousand separator "
"and a decimal point for the decimal separator. For all other numbers, a "
"comma is used as decimal separator and a space as thousand separator. The "
"locale format provided by Django uses the generic separators, a comma for "
"decimal and a space for thousand separators."
msgstr ""

# a5bb55c686fa4c629011d191838f9829
#: ../../topics/i18n/index.txt:3
msgid "Internationalization and localization"
msgstr ""

# 5f94829f10424fd9be3ad76657b7c448
#: ../../topics/i18n/index.txt:16
msgid ""
"The goal of internationalization and localization is to allow a single Web "
"application to offer its content in languages and formats tailored to the "
"audience."
msgstr ""

# aa61ac38041b4a29874f242f6c2ce05a
#: ../../topics/i18n/index.txt:20
msgid ""
"Django has full support for :doc:`translation of text </topics/i18n/"
"translation>`, :doc:`formatting of dates, times and numbers </topics/i18n/"
"formatting>`, and :doc:`time zones </topics/i18n/timezones>`."
msgstr ""

# d835d5a6ae984a08ba7146fc833d1ed8
#: ../../topics/i18n/index.txt:24
msgid "Essentially, Django does two things:"
msgstr ""

# 1ce1835feba94286b24a4628286a0092
#: ../../topics/i18n/index.txt:26
msgid ""
"It allows developers and template authors to specify which parts of their "
"apps should be translated or formatted for local languages and cultures."
msgstr ""

# e8d33ae89f134a05831323b6c66b0c41
#: ../../topics/i18n/index.txt:28
msgid ""
"It uses these hooks to localize Web apps for particular users according to "
"their preferences."
msgstr ""

# 37e3903f171d413cab987592e2d95bc5
#: ../../topics/i18n/index.txt:31
msgid ""
"Obviously, translation depends on the target language, and formatting "
"usually depends on the target country. These informations are provided by "
"browsers in the ``Accept-Language`` header. However, the time zone isn't "
"readily available."
msgstr ""

# f1e53798367343e2b2f7b97e2bd623d2
#: ../../topics/i18n/index.txt:36
msgid "Definitions"
msgstr ""

# 7073c89d47d144db893e60bff1325637
#: ../../topics/i18n/index.txt:38
msgid ""
"The words \"internationalization\" and \"localization\" often cause "
"confusion; here's a simplified definition:"
msgstr ""

# 0d13c8ac6faa48c793f6b1c2486edbe5
#: ../../topics/i18n/index.txt:44
msgid "Preparing the software for localization. Usually done by developers."
msgstr ""

# ade3d9debed8455e95befb0985b572b7
#: ../../topics/i18n/index.txt:47
msgid ""
"Writing the translations and local formats. Usually done by translators."
msgstr ""

# d2913315965c47e49e15c35352cf4e55
#: ../../topics/i18n/index.txt:49
msgid ""
"More details can be found in the `W3C Web Internationalization FAQ`_, the "
"`Wikipedia article`_ or the `GNU gettext documentation`_."
msgstr ""

# 30a7b6a5a40e42018764191977721a4d
#: ../../topics/i18n/index.txt:57
msgid ""
"Translation and formatting are controlled by :setting:`USE_I18N` and :"
"setting:`USE_L10N` settings respectively. However, both features involve "
"internationalization and localization. The names of the settings are an "
"unfortunate result of Django's history."
msgstr ""

# 043bfc6e9a624967910ce4de741d1ffe
#: ../../topics/i18n/index.txt:62
msgid ""
"Here are some other terms that will help us to handle a common language:"
msgstr ""

# f788c651ae99404d9b3e6e92afa49db7
#: ../../topics/i18n/index.txt:67
msgid ""
"A locale name, either a language specification of the form ``ll`` or a "
"combined language and country specification of the form ``ll_CC``. Examples: "
"``it``, ``de_AT``, ``es``, ``pt_BR``. The language part is always is lower "
"case and the country part in upper case. The separator is an underscore."
msgstr ""

# 060726975f3a45b99f980bdc13cb8032
#: ../../topics/i18n/index.txt:74
msgid ""
"Represents the name of a language. Browsers send the names of the languages "
"they accept in the ``Accept-Language`` HTTP header using this format. "
"Examples: ``it``, ``de-at``, ``es``, ``pt-br``. Both the language and the "
"country parts are in lower case. The separator is a dash."
msgstr ""

# ca8ff0064982477fbbe40d0a28be3488
#: ../../topics/i18n/index.txt:80
msgid ""
"A message file is a plain-text file, representing a single language, that "
"contains all available :term:`translation strings <translation string>` and "
"how they should be represented in the given language. Message files have a "
"``.po`` file extension."
msgstr ""

# 45f6aa9aac074116896753136654cc1e
#: ../../topics/i18n/index.txt:86
msgid "A literal that can be translated."
msgstr ""

# 8b485becea3a4bf797b6c092bf6313e0
#: ../../topics/i18n/index.txt:89
msgid ""
"A format file is a Python module that defines the data formats for a given "
"locale."
msgstr ""

# 78677bc5dd8f4ec49d8691c4ce20f47e
#: ../../topics/i18n/timezones.txt:5
msgid "Time zones"
msgstr ""

# c9f07d2050b24e65a97952108715e3f2
#: ../../topics/i18n/timezones.txt:14
msgid ""
"When support for time zones is enabled, Django stores date and time "
"information in UTC in the database, uses time zone-aware datetime objects "
"internally, and translates them to the end user's time zone in templates and "
"forms."
msgstr ""

# a05a798976094831b19580a3a85c7a1b
#: ../../topics/i18n/timezones.txt:19
msgid ""
"This is handy if your users live in more than one time zone and you want to "
"display date and time information according to each user's wall clock. Even "
"if your website is available in only one time zone, it's still a good "
"practice to store data in UTC in your database. Here is why."
msgstr ""

# dc68798810884d37ad8e3808eea86439
#: ../../topics/i18n/timezones.txt:24
msgid ""
"Many countries have a system of daylight saving time (DST), where clocks are "
"moved forwards in spring and backwards in autumn. If you're working in local "
"time, you're likely to encounter errors twice a year, when the transitions "
"happen. The pytz_ documentation discusses `these issues`_ in greater detail. "
"It probably doesn't matter for your blog, but it's more annoying if you over-"
"bill or under-bill your customers by one hour, twice a year, every year. The "
"solution to this problem is to use UTC in the code and local time only when "
"interacting with end users."
msgstr ""

# 93e0371ed9124da5afb5bb0e6c7bdd43
#: ../../topics/i18n/timezones.txt:33
msgid ""
"Time zone support is disabled by default. To enable it, set :setting:`USE_TZ "
"= True <USE_TZ>` in your settings file. Installing pytz_ is highly "
"recommended, but not mandatory. It's as simple as:"
msgstr ""

# 0206f50f3cc9426e9e8c6145366dd478
#: ../../topics/i18n/timezones.txt:43
msgid ""
"The default :file:`settings.py` file created by :djadmin:`django-admin.py "
"startproject <startproject>` includes :setting:`USE_TZ = True <USE_TZ>` for "
"convenience."
msgstr ""

# a503f0facbf94c32862e9fbb3e1ae8b1
#: ../../topics/i18n/timezones.txt:49
msgid ""
"There is also an independent but related :setting:`USE_L10N` setting that "
"controls if Django should activate format localization. See :doc:`/topics/"
"i18n/formatting` for more details."
msgstr ""

# 10edcf31508e4de49e7ddced6f65338a
#: ../../topics/i18n/timezones.txt:53
msgid ""
"If you're stumbling on a particular problem, start with the :ref:`time zone "
"FAQ <time-zones-faq>`."
msgstr ""

# d537d314ca28422eaaf73951a3ef7b1a
#: ../../topics/i18n/timezones.txt:57
msgid "Concepts"
msgstr ""

# 1b64f39b637c4882a832cd85de48c31a
#: ../../topics/i18n/timezones.txt:60
msgid "Naive and aware datetime objects"
msgstr ""

# 64dd5bdedf3d47208abf957bc075016c
#: ../../topics/i18n/timezones.txt:62
msgid ""
"Python's :class:`datetime.datetime` objects have a ``tzinfo`` attribute that "
"can be used to store time zone information, represented as an instance of a "
"subclass of :class:`datetime.tzinfo`. When this attribute is set and "
"describes an offset, a datetime object is **aware**; otherwise, it's "
"**naive**."
msgstr ""

# 0d87b08c4c1d41c8bad7019a24ce849b
#: ../../topics/i18n/timezones.txt:67
msgid ""
"You can use :func:`~django.utils.timezone.is_aware` and :func:`~django.utils."
"timezone.is_naive` to determine if datetimes are aware or naive."
msgstr ""

# 9dfaba2dc9ef4c829576fe8a567cd682
#: ../../topics/i18n/timezones.txt:71
msgid ""
"When time zone support is disabled, Django uses naive datetime objects in "
"local time. This is simple and sufficient for many use cases. In this mode, "
"to obtain the current time, you would write::"
msgstr ""

# 6d26c849d27d47c38cdd966b6e25df87
#: ../../topics/i18n/timezones.txt:79
msgid ""
"When time zone support is enabled, Django uses time zone aware datetime "
"objects. If your code creates datetime objects, they should be aware too. In "
"this mode, the example above becomes::"
msgstr ""

# 770ab296c43f43448508b5baf7542016
#: ../../topics/i18n/timezones.txt:90
msgid ""
":mod:`django.utils.timezone` provides a :func:`~django.utils.timezone.now()` "
"function that returns a naive or aware datetime object according to the "
"value of :setting:`USE_TZ`."
msgstr ""

# 42a7402ed7614a9288db1239373e8e78
#: ../../topics/i18n/timezones.txt:96
msgid ""
"Dealing with aware datetime objects isn't always intuitive. For instance, "
"the ``tzinfo`` argument of the standard datetime constructor doesn't work "
"reliably for time zones with DST. Using UTC is generally safe; if you're "
"using other time zones, you should review the `pytz`_ documentation "
"carefully."
msgstr ""

# 0d41f5b9f38946ca932e6fd9add5b224
#: ../../topics/i18n/timezones.txt:104
msgid ""
"Python's :class:`datetime.time` objects also feature a ``tzinfo`` attribute, "
"and PostgreSQL has a matching ``time with time zone`` type. However, as "
"PostgreSQL's docs put it, this type \"exhibits properties which lead to "
"questionable usefulness\"."
msgstr ""

# a22b867e79ea43ceb99f206970589622
#: ../../topics/i18n/timezones.txt:109
msgid ""
"Django only supports naive time objects and will raise an exception if you "
"attempt to save an aware time object."
msgstr ""

# 6a2f947a601047339b87db1c3f1e1ba8
#: ../../topics/i18n/timezones.txt:115
msgid "Interpretation of naive datetime objects"
msgstr ""

# 25a9c4352c4d4fb6be98e5ea0c0da116
#: ../../topics/i18n/timezones.txt:117
msgid ""
"When :setting:`USE_TZ` is ``True``, Django still accepts naive datetime "
"objects, in order to preserve backwards-compatibility. When the database "
"layer receives one, it attempts to make it aware by interpreting it in the :"
"ref:`default time zone <default-current-time-zone>` and raises a warning."
msgstr ""

# 8a7ab6d453194cd2991e78bbb443e87f
#: ../../topics/i18n/timezones.txt:122
msgid ""
"Unfortunately, during DST transitions, some datetimes don't exist or are "
"ambiguous. In such situations, pytz_ raises an exception. Other :class:"
"`~datetime.tzinfo` implementations, such as the local time zone used as a "
"fallback when pytz_ isn't installed, may raise an exception or return "
"inaccurate results. That's why you should always create aware datetime "
"objects when time zone support is enabled."
msgstr ""

# 72548294e28c438ea0593f4697d4c91c
#: ../../topics/i18n/timezones.txt:129
msgid ""
"In practice, this is rarely an issue. Django gives you aware datetime "
"objects in the models and forms, and most often, new datetime objects are "
"created from existing ones through :class:`~datetime.timedelta` arithmetic. "
"The only datetime that's often created in application code is the current "
"time, and :func:`timezone.now() <django.utils.timezone.now>` automatically "
"does the right thing."
msgstr ""

# df1d6585f8f141719c8e00d5d248fd7b
#: ../../topics/i18n/timezones.txt:139
msgid "Default time zone and current time zone"
msgstr ""

# c200f608a7864ed8acde35adc569fa66
#: ../../topics/i18n/timezones.txt:141
msgid ""
"The **default time zone** is the time zone defined by the :setting:"
"`TIME_ZONE` setting."
msgstr ""

# c828c346bc2943638e0767cff950b0cf
#: ../../topics/i18n/timezones.txt:144
msgid "The **current time zone** is the time zone that's used for rendering."
msgstr ""

# 711ac2fa26b94a3a8f7607ea5f6f39fe
#: ../../topics/i18n/timezones.txt:146
msgid ""
"You should set the current time zone to the end user's actual time zone "
"with :func:`~django.utils.timezone.activate`. Otherwise, the default time "
"zone is used."
msgstr ""

# 71a3702390ef4859a9e45d990960dc17
#: ../../topics/i18n/timezones.txt:152
msgid ""
"As explained in the documentation of :setting:`TIME_ZONE`, Django sets "
"environment variables so that its process runs in the default time zone. "
"This happens regardless of the value of :setting:`USE_TZ` and of the current "
"time zone."
msgstr ""

# 52492632b7f7439f9f2f4bdb12ad1937
#: ../../topics/i18n/timezones.txt:157
msgid ""
"When :setting:`USE_TZ` is ``True``, this is useful to preserve backwards-"
"compatibility with applications that still rely on local time. However, :ref:"
"`as explained above <naive-datetime-objects>`, this isn't entirely reliable, "
"and you should always work with aware datetimes in UTC in your own code. For "
"instance, use :meth:`~datetime.datetime.utcfromtimestamp` instead of :meth:"
"`~datetime.datetime.fromtimestamp` -- and don't forget to set ``tzinfo`` to :"
"data:`~django.utils.timezone.utc`."
msgstr ""

# 064acbe57b5844f0920c57a7d2fd796b
#: ../../topics/i18n/timezones.txt:167
msgid "Selecting the current time zone"
msgstr ""

# a2c6d4a512bb44be8fcd485ff6cd5d9e
#: ../../topics/i18n/timezones.txt:169
msgid ""
"The current time zone is the equivalent of the current :term:`locale <locale "
"name>` for translations. However, there's no equivalent of the ``Accept-"
"Language`` HTTP header that Django could use to determine the user's time "
"zone automatically. Instead, Django provides :ref:`time zone selection "
"functions <time-zone-selection-functions>`. Use them to build the time zone "
"selection logic that makes sense for you."
msgstr ""

# 14c44aac98824c46917d7e1b070aa291
#: ../../topics/i18n/timezones.txt:176
msgid ""
"Most websites who care about time zones just ask users in which time zone "
"they live and store this information in the user's profile. For anonymous "
"users, they use the time zone of their primary audience or UTC. pytz_ "
"provides helpers_, like a list of time zones per country, that you can use "
"to pre-select the most likely choices."
msgstr ""

# c7319f26efa4429ab90c6dc66ac5b258
#: ../../topics/i18n/timezones.txt:182
msgid ""
"Here's an example that stores the current timezone in the session. (It skips "
"error handling entirely for the sake of simplicity.)"
msgstr ""

# e7a420302a3345e195d68131a18bf009
#: ../../topics/i18n/timezones.txt:185
msgid "Add the following middleware to :setting:`MIDDLEWARE_CLASSES`::"
msgstr ""

# 5eb7782fb0e84414accb2178a82f122c
#: ../../topics/i18n/timezones.txt:195
msgid "Create a view that can set the current timezone::"
msgstr ""

# b60240483ab34ea78b9aa31e6c93ad9c
#: ../../topics/i18n/timezones.txt:207
msgid "Include a form in ``template.html`` that will ``POST`` to this view:"
msgstr ""

# f524e06fdadf417e924f7164375fe8ca
#: ../../topics/i18n/timezones.txt:226
msgid "Time zone aware input in forms"
msgstr ""

# 8d72e973d0b24de7ae9ef1778f446729
#: ../../topics/i18n/timezones.txt:228
msgid ""
"When you enable time zone support, Django interprets datetimes entered in "
"forms in the :ref:`current time zone <default-current-time-zone>` and "
"returns aware datetime objects in ``cleaned_data``."
msgstr ""

# ccb70d804c59407ab1e1743de569a444
#: ../../topics/i18n/timezones.txt:232
msgid ""
"If the current time zone raises an exception for datetimes that don't exist "
"or are ambiguous because they fall in a DST transition (the timezones "
"provided by pytz_ do this), such datetimes will be reported as invalid "
"values."
msgstr ""

# 451f0d4553e3453fbf2e7da50407cb4b
#: ../../topics/i18n/timezones.txt:239
msgid "Time zone aware output in templates"
msgstr ""

# 3cb0dd8ffa0249ca9bd9e424bd7cf085
#: ../../topics/i18n/timezones.txt:241
msgid ""
"When you enable time zone support, Django converts aware datetime objects to "
"the :ref:`current time zone <default-current-time-zone>` when they're "
"rendered in templates. This behaves very much like :doc:`format localization "
"</topics/i18n/formatting>`."
msgstr ""

# fbcc459da36a4764a7b59757f217b614
#: ../../topics/i18n/timezones.txt:248
msgid ""
"Django doesn't convert naive datetime objects, because they could be "
"ambiguous, and because your code should never produce naive datetimes when "
"time zone support is enabled. However, you can force conversion with the "
"template filters described below."
msgstr ""

# d537165df8584955876854a5757ca7a0
#: ../../topics/i18n/timezones.txt:253
msgid ""
"Conversion to local time isn't always appropriate -- you may be generating "
"output for computers rather than for humans. The following filters and tags, "
"provided by the ``tz`` template tag library, allow you to control the time "
"zone conversions."
msgstr ""

# 14fed3420b184d07ae3abdd348b2fee6
# fd80b16b85174e2d963e706668c90d1b
#: ../../topics/i18n/timezones.txt:264 ../../topics/i18n/timezones.txt:341
msgid "localtime"
msgstr ""

# 0dd287a90a094e86aa287331b4282b2a
#: ../../topics/i18n/timezones.txt:266
msgid ""
"Enables or disables conversion of aware datetime objects to the current time "
"zone in the contained block."
msgstr ""

# f51f8ad12063489ca7057a2a2b0bf6e1
#: ../../topics/i18n/timezones.txt:269
msgid ""
"This tag has exactly the same effects as the :setting:`USE_TZ` setting as "
"far as the template engine is concerned. It allows a more fine grained "
"control of conversion."
msgstr ""

# 7509d868a5f84baf9340b301acaee440
#: ../../topics/i18n/timezones.txt:273
msgid "To activate or deactivate conversion for a template block, use::"
msgstr ""

# 0ca1e5afe0104dd882a73dbd86c96097
#: ../../topics/i18n/timezones.txt:287
msgid ""
"The value of :setting:`USE_TZ` isn't respected inside of a ``{% localtime %}"
"`` block."
msgstr ""

# ca45f84bb910451c9657b8ef3109cd9d
# 0ea3115083c94ad1ab81e14dbf7f4712
#: ../../topics/i18n/timezones.txt:293 ../../topics/i18n/timezones.txt:367
msgid "timezone"
msgstr ""

# d19c284643834be8a762a9b5228a0d78
#: ../../topics/i18n/timezones.txt:295
msgid ""
"Sets or unsets the current time zone in the contained block. When the "
"current time zone is unset, the default time zone applies."
msgstr ""

# 5e54ed2aa06c49058078a0520b0e0f38
#: ../../topics/i18n/timezones.txt:312
msgid ""
"In the second block, ``None`` resolves to the Python object ``None`` because "
"it isn't defined in the template context, not because it's the string "
"``None``."
msgstr ""

# b3a4041fcd5f4901a87271f3cc757105
#: ../../topics/i18n/timezones.txt:319
msgid "get_current_timezone"
msgstr ""

# 4fd3e8a30bb044a090a2da15de1f171c
#: ../../topics/i18n/timezones.txt:321
msgid ""
"When the :func:`django.core.context_processors.tz` context processor is "
"enabled -- by default, it is -- each :class:`~django.template."
"RequestContext` contains a ``TIME_ZONE`` variable that provides the name of "
"the current time zone."
msgstr ""

# 115bd6a67fd242109068d4f2c7c1e712
#: ../../topics/i18n/timezones.txt:326
msgid ""
"If you don't use a :class:`~django.template.RequestContext`, you can obtain "
"this value with the ``get_current_timezone`` tag::"
msgstr ""

# 2aeacfdde7cc4843bd6ef0cb1af5498c
#: ../../topics/i18n/timezones.txt:334
msgid ""
"These filters accept both aware and naive datetimes. For conversion "
"purposes, they assume that naive datetimes are in the default time zone. "
"They always return aware datetimes."
msgstr ""

# 0b4129cf4a42402dbc30d5c58775f42c
#: ../../topics/i18n/timezones.txt:343
msgid "Forces conversion of a single value to the current time zone."
msgstr ""

# 86e7ab1d404f4a8089fc9f953e754f15
#: ../../topics/i18n/timezones.txt:354
msgid "utc"
msgstr ""

# b5729f0bfd204b2d9423eb24772ee659
#: ../../topics/i18n/timezones.txt:356
msgid "Forces conversion of a single value to UTC."
msgstr ""

# c7173489b8ec429b88f58b07d27c4b50
#: ../../topics/i18n/timezones.txt:369
msgid "Forces conversion of a single value to an arbitrary timezone."
msgstr ""

# efc0b533789e4745b7a63ec9a0403543
#: ../../topics/i18n/timezones.txt:371
msgid ""
"The argument must be an instance of a :class:`~datetime.tzinfo` subclass or "
"a time zone name. If it is a time zone name, pytz_ is required."
msgstr ""

# b81cac5ae19b46ca97ddb675891cb3e1
#: ../../topics/i18n/timezones.txt:383
msgid "Migration guide"
msgstr ""

# ed1f87f058824a5bb902c33f3dd31413
#: ../../topics/i18n/timezones.txt:385
msgid ""
"Here's how to migrate a project that was started before Django supported "
"time zones."
msgstr ""

# a3311266b0c542c4add4b01542603cf8
#: ../../topics/i18n/timezones.txt:389
msgid "Database"
msgstr ""

# e694340aa64e4e6796817b31a0724513
#: ../../topics/i18n/timezones.txt:392
msgid "PostgreSQL"
msgstr ""

# 31aff9da66d4446b931ae301a66f86c7
#: ../../topics/i18n/timezones.txt:394
msgid ""
"The PostgreSQL backend stores datetimes as ``timestamp with time zone``. In "
"practice, this means it converts datetimes from the connection's time zone "
"to UTC on storage, and from UTC to the connection's time zone on retrieval."
msgstr ""

# 8c3f6ec7f15b4324baec5b9f67dfbdac
#: ../../topics/i18n/timezones.txt:398
msgid ""
"As a consequence, if you're using PostgreSQL, you can switch between "
"``USE_TZ = False`` and ``USE_TZ = True`` freely. The database connection's "
"time zone will be set to :setting:`TIME_ZONE` or ``UTC`` respectively, so "
"that Django obtains correct datetimes in all cases. You don't need to "
"perform any data conversions."
msgstr ""

# 0198d0e90c7b4e8ab0d36a4757d960cc
#: ../../topics/i18n/timezones.txt:405
msgid "Other databases"
msgstr ""

# 457a8bb6eae147978c2c8e22ea733764
#: ../../topics/i18n/timezones.txt:407
msgid ""
"Other backends store datetimes without time zone information. If you switch "
"from ``USE_TZ = False`` to ``USE_TZ = True``, you must convert your data "
"from local time to UTC -- which isn't deterministic if your local time has "
"DST."
msgstr ""

# 5432472fb91c42b6826c1bd8064c79c3
#: ../../topics/i18n/timezones.txt:412
msgid "Code"
msgstr ""

# 7df49241bba84e3098786f9c4fadfbaa
#: ../../topics/i18n/timezones.txt:414
msgid ""
"The first step is to add :setting:`USE_TZ = True <USE_TZ>` to your settings "
"file and install pytz_ (if possible). At this point, things should mostly "
"work. If you create naive datetime objects in your code, Django makes them "
"aware when necessary."
msgstr ""

# d9d476d1507244de9096929b9a974c0b
#: ../../topics/i18n/timezones.txt:419
msgid ""
"However, these conversions may fail around DST transitions, which means you "
"aren't getting the full benefits of time zone support yet. Also, you're "
"likely to run into a few problems because it's impossible to compare a naive "
"datetime with an aware datetime. Since Django now gives you aware datetimes, "
"you'll get exceptions wherever you compare a datetime that comes from a "
"model or a form with a naive datetime that you've created in your code."
msgstr ""

# 8b611fca075d457c911e26b017297e23
#: ../../topics/i18n/timezones.txt:426
msgid ""
"So the second step is to refactor your code wherever you instantiate "
"datetime objects to make them aware. This can be done incrementally. :mod:"
"`django.utils.timezone` defines some handy helpers for compatibility code: :"
"func:`~django.utils.timezone.now`, :func:`~django.utils.timezone.is_aware`, :"
"func:`~django.utils.timezone.is_naive`, :func:`~django.utils.timezone."
"make_aware`, and :func:`~django.utils.timezone.make_naive`."
msgstr ""

# 88870a90c0254e6ba8c7e2909faf85db
#: ../../topics/i18n/timezones.txt:435
msgid ""
"Finally, in order to help you locate code that needs upgrading, Django "
"raises a warning when you attempt to save a naive datetime to the database::"
msgstr ""

# c1607ba386204e23be09d5129422efc5
#: ../../topics/i18n/timezones.txt:440
msgid ""
"During development, you can turn such warnings into exceptions and get a "
"traceback by adding the following to your settings file::"
msgstr ""

# 237c0ba1c0274b5587348d9d7547fb11
#: ../../topics/i18n/timezones.txt:449
msgid "Fixtures"
msgstr ""

# f97c373a5c9d44aeb7194fb69c6f64c8
#: ../../topics/i18n/timezones.txt:451
msgid ""
"When serializing an aware datetime, the UTC offset is included, like this::"
msgstr ""

# 94183e9a58ab45b591160f3591902cfd
#: ../../topics/i18n/timezones.txt:455
msgid "For a naive datetime, it obviously isn't::"
msgstr ""

# fbe3e24298724d079678105fb2b79929
#: ../../topics/i18n/timezones.txt:459
msgid ""
"For models with :class:`~django.db.models.DateTimeField`\\ s, this "
"difference makes it impossible to write a fixture that works both with and "
"without time zone support."
msgstr ""

# 28e24d8720c24d7480b46a4ae491b070
#: ../../topics/i18n/timezones.txt:463
msgid ""
"Fixtures generated with ``USE_TZ = False``, or before Django 1.4, use the "
"\"naive\" format. If your project contains such fixtures, after you enable "
"time zone support, you'll see :exc:`RuntimeWarning`\\ s when you load them. "
"To get rid of the warnings, you must convert your fixtures to the \"aware\" "
"format."
msgstr ""

# 63df9deb96544f4cb09d26f5e72e289e
#: ../../topics/i18n/timezones.txt:468
msgid ""
"You can regenerate fixtures with :djadmin:`loaddata` then :djadmin:"
"`dumpdata`. Or, if they're small enough, you can simply edit them to add the "
"UTC offset that matches your :setting:`TIME_ZONE` to each serialized "
"datetime."
msgstr ""

# de89f6fd1a654ca48bdfc9f6e64d5adb
#: ../../topics/i18n/timezones.txt:475
msgid "FAQ"
msgstr ""

# a468f00cc8a24b04a67e57488793bfb5
#: ../../topics/i18n/timezones.txt:478
msgid "Setup"
msgstr ""

# 3161bb22c74e4459936a7104738e3dca
#: ../../topics/i18n/timezones.txt:480
msgid ""
"**I don't need multiple time zones. Should I enable time zone support?**"
msgstr ""

# d93374d00c214270b04106fab96bb3d3
#: ../../topics/i18n/timezones.txt:482
msgid ""
"Yes. When time zone support is enabled, Django uses a more accurate model of "
"local time. This shields you from subtle and unreproducible bugs around "
"daylight saving time (DST) transitions. Remember that your website runs 24/7!"
msgstr ""

# 29786c9ee01543c2b4ea515cd24364d5
#: ../../topics/i18n/timezones.txt:486
msgid ""
"In this regard, time zones is comparable to ``unicode`` in Python. At first "
"it's hard. You get encoding and decoding errors. Then you learn the rules. "
"And some problems disappear -- you never get mangled output again when your "
"application receives non-ASCII input."
msgstr ""

# bd4fda8345ac4cf7872478032a98731b
#: ../../topics/i18n/timezones.txt:491
msgid ""
"When you enable time zone support, you'll encounter some errors because "
"you're using naive datetimes where Django expects aware datetimes. Such "
"errors show up when running tests and they're easy to fix. You'll quickly "
"learn how to avoid invalid operations."
msgstr ""

# f576e6e272e74c21bbbf785efc09b11d
#: ../../topics/i18n/timezones.txt:496
msgid ""
"On the other hand, bugs caused by the lack of time zone support are much "
"harder to prevent, diagnose and fix. Anything that involves scheduled tasks "
"or datetime arithmetic is a candidate for subtle bugs that will bite you "
"only once or twice a year."
msgstr ""

# 0740b2b5ecb244efaf0a3bc1f03a4a35
#: ../../topics/i18n/timezones.txt:501
msgid ""
"For these reasons, time zone support is enabled by default in new projects, "
"and you should keep it unless you have a very good reason not to."
msgstr ""

# 44a06edcbb0f47b085c0d9eacbaa9acc
#: ../../topics/i18n/timezones.txt:504
msgid "**I've enabled time zone support, am I safe?**"
msgstr ""

# ad7265667eab4ebc82ea32e11a725ecc
#: ../../topics/i18n/timezones.txt:506
msgid ""
"Maybe. You're better protected from DST-related bugs, but you can still "
"shoot yourself in the foot by carelessly turning naive datetimes into aware "
"datetimes, and vice-versa."
msgstr ""

# 342c19af2440428dbb32dc677ecf632f
#: ../../topics/i18n/timezones.txt:510
msgid ""
"If your application connects to other systems, for instance if it queries a "
"webservice, make sure datetimes are properly specified. To transmit "
"datetimes safely, their representation should include the UTC offset, or "
"their values should be in UTC (or both!)."
msgstr ""

# 185b44b2acf44ee28cf90a311cdf32d9
#: ../../topics/i18n/timezones.txt:515
msgid "Finally, our calendar system contains interesting traps for computers::"
msgstr ""

# b3fde7ffecc3447a90a6bced1627de94
#: ../../topics/i18n/timezones.txt:527
msgid ""
"(To implement this function, you must decide whether 2012-02-29 minus one "
"year is 2011-02-28 or 2011-03-01, which depends on your business "
"requirements.)"
msgstr ""

# 377472825b154db0a75e31449c1f5e75
#: ../../topics/i18n/timezones.txt:531
msgid "**Should I install pytz?**"
msgstr ""

# f695284524f84e03a2894c1fd519973a
#: ../../topics/i18n/timezones.txt:533
msgid ""
"Yes. Django has a policy of not requiring external dependencies, and for "
"this reason pytz_ is optional. However, it's much safer to install it."
msgstr ""

# 804674762dd141a3865b2f901736b631
#: ../../topics/i18n/timezones.txt:536
msgid ""
"As soon as you activate time zone support, Django needs a definition of the "
"default time zone. When pytz is available, Django loads this definition from "
"the `tz database`_. This is the most accurate solution. Otherwise, it relies "
"on the difference between local time and UTC, as reported by the operating "
"system, to compute conversions. This is less reliable, especially around DST "
"transitions."
msgstr ""

# 86d4630d153041f29821498850688fd7
#: ../../topics/i18n/timezones.txt:543
msgid ""
"Furthermore, if you want to support users in more than one time zone, pytz "
"is the reference for time zone definitions."
msgstr ""

# 069ec73731fe4645880b249132f040b9
#: ../../topics/i18n/timezones.txt:547
msgid "Troubleshooting"
msgstr ""

# 5d06e099333c43ebab6d46dc07ef7c7f
#: ../../topics/i18n/timezones.txt:549
msgid ""
"**My application crashes with** ``TypeError: can't compare offset-naive`` "
"``and offset-aware datetimes`` **-- what's wrong?**"
msgstr ""

# f97c937e8d20455c914b0cdc60f5c799
#: ../../topics/i18n/timezones.txt:552
msgid ""
"First, don't panic. Then, let's reproduce this error, simply by comparing a "
"naive and an aware datetime::"
msgstr ""

# 47862727eb984c8b9e88f5d4bec4e49b
#: ../../topics/i18n/timezones.txt:564
msgid "If you encounter this error, most likely, your code is comparing:"
msgstr ""

# 74dea54292464b8abfa100fa4147a454
#: ../../topics/i18n/timezones.txt:566
msgid ""
"a datetime provided by Django, for instance a value read from a form or a "
"model field: since you enabled time zone support, it is aware;"
msgstr ""

# 76413095fb5b4bd1b14321e943796d1c
#: ../../topics/i18n/timezones.txt:568
msgid ""
"a datetime generated by your code, which is naive (or you wouldn't be "
"reading this)."
msgstr ""

# f9e6e6528b284f5997304a10e5f7a259
#: ../../topics/i18n/timezones.txt:571
msgid ""
"Generally, the correct solution is to change your code to use an aware "
"datetime instead."
msgstr ""

# 0098aea712b04fb0b5cf54e34b31f458
#: ../../topics/i18n/timezones.txt:574
msgid ""
"If you're writing a pluggable application that's expected to work "
"independently of the value of :setting:`USE_TZ`, you may find :func:`django."
"utils.timezone.now` useful. This function returns the current date and time "
"as a naive datetime when ``USE_TZ = False`` and as an aware datetime when "
"``USE_TZ = True``. You can add or substract :class:`datetime.timedelta` as "
"needed."
msgstr ""

# fe4b094b9aed4d52972f2b6904084ef5
#: ../../topics/i18n/timezones.txt:581
msgid ""
"**I see lots of** ``RuntimeWarning: DateTimeField received a naive "
"datetime`` ``(YYYY-MM-DD HH:MM:SS)`` ``while time zone support is active`` "
"**-- is it bad?**"
msgstr ""

# b45717b2a09f4de2bffc8ed9713f1698
#: ../../topics/i18n/timezones.txt:585
msgid ""
"When time zone support is enabled, the database layer expects to receive "
"only aware datetimes from your code. This warning occurs when it receives a "
"naive datetime. This indicates that you haven't finished porting your code "
"for time zone support. Please refer to the :ref:`migration guide <time-zones-"
"migration-guide>` for tips on this process."
msgstr ""

# aeadee5aab87404fbce4d47417895925
#: ../../topics/i18n/timezones.txt:591
msgid ""
"In the meantime, for backwards compatibility, the datetime is considered to "
"be in the default time zone, which is generally what you expect."
msgstr ""

# 881caf6216674d77898b8cb50c2d4e1b
#: ../../topics/i18n/timezones.txt:594
msgid "``now.date()`` **is yesterday! (or tomorrow)**"
msgstr ""

# 285461c4537d47a99e7d94e046b2aa0d
#: ../../topics/i18n/timezones.txt:596
msgid ""
"If you've always used naive datetimes, you probably believe that you can "
"convert a datetime to a date by calling its :meth:`~datetime.datetime.date` "
"method. You also consider that a :class:`~datetime.date` is a lot like a :"
"class:`~datetime.datetime`, except that it's less accurate."
msgstr ""

# b085d84ddcf1471182339003220d0b3f
#: ../../topics/i18n/timezones.txt:601
msgid "None of this is true in a time zone aware environment::"
msgstr ""

# bfce6d81de8449b2b6115ce6598d099b
#: ../../topics/i18n/timezones.txt:619
msgid ""
"As this example shows, the same datetime has a different date, depending on "
"the time zone in which it is representend. But the real problem is more "
"fundamental."
msgstr ""

# 0c0495f0c61a4322923fe4cba3dbd7ff
#: ../../topics/i18n/timezones.txt:623
msgid ""
"A datetime represents a **point in time**. It's absolute: it doesn't depend "
"on anything (barring relativistic effects). On the contrary, a date is a "
"**calendaring concept**. It's a period of time whose bounds depend on the "
"time zone in which the date is considered. As you can see, these two "
"concepts are fundamentally different and converting a datetime to a date "
"isn't a deterministic operation."
msgstr ""

# 069a82cf6621465c92b5aaf693724535
#: ../../topics/i18n/timezones.txt:630
msgid "What does this mean in practice?"
msgstr ""

# 6f0ab2e4979e46678cd393e0632278be
#: ../../topics/i18n/timezones.txt:632
msgid ""
"Generally, you should avoid converting a :class:`~datetime.datetime` to :"
"class:`~datetime.date`. For instance, you can use the :tfilter:`date` "
"template filter to only show the date part of a datetime. This filter will "
"convert the datetime into the current time zone before formatting it, "
"ensuring the results appear correct for the user."
msgstr ""

# 231840263009479b93b307a190c72261
#: ../../topics/i18n/timezones.txt:638
msgid ""
"If you really need to do the conversion yourself, you must ensure the "
"datetime is converted to the appropriate time zone first. Usually, this will "
"be the current timezone::"
msgstr ""

# ee863ea14d2641bfa7cea7835e03d9c3
#: ../../topics/i18n/timezones.txt:655
msgid "Usage"
msgstr ""

# 079f5c1e3f5e4822a325aa210104370a
#: ../../topics/i18n/timezones.txt:657
msgid ""
"**I have this string** ``\"2012-02-21 10:28:45\"`` **and I know it's in "
"the** ``\"Europe/Helsinki\"`` **time zone. How do I turn that into an aware "
"datetime?**"
msgstr ""

# 64530ab0d6204f4aab97f23a7055a5dd
#: ../../topics/i18n/timezones.txt:661
msgid "This is exactly what pytz_ is for."
msgstr ""

# 2dab66eff50b4d17b2a9c97009499a2c
#: ../../topics/i18n/timezones.txt:669
msgid ""
"Note that ``localize`` is a pytz extension to the :class:`~datetime.tzinfo` "
"API. Also, you may want to catch :exc:`~pytz.InvalidTimeError`. The "
"documentation of pytz contains `more examples`_; you should review it before "
"attempting to manipulate aware datetimes."
msgstr ""

# 88dfae53679f4cfb97a9bf45af9bc793
#: ../../topics/i18n/timezones.txt:674
msgid "**How can I obtain the current time in the local time zone?**"
msgstr ""

# c22d7832c47c4d3fa9d7722f23ad15b9
#: ../../topics/i18n/timezones.txt:676
msgid "Well, the first question is, do you really need to?"
msgstr ""

# 157c1c7aa76b4bc59772eabff970d74e
#: ../../topics/i18n/timezones.txt:678
msgid ""
"You should only use local time when you're interacting with humans, and the "
"template layer provides :ref:`filters and tags <time-zones-in-templates>` to "
"convert datetimes to the time zone of your choice."
msgstr ""

# 28a3f979121e4428821e39c8b2484291
#: ../../topics/i18n/timezones.txt:682
msgid ""
"Furthermore, Python knows how to compare aware datetimes, taking into "
"account UTC offsets when necessary. It's much easier (and possibly faster) "
"to write all your model and view code in UTC. So, in most circumstances, the "
"datetime in UTC returned by :func:`django.utils.timezone.now` will be "
"sufficient."
msgstr ""

# 2309e0234f5a47cdbba0c14425a00c6a
#: ../../topics/i18n/timezones.txt:688
msgid ""
"For the sake of completeness, if you really wanted the current time in the "
"local time zone, here's how you would obtain it::"
msgstr ""

# 01bbb942f4f94012ab215438c098a7e7
#: ../../topics/i18n/timezones.txt:696
msgid ""
"In this example, pytz_ is installed and :setting:`TIME_ZONE` is ``\"Europe/"
"Paris\"``."
msgstr ""

# 545aa162b7a047aeb9707eab5e21b828
#: ../../topics/i18n/timezones.txt:699
msgid "**How can I see all available time zones?**"
msgstr ""

# 38cf21a3520640078b802bd75f4e12a2
#: ../../topics/i18n/timezones.txt:701
msgid ""
"pytz_ provides helpers_, including a list of current time zones and a list "
"of all available time zones -- some of which are only of historical interest."
msgstr ""

# 5ed5f5a3e8c34dfbb9bf288ff7dd9c57
#: ../../topics/i18n/translation.txt:3
msgid "Translation"
msgstr ""

# c5963d69b2bd4a93b993421fbb3e30a3
#: ../../topics/i18n/translation.txt:10
msgid ""
"In order to make a Django project translatable, you have to add a minimal "
"amount of hooks to your Python code and templates. These hooks are called :"
"term:`translation strings <translation string>`. They tell Django: \"This "
"text should be translated into the end user's language, if a translation for "
"this text is available in that language.\" It's your responsibility to mark "
"translatable strings; the system can only translate strings it knows about."
msgstr ""

# f531b4d39f7043b49969ebd5ae7c898d
#: ../../topics/i18n/translation.txt:17
msgid ""
"Django then provides utilities to extract the translation strings into a :"
"term:`message file`. This file is a convenient way for translators to "
"provide the equivalent of the translation strings in the target language. "
"Once the translators have filled in the message file, it must be compiled. "
"This process relies on the GNU gettext toolset."
msgstr ""

# 987b33d70f684903be035190c9d7cdfe
#: ../../topics/i18n/translation.txt:23
msgid ""
"Once this is done, Django takes care of translating Web apps on the fly in "
"each available language, according to users' language preferences."
msgstr ""

# 8cca6276ea194c4fba926626ce25d6ef
#: ../../topics/i18n/translation.txt:26
msgid ""
"Django's internationalization hooks are on by default, and that means "
"there's a bit of i18n-related overhead in certain places of the framework. "
"If you don't use internationalization, you should take the two seconds to "
"set :setting:`USE_I18N = False <USE_I18N>` in your settings file. Then "
"Django will make some optimizations so as not to load the "
"internationalization machinery. You'll probably also want to remove "
"``'django.core.context_processors.i18n'`` from your :setting:"
"`TEMPLATE_CONTEXT_PROCESSORS` setting."
msgstr ""

# 0b7af4ae04f74975a60f674d7b132c69
#: ../../topics/i18n/translation.txt:36
msgid ""
"There is also an independent but related :setting:`USE_L10N` setting that "
"controls if Django should implement format localization. See :doc:`/topics/"
"i18n/formatting` for more details."
msgstr ""

# 0d1aded8bf334559b41e2ca2efec6873
#: ../../topics/i18n/translation.txt:41
msgid "Internationalization: in Python code"
msgstr ""

# da1d43ba544243948f0fd3695c78550c
#: ../../topics/i18n/translation.txt:44
msgid "Standard translation"
msgstr ""

# 69a0b31ce7424340b9f916d1e8bdf904
#: ../../topics/i18n/translation.txt:46
msgid ""
"Specify a translation string by using the function :func:`~django.utils."
"translation.ugettext`. It's convention to import this as a shorter alias, "
"``_``, to save typing."
msgstr ""

# 1a5cf2a498c14374acbe1c9ed1b71f92
#: ../../topics/i18n/translation.txt:51
msgid ""
"Python's standard library ``gettext`` module installs ``_()`` into the "
"global namespace, as an alias for ``gettext()``. In Django, we have chosen "
"not to follow this practice, for a couple of reasons:"
msgstr ""

# ce3ad93c7b794152b407bf30e917020f
#: ../../topics/i18n/translation.txt:55
msgid ""
"For international character set (Unicode) support, :func:`~django.utils."
"translation.ugettext` is more useful than ``gettext()``. Sometimes, you "
"should be using :func:`~django.utils.translation.ugettext_lazy` as the "
"default translation method for a particular file. Without ``_()`` in the "
"global namespace, the developer has to think about which is the most "
"appropriate translation function."
msgstr ""

# f2343cfe2213495080951e6517785370
#: ../../topics/i18n/translation.txt:63
msgid ""
"The underscore character (``_``) is used to represent \"the previous result"
"\" in Python's interactive shell and doctest tests. Installing a global ``_()"
"`` function causes interference. Explicitly importing ``ugettext()`` as ``_()"
"`` avoids this problem."
msgstr ""

# 979530b27f334190877649d3a639d972
#: ../../topics/i18n/translation.txt:70
msgid ""
"In this example, the text ``\"Welcome to my site.\"`` is marked as a "
"translation string::"
msgstr ""

# 76eea5d2fb0c43afb39a5cf17af6d21c
#: ../../topics/i18n/translation.txt:79
msgid ""
"Obviously, you could code this without using the alias. This example is "
"identical to the previous one::"
msgstr ""

# 38028cc9e6b84cde944c5c9208a6caa4
#: ../../topics/i18n/translation.txt:88
msgid ""
"Translation works on computed values. This example is identical to the "
"previous two::"
msgstr ""

# 84753fbf7bb14dabac3337ec8af0af2f
#: ../../topics/i18n/translation.txt:96
msgid "Translation works on variables. Again, here's an identical example::"
msgstr ""

# d2e155c07df245d295faae67ba6f298f
#: ../../topics/i18n/translation.txt:103
msgid ""
"(The caveat with using variables or computed values, as in the previous two "
"examples, is that Django's translation-string-detecting utility, :djadmin:"
"`django-admin.py makemessages <makemessages>`, won't be able to find these "
"strings. More on :djadmin:`makemessages` later.)"
msgstr ""

# 716eab7457414f44a1281aec146459f2
#: ../../topics/i18n/translation.txt:108
msgid ""
"The strings you pass to ``_()`` or ``ugettext()`` can take placeholders, "
"specified with Python's standard named-string interpolation syntax. Example::"
msgstr ""

# d4da590516f840d0b2fa7dc6afa36ccc
#: ../../topics/i18n/translation.txt:115
msgid ""
"This technique lets language-specific translations reorder the placeholder "
"text. For example, an English translation may be ``\"Today is November 26."
"\"``, while a Spanish translation may be ``\"Hoy es 26 de Noviembre.\"`` -- "
"with the the month and the day placeholders swapped."
msgstr ""

# ac808fba9a054593a7f97480d79e239e
#: ../../topics/i18n/translation.txt:120
msgid ""
"For this reason, you should use named-string interpolation (e.g., ``%(day)"
"s``) instead of positional interpolation (e.g., ``%s`` or ``%d``) whenever "
"you have more than a single parameter. If you used positional interpolation, "
"translations wouldn't be able to reorder placeholder text."
msgstr ""

# 8d7819148ab546fb8dc7ffcf608ef8b2
#: ../../topics/i18n/translation.txt:128
msgid "Comments for translators"
msgstr ""

# 1e0eac41ab494f49b320f4428284c319
#: ../../topics/i18n/translation.txt:132
msgid ""
"If you would like to give translators hints about a translatable string, you "
"can add a comment prefixed with the ``Translators`` keyword on the line "
"preceding the string, e.g.::"
msgstr ""

# dba5a16a18d244bbb48b7114b7d514f0
#: ../../topics/i18n/translation.txt:140
msgid "This also works in templates with the :ttag:`comment` tag:"
msgstr ""

# 56c60b7d770f43f5bbff55ff1e6c1036
#: ../../topics/i18n/translation.txt:146
msgid ""
"The comment will then appear in the resulting ``.po`` file and should also "
"be displayed by most translation tools."
msgstr ""

# 76bc69fcd7714d8699510426b825bfba
#: ../../topics/i18n/translation.txt:150
msgid "Marking strings as no-op"
msgstr ""

# e7d619f3e2dd4b179e59a6a7b609cc86
#: ../../topics/i18n/translation.txt:152
msgid ""
"Use the function :func:`django.utils.translation.ugettext_noop()` to mark a "
"string as a translation string without translating it. The string is later "
"translated from a variable."
msgstr ""

# fe5f94c7021e4f1a9cbaa3da0f3c2a60
#: ../../topics/i18n/translation.txt:156
msgid ""
"Use this if you have constant strings that should be stored in the source "
"language because they are exchanged over systems or users -- such as strings "
"in a database -- but should be translated at the last possible point in "
"time, such as when the string is presented to the user."
msgstr ""

# e749dd7f47794288ae815288a99dbc66
#: ../../topics/i18n/translation.txt:162
msgid "Pluralization"
msgstr ""

# 1e514c03f9d24696aba434c3882ea045
#: ../../topics/i18n/translation.txt:164
msgid ""
"Use the function :func:`django.utils.translation.ungettext()` to specify "
"pluralized messages."
msgstr ""

# f72acb9fbd60422baa1764e7094e5828
#: ../../topics/i18n/translation.txt:167
msgid ""
"``ungettext`` takes three arguments: the singular translation string, the "
"plural translation string and the number of objects."
msgstr ""

# 20bc0f874afb49819f091c228d4199a1
#: ../../topics/i18n/translation.txt:170
msgid ""
"This function is useful when you need your Django application to be "
"localizable to languages where the number and complexity of `plural forms "
"<http://www.gnu.org/software/gettext/manual/gettext.html#Plural-forms>`_ is "
"greater than the two forms used in English ('object' for the singular and "
"'objects' for all the cases where ``count`` is different from one, "
"irrespective of its value.)"
msgstr ""

# cbceb23684dc46f28abbb49feb0c5ad9
#: ../../topics/i18n/translation.txt:190
msgid ""
"In this example the number of objects is passed to the translation languages "
"as the ``count`` variable."
msgstr ""

# 0a2d68ea21d546faa167f37182b0a232
#: ../../topics/i18n/translation.txt:193
msgid "Lets see a slightly more complex usage example::"
msgstr ""

# 821cd3d592a84a1db26f6ac556bc0360
#: ../../topics/i18n/translation.txt:212
msgid ""
"Here we reuse localizable, hopefully already translated literals (contained "
"in the ``verbose_name`` and ``verbose_name_plural`` model ``Meta`` options) "
"for other parts of the sentence so all of it is consistently based on the "
"cardinality of the elements at play."
msgstr ""

# bd51a379f31a48d7b708f0b5ba08cc1f
#: ../../topics/i18n/translation.txt:221
msgid ""
"When using this technique, make sure you use a single name for every "
"extrapolated variable included in the literal. In the example above note how "
"we used the ``name`` Python variable in both translation strings. This "
"example would fail::"
msgstr ""

# 31481195e7c34d718ef18c2fd908ac52
#: ../../topics/i18n/translation.txt:241
msgid ""
"You would get an error when running :djadmin:`django-admin.py "
"compilemessages <compilemessages>`::"
msgstr ""

# ba9ad6a5944545e0bf9d3a035f6f153e
#: ../../topics/i18n/translation.txt:249
msgid "Contextual markers"
msgstr ""

# 989ce9f270d347679f81a93e855e7df7
#: ../../topics/i18n/translation.txt:253
msgid ""
"Sometimes words have several meanings, such as ``\"May\"`` in English, which "
"refers to a month name and to a verb. To enable translators to translate "
"these words correctly in different contexts, you can use the :func:`django."
"utils.translation.pgettext()` function, or the :func:`django.utils."
"translation.npgettext()` function if the string needs pluralization. Both "
"take a context string as the first variable."
msgstr ""

# 9cd901d6c912474483dfe9667f4098cf
#: ../../topics/i18n/translation.txt:260
msgid ""
"In the resulting ``.po`` file, the string will then appear as often as there "
"are different contextual markers for the same string (the context will "
"appear on the ``msgctxt`` line), allowing the translator to give a different "
"translation for each of them."
msgstr ""

# fef294cebe2941928a02b2e2ee291077
#: ../../topics/i18n/translation.txt:271
msgid "or::"
msgstr ""

# 51d4fb3be92d4e0f997fff9838a29daf
#: ../../topics/i18n/translation.txt:279
msgid "will appear in the ``.po`` file as:"
msgstr ""

# 7072aedf5aa24d56b034bd534d6e6aa1
#: ../../topics/i18n/translation.txt:289
msgid ""
"Contextual markers are also supported by the :ttag:`trans` and :ttag:"
"`blocktrans` template tags."
msgstr ""

# f933caa8d5ed442c8de2ce1b23d9b542
#: ../../topics/i18n/translation.txt:295
msgid "Lazy translation"
msgstr ""

# 5029fe8cae034df8ac0954b60104b520
#: ../../topics/i18n/translation.txt:297
msgid ""
"Use the lazy versions of translation functions in :mod:`django.utils."
"translation` (easily recognizable by the ``lazy`` suffix in their names) to "
"translate strings lazily -- when the value is accessed rather than when "
"they're called."
msgstr ""

# 809951caaceb4c56828383d8acd75b2f
#: ../../topics/i18n/translation.txt:302
msgid ""
"These functions store a lazy reference to the string -- not the actual "
"translation. The translation itself will be done when the string is used in "
"a string context, such as in template rendering."
msgstr ""

# ebaa26b4a560474fada7879181cc6111
#: ../../topics/i18n/translation.txt:306
msgid ""
"This is essential when calls to these functions are located in code paths "
"that are executed at module load time."
msgstr ""

# cf6f559974a14557bb3d1a444caafe1e
#: ../../topics/i18n/translation.txt:309
msgid ""
"This is something that can easily happen when defining models, forms and "
"model forms, because Django implements these such that their fields are "
"actually class-level attributes. For that reason, make sure to use lazy "
"translations in the following cases:"
msgstr ""

# e9d8415bf7a6410ba5418b9fc5cd9191
#: ../../topics/i18n/translation.txt:315
msgid ""
"Model fields and relationships ``verbose_name`` and ``help_text`` option "
"values"
msgstr ""

# f4d051f63b4f4a0595ffee4fa9ca0125
#: ../../topics/i18n/translation.txt:317
msgid ""
"For example, to translate the help text of the *name* field in the following "
"model, do the following::"
msgstr ""

# b4b1e4e31a1349eeafaef778f36d5790
#: ../../topics/i18n/translation.txt:325
msgid ""
"You can mark names of ``ForeignKey``, ``ManyTomanyField`` or "
"``OneToOneField`` relationship as translatable by using their "
"``verbose_name`` options::"
msgstr ""

# 8c31a545fef94f6b98970f31929d44e0
#: ../../topics/i18n/translation.txt:334
msgid ""
"Just like you would do in :attr:`~django.db.models.Options.verbose_name` you "
"should provide a lowercase verbose name text for the relation as Django will "
"automatically titlecase it when required."
msgstr ""

# 66c6f6b0136c4c5085b75a555ac51488
#: ../../topics/i18n/translation.txt:339
msgid "Model verbose names values"
msgstr ""

# ec622eb83b1047deaa1d79ec9ae24503
#: ../../topics/i18n/translation.txt:341
msgid ""
"It is recommended to always provide explicit :attr:`~django.db.models."
"Options.verbose_name` and :attr:`~django.db.models.Options."
"verbose_name_plural` options rather than relying on the fallback English-"
"centric and somewhat naïve determination of verbose names Django performs bu "
"looking at the model's class name::"
msgstr ""

# 26224f3e611a4f71bff556b58f1b0685
#: ../../topics/i18n/translation.txt:357
msgid "Model methods ``short_description`` attribute values"
msgstr ""

# dec51f19192f42c6ae7fbc79eee05683
#: ../../topics/i18n/translation.txt:359
msgid ""
"For model methods, you can provide translations to Django and the admin site "
"with the ``short_description`` attribute::"
msgstr ""

# 7e84adf203dd498eb9e5bb430203ea80
#: ../../topics/i18n/translation.txt:373
msgid "Working with lazy translation objects"
msgstr ""

# 6ece706de6a04c3cbe299c7c97dfe8b5
#: ../../topics/i18n/translation.txt:375
msgid ""
"The result of a ``ugettext_lazy()`` call can be used wherever you would use "
"a unicode string (an object with type ``unicode``) in Python. If you try to "
"use it where a bytestring (a ``str`` object) is expected, things will not "
"work as expected, since a ``ugettext_lazy()`` object doesn't know how to "
"convert itself to a bytestring. You can't use a unicode string inside a "
"bytestring, either, so this is consistent with normal Python behavior. For "
"example::"
msgstr ""

# ac609dbcef80418392e835906d39511a
#: ../../topics/i18n/translation.txt:389
msgid ""
"If you ever see output that looks like ``\"hello <django.utils.functional...>"
"\"``, you have tried to insert the result of ``ugettext_lazy()`` into a "
"bytestring. That's a bug in your code."
msgstr ""

# 75a707feafa34b659352e837d7c7677e
#: ../../topics/i18n/translation.txt:393
msgid ""
"If you don't like the long ``ugettext_lazy`` name, you can just alias it as "
"``_`` (underscore), like so::"
msgstr ""

# 3c30e65111a54ad3b2c94bfe3b539ff9
#: ../../topics/i18n/translation.txt:401
msgid ""
"Using ``ugettext_lazy()`` and ``ungettext_lazy()`` to mark strings in models "
"and utility functions is a common operation. When you're working with these "
"objects elsewhere in your code, you should ensure that you don't "
"accidentally convert them to strings, because they should be converted as "
"late as possible (so that the correct locale is in effect). This "
"necessitates the use of the helper function described next."
msgstr ""

# 71306a1919664f60a6c0474b3be889b9
#: ../../topics/i18n/translation.txt:409
msgid "Joining strings: string_concat()"
msgstr ""

# f7a18e1736b24419b5f48d018c072c30
#: ../../topics/i18n/translation.txt:411
msgid ""
"Standard Python string joins (``''.join([...])``) will not work on lists "
"containing lazy translation objects. Instead, you can use :func:`django."
"utils.translation.string_concat()`, which creates a lazy object that "
"concatenates its contents *and* converts them to strings only when the "
"result is included in a string. For example::"
msgstr ""

# b942a524bb1b4bf08059d41f70efddcc
#: ../../topics/i18n/translation.txt:423
msgid ""
"In this case, the lazy translations in ``result`` will only be converted to "
"strings when ``result`` itself is used in a string (usually at template "
"rendering time)."
msgstr ""

# f1cc833ec4c345669d1f7ac89d4481f6
#: ../../topics/i18n/translation.txt:428
msgid "Localized names of languages"
msgstr ""

# 3992b09b20df4a188f7a3b0926c7a863
#: ../../topics/i18n/translation.txt:434
msgid ""
"The ``get_language_info()`` function provides detailed information about "
"languages::"
msgstr ""

# 482accaa876341438e2bef20ee8b7879
#: ../../topics/i18n/translation.txt:442
msgid ""
"The ``name`` and ``name_local`` attributes of the dictionary contain the "
"name of the language in English and in the language itself, respectively.  "
"The ``bidi`` attribute is True only for bi-directional languages."
msgstr ""

# 9afde87a13394219b793a97fda503403
#: ../../topics/i18n/translation.txt:446
msgid ""
"The source of the language information is the ``django.conf.locale`` module. "
"Similar access to this information is available for template code. See below."
msgstr ""

# 522379574149490ab92475eac617261e
#: ../../topics/i18n/translation.txt:452
msgid "Internationalization: in template code"
msgstr ""

# 7211e75421524e898f69acda3a7da9ba
#: ../../topics/i18n/translation.txt:456
msgid ""
"Translations in :doc:`Django templates </topics/templates>` uses two "
"template tags and a slightly different syntax than in Python code. To give "
"your template access to these tags, put ``{% load i18n %}`` toward the top "
"of your template."
msgstr ""

# c52ba7a972ff473eabbbde9ffcae0246
#: ../../topics/i18n/translation.txt:463
msgid "``trans`` template tag"
msgstr ""

# e2806283d3d646fc96a3cec7a7b668ab
#: ../../topics/i18n/translation.txt:465
msgid ""
"The ``{% trans %}`` template tag translates either a constant string "
"(enclosed in single or double quotes) or variable content::"
msgstr ""

# 088e504336ad49f689b8b48a76d964b8
#: ../../topics/i18n/translation.txt:471
msgid ""
"If the ``noop`` option is present, variable lookup still takes place but the "
"translation is skipped. This is useful when \"stubbing out\" content that "
"will require translation in the future::"
msgstr ""

# a6445bf780014766a5415190bcab9bd4
#: ../../topics/i18n/translation.txt:477
msgid ""
"Internally, inline translations use an :func:`~django.utils.translation."
"ugettext` call."
msgstr ""

# 5d00c4614e6f4dc08ac8f6def9f45f64
#: ../../topics/i18n/translation.txt:480
msgid ""
"In case a template var (``myvar`` above) is passed to the tag, the tag will "
"first resolve such variable to a string at run-time and then look up that "
"string in the message catalogs."
msgstr ""

# 9e2a3fd71a6047da96cdfebbe471cb4f
#: ../../topics/i18n/translation.txt:484
msgid ""
"It's not possible to mix a template variable inside a string within ``{% "
"trans %}``. If your translations require strings with variables "
"(placeholders), use ``{% blocktrans %}`` instead."
msgstr ""

# ffa777cce5d6414c8299875b427d35d3
#: ../../topics/i18n/translation.txt:490
msgid ""
"If you'd like to retrieve a translated string without displaying it, you can "
"use the following syntax::"
msgstr ""

# 54fe1241913f42c4a231e7fd79622c41
#: ../../topics/i18n/translation.txt:498
msgid ""
"In practice you'll use this to get strings that are used in multiple places "
"or should be used as arguments for other template tags or filters::"
msgstr ""

# c2e0c2fbf8924d82a2c896c2b9f20466
#: ../../topics/i18n/translation.txt:516
msgid ""
"``{% trans %}`` also supports :ref:`contextual markers<contextual-markers>` "
"using the ``context`` keyword:"
msgstr ""

# 9a3c2095989244008b25b2badbbb7a81
#: ../../topics/i18n/translation.txt:526
msgid "``blocktrans`` template tag"
msgstr ""

# 64156b61aa0c488c943a42b543c2b88d
#: ../../topics/i18n/translation.txt:531
msgid ""
"Contrarily to the :ttag:`trans` tag, the ``blocktrans`` tag allows you to "
"mark complex sentences consisting of literals and variable content for "
"translation by making use of placeholders::"
msgstr ""

# 2cee129603184aa29e8b4b3cd38b7942
#: ../../topics/i18n/translation.txt:537
msgid ""
"To translate a template expression -- say, accessing object attributes or "
"using template filters -- you need to bind the expression to a local "
"variable for use within the translation block. Examples::"
msgstr ""

# 940362f085aa4c8f98384e59e98237c3
#: ../../topics/i18n/translation.txt:549
msgid "You can use multiple expressions inside a single ``blocktrans`` tag::"
msgstr ""

# 376326d4373b4b3da2607c18b98309f6
#: ../../topics/i18n/translation.txt:555
msgid ""
"The previous more verbose format is still supported: ``{% blocktrans with "
"book|title as book_t and author|title as author_t %}``"
msgstr ""

# c83f3d61da25424190e856654972487e
#: ../../topics/i18n/translation.txt:560
msgid ""
"If resolving one of the block arguments fails, blocktrans will fall back to "
"the default language by deactivating the currently active language "
"temporarily with the :func:`~django.utils.translation.deactivate_all` "
"function."
msgstr ""

# f625a34460c7431e8acffe1b27f41776
#: ../../topics/i18n/translation.txt:565
msgid "This tag also provides for pluralization. To use it:"
msgstr ""

# ea56f94b79304f468fbf4e924b305102
#: ../../topics/i18n/translation.txt:567
msgid ""
"Designate and bind a counter value with the name ``count``. This value will "
"be the one used to select the right plural form."
msgstr ""

# 42cc732d06f6432ba2455d5c276ac9e6
#: ../../topics/i18n/translation.txt:570
msgid ""
"Specify both the singular and plural forms separating them with the ``{% "
"plural %}`` tag within the ``{% blocktrans %}`` and ``{% endblocktrans %}`` "
"tags."
msgstr ""

# c1282161a6bd482abd1654406a4a5c16
#: ../../topics/i18n/translation.txt:582
msgid "A more complex example::"
msgstr ""

# 8ce68bac7d2f41e19482010563365ba3
#: ../../topics/i18n/translation.txt:590
msgid ""
"When you use both the pluralization feature and bind values to local "
"variables in addition to the counter value, keep in mind that the "
"``blocktrans`` construct is internally converted to an ``ungettext`` call. "
"This means the same :ref:`notes regarding ungettext variables <pluralization-"
"var-notes>` apply."
msgstr ""

# ae0599172e204be19e3d0df34d85645e
#: ../../topics/i18n/translation.txt:596
msgid ""
"Reverse URL lookups cannot be carried out within the ``blocktrans`` and "
"should be retrieved (and stored) beforehand::"
msgstr ""

# ebdfa8451e334a38a0ef1fc2e60a850f
#: ../../topics/i18n/translation.txt:606
msgid ""
"``{% blocktrans %}`` also supports :ref:`contextual markers<contextual-"
"markers>` using the ``context`` keyword:"
msgstr ""

# 278b777b6d56445393441034ad4c0939
#: ../../topics/i18n/translation.txt:616
msgid "Other tags"
msgstr ""

# ea732e3acdb24ea29d7be6c2361ada78
#: ../../topics/i18n/translation.txt:618
msgid ""
"Each ``RequestContext`` has access to three translation-specific variables:"
msgstr ""

# 894ae18d43324d40bfe27e51d2b996bc
#: ../../topics/i18n/translation.txt:620
msgid ""
"``LANGUAGES`` is a list of tuples in which the first element is the :term:"
"`language code` and the second is the language name (translated into the "
"currently active locale)."
msgstr ""

# 078a85e0f3984220a54bd7590e7c226f
#: ../../topics/i18n/translation.txt:624
msgid ""
"``LANGUAGE_CODE`` is the current user's preferred language, as a string. "
"Example: ``en-us``. (See :ref:`how-django-discovers-language-preference`.)"
msgstr ""

# 5e9238898bbd448ebd80badb3d2a9045
#: ../../topics/i18n/translation.txt:627
msgid ""
"``LANGUAGE_BIDI`` is the current locale's direction. If True, it's a right-"
"to-left language, e.g.: Hebrew, Arabic. If False it's a left-to-right "
"language, e.g.: English, French, German etc."
msgstr ""

# 7b63607ded1c4ec189b8a53b9d16e629
#: ../../topics/i18n/translation.txt:631
msgid ""
"If you don't use the ``RequestContext`` extension, you can get those values "
"with three tags::"
msgstr ""

# cc809a6730c54e1382a1b80c25810b4e
#: ../../topics/i18n/translation.txt:638
msgid "These tags also require a ``{% load i18n %}``."
msgstr ""

# 613478b346924b409ea59c0fb5e48af1
#: ../../topics/i18n/translation.txt:640
msgid ""
"Translation hooks are also available within any template block tag that "
"accepts constant strings. In those cases, just use ``_()`` syntax to specify "
"a translation string::"
msgstr ""

# d280497da40546cf9214d1686d11b0f0
#: ../../topics/i18n/translation.txt:646
msgid ""
"In this case, both the tag and the filter will see the already-translated "
"string, so they don't need to be aware of translations."
msgstr ""

# 653a47430b4f4c3ca8d7fbb9f03c4489
#: ../../topics/i18n/translation.txt:650
msgid ""
"In this example, the translation infrastructure will be passed the string ``"
"\"yes,no\"``, not the individual strings ``\"yes\"`` and ``\"no\"``. The "
"translated string will need to contain the comma so that the filter parsing "
"code knows how to split up the arguments. For example, a German translator "
"might translate the string ``\"yes,no\"`` as ``\"ja,nein\"`` (keeping the "
"comma intact)."
msgstr ""

# a8dc9da4176b47b9b88a9a5bb2cb5615
#: ../../topics/i18n/translation.txt:659
msgid ""
"You can also retrieve information about any of the available languages using "
"provided template tags and filters. To get information about a single "
"language, use the ``{% get_language_info %}`` tag::"
msgstr ""

# 10ccf8ea62a541e08303eb996e8a7a5b
#: ../../topics/i18n/translation.txt:666
msgid "You can then access the information::"
msgstr ""

# 78af16c333864d9daf8f3ba364e0beb5
#: ../../topics/i18n/translation.txt:673
msgid ""
"You can also use the ``{% get_language_info_list %}`` template tag to "
"retrieve information for a list of languages (e.g. active languages as "
"specified in :setting:`LANGUAGES`). See :ref:`the section about the "
"set_language redirect view <set_language-redirect-view>` for an example of "
"how to display a language selector using ``{% get_language_info_list %}``."
msgstr ""

# ad2c3f23824c4727b743fa73e67138da
#: ../../topics/i18n/translation.txt:679
msgid ""
"In addition to :setting:`LANGUAGES` style nested tuples, ``{% "
"get_language_info_list %}`` supports simple lists of language codes. If you "
"do this in your view:"
msgstr ""

# 2c8275a54ffd4301b2b409ea6033f032
#: ../../topics/i18n/translation.txt:689
msgid "you can iterate over those languages in the template::"
msgstr ""

# 517e801245a84a599f5f218ae855583f
#: ../../topics/i18n/translation.txt:694
msgid "There are also simple filters available for convenience:"
msgstr ""

# 9f2764323ae1484e8657bdd87de790d7
#: ../../topics/i18n/translation.txt:696
msgid "``{{ LANGUAGE_CODE|language_name }}`` (\"German\")"
msgstr ""

# 5f5c910fe809422094e4917476d94945
#: ../../topics/i18n/translation.txt:697
msgid "``{{ LANGUAGE_CODE|language_name_local }}`` (\"Deutsch\")"
msgstr ""

# 728fd5adc20c4f84aa859eae91784580
#: ../../topics/i18n/translation.txt:698
msgid "``{{ LANGUAGE_CODE|bidi }}`` (False)"
msgstr ""

# 1cca414590f143c1a8aef328bbd73c2a
#: ../../topics/i18n/translation.txt:703
msgid "Internationalization: in JavaScript code"
msgstr ""

# 09c7193f63c74554aab6b2b089867cb7
#: ../../topics/i18n/translation.txt:707
msgid "Adding translations to JavaScript poses some problems:"
msgstr ""

# 8949f94e13094b03907d17eb69fbc20d
#: ../../topics/i18n/translation.txt:709
msgid "JavaScript code doesn't have access to a ``gettext`` implementation."
msgstr ""

# 4e309316d7a349ecb057476c5570c6c1
#: ../../topics/i18n/translation.txt:711
msgid ""
"JavaScript code doesn't have access to ``.po`` or ``.mo`` files; they need "
"to be delivered by the server."
msgstr ""

# fbf6d59626fc49228fcbcea2ea4db3a0
#: ../../topics/i18n/translation.txt:714
msgid ""
"The translation catalogs for JavaScript should be kept as small as possible."
msgstr ""

# 543befef1e6548b3b4aaeb2ac160dfb2
#: ../../topics/i18n/translation.txt:717
msgid ""
"Django provides an integrated solution for these problems: It passes the "
"translations into JavaScript, so you can call ``gettext``, etc., from within "
"JavaScript."
msgstr ""

# 5a0e2121c6ec4e6c83d48ce61908cd05
#: ../../topics/i18n/translation.txt:724
msgid "The ``javascript_catalog`` view"
msgstr ""

# a89326cd1235415abdac0ec364cc4ab8
#: ../../topics/i18n/translation.txt:730
msgid ""
"The main solution to these problems is the :meth:`django.views.i18n."
"javascript_catalog` view, which sends out a JavaScript code library with "
"functions that mimic the ``gettext`` interface, plus an array of translation "
"strings. Those translation strings are taken from applications or Django "
"core, according to what you specify in either the ``info_dict`` or the URL. "
"Paths listed in :setting:`LOCALE_PATHS` are also included."
msgstr ""

# 4c3168d1ca6d48f69c3ea343ecc98ad3
#: ../../topics/i18n/translation.txt:737
msgid "You hook it up like this::"
msgstr ""

# e5b7e83a47a141bf89f11ac0c2b72e4e
#: ../../topics/i18n/translation.txt:747
msgid ""
"Each string in ``packages`` should be in Python dotted-package syntax (the "
"same format as the strings in :setting:`INSTALLED_APPS`) and should refer to "
"a package that contains a ``locale`` directory. If you specify multiple "
"packages, all those catalogs are merged into one catalog. This is useful if "
"you have JavaScript that uses strings from different applications."
msgstr ""

# c5a0454bc1e54a48919926cb33457705
#: ../../topics/i18n/translation.txt:753
msgid ""
"The precedence of translations is such that the packages appearing later in "
"the ``packages`` argument have higher precedence than the ones appearing at "
"the beginning, this is important in the case of clashing translations for "
"the same literal."
msgstr ""

# f844abe71aac47249cdc6b49f28c8574
#: ../../topics/i18n/translation.txt:758
msgid ""
"By default, the view uses the ``djangojs`` gettext domain. This can be "
"changed by altering the ``domain`` argument."
msgstr ""

# d3d6a5b41cf744b4b8476b2844f0d994
#: ../../topics/i18n/translation.txt:761
msgid ""
"You can make the view dynamic by putting the packages into the URL pattern::"
msgstr ""

# bd18f29045b545858118e520c95cfc65
#: ../../topics/i18n/translation.txt:767
msgid ""
"With this, you specify the packages as a list of package names delimited by "
"'+' signs in the URL. This is especially useful if your pages use code from "
"different apps and this changes often and you don't want to pull in one big "
"catalog file. As a security measure, these values can only be either "
"``django.conf`` or any package from the :setting:`INSTALLED_APPS` setting."
msgstr ""

# fc28b8abb0114d659d67fe7d3440b983
#: ../../topics/i18n/translation.txt:773
msgid ""
"The JavaScript translations found in the paths listed in the :setting:"
"`LOCALE_PATHS` setting are also always included. To keep consistency with "
"the translations lookup order algorithm used for Python and templates, the "
"directories listed in :setting:`LOCALE_PATHS` have the highest precedence "
"with the ones appearing first having higher precedence than the ones "
"appearing later."
msgstr ""

# 46e9720f13d44320b462c1448596f96c
#: ../../topics/i18n/translation.txt:785
msgid "Using the JavaScript translation catalog"
msgstr ""

# e457bd5091a44f84bbc7b6a4beebc407
#: ../../topics/i18n/translation.txt:789
msgid ""
"To use the catalog, just pull in the dynamically generated script like this:"
msgstr ""

# d21d9770c95045818841887dc55e2fdb
#: ../../topics/i18n/translation.txt:795
msgid ""
"This uses reverse URL lookup to find the URL of the JavaScript catalog view. "
"When the catalog is loaded, your JavaScript code can use the standard "
"``gettext`` interface to access it::"
msgstr ""

# 2e87095fca444289936fe18bb025fb90
#: ../../topics/i18n/translation.txt:801
msgid "There is also an ``ngettext`` interface::"
msgstr ""

# aa0f8da11fc2442eb018fe0794d84948
#: ../../topics/i18n/translation.txt:807
msgid "and even a string interpolation function::"
msgstr ""

# 50cd5645982242f78caffb011005e015
#: ../../topics/i18n/translation.txt:811
msgid ""
"The interpolation syntax is borrowed from Python, so the ``interpolate`` "
"function supports both positional and named interpolation:"
msgstr ""

# 91d2c54fd1b94c4b9f3eb4bdfa91a218
#: ../../topics/i18n/translation.txt:814
msgid ""
"Positional interpolation: ``obj`` contains a JavaScript Array object whose "
"elements values are then sequentially interpolated in their corresponding "
"``fmt`` placeholders in the same order they appear. For example::"
msgstr ""

# 4e84d51f52bf46e38097800e82aef632
#: ../../topics/i18n/translation.txt:824
msgid ""
"Named interpolation: This mode is selected by passing the optional boolean "
"``named`` parameter as true. ``obj`` contains a JavaScript object or "
"associative array. For example::"
msgstr ""

# a05c71fe485047ecbeb662d352d36d5f
#: ../../topics/i18n/translation.txt:837
msgid ""
"You shouldn't go over the top with string interpolation, though: this is "
"still JavaScript, so the code has to make repeated regular-expression "
"substitutions. This isn't as fast as string interpolation in Python, so keep "
"it to those cases where you really need it (for example, in conjunction with "
"``ngettext`` to produce proper pluralizations)."
msgstr ""

# a70ae48dc52a4fceb547aa08fedc4d05
#: ../../topics/i18n/translation.txt:846
msgid "Internationalization: in URL patterns"
msgstr ""

# 2da3b44f02694b24ad2cbdfaeae88412
#: ../../topics/i18n/translation.txt:852
msgid "Django provides two mechanisms to internationalize URL patterns:"
msgstr ""

# 3d76e044e12948e59ce52ca3f27d6c10
#: ../../topics/i18n/translation.txt:854
msgid ""
"Adding the language prefix to the root of the URL patterns to make it "
"possible for :class:`~django.middleware.locale.LocaleMiddleware` to detect "
"the language to activate from the requested URL."
msgstr ""

# 29e0d22390ae4084882d38375009248f
#: ../../topics/i18n/translation.txt:858
msgid ""
"Making URL patterns themselves translatable via the :func:`django.utils."
"translation.ugettext_lazy()` function."
msgstr ""

# 1f9af20321ac48448333f651e4f7fd6d
#: ../../topics/i18n/translation.txt:863
msgid ""
"Using either one of these features requires that an active language be set "
"for each request; in other words, you need to have :class:`django.middleware."
"locale.LocaleMiddleware` in your :setting:`MIDDLEWARE_CLASSES` setting."
msgstr ""

# f5671b8c76d94e9da04135f74fff7e75
#: ../../topics/i18n/translation.txt:869
msgid "Language prefix in URL patterns"
msgstr ""

# dea28b1894204b358fbe9d015228c4f1
#: ../../topics/i18n/translation.txt:873
msgid ""
"This function can be used in your root URLconf as a replacement for the "
"normal :func:`django.conf.urls.patterns` function. Django will automatically "
"prepend the current active language code to all url patterns defined within :"
"func:`~django.conf.urls.i18n.i18n_patterns`. Example URL patterns::"
msgstr ""

# 74a9a8ec054f463e8d31d4afaf685f0c
#: ../../topics/i18n/translation.txt:897
msgid ""
"After defining these URL patterns, Django will automatically add the "
"language prefix to the URL patterns that were added by the ``i18n_patterns`` "
"function. Example::"
msgstr ""

# 734a0cd288cd48e89fd41f1a3c80319c
#: ../../topics/i18n/translation.txt:916
msgid ""
":func:`~django.conf.urls.i18n.i18n_patterns` is only allowed in your root "
"URLconf. Using it within an included URLconf will throw an :exc:"
"`ImproperlyConfigured` exception."
msgstr ""

# 0d20e2e0d00b44109519b9d09e145d50
#: ../../topics/i18n/translation.txt:922
msgid ""
"Ensure that you don't have non-prefixed URL patterns that might collide with "
"an automatically-added language prefix."
msgstr ""

# 430b30fcd4e348cb911dc2183be8b64c
#: ../../topics/i18n/translation.txt:927
msgid "Translating URL patterns"
msgstr ""

# cdfe3948355a428580631f32fd353a8c
#: ../../topics/i18n/translation.txt:929
msgid ""
"URL patterns can also be marked translatable using the :func:`~django.utils."
"translation.ugettext_lazy` function. Example::"
msgstr ""

# d69745e8459e44ba99187370e9e8ce67
#: ../../topics/i18n/translation.txt:952
msgid ""
"After you've created the translations, the :func:`~django.core.urlresolvers."
"reverse` function will return the URL in the active language. Example::"
msgstr ""

# a44d63a9937647fa85f54b2d7fc6263e
#: ../../topics/i18n/translation.txt:969
msgid ""
"In most cases, it's best to use translated URLs only within a language-code-"
"prefixed block of patterns (using :func:`~django.conf.urls.i18n."
"i18n_patterns`), to avoid the possibility that a carelessly translated URL "
"causes a collision with a non-translated URL pattern."
msgstr ""

# 811701693551460b9165e63303a282f9
#: ../../topics/i18n/translation.txt:980
msgid "Reversing in templates"
msgstr ""

# a0f3bf712359466cb4817bbf0380451c
#: ../../topics/i18n/translation.txt:982
msgid ""
"If localized URLs get reversed in templates they always use the current "
"language. To link to a URL in another language use the ``language`` template "
"tag. It enables the given language in the enclosed template section:"
msgstr ""

# 14cfdcc3e2864e95ad465f8698981d61
#: ../../topics/i18n/translation.txt:999
msgid ""
"The :ttag:`language` tag expects the language code as the only argument."
msgstr ""

# 9bf8b5cd84764929b75958a516aa95f4
#: ../../topics/i18n/translation.txt:1004
msgid "Localization: how to create language files"
msgstr ""

# 4e7dbbf6d0934a1d914c0166dd613e48
#: ../../topics/i18n/translation.txt:1006
msgid ""
"Once the string literals of an application have been tagged for later "
"translation, the translation themselves need to be written (or obtained). "
"Here's how that works."
msgstr ""

# d04e541ac3f04023b861df5cdee1e2d5
#: ../../topics/i18n/translation.txt:1014
msgid ""
"Django does not support localizing your application into a locale for which "
"Django itself has not been translated. In this case, it will ignore your "
"translation files. If you were to try this and Django supported it, you "
"would inevitably see a mixture of translated strings (from your application) "
"and English strings (from Django itself). If you want to support a locale "
"for your application that is not already part of Django, you'll need to make "
"at least a minimal translation of the Django core."
msgstr ""

# 1cf82362047d497fbe0c59e76ab4a51b
#: ../../topics/i18n/translation.txt:1022
msgid ""
"A good starting point is to copy the Django English ``.po`` file and to "
"translate at least some :term:`translation strings <translation string>`."
msgstr ""

# 4264395fa60943c893d544651ee20c95
#: ../../topics/i18n/translation.txt:1026
msgid "Message files"
msgstr ""

# 247eb8422fb34d8db07fb42560b1baf4
#: ../../topics/i18n/translation.txt:1028
msgid ""
"The first step is to create a :term:`message file` for a new language. A "
"message file is a plain-text file, representing a single language, that "
"contains all available translation strings and how they should be "
"represented in the given language. Message files have a ``.po`` file "
"extension."
msgstr ""

# deba409043614e289c1518fc0f578c5d
#: ../../topics/i18n/translation.txt:1033
msgid ""
"Django comes with a tool, :djadmin:`django-admin.py makemessages "
"<makemessages>`, that automates the creation and upkeep of these files."
msgstr ""

# bff9f34d975e4d50b58312a115514160
#: ../../topics/i18n/translation.txt:1038
msgid ""
"The ``makemessages`` command (and ``compilemessages`` discussed later) use "
"commands from the GNU gettext toolset: ``xgettext``, ``msgfmt``, "
"``msgmerge`` and ``msguniq``."
msgstr ""

# 4234dfacdb764c79b37b1f60885a7786
#: ../../topics/i18n/translation.txt:1044
msgid "The minimum version of the ``gettext`` utilities supported is 0.15."
msgstr ""

# 43820ae3f7704f3aa88a13000f3d646b
#: ../../topics/i18n/translation.txt:1046
msgid "To create or update a message file, run this command::"
msgstr ""

# b6434ae306154a41961eb0b99c037377
#: ../../topics/i18n/translation.txt:1050
msgid ""
"...where ``de`` is the language code for the message file you want to "
"create. The language code, in this case, is in :term:`locale format<locale "
"name>`. For example, it's ``pt_BR`` for Brazilian Portuguese and ``de_AT`` "
"for Austrian German."
msgstr ""

# 76e6d593c7974c3da9936c14cc555003
#: ../../topics/i18n/translation.txt:1055
msgid "The script should be run from one of two places:"
msgstr ""

# 5871fc56a9c74639ab6efab1f39a522d
#: ../../topics/i18n/translation.txt:1057
msgid "The root directory of your Django project."
msgstr ""

# 990d2d0fbaac409cae43ab97fa876b0c
#: ../../topics/i18n/translation.txt:1058
msgid "The root directory of your Django app."
msgstr ""

# 61937763151647299fef4e167c458fea
#: ../../topics/i18n/translation.txt:1060
msgid ""
"The script runs over your project source tree or your application source "
"tree and pulls out all strings marked for translation. It creates (or "
"updates) a message file in the directory ``locale/LANG/LC_MESSAGES``. In the "
"``de`` example, the file will be ``locale/de/LC_MESSAGES/django.po``."
msgstr ""

# 23be4c054a114c1d9d95d5248f75edd5
#: ../../topics/i18n/translation.txt:1065
msgid ""
"By default :djadmin:`django-admin.py makemessages <makemessages>` examines "
"every file that has the ``.html`` or ``.txt`` file extension. In case you "
"want to override that default, use the ``--extension`` or ``-e`` option to "
"specify the file extensions to examine::"
msgstr ""

# 10931dc5d8634c32bd64ea80777d2ef6
#: ../../topics/i18n/translation.txt:1072
msgid ""
"Separate multiple extensions with commas and/or use ``-e`` or ``--"
"extension`` multiple times::"
msgstr ""

# e598610f03e9463693318c1db5fee52f
#: ../../topics/i18n/translation.txt:1079
msgid ""
"When :ref:`creating message files from JavaScript source code <creating-"
"message-files-from-js-code>` you need to use the special 'djangojs' domain, "
"**not** ``-e js``."
msgstr ""

# b69ec88f071c41d6ab31068400e318c7
#: ../../topics/i18n/translation.txt:1085
msgid ""
"If you don't have the ``gettext`` utilities installed, :djadmin:"
"`makemessages` will create empty files. If that's the case, either install "
"the ``gettext`` utilities or just copy the English message file (``locale/en/"
"LC_MESSAGES/django.po``) if available and use it as a starting point; it's "
"just an empty translation file."
msgstr ""

# 79bb701f37784183b3ee4edff99f19bd
#: ../../topics/i18n/translation.txt:1093
msgid ""
"If you're using Windows and need to install the GNU gettext utilities so :"
"djadmin:`makemessages` works, see :ref:`gettext_on_windows` for more "
"information."
msgstr ""

# 12e41e59be1b42ce9181b0a7274af840
#: ../../topics/i18n/translation.txt:1097
msgid ""
"The format of ``.po`` files is straightforward. Each ``.po`` file contains a "
"small bit of metadata, such as the translation maintainer's contact "
"information, but the bulk of the file is a list of **messages** -- simple "
"mappings between translation strings and the actual translated text for the "
"particular language."
msgstr ""

# ba3866a223c34d6eae964c28de8ff13d
#: ../../topics/i18n/translation.txt:1103
msgid ""
"For example, if your Django app contained a translation string for the text "
"``\"Welcome to my site.\"``, like so::"
msgstr ""

# c0471e3cc39145b682b2e754744ca95f
#: ../../topics/i18n/translation.txt:1108
msgid ""
"...then :djadmin:`django-admin.py makemessages <makemessages>` will have "
"created a ``.po`` file containing the following snippet -- a message::"
msgstr ""

# d850de61eb6048c8bae05a594d661261
#: ../../topics/i18n/translation.txt:1115
msgid "A quick explanation:"
msgstr ""

# 2a64ec1640704c8893a90e37892a68e3
#: ../../topics/i18n/translation.txt:1117
msgid ""
"``msgid`` is the translation string, which appears in the source. Don't "
"change it."
msgstr ""

# a2946d1d825c4f18aed0e87014c2f6b9
#: ../../topics/i18n/translation.txt:1119
msgid ""
"``msgstr`` is where you put the language-specific translation. It starts out "
"empty, so it's your responsibility to change it. Make sure you keep the "
"quotes around your translation."
msgstr ""

# ef0b353ce3ec48108a48bbaa847a57e8
#: ../../topics/i18n/translation.txt:1122
msgid ""
"As a convenience, each message includes, in the form of a comment line "
"prefixed with ``#`` and located above the ``msgid`` line, the filename and "
"line number from which the translation string was gleaned."
msgstr ""

# f391e5c3e2eb4529b4e7619067330b8a
#: ../../topics/i18n/translation.txt:1126
msgid ""
"Long messages are a special case. There, the first string directly after the "
"``msgstr`` (or ``msgid``) is an empty string. Then the content itself will "
"be written over the next few lines as one string per line. Those strings are "
"directly concatenated. Don't forget trailing spaces within the strings; "
"otherwise, they'll be tacked together without whitespace!"
msgstr ""

# 6a69b92cfc2846268c76d5a29a15db0b
#: ../../topics/i18n/translation.txt:1134
msgid ""
"When creating a PO file with your favorite text editor, first edit the "
"charset line (search for ``\"CHARSET\"``) and set it to the charset you'll "
"be using to edit the content. Due to the way the ``gettext`` tools work "
"internally and because we want to allow non-ASCII source strings in Django's "
"core and your applications, you **must** use UTF-8 as the encoding for your "
"PO file. This means that everybody will be using the same encoding, which is "
"important when Django processes the PO files."
msgstr ""

# 0675fa05714f4408a4c51cfcc97f3a75
#: ../../topics/i18n/translation.txt:1142
msgid ""
"To reexamine all source code and templates for new translation strings and "
"update all message files for **all** languages, run this::"
msgstr ""

# 5d4b03792583437cb6875de026f8a55d
#: ../../topics/i18n/translation.txt:1148
msgid "Compiling message files"
msgstr ""

# cf250b38c9c94b2abc3716a75d96910a
#: ../../topics/i18n/translation.txt:1150
msgid ""
"After you create your message file -- and each time you make changes to it "
"-- you'll need to compile it into a more efficient form, for use by "
"``gettext``. Do this with the :djadmin:`django-admin.py compilemessages "
"<compilemessages>` utility."
msgstr ""

# 252b62004b7242fe994c48bb415bd28e
#: ../../topics/i18n/translation.txt:1155
msgid ""
"This tool runs over all available ``.po`` files and creates ``.mo`` files, "
"which are binary files optimized for use by ``gettext``. In the same "
"directory from which you ran :djadmin:`django-admin.py makemessages "
"<makemessages>`, run :djadmin:`django-admin.py compilemessages "
"<compilemessages>` like this::"
msgstr ""

# 1b3ff290bcf94d468bf20cb629ed1ed7
#: ../../topics/i18n/translation.txt:1161
msgid "That's it. Your translations are ready for use."
msgstr ""

# 30340b68dbe04322959fb2f2d3654c00
#: ../../topics/i18n/translation.txt:1165
msgid ""
"If you're using Windows and need to install the GNU gettext utilities so :"
"djadmin:`django-admin.py compilemessages <compilemessages>` works see :ref:"
"`gettext_on_windows` for more information."
msgstr ""

# fcf04fb975ac425d90f1b51dfdec139e
#: ../../topics/i18n/translation.txt:1171
msgid ""
"Django only supports ``.po`` files encoded in UTF-8 and without any BOM "
"(Byte Order Mark) so if your text editor adds such marks to the beginning of "
"files by default then you will need to reconfigure it."
msgstr ""

# 6657b7b219474c2481f219628be9cace
#: ../../topics/i18n/translation.txt:1178
msgid "Creating message files from JavaScript source code"
msgstr ""

# 4dcf623106764f1688cfc8e1f6c758a7
#: ../../topics/i18n/translation.txt:1180
msgid ""
"You create and update the message files the same way as the other Django "
"message files -- with the :djadmin:`django-admin.py makemessages "
"<makemessages>` tool. The only difference is you need to explicitly specify "
"what in gettext parlance is known as a domain in this case the ``djangojs`` "
"domain, by providing a ``-d djangojs`` parameter, like this::"
msgstr ""

# 03166c6b15784b30b2618432b5492e2f
#: ../../topics/i18n/translation.txt:1188
msgid ""
"This would create or update the message file for JavaScript for German. "
"After updating message files, just run :djadmin:`django-admin.py "
"compilemessages <compilemessages>` the same way as you do with normal Django "
"message files."
msgstr ""

# b19988d33fb64680936fc6e1c3294955
#: ../../topics/i18n/translation.txt:1195
msgid "``gettext`` on Windows"
msgstr ""

# d7279a821271404786437cc89f1f105c
#: ../../topics/i18n/translation.txt:1197
msgid ""
"This is only needed for people who either want to extract message IDs or "
"compile message files (``.po``). Translation work itself just involves "
"editing existing files of this type, but if you want to create your own "
"message files, or want to test or compile a changed message file, you will "
"need the ``gettext`` utilities:"
msgstr ""

# 06eb4670b21d48538df6c979680628aa
#: ../../topics/i18n/translation.txt:1202
msgid ""
"Download the following zip files from the GNOME servers http://ftp.gnome.org/"
"pub/gnome/binaries/win32/dependencies/ or from one of its mirrors_"
msgstr ""

# 580ed5a8d8be4cca97c7bbd4a6efc24c
#: ../../topics/i18n/translation.txt:1206
msgid "``gettext-runtime-X.zip``"
msgstr ""

# ef87e3c017e04b528bcfbde440c2bec1
#: ../../topics/i18n/translation.txt:1207
msgid "``gettext-tools-X.zip``"
msgstr ""

# f1f5399170a2416f8b82b6360ee16852
#: ../../topics/i18n/translation.txt:1209
msgid "``X`` is the version number, we are requiring ``0.15`` or higher."
msgstr ""

# ee854e07231e432c985068da20c80f78
#: ../../topics/i18n/translation.txt:1211
msgid ""
"Extract the contents of the ``bin\\`` directories in both files to the same "
"folder on your system (i.e. ``C:\\Program Files\\gettext-utils``)"
msgstr ""

# 45fc3e81d0034012b109f0ed60aab477
#: ../../topics/i18n/translation.txt:1214
msgid "Update the system PATH:"
msgstr ""

# 21deee876a9e4dda9271a2954d99c469
#: ../../topics/i18n/translation.txt:1216
msgid "``Control Panel > System > Advanced > Environment Variables``."
msgstr ""

# c536a536b6584212b791c641179ab144
#: ../../topics/i18n/translation.txt:1217
msgid "In the ``System variables`` list, click ``Path``, click ``Edit``."
msgstr ""

# b8681fd3998744219c05d21252516db0
#: ../../topics/i18n/translation.txt:1218
msgid ""
"Add ``;C:\\Program Files\\gettext-utils\\bin`` at the end of the ``Variable "
"value`` field."
msgstr ""

# 69fcda91af69464e9999e7ee7b4ccf7f
#: ../../topics/i18n/translation.txt:1223
msgid ""
"You may also use ``gettext`` binaries you have obtained elsewhere, so long "
"as the ``xgettext --version`` command works properly. Do not attempt to use "
"Django translation utilities with a ``gettext`` package if the command "
"``xgettext --version`` entered at a Windows command prompt causes a popup "
"window saying \"xgettext.exe has generated errors and will be closed by "
"Windows\"."
msgstr ""

# 297965007e15403aa8216bec13ab4321
#: ../../topics/i18n/translation.txt:1231
msgid "Miscellaneous"
msgstr ""

# e545865ddb464a98b5d4c74647d9f3ac
#: ../../topics/i18n/translation.txt:1236
msgid "The ``set_language`` redirect view"
msgstr ""

# dc45038f03294c0495940cf64bef5b6b
#: ../../topics/i18n/translation.txt:1242
msgid ""
"As a convenience, Django comes with a view, :func:`django.views.i18n."
"set_language`, that sets a user's language preference and redirects to a "
"given URL or, by default, back to the previous page."
msgstr ""

# 980c45a5a44946feb0c7e4b5e9f0fe29
#: ../../topics/i18n/translation.txt:1246
msgid "Activate this view by adding the following line to your URLconf::"
msgstr ""

# 324c17606b4943128f0ac7bdeba7df97
#: ../../topics/i18n/translation.txt:1250
msgid ""
"(Note that this example makes the view available at ``/i18n/setlang/``.)"
msgstr ""

# 33aa29a0aaae44cf8cdb53e69c17bf6a
#: ../../topics/i18n/translation.txt:1252
msgid ""
"The view expects to be called via the ``POST`` method, with a ``language`` "
"parameter set in request. If session support is enabled, the view saves the "
"language choice in the user's session. Otherwise, it saves the language "
"choice in a cookie that is by default named ``django_language``. (The name "
"can be changed through the :setting:`LANGUAGE_COOKIE_NAME` setting.)"
msgstr ""

# 607b567226eb441192a9826c3a494ff7
#: ../../topics/i18n/translation.txt:1258
msgid ""
"After setting the language choice, Django redirects the user, following this "
"algorithm:"
msgstr ""

# 16f04369a7da4d86b02d2866cb39ae46
#: ../../topics/i18n/translation.txt:1261
msgid "Django looks for a ``next`` parameter in the ``POST`` data."
msgstr ""

# 9bd9797100ac4bf796f104d478f7276a
#: ../../topics/i18n/translation.txt:1262
msgid ""
"If that doesn't exist, or is empty, Django tries the URL in the ``Referrer`` "
"header."
msgstr ""

# f9ed8bbc8daa46a9a43d0dd8c0a9913e
#: ../../topics/i18n/translation.txt:1264
msgid ""
"If that's empty -- say, if a user's browser suppresses that header -- then "
"the user will be redirected to ``/`` (the site root) as a fallback."
msgstr ""

# 0b5bba594e7e45b99bc3e0b5a77c9be3
#: ../../topics/i18n/translation.txt:1267
msgid "Here's example HTML template code:"
msgstr ""

# 0ef9dbfd802c49c48786e17e34d8ecbe
#: ../../topics/i18n/translation.txt:1283
msgid ""
"In this example, Django looks up the URL of the page to which the user will "
"be redirected in the ``redirect_to`` context variable."
msgstr ""

# d9279ce9c551473dabff07362a988d91
#: ../../topics/i18n/translation.txt:1287
msgid "Using translations outside views and templates"
msgstr ""

# 49cbfce958e74e1d8754894cb9b8bc56
#: ../../topics/i18n/translation.txt:1289
msgid ""
"While Django provides a rich set of i18n tools for use in views and "
"templates, it does not restrict the usage to Django-specific code. The "
"Django translation mechanisms can be used to translate arbitrary texts to "
"any language that is supported by Django (as long as an appropriate "
"translation catalog exists, of course). You can load a translation catalog, "
"activate it and translate text to language of your choice, but remember to "
"switch back to original language, as activating a translation catalog is "
"done on per-thread basis and such change will affect code running in the "
"same thread."
msgstr ""

# 8c28138fcef049bd90cf3c301da988ab
#: ../../topics/i18n/translation.txt:1310
msgid ""
"Calling this function with the value 'de' will give you ``\"Willkommen\"``, "
"regardless of :setting:`LANGUAGE_CODE` and language set by middleware."
msgstr ""

# f0d547cebbf543c68077ea0808af4567
#: ../../topics/i18n/translation.txt:1313
msgid ""
"Functions of particular interest are ``django.utils.translation.get_language"
"()`` which returns the language used in the current thread, ``django.utils."
"translation.activate()`` which activates a translation catalog for the "
"current thread, and ``django.utils.translation.check_for_language()`` which "
"checks if the given language is supported by Django."
msgstr ""

# 024b1e2e5586435888c517893160cbe2
#: ../../topics/i18n/translation.txt:1320
msgid "Implementation notes"
msgstr ""

# 3874fdb4ca2447b186426f5af9144da5
#: ../../topics/i18n/translation.txt:1325
msgid "Specialties of Django translation"
msgstr ""

# 1f436660509d48a79a3c1b3a5119c872
#: ../../topics/i18n/translation.txt:1327
msgid ""
"Django's translation machinery uses the standard ``gettext`` module that "
"comes with Python. If you know ``gettext``, you might note these specialties "
"in the way Django does translation:"
msgstr ""

# 4e5f92d217674a0ead77cf0260895a0f
#: ../../topics/i18n/translation.txt:1331
msgid ""
"The string domain is ``django`` or ``djangojs``. This string domain is used "
"to differentiate between different programs that store their data in a "
"common message-file library (usually ``/usr/share/locale/``). The ``django`` "
"domain is used for python and template translation strings and is loaded "
"into the global translation catalogs. The ``djangojs`` domain is only used "
"for JavaScript translation catalogs to make sure that those are as small as "
"possible."
msgstr ""

# 0db0bb9a95ff408f91f310474e3aebb2
#: ../../topics/i18n/translation.txt:1338
msgid ""
"Django doesn't use ``xgettext`` alone. It uses Python wrappers around "
"``xgettext`` and ``msgfmt``. This is mostly for convenience."
msgstr ""

# c88e03c82ede4d2584316ada8b5a6251
#: ../../topics/i18n/translation.txt:1344
msgid "How Django discovers language preference"
msgstr ""

# 67e4ea182f1647189f32181ff21ff8e4
#: ../../topics/i18n/translation.txt:1346
msgid ""
"Once you've prepared your translations -- or, if you just want to use the "
"translations that come with Django -- you'll just need to activate "
"translation for your app."
msgstr ""

# b583269edde14145887527ac1c99abc8
#: ../../topics/i18n/translation.txt:1350
msgid ""
"Behind the scenes, Django has a very flexible model of deciding which "
"language should be used -- installation-wide, for a particular user, or both."
msgstr ""

# 73e863e2dcca4aea8b86ab850c16abae
#: ../../topics/i18n/translation.txt:1353
msgid ""
"To set an installation-wide language preference, set :setting:"
"`LANGUAGE_CODE`. Django uses this language as the default translation -- the "
"final attempt if no other translator finds a translation."
msgstr ""

# d9d61b2452af4903974f880a6e244595
#: ../../topics/i18n/translation.txt:1357
msgid ""
"If all you want to do is run Django with your native language, and a "
"language file is available for it, all you need to do is set :setting:"
"`LANGUAGE_CODE`."
msgstr ""

# 319486e44f3b427089fcd32492d11f42
#: ../../topics/i18n/translation.txt:1360
msgid ""
"If you want to let each individual user specify which language he or she "
"prefers, use ``LocaleMiddleware``. ``LocaleMiddleware`` enables language "
"selection based on data from the request. It customizes content for each "
"user."
msgstr ""

# ddf730044f56408092409031a726622b
#: ../../topics/i18n/translation.txt:1364
msgid ""
"To use ``LocaleMiddleware``, add ``'django.middleware.locale."
"LocaleMiddleware'`` to your :setting:`MIDDLEWARE_CLASSES` setting. Because "
"middleware order matters, you should follow these guidelines:"
msgstr ""

# 9d31900ce579463caf66b7ffd663ee55
#: ../../topics/i18n/translation.txt:1368
msgid "Make sure it's one of the first middlewares installed."
msgstr ""

# 9acd74e6a8bc49c8b3a90357c11d192d
#: ../../topics/i18n/translation.txt:1369
msgid ""
"It should come after ``SessionMiddleware``, because ``LocaleMiddleware`` "
"makes use of session data. And it should come before ``CommonMiddleware`` "
"because ``CommonMiddleware`` needs an activated language in order to resolve "
"the requested URL."
msgstr ""

# b38f54bfb7d94b08a8f55264e250e6c0
#: ../../topics/i18n/translation.txt:1373
msgid "If you use ``CacheMiddleware``, put ``LocaleMiddleware`` after it."
msgstr ""

# 62dc49726a984f029970759b7139ad84
#: ../../topics/i18n/translation.txt:1375
msgid "For example, your :setting:`MIDDLEWARE_CLASSES` might look like this::"
msgstr ""

# 162631798c3a452a8c9365831cc6e1ab
#: ../../topics/i18n/translation.txt:1383
msgid ""
"(For more on middleware, see the :doc:`middleware documentation </topics/"
"http/middleware>`.)"
msgstr ""

# 17072e09eccc46efb9550a9eeb85fb79
#: ../../topics/i18n/translation.txt:1386
msgid ""
"``LocaleMiddleware`` tries to determine the user's language preference by "
"following this algorithm:"
msgstr ""

# 1c88e1761c6c45d299cd121cdf995774
#: ../../topics/i18n/translation.txt:1391
msgid ""
"First, it looks for the language prefix in the requested URL.  This is only "
"performed when you are using the ``i18n_patterns`` function in your root "
"URLconf. See :ref:`url-internationalization` for more information about the "
"language prefix and how to internationalize URL patterns."
msgstr ""

# 85fc35fe28344399b3d2827b215baa64
#: ../../topics/i18n/translation.txt:1396
msgid ""
"Failing that, it looks for a ``django_language`` key in the current user's "
"session."
msgstr ""

# 96ea4cc9540e45a091f9d541229b8a04
#: ../../topics/i18n/translation.txt:1399
msgid "Failing that, it looks for a cookie."
msgstr ""

# dcbe1080408744ef9d7f6f844f7e10e3
#: ../../topics/i18n/translation.txt:1401
msgid ""
"The name of the cookie used is set by the :setting:`LANGUAGE_COOKIE_NAME` "
"setting. (The default name is ``django_language``.)"
msgstr ""

# 42081e61d5ff43538611a29103984993
#: ../../topics/i18n/translation.txt:1404
msgid ""
"Failing that, it looks at the ``Accept-Language`` HTTP header. This header "
"is sent by your browser and tells the server which language(s) you prefer, "
"in order by priority. Django tries each language in the header until it "
"finds one with available translations."
msgstr ""

# 1f5810f04e9d4020ad66563f00a44420
#: ../../topics/i18n/translation.txt:1409
msgid "Failing that, it uses the global :setting:`LANGUAGE_CODE` setting."
msgstr ""

# 27833e3d7aa04a0ba2bb8b345920637f
#: ../../topics/i18n/translation.txt:1415
msgid ""
"In each of these places, the language preference is expected to be in the "
"standard :term:`language format<language code>`, as a string. For example, "
"Brazilian Portuguese is ``pt-br``."
msgstr ""

# 318b799201fb464bae41a8150ec23245
#: ../../topics/i18n/translation.txt:1419
msgid ""
"If a base language is available but the sublanguage specified is not, Django "
"uses the base language. For example, if a user specifies ``de-at`` (Austrian "
"German) but Django only has ``de`` available, Django uses ``de``."
msgstr ""

# c03c965b2bf040b4aaa71b5dcb16f3c8
#: ../../topics/i18n/translation.txt:1424
msgid ""
"Only languages listed in the :setting:`LANGUAGES` setting can be selected. "
"If you want to restrict the language selection to a subset of provided "
"languages (because your application doesn't provide all those languages), "
"set :setting:`LANGUAGES` to a list of languages. For example::"
msgstr ""

# 8ee72a16dc6c480482f2a4f55d5afa51
#: ../../topics/i18n/translation.txt:1434
msgid ""
"This example restricts languages that are available for automatic selection "
"to German and English (and any sublanguage, like de-ch or en-us)."
msgstr ""

# c94687291d50444a9c2511cb36efdc61
#: ../../topics/i18n/translation.txt:1438
msgid ""
"If you define a custom :setting:`LANGUAGES` setting, as explained in the "
"previous bullet, it's OK to mark the languages as translation strings -- but "
"use a \"dummy\" ``ugettext()`` function, not the one in ``django.utils."
"translation``. You should *never* import ``django.utils.translation`` from "
"within your settings file, because that module in itself depends on the "
"settings, and that would cause a circular import."
msgstr ""

# eb29facbbdbd46fd9f545aca16200651
#: ../../topics/i18n/translation.txt:1446
msgid ""
"The solution is to use a \"dummy\" ``ugettext()`` function. Here's a sample "
"settings file::"
msgstr ""

# 99533410cb8e4a7f87dca5bc068bee13
#: ../../topics/i18n/translation.txt:1456
msgid ""
"With this arrangement, :djadmin:`django-admin.py makemessages "
"<makemessages>` will still find and mark these strings for translation, but "
"the translation won't happen at runtime -- so you'll have to remember to "
"wrap the languages in the *real* ``ugettext()`` in any code that uses :"
"setting:`LANGUAGES` at runtime."
msgstr ""

# ea36c0d746674a519108ba676c6444e8
#: ../../topics/i18n/translation.txt:1462
msgid ""
"The ``LocaleMiddleware`` can only select languages for which there is a "
"Django-provided base translation. If you want to provide translations for "
"your application that aren't already in the set of translations in Django's "
"source tree, you'll want to provide at least a basic one as described in "
"the :ref:`Locale restrictions<locale-restrictions>` note."
msgstr ""

# 8165174da260447daecd690dd4c3656c
#: ../../topics/i18n/translation.txt:1469
msgid ""
"Once ``LocaleMiddleware`` determines the user's preference, it makes this "
"preference available as ``request.LANGUAGE_CODE`` for each :class:`~django."
"http.HttpRequest`. Feel free to read this value in your view code. Here's a "
"simple example::"
msgstr ""

# 279e0288cf7748a18159eda730557e44
#: ../../topics/i18n/translation.txt:1480
msgid ""
"Note that, with static (middleware-less) translation, the language is in "
"``settings.LANGUAGE_CODE``, while with dynamic (middleware) translation, "
"it's in ``request.LANGUAGE_CODE``."
msgstr ""

# 0bd2169a145e4e80bee8eca5569f2e53
#: ../../topics/i18n/translation.txt:1492
msgid "How Django discovers translations"
msgstr ""

# 6c9556145d37418e89e7e287230180ce
#: ../../topics/i18n/translation.txt:1494
msgid ""
"At runtime, Django builds an in-memory unified catalog of literals-"
"translations. To achieve this it looks for translations by following this "
"algorithm regarding the order in which it examines the different file paths "
"to load the compiled :term:`message files <message file>` (``.mo``) and the "
"precedence of multiple translations for the same literal:"
msgstr ""

# 65b0955b150c4524bbeaf5bc65062df2
#: ../../topics/i18n/translation.txt:1500
msgid ""
"The directories listed in :setting:`LOCALE_PATHS` have the highest "
"precedence, with the ones appearing first having higher precedence than the "
"ones appearing later."
msgstr ""

# 0a259076d607432994eeefc30fe98bfe
#: ../../topics/i18n/translation.txt:1503
msgid ""
"Then, it looks for and uses if it exists a ``locale`` directory in each of "
"the installed apps listed in :setting:`INSTALLED_APPS`.  The ones appearing "
"first have higher precedence than the ones appearing later."
msgstr ""

# 9b65c56a4a634acd81d0d32aa16e14d1
#: ../../topics/i18n/translation.txt:1506
msgid ""
"Then, it looks for a ``locale`` directory in the project directory, or more "
"accurately, in the directory containing your settings file."
msgstr ""

# 32fd27023c4844f7bf8653d430c233d5
#: ../../topics/i18n/translation.txt:1508
msgid ""
"Finally, the Django-provided base translation in ``django/conf/locale`` is "
"used as a fallback."
msgstr ""

# 2b7a97a130544a2dbf409b7129d35fe6
#: ../../topics/i18n/translation.txt:1520
msgid ""
"The translations for literals included in JavaScript assets are looked up "
"following a similar but not identical algorithm. See the :ref:"
"`javascript_catalog view documentation <javascript_catalog-view>` for more "
"details."
msgstr ""

# efead47384bc407d9e535762c0b0a0a0
#: ../../topics/i18n/translation.txt:1525
msgid ""
"In all cases the name of the directory containing the translation is "
"expected to be named using :term:`locale name` notation. E.g. ``de``, "
"``pt_BR``, ``es_AR``, etc."
msgstr ""

# 092e55c43e014fe189804f0499688769
#: ../../topics/i18n/translation.txt:1529
msgid ""
"This way, you can write applications that include their own translations, "
"and you can override base translations in your project path. Or, you can "
"just build a big project out of several apps and put all translations into "
"one big common message file specific to the project you are composing. The "
"choice is yours."
msgstr ""

# a97b2e7069c745779224a527c74a4698
#: ../../topics/i18n/translation.txt:1536
msgid ""
"If you're using manually configured settings, as described in :ref:`settings-"
"without-django-settings-module`, the ``locale`` directory in the project "
"directory will not be examined, since Django loses the ability to work out "
"the location of the project directory. (Django normally uses the location of "
"the settings file to determine this, and a settings file doesn't exist if "
"you're manually configuring your settings.)"
msgstr ""

# 993bc90304504320a3f36e406b79c27c
#: ../../topics/i18n/translation.txt:1543
msgid "All message file repositories are structured the same way. They are:"
msgstr ""

# bd7ac37415cf4c438d02f4c67fdb9d34
#: ../../topics/i18n/translation.txt:1545
msgid ""
"All paths listed in :setting:`LOCALE_PATHS` in your settings file are "
"searched for ``<language>/LC_MESSAGES/django.(po|mo)``"
msgstr ""

# 7fd378f7010d449a9150bb0c6e85b8e8
#: ../../topics/i18n/translation.txt:1547
msgid ""
"``$PROJECTPATH/locale/<language>/LC_MESSAGES/django.(po|mo)`` -- deprecated, "
"see above."
msgstr ""

# b6780456fe9a4fdb9960c166ab851671
#: ../../topics/i18n/translation.txt:1549
msgid "``$APPPATH/locale/<language>/LC_MESSAGES/django.(po|mo)``"
msgstr ""

# ae6508b8115743cfad5ec8435db54d1b
#: ../../topics/i18n/translation.txt:1550
msgid ""
"``$PYTHONPATH/django/conf/locale/<language>/LC_MESSAGES/django.(po|mo)``"
msgstr ""

# 84cfbb01a0ad416fb8471f92006b7021
#: ../../topics/i18n/translation.txt:1552
msgid ""
"To create message files, you use the :djadmin:`django-admin.py makemessages "
"<makemessages>` tool. You only need to be in the same directory where the "
"``locale/`` directory is located. And you use :djadmin:`django-admin.py "
"compilemessages <compilemessages>` to produce the binary ``.mo`` files that "
"are used by ``gettext``."
msgstr ""

# 22b13ebf40904381a365dc3d679bea71
#: ../../topics/i18n/translation.txt:1557
msgid ""
"You can also run :djadmin:`django-admin.py compilemessages --settings=path."
"to.settings <compilemessages>` to make the compiler process all the "
"directories in your :setting:`LOCALE_PATHS` setting."
msgstr ""

# 39d984d457094d2c83cf8d8528dc1e86
#: ../../topics/i18n/translation.txt:1561
msgid ""
"Finally, you should give some thought to the structure of your translation "
"files. If your applications need to be delivered to other users and will be "
"used in other projects, you might want to use app-specific translations. But "
"using app-specific translations and project-specific translations could "
"produce weird problems with :djadmin:`makemessages`: it will traverse all "
"directories below the current path and so might put message IDs into a "
"unified, common message file for the current project that are already in "
"application message files."
msgstr ""

# edd6090a1bf24786a56c647ff03fb1c8
#: ../../topics/i18n/translation.txt:1569
msgid ""
"The easiest way out is to store applications that are not part of the "
"project (and so carry their own translations) outside the project tree. That "
"way, :djadmin:`django-admin.py makemessages <makemessages>`, when ran on a "
"project level will only extract strings that are connected to your explicit "
"project and not strings that are distributed independently."
msgstr ""

# 3b6d963042f2457a82c70c69a679b7a4
#: ../../topics/index.txt:2
msgid "Using Django"
msgstr ""

# 6c87376bbc8443b798a4d03a2a0921c8
#: ../../topics/index.txt:4
msgid "Introductions to all the key parts of Django you'll need to know:"
msgstr ""

# e2787788ce1742d9865e238d424647e4
#: ../../topics/index.txt:32
msgid "Deprecated features"
msgstr ""

# 804fee69b9954d8b8f18f5624bb3d532
#: ../../topics/install.txt:3
msgid "How to install Django"
msgstr ""

# 615edac9b57e4b01bfd74db92b555c1c
#: ../../topics/install.txt:5
msgid "This document will get you up and running with Django."
msgstr ""

# c5b6c3feb4cb4bb48075b57df7373797
#: ../../topics/install.txt:8
msgid "Install Python"
msgstr ""

# 337e3e4ed29543028ed4f0e0e8c72cc6
#: ../../topics/install.txt:10
msgid "Being a Python Web framework, Django requires Python."
msgstr ""

# 02c4e93467744628ad8a83d92ea68400
#: ../../topics/install.txt:12
msgid ""
"It works with any Python version from 2.5 to 2.7 (due to backwards "
"incompatibilities in Python 3.0, Django does not currently work with Python "
"3.0; see :doc:`the Django FAQ </faq/install>` for more information on "
"supported Python versions and the 3.0 transition)."
msgstr ""

# 9433f287d561475982d69abb6683b558
#: ../../topics/install.txt:17
msgid ""
"Get Python at http://www.python.org. If you're running Linux or Mac OS X, "
"you probably already have it installed."
msgstr ""

# dd65a0c4196c4bf2a7184421b71ba96f
#: ../../topics/install.txt:22
msgid ""
"If you use Jython_ (a Python implementation for the Java platform), you'll "
"need to follow a few additional steps. See :doc:`/howto/jython` for details."
msgstr ""

# de3fc2e8cb714fbea0c85a90ea2f39d1
#: ../../topics/install.txt:29
msgid ""
"On Windows, you might need to adjust your ``PATH`` environment variable to "
"include paths to Python executable and additional scripts. For example, if "
"your Python is installed in ``C:\\Python27\\``, the following paths need to "
"be added to ``PATH``::"
msgstr ""

# 35b97b77a0844814a2677c71b5e98f23
#: ../../topics/install.txt:37
msgid "Install Apache and mod_wsgi"
msgstr ""

# aa1f07f537bb4cdda2312f3d786d9946
#: ../../topics/install.txt:39
msgid ""
"If you just want to experiment with Django, skip ahead to the next section; "
"Django includes a lightweight web server you can use for testing, so you "
"won't need to set up Apache until you're ready to deploy Django in "
"production."
msgstr ""

# b78575b9b39c4e0da6768ed68e992d1a
#: ../../topics/install.txt:44
msgid ""
"If you want to use Django on a production site, use `Apache`_ with "
"`mod_wsgi`_. mod_wsgi can operate in one of two modes: an embedded mode and "
"a daemon mode. In embedded mode, mod_wsgi is similar to mod_perl -- it "
"embeds Python within Apache and loads Python code into memory when the "
"server starts. Code stays in memory throughout the life of an Apache "
"process, which leads to significant performance gains over other server "
"arrangements. In daemon mode, mod_wsgi spawns an independent daemon process "
"that handles requests. The daemon process can run as a different user than "
"the Web server, possibly leading to improved security, and the daemon "
"process can be restarted without restarting the entire Apache Web server, "
"possibly making refreshing your codebase more seamless. Consult the mod_wsgi "
"documentation to determine which mode is right for your setup. Make sure you "
"have Apache installed, with the mod_wsgi module activated. Django will work "
"with any version of Apache that supports mod_wsgi."
msgstr ""

# 094044e84b0b48bbba8f5c453a9637cb
#: ../../topics/install.txt:60
msgid ""
"See :doc:`How to use Django with mod_wsgi </howto/deployment/wsgi/modwsgi>` "
"for information on how to configure mod_wsgi once you have it installed."
msgstr ""

# e6daf9e275ee4abf8d436d1757e26da1
#: ../../topics/install.txt:64
msgid ""
"If you can't use mod_wsgi for some reason, fear not: Django supports many "
"other deployment options. One is :doc:`uWSGI </howto/deployment/fastcgi>`; "
"it works very well with `nginx`_. Another is :doc:`FastCGI </howto/"
"deployment/fastcgi>`, perfect for using Django with servers other than "
"Apache. Additionally, Django follows the WSGI spec (:pep:`3333`), which "
"allows it to run on a variety of server platforms. See the `server-"
"arrangements wiki page`_ for specific installation instructions for each "
"platform."
msgstr ""

# b0ddc1a57e6d4aa693ddb9f806975c16
#: ../../topics/install.txt:80
msgid "Get your database running"
msgstr ""

# 1872e388b70b4c34b7a1f2e97ea992d7
#: ../../topics/install.txt:82
msgid ""
"If you plan to use Django's database API functionality, you'll need to make "
"sure a database server is running. Django supports many different database "
"servers and is officially supported with PostgreSQL_, MySQL_, Oracle_ and "
"SQLite_ (although SQLite doesn't require a separate server to be running)."
msgstr ""

# 75ee193a9a3441619f63fdf6e3561c74
#: ../../topics/install.txt:87
msgid ""
"In addition to the officially supported databases, there are backends "
"provided by 3rd parties that allow you to use other databases with Django:"
msgstr ""

# 5217e57abc3b471babf27d54d735ceea
#: ../../topics/install.txt:90
msgid "`Sybase SQL Anywhere`_"
msgstr ""

# b6672d36ae18483a858722407aacf1f8
#: ../../topics/install.txt:91
msgid "`IBM DB2`_"
msgstr ""

# e3bc34ed493240c485fd1bd662e03dce
#: ../../topics/install.txt:92
msgid "`Microsoft SQL Server 2005`_"
msgstr ""

# 4b6818b94f444d499fed1428d97f6b64
#: ../../topics/install.txt:93
msgid "Firebird_"
msgstr ""

# e87f1978e5454c34aeae9153e970df1d
#: ../../topics/install.txt:94
msgid "ODBC_"
msgstr ""

# 74398b7680be4fe8a6539df39e3c332d
#: ../../topics/install.txt:96
msgid ""
"The Django versions and ORM features supported by these unofficial backends "
"vary considerably. Queries regarding the specific capabilities of these "
"unofficial backends, along with any support queries, should be directed to "
"the support channels provided by each 3rd party project."
msgstr ""

# 15e0538f666d499dbc3cae45df9c12c7
#: ../../topics/install.txt:101
msgid ""
"In addition to a database backend, you'll need to make sure your Python "
"database bindings are installed."
msgstr ""

# af6972ca63c94b35a71618c77bb1f712
#: ../../topics/install.txt:104
msgid ""
"If you're using PostgreSQL, you'll need the ``postgresql_psycopg2`` package. "
"You might want to refer to our :ref:`PostgreSQL notes <postgresql-notes>` "
"for further technical details specific to this database."
msgstr ""

# 69e9a2f87a484411987eca8cabf6ef12
#: ../../topics/install.txt:108
msgid ""
"If you're on Windows, check out the unofficial `compiled Windows version`_."
msgstr ""

# f869e0e6e5434934b2a7023656d0da4a
#: ../../topics/install.txt:110
msgid ""
"If you're using MySQL, you'll need MySQLdb_, version 1.2.1p2 or higher. You "
"will also want to read the database-specific :ref:`notes for the MySQL "
"backend <mysql-notes>`."
msgstr ""

# 8dcc4273c1d64be3b500cc9506e2609d
#: ../../topics/install.txt:114
msgid ""
"If you're using Oracle, you'll need a copy of cx_Oracle_, but please read "
"the database-specific :ref:`notes for the Oracle backend <oracle-notes>` for "
"important information regarding supported versions of both Oracle and "
"``cx_Oracle``."
msgstr ""

# 89bd5c57f6114d0594d58cd3aafbbd72
#: ../../topics/install.txt:119
msgid ""
"If you're using an unofficial 3rd party backend, please consult the "
"documentation provided for any additional requirements."
msgstr ""

# 53bc9aaea9834d1cb395eea1da2fab97
#: ../../topics/install.txt:122
msgid ""
"If you plan to use Django's ``manage.py syncdb`` command to automatically "
"create database tables for your models, you'll need to ensure that Django "
"has permission to create and alter tables in the database you're using; if "
"you plan to manually create the tables, you can simply grant Django "
"``SELECT``, ``INSERT``, ``UPDATE`` and ``DELETE`` permissions. On some "
"databases, Django will need ``ALTER TABLE`` privileges during ``syncdb`` but "
"won't issue ``ALTER TABLE`` statements on a table once ``syncdb`` has "
"created it."
msgstr ""

# 8ef6bf0b727847489d73e6d3ed043bdd
#: ../../topics/install.txt:131
msgid ""
"If you're using Django's :doc:`testing framework</topics/testing>` to test "
"database queries, Django will need permission to create a test database."
msgstr ""

# 2159d10dc20f41efadda2667edb6f9fd
#: ../../topics/install.txt:151
msgid "Remove any old versions of Django"
msgstr ""

# 0de376c882234e1ea6fa83e8a0e3b5e9
#: ../../topics/install.txt:153
msgid ""
"If you are upgrading your installation of Django from a previous version, "
"you will need to uninstall the old Django version before installing the new "
"version."
msgstr ""

# 9824224f4aff4e83b6bb4512469c114d
#: ../../topics/install.txt:157
msgid ""
"If you installed Django using ``setup.py install``, uninstalling is as "
"simple as deleting the ``django`` directory from your Python ``site-"
"packages``."
msgstr ""

# a68c840003634b98806e18d22b009eb6
#: ../../topics/install.txt:161
msgid ""
"If you installed Django from a Python egg, remove the Django ``.egg`` file, "
"and remove the reference to the egg in the file named ``easy-install.pth``. "
"This file should also be located in your ``site-packages`` directory."
msgstr ""

# 0f79fb2c04d04f7fba42d35072456295
#: ../../topics/install.txt:169
msgid ""
"The location of the ``site-packages`` directory depends on the operating "
"system, and the location in which Python was installed. To find out your "
"system's ``site-packages`` location, execute the following:"
msgstr ""

# eadf8b5c28414a908f5d6c53e519200e
#: ../../topics/install.txt:177
msgid ""
"(Note that this should be run from a shell prompt, not a Python interactive "
"prompt.)"
msgstr ""

# 8bdef07b04c14e47952d3db7b8754672
#: ../../topics/install.txt:180
msgid ""
"Some Debian-based Linux distributions have separate ``site-packages`` "
"directories for user-installed packages, such as when installing Django from "
"a downloaded tarball. The command  listed above will give you the system's "
"``site-packages``, the user's directory can be found in ``/usr/local/lib/`` "
"instead of ``/usr/lib/``."
msgstr ""

# f74b6e9f15c14017b073426c53c3c9ce
#: ../../topics/install.txt:189
msgid "Install the Django code"
msgstr ""

# e9630036c6bb468eaa02f061185ca02d
#: ../../topics/install.txt:191
msgid ""
"Installation instructions are slightly different depending on whether you're "
"installing a distribution-specific package, downloading the latest official "
"release, or fetching the latest development version."
msgstr ""

# 70f4b987b15d41bd810ba2883377c64c
#: ../../topics/install.txt:195
msgid "It's easy, no matter which way you choose."
msgstr ""

# 23fed03e9f67424692a27c12db39284b
#: ../../topics/install.txt:198
msgid "Installing a distribution-specific package"
msgstr ""

# 3fcd08a2a140428a92fb0545b7357ac1
#: ../../topics/install.txt:200
msgid ""
"Check the :doc:`distribution specific notes </misc/distributions>` to see if "
"your platform/distribution provides official Django packages/installers. "
"Distribution-provided packages will typically allow for automatic "
"installation of dependencies and easy upgrade paths."
msgstr ""

# 19d341f5652c432dae2b4d3ec0ed6aa2
#: ../../topics/install.txt:208
msgid "Installing an official release with ``pip``"
msgstr ""

# 77f01977e66f4febaeacddd7a071b36b
#: ../../topics/install.txt:210
msgid "This is the recommended way to install Django."
msgstr ""

# eec754f3fd5d43768af3965aa5da0d73
#: ../../topics/install.txt:212
msgid ""
"Install pip_. The easiest is to use the `standalone pip installer`_. If your "
"distribution has ``pip`` already installed, make sure it isn't too outdated."
msgstr ""

# 2c00b4d53066400db46b31e674dc8c70
#: ../../topics/install.txt:215
msgid ""
"(optional) Take a look at virtualenv_ and virtualenvwrapper_. These tools "
"provide isolated Python environments, which are more practical than "
"installing packages system-wide. They also allow installing packages without "
"administrator privileges. It's up to you to decide if you want to learn and "
"use them."
msgstr ""

# 1d6aa33fe2d14a289ec0ed1786732c1b
#: ../../topics/install.txt:221
msgid ""
"If you're using Linux, Mac OS X or some other flavor of Unix, enter the "
"command ``sudo pip install Django`` at the shell prompt. If you're using "
"Windows, start up a command shell with administrator privileges and run the "
"command ``pip install Django``. This will install Django in your Python "
"installation's ``site-packages`` directory."
msgstr ""

# 7f7affcd08dc40cbabee687c06bb6cde
#: ../../topics/install.txt:227
msgid ""
"If you're using a virtualenv, you don't need ``sudo`` or administrator "
"privileges, and this will install Django in the virtualenv's ``site-"
"packages`` directory."
msgstr ""

# 711d769552044c6caf6efde0081557e8
#: ../../topics/install.txt:238
msgid "Installing an official release manually"
msgstr ""

# b38d7481d27648b999987b9fa195c9be
#: ../../topics/install.txt:240
msgid "Download the latest release from our `download page`_."
msgstr ""

# c1dcf2a769244d328f769b6b3ad14b75
#: ../../topics/install.txt:242
msgid ""
"Untar the downloaded file (e.g. ``tar xzvf Django-X.Y.tar.gz``, where ``X."
"Y`` is the version number of the latest release). If you're using Windows, "
"you can download the command-line tool bsdtar_ to do this, or you can use a "
"GUI-based tool such as 7-zip_."
msgstr ""

# 29f405f28840420da3d1856cad6e2b9d
#: ../../topics/install.txt:247
msgid "Change into the directory created in step 2 (e.g. ``cd Django-X.Y``)."
msgstr ""

# 2d60b08a014b43218d7999b0a894edbd
#: ../../topics/install.txt:249
msgid ""
"If you're using Linux, Mac OS X or some other flavor of Unix, enter the "
"command ``sudo python setup.py install`` at the shell prompt. If you're "
"using Windows, start up a command shell with administrator privileges and "
"run the command ``python setup.py install``. This will install Django in "
"your Python installation's ``site-packages`` directory."
msgstr ""

# 9bc78a4e51434a7fb2415e8176980f3a
#: ../../topics/install.txt:262
msgid "Installing the development version"
msgstr ""

# d38c3365f9064de6ae136ce46af0eb95
#: ../../topics/install.txt:266
msgid ""
"If you decide to use the latest development version of Django, you'll want "
"to pay close attention to `the development timeline`_, and you'll want to "
"keep an eye on `the list of backwards-incompatible changes`_. This will help "
"you stay on top of any new features you might want to use, as well as any "
"changes you'll need to make to your code when updating your copy of Django. "
"(For stable releases, any necessary changes are documented in the release "
"notes.)"
msgstr ""

# b0999cf1990844a9b112f1c879472655
#: ../../topics/install.txt:278
msgid ""
"If you'd like to be able to update your Django code occasionally with the "
"latest bug fixes and improvements, follow these instructions:"
msgstr ""

# 7c422639908c4a3cbc8ec9ade67077f5
#: ../../topics/install.txt:281
msgid ""
"Make sure that you have Subversion_, Git_, or Mercurial_ installed, and that "
"you can run its commands from a shell. (Enter ``svn help``, ``git help``, or "
"``hg help`` at a shell prompt to test this.) Note that the Subversion "
"repository is the canonical source for the official Git and Mercurial "
"repositories and as such will always be the most up-to-date."
msgstr ""

# a6497ee8fdad4f0fb4a0df876df1fab4
#: ../../topics/install.txt:287
msgid "Check out Django's main development branch (the 'trunk') like so:"
msgstr ""

# b7954371912647d5874f293433ad75e0
#: ../../topics/install.txt:294
msgid "Mirrors of the Subversion repository can be obtained like so:"
msgstr ""

# 00938e57d01c4f869d94ad2203b9e785
#: ../../topics/install.txt:308
msgid ""
"These mirrors should be updated every 5 minutes but aren't guaranteed to be "
"up-to-date since they are hosted on external services."
msgstr ""

# 586ae8e59a694841ad2f28d139cc785f
#: ../../topics/install.txt:311
msgid ""
"Next, make sure that the Python interpreter can load Django's code. The most "
"convenient way to do this is to `modify Python's search path`_. Add a ``."
"pth`` file containing the full path to the ``django-trunk`` directory to "
"your system's ``site-packages`` directory. For example, on a Unix-like "
"system:"
msgstr ""

# 7cb3d0fb473a4892b98536b38ebf9f70
#: ../../topics/install.txt:320
msgid ""
"(In the above line, change ``SITE-PACKAGES-DIR`` to match the location of "
"your system's ``site-packages`` directory, as explained in the :ref:`Where "
"are my site-packages stored? <finding-site-packages>` section above. Change "
"``WORKING-DIR/django-trunk`` to match the full path to your new ``django-"
"trunk`` directory.)"
msgstr ""

# b8b2ab8896f1457288013e4061dc7f28
#: ../../topics/install.txt:326
msgid ""
"On Unix-like systems, create a symbolic link to the file ``django-trunk/"
"django/bin/django-admin.py`` in a directory on your system path, such as ``/"
"usr/local/bin``. For example:"
msgstr ""

# 832856767f3f4f83b12799877a1b47a8
#: ../../topics/install.txt:334
msgid ""
"(In the above line, change WORKING-DIR to match the full path to your new "
"``django-trunk`` directory.)"
msgstr ""

# 51ad96149a88422db3f7524d57489a97
#: ../../topics/install.txt:337
msgid ""
"This simply lets you type ``django-admin.py`` from within any directory, "
"rather than having to qualify the command with the full path to the file."
msgstr ""

# d6af2d1958d64bbf985f8d834c04ca30
#: ../../topics/install.txt:340
msgid ""
"On Windows systems, the same result can be achieved by copying the file "
"``django-trunk/django/bin/django-admin.py`` to somewhere on your system "
"path, for example ``C:\\Python27\\Scripts``."
msgstr ""

# f41bdd0c4076487abff9548928db6042
#: ../../topics/install.txt:346
msgid ""
"You mustn't run ``sudo python setup.py install``, because you've already "
"carried out the equivalent actions in steps 3 and 4. Furthermore, this is "
"known to cause problems when updating to a more recent version of Django."
msgstr ""

# 409f9715b7c14a63a95aa4074c95ff55
#: ../../topics/install.txt:350
msgid ""
"When you want to update your copy of the Django source code, just run the "
"command ``svn update`` from within the ``django-trunk`` directory. When you "
"do this, Subversion will automatically download any changes. The equivalent "
"command for Git is ``git pull``, and for Mercurial ``hg pull --update``."
msgstr ""

# dde71d3826014016a244f0ca6f2b9d0b
#: ../../topics/logging.txt:3
msgid "Logging"
msgstr ""

# 5ff7e2363d8343559bdb1c04f01cd7a6
#: ../../topics/logging.txt:11
msgid "A quick logging primer"
msgstr ""

# 20d237b36d064642bec67df6c90dd160
#: ../../topics/logging.txt:13
msgid ""
"Django uses Python's builtin :mod:`logging` module to perform system "
"logging. The usage of this module is discussed in detail in Python's own "
"documentation. However, if you've never used Python's logging framework (or "
"even if you have), here's a quick primer."
msgstr ""

# e104d5278e5545fdba058a0b557a6876
#: ../../topics/logging.txt:19
msgid "The cast of players"
msgstr ""

# f68b100696ef4ee09cf446a2cc178505
#: ../../topics/logging.txt:21
msgid "A Python logging configuration consists of four parts:"
msgstr ""

# 4e0e2f350be14bef807b78d750b37d8b
#: ../../topics/logging.txt:23
msgid ":ref:`topic-logging-parts-loggers`"
msgstr ""

# 2b9fb72e28594911b949ce75e7600108
#: ../../topics/logging.txt:24
msgid ":ref:`topic-logging-parts-handlers`"
msgstr ""

# aff4aee9fca54a51a6347121126ecb4e
#: ../../topics/logging.txt:25
msgid ":ref:`topic-logging-parts-filters`"
msgstr ""

# 5ca485e6b54c49698b4d303a73421ac6
#: ../../topics/logging.txt:26
msgid ":ref:`topic-logging-parts-formatters`"
msgstr ""

# 25ba54cfc9f7429fbd3635fe25c82e29
# 367b409dcd2a44daa68c9814fa4c6027
#: ../../topics/logging.txt:31 ../../topics/logging.txt:416
msgid "Loggers"
msgstr ""

# 104f95375d9b408cb18a096dc5affbd9
#: ../../topics/logging.txt:33
msgid ""
"A logger is the entry point into the logging system. Each logger is a named "
"bucket to which messages can be written for processing."
msgstr ""

# b4e6f0b1111d4c9da34738a80df2f1ea
#: ../../topics/logging.txt:36
msgid ""
"A logger is configured to have a *log level*. This log level describes the "
"severity of the messages that the logger will handle. Python defines the "
"following log levels:"
msgstr ""

# efc6ce64d8c043b59bf8d0e21ca9d3d0
#: ../../topics/logging.txt:40
msgid "``DEBUG``: Low level system information for debugging purposes"
msgstr ""

# 3adc7ccfa9cc4cc4bce42d7af57616d1
#: ../../topics/logging.txt:42
msgid "``INFO``: General system information"
msgstr ""

# da2b9448d1db49caa57969d60c69ad00
#: ../../topics/logging.txt:44
msgid "``WARNING``: Information describing a minor problem that has occurred."
msgstr ""

# d622369672054a50b068baf5d76c9cd8
#: ../../topics/logging.txt:47
msgid "``ERROR``: Information describing a major problem that has occurred."
msgstr ""

# ee492ec1a594420e95e4239a3e5077a0
#: ../../topics/logging.txt:50
msgid ""
"``CRITICAL``: Information describing a critical problem that has occurred."
msgstr ""

# 29d88263b6c444da9a6c9f4e8ac89cd2
#: ../../topics/logging.txt:53
msgid ""
"Each message that is written to the logger is a *Log Record*. Each log "
"record also has a *log level* indicating the severity of that specific "
"message. A log record can also contain useful metadata that describes the "
"event that is being logged. This can include details such as a stack trace "
"or an error code."
msgstr ""

# d79f62085f164fe19ee1cfb574f7147e
#: ../../topics/logging.txt:59
msgid ""
"When a message is given to the logger, the log level of the message is "
"compared to the log level of the logger. If the log level of the message "
"meets or exceeds the log level of the logger itself, the message will "
"undergo further processing. If it doesn't, the message will be ignored."
msgstr ""

# 4a89ba6e7f5d4a29b16c148eb366a446
#: ../../topics/logging.txt:65
msgid ""
"Once a logger has determined that a message needs to be processed, it is "
"passed to a *Handler*."
msgstr ""

# 7d4a741c7c494230a175af681791dd33
# 39a1ef569add41fa8d50e2cb1493b6be
#: ../../topics/logging.txt:71 ../../topics/logging.txt:459
msgid "Handlers"
msgstr ""

# dc18c967c24640ed91f199b7c2971005
#: ../../topics/logging.txt:73
msgid ""
"The handler is the engine that determines what happens to each message in a "
"logger. It describes a particular logging behavior, such as writing a "
"message to the screen, to a file, or to a network socket."
msgstr ""

# 9480f8d80b67430fbf92717ba5160177
#: ../../topics/logging.txt:77
msgid ""
"Like loggers, handlers also have a log level. If the log level of a log "
"record doesn't meet or exceed the level of the handler, the handler will "
"ignore the message."
msgstr ""

# 56980e01ba86451e97c11bbe456d39e0
#: ../../topics/logging.txt:81
msgid ""
"A logger can have multiple handlers, and each handler can have a different "
"log level. In this way, it is possible to provide different forms of "
"notification depending on the importance of a message. For example, you "
"could install one handler that forwards ``ERROR`` and ``CRITICAL`` messages "
"to a paging service, while a second handler logs all messages (including "
"``ERROR`` and ``CRITICAL`` messages) to a file for later analysis."
msgstr ""

# 1e2672c4f3fd49379a006d885ff42027
# f1b843dc357d49e491505a27b0fd234b
# c84f936b6bef4e4cbbdccdc214ec72a6
#: ../../topics/logging.txt:92 ../../topics/logging.txt:504
#: ../../topics/templates.txt:108
msgid "Filters"
msgstr ""

# a3787a373c2c473480fe046c868f62e3
#: ../../topics/logging.txt:94
msgid ""
"A filter is used to provide additional control over which log records are "
"passed from logger to handler."
msgstr ""

# 93ad1d7a1fc24bd282aca71b5cb2a7bf
#: ../../topics/logging.txt:97
msgid ""
"By default, any log message that meets log level requirements will be "
"handled. However, by installing a filter, you can place additional criteria "
"on the logging process. For example, you could install a filter that only "
"allows ``ERROR`` messages from a particular source to be emitted."
msgstr ""

# f3c913ab0ce84295b6668f33b510fc67
#: ../../topics/logging.txt:103
msgid ""
"Filters can also be used to modify the logging record prior to being "
"emitted. For example, you could write a filter that downgrades ``ERROR`` log "
"records to ``WARNING`` records if a particular set of criteria are met."
msgstr ""

# 5162fafeded94f77bbfc06cf77141360
#: ../../topics/logging.txt:108
msgid ""
"Filters can be installed on loggers or on handlers; multiple filters can be "
"used in a chain to perform multiple filtering actions."
msgstr ""

# 9b350abcc32e48e2a7f5aa4efbb50a87
#: ../../topics/logging.txt:114
msgid "Formatters"
msgstr ""

# 7cf4ff45fad04be1825aac4ef12edec6
#: ../../topics/logging.txt:116
msgid ""
"Ultimately, a log record needs to be rendered as text. Formatters describe "
"the exact format of that text. A formatter usually consists of a Python "
"formatting string; however, you can also write custom formatters to "
"implement specific formatting behavior."
msgstr ""

# 5878d94903a943ccbc69e07e902228f7
#: ../../topics/logging.txt:122
msgid "Using logging"
msgstr ""

# 480728751a4346e38fe80dbc0776c76b
#: ../../topics/logging.txt:124
msgid ""
"Once you have configured your loggers, handlers, filters and formatters, you "
"need to place logging calls into your code. Using the logging framework is "
"very simple. Here's an example::"
msgstr ""

# 2337b3eedd79451689f097beec73f2f7
#: ../../topics/logging.txt:140
msgid ""
"And that's it! Every time the ``bad_mojo`` condition is activated, an error "
"log record will be written."
msgstr ""

# d16217e5e07c4d70a398fbb90e3b1379
#: ../../topics/logging.txt:144
msgid "Naming loggers"
msgstr ""

# 73a377ffb7bf40dca7ac756364fd61ba
#: ../../topics/logging.txt:146
msgid ""
"The call to :meth:`logging.getLogger()` obtains (creating, if necessary) an "
"instance of a logger. The logger instance is identified by a name. This name "
"is used to identify the logger for configuration purposes."
msgstr ""

# 488e90cb2ac6455f802d3ef4f45f73b0
#: ../../topics/logging.txt:151
msgid ""
"By convention, the logger name is usually ``__name__``, the name of the "
"python module that contains the logger. This allows you to filter and handle "
"logging calls on a per-module basis. However, if you have some other way of "
"organizing your logging messages, you can provide any dot-separated name to "
"identify your logger::"
msgstr ""

# 72439e2c693f40e8a4f8bb06f14803f8
#: ../../topics/logging.txt:160
msgid ""
"The dotted paths of logger names define a hierarchy. The ``project."
"interesting`` logger is considered to be a parent of the ``project."
"interesting.stuff`` logger; the ``project`` logger is a parent of the "
"``project.interesting`` logger."
msgstr ""

# 09d661b9016a46be8a3447a3e813c811
#: ../../topics/logging.txt:165
msgid ""
"Why is the hierarchy important? Well, because loggers can be set to "
"*propagate* their logging calls to their parents. In this way, you can "
"define a single set of handlers at the root of a logger tree, and capture "
"all logging calls in the subtree of loggers. A logging handler defined in "
"the ``project`` namespace will catch all logging messages issued on the "
"``project.interesting`` and ``project.interesting.stuff`` loggers."
msgstr ""

# 70f092d1432c46ef8aebec8cc9595223
#: ../../topics/logging.txt:173
msgid ""
"This propagation can be controlled on a per-logger basis. If you don't want "
"a particular logger to propagate to it's parents, you can turn off this "
"behavior."
msgstr ""

# fe60f11f6bcf4e93bbbda96847b537be
#: ../../topics/logging.txt:178
msgid "Making logging calls"
msgstr ""

# 2094e4d014334f9fb9d8afe7f31330bb
#: ../../topics/logging.txt:180
msgid ""
"The logger instance contains an entry method for each of the default log "
"levels:"
msgstr ""

# 7575a425c6554379a2e16da4e31107ba
#: ../../topics/logging.txt:183
msgid "``logger.critical()``"
msgstr ""

# 5ca1b3485d5e46f8a850b1696551325f
#: ../../topics/logging.txt:184
msgid "``logger.error()``"
msgstr ""

# f48945a0e8234a00b1eab61bc6b0782a
#: ../../topics/logging.txt:185
msgid "``logger.warning()``"
msgstr ""

# 2e64c92614f5408ebe35923924284797
#: ../../topics/logging.txt:186
msgid "``logger.info()``"
msgstr ""

# 9a9d3d91ad0b477fbba9610a01b3ad68
#: ../../topics/logging.txt:187
msgid "``logger.debug()``"
msgstr ""

# fd1c19dedff0434cbfcd08ec3917c3ed
#: ../../topics/logging.txt:189
msgid "There are two other logging calls available:"
msgstr ""

# 9d3b7c9c6a7240cf989fb2cb44e99420
#: ../../topics/logging.txt:191
msgid ""
"``logger.log()``: Manually emits a logging message with a specific log level."
msgstr ""

# 177e2e008e6e414ba5a8127fc99ccc2d
#: ../../topics/logging.txt:194
msgid ""
"``logger.exception()``: Creates an ``ERROR`` level logging message wrapping "
"the current exception stack frame."
msgstr ""

# 54a13814b2ef4a8aa424928a31ad27f8
#: ../../topics/logging.txt:198
msgid "Configuring logging"
msgstr ""

# bbcde7e2e85b4c8dbc7306502a725f84
#: ../../topics/logging.txt:200
msgid ""
"Of course, it isn't enough to just put logging calls into your code. You "
"also need to configure the loggers, handlers, filters and formatters to "
"ensure that logging output is output in a useful way."
msgstr ""

# 55db0534fb79425a817cae5ef6c3034a
#: ../../topics/logging.txt:204
msgid ""
"Python's logging library provides several techniques to configure logging, "
"ranging from a programmatic interface to configuration files. By default, "
"Django uses the `dictConfig format`_."
msgstr ""

# 9023aefce5d74b589ae605b6207cc3a1
#: ../../topics/logging.txt:209
msgid ""
"``logging.dictConfig`` is a builtin library in Python 2.7. In order to make "
"this library available for users of earlier Python versions, Django includes "
"a copy as part of ``django.utils.log``. If you have Python 2.7, the system "
"native library will be used; if you have Python 2.6 or earlier, Django's "
"copy will be used."
msgstr ""

# 4ae4dcea12ec461dba127f06f209f917
#: ../../topics/logging.txt:215
msgid ""
"In order to configure logging, you use :setting:`LOGGING` to define a "
"dictionary of logging settings. These settings describes the loggers, "
"handlers, filters and formatters that you want in your logging setup, and "
"the log levels and other properties that you want those components to have."
msgstr ""

# 36e6fed4d3c64d26b4f54c89fb4c32e9
#: ../../topics/logging.txt:221
msgid ""
"Logging is configured immediately after settings have been loaded. Since the "
"loading of settings is one of the first things that Django does, you can be "
"certain that loggers are always ready for use in your project code."
msgstr ""

# 1ad848492cdf4997b908d01aa6fcf916
#: ../../topics/logging.txt:233
msgid ""
"The full documentation for `dictConfig format`_ is the best source of "
"information about logging configuration dictionaries. However, to give you a "
"taste of what is possible, here is an example of a fairly complex logging "
"setup, configured using :meth:`logging.dictConfig`::"
msgstr ""

# b9f02086bc424db49552ddb4d3ddbc90
#: ../../topics/logging.txt:290
msgid "This logging configuration does the following things:"
msgstr ""

# 2f3fcb95fa6b4a5d837beeb56f94b708
#: ../../topics/logging.txt:292
msgid ""
"Identifies the configuration as being in 'dictConfig version 1' format. At "
"present, this is the only dictConfig format version."
msgstr ""

# a63bb44cce4a46aa925e56df84e66150
#: ../../topics/logging.txt:295
msgid "Disables all existing logging configurations."
msgstr ""

# a2d4e49898764afe8b9cc2a5a323ed22
#: ../../topics/logging.txt:297
msgid "Defines two formatters:"
msgstr ""

# 7381c6a9039446f3a2f57a58f6ed006d
#: ../../topics/logging.txt:299
msgid ""
"``simple``, that just outputs the log level name (e.g., ``DEBUG``) and the "
"log message."
msgstr ""

# 631c629f8c2f4d46afba32de98c9d155
#: ../../topics/logging.txt:302
msgid ""
"The `format` string is a normal Python formatting string describing the "
"details that are to be output on each logging line. The full list of detail "
"that can be output can be found in the `formatter documentation`_."
msgstr ""

# a73acc3f6295487d8b65fe4c9e920f77
#: ../../topics/logging.txt:307
msgid ""
"``verbose``, that outputs the log level name, the log message, plus the "
"time, process, thread and module that generate the log message."
msgstr ""

# 514039df580140aebec29d27d9b8520c
#: ../../topics/logging.txt:311
msgid ""
"Defines one filter -- :class:`project.logging.SpecialFilter`, using the "
"alias ``special``. If this filter required additional arguments at time of "
"construction, they can be provided as additional keys in the filter "
"configuration dictionary. In this case, the argument ``foo`` will be given a "
"value of ``bar`` when instantiating the :class:`SpecialFilter`."
msgstr ""

# 4d9cd0d7757c48ad9444b92754fb1f60
#: ../../topics/logging.txt:318
msgid "Defines three handlers:"
msgstr ""

# 71dd99e438ed4e81b5a3186c9ffd71d5
#: ../../topics/logging.txt:320
msgid ""
"``null``, a NullHandler, which will pass any ``DEBUG`` (or higher) message "
"to ``/dev/null``."
msgstr ""

# baf5399616984dd8b7519481eb8bd8c3
#: ../../topics/logging.txt:323
msgid ""
"``console``, a StreamHandler, which will print any ``DEBUG`` (or higher) "
"message to stdout. This handler uses the `simple` output format."
msgstr ""

# a7770ba1c87a4e38bfa67b916219f9e3
#: ../../topics/logging.txt:327
msgid ""
"``mail_admins``, an AdminEmailHandler, which will email any ``ERROR`` (or "
"higher) message to the site admins. This handler uses the ``special`` filter."
msgstr ""

# 0cf6bc77d6ff48048c914d6c83baff11
#: ../../topics/logging.txt:331
msgid "Configures three loggers:"
msgstr ""

# 71a1f9a3d89143eab8ca199644936893
#: ../../topics/logging.txt:333
msgid ""
"``django``, which passes all messages at ``INFO`` or higher to the ``null`` "
"handler."
msgstr ""

# f3b4d3be890942e8a0a0958b5137c544
#: ../../topics/logging.txt:336
msgid ""
"``django.request``, which passes all ``ERROR`` messages to the "
"``mail_admins`` handler. In addition, this logger is marked to *not* "
"propagate messages. This means that log messages written to ``django."
"request`` will not be handled by the ``django`` logger."
msgstr ""

# 77798a167be14072bece6ed381b8df08
#: ../../topics/logging.txt:342
msgid ""
"``myproject.custom``, which passes all messages at ``INFO`` or higher that "
"also pass the ``special`` filter to two handlers -- the ``console``, and "
"``mail_admins``. This means that all ``INFO`` level messages (or higher) "
"will be printed to the console; ``ERROR`` and ``CRITICAL`` messages will "
"also be output via email."
msgstr ""

# 899a43e2ae0b46fabf39be97c57d36fc
#: ../../topics/logging.txt:351
msgid ""
"If your ``settings.py`` specifies a custom handler class and the file "
"defining that class also imports ``settings.py`` a circular import will "
"occur."
msgstr ""

# 3643c0a2ff1d45ffb7b0760791f56a2c
#: ../../topics/logging.txt:355
msgid ""
"For example, if ``settings.py`` contains the following config for :setting:"
"`LOGGING`::"
msgstr ""

# c7ee3877fd9d443f97559c2701979964
#: ../../topics/logging.txt:368
msgid ""
"and ``myproject/logconfig.py`` has the following line before the "
"``MyHandler`` definition::"
msgstr ""

# 44e37b8f8eec40518bc7481c167e740e
#: ../../topics/logging.txt:373
msgid ""
"then the ``dictconfig`` module will raise an exception like the following::"
msgstr ""

# ee9e5ac9a51b4229998d532a86cfafe5
#: ../../topics/logging.txt:382
msgid "Custom logging configuration"
msgstr ""

# 0d4c8be06d6f436eb9ce0b34d9c49b41
#: ../../topics/logging.txt:384
msgid ""
"If you don't want to use Python's dictConfig format to configure your "
"logger, you can specify your own configuration scheme."
msgstr ""

# 185efc58a49f4befa946ff0b95551846
#: ../../topics/logging.txt:387
msgid ""
"The :setting:`LOGGING_CONFIG` setting defines the callable that will be used "
"to configure Django's loggers. By default, it points at Python's :meth:"
"`logging.dictConfig()` method. However, if you want to use a different "
"configuration process, you can use any other callable that takes a single "
"argument. The contents of :setting:`LOGGING` will be provided as the value "
"of that argument when logging is configured."
msgstr ""

# 85f7824d4a234cf4b8604a74246a8b0c
#: ../../topics/logging.txt:395
msgid "Disabling logging configuration"
msgstr ""

# c37ff413cd31494f85ec488050488bd5
#: ../../topics/logging.txt:397
msgid ""
"If you don't want to configure logging at all (or you want to manually "
"configure logging using your own approach), you can set :setting:"
"`LOGGING_CONFIG` to ``None``. This will disable the configuration process."
msgstr ""

# 675604bd6bea415cb3206eff216a05e7
#: ../../topics/logging.txt:403
msgid ""
"Setting :setting:`LOGGING_CONFIG` to ``None`` only means that the "
"configuration process is disabled, not logging itself. If you disable the "
"configuration process, Django will still make logging calls, falling back to "
"whatever default logging behavior is defined."
msgstr ""

# 88c431bfb1354c89996e57957315ae52
#: ../../topics/logging.txt:410
msgid "Django's logging extensions"
msgstr ""

# b47c286eecae44079e1db78b986c09e1
#: ../../topics/logging.txt:412
msgid ""
"Django provides a number of utilities to handle the unique requirements of "
"logging in Web server environment."
msgstr ""

# 94009a7586e846d892ec1af9a487fc09
#: ../../topics/logging.txt:418
msgid "Django provides three built-in loggers."
msgstr ""

# 541ce4718dff48b8b84a93b71bfd0f62
#: ../../topics/logging.txt:421
msgid "``django``"
msgstr ""

# 7786d933f1f640329da4dd78d0899c5e
#: ../../topics/logging.txt:423
msgid ""
"``django`` is the catch-all logger. No messages are posted directly to this "
"logger."
msgstr ""

# e3d07af44b364e58bb3a62140235a1d1
#: ../../topics/logging.txt:427
msgid "``django.request``"
msgstr ""

# 2360d8467d43473aba4aab6a7a24b2eb
#: ../../topics/logging.txt:429
msgid ""
"Log messages related to the handling of requests. 5XX responses are raised "
"as ``ERROR`` messages; 4XX responses are raised as ``WARNING`` messages."
msgstr ""

# 0240c3e52ce24fd5a162c006dcd6bafa
# dbd4c806f1cf49b1b2e93d01cea1b893
#: ../../topics/logging.txt:433 ../../topics/logging.txt:448
msgid "Messages to this logger have the following extra context:"
msgstr ""

# ff187a3ca365436787ac99a4bd3753e8
#: ../../topics/logging.txt:435
msgid "``status_code``: The HTTP response code associated with the request."
msgstr ""

# fc1d70fd68014d888fd0b839ffca8a37
#: ../../topics/logging.txt:438
msgid "``request``: The request object that generated the logging message."
msgstr ""

# bc873d20b3f24657b614c720fead2e6c
#: ../../topics/logging.txt:442
msgid "``django.db.backends``"
msgstr ""

# 6121f13c2833436bb62750d875629ead
#: ../../topics/logging.txt:444
msgid ""
"Messages relating to the interaction of code with the database. For example, "
"every SQL statement executed by a request is logged at the ``DEBUG`` level "
"to this logger."
msgstr ""

# 9e9227d05efd411280bdf87e22450857
#: ../../topics/logging.txt:450
msgid "``duration``: The time taken to execute the SQL statement."
msgstr ""

# 5fe5eb5653bd4062b917eb3f7cd4ae07
#: ../../topics/logging.txt:451
msgid "``sql``: The SQL statement that was executed."
msgstr ""

# 283fa62c65004818a77daead5c5f3812
#: ../../topics/logging.txt:452
msgid "``params``: The parameters that were used in the SQL call."
msgstr ""

# eedf506e43dd4d4f9087d431daaa8e06
#: ../../topics/logging.txt:454
msgid ""
"For performance reasons, SQL logging is only enabled when ``settings.DEBUG`` "
"is set to ``True``, regardless of the logging level or handlers that are "
"installed."
msgstr ""

# 329c92b4280f448a955fc46720d81ef0
#: ../../topics/logging.txt:461
msgid ""
"Django provides one log handler in addition to those provided by the Python "
"logging module."
msgstr ""

# 189f02eab6774447a8bb8996a8420f1a
#: ../../topics/logging.txt:466
msgid ""
"This handler sends an email to the site admins for each log message it "
"receives."
msgstr ""

# 5797fdff1b8c4eed8ca45246fbb4df03
#: ../../topics/logging.txt:469
msgid ""
"If the log record contains a ``request`` attribute, the full details of the "
"request will be included in the email."
msgstr ""

# 9302c41aecdf4495a9d7807442215bc1
#: ../../topics/logging.txt:472
msgid ""
"If the log record contains stack trace information, that stack trace will be "
"included in the email."
msgstr ""

# 07c04ddc8b694bc3a31eea169f45ac08
#: ../../topics/logging.txt:475
msgid ""
"The ``include_html`` argument of ``AdminEmailHandler`` is used to control "
"whether the traceback email includes an HTML attachment containing the full "
"content of the debug Web page that would have been produced if :setting:"
"`DEBUG` were ``True``. To set this value in your configuration, include it "
"in the handler definition for ``django.utils.log.AdminEmailHandler``, like "
"this::"
msgstr ""

# 325410c9e3ba4f378e54328eb778a3f6
#: ../../topics/logging.txt:490
msgid ""
"Note that this HTML version of the email contains a full traceback, with "
"names and values of local variables at each level of the stack, plus the "
"values of your Django settings. This information is potentially very "
"sensitive, and you may not want to send it over email. Consider using "
"something such as `django-sentry`_ to get the best of both worlds -- the "
"rich information of full tracebacks plus the security of *not* sending the "
"information over email. You may also explicitly designate certain sensitive "
"information to be filtered out of error reports -- learn more on :ref:"
"`Filtering error reports<filtering-error-reports>`."
msgstr ""

# 1c9a423a5d704ec99e1f8d75edb83a29
#: ../../topics/logging.txt:506
msgid ""
"Django provides two log filters in addition to those provided by the Python "
"logging module."
msgstr ""

# 73d5597e6fca4e0cb1e06a9957fad21d
#: ../../topics/logging.txt:513
msgid ""
"This filter accepts a callback function (which should accept a single "
"argument, the record to be logged), and calls it for each record that passes "
"through the filter. Handling of that record will not proceed if the callback "
"returns False."
msgstr ""

# e07d8d6418c449f584492477830f3982
#: ../../topics/logging.txt:522
msgid "This filter will only pass on records when settings.DEBUG is False."
msgstr ""

# e230c1e28dbb40269789c5a4fd236393
#: ../../topics/logging.txt:524
msgid ""
"This filter is used as follows in the default :setting:`LOGGING` "
"configuration to ensure that the :class:`AdminEmailHandler` only sends error "
"emails to admins when :setting:`DEBUG` is `False`::"
msgstr ""

# 8eac6d81a3af4360a4d4774df35795d1
#: ../../topics/pagination.txt:3
msgid "Pagination"
msgstr ""

# 3c61ecea8025464a9c87380d09b6c91c
#: ../../topics/pagination.txt:8
msgid ""
"Django provides a few classes that help you manage paginated data -- that "
"is, data that's split across several pages, with \"Previous/Next\" links. "
"These classes live in :file:`django/core/paginator.py`."
msgstr ""

# c853cbf74a224010b94f67ae2a226d82
#: ../../topics/pagination.txt:15
msgid ""
"Give :class:`Paginator` a list of objects, plus the number of items you'd "
"like to have on each page, and it gives you methods for accessing the items "
"for each page::"
msgstr ""

# bf6d47f4f0964ed283eeb5bd0109c6e9
#: ../../topics/pagination.txt:65
msgid ""
"Note that you can give ``Paginator`` a list/tuple, a Django ``QuerySet``, or "
"any other object with a ``count()`` or ``__len__()`` method. When "
"determining the number of objects contained in the passed object, "
"``Paginator`` will first try calling ``count()``, then fallback to using "
"``len()`` if the passed object has no ``count()`` method. This allows "
"objects such as Django's ``QuerySet`` to use a more efficient ``count()`` "
"method when available."
msgstr ""

# 91b9a75696644de1ad8bc26de2ce0ee3
#: ../../topics/pagination.txt:75
msgid "Using ``Paginator`` in a view"
msgstr ""

# 57fd1b99dda1466c80e44162aadc47c9
#: ../../topics/pagination.txt:77
msgid ""
"Here's a slightly more complex example using :class:`Paginator` in a view to "
"paginate a queryset. We give both the view and the accompanying template to "
"show how you can display the results. This example assumes you have a "
"``Contacts`` model that has already been imported."
msgstr ""

# fe8328e0aa674747ac8d4a306d8a25f6
#: ../../topics/pagination.txt:82
msgid "The view function looks like this::"
msgstr ""

# e002764d4f2a4a68bc06edb25cf1978a
#: ../../topics/pagination.txt:102
msgid ""
"In the template :file:`list.html`, you'll want to include navigation between "
"pages along with any interesting information from the objects themselves::"
msgstr ""

# 819c876063894890a2606903172b775e
#: ../../topics/pagination.txt:134
msgid "``Paginator`` objects"
msgstr ""

# 51b60e0c6b12435aa6973e115cde29b4
#: ../../topics/pagination.txt:136
msgid "The :class:`Paginator` class has this constructor:"
msgstr ""

# 11f6ae1320f0404989f90f752992b20c
#: ../../topics/pagination.txt:144
msgid ""
"A list, tuple, Django ``QuerySet``, or other sliceable object with a ``count"
"()`` or ``__len__()`` method."
msgstr ""

# c34e6497853e4551b317ed24b6b6fbd8
#: ../../topics/pagination.txt:148
msgid ""
"The maximum number of items to include on a page, not including orphans (see "
"the ``orphans`` optional argument below)."
msgstr ""

# 7f3968f9a5404b28a3b9f4c270baea51
#: ../../topics/pagination.txt:155
msgid ""
"The minimum number of items allowed on the last page, defaults to zero. Use "
"this when you don't want to have a last page with very few items. If the "
"last page would normally have a number of items less than or equal to "
"``orphans``, then those items will be added to the previous page (which "
"becomes the last page) instead of leaving the items on a page by themselves. "
"For example, with 23 items, ``per_page=10``, and ``orphans=3``, there will "
"be two pages; the first page with 10 items and the  second (and last) page "
"with 13 items."
msgstr ""

# 007beb454a2e4e51952e3946531db660
#: ../../topics/pagination.txt:165
msgid ""
"Whether or not the first page is allowed to be empty.  If ``False`` and "
"``object_list`` is  empty, then an ``EmptyPage`` error will be raised."
msgstr ""

# e84118250a94413f8859c6ecdf469f1c
#: ../../topics/pagination.txt:173
msgid ""
"Returns a :class:`Page` object with the given 1-based index. Raises :exc:"
"`InvalidPage` if the given page number doesn't exist."
msgstr ""

# fc31cea857ec4c20b34cc8fd0800c0a4
# 18b28d1456574ba59cbb1777498cf249
# 7215649488f24cf0bb1a424f699d5683
#: ../../topics/pagination.txt:177 ../../topics/pagination.txt:279
#: ../../topics/testing.txt:2067
msgid "Attributes"
msgstr ""

# 18997829ff6b41dda60b76d9d15ce62a
#: ../../topics/pagination.txt:181
msgid "The total number of objects, across all pages."
msgstr ""

# afc8b46ca16748d993ebf78f258ae71d
#: ../../topics/pagination.txt:185
msgid ""
"When determining the number of objects contained in ``object_list``, "
"``Paginator`` will first try calling ``object_list.count()``. If "
"``object_list`` has no ``count()`` method, then ``Paginator`` will fallback "
"to using ``len(object_list)``. This allows objects, such as Django's "
"``QuerySet``, to use a more efficient ``count()`` method when available."
msgstr ""

# 561760e72ebe463fb09e1c74a715591f
#: ../../topics/pagination.txt:194
msgid "The total number of pages."
msgstr ""

# b2d79112ba6f42a2a40f4c96abd1b120
#: ../../topics/pagination.txt:198
msgid "A 1-based range of page numbers, e.g., ``[1, 2, 3, 4]``."
msgstr ""

# ac680e9a76b1443b9c4ae3d24ed3e780
#: ../../topics/pagination.txt:202
msgid "``InvalidPage`` exceptions"
msgstr ""

# 25fcbf328d2a47688e72375c7782d2f6
#: ../../topics/pagination.txt:206
msgid ""
"A base class for exceptions raised when a paginator is passed an invalid "
"page number."
msgstr ""

# b8a2a25ed975454abc87d47bf65a6d2c
#: ../../topics/pagination.txt:209
msgid ""
"The :meth:`Paginator.page` method raises an exception if the requested page "
"is invalid (i.e., not an integer) or contains no objects. Generally, it's "
"enough to trap the ``InvalidPage`` exception, but if you'd like more "
"granularity, you can trap either of the following exceptions:"
msgstr ""

# 86bc7ff5c1154d42ae0020736e6d808f
#: ../../topics/pagination.txt:216
msgid "Raised when ``page()`` is given a value that isn't an integer."
msgstr ""

# 8d010c94deff434ab4476ae0075b940d
#: ../../topics/pagination.txt:220
msgid ""
"Raised when ``page()`` is given a valid value but no objects exist on that "
"page."
msgstr ""

# d4f81d2216b24730b623306b4193100a
#: ../../topics/pagination.txt:223
msgid ""
"Both of the exceptions are subclasses of :exc:`InvalidPage`, so you can "
"handle them both with a simple ``except InvalidPage``."
msgstr ""

# fe3725bef8a34a32be1f8ce288f93847
#: ../../topics/pagination.txt:228
msgid "``Page`` objects"
msgstr ""

# 668190f000444d00bef29a025ff1d6dd
#: ../../topics/pagination.txt:230
msgid ""
"You usually won't construct ``Page`` objects by hand -- you'll get them "
"using :meth:`Paginator.page`."
msgstr ""

# 2f75c9ed9d7d4cd8b69742f8159777f3
#: ../../topics/pagination.txt:244
msgid "Returns ``True`` if there's a next page."
msgstr ""

# 27e1e44dfe834ef2a9e1da6049ad2be0
#: ../../topics/pagination.txt:248
msgid "Returns ``True`` if there's a previous page."
msgstr ""

# fec526deacd44e9a815cabe7ce45c78c
#: ../../topics/pagination.txt:252
msgid "Returns ``True`` if there's a next *or* previous page."
msgstr ""

# d7b3c4315d85467fac9bc69b347ce3f7
#: ../../topics/pagination.txt:256
msgid ""
"Returns the next page number. Note that this is \"dumb\" and will return the "
"next page number regardless of whether a subsequent page exists."
msgstr ""

# 0ca37d20b5ce4ba28d89bccf1bae9207
#: ../../topics/pagination.txt:261
msgid ""
"Returns the previous page number. Note that this is \"dumb\" and will return "
"the previous page number regardless of whether a previous page exists."
msgstr ""

# fcd30663716f4e9681ccfe346ac2a4a5
#: ../../topics/pagination.txt:266
msgid ""
"Returns the 1-based index of the first object on the page, relative to all "
"of the objects in the paginator's list. For example, when paginating a list "
"of 5 objects with 2 objects per page, the second page's :meth:`~Page."
"start_index` would return ``3``."
msgstr ""

# 162a6f15b53e4e5b949f0cb6e3f617b1
#: ../../topics/pagination.txt:273
msgid ""
"Returns the 1-based index of the last object on the page, relative to all of "
"the objects in the paginator's list. For example, when paginating a list of "
"5 objects with 2 objects per page, the second page's :meth:`~Page.end_index` "
"would return ``4``."
msgstr ""

# 26971d285ed8493b8fef9d3e0f31700d
#: ../../topics/pagination.txt:283
msgid "The list of objects on this page."
msgstr ""

# f29f8ed984af4c71bf5b01aad79b917f
#: ../../topics/pagination.txt:287
msgid "The 1-based page number for this page."
msgstr ""

# 1e2caddb57464f48a0be58bd89cbfd09
#: ../../topics/pagination.txt:291
msgid "The associated :class:`Paginator` object."
msgstr ""

# 01710c8eace740049251eb159d409887
#: ../../topics/security.txt:3
msgid "Security in Django"
msgstr ""

# feceb1d7d49a4fa8b79fe189e595ec01
#: ../../topics/security.txt:5
msgid ""
"This document is an overview of Django's security features. It includes "
"advice on securing a Django-powered site."
msgstr ""

# 2ebfbd4c40d345798d53e92c729758e5
#: ../../topics/security.txt:11
msgid "Cross site scripting (XSS) protection"
msgstr ""

# 4c42b6d3f57f48548a2d041799c66c2a
#: ../../topics/security.txt:15
msgid ""
"XSS attacks allow a user to inject client side scripts into the browsers of "
"other users. This is usually achieved by storing the malicious scripts in "
"the database where it will be retrieved and displayed to other users, or by "
"getting users to click a link which will cause the attacker's JavaScript to "
"be executed by the user's browser. However, XSS attacks can originate from "
"any untrusted source of data, such as cookies or Web services, whenever the "
"data is not sufficiently sanitized before including in a page."
msgstr ""

# 074b8287b3af45178131cecb92c95a50
#: ../../topics/security.txt:23
msgid ""
"Using Django templates protects you against the majority of XSS attacks. "
"However, it is important to understand what protections it provides and its "
"limitations."
msgstr ""

# 732d179c00d3484a8dab4995f41ce0ba
#: ../../topics/security.txt:27
msgid ""
"Django templates :ref:`escape specific characters <automatic-html-escaping>` "
"which are particularly dangerous to HTML. While this protects users from "
"most malicious input, it is not entirely foolproof. For example, it will not "
"protect the following:"
msgstr ""

# b5ed04066bf14d5b9a10dbcb6230128c
#: ../../topics/security.txt:36
msgid ""
"If ``var`` is set to ``'class1 onmouseover=javascript:func()'``, this can "
"result in unauthorized JavaScript execution, depending on how the browser "
"renders imperfect HTML."
msgstr ""

# 11ed7f3d9b5b43daad09ad2eb68aac5d
#: ../../topics/security.txt:40
msgid ""
"It is also important to be particularly careful when using ``is_safe`` with "
"custom template tags, the :ttag:`safe` template tag, :mod:`mark_safe <django."
"utils.safestring>`, and when autoescape is turned off."
msgstr ""

# 7501617a78084d54bae1d44c4449e8f7
#: ../../topics/security.txt:44
msgid ""
"In addition, if you are using the template system to output something other "
"than HTML, there may be entirely separate characters and words which require "
"escaping."
msgstr ""

# 3f8b422ff4f04dc0a33b6e31155bf82f
#: ../../topics/security.txt:48
msgid ""
"You should also be very careful when storing HTML in the database, "
"especially when that HTML is retrieved and displayed."
msgstr ""

# 057dabc00d9447e1a6ac0eaa96717f0e
#: ../../topics/security.txt:52
msgid "Cross site request forgery (CSRF) protection"
msgstr ""

# 1446c84edbb74651911ddfaad3891a83
#: ../../topics/security.txt:54
msgid ""
"CSRF attacks allow a malicious user to execute actions using the credentials "
"of another user without that user's knowledge or consent."
msgstr ""

# 71b9cc5564ba4c3eaaca4c8513523db0
#: ../../topics/security.txt:57
msgid ""
"Django has built-in protection against most types of CSRF attacks, providing "
"you have :ref:`enabled and used it <using-csrf>` where appropriate. However, "
"as with any mitigation technique, there are limitations. For example, it is "
"possible to disable the CSRF module globally or for particular views. You "
"should only do this if you know what you are doing. There are other :ref:"
"`limitations <csrf-limitations>` if your site has subdomains that are "
"outside of your control."
msgstr ""

# 1de8748d86424dc8a79de1b913fc6ff3
#: ../../topics/security.txt:65
msgid ""
":ref:`CSRF protection works <how-csrf-works>` by checking for a nonce in "
"each POST request. This ensures that a malicious user cannot simply \"replay"
"\" a form POST to your Web site and have another logged in user unwittingly "
"submit that form. The malicious user would have to know the nonce, which is "
"user specific (using a cookie)."
msgstr ""

# 3ecb4256dacc4afb869cf0aad190c2ac
#: ../../topics/security.txt:71
msgid ""
"Be very careful with marking views with the ``csrf_exempt`` decorator unless "
"it is absolutely necessary."
msgstr ""

# 5f8ad8f6619d44f98803918f3203978f
#: ../../topics/security.txt:75
msgid "SQL injection protection"
msgstr ""

# d12796069407448e9e76e067ad6c37dc
#: ../../topics/security.txt:77
msgid ""
"SQL injection is a type of attack where a malicious user is able to execute "
"arbitrary SQL code on a database. This can result in records being deleted "
"or data leakage."
msgstr ""

# b730e39b788d411999636c5085792174
#: ../../topics/security.txt:81
msgid ""
"By using Django's querysets, the resulting SQL will be properly escaped by "
"the underlying database driver. However, Django also gives developers power "
"to write :ref:`raw queries <executing-raw-queries>` or execute :ref:`custom "
"sql <executing-custom-sql>`. These capabilities should be used sparingly and "
"you should always be careful to properly escape any parameters that the user "
"can control. In addition, you should exercise caution when using :meth:`extra"
"() <django.db.models.query.QuerySet.extra>`."
msgstr ""

# fe54e9862f96489882eeabd7a2478a7f
#: ../../topics/security.txt:90
msgid "Clickjacking protection"
msgstr ""

# 16224d50d09b4fe0a1f37b21980036a7
#: ../../topics/security.txt:92
msgid ""
"Clickjacking is a type of attack where a malicious site wraps another site "
"in a frame. This attack can result in an unsuspecting user being tricked "
"into performing unintended actions on the target site."
msgstr ""

# a667ee5089ec4c01b7d89f9546e7fbf5
#: ../../topics/security.txt:96
msgid ""
"Django contains :ref:`clickjacking protection <clickjacking-prevention>` in "
"the form of the :mod:`X-Frame-Options middleware <django.middleware."
"clickjacking.XFrameOptionsMiddleware>` which in a supporting browser can "
"prevent a site from being rendered inside a frame. It is possible to disable "
"the protection on a per view basis or to configure the exact header value "
"sent."
msgstr ""

# 657d40b5dce84e67b6dbc1875f1db2bf
#: ../../topics/security.txt:103
msgid ""
"The middleware is strongly recommended for any site that does not need to "
"have its pages wrapped in a frame by third party sites, or only needs to "
"allow that for a small section of the site."
msgstr ""

# 08f06765811545c4a16fbb7abefb7dc8
#: ../../topics/security.txt:108
msgid "SSL/HTTPS"
msgstr ""

# ef35a931be9c4a8a98f418678094ce61
#: ../../topics/security.txt:110
msgid ""
"It is always better for security, though not always practical in all cases, "
"to deploy your site behind HTTPS. Without this, it is possible for malicious "
"network users to sniff authentication credentials or any other information "
"transferred between client and server, and in some cases -- **active** "
"network attackers -- to alter data that is sent in either direction."
msgstr ""

# 9ede335cc7a34e1dbefa90c07083746f
#: ../../topics/security.txt:116
msgid ""
"If you want the protection that HTTPS provides, and have enabled it on your "
"server, there are some additional steps to consider to ensure that sensitive "
"information is not leaked:"
msgstr ""

# e0ebd8a97a6f49daa37f39eb047d6bdd
#: ../../topics/security.txt:120
msgid "Set up redirection so that requests over HTTP are redirected to HTTPS."
msgstr ""

# 9e9b80074b4e426fa86afa428cdb2b84
#: ../../topics/security.txt:122
msgid ""
"It is possible to do this with a piece of Django middleware. However, this "
"has problems for the common case of a Django app running behind a reverse "
"proxy. Often, reverse proxies are configured to set the ``X-Forwarded-SSL`` "
"header (or equivalent) if the incoming connection was HTTPS, and the absence "
"of this header could be used to detect a request that was not HTTPS. "
"However, this method usually cannot be relied on, as a client, or a "
"malicious active network attacker, could also set this header."
msgstr ""

# 9548e77992c34e4299b89829e4aee1cd
#: ../../topics/security.txt:130
msgid ""
"So, for the case of a reverse proxy, it is recommended that the main Web "
"server should be configured to do the redirect to HTTPS, or configured to "
"send HTTP requests to an app that unconditionally redirects to HTTPS."
msgstr ""

# 740f7f3323f6421ebdbf4f60378f0481
#: ../../topics/security.txt:134
msgid "Use 'secure' cookies."
msgstr ""

# 8184046c4dbc4119bc9ad90335efe02c
#: ../../topics/security.txt:136
msgid ""
"If a browser connects initially via HTTP, which is the default for most "
"browsers, it is possible for existing cookies to be leaked. For this reason, "
"you should set your :setting:`SESSION_COOKIE_SECURE` and :setting:"
"`CSRF_COOKIE_SECURE` settings to ``True``. This instructs the browser to "
"only send these cookies over HTTPS connections. Note that this will mean "
"that sessions will not work over HTTP, and the CSRF protection will prevent "
"any POST data being accepted over HTTP (which will be fine if you are "
"redirecting all HTTP traffic to HTTPS)."
msgstr ""

# cc993064009e46f79c40eda6945c7b4f
#: ../../topics/security.txt:148
msgid "Host headers and virtual hosting"
msgstr ""

# b0a864c7f5d5494797d0a7e8285d8d83
#: ../../topics/security.txt:150
msgid ""
"Django uses the ``Host`` header provided by the client to construct URLs in "
"certain cases. While these values are sanitized to prevent Cross Site "
"Scripting attacks, they can be used for Cross-Site Request Forgery and cache "
"poisoning attacks in some circumstances. We recommend you ensure your Web "
"server is configured such that:"
msgstr ""

# 52f05dab534648e699d7014a0231ee98
#: ../../topics/security.txt:156
msgid ""
"It always validates incoming HTTP ``Host`` headers against the expected host "
"name."
msgstr ""

# 378a20a02c3c4b7b85f63b08ede3e00d
#: ../../topics/security.txt:158
msgid "Disallows requests with no ``Host`` header."
msgstr ""

# 083901daded841f487510a6168cc210d
#: ../../topics/security.txt:159
msgid ""
"Is *not* configured with a catch-all virtual host that forwards requests to "
"a Django application."
msgstr ""

# 508b4ac31d2948b798e66a1bed6a20a4
#: ../../topics/security.txt:162
msgid ""
"Additionally, as of 1.3.1, Django requires you to explicitly enable support "
"for the ``X-Forwarded-Host`` header if your configuration requires it."
msgstr ""

# e90254912f5e4cb996e6887312760a39
#: ../../topics/security.txt:166
msgid "Additional security topics"
msgstr ""

# 249fc9a22628436aa598ed2c69710808
#: ../../topics/security.txt:168
msgid ""
"While Django provides good security protection out of the box, it is still "
"important to properly deploy your application and take advantage of the "
"security protection of the Web server, operating system and other components."
msgstr ""

# 6a12c797a1574048bd0a358aa3d27b64
#: ../../topics/security.txt:172
msgid ""
"Make sure that your Python code is outside of the Web server's root. This "
"will ensure that your Python code is not accidentally served as plain text "
"(or accidentally executed)."
msgstr ""

# d007543a190c41b0bd9f727c92846cf8
#: ../../topics/security.txt:175
msgid "Take care with any :ref:`user uploaded files <file-upload-security>`."
msgstr ""

# 0f4f5c65e0c747d4ad0037de668caf88
#: ../../topics/security.txt:176
msgid ""
"Django does not throttle requests to authenticate users. To protect against "
"brute-force attacks against the authentication system, you may consider "
"deploying a Django plugin or Web server module to throttle these requests."
msgstr ""

# 3fc2a527e50041ec80c27301debbbc29
#: ../../topics/security.txt:179
msgid ""
"If your site accepts file uploads, it is strongly advised that you limit "
"these uploads in your Web server configuration to a reasonable size in order "
"to prevent denial of service (DOS) attacks. In Apache, this can be easily "
"set using the LimitRequestBody_ directive."
msgstr ""

# 92f6b9d9dca044b28da22bccc79cb435
#: ../../topics/security.txt:183
msgid "Keep your :setting:`SECRET_KEY` a secret."
msgstr ""

# 1ec1ef68228f4fd5a3ce0a6471af8281
#: ../../topics/security.txt:184
msgid ""
"It is a good idea to limit the accessibility of your caching system and "
"database using a firewall."
msgstr ""

# 13327814d8b947f6a3031ed2c082bda9
#: ../../topics/serialization.txt:3
msgid "Serializing Django objects"
msgstr ""

# 6b06f3a9d6d2457cb57e42af30538f48
#: ../../topics/serialization.txt:5
msgid ""
"Django's serialization framework provides a mechanism for \"translating\" "
"Django objects into other formats. Usually these other formats will be text-"
"based and used for sending Django objects over a wire, but it's possible for "
"a serializer to handle any format (text-based or not)."
msgstr ""

# 306fc89318d34cb9b0912e921e15e46b
#: ../../topics/serialization.txt:12
msgid ""
"If you just want to get some data from your tables into a serialized form, "
"you could use the :djadmin:`dumpdata` management command."
msgstr ""

# f72acfd1adbe4b2db361b88b93d49a87
#: ../../topics/serialization.txt:16
msgid "Serializing data"
msgstr ""

# 22868d991cec4eaaa0edbc2c30d6473f
#: ../../topics/serialization.txt:18
msgid "At the highest level, serializing data is a very simple operation::"
msgstr ""

# 68912a21cf3248e6a458a97bd2d95733
#: ../../topics/serialization.txt:23
msgid ""
"The arguments to the ``serialize`` function are the format to serialize the "
"data to (see `Serialization formats`_) and a :class:`~django.db.models.query."
"QuerySet` to serialize. (Actually, the second argument can be any iterator "
"that yields Django objects, but it'll almost always be a QuerySet)."
msgstr ""

# 08340e652a764aa2965870407de440e9
#: ../../topics/serialization.txt:29
msgid "You can also use a serializer object directly::"
msgstr ""

# 10cccf3827fd4df7928df41750d3ad8d
#: ../../topics/serialization.txt:36
msgid ""
"This is useful if you want to serialize data directly to a file-like object "
"(which includes an :class:`~django.http.HttpResponse`)::"
msgstr ""

# 2c71da340b344264878d260b108f226c
#: ../../topics/serialization.txt:44
msgid ""
"Calling :func:`~django.core.serializers.get_serializer` with an unknown :ref:"
"`format <serialization-formats>` will raise a :class:`~django.core."
"serializers.SerializerDoesNotExist` exception."
msgstr ""

# d63c7827e674402494cea9fe800ca694
#: ../../topics/serialization.txt:49
msgid "Subset of fields"
msgstr ""

# 7764f26e4d144db6bc1db50de7ba7a0e
#: ../../topics/serialization.txt:51
msgid ""
"If you only want a subset of fields to be serialized, you can specify a "
"``fields`` argument to the serializer::"
msgstr ""

# 124a9f130fc349a3b391056aeb36bdf6
#: ../../topics/serialization.txt:57
msgid ""
"In this example, only the ``name`` and ``size`` attributes of each model "
"will be serialized."
msgstr ""

# a286cf57a5514454b4e81133d2df3307
#: ../../topics/serialization.txt:62
msgid ""
"Depending on your model, you may find that it is not possible to deserialize "
"a model that only serializes a subset of its fields. If a serialized object "
"doesn't specify all the fields that are required by a model, the "
"deserializer will not be able to save deserialized instances."
msgstr ""

# e408e556473a469eae484a06a0c4f5dc
#: ../../topics/serialization.txt:68
msgid "Inherited Models"
msgstr ""

# 5450d3243ab04590a566a2d8a1cd8132
#: ../../topics/serialization.txt:70
msgid ""
"If you have a model that is defined using an :ref:`abstract base class "
"<abstract-base-classes>`, you don't have to do anything special to serialize "
"that model. Just call the serializer on the object (or objects) that you "
"want to serialize, and the output will be a complete representation of the "
"serialized object."
msgstr ""

# 3b865cfde35c43139e2a5c871cbd432a
#: ../../topics/serialization.txt:76
msgid ""
"However, if you have a model that uses :ref:`multi-table inheritance <multi-"
"table-inheritance>`, you also need to serialize all of the base classes for "
"the model. This is because only the fields that are locally defined on the "
"model will be serialized. For example, consider the following models::"
msgstr ""

# 0434a3eaeaf246048247a153d7c604ad
#: ../../topics/serialization.txt:87
msgid "If you only serialize the Restaurant model::"
msgstr ""

# 2b3601bd143f4fb591f707ace4208b1c
#: ../../topics/serialization.txt:91
msgid ""
"the fields on the serialized output will only contain the `serves_hot_dogs` "
"attribute. The `name` attribute of the base class will be ignored."
msgstr ""

# ebe104c178e4457785bdc3f6b4acbb63
#: ../../topics/serialization.txt:94
msgid ""
"In order to fully serialize your Restaurant instances, you will need to "
"serialize the Place models as well::"
msgstr ""

# 90da3ec0d2c3441c968e25a81af7084e
#: ../../topics/serialization.txt:101
msgid "Deserializing data"
msgstr ""

# 253b826abb9c49129a14a5513612f211
#: ../../topics/serialization.txt:103
msgid "Deserializing data is also a fairly simple operation::"
msgstr ""

# f702df4b42bc4e4dbc7aa48a64978645
#: ../../topics/serialization.txt:108
msgid ""
"As you can see, the ``deserialize`` function takes the same format argument "
"as ``serialize``, a string or stream of data, and returns an iterator."
msgstr ""

# a607096ce00e468d8de3c2c61b169f23
#: ../../topics/serialization.txt:111
msgid ""
"However, here it gets slightly complicated. The objects returned by the "
"``deserialize`` iterator *aren't* simple Django objects. Instead, they are "
"special ``DeserializedObject`` instances that wrap a created -- but unsaved "
"-- object and any associated relationship data."
msgstr ""

# b9d7b97a84f94dd787ff48a8edec142e
#: ../../topics/serialization.txt:116
msgid "Calling ``DeserializedObject.save()`` saves the object to the database."
msgstr ""

# 5037448ad33e4aba83809c4ebb2dbca1
#: ../../topics/serialization.txt:118
msgid ""
"This ensures that deserializing is a non-destructive operation even if the "
"data in your serialized representation doesn't match what's currently in the "
"database. Usually, working with these ``DeserializedObject`` instances looks "
"something like::"
msgstr ""

# 294e106a3f97457fafd2febf7fcc2368
#: ../../topics/serialization.txt:127
msgid ""
"In other words, the usual use is to examine the deserialized objects to make "
"sure that they are \"appropriate\" for saving before doing so.  Of course, "
"if you trust your data source you could just save the object and move on."
msgstr ""

# 23b582f60e25425dbb8510a17fcaac4a
#: ../../topics/serialization.txt:131
msgid ""
"The Django object itself can be inspected as ``deserialized_object.object``."
msgstr ""

# c1bbba8f82bd4aa59b61d96f2bc08930
#: ../../topics/serialization.txt:136
msgid "Serialization formats"
msgstr ""

# 4b5c6962eeae4a31b1f48fe1d00f2bba
#: ../../topics/serialization.txt:138
msgid ""
"Django supports a number of serialization formats, some of which require you "
"to install third-party Python modules:"
msgstr ""

# 38ffc17dd2fa4c9c85139f6ccf7140e1
#: ../../topics/serialization.txt:142
msgid "Identifier"
msgstr ""

# 89975c5f3e93458eb6f3e350d554f884
#: ../../topics/serialization.txt:142
msgid "Information"
msgstr ""

# fcb5113cbb9f4169932bc449c9ab940b
#: ../../topics/serialization.txt:144
msgid "``xml``"
msgstr ""

# c3d0637a203846b8adfecdc3ee104236
#: ../../topics/serialization.txt:144
msgid "Serializes to and from a simple XML dialect."
msgstr ""

# 2abbb01a917a47989d99ef4f15290c86
#: ../../topics/serialization.txt:146
msgid "``json``"
msgstr ""

# b84185db19ff483d97dc07db50ad6394
#: ../../topics/serialization.txt:146
msgid ""
"Serializes to and from JSON_ (using a version of simplejson_ bundled with "
"Django)."
msgstr ""

# 3313e6f2cfb94419b763f98038af7575
#: ../../topics/serialization.txt:149
msgid "``yaml``"
msgstr ""

# 48f756a96c4847b282a70b7f74927c37
#: ../../topics/serialization.txt:149
msgid ""
"Serializes to YAML (YAML Ain't a Markup Language). This serializer is only "
"available if PyYAML_ is installed."
msgstr ""

# aa04f0977aef4d7cbf5fc1509cbac515
#: ../../topics/serialization.txt:158
msgid "Notes for specific serialization formats"
msgstr ""

# 466c47d96be44aca92f3bd9ae9946e7e
#: ../../topics/serialization.txt:161
msgid "json"
msgstr ""

# aae7f7724da54d5dbd7bd4e90bba46a6
#: ../../topics/serialization.txt:163
msgid ""
"If you're using UTF-8 (or any other non-ASCII encoding) data with the JSON "
"serializer, you must pass ``ensure_ascii=False`` as a parameter to the "
"``serialize()`` call. Otherwise, the output won't be encoded correctly."
msgstr ""

# 8e6a43bc9f9742fb883b65ee7936565f
#: ../../topics/serialization.txt:172
msgid ""
"The Django source code includes the simplejson_ module. However, if you're "
"using Python 2.6 or later (which includes a builtin version of the module), "
"Django will use the builtin ``json`` module automatically. If you have a "
"system installed version that includes the C-based speedup extension, or "
"your system version is more recent than the version shipped with Django "
"(currently, 2.0.7), the system version will be used instead of the version "
"included with Django."
msgstr ""

# 7c0b03e7695e47ca9210c5d3cfa22e6b
#: ../../topics/serialization.txt:179
msgid ""
"Be aware that if you're serializing using that module directly, not all "
"Django output can be passed unmodified to simplejson. In particular, :ref:"
"`lazy translation objects <lazy-translations>` need a `special encoder`_ "
"written for them. Something like this will work::"
msgstr ""

# b10e7dbca8ae4c3097a5b29ddc2a951f
#: ../../topics/serialization.txt:198
msgid "Natural keys"
msgstr ""

# 26ba00a5805247578b7f871f07da16f4
#: ../../topics/serialization.txt:205
msgid ""
"The default serialization strategy for foreign keys and many-to-many "
"relations is to serialize the value of the primary key(s) of the objects in "
"the relation. This strategy works well for most objects, but it can cause "
"difficulty in some circumstances."
msgstr ""

# 258dcc1603dc49489e5ee4cc33735ad1
#: ../../topics/serialization.txt:210
msgid ""
"Consider the case of a list of objects that have a foreign key referencing :"
"class:`~django.contrib.conttenttypes.models.ContentType`. If you're going to "
"serialize an object that refers to a content type, then you need to have a "
"way to refer to that content type to begin with. Since ``ContentType`` "
"objects are automatically created by Django during the database "
"synchronization process, the primary key of a given content type isn't easy "
"to predict; it will depend on how and when :djadmin:`syncdb` was executed. "
"This is true for all models which automatically generate objects, notably "
"including :class:`~django.contrib.auth.models.Permission`, :class:`~django."
"contrib.auth.models.Group`, and :class:`~django.contrib.auth.models.User`."
msgstr ""

# bab2772544b34afcbbc7f4e19c63b94a
#: ../../topics/serialization.txt:224
msgid ""
"You should never include automatically generated objects in a fixture or "
"other serialized data. By chance, the primary keys in the fixture may match "
"those in the database and loading the fixture will have no effect. In the "
"more likely case that they don't match, the fixture loading will fail with "
"an :class:`~django.db.IntegrityError`."
msgstr ""

# 1b5ec85685f9416fa7825342cd521958
#: ../../topics/serialization.txt:230
msgid ""
"There is also the matter of convenience. An integer id isn't always the most "
"convenient way to refer to an object; sometimes, a more natural reference "
"would be helpful."
msgstr ""

# dbd9c8bc89af473a8c24cc9f6eb72105
#: ../../topics/serialization.txt:234
msgid ""
"It is for these reasons that Django provides *natural keys*. A natural key "
"is a tuple of values that can be used to uniquely identify an object "
"instance without using the primary key value."
msgstr ""

# 64e0feb6c4364e0281ae6aae0a57d9c1
#: ../../topics/serialization.txt:239
msgid "Deserialization of natural keys"
msgstr ""

# 3d6f0a8211bf44be803655520512f025
#: ../../topics/serialization.txt:241
msgid "Consider the following two models::"
msgstr ""

# 1b4e559f1dc04f90a480d6320aaae854
#: ../../topics/serialization.txt:258
msgid ""
"Ordinarily, serialized data for ``Book`` would use an integer to refer to "
"the author. For example, in JSON, a Book might be serialized as::"
msgstr ""

# d6f873ad38ab474a98dfd3781b8bb8bc
#: ../../topics/serialization.txt:272
msgid ""
"This isn't a particularly natural way to refer to an author. It requires "
"that you know the primary key value for the author; it also requires that "
"this primary key value is stable and predictable."
msgstr ""

# 8d1ed87c511e439dbe9a1a2f084162e3
#: ../../topics/serialization.txt:276
msgid ""
"However, if we add natural key handling to Person, the fixture becomes much "
"more humane. To add natural key handling, you define a default Manager for "
"Person with a ``get_by_natural_key()`` method. In the case of a Person, a "
"good natural key might be the pair of first and last name::"
msgstr ""

# 017df4d3e65e482b9a414b13a21c5068
#: ../../topics/serialization.txt:299
msgid "Now books can use that natural key to refer to ``Person`` objects::"
msgstr ""

# 344566967c5d400192da248ae5d9c361
#: ../../topics/serialization.txt:312
msgid ""
"When you try to load this serialized data, Django will use the "
"``get_by_natural_key()`` method to resolve ``[\"Douglas\", \"Adams\"]`` into "
"the primary key of an actual ``Person`` object."
msgstr ""

# 8b016327f4b044d59ea576d74e7eea5c
#: ../../topics/serialization.txt:318
msgid ""
"Whatever fields you use for a natural key must be able to uniquely identify "
"an object. This will usually mean that your model will have a uniqueness "
"clause (either unique=True on a single field, or ``unique_together`` over "
"multiple fields) for the field or fields in your natural key. However, "
"uniqueness doesn't need to be enforced at the database level. If you are "
"certain that a set of fields will be effectively unique, you can still use "
"those fields as a natural key."
msgstr ""

# b5df1484ce734cdbb15a2f5dd7ece612
#: ../../topics/serialization.txt:328
msgid "Serialization of natural keys"
msgstr ""

# a9318480debc43e1b91f264cd16a41a6
#: ../../topics/serialization.txt:330
msgid ""
"So how do you get Django to emit a natural key when serializing an object? "
"Firstly, you need to add another method -- this time to the model itself::"
msgstr ""

# 8c711a0d5ebc4f27bd593ae59b4d9df2
#: ../../topics/serialization.txt:347
msgid ""
"That method should always return a natural key tuple -- in this example, ``"
"(first name, last name)``. Then, when you call ``serializers.serialize()``, "
"you provide a ``use_natural_keys=True`` argument::"
msgstr ""

# 4a679ab06ae84752b7a48a0a8d53a839
#: ../../topics/serialization.txt:354
msgid ""
"When ``use_natural_keys=True`` is specified, Django will use the "
"``natural_key()`` method to serialize any reference to objects of the type "
"that defines the method."
msgstr ""

# e4c9c1c0182d46a0aa807f9a767dc18d
#: ../../topics/serialization.txt:358
msgid ""
"If you are using :djadmin:`dumpdata` to generate serialized data, you use "
"the `--natural` command line flag to generate natural keys."
msgstr ""

# 8f629f6a27474855ae683140d9b0c784
#: ../../topics/serialization.txt:363
msgid ""
"You don't need to define both ``natural_key()`` and ``get_by_natural_key()"
"``. If you don't want Django to output natural keys during serialization, "
"but you want to retain the ability to load natural keys, then you can opt to "
"not implement the ``natural_key()`` method."
msgstr ""

# 3cf60085d3cf4d6ca93bc216b4ae2406
#: ../../topics/serialization.txt:369
msgid ""
"Conversely, if (for some strange reason) you want Django to output natural "
"keys during serialization, but *not* be able to load those key values, just "
"don't define the ``get_by_natural_key()`` method."
msgstr ""

# 921a96b3280c4981a35d8410e219171e
#: ../../topics/serialization.txt:374
msgid "Dependencies during serialization"
msgstr ""

# 523d8575a8a44d29a70ae91b5ea28541
#: ../../topics/serialization.txt:376
msgid ""
"Since natural keys rely on database lookups to resolve references, it is "
"important that the data exists before it is referenced. You can't make a "
"`forward reference` with natural keys -- the data you're referencing must "
"exist before you include a natural key reference to that data."
msgstr ""

# 55ef5c8186c54ce78dd3959592df0d43
#: ../../topics/serialization.txt:381
msgid ""
"To accommodate this limitation, calls to :djadmin:`dumpdata` that use the :"
"djadminopt:`--natural` option will serialize any model with a ``natural_key()"
"`` method before serializing standard primary key objects."
msgstr ""

# 522c00b2ad6a45748e0b9dcf5119f9b9
#: ../../topics/serialization.txt:385
msgid ""
"However, this may not always be enough. If your natural key refers to "
"another object (by using a foreign key or natural key to another object as "
"part of a natural key), then you need to be able to ensure that the objects "
"on which a natural key depends occur in the serialized data before the "
"natural key requires them."
msgstr ""

# 5b86508b384642fbb97774896386565b
#: ../../topics/serialization.txt:391
msgid ""
"To control this ordering, you can define dependencies on your ``natural_key()"
"`` methods. You do this by setting a ``dependencies`` attribute on the "
"``natural_key()`` method itself."
msgstr ""

# 485c93f450dd43a9bdc50b8f57c730f5
#: ../../topics/serialization.txt:395
msgid ""
"For example, let's add a natural key to the ``Book`` model from the example "
"above::"
msgstr ""

# fc57af4d10384937809fde41b0e9ab4e
#: ../../topics/serialization.txt:405
msgid ""
"The natural key for a ``Book`` is a combination of its name and its author. "
"This means that ``Person`` must be serialized before ``Book``. To define "
"this dependency, we add one extra line::"
msgstr ""

# 323467f04df9408cbcf5adf433319d49
#: ../../topics/serialization.txt:413
msgid ""
"This definition ensures that all ``Person`` objects are serialized before "
"any ``Book`` objects. In turn, any object referencing ``Book`` will be "
"serialized after both ``Person`` and ``Book`` have been serialized."
msgstr ""

# 0b9fd37c3e1e46d3959b16bfef01e832
#: ../../topics/settings.txt:3
msgid "Django settings"
msgstr ""

# ebcce2a392624b91998092fbe9d9b0bf
#: ../../topics/settings.txt:5
msgid ""
"A Django settings file contains all the configuration of your Django "
"installation. This document explains how settings work and which settings "
"are available."
msgstr ""

# 12f5226abce74eb49195a30f7e835e04
#: ../../topics/settings.txt:10
msgid "The basics"
msgstr ""

# a71a17bb2d7f4db7954e5cd1ac939c9e
#: ../../topics/settings.txt:12
msgid "A settings file is just a Python module with module-level variables."
msgstr ""

# c8651f99061a4c3783178837cbb14d5a
#: ../../topics/settings.txt:14
msgid "Here are a couple of example settings::"
msgstr ""

# 3dc0b9bbe5034fd68293fce6ae5e0210
#: ../../topics/settings.txt:20
msgid "Because a settings file is a Python module, the following apply:"
msgstr ""

# f0d99d037da2438b98d4d755894613d3
#: ../../topics/settings.txt:22
msgid "It doesn't allow for Python syntax errors."
msgstr ""

# e729e7cc7f3e4d4cacaa328761bc4cc9
#: ../../topics/settings.txt:23
msgid ""
"It can assign settings dynamically using normal Python syntax. For example::"
msgstr ""

# b095318d030e4c0ea0cde7e1c097a4ee
#: ../../topics/settings.txt:28
msgid "It can import values from other settings files."
msgstr ""

# a9df0b28f86245aca79c535270058bfd
#: ../../topics/settings.txt:33
msgid "Designating the settings"
msgstr ""

# 3874113e790c4af285b48dcf8a7da8f9
#: ../../topics/settings.txt:35
msgid ""
"When you use Django, you have to tell it which settings you're using. Do "
"this by using an environment variable, ``DJANGO_SETTINGS_MODULE``."
msgstr ""

# 58e468bf395c4e0c96321850f81c02db
#: ../../topics/settings.txt:38
msgid ""
"The value of ``DJANGO_SETTINGS_MODULE`` should be in Python path syntax, e."
"g. ``mysite.settings``. Note that the settings module should be on the "
"Python `import search path`_."
msgstr ""

# dec5d2b08ef74a33a5e2f6b1b5150d6f
#: ../../topics/settings.txt:45
msgid "The django-admin.py utility"
msgstr ""

# dc1fc0ec5b9e4e44b6c364073c271fb1
#: ../../topics/settings.txt:47
msgid ""
"When using :doc:`django-admin.py </ref/django-admin>`, you can either set "
"the environment variable once, or explicitly pass in the settings module "
"each time you run the utility."
msgstr ""

# 19168f82c3cf42bd95ebca3c3ac27630
#: ../../topics/settings.txt:51
msgid "Example (Unix Bash shell)::"
msgstr ""

# b1c943e38dd44b07acf39f1cdb660750
#: ../../topics/settings.txt:56
msgid "Example (Windows shell)::"
msgstr ""

# 355be8b229794c5d86853fbe4b0585ee
#: ../../topics/settings.txt:61
msgid ""
"Use the ``--settings`` command-line argument to specify the settings "
"manually::"
msgstr ""

# 5d41511391a148c6b53f06358c028c30
#: ../../topics/settings.txt:68
msgid "On the server (mod_wsgi)"
msgstr ""

# 158444c5be8a457db6dba7c4eab7782c
#: ../../topics/settings.txt:70
msgid ""
"In your live server environment, you'll need to tell your WSGI application "
"what settings file to use. Do that with ``os.environ``::"
msgstr ""

# ff1a87ce89b6425685a3735f17abc9c8
#: ../../topics/settings.txt:77
msgid ""
"Read the :doc:`Django mod_wsgi documentation </howto/deployment/wsgi/"
"modwsgi>` for more information and other common elements to a Django WSGI "
"application."
msgstr ""

# 594d01bdfb2b44eb963beb7817d75d25
#: ../../topics/settings.txt:82
msgid "Default settings"
msgstr ""

# 8c72cff8eb28418bae6bed80f4b4f346
#: ../../topics/settings.txt:84
msgid ""
"A Django settings file doesn't have to define any settings if it doesn't "
"need to. Each setting has a sensible default value. These defaults live in "
"the module :file:`django/conf/global_settings.py`."
msgstr ""

# 04328251f1974b0cb26e3605ba3a37b1
#: ../../topics/settings.txt:88
msgid "Here's the algorithm Django uses in compiling settings:"
msgstr ""

# d17b684696024ec1bed8dc1f4fbac93e
#: ../../topics/settings.txt:90
msgid "Load settings from ``global_settings.py``."
msgstr ""

# 134ad3ede2af4751973954d296617967
#: ../../topics/settings.txt:91
msgid ""
"Load settings from the specified settings file, overriding the global "
"settings as necessary."
msgstr ""

# 0448f78266fc4feca0aae377f574a0bf
#: ../../topics/settings.txt:94
msgid ""
"Note that a settings file should *not* import from ``global_settings``, "
"because that's redundant."
msgstr ""

# 883885a0c607463090f86d26b99ef42f
#: ../../topics/settings.txt:98
msgid "Seeing which settings you've changed"
msgstr ""

# ff2fd4680a3348bbb7091ea25cb05453
#: ../../topics/settings.txt:100
msgid ""
"There's an easy way to view which of your settings deviate from the default "
"settings. The command ``python manage.py diffsettings`` displays differences "
"between the current settings file and Django's default settings."
msgstr ""

# 3d905f43c2ce41ce8e0eb3aa397840b9
#: ../../topics/settings.txt:104
msgid "For more, see the :djadmin:`diffsettings` documentation."
msgstr ""

# cb0fc769e5c74ddbba5a3a3f289098de
#: ../../topics/settings.txt:107
msgid "Using settings in Python code"
msgstr ""

# 0b2f2f5c3431434fa83e892c2ba8dd8c
#: ../../topics/settings.txt:109
msgid ""
"In your Django apps, use settings by importing the object ``django.conf."
"settings``. Example::"
msgstr ""

# b5c8cc62980b4fa7baf63d39aeb81a47
#: ../../topics/settings.txt:117
msgid ""
"Note that ``django.conf.settings`` isn't a module -- it's an object. So "
"importing individual settings is not possible::"
msgstr ""

# 35547d68948e4f148c1f6219e44c34a5
#: ../../topics/settings.txt:122
msgid ""
"Also note that your code should *not* import from either ``global_settings`` "
"or your own settings file. ``django.conf.settings`` abstracts the concepts "
"of default settings and site-specific settings; it presents a single "
"interface. It also decouples the code that uses settings from the location "
"of your settings."
msgstr ""

# 9563d553a1654ec68422e168afc677b2
#: ../../topics/settings.txt:129
msgid "Altering settings at runtime"
msgstr ""

# b36029bdd85b49388d105b9e4ce899fb
#: ../../topics/settings.txt:131
msgid ""
"You shouldn't alter settings in your applications at runtime. For example, "
"don't do this in a view::"
msgstr ""

# df93983b08e9480387f92d298bf77986
#: ../../topics/settings.txt:138
msgid "The only place you should assign to settings is in a settings file."
msgstr ""

# cd097b3a6aab4256a7f2ca077d25d8e4
#: ../../topics/settings.txt:141
msgid "Security"
msgstr ""

# 0ccd009a556f406f804091b64bbd6688
#: ../../topics/settings.txt:143
msgid ""
"Because a settings file contains sensitive information, such as the database "
"password, you should make every attempt to limit access to it. For example, "
"change its file permissions so that only you and your Web server's user can "
"read it. This is especially important in a shared-hosting environment."
msgstr ""

# 91c917b9a9474ec0937848dd46fbb540
#: ../../topics/settings.txt:149
msgid "Available settings"
msgstr ""

# 81b2950ffbac48d9b273a0b78396dde2
#: ../../topics/settings.txt:151
msgid ""
"For a full list of available settings, see the :doc:`settings reference </"
"ref/settings>`."
msgstr ""

# 0b8ef2a097c445b9a59d7b820698a002
#: ../../topics/settings.txt:154
msgid "Creating your own settings"
msgstr ""

# 97bfcc733c3d4b3b83cfbdfe716488ab
#: ../../topics/settings.txt:156
msgid ""
"There's nothing stopping you from creating your own settings, for your own "
"Django apps. Just follow these conventions:"
msgstr ""

# 77dc9acb125e4e74a1f966e814fde549
#: ../../topics/settings.txt:159
msgid "Setting names are in all uppercase."
msgstr ""

# 24228d6d6c6c4890a0afc77e075ff604
#: ../../topics/settings.txt:160
msgid "Don't reinvent an already-existing setting."
msgstr ""

# baeff1e2d0ec4a9bb9dd52182d978a4f
#: ../../topics/settings.txt:162
msgid ""
"For settings that are sequences, Django itself uses tuples, rather than "
"lists, but this is only a convention."
msgstr ""

# 70a3a146d7564f3eb33e8bf145a756f2
#: ../../topics/settings.txt:168
msgid "Using settings without setting DJANGO_SETTINGS_MODULE"
msgstr ""

# bca44b2309e54bc8a029bc1829de3b15
#: ../../topics/settings.txt:170
msgid ""
"In some cases, you might want to bypass the ``DJANGO_SETTINGS_MODULE`` "
"environment variable. For example, if you're using the template system by "
"itself, you likely don't want to have to set up an environment variable "
"pointing to a settings module."
msgstr ""

# 737b5053da494d3b8e95980bb8c1da75
#: ../../topics/settings.txt:175
msgid ""
"In these cases, you can configure Django's settings manually. Do this by "
"calling:"
msgstr ""

# 05646fba7a834ec4bbeb11cb2eb83673
#: ../../topics/settings.txt:187
msgid ""
"Pass ``configure()`` as many keyword arguments as you'd like, with each "
"keyword argument representing a setting and its value. Each argument name "
"should be all uppercase, with the same name as the settings described above. "
"If a particular setting is not passed to ``configure()`` and is needed at "
"some later point, Django will use the default setting value."
msgstr ""

# 61250eb1e1f541c4939fe7fea9e8bb5c
#: ../../topics/settings.txt:193
msgid ""
"Configuring Django in this fashion is mostly necessary -- and, indeed, "
"recommended -- when you're using a piece of the framework inside a larger "
"application."
msgstr ""

# 1377e492e5584412a7a4accd310d6075
#: ../../topics/settings.txt:197
msgid ""
"Consequently, when configured via ``settings.configure()``, Django will not "
"make any modifications to the process environment variables (see the "
"documentation of :setting:`TIME_ZONE` for why this would normally occur). "
"It's assumed that you're already in full control of your environment in "
"these cases."
msgstr ""

# 0455c0fb4a6a45e1a7717af10993eb4e
#: ../../topics/settings.txt:204
msgid "Custom default settings"
msgstr ""

# a9aa3d692dd14f5e9b91afe4ba022674
#: ../../topics/settings.txt:206
msgid ""
"If you'd like default values to come from somewhere other than ``django.conf."
"global_settings``, you can pass in a module or class that provides the "
"default settings as the ``default_settings`` argument (or as the first "
"positional argument) in the call to ``configure()``."
msgstr ""

# 07b2dbea3e1f46239b122fcc33cab339
#: ../../topics/settings.txt:211
msgid ""
"In this example, default settings are taken from ``myapp_defaults``, and "
"the :setting:`DEBUG` setting is set to ``True``, regardless of its value in "
"``myapp_defaults``::"
msgstr ""

# e50315d17cca4143ba3d84bfa23196b4
#: ../../topics/settings.txt:220
msgid ""
"The following example, which uses ``myapp_defaults`` as a positional "
"argument, is equivalent::"
msgstr ""

# 9858c90d576d4d1f834b2a178484c49e
#: ../../topics/settings.txt:225
msgid ""
"Normally, you will not need to override the defaults in this fashion. The "
"Django defaults are sufficiently tame that you can safely use them. Be aware "
"that if you do pass in a new default module, it entirely *replaces* the "
"Django defaults, so you must specify a value for every possible setting that "
"might be used in that code you are importing. Check in ``django.conf."
"settings.global_settings`` for the full list."
msgstr ""

# 9c3eac643f664b2c8fbf4b163d8cbef0
#: ../../topics/settings.txt:233
msgid "Either configure() or DJANGO_SETTINGS_MODULE is required"
msgstr ""

# fbca423e9c4b465e87fa875eb9b7748a
#: ../../topics/settings.txt:235
msgid ""
"If you're not setting the ``DJANGO_SETTINGS_MODULE`` environment variable, "
"you *must* call ``configure()`` at some point before using any code that "
"reads settings."
msgstr ""

# d018f32ba8ae453798c4c70708767321
#: ../../topics/settings.txt:239
msgid ""
"If you don't set ``DJANGO_SETTINGS_MODULE`` and don't call ``configure()``, "
"Django will raise an ``ImportError`` exception the first time a setting is "
"accessed."
msgstr ""

# d03eaf93257240719e78ae1cd3130220
#: ../../topics/settings.txt:243
msgid ""
"If you set ``DJANGO_SETTINGS_MODULE``, access settings values somehow, "
"*then* call ``configure()``, Django will raise a ``RuntimeError`` indicating "
"that settings have already been configured."
msgstr ""

# a0910d98e8964c3fb86d3d86dd83ca80
#: ../../topics/settings.txt:247
msgid ""
"Also, it's an error to call ``configure()`` more than once, or to call "
"``configure()`` after any setting has been accessed."
msgstr ""

# 41fa11881c3b4669ade532e81e934320
#: ../../topics/settings.txt:250
msgid ""
"It boils down to this: Use exactly one of either ``configure()`` or "
"``DJANGO_SETTINGS_MODULE``. Not both, and not neither."
msgstr ""

# c78fdcbb922b4f28a6cc5d6eeae47aa8
#: ../../topics/signals.txt:3
msgid "Signals"
msgstr ""

# 5e091cd899e144df92ce25bd458d695e
#: ../../topics/signals.txt:8
msgid ""
"Django includes a \"signal dispatcher\" which helps allow decoupled "
"applications get notified when actions occur elsewhere in the framework. In "
"a nutshell, signals allow certain *senders* to notify a set of *receivers* "
"that some action has taken place. They're especially useful when many pieces "
"of code may be interested in the same events."
msgstr ""

# 64059dcb1d6c4804b0c7e45b52bdc409
#: ../../topics/signals.txt:14
msgid ""
"Django provides a :doc:`set of built-in signals </ref/signals>` that let "
"user code get notified by Django itself of certain actions. These include "
"some useful notifications:"
msgstr ""

# b3c9afcc72a34b21a76c6b0aa11ab8e6
#: ../../topics/signals.txt:18
msgid ""
":data:`django.db.models.signals.pre_save` & :data:`django.db.models.signals."
"post_save`"
msgstr ""

# fc659844019941ed9f2e64e7f98badac
#: ../../topics/signals.txt:21
msgid ""
"Sent before or after a model's :meth:`~django.db.models.Model.save` method "
"is called."
msgstr ""

# a62fc740c10d45e4aac26e792cad9f58
#: ../../topics/signals.txt:24
msgid ""
":data:`django.db.models.signals.pre_delete` & :data:`django.db.models."
"signals.post_delete`"
msgstr ""

# 03eff8927fa148f4b5e2d73a39bbd47c
#: ../../topics/signals.txt:27
msgid ""
"Sent before or after a model's :meth:`~django.db.models.Model.delete` method "
"or queryset's :meth:`~django.db.models.query.QuerySet.delete` method is "
"called."
msgstr ""

# e3cc33b1806547b49f5b44cb1cacaab9
#: ../../topics/signals.txt:31
msgid ":data:`django.db.models.signals.m2m_changed`"
msgstr ""

# 4dc4a7966a254740b91e2caffefdcd76
#: ../../topics/signals.txt:33
msgid "Sent when a :class:`ManyToManyField` on a model is changed."
msgstr ""

# 8c4d0325802f43e49887b5282fad62a0
#: ../../topics/signals.txt:35
msgid ""
":data:`django.core.signals.request_started` & :data:`django.core.signals."
"request_finished`"
msgstr ""

# 81342c3b7cac4035b4f23f50c84b9597
#: ../../topics/signals.txt:38
msgid "Sent when Django starts or finishes an HTTP request."
msgstr ""

# 88f21ea301d8412a9ae4699c10884bf9
#: ../../topics/signals.txt:40
msgid ""
"See the :doc:`built-in signal documentation </ref/signals>` for a complete "
"list, and a complete explanation of each signal."
msgstr ""

# 2a4399e78e4f464c9c0c2ce0e1879efa
#: ../../topics/signals.txt:43
msgid "You can also `define and send your own custom signals`_; see below."
msgstr ""

# 5e201685f4c84b8f9b86024a04239bf3
#: ../../topics/signals.txt:48
msgid "Listening to signals"
msgstr ""

# 579d8c1759cb46fc89b9464e9c918b3c
#: ../../topics/signals.txt:50
msgid ""
"To receive a signal, you need to register a *receiver* function that gets "
"called when the signal is sent by using the :meth:`.Signal.connect` method:"
msgstr ""

# 2491970c5421419aa93848f54f3d3967
#: ../../topics/signals.txt:71
msgid ""
"Let's see how this works by registering a signal that gets called after each "
"HTTP request is finished. We'll be connecting to the :data:`~django.core."
"signals.request_finished` signal."
msgstr ""

# 4e0accc955c84055a8fca4b8cc92711a
#: ../../topics/signals.txt:78
msgid "Receiver functions"
msgstr ""

# 4d2bb8a3d4b44c1e88306be2ccef41c6
#: ../../topics/signals.txt:80
msgid ""
"First, we need to define a receiver function. A receiver can be any Python "
"function or method:"
msgstr ""

# e8dbc9c6d9114646bde42b16e25a374c
#: ../../topics/signals.txt:88
msgid ""
"Notice that the function takes a ``sender`` argument, along with wildcard "
"keyword arguments (``**kwargs``); all signal handlers must take these "
"arguments."
msgstr ""

# fb20b7cff167475e8039212a4143933c
#: ../../topics/signals.txt:91
msgid ""
"We'll look at senders `a bit later`_, but right now look at the ``**kwargs`` "
"argument. All signals send keyword arguments, and may change those keyword "
"arguments at any time. In the case of :data:`~django.core.signals."
"request_finished`, it's documented as sending no arguments, which means we "
"might be tempted to write our signal handling as ``my_callback(sender)``."
msgstr ""

# d7806c24dac442ad98e35b4c2dc3b226
#: ../../topics/signals.txt:100
msgid ""
"This would be wrong -- in fact, Django will throw an error if you do so. "
"That's because at any point arguments could get added to the signal and your "
"receiver must be able to handle those new arguments."
msgstr ""

# d762ade8011b4c2185f31628b0d4655a
#: ../../topics/signals.txt:107
msgid "Connecting receiver functions"
msgstr ""

# 6d85a45b607e4b87a92504801618ebd1
#: ../../topics/signals.txt:109
msgid ""
"There are two ways you can connect a receiver to a signal. You can take the "
"manual connect route:"
msgstr ""

# 11133718e1dd4c0eb62e1fffe5f0e798
#: ../../topics/signals.txt:118
msgid ""
"Alternatively, you can use a ``receiver`` decorator when you define your "
"receiver:"
msgstr ""

# 028ac45b7f0f47fc88c81d9afba02d2d
#: ../../topics/signals.txt:130
msgid ""
"Now, our ``my_callback`` function will be called each time a request "
"finishes."
msgstr ""

# 46739d83ebce44b2b3bbd50a2d83cd07
#: ../../topics/signals.txt:134
msgid "The ``receiver`` decorator was added in Django 1.3."
msgstr ""

# c6f582e1e48f499692bca0fdb3743ed9
#: ../../topics/signals.txt:138
msgid ""
"You can put signal handling and registration code anywhere you like. "
"However, you'll need to make sure that the module it's in gets imported "
"early on so that the signal handling gets registered before any signals need "
"to be sent. This makes your app's ``models.py`` a good place to put "
"registration of signal handlers."
msgstr ""

# 3139c7c656254c3eac07fb5005984b87
#: ../../topics/signals.txt:147
msgid "Connecting to signals sent by specific senders"
msgstr ""

# 0f1ec46d126846b182add09fe7357afc
#: ../../topics/signals.txt:149
msgid ""
"Some signals get sent many times, but you'll only be interested in receiving "
"a certain subset of those signals. For example, consider the :data:`django."
"db.models.signals.pre_save` signal sent before a model gets saved. Most of "
"the time, you don't need to know when *any* model gets saved -- just when "
"one *specific* model is saved."
msgstr ""

# 36916fb04ad240c08bf7af68c9040c7d
#: ../../topics/signals.txt:155
msgid ""
"In these cases, you can register to receive signals sent only by particular "
"senders. In the case of :data:`django.db.models.signals.pre_save`, the "
"sender will be the model class being saved, so you can indicate that you "
"only want signals sent by some model:"
msgstr ""

# 44309146dbb247ec82b8020af7b1fe6e
#: ../../topics/signals.txt:170
msgid ""
"The ``my_handler`` function will only be called when an instance of "
"``MyModel`` is saved."
msgstr ""

# e483599bd57c4f6aa4d515fdd5e111f8
#: ../../topics/signals.txt:173
msgid ""
"Different signals use different objects as their senders; you'll need to "
"consult the :doc:`built-in signal documentation </ref/signals>` for details "
"of each particular signal."
msgstr ""

# cd0454cd345740a781a6dd95956b5927
#: ../../topics/signals.txt:180
msgid "Preventing duplicate signals"
msgstr ""

# 8ea2ffdaeacb4f1a827248168c72c168
#: ../../topics/signals.txt:182
msgid ""
"In some circumstances, the module in which you are connecting signals may be "
"imported multiple times. This can cause your receiver function to be "
"registered more than once, and thus called multiples times for a single "
"signal event."
msgstr ""

# cb5799dd874b4333856980880694d527
#: ../../topics/signals.txt:187
msgid ""
"If this behavior is problematic (such as when using signals to send an email "
"whenever a model is saved), pass a unique identifier as the ``dispatch_uid`` "
"argument to identify your receiver function. This identifier will usually be "
"a string, although any hashable object will suffice. The end result is that "
"your receiver function will only be bound to the signal once for each unique "
"``dispatch_uid`` value."
msgstr ""

# b39c805ced4a4df5aa83b8a0a1f3074f
#: ../../topics/signals.txt:201
msgid "Defining and sending signals"
msgstr ""

# 6ae91b8ea3404c5aa7b9857f4c0c28fa
#: ../../topics/signals.txt:203
msgid ""
"Your applications can take advantage of the signal infrastructure and "
"provide its own signals."
msgstr ""

# 3e3660af971e411bb5b316e5a8de3c86
#: ../../topics/signals.txt:207
msgid "Defining signals"
msgstr ""

# 6ec0a65c4d0840979526057a706d9ea3
#: ../../topics/signals.txt:211
msgid ""
"All signals are :class:`django.dispatch.Signal` instances. The "
"``providing_args`` is a list of the names of arguments the signal will "
"provide to listeners."
msgstr ""

# 49ea0dac1a964e5784d5fb73ef0490a0
#: ../../topics/signals.txt:215
msgid "For example:"
msgstr ""

# 9b8ecec4059d4908a40d54f29c58c0c6
#: ../../topics/signals.txt:223
msgid ""
"This declares a ``pizza_done`` signal that will provide receivers with "
"``toppings`` and ``size`` arguments."
msgstr ""

# 6f2db08ef6f04247abdecbba1abad36a
#: ../../topics/signals.txt:226
msgid ""
"Remember that you're allowed to change this list of arguments at any time, "
"so getting the API right on the first try isn't necessary."
msgstr ""

# bc612ee8158e4579817b9c16fdf89be3
#: ../../topics/signals.txt:229
msgid "Sending signals"
msgstr ""

# 0ca6c3895d9c4f82a4f53b6a682221eb
#: ../../topics/signals.txt:231
msgid "There are two ways to send send signals in Django."
msgstr ""

# e299927001ba4f778a6d478682b3bd9d
#: ../../topics/signals.txt:236
msgid ""
"To send a signal, call either :meth:`Signal.send` or :meth:`Signal."
"send_robust`. You must provide the ``sender`` argument, and may provide as "
"many other keyword arguments as you like."
msgstr ""

# 675ebdc3b8dc4b8285e38075ee360b45
#: ../../topics/signals.txt:240
msgid "For example, here's how sending our ``pizza_done`` signal might look:"
msgstr ""

# 64938b49d8884fd8bd7580f72cba732f
#: ../../topics/signals.txt:251
msgid ""
"Both ``send()`` and ``send_robust()`` return a list of tuple pairs ``"
"[(receiver, response), ... ]``, representing the list of called receiver "
"functions and their response values."
msgstr ""

# 9a0e6493c8314f2d9acc2080fd399fa3
#: ../../topics/signals.txt:255
msgid ""
"``send()`` differs from ``send_robust()`` in how exceptions raised by "
"receiver functions are handled. ``send()`` does *not* catch any exceptions "
"raised by receivers; it simply allows errors to propagate. Thus not all "
"receivers may be notified of a signal in the face of an error."
msgstr ""

# 420cb0993d0d4ba3b1504c6a6eabec7f
#: ../../topics/signals.txt:260
msgid ""
"``send_robust()`` catches all errors derived from Python's ``Exception`` "
"class, and ensures all receivers are notified of the signal. If an error "
"occurs, the error instance is returned in the tuple pair for the receiver "
"that raised the error."
msgstr ""

# 2f175025657b47a4bb02f301960cd7b7
#: ../../topics/signals.txt:265
msgid "Disconnecting signals"
msgstr ""

# ec031468f36f4364818a66c56ec5255b
#: ../../topics/signals.txt:269
msgid ""
"To disconnect a receiver from a signal, call :meth:`Signal.disconnect`. The "
"arguments are as described in :meth:`.Signal.connect`."
msgstr ""

# b04d0ef45e3a4e649733b9a48595f902
#: ../../topics/signals.txt:272
msgid ""
"The *receiver* argument indicates the registered receiver to disconnect. It "
"may be ``None`` if ``dispatch_uid`` is used to identify the receiver."
msgstr ""

# b3ba8fc59ca54449bf15ad2536f6ec2f
#: ../../topics/signing.txt:3
msgid "Cryptographic signing"
msgstr ""

# 83f5bfa5266a4a3ebd43e6037b060316
#: ../../topics/signing.txt:10
msgid ""
"The golden rule of Web application security is to never trust data from "
"untrusted sources. Sometimes it can be useful to pass data through an "
"untrusted medium. Cryptographically signed values can be passed through an "
"untrusted channel safe in the knowledge that any tampering will be detected."
msgstr ""

# 66bb63377ac143b6adc8170da27076d3
#: ../../topics/signing.txt:15
msgid ""
"Django provides both a low-level API for signing values and a high-level API "
"for setting and reading signed cookies, one of the most common uses of "
"signing in Web applications."
msgstr ""

# 304c09767c6848b4ace69e401c549d4d
#: ../../topics/signing.txt:19
msgid "You may also find signing useful for the following:"
msgstr ""

# fbb4b501e0b24fc181339a149a146ca0
#: ../../topics/signing.txt:21
msgid ""
"Generating \"recover my account\" URLs for sending to users who have lost "
"their password."
msgstr ""

# eb9b56f128bf487680d22801591a6d28
#: ../../topics/signing.txt:24
msgid "Ensuring data stored in hidden form fields has not been tampered with."
msgstr ""

# 7188a3d489434a069ea3ef99b7741a79
#: ../../topics/signing.txt:26
msgid ""
"Generating one-time secret URLs for allowing temporary access to a protected "
"resource, for example a downloadable file that a user has paid for."
msgstr ""

# 261d8158c5864c36a105f9df4e92c876
#: ../../topics/signing.txt:31
msgid "Protecting the SECRET_KEY"
msgstr ""

# 8dc6c5edc7574658bf0b090340c2a9ad
#: ../../topics/signing.txt:33
msgid ""
"When you create a new Django project using :djadmin:`startproject`, the "
"``settings.py`` file is generated automatically and gets a random :setting:"
"`SECRET_KEY` value. This value is the key to securing signed data -- it is "
"vital you keep this secure, or attackers could use it to generate their own "
"signed values."
msgstr ""

# 2f465e3337e44e2092ded34c94280f32
#: ../../topics/signing.txt:40
msgid "Using the low-level API"
msgstr ""

# 6e2d22dfe02e4ccdb50d968aed1713bf
#: ../../topics/signing.txt:44
msgid ""
"Django's signing methods live in the ``django.core.signing`` module. To sign "
"a value, first instantiate a ``Signer`` instance::"
msgstr ""

# d6777faec8c74737a3da1644a75cbd15
#: ../../topics/signing.txt:53
msgid ""
"The signature is appended to the end of the string, following the colon. You "
"can retrieve the original value using the ``unsign`` method::"
msgstr ""

# 481f908b2c6c41d5a2511a6554f1d35a
#: ../../topics/signing.txt:60
msgid ""
"If the signature or value have been altered in any way, a ``django.core."
"signing.BadSignature`` exception will be raised::"
msgstr ""

# 4f13ea24cf314a02bc34a5ed3da8ec05
#: ../../topics/signing.txt:69
msgid ""
"By default, the ``Signer`` class uses the :setting:`SECRET_KEY` setting to "
"generate signatures. You can use a different secret by passing it to the "
"``Signer`` constructor::"
msgstr ""

# 93654b8f86f64ef7bb5f571278be5359
#: ../../topics/signing.txt:79
msgid "Using the salt argument"
msgstr ""

# cadea971e9d844d08115cf7b892b522e
#: ../../topics/signing.txt:81
msgid ""
"If you do not wish for every occurrence of a particular string to have the "
"same signature hash, you can use the optional ``salt`` argument to the "
"``Signer`` class. Using a salt will seed the signing hash function with both "
"the salt and your :setting:`SECRET_KEY`::"
msgstr ""

# 268c03cdbdc84daca3ed42ad962f6267
#: ../../topics/signing.txt:95
msgid ""
"Using salt in this way puts the different signatures into different "
"namespaces.  A signature that comes from one namespace (a particular salt "
"value) cannot be used to validate the same plaintext string in a different "
"namespace that is using a different salt setting. The result is to prevent "
"an attacker from using a signed string generated in one place in the code as "
"input to another piece of code that is generating (and verifying) signatures "
"using a different salt."
msgstr ""

# c8ce5d13c9224729bed61523b835ef71
#: ../../topics/signing.txt:103
msgid ""
"Unlike your :setting:`SECRET_KEY`, your salt argument does not need to stay "
"secret."
msgstr ""

# 09672e88519242e6b1dd39b69e329066
#: ../../topics/signing.txt:107
msgid "Verifying timestamped values"
msgstr ""

# 76fb03fe5c654f179348d15b04ac8213
#: ../../topics/signing.txt:111
msgid ""
"``TimestampSigner`` is a subclass of :class:`~Signer` that appends a signed "
"timestamp to the value. This allows you to confirm that a signed value was "
"created within a specified period of time::"
msgstr ""

# 17d2b79a5ae04263b77aa34451c71873
#: ../../topics/signing.txt:129
msgid "Protecting complex data structures"
msgstr ""

# 7f7c3d43dc2e4df68616c4bf1464210b
#: ../../topics/signing.txt:131
msgid ""
"If you wish to protect a list, tuple or dictionary you can do so using the "
"signing module's ``dumps`` and ``loads`` functions. These imitate Python's "
"pickle module, but use JSON serialization under the hood. JSON ensures that "
"even if your :setting:`SECRET_KEY` is stolen an attacker will not be able to "
"execute arbitrary commands by exploiting the pickle format.::"
msgstr ""

# 0ba15077146b46dd82c931992134a769
#: ../../topics/signing.txt:146
msgid "Returns URL-safe, sha1 signed base64 compressed JSON string."
msgstr ""

# 707985c31726464f99b57ab3f4543271
#: ../../topics/signing.txt:150
msgid "Reverse of dumps(), raises ``BadSignature`` if signature fails."
msgstr ""

# c5e82ee1b2dc499f950032790d883451
#: ../../topics/templates.txt:3
msgid "The Django template language"
msgstr ""

# 3d86554973e84d22a63dc8db6d588b92
#: ../../topics/templates.txt:7
msgid ""
"This document explains the language syntax of the Django template system. If "
"you're looking for a more technical perspective on how it works and how to "
"extend it, see :doc:`/ref/templates/api`."
msgstr ""

# c0d210ea2ab9433d8afddd0a9b8ef079
#: ../../topics/templates.txt:11
msgid ""
"Django's template language is designed to strike a balance between power and "
"ease. It's designed to feel comfortable to those used to working with HTML. "
"If you have any exposure to other text-based template languages, such as "
"Smarty_ or CheetahTemplate_, you should feel right at home with Django's "
"templates."
msgstr ""

# 26de3a96b1794cbc90c9006dcf207471
#: ../../topics/templates.txt:18
msgid ""
"If you have a background in programming, or if you're used to languages like "
"PHP which mix programming code directly into HTML, you'll want to bear in "
"mind that the Django template system is not simply Python embedded into "
"HTML. This is by design: the template system is meant to express "
"presentation, not program logic."
msgstr ""

# f378ea6925e54c31b12a70dd653224a6
#: ../../topics/templates.txt:24
msgid ""
"The Django template system provides tags which function similarly to some "
"programming constructs -- an :ttag:`if` tag for boolean tests, a :ttag:`for` "
"tag for looping, etc. -- but these are not simply executed as the "
"corresponding Python code, and the template system will not execute "
"arbitrary Python expressions. Only the tags, filters and syntax listed below "
"are supported by default (although you can add :doc:`your own extensions </"
"howto/custom-template-tags>` to the template language as needed)."
msgstr ""

# 1c9dd502696f472e8940da548afceaab
#: ../../topics/templates.txt:37
msgid "Templates"
msgstr ""

# 569172680b0a419e98034026904490b7
#: ../../topics/templates.txt:41
msgid ""
"A template is simply a text file. It can generate any text-based format "
"(HTML, XML, CSV, etc.)."
msgstr ""

# bf1489c7b70143e9af6e6b49cd6883ee
#: ../../topics/templates.txt:44
msgid ""
"A template contains **variables**, which get replaced with values when the "
"template is evaluated, and **tags**, which control the logic of the template."
msgstr ""

# 6a7760f0625d462f941908bb7b6da390
#: ../../topics/templates.txt:47
msgid ""
"Below is a minimal template that illustrates a few basics. Each element will "
"be explained later in this document.::"
msgstr ""

# b6888cb587eb4f76bc35566f12e2485f
#: ../../topics/templates.txt:69
msgid ""
"Why use a text-based template instead of an XML-based one (like Zope's TAL)? "
"We wanted Django's template language to be usable for more than just XML/"
"HTML templates. At World Online, we use it for emails, JavaScript and CSV. "
"You can use the template language for any text-based format."
msgstr ""

# 8678cda19fe84daeb41b9f83d23bbb7e
#: ../../topics/templates.txt:75
msgid "Oh, and one more thing: Making humans edit XML is sadistic!"
msgstr ""

# 11f8bb72a1534e1faf9c3ce3a7669884
#: ../../topics/templates.txt:78
msgid "Variables"
msgstr ""

# c332d49c392a48f3b3744adb8e2b5880
#: ../../topics/templates.txt:80
msgid ""
"Variables look like this: ``{{ variable }}``. When the template engine "
"encounters a variable, it evaluates that variable and replaces it with the "
"result. Variable names consist of any combination of alphanumeric characters "
"and the underscore (``\"_\"``). The dot (``\".\"``) also appears in variable "
"sections, although that has a special meaning, as indicated below. "
"Importantly, *you cannot have spaces or punctuation characters in variable "
"names.*"
msgstr ""

# a41a55eb445d4c21b682a9233d2f0975
#: ../../topics/templates.txt:88
msgid "Use a dot (``.``) to access attributes of a variable."
msgstr ""

# 63b79cb633bf4ec69d565c2087b863b4
#: ../../topics/templates.txt:92
msgid ""
"Technically, when the template system encounters a dot, it tries the "
"following lookups, in this order:"
msgstr ""

# 890ed5b65e694ddea331cce36c4a9637
#: ../../topics/templates.txt:95
msgid "Dictionary lookup"
msgstr ""

# e653fe11b37f46c1a5756629664f446d
#: ../../topics/templates.txt:96
msgid "Attribute lookup"
msgstr ""

# 3d820833ef3a4062bd81847a00ee6fd4
#: ../../topics/templates.txt:97
msgid "Method call"
msgstr ""

# cc70ae9bdcab43f8ae1136a3d20f016b
#: ../../topics/templates.txt:98
msgid "List-index lookup"
msgstr ""

# e4c930baab754a808d67f3a9f5be90ff
#: ../../topics/templates.txt:100
msgid ""
"In the above example, ``{{ section.title }}`` will be replaced with the "
"``title`` attribute of the ``section`` object."
msgstr ""

# 47d8c45128034ba8a4536fad79563717
#: ../../topics/templates.txt:103
msgid ""
"If you use a variable that doesn't exist, the template system will insert "
"the value of the :setting:`TEMPLATE_STRING_IF_INVALID` setting, which is set "
"to ``''`` (the empty string) by default."
msgstr ""

# 2585542960fc4e9b8ac6e099613cf997
#: ../../topics/templates.txt:110
msgid "You can modify variables for display by using **filters**."
msgstr ""

# cbacf2c2073e496cbf98445f403aae29
#: ../../topics/templates.txt:112
msgid ""
"Filters look like this: ``{{ name|lower }}``. This displays the value of the "
"``{{ name }}`` variable after being filtered through the :tfilter:`lower` "
"filter, which converts text to lowercase. Use a pipe (``|``) to apply a "
"filter."
msgstr ""

# 9765648c9246491394f2212f51f9b224
#: ../../topics/templates.txt:116
msgid ""
"Filters can be \"chained.\" The output of one filter is applied to the next. "
"``{{ text|escape|linebreaks }}`` is a common idiom for escaping text "
"contents, then converting line breaks to ``<p>`` tags."
msgstr ""

# 9256fd846f034928a55f2389948bfcb5
#: ../../topics/templates.txt:120
msgid ""
"Some filters take arguments. A filter argument looks like this: ``{{ bio|"
"truncatewords:30 }}``. This will display the first 30 words of the ``bio`` "
"variable."
msgstr ""

# ad67e85eb79642029db9cc318c1440d8
#: ../../topics/templates.txt:124
msgid ""
"Filter arguments that contain spaces must be quoted; for example, to join a "
"list with commas and spaced you'd use ``{{ list|join:\", \" }}``."
msgstr ""

# 49b2650478d742a3b0985d908539d546
#: ../../topics/templates.txt:127
msgid ""
"Django provides about thirty built-in template filters. You can read all "
"about them in the :ref:`built-in filter reference <ref-templates-builtins-"
"filters>`. To give you a taste of what's available, here are some of the "
"more commonly used template filters:"
msgstr ""

# 7037837584fd4a899649051856c90b74
#: ../../topics/templates.txt:133
msgid ""
"If a variable is false or empty, use given default. Otherwise, use the value "
"of the variable"
msgstr ""

# 2f9219fcb4ec4c4c8b5f8f322de666a5
#: ../../topics/templates.txt:140
msgid ""
"If ``value`` isn't provided or is empty, the above will display \"``nothing``"
"\"."
msgstr ""

# 46c5d944794d49bf8268e6c6c0ca1a77
#: ../../topics/templates.txt:144
msgid ""
"Returns the length of the value. This works for both strings and lists; for "
"example::"
msgstr ""

# 52557f9120ca4729afd49decc0fd60ba
#: ../../topics/templates.txt:149
msgid "If ``value`` is ``['a', 'b', 'c', 'd']``, the output will be ``4``."
msgstr ""

# 84b4c36e102a4d52a97de43a3343871e
#: ../../topics/templates.txt:152
msgid "Strips all [X]HTML tags. For example::"
msgstr ""

# 13331d6e11e54cf0a77ac92a5dd26856
#: ../../topics/templates.txt:156
msgid ""
"If ``value`` is ``\"<b>Joel</b> <button>is</button> a <span>slug</span>\"``, "
"the output will be ``\"Joel is a slug\"``."
msgstr ""

# 39b267c60574433ca420425cd710f548
#: ../../topics/templates.txt:159
msgid ""
"Again, these are just a few examples; see the :ref:`built-in filter "
"reference <ref-templates-builtins-filters>` for the complete list."
msgstr ""

# 0cb6498040ca47d3bf0029bdfba23dc8
#: ../../topics/templates.txt:162
msgid ""
"You can also create your own custom template filters; see :doc:`/howto/"
"custom-template-tags`."
msgstr ""

# c0f1fb6fb2124cd7a515bfcce2bfdfe0
# 27e2defdcf464545b3317a16dc24873a
#: ../../topics/templates.txt:167 ../../topics/templates.txt:229
msgid ""
"Django's admin interface can include a complete reference of all template "
"tags and filters available for a given site. See :doc:`/ref/contrib/admin/"
"admindocs`."
msgstr ""

# 4b318e20b26841d0b5dfd2756f0d4755
#: ../../topics/templates.txt:172
msgid "Tags"
msgstr ""

# cd5a7e23bbc94acd87ee6e3f2eb9cbfb
#: ../../topics/templates.txt:174
msgid ""
"Tags look like this: ``{% tag %}``. Tags are more complex than variables: "
"Some create text in the output, some control flow by performing loops or "
"logic, and some load external information into the template to be used by "
"later variables."
msgstr ""

# cd0aecc8af9949ceb275153ed2c373df
#: ../../topics/templates.txt:178
msgid ""
"Some tags require beginning and ending tags (i.e. ``{% tag %} ... tag "
"contents ... {% endtag %}``)."
msgstr ""

# 2a2fffc3f0484398998c3f4b1b68c22b
#: ../../topics/templates.txt:181
msgid ""
"Django ships with about two dozen built-in template tags. You can read all "
"about them in the :ref:`built-in tag reference <ref-templates-builtins-"
"tags>`. To give you a taste of what's available, here are some of the more "
"commonly used tags:"
msgstr ""

# 4ffcf66053a5464f88652ca1b7374449
#: ../../topics/templates.txt:187
msgid ""
"Loop over each item in an array.  For example, to display a list of athletes "
"provided in ``athlete_list``::"
msgstr ""

# 0b91f48a3c184f77bbb9dce22779d740
#: ../../topics/templates.txt:197
msgid ""
"Evaluates a variable, and if that variable is \"true\" the contents of the "
"block are displayed::"
msgstr ""

# e1e8f7d720c6430588754e2586354d78
#: ../../topics/templates.txt:206
msgid ""
"In the above, if ``athlete_list`` is not empty, the number of athletes will "
"be displayed by the ``{{ athlete_list|length }}`` variable."
msgstr ""

# 8b001dc204fb4e0a90e613b8ba57328f
#: ../../topics/templates.txt:209
msgid "You can also use filters and various operators in the :ttag:`if` tag::"
msgstr ""

# 90627175d7b64ac6a9b3ee163c3295de
#: ../../topics/templates.txt:218
msgid ""
"Set up `template inheritance`_ (see below), a powerful way of cutting down "
"on \"boilerplate\" in templates."
msgstr ""

# 80904de265f34a4f869ebea9d8498714
#: ../../topics/templates.txt:221
msgid ""
"Again, the above is only a selection of the whole list; see the :ref:`built-"
"in tag reference <ref-templates-builtins-tags>` for the complete list."
msgstr ""

# 62e9b15ee2d8472d871c0e3f9bdf0357
#: ../../topics/templates.txt:224
msgid ""
"You can also create your own custom template tags; see :doc:`/howto/custom-"
"template-tags`."
msgstr ""

# 62810a3c88b64cc88f761b494100f7b9
#: ../../topics/templates.txt:234
msgid "Comments"
msgstr ""

# 1c9411bf95284c0da79a2ad5baf145b3
#: ../../topics/templates.txt:236
msgid ""
"To comment-out part of a line in a template, use the comment syntax: ``{# #}"
"``."
msgstr ""

# f1aacc7d2bb34299b6098c4b2adab54b
#: ../../topics/templates.txt:238
msgid "For example, this template would render as ``'hello'``::"
msgstr ""

# cd5b7756d4d143449b3bb0e2e0376bb9
#: ../../topics/templates.txt:242
msgid "A comment can contain any template code, invalid or not. For example::"
msgstr ""

# e5badb675a9045c8bcd2223cda6ac0a2
#: ../../topics/templates.txt:246
msgid ""
"This syntax can only be used for single-line comments (no newlines are "
"permitted between the ``{#`` and ``#}`` delimiters). If you need to comment "
"out a multiline portion of the template, see the :ttag:`comment` tag."
msgstr ""

# 262ec9fe81d64d908472495b4424d053
#: ../../topics/templates.txt:253
msgid "Template inheritance"
msgstr ""

# d554681a7c5b41f0b7e00c90e393753f
#: ../../topics/templates.txt:255
msgid ""
"The most powerful -- and thus the most complex -- part of Django's template "
"engine is template inheritance. Template inheritance allows you to build a "
"base \"skeleton\" template that contains all the common elements of your "
"site and defines **blocks** that child templates can override."
msgstr ""

# 766a41b0e299468e94c3e4557fb5ce2e
#: ../../topics/templates.txt:260
msgid ""
"It's easiest to understand template inheritance by starting with an example::"
msgstr ""

# fa5c5b69a309480ab4a689c3eca219d7
#: ../../topics/templates.txt:285
msgid ""
"This template, which we'll call ``base.html``, defines a simple HTML "
"skeleton document that you might use for a simple two-column page. It's the "
"job of \"child\" templates to fill the empty blocks with content."
msgstr ""

# 439eaa654c89466e9b3bb60c45cbf09b
#: ../../topics/templates.txt:289
msgid ""
"In this example, the :ttag:`block` tag defines three blocks that child "
"templates can fill in. All the :ttag:`block` tag does is to tell the "
"template engine that a child template may override those portions of the "
"template."
msgstr ""

# 0c9ffb4a5e0d40fbb6519e4f9f668b8e
#: ../../topics/templates.txt:293
msgid "A child template might look like this::"
msgstr ""

# 9bb0f8ed79b44478a214fafc4aac8695
#: ../../topics/templates.txt:306
msgid ""
"The :ttag:`extends` tag is the key here. It tells the template engine that "
"this template \"extends\" another template. When the template system "
"evaluates this template, first it locates the parent -- in this case, \"base."
"html\"."
msgstr ""

# 71e414a91f114c42ae6b2fa4fb8b5e2d
#: ../../topics/templates.txt:310
msgid ""
"At that point, the template engine will notice the three :ttag:`block` tags "
"in ``base.html`` and replace those blocks with the contents of the child "
"template. Depending on the value of ``blog_entries``, the output might look "
"like::"
msgstr ""

# 0ba29a8ff5f148c9a28f0fa62e18fc46
#: ../../topics/templates.txt:340
msgid ""
"Note that since the child template didn't define the ``sidebar`` block, the "
"value from the parent template is used instead. Content within a ``{% block "
"%}`` tag in a parent template is always used as a fallback."
msgstr ""

# ebe87a3bb51c4cb9bebd1f1c826fbbdf
#: ../../topics/templates.txt:344
msgid ""
"You can use as many levels of inheritance as needed. One common way of using "
"inheritance is the following three-level approach:"
msgstr ""

# a3f68bb5f51c443cbf3002f1233f96d5
#: ../../topics/templates.txt:347
msgid ""
"Create a ``base.html`` template that holds the main look-and-feel of your "
"site."
msgstr ""

# a74fb41636744a6ca3c6ccd4be635b64
#: ../../topics/templates.txt:349
msgid ""
"Create a ``base_SECTIONNAME.html`` template for each \"section\" of your "
"site. For example, ``base_news.html``, ``base_sports.html``. These templates "
"all extend ``base.html`` and include section-specific styles/design."
msgstr ""

# f4fc33f3e42f41218cbd2f270a5c2aff
#: ../../topics/templates.txt:353
msgid ""
"Create individual templates for each type of page, such as a news article or "
"blog entry. These templates extend the appropriate section template."
msgstr ""

# 6aa6b37f7ccf465f930f628def5aa2af
#: ../../topics/templates.txt:357
msgid ""
"This approach maximizes code reuse and makes it easy to add items to shared "
"content areas, such as section-wide navigation."
msgstr ""

# 8cd64678d83e48ef9444370dee36db94
#: ../../topics/templates.txt:360
msgid "Here are some tips for working with inheritance:"
msgstr ""

# 8f0cd4e69db5451ca1da9e05a0c635b6
#: ../../topics/templates.txt:362
msgid ""
"If you use :ttag:`{% extends %}<extends>` in a template, it must be the "
"first template tag in that template. Template inheritance won't work, "
"otherwise."
msgstr ""

# 40ad9decd0ca44aa8cfbb8c6b8bb5946
#: ../../topics/templates.txt:365
msgid ""
"More :ttag:`{% block %}<block>` tags in your base templates are better. "
"Remember, child templates don't have to define all parent blocks, so you can "
"fill in reasonable defaults in a number of blocks, then only define the ones "
"you need later. It's better to have more hooks than fewer hooks."
msgstr ""

# 42a2044299754902befed029f747bee5
#: ../../topics/templates.txt:370
msgid ""
"If you find yourself duplicating content in a number of templates, it "
"probably means you should move that content to a ``{% block %}`` in a parent "
"template."
msgstr ""

# 08393c4a4acc4a35b01d8842eadf750f
#: ../../topics/templates.txt:374
msgid ""
"If you need to get the content of the block from the parent template, the ``"
"{{ block.super }}`` variable will do the trick. This is useful if you want "
"to add to the contents of a parent block instead of completely overriding "
"it. Data inserted using ``{{ block.super }}`` will not be automatically "
"escaped (see the `next section`_), since it was already escaped, if "
"necessary, in the parent template."
msgstr ""

# 10c03c41daa1496ba501fd2fc88e0d9b
#: ../../topics/templates.txt:381
msgid ""
"For extra readability, you can optionally give a *name* to your ``{% "
"endblock %}`` tag. For example::"
msgstr ""

# 7ebdad2ba93d40ddb18236a9e681b164
#: ../../topics/templates.txt:388
msgid ""
"In larger templates, this technique helps you see which ``{% block %}`` tags "
"are being closed."
msgstr ""

# 635a95cc099a4164930cbb74ca981187
#: ../../topics/templates.txt:391
msgid ""
"Finally, note that you can't define multiple :ttag:`block` tags with the "
"same name in the same template. This limitation exists because a block tag "
"works in \"both\" directions. That is, a block tag doesn't just provide a "
"hole to fill -- it also defines the content that fills the hole in the "
"*parent*. If there were two similarly-named :ttag:`block` tags in a "
"template, that template's parent wouldn't know which one of the blocks' "
"content to use."
msgstr ""

# c78b31cb252445968da893025e1054fc
#: ../../topics/templates.txt:402
msgid "Automatic HTML escaping"
msgstr ""

# 48aad5873852457aa9a6c19457ae5578
#: ../../topics/templates.txt:404
msgid ""
"When generating HTML from templates, there's always a risk that a variable "
"will include characters that affect the resulting HTML. For example, "
"consider this template fragment::"
msgstr ""

# 09b76850a6634082be1464a4424245da
#: ../../topics/templates.txt:410
msgid ""
"At first, this seems like a harmless way to display a user's name, but "
"consider what would happen if the user entered his name as this::"
msgstr ""

# 415f2455cc4945d092fed11cc428209d
#: ../../topics/templates.txt:415
msgid "With this name value, the template would be rendered as::"
msgstr ""

# c913b3a0daf04dcfaf34376150c276e7
#: ../../topics/templates.txt:419
msgid "...which means the browser would pop-up a JavaScript alert box!"
msgstr ""

# 1c0e23a76caf46eaa6c326adc4fd8597
#: ../../topics/templates.txt:421
msgid "Similarly, what if the name contained a ``'<'`` symbol, like this?"
msgstr ""

# 1a5cebcb3b3c445c87ef5910e3854dce
#: ../../topics/templates.txt:427
msgid "That would result in a rendered template like this::"
msgstr ""

# 48da40896eb64870b96a143f4bb2fde0
#: ../../topics/templates.txt:431
msgid ""
"...which, in turn, would result in the remainder of the Web page being "
"bolded!"
msgstr ""

# a18264b51e73455fb11dcb5f068ce825
#: ../../topics/templates.txt:433
msgid ""
"Clearly, user-submitted data shouldn't be trusted blindly and inserted "
"directly into your Web pages, because a malicious user could use this kind "
"of hole to do potentially bad things. This type of security exploit is "
"called a `Cross Site Scripting`_ (XSS) attack."
msgstr ""

# f549b853c0904fd5a2b71c8d13b070f1
#: ../../topics/templates.txt:438
msgid "To avoid this problem, you have two options:"
msgstr ""

# 60ad7916b3bf409dacb76b45ab5971dc
#: ../../topics/templates.txt:440
msgid ""
"One, you can make sure to run each untrusted variable through the :tfilter:"
"`escape` filter (documented below), which converts potentially harmful HTML "
"characters to unharmful ones. This was the default solution in Django for "
"its first few years, but the problem is that it puts the onus on *you*, the "
"developer / template author, to ensure you're escaping everything. It's easy "
"to forget to escape data."
msgstr ""

# 35d830ec6c984575adf1d4fd7153be22
#: ../../topics/templates.txt:447
msgid ""
"Two, you can take advantage of Django's automatic HTML escaping. The "
"remainder of this section describes how auto-escaping works."
msgstr ""

# 0b456f522e334d008c33e2f7982052b0
#: ../../topics/templates.txt:450
msgid ""
"By default in Django, every template automatically escapes the output of "
"every variable tag. Specifically, these five characters are escaped:"
msgstr ""

# 322f5bfc443c4f0bbe98d2cafb0490fd
#: ../../topics/templates.txt:454
msgid "``<`` is converted to ``&lt;``"
msgstr ""

# 9a5b8be7ec714431bb9d34963444b1b8
#: ../../topics/templates.txt:455
msgid "``>`` is converted to ``&gt;``"
msgstr ""

# 5dab6a7639d04f94bb2ddd9d43c74b16
#: ../../topics/templates.txt:456
msgid "``'`` (single quote) is converted to ``&#39;``"
msgstr ""

# 078516fb886144d7ae7bac0446805565
#: ../../topics/templates.txt:457
msgid "``\"`` (double quote) is converted to ``&quot;``"
msgstr ""

# 9cee30ccdc964a18b5256215c62eb5a1
#: ../../topics/templates.txt:458
msgid "``&`` is converted to ``&amp;``"
msgstr ""

# 086a51bedcfd4f60ae39363a25074288
#: ../../topics/templates.txt:460
msgid ""
"Again, we stress that this behavior is on by default. If you're using "
"Django's template system, you're protected."
msgstr ""

# 606d8518a71b4756a10db7a6c98a8f7b
#: ../../topics/templates.txt:466
msgid "How to turn it off"
msgstr ""

# 6d9eba6ed37748b1acb7f962b89c0468
#: ../../topics/templates.txt:468
msgid ""
"If you don't want data to be auto-escaped, on a per-site, per-template level "
"or per-variable level, you can turn it off in several ways."
msgstr ""

# fae77c88b85b4210b27bc6a9376a5b52
#: ../../topics/templates.txt:471
msgid ""
"Why would you want to turn it off? Because sometimes, template variables "
"contain data that you *intend* to be rendered as raw HTML, in which case you "
"don't want their contents to be escaped. For example, you might store a blob "
"of HTML in your database and want to embed that directly into your template. "
"Or, you might be using Django's template system to produce text that is "
"*not* HTML -- like an email message, for instance."
msgstr ""

# 41a8591d2b1e4368abe075f8ccb1eff4
#: ../../topics/templates.txt:479
msgid "For individual variables"
msgstr ""

# e1a73cc5369b430fa7b9e38d2d927308
#: ../../topics/templates.txt:481
msgid ""
"To disable auto-escaping for an individual variable, use the :tfilter:`safe` "
"filter::"
msgstr ""

# 2eabb776d9b448409f5c5e3d34d5a7fb
#: ../../topics/templates.txt:487
msgid ""
"Think of *safe* as shorthand for *safe from further escaping* or *can be "
"safely interpreted as HTML*. In this example, if ``data`` contains "
"``'<b>'``, the output will be::"
msgstr ""

# 84f89cc7f24349f8a7d5308354c52074
#: ../../topics/templates.txt:495
msgid "For template blocks"
msgstr ""

# 9c4a20f3d9094598a77c2ce945b4de66
#: ../../topics/templates.txt:497
msgid ""
"To control auto-escaping for a template, wrap the template (or just a "
"particular section of the template) in the :ttag:`autoescape` tag, like so::"
msgstr ""

# 077b35e96ba04db4af5025ba3ae44c75
#: ../../topics/templates.txt:504
msgid ""
"The :ttag:`autoescape` tag takes either ``on`` or ``off`` as its argument. "
"At times, you might want to force auto-escaping when it would otherwise be "
"disabled. Here is an example template::"
msgstr ""

# 4b3e2022a55c4da297165ff65fbf8117
#: ../../topics/templates.txt:519
msgid ""
"The auto-escaping tag passes its effect onto templates that extend the "
"current one as well as templates included via the :ttag:`include` tag, just "
"like all block tags. For example::"
msgstr ""

# 6e11d3aaebb84fc089c53dd51092aff8
#: ../../topics/templates.txt:538
msgid ""
"Because auto-escaping is turned off in the base template, it will also be "
"turned off in the child template, resulting in the following rendered HTML "
"when the ``greeting`` variable contains the string ``<b>Hello!</b>``::"
msgstr ""

# c51c6b6e14494c77a585bfb74c46b39c
#: ../../topics/templates.txt:546
msgid "Notes"
msgstr ""

# b0f08bf7aea24bcd8d27e5970c261030
#: ../../topics/templates.txt:548
msgid ""
"Generally, template authors don't need to worry about auto-escaping very "
"much. Developers on the Python side (people writing views and custom "
"filters) need to think about the cases in which data shouldn't be escaped, "
"and mark data appropriately, so things Just Work in the template."
msgstr ""

# 8c06d2e97a964ab392528f609f8a80af
#: ../../topics/templates.txt:553
msgid ""
"If you're creating a template that might be used in situations where you're "
"not sure whether auto-escaping is enabled, then add an :tfilter:`escape` "
"filter to any variable that needs escaping. When auto-escaping is on, "
"there's no danger of the :tfilter:`escape` filter *double-escaping* data -- "
"the :tfilter:`escape` filter does not affect auto-escaped variables."
msgstr ""

# 09d5cfdbf1a5420c8a50a73c1916e927
#: ../../topics/templates.txt:562
msgid "String literals and automatic escaping"
msgstr ""

# 1bff76776fa24739bff647202cb8f29d
#: ../../topics/templates.txt:564
msgid "As we mentioned earlier, filter arguments can be strings::"
msgstr ""

# e7e50c20ab384b20a0eb249f77620380
#: ../../topics/templates.txt:568
msgid ""
"All string literals are inserted **without** any automatic escaping into the "
"template -- they act as if they were all passed through the :tfilter:`safe` "
"filter. The reasoning behind this is that the template author is in control "
"of what goes into the string literal, so they can make sure the text is "
"correctly escaped when the template is written."
msgstr ""

# 10e6dc03a9a34ca3b48162a6c0efab37
#: ../../topics/templates.txt:574
msgid "This means you would write ::"
msgstr ""

# 0e1281a859244060a37dcccd6be5ab98
#: ../../topics/templates.txt:578
msgid "...rather than ::"
msgstr ""

# d67e8c685b5f4e6ba345631e5f90c557
#: ../../topics/templates.txt:582
msgid ""
"This doesn't affect what happens to data coming from the variable itself. "
"The variable's contents are still automatically escaped, if necessary, "
"because they're beyond the control of the template author."
msgstr ""

# cb4c9222fd024035be7a2eecfcdf9c76
#: ../../topics/templates.txt:589
msgid "Accessing method calls"
msgstr ""

# f36c352ed142477cb7a741c0e2dbc745
#: ../../topics/templates.txt:591
msgid ""
"Most method calls attached to objects are also available from within "
"templates. This means that templates have access to much more than just "
"class attributes (like field names) and variables passed in from views. For "
"example, the Django ORM provides the :ref:`\"entry_set\"<topics-db-queries-"
"related>` syntax for finding a collection of objects related on a foreign "
"key. Therefore, given a model called \"comment\" with a foreign key "
"relationship to a model called \"task\" you can loop through all comments "
"attached to a given task like this::"
msgstr ""

# 64096b5a9e3c4d368bb36c06dd26c608
#: ../../topics/templates.txt:603
msgid ""
"Similarly, :doc:`QuerySets</ref/models/querysets>` provide a ``count()`` "
"method to count the number of objects they contain. Therefore, you can "
"obtain a count of all comments related to the current task with::"
msgstr ""

# b2b95dd7b4a042fda43d0f017e4e8009
#: ../../topics/templates.txt:609
msgid ""
"And of course you can easily access methods you've explicitly defined on "
"your own models::"
msgstr ""

# a3b36accd0984d27bcc66e8f720b8c93
#: ../../topics/templates.txt:620
msgid ""
"Because Django intentionally limits the amount of logic processing available "
"in the template language, it is not possible to pass arguments to method "
"calls accessed from within templates. Data should be calculated in views, "
"then passed to templates for display."
msgstr ""

# dd937229a80749da8d1f9cab9b0e91d4
#: ../../topics/templates.txt:628
msgid "Custom tag and filter libraries"
msgstr ""

# 8c826c96c3314bc6844c661d444e1726
#: ../../topics/templates.txt:630
msgid ""
"Certain applications provide custom tag and filter libraries. To access them "
"in a template, use the :ttag:`load` tag::"
msgstr ""

# d7d343c1cb50463ea59fac0ca2c51d17
#: ../../topics/templates.txt:637
msgid ""
"In the above, the :ttag:`load` tag loads the ``comments`` tag library, which "
"then makes the ``comment_form`` tag available for use. Consult the "
"documentation area in your admin to find the list of custom libraries in "
"your installation."
msgstr ""

# 28ab0b8f87c44f259b837b8270a2067b
#: ../../topics/templates.txt:641
msgid ""
"The :ttag:`load` tag can take multiple library names, separated by spaces. "
"Example::"
msgstr ""

# 4fb971ac82c14928a1e130a3786f0726
#: ../../topics/templates.txt:646
msgid ""
"See :doc:`/howto/custom-template-tags` for information on writing your own "
"custom template libraries."
msgstr ""

# 19b184ce4c9c4d21844f05eeda34891d
#: ../../topics/templates.txt:650
msgid "Custom libraries and template inheritance"
msgstr ""

# 7af33af9a6e04f7db485031e599cd718
#: ../../topics/templates.txt:652
msgid ""
"When you load a custom tag or filter library, the tags/filters are only made "
"available to the current template -- not any parent or child templates along "
"the template-inheritance path."
msgstr ""

# 2e70e00ed1d24dda928730347b00edff
#: ../../topics/templates.txt:656
msgid ""
"For example, if a template ``foo.html`` has ``{% load comments %}``, a child "
"template (e.g., one that has ``{% extends \"foo.html\" %}``) will *not* have "
"access to the comments template tags and filters. The child template is "
"responsible for its own ``{% load comments %}``."
msgstr ""

# 2cfb445b98a44a3e87ac3420d494275a
#: ../../topics/templates.txt:661
msgid "This is a feature for the sake of maintainability and sanity."
msgstr ""

# a5cec342957042a4b4d51d8fa02319db
#: ../../topics/testing.txt:3
msgid "Testing Django applications"
msgstr ""

# 75cf008f815e4b4998e3ea3b6eaea8e2
#: ../../topics/testing.txt:8
msgid ""
"Automated testing is an extremely useful bug-killing tool for the modern Web "
"developer. You can use a collection of tests -- a **test suite** -- to "
"solve, or avoid, a number of problems:"
msgstr ""

# 1103064ce374490aa5b05e048be2f652
#: ../../topics/testing.txt:12
msgid ""
"When you're writing new code, you can use tests to validate your code works "
"as expected."
msgstr ""

# db53e41a7ad149bfa7a7f895b214c426
#: ../../topics/testing.txt:15
msgid ""
"When you're refactoring or modifying old code, you can use tests to ensure "
"your changes haven't affected your application's behavior unexpectedly."
msgstr ""

# bad4ecb6988b49b7b8a4798be9a5a321
#: ../../topics/testing.txt:19
msgid ""
"Testing a Web application is a complex task, because a Web application is "
"made of several layers of logic -- from HTTP-level request handling, to form "
"validation and processing, to template rendering. With Django's test-"
"execution framework and assorted utilities, you can simulate requests, "
"insert test data, inspect your application's output and generally verify "
"your code is doing what it should be doing."
msgstr ""

# 4485e0cb605c4c9eb8c620e039089b16
#: ../../topics/testing.txt:26
msgid "The best part is, it's really easy."
msgstr ""

# 2ebab77966dc44b4aaac2b11f4150c08
#: ../../topics/testing.txt:28
msgid ""
"This document is split into two primary sections. First, we explain how to "
"write tests with Django. Then, we explain how to run them."
msgstr ""

# 7c34ec29f3984fb8be360a264f780ad5
#: ../../topics/testing.txt:32
msgid "Writing tests"
msgstr ""

# d6078d87002142d8a4cd987a8d99a198
#: ../../topics/testing.txt:34
msgid ""
"There are two primary ways to write tests with Django, corresponding to the "
"two test frameworks that ship in the Python standard library. The two "
"frameworks are:"
msgstr ""

# b49998b6371f45deaac3cbe72a47b063
#: ../../topics/testing.txt:38
msgid ""
"**Unit tests** -- tests that are expressed as methods on a Python class that "
"subclasses :class:`unittest.TestCase` or Django's customized :class:"
"`TestCase`. For example::"
msgstr ""

# 3e0f6bbfaa6642ddb49642e1bf404177
#: ../../topics/testing.txt:50
msgid ""
"**Doctests** -- tests that are embedded in your functions' docstrings and "
"are written in a way that emulates a session of the Python interactive "
"interpreter. For example::"
msgstr ""

# b795c69c275643fbb8703e6002a651c7
#: ../../topics/testing.txt:64
msgid ""
"We'll discuss choosing the appropriate test framework later, however, most "
"experienced developers prefer unit tests. You can also use any *other* "
"Python test framework, as we'll explain in a bit."
msgstr ""

# dccf03fa83cd48c7bc7e06f7e5cc6524
#: ../../topics/testing.txt:69
msgid "Writing unit tests"
msgstr ""

# 01068b32458b4b4c994da8c3c9462b79
#: ../../topics/testing.txt:71
msgid ""
"Django's unit tests use a Python standard library module: :mod:`unittest`. "
"This module defines tests in class-based approach."
msgstr ""

# d64c38b66b8e4867965b872411ba6d31
#: ../../topics/testing.txt:78
msgid ""
"Python 2.7 introduced some major changes to the unittest library, adding "
"some extremely useful features. To ensure that every Django project can "
"benefit from these new features, Django ships with a copy of unittest2_, a "
"copy of the Python 2.7 unittest library, backported for Python 2.5 "
"compatibility."
msgstr ""

# beee0771e9b848958c6133ff9e7fa4d3
#: ../../topics/testing.txt:84
msgid ""
"To access this library, Django provides the :mod:`django.utils.unittest` "
"module alias. If you are using Python 2.7, or you have installed unittest2 "
"locally, Django will map the alias to the installed version of the unittest "
"library. Otherwise, Django will use its own bundled version of unittest2."
msgstr ""

# 314955795e8d4de2a4dcb34745838c44
#: ../../topics/testing.txt:90
msgid "To use this alias, simply use::"
msgstr ""

# 7cd0535531b546fe9c66fa43c8c5f3c6
#: ../../topics/testing.txt:94
msgid "wherever you would have historically used::"
msgstr ""

# 21cdf69d50ab49b6a952a53c4450fd10
#: ../../topics/testing.txt:98
msgid ""
"If you want to continue to use the base unittest library, you can -- you "
"just won't get any of the nice new unittest2 features."
msgstr ""

# 8bc033152f7b4353b55a7ebf5b1c12d4
#: ../../topics/testing.txt:103
msgid ""
"For a given Django application, the test runner looks for unit tests in two "
"places:"
msgstr ""

# fa14723b02a94361937db6f9685dd513
#: ../../topics/testing.txt:106
msgid ""
"The ``models.py`` file. The test runner looks for any subclass of :class:"
"`unittest.TestCase` in this module."
msgstr ""

# 939f9ab1106c477982128c459ea0be7b
#: ../../topics/testing.txt:109
msgid ""
"A file called ``tests.py`` in the application directory -- i.e., the "
"directory that holds ``models.py``. Again, the test runner looks for any "
"subclass of :class:`unittest.TestCase` in this module."
msgstr ""

# 4663d8c5d79b4cbdb5de4ae2b6facf97
#: ../../topics/testing.txt:113
msgid "Here is an example :class:`unittest.TestCase` subclass::"
msgstr ""

# e717ed3ab0564b55b2d99b827986c7cc
#: ../../topics/testing.txt:128
msgid ""
"When you :ref:`run your tests <running-tests>`, the default behavior of the "
"test utility is to find all the test cases (that is, subclasses of :class:"
"`unittest.TestCase`) in ``models.py`` and ``tests.py``, automatically build "
"a test suite out of those test cases, and run that suite."
msgstr ""

# 6b0e2ab5abb24cca82bf59f41240f357
#: ../../topics/testing.txt:133
msgid ""
"There is a second way to define the test suite for a module: if you define a "
"function called ``suite()`` in either ``models.py`` or ``tests.py``, the "
"Django test runner will use that function to construct the test suite for "
"that module. This follows the `suggested organization`_ for unit tests. See "
"the Python documentation for more details on how to construct a complex test "
"suite."
msgstr ""

# d09bdb159dfa449cbbf702125ba28619
#: ../../topics/testing.txt:140
msgid "For more details about :mod:`unittest`, see the Python documentation."
msgstr ""

# a759d9a9c8a844c48d2c5122009059a2
#: ../../topics/testing.txt:145
msgid "Writing doctests"
msgstr ""

# 98399b125455474e8e432fc1ef887a03
#: ../../topics/testing.txt:147
msgid ""
"Doctests use Python's standard :mod:`doctest` module, which searches your "
"docstrings for statements that resemble a session of the Python interactive "
"interpreter. A full explanation of how :mod:`doctest` works is out of the "
"scope of this document; read Python's official documentation for the details."
msgstr ""

# bc17b7cbbed34f4d870cd8dcc4f55c7c
#: ../../topics/testing.txt:154
msgid ""
"A good explanation of docstrings (and some guidelines for using them "
"effectively) can be found in :pep:`257`:"
msgstr ""

# 6b6d6233eb354c55bddb7de55554c498
#: ../../topics/testing.txt:157
msgid ""
"A docstring is a string literal that occurs as the first statement in a "
"module, function, class, or method definition.  Such a docstring becomes the "
"``__doc__`` special attribute of that object."
msgstr ""

# 7c211d2072794536b60c9fee5214ebfe
#: ../../topics/testing.txt:161
msgid ""
"For example, this function has a docstring that describes what it does::"
msgstr ""

# f3e546ead7bd4803b3ea0dfe08adf694
#: ../../topics/testing.txt:167
msgid ""
"Because tests often make great documentation, putting tests directly in your "
"docstrings is an effective way to document *and* test your code."
msgstr ""

# 6b5d43e229d94e8aac5eaa79348c3f12
#: ../../topics/testing.txt:170
msgid ""
"As with unit tests, for a given Django application, the test runner looks "
"for doctests in two places:"
msgstr ""

# 94134834836b43a2bc1049f5357660b9
#: ../../topics/testing.txt:173
msgid ""
"The ``models.py`` file. You can define module-level doctests and/or a "
"doctest for individual models. It's common practice to put application-level "
"doctests in the module docstring and model-level doctests in the model "
"docstrings."
msgstr ""

# e546ffb7581d473391e5101e1bc45cd5
#: ../../topics/testing.txt:178
msgid ""
"A file called ``tests.py`` in the application directory -- i.e., the "
"directory that holds ``models.py``. This file is a hook for any and all "
"doctests you want to write that aren't necessarily related to models."
msgstr ""

# 9b7699a128444ebbbad9cc9850565e58
#: ../../topics/testing.txt:182
msgid ""
"This example doctest is equivalent to the example given in the unittest "
"section above::"
msgstr ""

# 343b0828a41d4064990fed9762c019a0
#: ../../topics/testing.txt:209
msgid ""
"When you :ref:`run your tests <running-tests>`, the test runner will find "
"this docstring, notice that portions of it look like an interactive Python "
"session, and execute those lines while checking that the results match."
msgstr ""

# 49c2a972cf8948839e858e953caa1f1a
#: ../../topics/testing.txt:213
msgid ""
"In the case of model tests, note that the test runner takes care of creating "
"its own test database. That is, any test that accesses a database -- by "
"creating and saving model instances, for example -- will not affect your "
"production database. However, the database is not refreshed between "
"doctests, so if your doctest requires a certain state you should consider "
"flushing the database or loading a fixture. (See the section on fixtures, "
"below, for more on this.) Note that to use this feature, the database user "
"Django is connecting as must have ``CREATE DATABASE`` rights."
msgstr ""

# 242d1204d99d461b8852cbac59deb7fe
#: ../../topics/testing.txt:222
msgid "For more details about :mod:`doctest`, see the Python documentation."
msgstr ""

# 16269ce98dfa4cd09fd514bf4190dfc4
#: ../../topics/testing.txt:225
msgid "Which should I use?"
msgstr ""

# 1e26ba3df49444bfaf61c0c6ad6f308f
#: ../../topics/testing.txt:227
msgid ""
"Because Django supports both of the standard Python test frameworks, it's up "
"to you and your tastes to decide which one to use. You can even decide to "
"use *both*."
msgstr ""

# b0582ffa1d314a8aae4df34758b298fc
#: ../../topics/testing.txt:231
msgid ""
"For developers new to testing, however, this choice can seem confusing. "
"Here, then, are a few key differences to help you decide which approach is "
"right for you:"
msgstr ""

# 57ff44d9ceb347f980759e4e649f8228
#: ../../topics/testing.txt:235
msgid ""
"If you've been using Python for a while, :mod:`doctest` will probably feel "
"more \"pythonic\". It's designed to make writing tests as easy as possible, "
"so it requires no overhead of writing classes or methods. You simply put "
"tests in docstrings. This has the added advantage of serving as "
"documentation (and correct documentation, at that!). However, while doctests "
"are good for some simple example code, they are not very good if you want to "
"produce either high quality, comprehensive tests or high quality "
"documentation. Test failures are often difficult to debug as it can be "
"unclear exactly why the test failed. Thus, doctests should generally be "
"avoided and used primarily for documentation examples only."
msgstr ""

# 5ed6e4a10b7549afaf4f27a3404dc1ee
#: ../../topics/testing.txt:246
msgid ""
"The :mod:`unittest` framework will probably feel very familiar to developers "
"coming from Java. :mod:`unittest` is inspired by Java's JUnit, so you'll "
"feel at home with this method if you've used JUnit or any test framework "
"inspired by JUnit."
msgstr ""

# 3465ff45b232469893334cda60ea99d4
#: ../../topics/testing.txt:251
msgid ""
"If you need to write a bunch of tests that share similar code, then you'll "
"appreciate the :mod:`unittest` framework's organization around classes and "
"methods. This makes it easy to abstract common tasks into common methods. "
"The framework also supports explicit setup and/or cleanup routines, which "
"give you a high level of control over the environment in which your test "
"cases are run."
msgstr ""

# 27a653c765e241f9abd0858b26bd62bf
#: ../../topics/testing.txt:258
msgid ""
"If you're writing tests for Django itself, you should use :mod:`unittest`."
msgstr ""

# 8eb07b09a5f544fcacf9c06ca33824bb
#: ../../topics/testing.txt:263
msgid "Running tests"
msgstr ""

# 072bb893b76d423093e24f9c8d3b3555
#: ../../topics/testing.txt:265
msgid ""
"Once you've written tests, run them using the :djadmin:`test` command of "
"your project's ``manage.py`` utility::"
msgstr ""

# 814c2839ffda44a6902b69fc5a374937
#: ../../topics/testing.txt:270
msgid ""
"By default, this will run every test in every application in :setting:"
"`INSTALLED_APPS`. If you only want to run tests for a particular "
"application, add the application name to the command line. For example, if "
"your :setting:`INSTALLED_APPS` contains ``'myproject.polls'`` and "
"``'myproject.animals'``, you can run the ``myproject.animals`` unit tests "
"alone with this command::"
msgstr ""

# 72fca628ce9b4bdda1444cbeb449e7d2
#: ../../topics/testing.txt:279
msgid "Note that we used ``animals``, not ``myproject.animals``."
msgstr ""

# d89877fd2a024c4ca11f9b37b834d2f1
#: ../../topics/testing.txt:281
msgid ""
"You can be even *more* specific by naming an individual test case. To run a "
"single test case in an application (for example, the ``AnimalTestCase`` "
"described in the \"Writing unit tests\" section), add the name of the test "
"case to the label on the command line::"
msgstr ""

# 387344b3cad9445f8e6a50546e53ce61
#: ../../topics/testing.txt:288
msgid ""
"And it gets even more granular than that! To run a *single* test method "
"inside a test case, add the name of the test method to the label::"
msgstr ""

# aa4e71152a324080bff3e9dafeb7410a
#: ../../topics/testing.txt:297
msgid ""
"You can use the same rules if you're using doctests. Django will use the "
"test label as a path to the test method or class that you want to run. If "
"your ``models.py`` or ``tests.py`` has a function with a doctest, or class "
"with a class-level doctest, you can invoke that test by appending the name "
"of the test method or class to the label::"
msgstr ""

# 9df13915b35342c08d6e75702a4638d5
#: ../../topics/testing.txt:305
msgid ""
"If you want to run the doctest for a specific method in a class, add the "
"name of the method to the label::"
msgstr ""

# ddf2ade0ffc84ae78c860ac105c5d23b
#: ../../topics/testing.txt:310
msgid ""
"If you're using a ``__test__`` dictionary to specify doctests for a module, "
"Django will use the label as a key in the ``__test__`` dictionary for "
"defined in ``models.py`` and ``tests.py``."
msgstr ""

# 1e8d00f6db204a278bf298046224b510
#: ../../topics/testing.txt:317
msgid ""
"If you press ``Ctrl-C`` while the tests are running, the test runner will "
"wait for the currently running test to complete and then exit gracefully. "
"During a graceful exit the test runner will output details of any test "
"failures, report on how many tests were run and how many errors and failures "
"were encountered, and destroy any test databases as usual. Thus pressing "
"``Ctrl-C`` can be very useful if you forget to pass the :djadminopt:`--"
"failfast` option, notice that some tests are unexpectedly failing, and want "
"to get details on the failures without waiting for the full test run to "
"complete."
msgstr ""

# baa780eecbe445e5ae8eed6504aba30f
#: ../../topics/testing.txt:326
msgid ""
"If you do not want to wait for the currently running test to finish, you can "
"press ``Ctrl-C`` a second time and the test run will halt immediately, but "
"not gracefully. No details of the tests run before the interruption will be "
"reported, and any test databases created by the run will not be destroyed."
msgstr ""

# 2fcd927ce5bd43dbb68a7670e761f34f
#: ../../topics/testing.txt:333
msgid ""
"It's a good idea to run your tests with Python warnings enabled: ``python -"
"Wall manage.py test``. The ``-Wall`` flag tells Python to display "
"deprecation warnings. Django, like many other Python libraries, uses these "
"warnings to flag when features are going away. It also might flag areas in "
"your code that aren't strictly wrong but could benefit from a better "
"implementation."
msgstr ""

# ea948c21e9f34c7b966f9ca94c69a392
#: ../../topics/testing.txt:341
msgid "Running tests outside the test runner"
msgstr ""

# e7c284f3e59a46efac83075af709c47a
#: ../../topics/testing.txt:343
msgid ""
"If you want to run tests outside of ``./manage.py test`` -- for example, "
"from a shell prompt -- you will need to set up the test environment first. "
"Django provides a convenience method to do this::"
msgstr ""

# f776c348df754389a87dec20424c0ece
#: ../../topics/testing.txt:350
msgid ""
"This convenience method sets up the test database, and puts other Django "
"features into modes that allow for repeatable testing."
msgstr ""

# 4ede0600377042f4b01af92cbfe24dfd
#: ../../topics/testing.txt:353
msgid ""
"The call to :meth:`~django.test.utils.setup_test_environment` is made "
"automatically as part of the setup of `./manage.py test`. You only need to "
"manually invoke this method if you're not using running your tests via "
"Django's test runner."
msgstr ""

# 86c3749ec75c430baab3b9837064a6dd
#: ../../topics/testing.txt:359
msgid "The test database"
msgstr ""

# 95b2a217a9704982aad39f8625ba785f
#: ../../topics/testing.txt:361
msgid ""
"Tests that require a database (namely, model tests) will not use your \"real"
"\" (production) database. Separate, blank databases are created for the "
"tests."
msgstr ""

# 2d860d149d0e4d929f8f9caace1b0d89
#: ../../topics/testing.txt:364
msgid ""
"Regardless of whether the tests pass or fail, the test databases are "
"destroyed when all the tests have been executed."
msgstr ""

# 226559297407486cbda32bfbd2528362
#: ../../topics/testing.txt:367
msgid ""
"By default the test databases get their names by prepending ``test_`` to the "
"value of the :setting:`NAME` settings for the databases defined in :setting:"
"`DATABASES`. When using the SQLite database engine the tests will by default "
"use an in-memory database (i.e., the database will be created in memory, "
"bypassing the filesystem entirely!). If you want to use a different database "
"name, specify :setting:`TEST_NAME` in the dictionary for any given database "
"in :setting:`DATABASES`."
msgstr ""

# 6aa6ba15db194a0788e214d63b8beccc
#: ../../topics/testing.txt:376
msgid ""
"Aside from using a separate database, the test runner will otherwise use all "
"of the same database settings you have in your settings file: :setting:"
"`ENGINE`, :setting:`USER`, :setting:`HOST`, etc. The test database is "
"created by the user specified by :setting:`USER`, so you'll need to make "
"sure that the given user account has sufficient privileges to create a new "
"database on the system."
msgstr ""

# fe4b76cb0c064e9e807b7cbff37a2846
#: ../../topics/testing.txt:383
msgid ""
"For fine-grained control over the character encoding of your test database, "
"use the :setting:`TEST_CHARSET` option. If you're using MySQL, you can also "
"use the :setting:`TEST_COLLATION` option to control the particular collation "
"used by the test database. See the :doc:`settings documentation </ref/"
"settings>` for details of these advanced settings."
msgstr ""

# ae79a01759a4424d8a9a680465d1fd11
#: ../../topics/testing.txt:393
msgid "Testing master/slave configurations"
msgstr ""

# 910f39459dc148d68ff4808699345bc6
#: ../../topics/testing.txt:397
msgid ""
"If you're testing a multiple database configuration with master/slave "
"replication, this strategy of creating test databases poses a problem. When "
"the test databases are created, there won't be any replication, and as a "
"result, data created on the master won't be seen on the slave."
msgstr ""

# 4a109206cc17475397c7385c533e8693
#: ../../topics/testing.txt:403
msgid ""
"To compensate for this, Django allows you to define that a database is a "
"*test mirror*. Consider the following (simplified) example database "
"configuration::"
msgstr ""

# bbd47a68092e469089b81b9f974c52fb
#: ../../topics/testing.txt:423
msgid ""
"In this setup, we have two database servers: ``dbmaster``, described by the "
"database alias ``default``, and ``dbslave`` described by the alias "
"``slave``. As you might expect, ``dbslave`` has been configured by the "
"database administrator as a read slave of ``dbmaster``, so in normal "
"activity, any write to ``default`` will appear on ``slave``."
msgstr ""

# 1353bef7cc4649ef856ef825565e52be
#: ../../topics/testing.txt:429
msgid ""
"If Django created two independent test databases, this would break any tests "
"that expected replication to occur. However, the ``slave`` database has been "
"configured as a test mirror (using the :setting:`TEST_MIRROR` setting), "
"indicating that under testing, ``slave`` should be treated as a mirror of "
"``default``."
msgstr ""

# de09d194fe1e4e8082387e23efacb510
#: ../../topics/testing.txt:435
msgid ""
"When the test environment is configured, a test version of ``slave`` will "
"*not* be created. Instead the connection to ``slave`` will be redirected to "
"point at ``default``. As a result, writes to ``default`` will appear on "
"``slave`` -- but because they are actually the same database, not because "
"there is data replication between the two databases."
msgstr ""

# b3a57e7f9e254111846ca7239d32e943
#: ../../topics/testing.txt:445
msgid "Controlling creation order for test databases"
msgstr ""

# 2433d3cce21a4b1cb7320b935dae2c75
#: ../../topics/testing.txt:449
msgid ""
"By default, Django will always create the ``default`` database first. "
"However, no guarantees are made on the creation order of any other databases "
"in your test setup."
msgstr ""

# 1a11c45ca1d9440faa040bc1cb25d843
#: ../../topics/testing.txt:453
msgid ""
"If your database configuration requires a specific creation order, you can "
"specify the dependencies that exist using the :setting:`TEST_DEPENDENCIES` "
"setting. Consider the following (simplified) example database configuration::"
msgstr ""

# 5362f4abc5d0405e845e2b873400889b
#: ../../topics/testing.txt:480
msgid ""
"Under this configuration, the ``diamonds`` database will be created first, "
"as it is the only database alias without dependencies. The ``default`` and "
"``clubs`` alias will be created next (although the order of creation of this "
"pair is not guaranteed); then ``hearts``; and finally ``spades``."
msgstr ""

# b4d369bcbf4c4d28b8cd884fa6b0bb2f
#: ../../topics/testing.txt:485
msgid ""
"If there are any circular dependencies in the :setting:`TEST_DEPENDENCIES` "
"definition, an ``ImproperlyConfigured`` exception will be raised."
msgstr ""

# 312a3e9c0c2940ff9060fd6572d371ca
#: ../../topics/testing.txt:490
msgid "Other test conditions"
msgstr ""

# ec47c853231f41a2894178985b594be8
#: ../../topics/testing.txt:492
msgid ""
"Regardless of the value of the :setting:`DEBUG` setting in your "
"configuration file, all Django tests run with :setting:`DEBUG`\\=False. This "
"is to ensure that the observed output of your code matches what will be seen "
"in a production setting."
msgstr ""

# b6a24152d6a54b80909f8146d193ffe2
#: ../../topics/testing.txt:498
msgid "Understanding the test output"
msgstr ""

# 2f203401aac04689be8240a57714d0fa
#: ../../topics/testing.txt:500
msgid ""
"When you run your tests, you'll see a number of messages as the test runner "
"prepares itself. You can control the level of detail of these messages with "
"the ``verbosity`` option on the command line::"
msgstr ""

# 35f2a05c4d89417a81d63b7e15659c4d
#: ../../topics/testing.txt:510
msgid ""
"This tells you that the test runner is creating a test database, as "
"described in the previous section."
msgstr ""

# 5e7e3243df2e47d489f9bd3c27db1439
#: ../../topics/testing.txt:513
msgid ""
"Once the test database has been created, Django will run your tests. If "
"everything goes well, you'll see something like this::"
msgstr ""

# ea1004021cf9496bb092c6ab4a8608c2
#: ../../topics/testing.txt:521
msgid ""
"If there are test failures, however, you'll see full details about which "
"tests failed::"
msgstr ""

# fd47d6c88fd0461385a293d7aef450ad
#: ../../topics/testing.txt:547
msgid ""
"A full explanation of this error output is beyond the scope of this "
"document, but it's pretty intuitive. You can consult the documentation of "
"Python's :mod:`unittest` library for details."
msgstr ""

# 26e4e99731d04e57a771a5f9b675f86d
#: ../../topics/testing.txt:551
msgid ""
"Note that the return code for the test-runner script is 1 for any number of "
"failed and erroneous tests. If all the tests pass, the return code is 0. "
"This feature is useful if you're using the test-runner script in a shell "
"script and need to test for success or failure at that level."
msgstr ""

# b9c978da10174bb6bec93bc84eeb1d80
#: ../../topics/testing.txt:557
msgid "Testing tools"
msgstr ""

# 09033d3232d44a76bf7719c52a159aed
#: ../../topics/testing.txt:559
msgid ""
"Django provides a small set of tools that come in handy when writing tests."
msgstr ""

# 6a9f102e219f4aaea5bdb3526c62a251
#: ../../topics/testing.txt:564
msgid "The test client"
msgstr ""

# 1d5d54cbc1a542de9b94dad013d72fc0
#: ../../topics/testing.txt:569
msgid ""
"The test client is a Python class that acts as a dummy Web browser, allowing "
"you to test your views and interact with your Django-powered application "
"programmatically."
msgstr ""

# 4c1954560a1244e1a0a153be6fda7068
#: ../../topics/testing.txt:573
msgid "Some of the things you can do with the test client are:"
msgstr ""

# 1fdc75b7334b4aba9e5f0900ec847ed2
#: ../../topics/testing.txt:575
msgid ""
"Simulate GET and POST requests on a URL and observe the response -- "
"everything from low-level HTTP (result headers and status codes) to page "
"content."
msgstr ""

# 505745f84ec5491f8e64caf838955cd7
#: ../../topics/testing.txt:579
msgid "Test that the correct view is executed for a given URL."
msgstr ""

# c13d300e71ec415097960e4c4f7fc8cf
#: ../../topics/testing.txt:581
msgid ""
"Test that a given request is rendered by a given Django template, with a "
"template context that contains certain values."
msgstr ""

# 6ad4f41847e1409f8ab14ec7db8626dd
#: ../../topics/testing.txt:584
msgid ""
"Note that the test client is not intended to be a replacement for Selenium_ "
"or other \"in-browser\" frameworks. Django's test client has a different "
"focus. In short:"
msgstr ""

# 972fec5829b743f5b89a6a3da9efd17b
#: ../../topics/testing.txt:588
msgid ""
"Use Django's test client to establish that the correct view is being called "
"and that the view is collecting the correct context data."
msgstr ""

# 05a29d16ff264762a35cf41df1281e44
#: ../../topics/testing.txt:591
msgid ""
"Use in-browser frameworks like Selenium_ to test *rendered* HTML and the "
"*behavior* of Web pages, namely JavaScript functionality. Django also "
"provides special support for those frameworks; see the section on :class:"
"`~django.test.LiveServerTestCase` for more details."
msgstr ""

# ea0512c3ac0d44af83b6d9543190b865
#: ../../topics/testing.txt:596
msgid "A comprehensive test suite should use a combination of both test types."
msgstr ""

# 318c1d9bc98a4614a46ebcde83732518
#: ../../topics/testing.txt:599
msgid "Overview and a quick example"
msgstr ""

# ff2700392cf84053bd3c3a8f77e69a38
#: ../../topics/testing.txt:601
msgid ""
"To use the test client, instantiate ``django.test.client.Client`` and "
"retrieve Web pages::"
msgstr ""

# e2da817192fc4d76a439a21d29bf8e4f
#: ../../topics/testing.txt:613
msgid ""
"As this example suggests, you can instantiate ``Client`` from within a "
"session of the Python interactive interpreter."
msgstr ""

# 6cd9d9e651734e14bf057c4288d39b67
#: ../../topics/testing.txt:616
msgid "Note a few important things about how the test client works:"
msgstr ""

# adbea7392204435b832e297ef191ba8d
#: ../../topics/testing.txt:618
msgid ""
"The test client does *not* require the Web server to be running. In fact, it "
"will run just fine with no Web server running at all! That's because it "
"avoids the overhead of HTTP and deals directly with the Django framework. "
"This helps make the unit tests run quickly."
msgstr ""

# 78e7a18d7efc4d679b26455071482c63
#: ../../topics/testing.txt:623
msgid ""
"When retrieving pages, remember to specify the *path* of the URL, not the "
"whole domain. For example, this is correct::"
msgstr ""

# bb7d4d9857714313a4a394d5e801c5c0
#: ../../topics/testing.txt:628
msgid "This is incorrect::"
msgstr ""

# 7beb3dda33594cd094615610283ff733
#: ../../topics/testing.txt:632
msgid ""
"The test client is not capable of retrieving Web pages that are not powered "
"by your Django project. If you need to retrieve other Web pages, use a "
"Python standard library module such as :mod:`urllib` or :mod:`urllib2`."
msgstr ""

# d2b71ee85589473085155ee0a77178db
#: ../../topics/testing.txt:637
msgid ""
"To resolve URLs, the test client uses whatever URLconf is pointed-to by "
"your :setting:`ROOT_URLCONF` setting."
msgstr ""

# a352913c3e9f48a3a34a9cceb1bdd728
#: ../../topics/testing.txt:640
msgid ""
"Although the above example would work in the Python interactive interpreter, "
"some of the test client's functionality, notably the template-related "
"functionality, is only available *while tests are running*."
msgstr ""

# 9498956c4e2b43c09c0c99af227f44ae
#: ../../topics/testing.txt:645
msgid ""
"The reason for this is that Django's test runner performs a bit of black "
"magic in order to determine which template was loaded by a given view. This "
"black magic (essentially a patching of Django's template system in memory) "
"only happens during test running."
msgstr ""

# cb7d5593a6474d92bffa7b73b8c897cd
#: ../../topics/testing.txt:650
msgid ""
"By default, the test client will disable any CSRF checks performed by your "
"site."
msgstr ""

# 6ebc92d11b4f43f09d21a12d2d628787
#: ../../topics/testing.txt:655
msgid ""
"If, for some reason, you *want* the test client to perform CSRF checks, you "
"can create an instance of the test client that enforces CSRF checks. To do "
"this, pass in the ``enforce_csrf_checks`` argument when you construct your "
"client::"
msgstr ""

# e821c193cc97476588f22b396b130824
#: ../../topics/testing.txt:665
msgid "Making requests"
msgstr ""

# fe4cb47101a54f2dad89c4d745967e23
#: ../../topics/testing.txt:667
msgid ""
"Use the ``django.test.client.Client`` class to make requests. It requires no "
"arguments at time of construction:"
msgstr ""

# 6575db23e709441cbb2a702ce6bddaad
#: ../../topics/testing.txt:672
msgid ""
"Once you have a ``Client`` instance, you can call any of the following "
"methods:"
msgstr ""

# 85ce4b48bf5b40f2af8e53c202b0063b
#: ../../topics/testing.txt:678
msgid ""
"Makes a GET request on the provided ``path`` and returns a ``Response`` "
"object, which is documented below."
msgstr ""

# e4f528f6c77a4662a52a24ad41d8584a
#: ../../topics/testing.txt:681
msgid ""
"The key-value pairs in the ``data`` dictionary are used to create a GET data "
"payload. For example::"
msgstr ""

# 0700c9f9593745789448875f4ac4bd16
#: ../../topics/testing.txt:687
msgid "...will result in the evaluation of a GET request equivalent to::"
msgstr ""

# 06cff238aa824af0bd02bd52d96a0c01
#: ../../topics/testing.txt:691
msgid ""
"The ``extra`` keyword arguments parameter can be used to specify headers to "
"be sent in the request. For example::"
msgstr ""

# ad69902b12814c709c7b5691b37a2185
#: ../../topics/testing.txt:698
msgid ""
"...will send the HTTP header ``HTTP_X_REQUESTED_WITH`` to the details view, "
"which is a good way to test code paths that use the :meth:`django.http."
"HttpRequest.is_ajax()` method."
msgstr ""

# a49a3217b91e456facfb82e8be82de2a
#: ../../topics/testing.txt:704
msgid ""
"The headers sent via ``**extra`` should follow CGI_ specification. For "
"example, emulating a different \"Host\" header as sent in the HTTP request "
"from the browser to the server should be passed as ``HTTP_HOST``."
msgstr ""

# fda2641caac347018645089936ab3c42
#: ../../topics/testing.txt:711
msgid ""
"If you already have the GET arguments in URL-encoded form, you can use that "
"encoding instead of using the data argument. For example, the previous GET "
"request could also be posed as::"
msgstr ""

# ff069d3173254c2eaba94362427b5242
#: ../../topics/testing.txt:718
msgid ""
"If you provide a URL with both an encoded GET data and a data argument, the "
"data argument will take precedence."
msgstr ""

# 3b84c3e500cc4f17a36afce72ba2f742
# e9709e9d2195482baa64b03f8de6a379
# 96c50d14038c4f4889f1b06f13bcc30d
# fe5c0d516701421d8b92fd2c10481809
# fd5aecd2f65e46769646960f26764fea
# bdbc57d539e84707a6c3017051a0210f
#: ../../topics/testing.txt:721 ../../topics/testing.txt:803
#: ../../topics/testing.txt:813 ../../topics/testing.txt:822
#: ../../topics/testing.txt:834 ../../topics/testing.txt:843
msgid ""
"If you set ``follow`` to ``True`` the client will follow any redirects and a "
"``redirect_chain`` attribute will be set in the response object containing "
"tuples of the intermediate urls and status codes."
msgstr ""

# 4f6e90a4620044f69fffa1923fda1f6d
#: ../../topics/testing.txt:725
msgid ""
"If you had an url ``/redirect_me/`` that redirected to ``/next/``, that "
"redirected to ``/final/``, this is what you'd see::"
msgstr ""

# a7d3ca198d4e483197a816362a83fc88
#: ../../topics/testing.txt:734
msgid ""
"Makes a POST request on the provided ``path`` and returns a ``Response`` "
"object, which is documented below."
msgstr ""

# cb629bf49e0b4ae5b38a83103a0dc016
#: ../../topics/testing.txt:737
msgid ""
"The key-value pairs in the ``data`` dictionary are used to submit POST data. "
"For example::"
msgstr ""

# 82b1f41ec6934cabbfa6e3cc98cb8a57
#: ../../topics/testing.txt:743
msgid "...will result in the evaluation of a POST request to this URL::"
msgstr ""

# f277bec2500d4be6974228bbe7c031bd
#: ../../topics/testing.txt:747
msgid "...with this POST data::"
msgstr ""

# 4fcb5769361d4716a1aaa461020e1344
#: ../../topics/testing.txt:751
msgid ""
"If you provide ``content_type`` (e.g. :mimetype:`text/xml` for an XML "
"payload), the contents of ``data`` will be sent as-is in the POST request, "
"using ``content_type`` in the HTTP ``Content-Type`` header."
msgstr ""

# 3e4990389fcb4697912f4e0a9dad2072
#: ../../topics/testing.txt:755
msgid ""
"If you don't provide a value for ``content_type``, the values in ``data`` "
"will be transmitted with a content type of :mimetype:`multipart/form-data`. "
"In this case, the key-value pairs in ``data`` will be encoded as a multipart "
"message and used to create the POST data payload."
msgstr ""

# 10b265e3fc7e474facb339515faba40f
#: ../../topics/testing.txt:761
msgid ""
"To submit multiple values for a given key -- for example, to specify the "
"selections for a ``<select multiple>`` -- provide the values as a list or "
"tuple for the required key. For example, this value of ``data`` would submit "
"three selected values for the field named ``choices``::"
msgstr ""

# 53ee88c553914ddba510a61d42e07125
#: ../../topics/testing.txt:768
msgid ""
"Submitting files is a special case. To POST a file, you need only provide "
"the file field name as a key, and a file handle to the file you wish to "
"upload as a value. For example::"
msgstr ""

# bb0e569d7c9b46c8aeb80959f33bd460
#: ../../topics/testing.txt:777
msgid ""
"(The name ``attachment`` here is not relevant; use whatever name your file-"
"processing code expects.)"
msgstr ""

# 7a3cb788fc9b43a7b5bf8bc0e4d88015
#: ../../topics/testing.txt:780
msgid ""
"Note that if you wish to use the same file handle for multiple ``post()`` "
"calls then you will need to manually reset the file pointer between posts. "
"The easiest way to do this is to manually close the file after it has been "
"provided to ``post()``, as demonstrated above."
msgstr ""

# ae7b4468ff704aa6b4362c2c3e4bdd92
#: ../../topics/testing.txt:786
msgid ""
"You should also ensure that the file is opened in a way that allows the data "
"to be read. If your file contains binary data such as an image, this means "
"you will need to open the file in ``rb`` (read binary) mode."
msgstr ""

# fe004ab21282418ead1ce7246d38c2b1
# 86c506eebb184b3fab9e3cc25be84c75
# 4b532c5392fb45f393042b9f876db2b6
#: ../../topics/testing.txt:791 ../../topics/testing.txt:826
#: ../../topics/testing.txt:847
msgid "The ``extra`` argument acts the same as for :meth:`Client.get`."
msgstr ""

# 71c15f9c78094b82af2c7500ca2c6050
#: ../../topics/testing.txt:793
msgid ""
"If the URL you request with a POST contains encoded parameters, these "
"parameters will be made available in the request.GET data. For example, if "
"you were to make the request::"
msgstr ""

# 4fe150f9e53d49ffaac6c66b0f7cc2ef
#: ../../topics/testing.txt:799
msgid ""
"... the view handling this request could interrogate request.POST to "
"retrieve the username and password, and could interrogate request.GET to "
"determine if the user was a visitor."
msgstr ""

# 57df65c828da4e378334564540d791c8
#: ../../topics/testing.txt:809
msgid ""
"Makes a HEAD request on the provided ``path`` and returns a ``Response`` "
"object. Useful for testing RESTful interfaces. Acts just like :meth:`Client."
"get` except it does not return a message body."
msgstr ""

# 26572138038d49e294bbeeb87717c1c3
#: ../../topics/testing.txt:819
msgid ""
"Makes an OPTIONS request on the provided ``path`` and returns a ``Response`` "
"object. Useful for testing RESTful interfaces."
msgstr ""

# 2c5144ba108b4d62912622b54167e92a
#: ../../topics/testing.txt:830
msgid ""
"Makes a PUT request on the provided ``path`` and returns a ``Response`` "
"object. Useful for testing RESTful interfaces. Acts just like :meth:`Client."
"post` except with the PUT request method."
msgstr ""

# 1f3cd26575f540a098f2b10b75045d2a
#: ../../topics/testing.txt:840
msgid ""
"Makes an DELETE request on the provided ``path`` and returns a ``Response`` "
"object. Useful for testing RESTful interfaces."
msgstr ""

# 3b0c3985020b4855ba6474bc7810fe15
#: ../../topics/testing.txt:851
msgid ""
"If your site uses Django's :doc:`authentication system</topics/auth>` and "
"you deal with logging in users, you can use the test client's ``login()`` "
"method to simulate the effect of a user logging into the site."
msgstr ""

# 66d29519e8dc41a689a723871f5ebfd4
#: ../../topics/testing.txt:856
msgid ""
"After you call this method, the test client will have all the cookies and "
"session data required to pass any login-based tests that may form part of a "
"view."
msgstr ""

# a7a80c235b5a4baba82069ddcabf1194
#: ../../topics/testing.txt:860
msgid ""
"The format of the ``credentials`` argument depends on which :ref:"
"`authentication backend <authentication-backends>` you're using (which is "
"configured by your :setting:`AUTHENTICATION_BACKENDS` setting). If you're "
"using the standard authentication backend provided by Django "
"(``ModelBackend``), ``credentials`` should be the user's username and "
"password, provided as keyword arguments::"
msgstr ""

# 8b3108f2e81643ba8f98b782cd22e424
#: ../../topics/testing.txt:872
msgid ""
"If you're using a different authentication backend, this method may require "
"different credentials. It requires whichever credentials are required by "
"your backend's ``authenticate()`` method."
msgstr ""

# 65a65866d9b74558bd675378fdd7072b
#: ../../topics/testing.txt:876
msgid ""
"``login()`` returns ``True`` if it the credentials were accepted and login "
"was successful."
msgstr ""

# 0c22181a1e064231bba065e4d209ff4c
#: ../../topics/testing.txt:879
msgid ""
"Finally, you'll need to remember to create user accounts before you can use "
"this method. As we explained above, the test runner is executed using a test "
"database, which contains no users by default. As a result, user accounts "
"that are valid on your production site will not work under test conditions. "
"You'll need to create users as part of the test suite -- either manually "
"(using the Django model API) or with a test fixture. Remember that if you "
"want your test user to have a password, you can't set the user's password by "
"setting the password attribute directly -- you must use the :meth:`~django."
"contrib.auth.models.User.set_password()` function to store a correctly "
"hashed password. Alternatively, you can use the :meth:`~django.contrib.auth."
"models.UserManager.create_user` helper method to create a new user with a "
"correctly hashed password."
msgstr ""

# 445a8f42660d4073ab58b901a0c794ef
#: ../../topics/testing.txt:895
msgid ""
"If your site uses Django's :doc:`authentication system</topics/auth>`, the "
"``logout()`` method can be used to simulate the effect of a user logging out "
"of your site."
msgstr ""

# 3b924e12b1984fa59d390454c355044c
#: ../../topics/testing.txt:899
msgid ""
"After you call this method, the test client will have all the cookies and "
"session data cleared to defaults. Subsequent requests will appear to come "
"from an AnonymousUser."
msgstr ""

# cfe266d4c1f34f4f926b94fe975cbd2e
#: ../../topics/testing.txt:904
msgid "Testing responses"
msgstr ""

# 7eb68a2014d242e6945e05d972f0c62d
#: ../../topics/testing.txt:906
msgid ""
"The ``get()`` and ``post()`` methods both return a ``Response`` object. This "
"``Response`` object is *not* the same as the ``HttpResponse`` object "
"returned Django views; the test response object has some additional data "
"useful for test code to verify."
msgstr ""

# c914009832f64f86997f803ffbab05f6
#: ../../topics/testing.txt:911
msgid "Specifically, a ``Response`` object has the following attributes:"
msgstr ""

# 95e1e56e28904513a3357a91a66898af
#: ../../topics/testing.txt:917
msgid ""
"The test client that was used to make the request that resulted in the "
"response."
msgstr ""

# 30dd156bc4754a2a97d5a4a4ec1fbddf
#: ../../topics/testing.txt:922
msgid ""
"The body of the response, as a string. This is the final page content as "
"rendered by the view, or any error message."
msgstr ""

# 29720defba0148daa463116bfb0280da
#: ../../topics/testing.txt:927
msgid ""
"The template ``Context`` instance that was used to render the template that "
"produced the response content."
msgstr ""

# 43061a43f46c4953903fbefa582d03d5
#: ../../topics/testing.txt:930
msgid ""
"If the rendered page used multiple templates, then ``context`` will be a "
"list of ``Context`` objects, in the order in which they were rendered."
msgstr ""

# a98c794e77a74780898c76406282e2ad
#: ../../topics/testing.txt:933
msgid ""
"Regardless of the number of templates used during rendering, you can "
"retrieve context values using the ``[]`` operator. For example, the context "
"variable ``name`` could be retrieved using::"
msgstr ""

# 3460c68a95294646b88b0e61b061e990
#: ../../topics/testing.txt:943
msgid "The request data that stimulated the response."
msgstr ""

# 86e4f37908c846dfb9f2804c6ed44e12
#: ../../topics/testing.txt:947
msgid ""
"The HTTP status of the response, as an integer. See :rfc:`2616#section-10` "
"for a full list of HTTP status codes."
msgstr ""

# 5d6f3a24184f4daf8d61e1aaab5a63c6
#: ../../topics/testing.txt:954
msgid ""
"A list of ``Template`` instances used to render the final content, in the "
"order they were rendered. For each template in the list, use ``template."
"name`` to get the template's file name, if the template was loaded from a "
"file. (The name is a string such as ``'admin/index.html'``.)"
msgstr ""

# 8817e80ff0394f6fa39bf26f7a14c623
#: ../../topics/testing.txt:960
msgid ""
"You can also use dictionary syntax on the response object to query the value "
"of any settings in the HTTP headers. For example, you could determine the "
"content type of a response using ``response['Content-Type']``."
msgstr ""

# 25caec197fb74a659e4acc13c95322ab
#: ../../topics/testing.txt:965
msgid "Exceptions"
msgstr ""

# e64a5ce1856a49198dd988ee34a1e253
#: ../../topics/testing.txt:967
msgid ""
"If you point the test client at a view that raises an exception, that "
"exception will be visible in the test case. You can then use a standard "
"``try ... except`` block or :meth:`~unittest.TestCase.assertRaises` to test "
"for exceptions."
msgstr ""

# 1c8eaaf9922745bf95c797533383c311
#: ../../topics/testing.txt:971
msgid ""
"The only exceptions that are not visible to the test client are ``Http404``, "
"``PermissionDenied`` and ``SystemExit``. Django catches these exceptions "
"internally and converts them into the appropriate HTTP response codes. In "
"these cases, you can check ``response.status_code`` in your test."
msgstr ""

# 6d2545b62bf34ccf910d5b44f19fc4dd
#: ../../topics/testing.txt:977
msgid "Persistent state"
msgstr ""

# f1b3eac569aa4a7ca6fe1993e2fdb81c
#: ../../topics/testing.txt:979
msgid ""
"The test client is stateful. If a response returns a cookie, then that "
"cookie will be stored in the test client and sent with all subsequent ``get()"
"`` and ``post()`` requests."
msgstr ""

# df7a285ecc4444a285447f2ea53aada5
#: ../../topics/testing.txt:983
msgid ""
"Expiration policies for these cookies are not followed. If you want a cookie "
"to expire, either delete it manually or create a new ``Client`` instance "
"(which will effectively delete all cookies)."
msgstr ""

# 54ddcfc64592474a978b2593a692dd8c
#: ../../topics/testing.txt:987
msgid ""
"A test client has two attributes that store persistent state information. "
"You can access these properties as part of a test condition."
msgstr ""

# e894ef0942044718bcbc0c271170e31a
#: ../../topics/testing.txt:992
msgid ""
"A Python :class:`~Cookie.SimpleCookie` object, containing the current values "
"of all the client cookies. See the documentation of the :mod:`Cookie` module "
"for more."
msgstr ""

# 7bd8e625cb92487da991e9f1b9b63727
#: ../../topics/testing.txt:998
msgid ""
"A dictionary-like object containing session information. See the :doc:"
"`session documentation</topics/http/sessions>` for full details."
msgstr ""

# 2955e68f0be24cc4a69ada3a4db9f14e
#: ../../topics/testing.txt:1001
msgid ""
"To modify the session and then save it, it must be stored in a variable "
"first (because a new ``SessionStore`` is created every time this property is "
"accessed)::"
msgstr ""

# 9003914e8ab14d42a494c4e71d498f4e
#: ../../topics/testing.txt:1013
msgid "The following is a simple unit test using the test client::"
msgstr ""

# e471a4b3b4714aadbe4d102beac8a94a
#: ../../topics/testing.txt:1034
msgid "The request factory"
msgstr ""

# f6310b072bda4a47b638c54135857f07
#: ../../topics/testing.txt:1040
msgid ""
"The :class:`~django.test.client.RequestFactory` shares the same API as the "
"test client. However, instead of behaving like a browser, the RequestFactory "
"provides a way to generate a request instance that can be used as the first "
"argument to any view. This means you can test a view function the same way "
"as you would test any other function -- as a black box, with exactly known "
"inputs, testing for specific outputs."
msgstr ""

# 4861c111ae644a4e8e9e5cdef5e35c15
#: ../../topics/testing.txt:1047
msgid ""
"The API for the :class:`~django.test.client.RequestFactory` is a slightly "
"restricted subset of the test client API:"
msgstr ""

# b1036b7b5f584e69a29e3ef5a9a8d24a
#: ../../topics/testing.txt:1050
msgid ""
"It only has access to the HTTP methods :meth:`~Client.get()`, :meth:`~Client."
"post()`, :meth:`~Client.put()`, :meth:`~Client.delete()`, :meth:`~Client.head"
"()` and :meth:`~Client.options()`."
msgstr ""

# 5feb94727ef84cc0ae226ccbf7e6c5e8
#: ../../topics/testing.txt:1055
msgid ""
"These methods accept all the same arguments *except* for ``follows``. Since "
"this is just a factory for producing requests, it's up to you to handle the "
"response."
msgstr ""

# 40c60f5c2fd348e0a13841a3a5796299
#: ../../topics/testing.txt:1059
msgid ""
"It does not support middleware. Session and authentication attributes must "
"be supplied by the test itself if required for the view to function properly."
msgstr ""

# 699cb25f932d43a9abcaf6f5cd260c2d
#: ../../topics/testing.txt:1066
msgid "The following is a simple unit test using the request factory::"
msgstr ""

# 2c1580d3ab3f48569f43498e8457fe5a
#: ../../topics/testing.txt:1085
msgid "TestCase"
msgstr ""

# 6f6a540b4062435eaa3d81d6db7618aa
#: ../../topics/testing.txt:1089
msgid ""
"Normal Python unit test classes extend a base class of :class:`unittest."
"TestCase`. Django provides a few extensions of this base class:"
msgstr ""

# 0155691af4b844efb795da9a066b59dd
#: ../../topics/testing.txt:1101
msgid ""
"This class provides some additional capabilities that can be useful for "
"testing Web sites."
msgstr ""

# 7342e1278cb74bd79add9f5645ef8853
#: ../../topics/testing.txt:1104
msgid ""
"Converting a normal :class:`unittest.TestCase` to a Django :class:`TestCase` "
"is easy: just change the base class of your test from :class:`unittest."
"TestCase` to :class:`django.test.TestCase`. All of the standard Python unit "
"test functionality will continue to be available, but it will be augmented "
"with some useful additions, including:"
msgstr ""

# 89b117803baa40feb3ea53f1bd250f58
#: ../../topics/testing.txt:1110
msgid "Automatic loading of fixtures."
msgstr ""

# 11b0d5ad3ed241e6bc9d9a105401e1b5
#: ../../topics/testing.txt:1112
msgid "Wraps each test in a transaction."
msgstr ""

# ae37f7963c214466b2492d262cedd5ed
#: ../../topics/testing.txt:1114
msgid "Creates a TestClient instance."
msgstr ""

# a00fdcea13e74fa49d83f74b83a5f5e1
#: ../../topics/testing.txt:1116
msgid ""
"Django-specific assertions for testing for things like redirection and form "
"errors."
msgstr ""

# e5a1bb2681924b99b12f9927ccdc5c32
#: ../../topics/testing.txt:1119
msgid "``TestCase`` inherits from :class:`~django.test.TransactionTestCase`."
msgstr ""

# 059caf7dd16d465ebb837299bd33434b
#: ../../topics/testing.txt:1123
msgid ""
"Django ``TestCase`` classes make use of database transaction facilities, if "
"available, to speed up the process of resetting the database to a known "
"state at the beginning of each test. A consequence of this, however, is that "
"the effects of transaction commit and rollback cannot be tested by a Django "
"``TestCase`` class. If your test requires testing of such transactional "
"behavior, you should use a Django ``TransactionTestCase``."
msgstr ""

# c7fe5a3b001d4bf7805ee3ba341edd73
#: ../../topics/testing.txt:1130
msgid ""
"``TransactionTestCase`` and ``TestCase`` are identical except for the manner "
"in which the database is reset to a known state and the ability for test "
"code to test the effects of commit and rollback. A ``TransactionTestCase`` "
"resets the database before the test runs by truncating all tables and "
"reloading initial data. A ``TransactionTestCase`` may call commit and "
"rollback and observe the effects of these calls on the database."
msgstr ""

# 52695084e9244e538e85742a1f366974
#: ../../topics/testing.txt:1137
msgid ""
"A ``TestCase``, on the other hand, does not truncate tables and reload "
"initial data at the beginning of a test. Instead, it encloses the test code "
"in a database transaction that is rolled back at the end of the test.  It "
"also prevents the code under test from issuing any commit or rollback "
"operations on the database, to ensure that the rollback at the end of the "
"test restores the database to its initial state. In order to guarantee that "
"all ``TestCase`` code starts with a clean database, the Django test runner "
"runs all ``TestCase`` tests first, before any other tests (e.g. doctests) "
"that may alter the database without restoring it to its original state."
msgstr ""

# 6240a76440124f15b5827115f64e4a5d
#: ../../topics/testing.txt:1147
msgid ""
"When running on a database that does not support rollback (e.g. MySQL with "
"the MyISAM storage engine), ``TestCase`` falls back to initializing the "
"database by truncating tables and reloading initial data."
msgstr ""

# 28f00545ace642098f73c4ce47a6c2f5
#: ../../topics/testing.txt:1151
msgid ""
"``TransactionTestCase`` inherits from :class:`~django.test.SimpleTestCase`."
msgstr ""

# 2694b22196d34ccf8fdde7712b46ec9e
#: ../../topics/testing.txt:1154
msgid ""
"The ``TestCase`` use of rollback to un-do the effects of the test code may "
"reveal previously-undetected errors in test code.  For example, test code "
"that assumes primary keys values will be assigned starting at one may find "
"that assumption no longer holds true when rollbacks instead of table "
"truncation are being used to reset the database.  Similarly, the reordering "
"of tests so that all ``TestCase`` classes run first may reveal unexpected "
"dependencies on test case ordering.  In such cases a quick fix is to switch "
"the ``TestCase`` to a ``TransactionTestCase``. A better long-term fix, that "
"allows the test to take advantage of the speed benefit of ``TestCase``, is "
"to fix the underlying test problem."
msgstr ""

# 9c1041f295474347996ddee122494664
#: ../../topics/testing.txt:1169
msgid ""
"A very thin subclass of :class:`unittest.TestCase`, it extends it with some "
"basic functionality like:"
msgstr ""

# 6117dd5a16924d3989e0a016b29fcac9
#: ../../topics/testing.txt:1172
msgid "Saving and restoring the Python warning machinery state."
msgstr ""

# 447c5be7c75d47c5ade9788beffa471e
#: ../../topics/testing.txt:1173
msgid ""
"Checking that a callable :meth:`raises a certain exception <SimpleTestCase."
"assertRaisesMessage>`."
msgstr ""

# 0360f96b0d6e49fd8a8196a74f110746
#: ../../topics/testing.txt:1174
msgid ""
":meth:`Testing form field rendering <SimpleTestCase.assertFieldOutput>`."
msgstr ""

# 70978d2069d74b5489026726223e870d
#: ../../topics/testing.txt:1175
msgid ""
"Testing server :ref:`HTML responses for the presence/lack of a given "
"fragment <assertions>`."
msgstr ""

# e04b7b45d6814178b05f7ffedcc39259
#: ../../topics/testing.txt:1176
msgid ""
"The ability to run tests with :ref:`modified settings <overriding-settings>`"
msgstr ""

# b3a4fc92fa52402aab9944b86fa42bb4
#: ../../topics/testing.txt:1178
msgid ""
"If you need any of the other more complex and heavyweight Django-specific "
"features like:"
msgstr ""

# 19bf46ca6f68404a826b5d05d10e435b
#: ../../topics/testing.txt:1181
msgid "Using the :attr:`~TestCase.client` :class:`~django.test.client.Client`."
msgstr ""

# 6d00bc495e844135bd47a469f2da1749
#: ../../topics/testing.txt:1182
msgid "Testing or using the ORM."
msgstr ""

# 676b66d7f2914069b2666f8f5381106e
#: ../../topics/testing.txt:1183
msgid "Database :attr:`~TestCase.fixtures`."
msgstr ""

# 01184b703b304494bdd7f80eb279516e
#: ../../topics/testing.txt:1184
msgid "Custom test-time :attr:`URL maps <TestCase.urls>`."
msgstr ""

# 75643c937c4a491bae9c30072925db90
#: ../../topics/testing.txt:1185
msgid ""
"Test :ref:`skipping based on database backend features <skipping-tests>`."
msgstr ""

# 3bea568d3fd044a487dbd155beb3bf95
#: ../../topics/testing.txt:1186
msgid "The remaining specialized :ref:`assert* <assertions>` methods."
msgstr ""

# 9f11630d41f6493caea71dd0e8f66c03
#: ../../topics/testing.txt:1188
msgid ""
"then you should use :class:`~django.test.TransactionTestCase` or :class:"
"`~django.test.TestCase` instead."
msgstr ""

# 828db80a097844ab9f3f3134b69ec7ca
#: ../../topics/testing.txt:1191
msgid ""
"``SimpleTestCase`` inherits from :class:`django.utils.unittest.TestCase`."
msgstr ""

# d7adda60adaf4135944b71d194a722dd
#: ../../topics/testing.txt:1194
msgid "Default test client"
msgstr ""

# 787cf102224d4e11a2b2f556577ce43a
#: ../../topics/testing.txt:1198
msgid ""
"Every test case in a ``django.test.TestCase`` instance has access to an "
"instance of a Django test client. This client can be accessed as ``self."
"client``. This client is recreated for each test, so you don't have to worry "
"about state (such as cookies) carrying over from one test to another."
msgstr ""

# f666b86c1d0149a1bade9491e635bf8f
#: ../../topics/testing.txt:1203
msgid "This means, instead of instantiating a ``Client`` in each test::"
msgstr ""

# b05898f90e984eb98aff6e0b8efa991d
#: ../../topics/testing.txt:1219
msgid "...you can just refer to ``self.client``, like so::"
msgstr ""

# 1092d2a371854981b64c8f640c120331
#: ../../topics/testing.txt:1233
msgid "Customizing the test client"
msgstr ""

# 03dfc900107c41dea380b3a43a74ec6d
#: ../../topics/testing.txt:1239
msgid ""
"If you want to use a different ``Client`` class (for example, a subclass "
"with customized behavior), use the :attr:`~TestCase.client_class` class "
"attribute::"
msgstr ""

# 4d01f7fbb3ec4770a293d7fa7b0440bb
#: ../../topics/testing.txt:1258
msgid "Fixture loading"
msgstr ""

# 5026b5a7a6f8433ca94b0b8de43a403a
#: ../../topics/testing.txt:1262
msgid ""
"A test case for a database-backed Web site isn't much use if there isn't any "
"data in the database. To make it easy to put test data into the database, "
"Django's custom ``TestCase`` class provides a way of loading **fixtures**."
msgstr ""

# 2a45c3ac9a4645a8a9e07489667fa14b
#: ../../topics/testing.txt:1266
msgid ""
"A fixture is a collection of data that Django knows how to import into a "
"database. For example, if your site has user accounts, you might set up a "
"fixture of fake user accounts in order to populate your database during "
"tests."
msgstr ""

# 5e1c65d9b6624beda8e0dc2a1366202e
#: ../../topics/testing.txt:1270
msgid ""
"The most straightforward way of creating a fixture is to use the :djadmin:"
"`manage.py dumpdata <dumpdata>` command. This assumes you already have some "
"data in your database. See the :djadmin:`dumpdata documentation<dumpdata>` "
"for more details."
msgstr ""

# 72e37051ca134d3a86fef5a6d9062867
#: ../../topics/testing.txt:1277
msgid ""
"If you've ever run :djadmin:`manage.py syncdb<syncdb>`, you've already used "
"a fixture without even knowing it! When you call :djadmin:`syncdb` in the "
"database for the first time, Django installs a fixture called "
"``initial_data``. This gives you a way of populating a new database with any "
"initial data, such as a default set of categories."
msgstr ""

# 32b0b4a81ed64ba99dc768b98d87033c
#: ../../topics/testing.txt:1284
msgid ""
"Fixtures with other names can always be installed manually using the :"
"djadmin:`manage.py loaddata<loaddata>` command."
msgstr ""

# 58c047809a354f52a83066f561894443
#: ../../topics/testing.txt:1289
msgid ""
"Django provides a second way to insert initial data into models -- the :ref:"
"`custom SQL hook <initial-sql>`. However, this technique *cannot* be used to "
"provide initial data for testing purposes. Django's test framework flushes "
"the contents of the test database after each test; as a result, any data "
"added using the custom SQL hook will be lost."
msgstr ""

# 08d382a7993f492590d4de5fd38dc1a6
#: ../../topics/testing.txt:1296
msgid ""
"Once you've created a fixture and placed it in a ``fixtures`` directory in "
"one of your :setting:`INSTALLED_APPS`, you can use it in your unit tests by "
"specifying a ``fixtures`` class attribute on your :class:`django.test."
"TestCase` subclass::"
msgstr ""

# 1cc3b6ac47ae44b6b3012783076f7113
#: ../../topics/testing.txt:1315
msgid "Here's specifically what will happen:"
msgstr ""

# bdeb3a5cfc4d4c2e978b326987d19e32
#: ../../topics/testing.txt:1317
msgid ""
"At the start of each test case, before ``setUp()`` is run, Django will flush "
"the database, returning the database to the state it was in directly after :"
"djadmin:`syncdb` was called."
msgstr ""

# 76d375af04d44271afee1062cdacfb7a
#: ../../topics/testing.txt:1321
msgid ""
"Then, all the named fixtures are installed. In this example, Django will "
"install any JSON fixture named ``mammals``, followed by any fixture named "
"``birds``. See the :djadmin:`loaddata` documentation for more details on "
"defining and installing fixtures."
msgstr ""

# 0eb4009b8f1d44aea1e9e6279be20728
#: ../../topics/testing.txt:1326
msgid ""
"This flush/load procedure is repeated for each test in the test case, so you "
"can be certain that the outcome of a test will not be affected by another "
"test, or by the order of test execution."
msgstr ""

# 8a6a875d30744053b05d0c0e06844ab9
#: ../../topics/testing.txt:1331
msgid "URLconf configuration"
msgstr ""

# e0dceeb65e924957b2cff4a536e8105b
#: ../../topics/testing.txt:1335
msgid ""
"If your application provides views, you may want to include tests that use "
"the test client to exercise those views. However, an end user is free to "
"deploy the views in your application at any URL of their choosing. This "
"means that your tests can't rely upon the fact that your views will be "
"available at a particular URL."
msgstr ""

# 3250eb0284a547e4bec437543f00952c
#: ../../topics/testing.txt:1341
msgid ""
"In order to provide a reliable URL space for your test, ``django.test."
"TestCase`` provides the ability to customize the URLconf configuration for "
"the duration of the execution of a test suite. If your ``TestCase`` instance "
"defines an ``urls`` attribute, the ``TestCase`` will use the value of that "
"attribute as the :setting:`ROOT_URLCONF` for the duration of that test."
msgstr ""

# ac91f479bd63483da7bfca807e5de3f4
#: ../../topics/testing.txt:1359
msgid ""
"This test case will use the contents of ``myapp.test_urls`` as the URLconf "
"for the duration of the test case."
msgstr ""

# 6633fce13e5748a9b5c1ba7c406b2875
#: ../../topics/testing.txt:1365
msgid "Multi-database support"
msgstr ""

# c6a246bbf4b04a518afdde81557ca1ec
#: ../../topics/testing.txt:1371
msgid ""
"Django sets up a test database corresponding to every database that is "
"defined in the :setting:`DATABASES` definition in your settings file. "
"However, a big part of the time taken to run a Django TestCase is consumed "
"by the call to ``flush`` that ensures that you have a clean database at the "
"start of each test run. If you have multiple databases, multiple flushes are "
"required (one for each database), which can be a time consuming activity -- "
"especially if your tests don't need to test multi-database activity."
msgstr ""

# a403b495d4f6431e9098826c6da52070
#: ../../topics/testing.txt:1380
msgid ""
"As an optimization, Django only flushes the ``default`` database at the "
"start of each test run. If your setup contains multiple databases, and you "
"have a test that requires every database to be clean, you can use the "
"``multi_db`` attribute on the test suite to request a full flush."
msgstr ""

# 8de6b8e35fd54ed298712def9ec228d1
#: ../../topics/testing.txt:1394
msgid ""
"This test case will flush *all* the test databases before running "
"``testIndexPageView``."
msgstr ""

# 23221b368afd431280afbe5d8e6942cc
#: ../../topics/testing.txt:1400
msgid "Overriding settings"
msgstr ""

# acd373ab7ae9417f9e34eeb7e0ae1fde
#: ../../topics/testing.txt:1406
msgid ""
"For testing purposes it's often useful to change a setting temporarily and "
"revert to the original value after running the testing code. For this use "
"case Django provides a standard Python context manager (see :pep:`343`) :"
"meth:`~django.test.TestCase.settings`, which can be used like this::"
msgstr ""

# f8998cbeb7004ce599566799bc837349
#: ../../topics/testing.txt:1426
msgid ""
"This example will override the :setting:`LOGIN_URL` setting for the code in "
"the ``with`` block and reset its value to the previous state afterwards."
msgstr ""

# bf307d589a654faeb824413c744ca1d2
#: ../../topics/testing.txt:1433
msgid ""
"In case you want to override a setting for just one test method or even the "
"whole :class:`TestCase` class, Django provides the :func:`~django.test.utils."
"override_settings` decorator (see :pep:`318`). It's used like this::"
msgstr ""

# 9f1591daf7054fa381a8f898cd751aba
#: ../../topics/testing.txt:1448
msgid "The decorator can also be applied to test case classes::"
msgstr ""

# eb0c65600107470ca39455946c713e11
#: ../../topics/testing.txt:1463
msgid ""
"When given a class, the decorator modifies the class directly and returns "
"it; it doesn't create and return a modified copy of it.  So if you try to "
"tweak the above example to assign the return value to a different name than "
"``LoginTestCase``, you may be surprised to find that the original "
"``LoginTestCase`` is still equally affected by the decorator."
msgstr ""

# 490555920686426b92e5e9c3341469e9
#: ../../topics/testing.txt:1470
msgid ""
"On Python 2.6 and higher you can also use the well known decorator syntax to "
"decorate the class::"
msgstr ""

# fd612a81031e49cf8c6c9c29386468f2
#: ../../topics/testing.txt:1485
msgid ""
"When overriding settings, make sure to handle the cases in which your app's "
"code uses a cache or similar feature that retains state even if the setting "
"is changed. Django provides the :data:`django.test.signals.setting_changed` "
"signal that lets you register callbacks to clean up and otherwise reset "
"state when settings are changed. Note that this signal isn't currently used "
"by Django itself, so changing built-in settings may not yield the results "
"you expect."
msgstr ""

# 4836f709eb754485bac9bb66d87b8ef5
#: ../../topics/testing.txt:1494
msgid "Emptying the test outbox"
msgstr ""

# 29eaff0a2c1c4790a1c76ccdc5d5ff59
#: ../../topics/testing.txt:1496
msgid ""
"If you use Django's custom ``TestCase`` class, the test runner will clear "
"the contents of the test email outbox at the start of each test case."
msgstr ""

# 2db7a67b537f498887816128c86a56c2
#: ../../topics/testing.txt:1499
msgid "For more detail on email services during tests, see `Email services`_."
msgstr ""

# ef14fb0f0a4a4dcdb502b26d356d9e12
#: ../../topics/testing.txt:1504
msgid "Assertions"
msgstr ""

# 8c5c207c86cb4e2e8ee7d31f269a350a
#: ../../topics/testing.txt:1511
msgid ""
"As Python's normal :class:`unittest.TestCase` class implements assertion "
"methods such as :meth:`~unittest.TestCase.assertTrue` and :meth:`~unittest."
"TestCase.assertEqual`, Django's custom :class:`TestCase` class provides a "
"number of custom assertion methods that are useful for testing Web "
"applications:"
msgstr ""

# dc88ae402792470985e7145229680d1f
#: ../../topics/testing.txt:1517
msgid ""
"The failure messages given by most of these assertion methods can be "
"customized with the ``msg_prefix`` argument. This string will be prefixed to "
"any failure message generated by the assertion. This allows you to provide "
"additional details that may help you to identify the location and cause of "
"an failure in your test suite."
msgstr ""

# c7fc07d8056b4f42a495d594f8ea451d
#: ../../topics/testing.txt:1527
msgid ""
"Asserts that execution of callable ``callable_obj`` raised the "
"``expected_exception`` exception and that such exception has an "
"``expected_message`` representation. Any other outcome is reported as a "
"failure. Similar to unittest's :meth:`~unittest.TestCase.assertRaisesRegexp` "
"with the difference that ``expected_message`` isn't a regular expression."
msgstr ""

# 34c1d30769914106a7dec14b62f3f311
#: ../../topics/testing.txt:1537
msgid "Asserts that a form field behaves correctly with various inputs."
msgstr ""

# 32068120e94a476cbabda535de86285b
#: ../../topics/testing.txt:1548
msgid ""
"For example, the following code tests that an ``EmailField`` accepts \"a@a."
"com\" as a valid email address, but rejects \"aaa\" with a reasonable error "
"message::"
msgstr ""

# 247bfe9f1e2d4e549046dbdf3dcf1449
#: ../../topics/testing.txt:1557
msgid ""
"Asserts that a ``Response`` instance produced the given ``status_code`` and "
"that ``text`` appears in the content of the response. If ``count`` is "
"provided, ``text`` must occur exactly ``count`` times in the response."
msgstr ""

# a199b3f0165c4848a1ca7c2b076fefb6
# e5e364fa9c77450f9e149b0d5fb15784
#: ../../topics/testing.txt:1563 ../../topics/testing.txt:1576
msgid ""
"Set ``html`` to ``True`` to handle ``text`` as HTML. The comparison with the "
"response content will be based on HTML semantics instead of character-by-"
"character equality. Whitespace is ignored in most cases, attribute ordering "
"is not significant. See :meth:`~SimpleTestCase.assertHTMLEqual` for more "
"details."
msgstr ""

# dc77c4a683e74637a609f570e361cd3f
#: ../../topics/testing.txt:1571
msgid ""
"Asserts that a ``Response`` instance produced the given ``status_code`` and "
"that ``text`` does not appears in the content of the response."
msgstr ""

# b9d40811a80a492f8819147cfebfbafa
#: ../../topics/testing.txt:1584
msgid ""
"Asserts that a field on a form raises the provided list of errors when "
"rendered on the form."
msgstr ""

# 709782bd0f1043b3afbfdda6deaca306
#: ../../topics/testing.txt:1587
msgid ""
"``form`` is the name the ``Form`` instance was given in the template context."
msgstr ""

# 2b5896e7bb6b450dafa58326336c99a2
#: ../../topics/testing.txt:1590
msgid ""
"``field`` is the name of the field on the form to check. If ``field`` has a "
"value of ``None``, non-field errors (errors you can access via ``form."
"non_field_errors()``) will be checked."
msgstr ""

# 6e0ff0bd917e40e897268a03c0bfbe3d
#: ../../topics/testing.txt:1594
msgid ""
"``errors`` is an error string, or a list of error strings, that are expected "
"as a result of form validation."
msgstr ""

# d1cbf3f5840c4aa08c95d30e2aaa7416
#: ../../topics/testing.txt:1599
msgid ""
"Asserts that the template with the given name was used in rendering the "
"response."
msgstr ""

# ccf8e72ebfa8488c8957f086c152df39
#: ../../topics/testing.txt:1602
msgid "The name is a string such as ``'admin/index.html'``."
msgstr ""

# 74c1d3318bc04420ac85f0a4b8050799
#: ../../topics/testing.txt:1606
msgid "You can use this as a context manager, like this::"
msgstr ""

# 6150734a2a3b46b6926c048d18687f4b
#: ../../topics/testing.txt:1619
msgid ""
"Asserts that the template with the given name was *not* used in rendering "
"the response."
msgstr ""

# 93b158f87d454047904ed057f81c80a2
#: ../../topics/testing.txt:1624
msgid ""
"You can use this as a context manager in the same way as :meth:`~TestCase."
"assertTemplateUsed`."
msgstr ""

# f0f583b9c71644dcbd2521145086c05d
#: ../../topics/testing.txt:1629
msgid ""
"Asserts that the response return a ``status_code`` redirect status, it "
"redirected to ``expected_url`` (including any GET data), and the final page "
"was received with ``target_status_code``."
msgstr ""

# 65f1ba3355bb433b8ec0812a676f3275
#: ../../topics/testing.txt:1633
msgid ""
"If your request used the ``follow`` argument, the ``expected_url`` and "
"``target_status_code`` will be the url and status code for the final point "
"of the redirect chain."
msgstr ""

# 6eac3708495b49868f7249d486e8763e
#: ../../topics/testing.txt:1641
msgid ""
"Asserts that a queryset ``qs`` returns a particular list of values "
"``values``."
msgstr ""

# f7019ebfac6544d192e04d06a2882c77
#: ../../topics/testing.txt:1643
msgid ""
"The comparison of the contents of ``qs`` and ``values`` is performed using "
"the function ``transform``; by default, this means that the ``repr()`` of "
"each value is compared. Any other callable can be used if ``repr()`` doesn't "
"provide a unique or helpful comparison."
msgstr ""

# 1a81cb25b542443c8c71fefab086e2ac
#: ../../topics/testing.txt:1648
msgid ""
"By default, the comparison is also ordering dependent. If ``qs`` doesn't "
"provide an implicit ordering, you can set the ``ordered`` parameter to "
"``False``, which turns the comparison into a Python set comparison."
msgstr ""

# 4829a574b647469a8e98cc9a529a6808
#: ../../topics/testing.txt:1663
msgid ""
"Asserts that when ``func`` is called with ``*args`` and ``**kwargs`` that "
"``num`` database queries are executed."
msgstr ""

# f0ffecedc04e43389cf3b415cf5b7b7d
#: ../../topics/testing.txt:1666
msgid ""
"If a ``\"using\"`` key is present in ``kwargs`` it is used as the database "
"alias for which to check the number of queries.  If you wish to call a "
"function with a ``using`` parameter you can do it by wrapping the call with "
"a ``lambda`` to add an extra parameter::"
msgstr ""

# a0a7a49759904602986e416ebbfcbbaf
#: ../../topics/testing.txt:1673
msgid ""
"If you're using Python 2.5 or greater you can also use this as a context "
"manager::"
msgstr ""

# c54585038c404d65a31637c473acbda0
#: ../../topics/testing.txt:1688
msgid ""
"Asserts that the strings ``html1`` and ``html2`` are equal. The comparison "
"is based on HTML semantics. The comparison takes following things into "
"account:"
msgstr ""

# 033ca8a766a94aaaa9900d19a5a8b12d
#: ../../topics/testing.txt:1692
msgid "Whitespace before and after HTML tags is ignored."
msgstr ""

# bcf1eb8c0d074843820081f41dcd5dea
#: ../../topics/testing.txt:1693
msgid "All types of whitespace are considered equivalent."
msgstr ""

# 04a053529d5a489aae03651bce9949c0
#: ../../topics/testing.txt:1694
msgid ""
"All open tags are closed implicitly, e.g. when a surrounding tag is closed "
"or the HTML document ends."
msgstr ""

# 79e236875031428485dcd2f578ce0a9f
#: ../../topics/testing.txt:1696
msgid "Empty tags are equivalent to their self-closing version."
msgstr ""

# 5ab28f5940134c63bda1a87476470ca6
#: ../../topics/testing.txt:1697
msgid "The ordering of attributes of an HTML element is not significant."
msgstr ""

# a0851297fd6b465f91ebad79b9fe2f3b
#: ../../topics/testing.txt:1698
msgid ""
"Attributes without an argument are equal to attributes that equal in name "
"and value (see the examples)."
msgstr ""

# 510f54e169ff4eafb4bd12f9eeb36c0c
#: ../../topics/testing.txt:1701
msgid ""
"The following examples are valid tests and don't raise any "
"``AssertionError``::"
msgstr ""

# 1d28b7922ff84ffd8bb766fbed1a746e
# 9595f37c9e9743afbc0f42c3deee45fd
#: ../../topics/testing.txt:1712 ../../topics/testing.txt:1723
msgid ""
"``html1`` and ``html2`` must be valid HTML. An ``AssertionError`` will be "
"raised if one of them cannot be parsed."
msgstr ""

# 0738e8368ecc407598acc1dec5785b9b
#: ../../topics/testing.txt:1719
msgid ""
"Asserts that the strings ``html1`` and ``html2`` are *not* equal. The "
"comparison is based on HTML semantics. See :meth:`~SimpleTestCase."
"assertHTMLEqual` for details."
msgstr ""

# d9e3c77f5e374d2a9f170831eb3232e7
#: ../../topics/testing.txt:1729
msgid "Email services"
msgstr ""

# a49d4f2dab104e5d98ccc5cda23a7c54
#: ../../topics/testing.txt:1731
msgid ""
"If any of your Django views send email using :doc:`Django's email "
"functionality </topics/email>`, you probably don't want to send email each "
"time you run a test using that view. For this reason, Django's test runner "
"automatically redirects all Django-sent email to a dummy outbox. This lets "
"you test every aspect of sending email -- from the number of messages sent "
"to the contents of each message -- without actually sending the messages."
msgstr ""

# 305ba099e0cd44ac87232baeb40033e3
#: ../../topics/testing.txt:1738
msgid ""
"The test runner accomplishes this by transparently replacing the normal "
"email backend with a testing backend. (Don't worry -- this has no effect on "
"any other email senders outside of Django, such as your machine's mail "
"server, if you're running one.)"
msgstr ""

# cec2c61c35b64cbfabfeac79fe8ce403
#: ../../topics/testing.txt:1747
msgid ""
"During test running, each outgoing email is saved in ``django.core.mail."
"outbox``. This is a simple list of all :class:`~django.core.mail."
"EmailMessage` instances that have been sent. The ``outbox`` attribute is a "
"special attribute that is created *only* when the ``locmem`` email backend "
"is used. It doesn't normally exist as part of the :mod:`django.core.mail` "
"module and you can't import it directly. The code below shows how to access "
"this attribute correctly."
msgstr ""

# 2b77919d788c4a0494fb06c6d2c62b06
#: ../../topics/testing.txt:1755
msgid ""
"Here's an example test that examines ``django.core.mail.outbox`` for length "
"and contents::"
msgstr ""

# d9a88029f1d94f419479580a947ca9ff
#: ../../topics/testing.txt:1774
msgid ""
"As noted :ref:`previously <emptying-test-outbox>`, the test outbox is "
"emptied at the start of every test in a Django ``TestCase``. To empty the "
"outbox manually, assign the empty list to ``mail.outbox``::"
msgstr ""

# 36d685494492434ab29e5f92b1a405f6
#: ../../topics/testing.txt:1786
msgid "Skipping tests"
msgstr ""

# 1663fb06d3c247e8a146b16856ce5597
#: ../../topics/testing.txt:1792
msgid ""
"The unittest library provides the :func:`@skipIf <unittest.skipIf>` and :"
"func:`@skipUnless <unittest.skipUnless>` decorators to allow you to skip "
"tests if you know ahead of time that those tests are going to fail under "
"certain conditions."
msgstr ""

# af5887f2d68c43b8a54c6140bebb7e93
#: ../../topics/testing.txt:1797
msgid ""
"For example, if your test requires a particular optional library in order to "
"succeed, you could decorate the test case with :func:`@skipIf <unittest."
"skipIf>`. Then, the test runner will report that the test wasn't executed "
"and why, instead of failing the test or omitting the test altogether."
msgstr ""

# 4514d68dd9064d37902f339e8791ef62
#: ../../topics/testing.txt:1802
msgid ""
"To supplement these test skipping behaviors, Django provides two additional "
"skip decorators. Instead of testing a generic boolean, these decorators "
"check the capabilities of the database, and skip the test if the database "
"doesn't support a specific named feature."
msgstr ""

# 042f9695c9a04f8285810f1d2be05ee3
#: ../../topics/testing.txt:1807
msgid ""
"The decorators use a string identifier to describe database features. This "
"string corresponds to attributes of the database connection features class. "
"See :class:`~django.db.backends.BaseDatabaseFeatures` class for a full list "
"of database features that can be used as a basis for skipping tests."
msgstr ""

# 3837726510c34822aeda16466e0a57df
#: ../../topics/testing.txt:1815
msgid "Skip the decorated test if the named database feature is supported."
msgstr ""

# 0c360fb291ff4cea85179f855d177c79
#: ../../topics/testing.txt:1817
msgid ""
"For example, the following test will not be executed if the database "
"supports transactions (e.g., it would *not* run under PostgreSQL, but it "
"would under MySQL with MyISAM tables)::"
msgstr ""

# c672eb8441cb4dcdba3671c42c0c2e13
#: ../../topics/testing.txt:1828
msgid ""
"Skip the decorated test if the named database feature is *not* supported."
msgstr ""

# 1739db15661d4a2db4cfbe0d351f630f
#: ../../topics/testing.txt:1831
msgid ""
"For example, the following test will only be executed if the database "
"supports transactions (e.g., it would run under PostgreSQL, but *not* under "
"MySQL with MyISAM tables)::"
msgstr ""

# d855dd55e8024656ad0ade8965847f5f
#: ../../topics/testing.txt:1841
msgid "Live test server"
msgstr ""

# 34d29c0d75e24aa88b87d94d29529614
#: ../../topics/testing.txt:1849
msgid ""
"``LiveServerTestCase`` does basically the same as :class:`~django.test."
"TransactionTestCase` with one extra feature: it launches a live Django "
"server in the background on setup, and shuts it down on teardown. This "
"allows the use of automated test clients other than the :ref:`Django dummy "
"client <test-client>` such as, for example, the Selenium_ client, to execute "
"a series of functional tests inside a browser and simulate a real user's "
"actions."
msgstr ""

# 8ab7b4ca02f44a21adb5c7880a07983a
#: ../../topics/testing.txt:1857
msgid ""
"By default the live server's address is `'localhost:8081'` and the full URL "
"can be accessed during the tests with ``self.live_server_url``. If you'd "
"like to change the default address (in the case, for example, where the 8081 "
"port is already taken) then you may pass a different one to the :djadmin:"
"`test` command via the :djadminopt:`--liveserver` option, for example:"
msgstr ""

# 77d3bbcf504d4f84ae53c84836497ed2
#: ../../topics/testing.txt:1867
msgid ""
"Another way of changing the default server address is by setting the "
"`DJANGO_LIVE_TEST_SERVER_ADDRESS` environment variable somewhere in your "
"code (for example, in a :ref:`custom test runner<topics-testing-"
"test_runner>`):"
msgstr ""

# 61f55e8d8ac1471099ddbc2ef03c9e62
#: ../../topics/testing.txt:1876
msgid ""
"In the case where the tests are run by multiple processes in parallel (for "
"example, in the context of several simultaneous `continuous integration`_ "
"builds), the processes will compete for the same address, and therefore your "
"tests might randomly fail with an \"Address already in use\" error. To avoid "
"this problem, you can pass a comma-separated list of ports or ranges of "
"ports (at least as many as the number of potential parallel processes). For "
"example:"
msgstr ""

# e134394ecf69498ba13e8ff58f47cdcc
#: ../../topics/testing.txt:1887
msgid ""
"Then, during test execution, each new live test server will try every "
"specified port until it finds one that is free and takes it."
msgstr ""

# 4f5912ba84c94ba6965a87f1edb20d88
#: ../../topics/testing.txt:1892
msgid ""
"To demonstrate how to use ``LiveServerTestCase``, let's write a simple "
"Selenium test. First of all, you need to install the `selenium package`_ "
"into your Python path:"
msgstr ""

# 4e5ff69d3144403c931e8dab2401b981
#: ../../topics/testing.txt:1900
msgid ""
"Then, add a ``LiveServerTestCase``-based test to your app's tests module "
"(for example: ``myapp/tests.py``). The code for this test may look as "
"follows:"
msgstr ""

# 7e1b206b22ba4c34b9d520a6046d1b55
#: ../../topics/testing.txt:1929
msgid "Finally, you may run the test as follows:"
msgstr ""

# 3201c7925e2d4ff696b86f632d97f60b
#: ../../topics/testing.txt:1935
msgid ""
"This example will automatically open Firefox then go to the login page, "
"enter the credentials and press the \"Log in\" button. Selenium offers other "
"drivers in case you do not have Firefox installed or wish to use another "
"browser. The example above is just a tiny fraction of what the Selenium "
"client can do; check out the `full reference`_ for more details."
msgstr ""

# 841698ef8d2944b383c81ec5f21389c0
#: ../../topics/testing.txt:1948
msgid ""
"``LiveServerTestCase`` makes use of the :doc:`staticfiles contrib app </"
"howto/static-files>` so you'll need to have your project configured "
"accordingly (in particular by setting :setting:`STATIC_URL`)."
msgstr ""

# 0ca2c0bca2e44ea8abb6e5243b51dbfe
#: ../../topics/testing.txt:1954
msgid ""
"When using an in-memory SQLite database to run the tests, the same database "
"connection will be shared by two threads in parallel: the thread in which "
"the live server is run and the thread in which the test case is run. It's "
"important to prevent simultaneous database queries via this shared "
"connection by the two threads, as that may sometimes randomly cause the "
"tests to fail. So you need to ensure that the two threads don't access the "
"database at the same time. In particular, this means that in some cases (for "
"example, just after clicking a link or submitting a form), you might need to "
"check that a response is received by Selenium and that the next page is "
"loaded before proceeding with further test execution. Do this, for example, "
"by making Selenium wait until the `<body>` HTML tag is found in the response "
"(requires Selenium > 2.13):"
msgstr ""

# 3998d441c596498fb4b0763eda1ffdd2
#: ../../topics/testing.txt:1977
msgid ""
"The tricky thing here is that there's really no such thing as a \"page load,"
"\" especially in modern Web apps that generate HTML dynamically after the "
"server generates the initial document. So, simply checking for the presence "
"of `<body>` in the response might not necessarily be appropriate for all use "
"cases. Please refer to the `Selenium FAQ`_ and `Selenium documentation`_ for "
"more information."
msgstr ""

# 68bc6f76804d4c76ab6ba218609214d6
#: ../../topics/testing.txt:1988
msgid "Using different testing frameworks"
msgstr ""

# d76e017050ba4fa4a54164d89e1d3998
#: ../../topics/testing.txt:1990
msgid ""
"Clearly, :mod:`doctest` and :mod:`unittest` are not the only Python testing "
"frameworks. While Django doesn't provide explicit support for alternative "
"frameworks, it does provide a way to invoke tests constructed for an "
"alternative framework as if they were normal Django tests."
msgstr ""

# 9de706ed6a5944588998eec9f9f18d03
#: ../../topics/testing.txt:1995
msgid ""
"When you run ``./manage.py test``, Django looks at the :setting:"
"`TEST_RUNNER` setting to determine what to do. By default, :setting:"
"`TEST_RUNNER` points to ``'django.test.simple.DjangoTestSuiteRunner'``. This "
"class defines the default Django testing behavior. This behavior involves:"
msgstr ""

# 3a325f0a1d894008b568823b1b55f1af
#: ../../topics/testing.txt:2000
msgid "Performing global pre-test setup."
msgstr ""

# 35c88c280d5a4478b032b5119fe65630
#: ../../topics/testing.txt:2002
msgid ""
"Looking for unit tests and doctests in the ``models.py`` and ``tests.py`` "
"files in each installed application."
msgstr ""

# e7246f3cf2624d7f9805c263f2166532
#: ../../topics/testing.txt:2005
msgid "Creating the test databases."
msgstr ""

# d4a11646606c477ea89c30ea28503c24
#: ../../topics/testing.txt:2007
msgid ""
"Running ``syncdb`` to install models and initial data into the test "
"databases."
msgstr ""

# 80df5c49058340898a2371b90f1a176b
#: ../../topics/testing.txt:2010
msgid "Running the unit tests and doctests that are found."
msgstr ""

# 62afc04418e04a6489350b941c38ab7e
#: ../../topics/testing.txt:2012
msgid "Destroying the test databases."
msgstr ""

# ac4fb68e62ac4290afc65565998c63ed
#: ../../topics/testing.txt:2014
msgid "Performing global post-test teardown."
msgstr ""

# 4814278ec34f49368ad54910a2593580
#: ../../topics/testing.txt:2016
msgid ""
"If you define your own test runner class and point :setting:`TEST_RUNNER` at "
"that class, Django will execute your test runner whenever you run ``./manage."
"py test``. In this way, it is possible to use any test framework that can be "
"executed from Python code, or to modify the Django test execution process to "
"satisfy whatever testing requirements you may have."
msgstr ""

# 1f4dcdd2014a42989f3b7d44271ad05b
#: ../../topics/testing.txt:2025
msgid "Defining a test runner"
msgstr ""

# 96cd9ad4d2d547e789facd6f1d2029cb
#: ../../topics/testing.txt:2032
msgid ""
"A test runner is a class defining a ``run_tests()`` method. Django ships "
"with a ``DjangoTestSuiteRunner`` class that defines the default Django "
"testing behavior. This class defines the ``run_tests()`` entry point, plus a "
"selection of other methods that are used to by ``run_tests()`` to set up, "
"execute and tear down the test suite."
msgstr ""

# 3982c5c084b8406281c662bfded006a8
#: ../../topics/testing.txt:2040
msgid ""
"``verbosity`` determines the amount of notification and debug information "
"that will be printed to the console; ``0`` is no output, ``1`` is normal "
"output, and ``2`` is verbose output."
msgstr ""

# 28556a59f4a44d988a3405f8c46c3f14
#: ../../topics/testing.txt:2044
msgid ""
"If ``interactive`` is ``True``, the test suite has permission to ask the "
"user for instructions when the test suite is executed. An example of this "
"behavior would be asking for permission to delete an existing test database. "
"If ``interactive`` is ``False``, the test suite must be able to run without "
"any manual intervention."
msgstr ""

# a7cc3a085699441b935d6938c5ec23d3
#: ../../topics/testing.txt:2050
msgid ""
"If ``failfast`` is ``True``, the test suite will stop running after the "
"first test failure is detected."
msgstr ""

# a390bccea61a4c6aa90bbcfbf57f82df
#: ../../topics/testing.txt:2053
msgid ""
"Django will, from time to time, extend the capabilities of the test runner "
"by adding new arguments. The ``**kwargs`` declaration allows for this "
"expansion. If you subclass ``DjangoTestSuiteRunner`` or write your own test "
"runner, ensure accept and handle the ``**kwargs`` parameter."
msgstr ""

# f72276ff49174ad9b4e65f4880fd15a5
#: ../../topics/testing.txt:2061
msgid ""
"Your test runner may also define additional command-line options. If you add "
"an ``option_list`` attribute to a subclassed test runner, those options will "
"be added to the list of command-line options that the :djadmin:`test` "
"command can use."
msgstr ""

# d3121f69c8694405afe4662e9ce9228b
#: ../../topics/testing.txt:2073
msgid ""
"This is the tuple of ``optparse`` options which will be fed into the "
"management command's ``OptionParser`` for parsing arguments. See the "
"documentation for Python's ``optparse`` module for more details."
msgstr ""

# f16a3e300bcf4ef19bb32e0303d6513c
#: ../../topics/testing.txt:2082
msgid "Run the test suite."
msgstr ""

# 00821ced5be74d71adb496c9152cbb1d
# 8e87bfeb36e2491ea9c65f9b74c1a932
#: ../../topics/testing.txt:2084 ../../topics/testing.txt:2109
msgid ""
"``test_labels`` is a list of strings describing the tests to be run. A test "
"label can take one of three forms:"
msgstr ""

# d2d641f09ca84f27a18632dfc5d53082
# a291890be1f04948804c75965382333f
#: ../../topics/testing.txt:2087 ../../topics/testing.txt:2112
msgid ""
"``app.TestCase.test_method`` -- Run a single test method in a test case."
msgstr ""

# 503d83bdc7f5415f877a00e8580bf68e
# 5d8bf4f9ee454b86b163e457ec345444
#: ../../topics/testing.txt:2089 ../../topics/testing.txt:2114
msgid "``app.TestCase`` -- Run all the test methods in a test case."
msgstr ""

# 0d14bdf978894dfa8ad32fe222b7fc4a
# 127a21eca3eb4b648e161f1f08932991
#: ../../topics/testing.txt:2090 ../../topics/testing.txt:2115
msgid "``app`` -- Search for and run all tests in the named application."
msgstr ""

# 66c82759bce7480eaa9514692999d458
# fb6906c337f442d68c048551839a0b2a
#: ../../topics/testing.txt:2092 ../../topics/testing.txt:2117
msgid ""
"If ``test_labels`` has a value of ``None``, the test runner should run "
"search for tests in all the applications in :setting:`INSTALLED_APPS`."
msgstr ""

# d36013eac6ff40deb885a6d84f50891c
# 5be454481e8149f0ab8783614555a1e1
#: ../../topics/testing.txt:2095 ../../topics/testing.txt:2120
msgid ""
"``extra_tests`` is a list of extra ``TestCase`` instances to add to the "
"suite that is executed by the test runner. These extra tests are run in "
"addition to those discovered in the modules listed in ``test_labels``."
msgstr ""

# c45d0c43d55f4821b262f104fcfc044e
#: ../../topics/testing.txt:2099
msgid "This method should return the number of tests that failed."
msgstr ""

# 5b4469c64ce44813910130bdff50025f
#: ../../topics/testing.txt:2103
msgid "Sets up the test environment ready for testing."
msgstr ""

# 0ef75bc58f3a45c997d8c52f88ed9c24
#: ../../topics/testing.txt:2107
msgid "Constructs a test suite that matches the test labels provided."
msgstr ""

# 716dddb21f274ab6b0538867c0160496
#: ../../topics/testing.txt:2124
msgid "Returns a ``TestSuite`` instance ready to be run."
msgstr ""

# a0d92489752b40dab4c40e9624f7ae9a
#: ../../topics/testing.txt:2128
msgid "Creates the test databases."
msgstr ""

# 798168282fbf478fa3a2522b626e5d96
#: ../../topics/testing.txt:2130
msgid ""
"Returns a data structure that provides enough detail to undo the changes "
"that have been made. This data will be provided to the ``teardown_databases()"
"`` function at the conclusion of testing."
msgstr ""

# 367c0d798ff24a4b8bb2c2fcac2a8c2a
#: ../../topics/testing.txt:2136
msgid "Runs the test suite."
msgstr ""

# ee0cfbc3b16c4a48b38ef7f20b7ba6af
#: ../../topics/testing.txt:2138
msgid "Returns the result produced by the running the test suite."
msgstr ""

# e97475d051aa45c09be9ed0218bf8e6c
#: ../../topics/testing.txt:2142
msgid "Destroys the test databases, restoring pre-test conditions."
msgstr ""

# f0b6143467534f8dbba6d9d55f72530d
#: ../../topics/testing.txt:2144
msgid ""
"``old_config`` is a data structure defining the changes in the database "
"configuration that need to be reversed. It is the return value of the "
"``setup_databases()`` method."
msgstr ""

# a40f6f736b5845b3bfc7ad6bedf62977
#: ../../topics/testing.txt:2150
msgid "Restores the pre-test environment."
msgstr ""

# d11502edc06045a79cc5df4dcdc00b9a
#: ../../topics/testing.txt:2154
msgid ""
"Computes and returns a return code based on a test suite, and the result "
"from that test suite."
msgstr ""

# 949922ed8b7b4804851b126deedb4a3e
#: ../../topics/testing.txt:2159
msgid "Testing utilities"
msgstr ""

# 7073dd0b133f45e68ce52a161eabce63
#: ../../topics/testing.txt:2164
msgid ""
"To assist in the creation of your own test runner, Django provides a number "
"of utility methods in the ``django.test.utils`` module."
msgstr ""

# 763e7023f7384856b7e4368143de03ab
#: ../../topics/testing.txt:2169
msgid ""
"Performs any global pre-test setup, such as the installing the "
"instrumentation of the template rendering system and setting up the dummy "
"``SMTPConnection``."
msgstr ""

# fa0aa40b3d874e838cd77118df8859e4
#: ../../topics/testing.txt:2175
msgid ""
"Performs any global post-test teardown, such as removing the black magic "
"hooks into the template system and restoring normal email services."
msgstr ""

# a91837125d194c2cb41f7943edffc3d2
#: ../../topics/testing.txt:2181
msgid ""
"The creation module of the database backend (``connection.creation``) also "
"provides some utilities that can be useful during testing."
msgstr ""

# 5ab57d119bff443da23a0b3bf401af90
#: ../../topics/testing.txt:2186
msgid "Creates a new test database and runs ``syncdb`` against it."
msgstr ""

# bd25aacdcccc4ce8b95cee357a511f91
#: ../../topics/testing.txt:2188
msgid "``verbosity`` has the same behavior as in ``run_tests()``."
msgstr ""

# 7c343c112f564f0abba24c327ec321c9
#: ../../topics/testing.txt:2190
msgid ""
"``autoclobber`` describes the behavior that will occur if a database with "
"the same name as the test database is discovered:"
msgstr ""

# 513f2eefc20c4fec8c9b5a4981ae60ee
#: ../../topics/testing.txt:2193
msgid ""
"If ``autoclobber`` is ``False``, the user will be asked to approve "
"destroying the existing database. ``sys.exit`` is called if the user does "
"not approve."
msgstr ""

# ed346f52c8ea4bf99ef19655d720af19
#: ../../topics/testing.txt:2197
msgid ""
"If autoclobber is ``True``, the database will be destroyed without "
"consulting the user."
msgstr ""

# f918c481d498462d89880a27ef9bfb98
#: ../../topics/testing.txt:2200
msgid "Returns the name of the test database that it created."
msgstr ""

# 1bd10f679c4d4c249a48628d0f2086d3
#: ../../topics/testing.txt:2202
msgid ""
"``create_test_db()`` has the side effect of modifying the value of :setting:"
"`NAME` in :setting:`DATABASES` to match the name of the test database."
msgstr ""

# 01dafbdea45049169d595d5e4ff92e6b
#: ../../topics/testing.txt:2208
msgid ""
"Destroys the database whose name is the value of :setting:`NAME` in :setting:"
"`DATABASES`, and sets :setting:`NAME` to the value of ``old_database_name``."
msgstr ""

# 858f5e0c9f6e4e8a9c65f891cfb935bc
#: ../../topics/testing.txt:2212
msgid ""
"The ``verbosity`` argument has the same behavior as for :class:`~django.test."
"simple.DjangoTestSuiteRunner`."
msgstr ""
