# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated <>, 2012.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-02-27 00:21\n"
"PO-Revision-Date: 2012-04-24 17:41+0300\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# aac3795525a04e17905a20798438e2d8
#: ../../intro/tutorial04.txt:3
msgid "Writing your first Django app, part 4"
msgstr "Создаем свое первое приложение с Django, часть 4"

# d10cf731b67e4e509095080266074bb7
#: ../../intro/tutorial04.txt:5
msgid ""
"This tutorial begins where :doc:`Tutorial 3 </intro/tutorial03>` left off. "
"We're continuing the Web-poll application and will focus on simple form "
"processing and cutting down our code."
msgstr ""
"Этот раздел -- продолжение :doc:`Части 3 </intro/tutorial02>` учебника. Мы "
"продолжим разрабатывать приложение для голосования и сосредоточимся на "
"обработке форм и упрощении нашего кода."

# 203de5f6aa49498d849e6cc51f741089
#: ../../intro/tutorial04.txt:10
msgid "Write a simple form"
msgstr "Создадим простую форму"

# caf52852ac54442ca31aa27c1f7e86a4
#: ../../intro/tutorial04.txt:12
msgid ""
"Let's update our poll detail template (\"polls/detail.html\") from the last "
"tutorial, so that the template contains an HTML ``<form>`` element:"
msgstr ""
"Отредактируем шаблон страницы опроса (\"polls/detail.html\") из предыдущего "
"раздела учебника, и добавим HTML элемент ``<form>``:"

# 3faf394bfda149d19ca4b5f2cd9b01fa
#: ../../intro/tutorial04.txt:30
msgid "A quick rundown:"
msgstr "Краткий обзор:"

# 09fe4aff0c904c9498a8914ac209f7d7
#: ../../intro/tutorial04.txt:32
#, fuzzy
msgid ""
"The above template displays a radio button for each poll choice. The "
"``value`` of each radio button is the associated poll choice's ID. The "
"``name`` of each radio button is ``\"choice\"``. That means, when somebody "
"selects one of the radio buttons and submits the form, it'll send the POST "
"data ``choice=3``. This is the basic concept of HTML forms."
msgstr ""
"Данный шаблон отображает radio-поле для каждого варианта ответа опроса. "
"``value`` поля содержит ID варианта опроса. ``name`` каждого поля равно ``"
"\"choice\"``. Это означает, что при выборе поля и отправке формы, будет "
"отправлены POST данные ``choice=3``."

# 878e916b45d0417c99377d6c594b9216
#: ../../intro/tutorial04.txt:38
#, fuzzy
msgid ""
"We set the form's ``action`` to ``{% url 'polls:vote' poll.id %}``, and we "
"set ``method=\"post\"``. Using ``method=\"post\"`` (as opposed to ``method="
"\"get\"``) is very important, because the act of submitting this form will "
"alter data server-side. Whenever you create a form that alters data server-"
"side, use ``method=\"post\"``. This tip isn't specific to Django; it's just "
"good Web development practice."
msgstr ""
"Значение ``action`` формы равно ``/polls/{{ poll.id }}/vote/``, еще "
"добавлено ``method=\"post\"``. Использование ``method=\"post\"`` (вместо "
"``method=\"get\"``) очень важно, так как оправка формы изменяет данные. Для "
"форм изменяющих данные используйте ``method=\"post\"``. Этот совет не "
"относится к Django, это хорошая практика для Web-приложений."

# 498dce7373824fcab37ee747af7fa2c7
#: ../../intro/tutorial04.txt:45
msgid ""
"``forloop.counter`` indicates how many times the :ttag:`for` tag has gone "
"through its loop"
msgstr "``forloop.counter`` содержит номер итерации цикла тега :ttag:`for`"

# abcc48c746b4490eb09a003eaf66856c
#: ../../intro/tutorial04.txt:48
msgid ""
"Since we're creating a POST form (which can have the effect of modifying "
"data), we need to worry about Cross Site Request Forgeries. Thankfully, you "
"don't have to worry too hard, because Django comes with a very easy-to-use "
"system for protecting against it. In short, all POST forms that are targeted "
"at internal URLs should use the :ttag:`{% csrf_token %}<csrf_token>` "
"template tag."
msgstr ""
"Так как мы создаем POST форму (которая может привести к изменениям данных), "
"нам следует побеспокоится о Cross Site Request Forgeries. Благодаря Django "
"это очень просто. В общем, все POST формы, которые отправляются на "
"внутренний URL, должны использовать тег :ttag:`{% csrf_token %}<csrf_token>`."

# 3f4c94b3ab5f4988841f6396d16fa524
#: ../../intro/tutorial04.txt:55
msgid ""
"Now, let's create a Django view that handles the submitted data and does "
"something with it. Remember, in :doc:`Tutorial 3 </intro/tutorial03>`, we "
"created a URLconf for the polls application that includes this line::"
msgstr ""
"Теперь создадим представление Django, которые принимает данные отправленные "
"формой и обрабатывает их. Вспомним, в :doc:`Части 3 </intro/tutorial03>` мы "
"создали URLconf который содержит следующую строку::"

# 363438c66cb740daaec01da9666eba04
#: ../../intro/tutorial04.txt:61
msgid ""
"We also created a dummy implementation of the ``vote()`` function. Let's "
"create a real version. Add the following to ``polls/views.py``::"
msgstr ""
"Мы так же создали функцию-\"заглушку\" ``vote()``. Давайте создадим "
"настоящую функцию представления. Добавьте следующее в ``polls/views.py``::"

# a827f3bcd0f94c00b8490ebef44e3d60
#: ../../intro/tutorial04.txt:87
msgid ""
"This code includes a few things we haven't covered yet in this tutorial:"
msgstr "Этот код содержит вещи, которые еще не объяснялись в учебнике:"

# dc74606852204f788d27b508d177b95e
#: ../../intro/tutorial04.txt:89
msgid ""
":attr:`request.POST <django.http.HttpRequest.POST>` is a dictionary-like "
"object that lets you access submitted data by key name. In this case, "
"``request.POST['choice']`` returns the ID of the selected choice, as a "
"string. :attr:`request.POST <django.http.HttpRequest.POST>` values are "
"always strings."
msgstr ""
":attr:`request.POST <django.http.HttpRequest.POST>` -- это объект с "
"интерфейсом словаря, который позволяет получить отправленные данные через "
"название ключа. В нашем случае ``request.POST['choice']`` вернет ID "
"выбранного варианта ответа в виде строки. :attr:`request.POST <django.http."
"HttpRequest.POST>` всегда содержит строки."

# a6fbf0e60c5844309e8594d835e7464d
#: ../../intro/tutorial04.txt:95
msgid ""
"Note that Django also provides :attr:`request.GET <django.http.HttpRequest."
"GET>` for accessing GET data in the same way -- but we're explicitly using :"
"attr:`request.POST <django.http.HttpRequest.POST>` in our code, to ensure "
"that data is only altered via a POST call."
msgstr ""
"Заметим что Django так же предоставляет :attr:`request.GET <django.http."
"HttpRequest.GET>` для аналогичного доступа к GET данным -- но мы используем :"
"attr:`request.POST <django.http.HttpRequest.POST>` что бы быть уверенным, "
"что данные передаются только при POST запросе."

# c9968424f2d349aabcdb7de469ceb363
#: ../../intro/tutorial04.txt:101
#, fuzzy
msgid ""
"``request.POST['choice']`` will raise :exc:`~exceptions.KeyError` if "
"``choice`` wasn't provided in POST data. The above code checks for :exc:"
"`~exceptions.KeyError` and redisplays the poll form with an error message if "
"``choice`` isn't given."
msgstr ""
"``request.POST['choice']`` вызовет исключение :exc:`KeyError`, если "
"``choice`` не находится в POST. Код обрабатывает исключение :exc:`KeyError` "
"и показывает страницу опроса с ошибкой, если не был выбран вариант ответа."

# 38c7dcc4ea184c16816db8df60b2d1b0
#: ../../intro/tutorial04.txt:106
msgid ""
"After incrementing the choice count, the code returns an :class:`~django."
"http.HttpResponseRedirect` rather than a normal :class:`~django.http."
"HttpResponse`. :class:`~django.http.HttpResponseRedirect` takes a single "
"argument: the URL to which the user will be redirected (see the following "
"point for how we construct the URL in this case)."
msgstr ""
"После увеличения счетчика ответов, представление возвращает :class:`~django."
"http.HttpResponseRedirect` вместо :class:`~django.http.HttpResponse`. :class:"
"`~django.http.HttpResponseRedirect` принимает один аргумент: URL, на который "
"необходимо перенаправить пользователя (обратите внимание как мы создаем URL)."

# cf64a778f4c442b19088927a02445679
#: ../../intro/tutorial04.txt:113
msgid ""
"As the Python comment above points out, you should always return an :class:"
"`~django.http.HttpResponseRedirect` after successfully dealing with POST "
"data. This tip isn't specific to Django; it's just good Web development "
"practice."
msgstr ""
"После успешной обработки POST запроса, вы должны возвращать :class:`~django."
"http.HttpResponseRedirect`. Это не относится конкретно к Django, это просто "
"хорошая практика при разработке Web-приложений."

# aaa758eea18440b4bbb94055be4e1c57
#: ../../intro/tutorial04.txt:118
msgid ""
"We are using the :func:`~django.core.urlresolvers.reverse` function in the :"
"class:`~django.http.HttpResponseRedirect` constructor in this example. This "
"function helps avoid having to hardcode a URL in the view function. It is "
"given the name of the view that we want to pass control to and the variable "
"portion of the URL pattern that points to that view. In this case, using the "
"URLconf we set up in Tutorial 3, this :func:`~django.core.urlresolvers."
"reverse` call will return a string like ::"
msgstr ""
"Мы используем функцию :func:`~django.core.urlresolvers.reverse` при "
"создании :class:`~django.http.HttpResponseRedirect`. Это функция помогает "
"избегать \"хардкодинга\" URL-ов в коде. Она принимает название URL-шаблона и "
"необходимые аргументы для создания URL-а. В этом примере используется "
"конфигурация URL-ов из Части 3 и :func:`~django.core.urlresolvers.reverse` "
"вернет::"

# 0ca0f322652349d6abcf1f9313246c1c
#: ../../intro/tutorial04.txt:129
#, fuzzy
msgid ""
"... where the ``3`` is the value of ``p.id``. This redirected URL will then "
"call the ``'results'`` view to display the final page."
msgstr ""
"... где ``3`` значение ``p.id``. При запросе к этому URL-у вызовется "
"представление ``'results'`` для отображения результатов опроса. Обратите "
"внимание, вы должны использовать полное название к представлению (включая "
"префикс)."

# afb83a6905f541e187d4c965e740ee14
#: ../../intro/tutorial04.txt:132
msgid ""
"As mentioned in Tutorial 3, ``request`` is a :class:`~django.http."
"HttpRequest` object. For more on :class:`~django.http.HttpRequest` objects, "
"see the :doc:`request and response documentation </ref/request-response>`."
msgstr ""
"Как упоминалось в Части 3, ``request`` является экземпляром :class:`~django."
"http.HttpRequest`. Подробности о классе :class:`~django.http.HttpRequest` "
"смотрите в разделе о :doc:`объектах запроса и ответа </ref/request-"
"response>`."

# c3c0e9df20f04353ac6aa1067a81fa78
#: ../../intro/tutorial04.txt:136
msgid ""
"After somebody votes in a poll, the ``vote()`` view redirects to the results "
"page for the poll. Let's write that view::"
msgstr ""
"После ответа на опрос, представление ``vote()`` перенаправит пользователя на "
"страницу с результатами. Давайте создадим представление для этой страницы::"

# e060e4c524144a219ecb0782d586eca7
#: ../../intro/tutorial04.txt:143
msgid ""
"This is almost exactly the same as the ``detail()`` view from :doc:`Tutorial "
"3 </intro/tutorial03>`. The only difference is the template name. We'll fix "
"this redundancy later."
msgstr ""
"Это представление аналогично представлению ``detail()`` из :doc:`Части 3 </"
"intro/tutorial03>`. Единственная разница - используемый шаблон. Повторение "
"кода мы исправим позже."

# 93570294d152458ca17d6b06ea75e08b
#: ../../intro/tutorial04.txt:147
#, fuzzy
msgid "Now, create a ``polls/results.html`` template:"
msgstr "Теперь создадим шаблон ``results.html``:"

# 5f71be59e19a43129801126fd9251513
#: ../../intro/tutorial04.txt:161
msgid ""
"Now, go to ``/polls/1/`` in your browser and vote in the poll. You should "
"see a results page that gets updated each time you vote. If you submit the "
"form without having chosen a choice, you should see the error message."
msgstr ""
"Теперь откройте страницу ``/polls/1/`` в браузере и ответьте на опрос. Вы "
"должны увидеть страницу с результатами, которые обновляются после каждого "
"ответа на опрос. Если вы отправите форму не ответив на вопрос, вы должны "
"увидеть сообщение про ошибку."

# c2ad364fa360473d87aa1e2091cbb8c7
#: ../../intro/tutorial04.txt:166
msgid "Use generic views: Less code is better"
msgstr "Общие представления: меньше кода - меньше проблем"

# ea77830ee87f4481882507ba01454658
#: ../../intro/tutorial04.txt:168
msgid ""
"The ``detail()`` (from :doc:`Tutorial 3 </intro/tutorial03>`) and ``results()"
"`` views are stupidly simple -- and, as mentioned above, redundant. The "
"``index()`` view (also from Tutorial 3), which displays a list of polls, is "
"similar."
msgstr ""
"Представления ``detail()`` (из :doc:`Части 3 </intro/tutorial03>`) и "
"``results()`` до глупости просты -- и, как упоминалось выше, избыточны. "
"Представление ``index()`` (также из Части 3), так же довольно стандартное."

# 91518ac31d29456fa1b209cf46861080
#: ../../intro/tutorial04.txt:172
msgid ""
"These views represent a common case of basic Web development: getting data "
"from the database according to a parameter passed in the URL, loading a "
"template and returning the rendered template. Because this is so common, "
"Django provides a shortcut, called the \"generic views\" system."
msgstr ""
"Эти представления выполняют стандартные операции Веб-приложений: получение "
"данных из базы данных в соответствии с параметрами из URL, загрузка шаблона "
"и возвращение результата выполнения шаблона. Так как это обычные операции "
"Django представляет систему \"общих представлений(generic views)\"."

# 1ee21f042b6f4438a4466fa65545fa48
#: ../../intro/tutorial04.txt:177
msgid ""
"Generic views abstract common patterns to the point where you don't even "
"need to write Python code to write an app."
msgstr ""
"Общие представления позволяют создавать приложения практически не написав ни "
"строчки кода Python."

# 5ce0a732500a4e0e8985d50a056720c6
#: ../../intro/tutorial04.txt:180
msgid ""
"Let's convert our poll app to use the generic views system, so we can delete "
"a bunch of our own code. We'll just have to take a few steps to make the "
"conversion. We will:"
msgstr ""
"Давайте используем их в нашем приложении. Необходимо выполнить следующие "
"действия:"

# 1d4eb4a80f924273b26080f373349584
#: ../../intro/tutorial04.txt:184
msgid "Convert the URLconf."
msgstr "Изменить URLconf."

# dbe0bc41513e4e8eb3f7a0dcb899e801
#: ../../intro/tutorial04.txt:186
msgid "Delete some of the old, unneeded views."
msgstr "Удалить старые и ненужные представления."

# 766b23ef335e474fbeb606bfd0974c57
#: ../../intro/tutorial04.txt:188
msgid "Fix up URL handling for the new views."
msgstr "Изменить URL-ы для новых представлений."

# ec8daf216aa44543a7b0b3893ea634ff
#: ../../intro/tutorial04.txt:190
msgid "Read on for details."
msgstr "Подробности читайте далее."

# be8d00b818f64c278ad04b3adb37dcbd
#: ../../intro/tutorial04.txt:194
msgid ""
"Generally, when writing a Django app, you'll evaluate whether generic views "
"are a good fit for your problem, and you'll use them from the beginning, "
"rather than refactoring your code halfway through. But this tutorial "
"intentionally has focused on writing the views \"the hard way\" until now, "
"to focus on core concepts."
msgstr ""
"Скорее всего вы будете использовать общие представления с самого начала без "
"необходимости рефакторить проект. Этот учебник специально описывает создание "
"представлений что бы описать основные концепции."

# 4dce644a4ca54873a833a53c75dc2a05
#: ../../intro/tutorial04.txt:200
msgid "You should know basic math before you start using a calculator."
msgstr "Вы должны знать основы математики для использования калькулятора."

# 8f318f74f93043c89e3ff07604b45988
#: ../../intro/tutorial04.txt:203
msgid "Amend URLconf"
msgstr ""

# 1b52698f2b064fbea2072dd17ad3d00a
#: ../../intro/tutorial04.txt:205
#, fuzzy
msgid "First, open the ``polls/urls.py`` URLconf and change it like so::"
msgstr "Первым делом откройте ``polls/urls.py``. Вы должны увидеть следующее::"

# 818f439e3f0c4fc3b23e19088db0e799
#: ../../intro/tutorial04.txt:232
msgid "Amend views"
msgstr ""

# 196ba0a78ced49a9aca8f75521f307b3
#: ../../intro/tutorial04.txt:234
msgid ""
"We're using two generic views here: :class:`~django.views.generic.list."
"ListView` and :class:`~django.views.generic.detail.DetailView`. "
"Respectively, those two views abstract the concepts of \"display a list of "
"objects\" and \"display a detail page for a particular type of object.\""
msgstr ""
"Мы используем здесь два общих представления: :class:`~django.views.generic."
"list.ListView` и :class:`~django.views.generic.detail.DetailView`. Эти два "
"типа представлений отображают две концепции: \"отображение списка объектов\" "
"и \"отображение подробностей о конкретном объекте\"."

# edf329d39eb643aab24425b3c86b7062
#: ../../intro/tutorial04.txt:240
msgid ""
"Each generic view needs to know what model it will be acting upon. This is "
"provided using the ``model`` parameter."
msgstr ""
"Каждое общее представление должно знать с какой моделью работать. Ее можно "
"указать с помощью параметра ``model``."

# d58b50396e614b5aab573f9b26780784
#: ../../intro/tutorial04.txt:243
#, fuzzy
msgid ""
"The :class:`~django.views.generic.detail.DetailView` generic view expects "
"the primary key value captured from the URL to be called ``\"pk\"``, so "
"we've changed ``poll_id`` to ``pk`` for the generic views."
msgstr ""
"Представление :class:`~django.views.generic.list.DetailView` принимает "
"значение первичного ключа из URL с названием ``\"pk\"``, по этому мы "
"изменили название параметра с ``poll_id`` на ``pk``."

# 0bc163e3dfc04196a99d7f939aef68d9
#: ../../intro/tutorial04.txt:248
#, fuzzy
msgid ""
"By default, the :class:`~django.views.generic.detail.DetailView` generic "
"view uses a template called ``<app name>/<model name>_detail.html``. In our "
"case, it'll use the template ``\"polls/poll_detail.html\"``. The "
"``template_name`` argument is used to tell Django to use a specific template "
"name instead of the autogenerated default template name. We also specify the "
"``template_name`` for the ``results`` list view -- this ensures that the "
"results view and the detail view have a different appearance when rendered, "
"even though they're both a :class:`~django.views.generic.detail.DetailView` "
"behind the scenes."
msgstr ""
"По умолчанию представление :class:`~django.views.generic.list.DetailView` "
"использует шаблон ``<app name>/<model name>_detail.html``. В нашем случае "
"будет использоваться ``\"polls/poll_detail.html\"``. Параметр "
"``template_name`` позволяет указать Django какой шаблон использовать."

# e1ad09d67b2f40299d4d017a0be6d05f
#: ../../intro/tutorial04.txt:258
msgid ""
"Similarly, the :class:`~django.views.generic.list.ListView` generic view "
"uses a default template called ``<app name>/<model name>_list.html``; we use "
"``template_name`` to tell :class:`~django.views.generic.list.ListView` to "
"use our existing ``\"polls/index.html\"`` template."
msgstr ""
"Аналогично :class:`~django.views.generic.list.ListView` использует шаблон "
"``<app name>/<model name>_list.html``, мы использовали ``template_name`` что "
"бы определить другой шаблон - ``\"polls/index.html\"``."

# eee64f5cfbf247aeb1ba84e440bd4d24
#: ../../intro/tutorial04.txt:264
#, fuzzy
msgid ""
"In previous parts of the tutorial, the templates have been provided with a "
"context that contains the ``poll`` and ``latest_poll_list`` context "
"variables. For ``DetailView`` the ``poll`` variable is provided "
"automatically -- since we're using a Django model (``Poll``), Django is able "
"to determine an appropriate name for the context variable. However, for "
"ListView, the automatically generated context variable is ``poll_list``. To "
"override this we provide the ``context_object_name`` option, specifying that "
"we want to use ``latest_poll_list`` instead. As an alternative approach, you "
"could change your templates to match the new default context variables -- "
"but it's a lot easier to just tell Django to use the variable you want."
msgstr ""
"В предыдущей части учебника в шаблоне использовался контекст с переменными "
"``poll`` и ``latest_poll_list``. Для DetailView переменная ``poll`` "
"добавляется автоматически -- так как мы используем модель ``Poll``, Django "
"автоматически генерирует подходящее название для переменной контекста. Для "
"ListView переменная будет называться ``poll_list``. Что бы переопределить "
"это название мы использовали параметр ``context_object_name`` указав "
"``latest_poll_list``. Как вариант, вы можете изменить шаблон и использовать "
"``poll_list``."

# bf602c7ba00e48d99c5aaa0b7a820f40
#: ../../intro/tutorial04.txt:276
#, fuzzy
msgid ""
"You can now delete the ``index()``, ``detail()`` and ``results()`` views "
"from ``polls/views.py``. We don't need them anymore -- they have been "
"replaced by generic views. You can also delete the import for "
"``HttpResponse``, which is no longer required."
msgstr ""
"Теперь вы можете удалить функции ``index()``, ``detail()`` и ``results()`` "
"из ``polls/views.py``. Они нам больше не нужны."

# a8fa3c528de441689f32c4431c7a4d07
#: ../../intro/tutorial04.txt:281
msgid "Run the server, and use your new polling app based on generic views."
msgstr "Запустите сервер и протестируйте наше приложение."

# 029b43ae7f1245e683b8730554c65fba
#: ../../intro/tutorial04.txt:283
#, fuzzy
msgid ""
"For full details on generic views, see the :doc:`generic views documentation "
"</topics/class-based-views/index>`."
msgstr ""
"Подробности об общих представлениях смотрите в :doc:`соответствующем разделе "
"</topics/http/generic-views>`."

# 8e90777c796243da9fa7ee333f5062c9
#: ../../intro/tutorial04.txt:286
msgid ""
"When you're comfortable with forms and generic views, read :doc:`part 5 of "
"this tutorial</intro/tutorial05>` to learn about testing our polls app."
msgstr ""

# 0821410060ab470cb783eda1377934f5
#~ msgid ""
#~ "The :ttag:`{% csrf_token %}<csrf_token>` tag requires information from "
#~ "the request object, which is not normally accessible from within the "
#~ "template context. To fix this, a small adjustment needs to be made to the "
#~ "``detail`` view, so that it looks like the following::"
#~ msgstr ""
#~ "Тег :ttag:`{% csrf_token %}<csrf_token>` требует информацию из объекта "
#~ "запроса, которая обычно не находится в контексте шаблона. Что бы это "
#~ "исправить следует внести кое какие изменения в представление ``detail``::"

# c8e5c69b54fc4524873fa602766e6e7d
#~ msgid ""
#~ "The details of how this works are explained in the documentation for :ref:"
#~ "`RequestContext <subclassing-context-requestcontext>`."
#~ msgstr ""
#~ "Подробности о том, как это работает, смотрите в описании :ref:"
#~ "`RequestContext <subclassing-context-requestcontext>`."

# a9ab58cd176a456582e241e9c0ef772c
#~ msgid "Change it like so::"
#~ msgstr "Отредактируйте этот файл::"

# d72bd374164b42958b583f697a3fb51c
#~ msgid ""
#~ "We've added a name, ``poll_results``, to the results view so that we have "
#~ "a way to refer to its URL later on (see the documentation about :ref:"
#~ "`naming URL patterns <naming-url-patterns>` for information). We're also "
#~ "using the :func:`~django.conf.urls.url` function from :mod:`django.conf."
#~ "urls` here. It's a good habit to use :func:`~django.conf.urls.url` when "
#~ "you are providing a pattern name like this."
#~ msgstr ""
#~ "Мы добавили название, ``poll_results``, для представления, которое "
#~ "отображает страницу с опросом, что бы мы могли обратиться к этому URL-у "
#~ "позже (подробности смотрите в разделе о :ref:`именованных URL-шаблонах "
#~ "<naming-url-patterns>`). Мы так же используем функцию :func:`~django.conf."
#~ "urls.url` из :mod:`django.conf.urls`. Использовать :func:`~django.conf."
#~ "urls.url` - хорошая привычка при указании названия URL-шаблона."

# 7b13b7ef31c44800afd4f93d10c8b8f6
#~ msgid ""
#~ "The last thing to do is fix the URL handling to account for the use of "
#~ "generic views. In the vote view above, we used the :func:`~django.core."
#~ "urlresolvers.reverse` function to avoid hard-coding our URLs. Now that "
#~ "we've switched to a generic view, we'll need to change the :func:`~django."
#~ "core.urlresolvers.reverse` call to point back to our new generic view. We "
#~ "can't simply use the view function anymore -- generic views can be (and "
#~ "are) used multiple times -- but we can use the name we've given::"
#~ msgstr ""
#~ "В представлении для голосования мы использовали функцию :func:`~django."
#~ "core.urlresolvers.reverse` что бы избежать \"хардкодинга\" URL-а. Теперь "
#~ "нам необходимо чтобы :func:`~django.core.urlresolvers.reverse` возвращал "
#~ "URL на наше новое представление. Мы не можем использовать функцию "
#~ "представления -- общее представление может использоваться для разных URL-"
#~ "ов -- но мы можем использовать указанное название::"

# eaf7420cb82d46ca9c69450227507621
#~ msgid "Coming soon"
#~ msgstr "Скоро будет"

# 1f61851119be4135b908169e9513d15a
#~ msgid ""
#~ "The tutorial ends here for the time being. Future installments of the "
#~ "tutorial will cover:"
#~ msgstr "В будущем учебник планируется расширить следующими разделами:"

# 7b3e4b331a4740348974c6032a82b6db
#~ msgid "Advanced form processing"
#~ msgstr "Продвинутая обработка форм"

# 8c33dee69aa94795bed7391da008eceb
#~ msgid "Using the RSS framework"
#~ msgstr "Использование RSS"

# 6c2bf12ceb6e4518bef997d8965b7560
#~ msgid "Using the cache framework"
#~ msgstr "Использование кеширования"

# cba721d2595d485f84d971ac78467df5
#~ msgid "Using the comments framework"
#~ msgstr "Использование комментариев"

# d24ee5855c454ec89fae6394b31f152c
#~ msgid "Advanced admin features: Permissions"
#~ msgstr "Использование прав в интерфейсе администратора"

# cb7fc25b704845238714cac9ceec2865
#~ msgid "Advanced admin features: Custom JavaScript"
#~ msgstr "Использование JavaScript скриптов в интерфейсе администратора"

# be558e283ab74bddacf4ccf66f8239b0
#~ msgid ""
#~ "In the meantime, you might want to check out some pointers on :doc:`where "
#~ "to go from here </intro/whatsnext>`"
#~ msgstr ""
#~ "Советуем прочитать :doc:`\"Куда двигаться далее\" </intro/whatsnext>`"
