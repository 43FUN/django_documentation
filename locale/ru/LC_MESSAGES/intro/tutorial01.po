# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2012.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-02-29 18:30\n"
"PO-Revision-Date: 2012-02-15 15:13\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# 50b384343cf54ea9a98671d4fcff0339
#: ../../intro/tutorial01.txt:3
msgid "Writing your first Django app, part 1"
msgstr ""

# 266a849f419c4f5189e5019d03bf5a5e
#: ../../intro/tutorial01.txt:5
msgid "Let's learn by example."
msgstr ""

# c83c0708364f4a468701c262d3adb439
#: ../../intro/tutorial01.txt:7
msgid ""
"Throughout this tutorial, we'll walk you through the creation of a basic "
"poll application."
msgstr ""

# 796d1f1d67bd45dfb1f365ac4b1b416f
#: ../../intro/tutorial01.txt:10
msgid "It'll consist of two parts:"
msgstr ""

# 439334f2fc0f42a9ae37bdfccd31212f
#: ../../intro/tutorial01.txt:12
msgid "A public site that lets people view polls and vote in them."
msgstr ""

# b1d0604a59db4edbabf283d23bdbb1ed
#: ../../intro/tutorial01.txt:13
msgid "An admin site that lets you add, change and delete polls."
msgstr ""

# 25b6605f13614e35ba047c853a75e432
#: ../../intro/tutorial01.txt:15
msgid ""
"We'll assume you have :doc:`Django installed </intro/install>` already. You "
"can tell Django is installed by running the Python interactive interpreter "
"and typing ``import django``. If that command runs successfully, with no "
"errors, Django is installed."
msgstr ""

# 1c438f00e12949509a34481c33c24987
#: ../../intro/tutorial01.txt:22
msgid ""
"If you're having trouble going through this tutorial, please post a message "
"to `django-users`__ or drop by `#django on irc.freenode.net`__ to chat with "
"other Django users who might be able to help."
msgstr ""

# 6378711992844a9a86e2b2d4da85bd02
#: ../../intro/tutorial01.txt:30
msgid "Creating a project"
msgstr ""

# 33d7a5c6f63748bd94ddff20213c118e
#: ../../intro/tutorial01.txt:32
msgid ""
"If this is your first time using Django, you'll have to take care of some "
"initial setup. Namely, you'll need to auto-generate some code that "
"establishes a Django :term:`project` -- a collection of settings for an "
"instance of Django, including database configuration, Django-specific "
"options and application-specific settings."
msgstr ""

# 2c99f52615934a688f65d7513c9bceb3
#: ../../intro/tutorial01.txt:38
msgid ""
"From the command line, ``cd`` into a directory where you'd like to store "
"your code, then run the following command:"
msgstr ""

# ad45ce7d4676468f8dae0c7635b5d596
#: ../../intro/tutorial01.txt:45
msgid "This will create a ``mysite`` directory in your current directory."
msgstr ""

# 9ac34a44785743d783fa8a9d4aa00283
#: ../../intro/tutorial01.txt:49
msgid ""
"If you installed Django using a Linux distribution's package manager (e.g. "
"apt-get or yum) ``django-admin.py`` may have been renamed to ``django-"
"admin``. You may continue through this documentation by omitting ``.py`` "
"from each command."
msgstr ""

# bd837edec80e4d01a86ebe26519bcf38
#: ../../intro/tutorial01.txt:56
msgid ""
"If you're using Mac OS X, you may see the message \"permission denied\" when "
"you try to run ``django-admin.py startproject``. This is because, on Unix-"
"based systems like OS X, a file must be marked as \"executable\" before it "
"can be run as a program. To do this, open Terminal.app and navigate (using "
"the ``cd`` command) to the directory where :doc:`django-admin.py </ref/"
"django-admin>` is installed, then run the command ``sudo chmod +x django-"
"admin.py``."
msgstr ""

# deaab6769bcf433d84e9968137ec86c5
#: ../../intro/tutorial01.txt:66
msgid ""
"You'll need to avoid naming projects after built-in Python or Django "
"components. In particular, this means you should avoid using names like "
"``django`` (which will conflict with Django itself) or ``test`` (which "
"conflicts with a built-in Python package)."
msgstr ""

# d69b0b67d5c346838a0ca1bf66600762
#: ../../intro/tutorial01.txt:71
msgid ""
":doc:`django-admin.py </ref/django-admin>` should be on your system path if "
"you installed Django via ``python setup.py``. If it's not on your path, you "
"can find it in ``site-packages/django/bin``, where ``site-packages`` is a "
"directory within your Python installation. Consider symlinking to :doc:"
"`django-admin.py </ref/django-admin>` from some place on your path, such as :"
"file:`/usr/local/bin`."
msgstr ""

# 74d9cde648b840b19c10aac44fe7f6d0
#: ../../intro/tutorial01.txt:80
msgid ""
"If your background is in PHP, you're probably used to putting code under the "
"Web server's document root (in a place such as ``/var/www``). With Django, "
"you don't do that. It's not a good idea to put any of this Python code "
"within your Web server's document root, because it risks the possibility "
"that people may be able to view your code over the Web. That's not good for "
"security."
msgstr ""

# 033c829ae3484e55bea44163ee6932dd
#: ../../intro/tutorial01.txt:87
msgid ""
"Put your code in some directory **outside** of the document root, such as :"
"file:`/home/mycode`."
msgstr ""

# e9435b51e1244a8da447e93c466f4da9
#: ../../intro/tutorial01.txt:90
msgid "Let's look at what :djadmin:`startproject` created::"
msgstr ""

# a9b71479224c42ec8b571d73a452c65b
#: ../../intro/tutorial01.txt:102
msgid ""
"The default project layout recently changed. If you're seeing a \"flat\" "
"layout (with no inner :file:`mysite/` directory), you're probably using a "
"version of Django that doesn't match this tutorial version.  You'll want to "
"either switch to the older tutorial or the newer Django version."
msgstr ""

# ebced515080b43dd8e1b7a6c4d880b98
#: ../../intro/tutorial01.txt:107
msgid "These files are:"
msgstr ""

# f781953d50024e8184dd88462b89f58c
#: ../../intro/tutorial01.txt:109
msgid ""
"The outer :file:`mysite/` directory is just a container for your project. "
"Its name doesn't matter to Django; you can rename it to anything you like."
msgstr ""

# 1a28b3763a1f434abea8adc31fa5e5c0
#: ../../intro/tutorial01.txt:113
msgid ""
":file:`manage.py`: A command-line utility that lets you interact with this "
"Django project in various ways. You can read all the details about :file:"
"`manage.py` in :doc:`/ref/django-admin`."
msgstr ""

# ae2402236b9a44679dd310f85c415f1d
#: ../../intro/tutorial01.txt:117
msgid ""
"The inner :file:`mysite/` directory is the actual Python package for your "
"project. Its name is the Python package name you'll need to use to import "
"anything inside it (e.g. ``import mysite.settings``)."
msgstr ""

# d751229841e74facac689cb4e512d202
#: ../../intro/tutorial01.txt:121
msgid ""
":file:`mysite/__init__.py`: An empty file that tells Python that this "
"directory should be considered a Python package. (Read `more about "
"packages`_ in the official Python docs if you're a Python beginner.)"
msgstr ""

# 7d3ee65d07a14113ac0d4414f7904bdf
#: ../../intro/tutorial01.txt:125
msgid ""
":file:`mysite/settings.py`: Settings/configuration for this Django "
"project.  :doc:`/topics/settings` will tell you all about how settings work."
msgstr ""

# 2856c28d4d4644c1a57c754c5b2f2fdc
#: ../../intro/tutorial01.txt:129
msgid ""
":file:`mysite/urls.py`: The URL declarations for this Django project; a "
"\"table of contents\" of your Django-powered site. You can read more about "
"URLs in :doc:`/topics/http/urls`."
msgstr ""

# e7498f79a5f049809c4aaeaf4c4efc1e
#: ../../intro/tutorial01.txt:133
msgid ""
":file:`mysite/wsgi.py`: An entry-point for WSGI-compatible webservers to "
"serve your project. See :doc:`/howto/deployment/wsgi/index` for more details."
msgstr ""

# cc238aa9384d4e09a4656649942965d0
#: ../../intro/tutorial01.txt:139
msgid "The development server"
msgstr ""

# 19cff1742f2c40d89ed1771a6dde51cb
#: ../../intro/tutorial01.txt:141
msgid ""
"Let's verify this worked. Change into the outer :file:`mysite` directory, if "
"you haven't already, and run the command ``python manage.py runserver``. "
"You'll see the following output on the command line::"
msgstr ""

# de711869a86e4a7f838e363fafe1b5fb
#: ../../intro/tutorial01.txt:152
msgid ""
"You've started the Django development server, a lightweight Web server "
"written purely in Python. We've included this with Django so you can develop "
"things rapidly, without having to deal with configuring a production server "
"-- such as Apache -- until you're ready for production."
msgstr ""

# a236ff7a82774f57a95bcf1480a54c79
#: ../../intro/tutorial01.txt:157
msgid ""
"Now's a good time to note: DON'T use this server in anything resembling a "
"production environment. It's intended only for use while developing. (We're "
"in the business of making Web frameworks, not Web servers.)"
msgstr ""

# 1e79ded7718445a39ebafd9d62f04f21
#: ../../intro/tutorial01.txt:161
msgid ""
"Now that the server's running, visit http://127.0.0.1:8000/ with your Web "
"browser. You'll see a \"Welcome to Django\" page, in pleasant, light-blue "
"pastel. It worked!"
msgstr ""

# bcb7acba732c4477879a230d812b38c5
#: ../../intro/tutorial01.txt:167
msgid ""
"By default, the :djadmin:`runserver` command starts the development server "
"on the internal IP at port 8000."
msgstr ""

# 718dd9bebdc84eb894ecfd3f05773a9f
#: ../../intro/tutorial01.txt:170
msgid ""
"If you want to change the server's port, pass it as a command-line argument. "
"For instance, this command starts the server on port 8080:"
msgstr ""

# be509e5fc7954b51a9ad802c38408417
#: ../../intro/tutorial01.txt:178
msgid ""
"If you want to change the server's IP, pass it along with the port. So to "
"listen on all public IPs (useful if you want to show off your work on other "
"computers), use:"
msgstr ""

# bb2a9230d35241db89b7d0c3457d923d
#: ../../intro/tutorial01.txt:186
msgid ""
"Full docs for the development server can be found in the :djadmin:"
"`runserver` reference."
msgstr ""

# 9c974fea4f96418594a2283f8f79e933
#: ../../intro/tutorial01.txt:190
msgid "Database setup"
msgstr ""

# bcfbf15dad854f389e159febbaab89df
#: ../../intro/tutorial01.txt:192
msgid ""
"Now, edit :file:`mysite/settings.py`. It's a normal Python module with "
"module-level variables representing Django settings. Change the following "
"keys in the :setting:`DATABASES` ``'default'`` item to match your database "
"connection settings."
msgstr ""

# c06ec471cd2f493b8d993bc18c772fdc
#: ../../intro/tutorial01.txt:197
msgid ""
":setting:`ENGINE <DATABASE-ENGINE>` -- Either ``'django.db.backends."
"postgresql_psycopg2'``, ``'django.db.backends.mysql'``, ``'django.db."
"backends.sqlite3'`` or ``'django.db.backends.oracle'``. Other backends are :"
"setting:`also available <DATABASE-ENGINE>`."
msgstr ""

# 8747ab62c4bb4303aba298bb302738a3
#: ../../intro/tutorial01.txt:203
msgid ""
":setting:`NAME` -- The name of your database. If you're using SQLite, the "
"database will be a file on your computer; in that case, :setting:`NAME` "
"should be the full absolute path, including filename, of that file. If the "
"file doesn't exist, it will automatically be created when you synchronize "
"the database for the first time (see below)."
msgstr ""

# 447b5471786440bc9b50ac6e550e748d
#: ../../intro/tutorial01.txt:210
msgid ""
"When specifying the path, always use forward slashes, even on Windows (e.g. "
"``C:/homes/user/mysite/sqlite3.db``)."
msgstr ""

# ef0df313d78c428bbc07ee88a2394d21
#: ../../intro/tutorial01.txt:213
msgid ":setting:`USER` -- Your database username (not used for SQLite)."
msgstr ""

# 26b07b346c624a9a8dd9a10d920d2d83
#: ../../intro/tutorial01.txt:215
msgid ":setting:`PASSWORD` -- Your database password (not used for SQLite)."
msgstr ""

# 668048c96c6940c89dd2e9faeb77bce6
#: ../../intro/tutorial01.txt:218
msgid ""
":setting:`HOST` -- The host your database is on. Leave this as an empty "
"string if your database server is on the same physical machine (not used for "
"SQLite)."
msgstr ""

# 827fe3f131b54888905ce9cd3a609ec2
#: ../../intro/tutorial01.txt:222
msgid ""
"If you're new to databases, we recommend simply using SQLite by setting :"
"setting:`ENGINE` to ``'django.db.backends.sqlite3'`` and :setting:`NAME` to "
"the place where you'd like to store the database. SQLite is included as part "
"of Python 2.5 and later, so you won't need to install anything else."
msgstr ""

# 789e28661f004aa5a3b2fb1855a78134
#: ../../intro/tutorial01.txt:229
msgid ""
"If you're using PostgreSQL or MySQL, make sure you've created a database by "
"this point. Do that with \"``CREATE DATABASE database_name;``\" within your "
"database's interactive prompt."
msgstr ""

# 785948713a5a41ae94a96a97df2c17fc
#: ../../intro/tutorial01.txt:233
msgid ""
"If you're using SQLite, you don't need to create anything beforehand - the "
"database file will be created automatically when it is needed."
msgstr ""

# 7ba8c9035ad743149946ac59d5db451a
#: ../../intro/tutorial01.txt:236
msgid ""
"While you're editing :file:`settings.py`, set :setting:`TIME_ZONE` to your "
"time zone. The default value isn't correct for you, unless you happen to "
"live near Chicago."
msgstr ""

# d437364a1261441fada7b1c98f8b23e9
#: ../../intro/tutorial01.txt:240
msgid ""
"Also, take note of the :setting:`INSTALLED_APPS` setting towards the bottom "
"of the file. That variable holds the names of all Django applications that "
"are activated in this Django instance. Apps can be used in multiple "
"projects, and you can package and distribute them for use by others in their "
"projects."
msgstr ""

# c4c89fd268f9439986c87b7bfc9fce50
#: ../../intro/tutorial01.txt:245
msgid ""
"By default, :setting:`INSTALLED_APPS` contains the following apps, all of "
"which come with Django:"
msgstr ""

# 9d253a85598b4c18b83e8f945ce680b6
#: ../../intro/tutorial01.txt:248
msgid ":mod:`django.contrib.auth` -- An authentication system."
msgstr ""

# f23caf92b38a47d9a2a186cb20e82970
#: ../../intro/tutorial01.txt:250
msgid ":mod:`django.contrib.contenttypes` -- A framework for content types."
msgstr ""

# 5e841b6c2e7d47b6aecd2a9c68d40307
#: ../../intro/tutorial01.txt:252
msgid ":mod:`django.contrib.sessions` -- A session framework."
msgstr ""

# 153f37c7068e4009a03fe5e01fda4ecc
#: ../../intro/tutorial01.txt:254
msgid ""
":mod:`django.contrib.sites` -- A framework for managing multiple sites with "
"one Django installation."
msgstr ""

# db6572a652524f4c88f91fbcf2978981
#: ../../intro/tutorial01.txt:257
msgid ":mod:`django.contrib.messages` -- A messaging framework."
msgstr ""

# f894f901b938457a873cd415e950c965
#: ../../intro/tutorial01.txt:259
msgid ""
":mod:`django.contrib.staticfiles` -- A framework for managing static files."
msgstr ""

# 6f09207957664499afa4cba98e834063
#: ../../intro/tutorial01.txt:262
msgid ""
"These applications are included by default as a convenience for the common "
"case."
msgstr ""

# 6a7128e049784a0fadee0255a12b2839
#: ../../intro/tutorial01.txt:264
msgid ""
"Each of these applications makes use of at least one database table, though, "
"so we need to create the tables in the database before we can use them. To "
"do that, run the following command:"
msgstr ""

# f61b6a22903344a2b792ae6a342bcb25
#: ../../intro/tutorial01.txt:272
msgid ""
"The :djadmin:`syncdb` command looks at the :setting:`INSTALLED_APPS` setting "
"and creates any necessary database tables according to the database settings "
"in your :file:`settings.py` file. You'll see a message for each database "
"table it creates, and you'll get a prompt asking you if you'd like to create "
"a superuser account for the authentication system. Go ahead and do that."
msgstr ""

# 977bac3fe6f3462e8ea3e632c3677a2a
#: ../../intro/tutorial01.txt:278
msgid ""
"If you're interested, run the command-line client for your database and type "
"``\\dt`` (PostgreSQL), ``SHOW TABLES;`` (MySQL), or ``.schema`` (SQLite) to "
"display the tables Django created."
msgstr ""

# 14b2ac5bb6c94f59bd4636497236d168
#: ../../intro/tutorial01.txt:284
msgid ""
"Like we said above, the default applications are included for the common "
"case, but not everybody needs them. If you don't need any or all of them, "
"feel free to comment-out or delete the appropriate line(s) from :setting:"
"`INSTALLED_APPS` before running :djadmin:`syncdb`. The :djadmin:`syncdb` "
"command will only create tables for apps in :setting:`INSTALLED_APPS`."
msgstr ""

# 862f35fc20b14263a1af441d13d6e309
#: ../../intro/tutorial01.txt:294
msgid "Creating models"
msgstr ""

# 5134c08397ff41709b336327a68d0aaa
#: ../../intro/tutorial01.txt:296
msgid ""
"Now that your environment -- a \"project\" -- is set up, you're set to start "
"doing work."
msgstr ""

# dac29960b5424624ac3441e00a62336d
#: ../../intro/tutorial01.txt:299
msgid ""
"Each application you write in Django consists of a Python package, somewhere "
"on your `Python path`_, that follows a certain convention. Django comes with "
"a utility that automatically generates the basic directory structure of an "
"app, so you can focus on writing code rather than creating directories."
msgstr ""

# e7c8c3175bfe4625951e0bf692aa44ee
#: ../../intro/tutorial01.txt:306
msgid ""
"What's the difference between a project and an app? An app is a Web "
"application that does something -- e.g., a Weblog system, a database of "
"public records or a simple poll app. A project is a collection of "
"configuration and apps for a particular Web site. A project can contain "
"multiple apps. An app can be in multiple projects."
msgstr ""

# f05d3a0727834914b004764e32476369
#: ../../intro/tutorial01.txt:312
msgid ""
"Your apps can live anywhere on your `Python path`_. In this tutorial, we'll "
"create our poll app right next to your :file:`manage.py` file so that it can "
"be imported as its own top-level module, rather than a submodule of "
"``mysite``."
msgstr ""

# d4f7de9ba36d4546a01a084d38bcd322
#: ../../intro/tutorial01.txt:316
msgid ""
"To create your app, make sure you're in the same directory as :file:`manage."
"py` and type this command:"
msgstr ""

# 820a4451ea25412cb96441fdc7e3dbd4
#: ../../intro/tutorial01.txt:323
msgid "That'll create a directory :file:`polls`, which is laid out like this::"
msgstr ""

# eea2bfcfad014f12bf2df8266dd2c24f
#: ../../intro/tutorial01.txt:331
msgid "This directory structure will house the poll application."
msgstr ""

# acb6c896f78e421385ff037c5f8a7997
#: ../../intro/tutorial01.txt:333
msgid ""
"The first step in writing a database Web app in Django is to define your "
"models -- essentially, your database layout, with additional metadata."
msgstr ""

# 446ffab2b52c40dc8e48db68798d7bd2
#: ../../intro/tutorial01.txt:338
msgid ""
"A model is the single, definitive source of data about your data. It "
"contains the essential fields and behaviors of the data you're storing. "
"Django follows the :ref:`DRY Principle <dry>`. The goal is to define your "
"data model in one place and automatically derive things from it."
msgstr ""

# 60feb5dee6474a1ba151475ec2faa1f1
#: ../../intro/tutorial01.txt:343
msgid ""
"In our simple poll app, we'll create two models: polls and choices. A poll "
"has a question and a publication date. A choice has two fields: the text of "
"the choice and a vote tally. Each choice is associated with a poll."
msgstr ""

# 02261b121ff54b41b5533b7329fd56c0
#: ../../intro/tutorial01.txt:347
msgid ""
"These concepts are represented by simple Python classes. Edit the :file:"
"`polls/models.py` file so it looks like this::"
msgstr ""

# 3cc086f66054492b8cf67d2c69a1f8c0
#: ../../intro/tutorial01.txt:361
msgid ""
"The code is straightforward. Each model is represented by a class that "
"subclasses :class:`django.db.models.Model`. Each model has a number of class "
"variables, each of which represents a database field in the model."
msgstr ""

# 19f5dca3e9bf4098a37b48903158ab60
#: ../../intro/tutorial01.txt:365
msgid ""
"Each field is represented by an instance of a :class:`~django.db.models."
"Field` class -- e.g., :class:`~django.db.models.CharField` for character "
"fields and :class:`~django.db.models.DateTimeField` for datetimes. This "
"tells Django what type of data each field holds."
msgstr ""

# 47f1c68a5d264ca2b37e69b02780aec4
#: ../../intro/tutorial01.txt:370
msgid ""
"The name of each :class:`~django.db.models.Field` instance (e.g. "
"``question`` or ``pub_date`` ) is the field's name, in machine-friendly "
"format. You'll use this value in your Python code, and your database will "
"use it as the column name."
msgstr ""

# 32113b11a5ba4f3897ba5e1839616ee8
#: ../../intro/tutorial01.txt:374
msgid ""
"You can use an optional first positional argument to a :class:`~django.db."
"models.Field` to designate a human-readable name. That's used in a couple of "
"introspective parts of Django, and it doubles as documentation. If this "
"field isn't provided, Django will use the machine-readable name. In this "
"example, we've only defined a human-readable name for ``Poll.pub_date``. For "
"all other fields in this model, the field's machine-readable name will "
"suffice as its human-readable name."
msgstr ""

# b49f8b94553a4a70b9baaf59bfa99100
#: ../../intro/tutorial01.txt:382
msgid ""
"Some :class:`~django.db.models.Field` classes have required elements. :class:"
"`~django.db.models.CharField`, for example, requires that you give it a :"
"attr:`~django.db.models.Field.max_length`. That's used not only in the "
"database schema, but in validation, as we'll soon see."
msgstr ""

# 0038fed178084a23bd941df91ad32021
#: ../../intro/tutorial01.txt:387
msgid ""
"Finally, note a relationship is defined, using :class:`~django.db.models."
"ForeignKey`. That tells Django each Choice is related to a single Poll. "
"Django supports all the common database relationships: many-to-ones, many-to-"
"manys and one-to-ones."
msgstr ""

# 4e48ceb9e8f34431be8a98961ea9387c
#: ../../intro/tutorial01.txt:395
msgid "Activating models"
msgstr ""

# a77d29a085f94604bde3ab6587c03412
#: ../../intro/tutorial01.txt:397
msgid ""
"That small bit of model code gives Django a lot of information. With it, "
"Django is able to:"
msgstr ""

# fdd53a9eeaf64b649b2ae46b8c8d6164
#: ../../intro/tutorial01.txt:400
msgid "Create a database schema (``CREATE TABLE`` statements) for this app."
msgstr ""

# 1e933951ed854ff7b86840100d82f89b
#: ../../intro/tutorial01.txt:401
msgid ""
"Create a Python database-access API for accessing Poll and Choice objects."
msgstr ""

# aaba558cb8824f9b9b1675a1e8266e78
#: ../../intro/tutorial01.txt:403
msgid ""
"But first we need to tell our project that the ``polls`` app is installed."
msgstr ""

# e16604e600944fe38228ec59349888a4
#: ../../intro/tutorial01.txt:407
msgid ""
"Django apps are \"pluggable\": You can use an app in multiple projects, and "
"you can distribute apps, because they don't have to be tied to a given "
"Django installation."
msgstr ""

# d3c7ee78316e451eb596a2a2a45b1972
#: ../../intro/tutorial01.txt:411
msgid ""
"Edit the :file:`settings.py` file again, and change the :setting:"
"`INSTALLED_APPS` setting to include the string ``'polls'``. So it'll look "
"like this::"
msgstr ""

# 9cb822a7c73b404c88477270c8c122de
#: ../../intro/tutorial01.txt:429
msgid ""
"Now Django knows to include the ``polls`` app. Let's run another command:"
msgstr ""

# 28f9234bcaab4f9d9ee5dfba6bd54693
#: ../../intro/tutorial01.txt:436
msgid ""
"You should see something similar to the following (the ``CREATE TABLE`` SQL "
"statements for the polls app):"
msgstr ""

# 4e5bebc172b743929d917c012da86181
#: ../../intro/tutorial01.txt:455
msgid "Note the following:"
msgstr ""

# df2a3c0fa3a84eab9df905cbf8f4db38
#: ../../intro/tutorial01.txt:457
msgid "The exact output will vary depending on the database you are using."
msgstr ""

# e5c51114f03f4b968e48b267e7227977
#: ../../intro/tutorial01.txt:459
msgid ""
"Table names are automatically generated by combining the name of the app "
"(``polls``) and the lowercase name of the model -- ``poll`` and ``choice``. "
"(You can override this behavior.)"
msgstr ""

# be1c0dab08bd483bbfd9489d73d7f183
#: ../../intro/tutorial01.txt:463
msgid ""
"Primary keys (IDs) are added automatically. (You can override this, too.)"
msgstr ""

# ab6319c4274d469ca45057de90bdd649
#: ../../intro/tutorial01.txt:465
msgid ""
"By convention, Django appends ``\"_id\"`` to the foreign key field name. "
"(Yes, you can override this, as well.)"
msgstr ""

# 8a5e12d360c24361856694044848b78e
#: ../../intro/tutorial01.txt:468
msgid ""
"The foreign key relationship is made explicit by a ``REFERENCES`` statement."
msgstr ""

# 3ab40ecf6d12418e959395ac016c7c24
#: ../../intro/tutorial01.txt:471
msgid ""
"It's tailored to the database you're using, so database-specific field types "
"such as ``auto_increment`` (MySQL), ``serial`` (PostgreSQL), or ``integer "
"primary key`` (SQLite) are handled for you automatically. Same goes for "
"quoting of field names -- e.g., using double quotes or single quotes. The "
"author of this tutorial runs PostgreSQL, so the example output is in "
"PostgreSQL syntax."
msgstr ""

# dcdc9ad8924d444681e0ad4e9ec3c35d
#: ../../intro/tutorial01.txt:478
msgid ""
"The :djadmin:`sql` command doesn't actually run the SQL in your database - "
"it just prints it to the screen so that you can see what SQL Django thinks "
"is required. If you wanted to, you could copy and paste this SQL into your "
"database prompt. However, as we will see shortly, Django provides an easier "
"way of committing the SQL to the database."
msgstr ""

# 404a026aa77c4e31ab71a19f7e610547
#: ../../intro/tutorial01.txt:484
msgid "If you're interested, also run the following commands:"
msgstr ""

# 380b2baf88b14d139423f56e69205591
#: ../../intro/tutorial01.txt:486
msgid ""
":djadmin:`python manage.py validate <validate>` -- Checks for any errors in "
"the construction of your models."
msgstr ""

# 10ad92a88c4a4e879c8698271b7ec205
#: ../../intro/tutorial01.txt:489
msgid ""
":djadmin:`python manage.py sqlcustom polls <sqlcustom>` -- Outputs any :ref:"
"`custom SQL statements <initial-sql>` (such as table modifications or "
"constraints) that are defined for the application."
msgstr ""

# 8ab753ca0a9a4376958c36745090aef7
#: ../../intro/tutorial01.txt:493
msgid ""
":djadmin:`python manage.py sqlclear polls <sqlclear>` -- Outputs the "
"necessary ``DROP TABLE`` statements for this app, according to which tables "
"already exist in your database (if any)."
msgstr ""

# d8021f3eb219454fa67a03edbf4ee75a
#: ../../intro/tutorial01.txt:497
msgid ""
":djadmin:`python manage.py sqlindexes polls <sqlindexes>` -- Outputs the "
"``CREATE INDEX`` statements for this app."
msgstr ""

# 8767151868274ac4bc89d6d39032fc00
#: ../../intro/tutorial01.txt:500
msgid ""
":djadmin:`python manage.py sqlall polls <sqlall>` -- A combination of all "
"the SQL from the :djadmin:`sql`, :djadmin:`sqlcustom`, and :djadmin:"
"`sqlindexes` commands."
msgstr ""

# ac13a281127b4e60abccccb63e931a8f
#: ../../intro/tutorial01.txt:504
msgid ""
"Looking at the output of those commands can help you understand what's "
"actually happening under the hood."
msgstr ""

# 362e59cef22b4dd38097152f0b649c84
#: ../../intro/tutorial01.txt:507
msgid ""
"Now, run :djadmin:`syncdb` again to create those model tables in your "
"database:"
msgstr ""

# ad1fc73ad5154661aace060a0b7c6b35
#: ../../intro/tutorial01.txt:513
msgid ""
"The :djadmin:`syncdb` command runs the sql from :djadmin:`sqlall` on your "
"database for all apps in :setting:`INSTALLED_APPS` that don't already exist "
"in your database. This creates all the tables, initial data and indexes for "
"any apps you have added to your project since the last time you ran syncdb. :"
"djadmin:`syncdb` can be called as often as you like, and it will only ever "
"create the tables that don't exist."
msgstr ""

# a3b7efd736a749b49a25445cce4da753
#: ../../intro/tutorial01.txt:520
msgid ""
"Read the :doc:`django-admin.py documentation </ref/django-admin>` for full "
"information on what the ``manage.py`` utility can do."
msgstr ""

# 273db0186815492d895bbb399046b9c9
#: ../../intro/tutorial01.txt:524
msgid "Playing with the API"
msgstr ""

# b7693ccc9eb645e1962cce3bf74d67d5
#: ../../intro/tutorial01.txt:526
msgid ""
"Now, let's hop into the interactive Python shell and play around with the "
"free API Django gives you. To invoke the Python shell, use this command:"
msgstr ""

# 4f8d751598eb438e9a732d59ae27b842
#: ../../intro/tutorial01.txt:533
msgid ""
"We're using this instead of simply typing \"python\", because :file:`manage."
"py` sets the ``DJANGO_SETTINGS_MODULE`` environment variable, which gives "
"Django the Python import path to your :file:`settings.py` file."
msgstr ""

# aed4ef9e7521437aaa5a12c4fd1c6037
#: ../../intro/tutorial01.txt:539
msgid ""
"If you'd rather not use :file:`manage.py`, no problem. Just set the "
"``DJANGO_SETTINGS_MODULE`` environment variable to ``mysite.settings`` and "
"run ``python`` from the same directory :file:`manage.py` is in (or ensure "
"that directory is on the Python path, so that ``import mysite`` works)."
msgstr ""

# 3af482bbc6c94cca98f9ab403d9fb9dd
#: ../../intro/tutorial01.txt:544
msgid ""
"For more information on all of this, see the :doc:`django-admin.py "
"documentation </ref/django-admin>`."
msgstr ""

# 2032d7a6354b486882f6f9abbfa629eb
#: ../../intro/tutorial01.txt:547
msgid ""
"Once you're in the shell, explore the :doc:`database API </topics/db/"
"queries>`::"
msgstr ""

# fdf44a2ab073409ebcd404f9c21e4f7f
#: ../../intro/tutorial01.txt:587
msgid ""
"Wait a minute. ``<Poll: Poll object>`` is, utterly, an unhelpful "
"representation of this object. Let's fix that by editing the polls model (in "
"the ``polls/models.py`` file) and adding a :meth:`~django.db.models.Model."
"__unicode__` method to both ``Poll`` and ``Choice``::"
msgstr ""

# 72beb23d3eeb467cafdacc71e4a79d1f
#: ../../intro/tutorial01.txt:603
msgid ""
"It's important to add :meth:`~django.db.models.Model.__unicode__` methods to "
"your models, not only for your own sanity when dealing with the interactive "
"prompt, but also because objects' representations are used throughout "
"Django's automatically-generated admin."
msgstr ""

# 7e9fd39268f54fb1b85345afebeea3dc
#: ../../intro/tutorial01.txt:611
msgid ""
"If you're familiar with Python, you might be in the habit of adding :meth:"
"`~django.db.models.Model.__str__` methods to your classes, not :meth:"
"`~django.db.models.Model.__unicode__` methods. We use :meth:`~django.db."
"models.Model.__unicode__` here because Django models deal with Unicode by "
"default. All data stored in your database is converted to Unicode when it's "
"returned."
msgstr ""

# cd47d9db719a441f8e3736287716adb4
#: ../../intro/tutorial01.txt:618
msgid ""
"Django models have a default :meth:`~django.db.models.Model.__str__` method "
"that calls :meth:`~django.db.models.Model.__unicode__` and converts the "
"result to a UTF-8 bytestring. This means that ``unicode(p)`` will return a "
"Unicode string, and ``str(p)`` will return a normal string, with characters "
"encoded as UTF-8."
msgstr ""

# c61b5d80bce34f2f99ba36755dd0fb7a
#: ../../intro/tutorial01.txt:624
msgid ""
"If all of this is gibberish to you, just remember to add :meth:`~django.db."
"models.Model.__unicode__` methods to your models. With any luck, things "
"should Just Work for you."
msgstr ""

# 38fcba052aa448aca785c83560ec9498
#: ../../intro/tutorial01.txt:628
msgid ""
"Note these are normal Python methods. Let's add a custom method, just for "
"demonstration::"
msgstr ""

# dd897d9c7817479fbd1426a33c2a91a9
#: ../../intro/tutorial01.txt:639
msgid ""
"Note the addition of ``import datetime`` and ``from django.utils import "
"timezone``, to reference Python's standard :mod:`datetime` module and "
"Django's time zone-related utilities in :mod:`django.utils.timezone` "
"respectively. If you aren't familiar with time zone handling in Python, you "
"can learn more in the :doc:`time zone support docs </topics/i18n/timezones>`."
msgstr ""

# 5c37d6a0253642eaa73020ee3423ab9b
#: ../../intro/tutorial01.txt:645
msgid ""
"Save these changes and start a new Python interactive shell by running "
"``python manage.py shell`` again::"
msgstr ""

# 8afd6f9073bb46ec9371a3975b205994
#: ../../intro/tutorial01.txt:720
msgid ""
"For more information on model relations, see :doc:`Accessing related objects "
"</ref/models/relations>`. For more on how to use double underscores to "
"perform field lookups via the API, see :ref:`Field lookups <field-lookups-"
"intro>`. For full details on the database API, see our :doc:`Database API "
"reference </topics/db/queries>`."
msgstr ""

# 4d05b951b29d4849956e0a92345d5891
#: ../../intro/tutorial01.txt:726
msgid ""
"When you're comfortable with the API, read :doc:`part 2 of this tutorial </"
"intro/tutorial02>` to get Django's automatic admin working."
msgstr ""
