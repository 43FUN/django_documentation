# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated <>, 2012.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-04-23 16:09\n"
"PO-Revision-Date: 2013-05-09 14:57+0300\n"
"Last-Translator: Dmitriy Kostochko <alerion.um@gmail.com>\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# 279f46a61e7b41b98d8a0a80f476b7cd
#: ../../intro/tutorial02.txt:3
msgid "Writing your first Django app, part 2"
msgstr "Создаем свое первое приложение с Django, часть 2"

# ee2059b16d0a4cceb86213baf936f0c4
#: ../../intro/tutorial02.txt:5
msgid "This tutorial begins where :doc:`Tutorial 1 </intro/tutorial01>` left off. We're continuing the Web-poll application and will focus on Django's automatically-generated admin site."
msgstr "Этот раздел -- продолжение :doc:`первой части </intro/tutorial01>` учебника. Мы продолжим разрабатывать приложение для голосования и создадим интерфейс администратора."

# 8efae26bb46545f3a0a1e0ba7c1714de
#: ../../intro/tutorial02.txt:11
msgid "Generating admin sites for your staff or clients to add, change and delete content is tedious work that doesn't require much creativity. For that reason, Django entirely automates creation of admin interfaces for models."
msgstr "Создание интерфейса администратора для добавления, изменения и удаления содержимого сайта -- в основном скучная некреативная задача. Django значительно автоматизирует и упрощает эту задачу."

# 338d2e3fd63b4011b073d9e86ca5f478
#: ../../intro/tutorial02.txt:15
msgid "Django was written in a newsroom environment, with a very clear separation between \"content publishers\" and the \"public\" site. Site managers use the system to add news stories, events, sports scores, etc., and that content is displayed on the public site. Django solves the problem of creating a unified interface for site administrators to edit content."
msgstr "Django создавался для новостных сайтов, у которых есть разделение между публичными страницами и интерфейсом администратора. Менеджеры используют последний для добавления новостей и другого содержимого сайта, это содержимое отображает на сайте. Django позволяет легко создать универсальный интерфейс для редактирования содержимого сайта."

# 0989045c478d4d5f9cce083c93f73d4b
#: ../../intro/tutorial02.txt:21
msgid "The admin isn't intended to be used by site visitors. It's for site managers."
msgstr "Интерфейс администратора не предназначен для использования пользователями. Он создан для менеджеров и администраторов сайта."

# 2f91c1b5464d44d0ad4a31cb5e61f586
#: ../../intro/tutorial02.txt:25
msgid "Activate the admin site"
msgstr "Активируем интерфейс администратора"

# ddbfb4efb6fe42298c6ff98e289afb4e
#: ../../intro/tutorial02.txt:27
msgid "The Django admin site is not activated by default -- it's an opt-in thing. To activate the admin site for your installation, do these three things:"
msgstr "Интерфейс администратора  не активирован по умолчанию. Что бы активировать его, вполните следующее:"

# acf7acb99bde4d7a91f0bb29bad39706
#: ../../intro/tutorial02.txt:30
msgid "Uncomment ``\"django.contrib.admin\"`` in the :setting:`INSTALLED_APPS` setting."
msgstr "Раскомментируйте ``\"django.contrib.admin\"`` в настройке :setting:`INSTALLED_APPS`."

# 8917cd8c12cc4c44b9bd5d8349745f13
#: ../../intro/tutorial02.txt:32
msgid "Run ``python manage.py syncdb``. Since you have added a new application to :setting:`INSTALLED_APPS`, the database tables need to be updated."
msgstr "Запустите ``python manage.py syncdb``. Так как вы добавили новое приложение в :setting:`INSTALLED_APPS`, необходимо обновить базу данных."

# 118b943585e647f4871d69ca92db7931
#: ../../intro/tutorial02.txt:35
msgid "Edit your ``mysite/urls.py`` file and uncomment the lines that reference the admin -- there are three lines in total to uncomment. This file is a URLconf; we'll dig into URLconfs in the next tutorial. For now, all you need to know is that it maps URL roots to applications. In the end, you should have a ``urls.py`` file that looks like this:"
msgstr "Отредактируйте ``mysite/urls.py`` и раскомментируйте строки, которые относятся к интерфейсу администратора -- должно быть всего три строки. Этот файл является  конфигурацией URL-ов, о которой мы узнаем с ледующем разделе. Сейчас же знайте что в нем определяется соответствие URL-ов с приложениями. Вы должны получить следующий ``urls.py``:"

# a51c893a8a7c4a2ebece29fd2785933e
#: ../../intro/tutorial02.txt:61
msgid "(The bold lines are the ones that needed to be uncommented.)"
msgstr "(Вам необходимо раскоментировать строки выделенные жирным.)"

# 8002fe91c6f14bf586c7afa2d676b9a2
#: ../../intro/tutorial02.txt:64
msgid "Start the development server"
msgstr "Запускаем сервер для разработки"

# ddbfb4efb6fe42298c6ff98e289afb4e
#: ../../intro/tutorial02.txt:66
msgid "Let's start the development server and explore the admin site."
msgstr "Давайте запустим встроенный сервер для разработки и посмотрим на наш интерфейс администратора."

# 48348df92a314b7db7eb4c19fabdbf9d
#: ../../intro/tutorial02.txt:68
msgid "Recall from Tutorial 1 that you start the development server like so:"
msgstr "Напомним, что сервер для разработки запускается следующим образом:"

# 809c2233a2e04344b3329183e6fa350a
#: ../../intro/tutorial02.txt:74
msgid "Now, open a Web browser and go to \"/admin/\" on your local domain -- e.g., http://127.0.0.1:8000/admin/. You should see the admin's login screen:"
msgstr "Откроем \"/admin/\" локального домена в браузере -- например, http://127.0.0.1:8000/admin/. Вы должны увидеть страницу авторизации интерфейса администратора:"

# 7863b0d61722464f9808c40a98e7e18a
#: ../../intro/tutorial02.txt:82
msgid "If at this point, instead of the above login page, you get an error page reporting something like::"
msgstr "Если вместо страницы авторизации вы получили ошибку::"

# 27cd4e40f9d6483e97863db19f55a820
#: ../../intro/tutorial02.txt:89
msgid "then you're probably using a version of Django that doesn't match this tutorial version. You'll want to either switch to the older tutorial or the newer Django version."
msgstr "значит вы используете не верную версию Django. Смотрите учебник для используемой версии или обновите Django."

# 2f91c1b5464d44d0ad4a31cb5e61f586
#: ../../intro/tutorial02.txt:94
msgid "Enter the admin site"
msgstr "Заходим в интерфейс администратора"

# 7f94c607c39c4c2ab1a41fbf3f711f43
#: ../../intro/tutorial02.txt:96
msgid "Now, try logging in. (You created a superuser account in the first part of this tutorial, remember?  If you didn't create one or forgot the password you can :ref:`create another one <topics-auth-creating-superusers>`.) You should see the Django admin index page:"
msgstr "Теперь авторизируемся. Вы создали суперпользователя в первой части учебника, помните?  Если вы этого не сделали или забыли пароль, :ref:`создайте еще одного <topics-auth-creating-superusers>`. Вы должны увидеть интерфейс администратора:"

# 4c7f7818de634195801bccf118033f85
#: ../../intro/tutorial02.txt:104
msgid "You should see a few types of editable content, including groups, users and sites. These are core features Django ships with by default."
msgstr "Вы должны увидеть несколько разделов: группы, пользователи и сайты. Это встроенные основные приложения Django."

# 31bd7e2f1b8d4ea6bb1bbfd74a7c3705
#: ../../intro/tutorial02.txt:108
msgid "Make the poll app modifiable in the admin"
msgstr "Добавим приложение голосования в интерфейс администратора"

# 7170101a17544257b29adcb39f764fe6
#: ../../intro/tutorial02.txt:110
msgid "But where's our poll app? It's not displayed on the admin index page."
msgstr "А где же наше приложение голосования? Оно не отображается в интерфейсе администратора."

# 5a732d871e864d91a02317088657ffdf
#: ../../intro/tutorial02.txt:112
msgid "Just one thing to do: We need to tell the admin that ``Poll`` objects have an admin interface. To do this, create a file called ``admin.py`` in your ``polls`` directory, and edit it to look like this::"
msgstr "Нам нужно указать, что объекты модели ``Poll`` могут редактироваться в интерфейсе администратора. Для этого создадим файл ``admin.py`` в каталоге ``polls``, и отредактируем следующим образом::"

# 33a9c124168841859cce5730dfc3e2bf
#: ../../intro/tutorial02.txt:121
msgid "You'll need to restart the development server to see your changes. Normally, the server auto-reloads code every time you modify a file, but the action of creating a new file doesn't trigger the auto-reloading logic."
msgstr "Вам необходимо перезапустить сервер, что бы увидеть изменения Обычно сервер автоматом перегружается при изменениия кода, но это не работает при создании нового файла."

# 1db75ea0b6744a888fa0c47b243bfd38
#: ../../intro/tutorial02.txt:126
msgid "Explore the free admin functionality"
msgstr "Изучим возможности интерфейса администратора"

# cbc4ff6cbb35489aa8a778d1f5414c79
#: ../../intro/tutorial02.txt:128
msgid "Now that we've registered ``Poll``, Django knows that it should be displayed on the admin index page:"
msgstr "После регистрации модели ``Poll`` Django отобразит ее на главной странице:"

# 2e7aa9a9cf6d45e897d61ed00bdadd01
#: ../../intro/tutorial02.txt:134
msgid "Click \"Polls.\" Now you're at the \"change list\" page for polls. This page displays all the polls in the database and lets you choose one to change it. There's the \"What's up?\" poll we created in the first tutorial:"
msgstr "Нажмите \"Polls\". Вы попали на страницу  \"списка объектов\" для голосований. Эта страница содержим все объекты из базы данных и позволяет выбрать один из них для редактирования. Мы видим голосование \"What's up?\", которое создали в первой части учебника:"

# 1237861888334bbaa243a6fdd85c24d1
#: ../../intro/tutorial02.txt:141
msgid "Click the \"What's up?\" poll to edit it:"
msgstr "Нажмите \"What's up?\" что бы отредактировать его:"

# 0b66c36417aa4878bc7f2f0370189692
#: ../../intro/tutorial02.txt:146
msgid "Things to note here:"
msgstr "Заметим:"

# ee3f114817964980832c274e87c1794c
#: ../../intro/tutorial02.txt:148
msgid "The form is automatically generated from the Poll model."
msgstr "Форма автоматически создается с модели голосования."

# 77f3a0b29f0a46019a4895e30ce3f162
#: ../../intro/tutorial02.txt:150
msgid "The different model field types (:class:`~django.db.models.DateTimeField`, :class:`~django.db.models.CharField`) correspond to the appropriate HTML input widget. Each type of field knows how to display itself in the Django admin."
msgstr "Для различных типов полей модели (:class:`~django.db.models.DateTimeField`, :class:`~django.db.models.CharField`) используются соответствующие HTML поля. Каждое поле знает как отобразить себя в интерфейсе администратора."

# ab12635e022949448fed52da8934d3d0
#: ../../intro/tutorial02.txt:155
msgid "Each :class:`~django.db.models.DateTimeField` gets free JavaScript shortcuts. Dates get a \"Today\" shortcut and calendar popup, and times get a \"Now\" shortcut and a convenient popup that lists commonly entered times."
msgstr "К полям :class:`~django.db.models.DateTimeField` добавлен JavaScript виджет. Для даты добавлена кнопка \"Сегодня\" и календарь, для времени добавлена кнопка \"Сейчас\" и список распространенных значений."

# 5a4190ed5b4c48dcb14e241158719b23
#: ../../intro/tutorial02.txt:159
msgid "The bottom part of the page gives you a couple of options:"
msgstr "В нижней части страницы мы видим несколько кнопок:"

# a23eacdf08f64f46bedc1cf71c2fb9eb
#: ../../intro/tutorial02.txt:161
msgid "Save -- Saves changes and returns to the change-list page for this type of object."
msgstr "Save -- сохранить изменения и вернуться на страницу списка объектов."

# d88f04ac66ad471ea9d361c433c003c8
#: ../../intro/tutorial02.txt:164
msgid "Save and continue editing -- Saves changes and reloads the admin page for this object."
msgstr "Save and continue editing -- сохранить изменения и снова загрузить страницу редактирования текущего объекта."

# b4a26f892b82447da11d5595f0323a72
#: ../../intro/tutorial02.txt:167
msgid "Save and add another -- Saves changes and loads a new, blank form for this type of object."
msgstr "Save and add another -- Сохранить изменения и перейти на страницу создания нового объекта."

# 447c0e08683a4fdabb7a7c218325fe4a
#: ../../intro/tutorial02.txt:170
msgid "Delete -- Displays a delete confirmation page."
msgstr "Delete -- Показывает страницу подтверждения удаления."

# 1eb3551510194bba894050b509161e2d
#: ../../intro/tutorial02.txt:172
msgid "If the value of \"Date published\" doesn't match the time when you created the poll in Tutorial 1, it probably means you forgot to set the correct value for the :setting:`TIME_ZONE` setting. Change it, reload the page and check that the correct value appears."
msgstr "Если значение \"Date published\" не совпадает с временем создания объекта в первой части учебника, возможно вы не верно определили настройку :setting:`TIME_ZONE`. Измените ее и перезагрузите страницу."

# 7ca3dd6d8d0642bd89afce116e7b6439
#: ../../intro/tutorial02.txt:177
msgid "Change the \"Date published\" by clicking the \"Today\" and \"Now\" shortcuts. Then click \"Save and continue editing.\" Then click \"History\" in the upper right. You'll see a page listing all changes made to this object via the Django admin, with the timestamp and username of the person who made the change:"
msgstr "Измените \"Date published\" нажав \"Today\" и \"Now\". Затем нажмите \"Save and continue editing.\" Теперь нажмите \"History\" в правом верхнем углу страницы. Вы увидите все изменения объекта сделанные через интерфейс администратора, время изменений и пользователя, который их сделал:"

# 80752a202cae40e4871223212bac4808
#: ../../intro/tutorial02.txt:186
msgid "Customize the admin form"
msgstr "Настройка формы"

# e0ece02837fb4fa0ad06061dd1c689ed
#: ../../intro/tutorial02.txt:188
msgid "Take a few minutes to marvel at all the code you didn't have to write. By registering the Poll model with ``admin.site.register(Poll)``, Django was able to construct a default form representation. Often, you'll want to customize how the admin form looks and works. You'll do this by telling Django the options you want when you register the object."
msgstr "Потратим несколько минут что бы полюбоваться кодом, который нам не пришлось писать самостоятельно. После регистрации модели ``Poll`` используя ``admin.site.register(Poll)``, Django создал форму для модели. Скорее всего вам захочется изменить ее. Вы можете это сделать используя параметры при регистрации модели."

# 5b96f89a51224899bee68ac28f5b1935
#: ../../intro/tutorial02.txt:194
msgid "Let's see how this works by re-ordering the fields on the edit form. Replace the ``admin.site.register(Poll)`` line with::"
msgstr "Вот как это работает. Давайте поменяем порядок полей в форме. Замените ``admin.site.register(Poll)`` на::"

# bb6affb2248940a8b73192daa18b4d9a
#: ../../intro/tutorial02.txt:202
msgid "You'll follow this pattern -- create a model admin object, then pass it as the second argument to ``admin.site.register()`` -- any time you need to change the admin options for an object."
msgstr "Создаем объект ``ModelAdmin`` и предаем его в ``admin.site.register()``."

# 0e5e8e342bfc4209b749648179533885
#: ../../intro/tutorial02.txt:206
msgid "This particular change above makes the \"Publication date\" come before the \"Question\" field:"
msgstr "Теперь поле \"Publication date\" отображается перед полем \"Question\":"

# b418517b1dd44c5faaae97ec946010d1
#: ../../intro/tutorial02.txt:212
msgid "This isn't impressive with only two fields, but for admin forms with dozens of fields, choosing an intuitive order is an important usability detail."
msgstr "Для нескольких полей это выглядит не очень внушительно, но при большом количестве полей порядок может значительно повысить удобство."

# 981db281c0f043e48268c5a8e2fa3137
#: ../../intro/tutorial02.txt:215
msgid "And speaking of forms with dozens of fields, you might want to split the form up into fieldsets::"
msgstr "Для форм с большим количеством полей можно разбить форму на группу полей::"

# c6cae3b5c1364cf3ae0503f15b4ef3dc
#: ../../intro/tutorial02.txt:226
msgid "The first element of each tuple in ``fieldsets`` is the title of the fieldset. Here's what our form looks like now:"
msgstr "Первый элемент кортежа в ``fieldsets`` -- название группы полей. Вот как будет выглядеть наша форма:"

# 76405a45393746698a1c9c84995d62d2
#: ../../intro/tutorial02.txt:232
msgid "You can assign arbitrary HTML classes to each fieldset. Django provides a ``\"collapse\"`` class that displays a particular fieldset initially collapsed. This is useful when you have a long form that contains a number of fields that aren't commonly used::"
msgstr "Вы можете добавить HTML классы для каждой группы полей. Django предоставляет класс ``\"collapse\"``, который отображает группу полей изначально скрытой. Это полезно, если форма содержит поля, которые редко редактируются::"

# 54a9ebac1153441a8513d601e4d0543a
#: ../../intro/tutorial02.txt:247
msgid "Adding related objects"
msgstr "Добавления связанных объектов"

# 3fd43d45e7704d7eac21d37b5989c548
#: ../../intro/tutorial02.txt:249
msgid "OK, we have our Poll admin page. But a ``Poll`` has multiple ``Choices``, and the admin page doesn't display choices."
msgstr "Отлично, теперь модель ``Poll`` имеет свою собственную страницу в интерфейсе администратора. Но ``Poll`` содержит несколько ``Choices``, которые интерфейс администратора не отображает."

# 2f10a55c8dda45cba443b03bec56a955
#: ../../intro/tutorial02.txt:252
msgid "Yet."
msgstr "Пока что."

# d74c025bacdc49c6a3a2f17cab22cfa8
#: ../../intro/tutorial02.txt:254
msgid "There are two ways to solve this problem. The first is to register ``Choice`` with the admin just as we did with ``Poll``. That's easy::"
msgstr "Есть два способа это сделать. Первый - зарегистрировать модель ``Choice`` в интерфейсе администратора, так же как и ``Poll``. Это просто::"

# b41860db54b145d9b59f6baa3040dcd3
#: ../../intro/tutorial02.txt:261
msgid "Now \"Choices\" is an available option in the Django admin. The \"Add choice\" form looks like this:"
msgstr "Теперь \"Choices\" отображается в интерфейсе администратора. Форма добавления варианта ответа выглядит следующим образом:"

# 132f040a78464f61bbad333bf3664bad
#: ../../intro/tutorial02.txt:267
msgid "In that form, the \"Poll\" field is a select box containing every poll in the database. Django knows that a :class:`~django.db.models.ForeignKey` should be represented in the admin as a ``<select>`` box. In our case, only one poll exists at this point."
msgstr "В этой форме поле \"Poll\" представлено ``<select>`` с объектами ``Poll`` из базы данных. Django знает, что поле :class:`~django.db.models.ForeignKey` должно быть представлено как ``<select>``. В нашем случае можно выбрать только одно голосование."

# d7dee04e8e464d9193d3093348a94076
#: ../../intro/tutorial02.txt:272
msgid "Also note the \"Add Another\" link next to \"Poll.\" Every object with a ``ForeignKey`` relationship to another gets this for free. When you click \"Add Another,\" you'll get a popup window with the \"Add poll\" form. If you add a poll in that window and click \"Save,\" Django will save the poll to the database and dynamically add it as the selected choice on the \"Add choice\" form you're looking at."
msgstr "Обратите внимание на ссылку \"Add Another\" возле поля \"Poll.\" Он будет добавлен для каждого поля ``ForeignKey``. При нажатии на \"Add Another,\" будет показано всплывающее окно с формой добавления голосования. Если вы добавите голосование и нажмете \"Save,\" Django сохранит объект в базу данных и выберет его в поле."

# 7a04001c896146cf909daa925f508d1f
#: ../../intro/tutorial02.txt:279
msgid "But, really, this is an inefficient way of adding ``Choice`` objects to the system. It'd be better if you could add a bunch of Choices directly when you create the ``Poll`` object. Let's make that happen."
msgstr "Но, на самом деле, это совсем не удобный способ добавлять варианты ответов для голосования. Было бы удобнее добавлять варианты ответов пачками при добавлении голосования. Давайте сделаем это."

# 5f222f52c64e4686884bbba892353bd3
#: ../../intro/tutorial02.txt:283
msgid "Remove the ``register()`` call for the ``Choice`` model. Then, edit the ``Poll`` registration code to read::"
msgstr "Уберите вызов ``register()`` для модели ``Choice``. И отредактируйте код для регистрации ``Poll`` в интерфейсе администратора::"

# d78417ffc83b4ab49711e88415fe8643
#: ../../intro/tutorial02.txt:302
msgid "This tells Django: \"``Choice`` objects are edited on the ``Poll`` admin page. By default, provide enough fields for 3 choices.\""
msgstr "Это говорит Django: \"Варианты ответов редактируются на странице голосования. По умолчанию, покажите 3 формы для добавления вариантов ответа.\""

# 13060f9dd52840f980e2eab933b6ae3a
#: ../../intro/tutorial02.txt:305
msgid "Load the \"Add poll\" page to see how that looks, you may need to restart your development server:"
msgstr "Загрузите страницу  \"Add poll\" и посмотрите как она выглядит, возможно вам понадобиться перегрузить сервер:"

# 2b8d1eb40e304d96907d02aebfca6fa1
#: ../../intro/tutorial02.txt:310
msgid "It works like this: There are three slots for related Choices -- as specified by ``extra`` -- and each time you come back to the \"Change\" page for an already-created object, you get another three extra slots."
msgstr "Это работает следующим образом: Есть три формы для добавления вариантов ответа -- как определяет параметр ``extra`` -- и при каждой загрузке этой страницы будет три формы для добавления новых вариантов ответа."

# 31ddd2df10f54822afc052015cd9f9b6
#: ../../intro/tutorial02.txt:314
msgid "At the end of the three current slots you will find an \"Add another Choice\" link.  If you click on it, a new slot will be added. If you want to remove the added slot, you can click on the X to the top right of the added slot. Note that you can't remove the original three slots. This image shows an added slot:"
msgstr "В конце формы вы увидите  ссылку \"Add another Choice\".  Кликните и добавится новая форма. Что бы удалить форму нажмите на X. Заметим что вы не можете удалить формы для существующих записей. Следующий рисунок показывает добавленные формы:"

# 11a1718511a243df9a9e187a392fa142
#: ../../intro/tutorial02.txt:322
msgid "One small problem, though. It takes a lot of screen space to display all the fields for entering related ``Choice`` objects. For that reason, Django offers a tabular way of displaying inline related objects; you just need to change the ``ChoiceInline`` declaration to read::"
msgstr "Однако есть одна проблема. Эти формы занимают много места. Для таких случаев, Django предлагает другой вариант отображения, переопределите ``ChoiceInline`` следующим образом::"

# ff31e79ce1cc4ae98aeac40371e13bd8
#: ../../intro/tutorial02.txt:330
msgid "With that ``TabularInline`` (instead of ``StackedInline``), the related objects are displayed in a more compact, table-based format:"
msgstr "С ``TabularInline`` (вместо ``StackedInline``), формы для связанных объектов отображаются в более компактном табличном виде:"

# a5043804180946599fbac0845623c096
#: ../../intro/tutorial02.txt:336
msgid "Note that there is an extra \"Delete?\" column that allows removing rows added using the \"Add Another Choice\" button and rows that have already been saved."
msgstr "Обратите внимание на дополнительную колонку  \"Delete?\", которая позволяет удалить только что добавленные и существующие записи."

# fe0840dfd6974b8398bf9d41d3b07349
#: ../../intro/tutorial02.txt:340
msgid "Customize the admin change list"
msgstr "Настройка страницы списка объектов"

# bbd13b3a8ebc4872ab251693ca4f39cf
#: ../../intro/tutorial02.txt:342
msgid "Now that the Poll admin page is looking good, let's make some tweaks to the \"change list\" page -- the one that displays all the polls in the system."
msgstr "Теперь, когда страница добавления/редактирования голосования выглядит хорошо, давай улучшим страницу отображения списка голосований."

# 3cb2967475ca44669088584fd34362bf
#: ../../intro/tutorial02.txt:345
msgid "Here's what it looks like at this point:"
msgstr "Вот как она выглядит сейчас:"

# c6b6b8d7536f455b9700483586dd7564
#: ../../intro/tutorial02.txt:350
msgid "By default, Django displays the ``str()`` of each object. But sometimes it'd be more helpful if we could display individual fields. To do that, use the ``list_display`` admin option, which is a tuple of field names to display, as columns, on the change list page for the object::"
msgstr "По умолчанию Django отображает результат выполнения ``str()`` для каждого объекта. Но чаще всего хочется показывать список полей. Для этого используйте параметр ``list_display``, который является кортежем состоящим из названий полей модели::"

# 2bc360aa5a864912a986974c7d7aec7e
#: ../../intro/tutorial02.txt:359
msgid "Just for good measure, let's also include the ``was_published_recently`` custom method from Tutorial 1::"
msgstr "Для примера давайте еще и добавим метод ``was_published_recently`` из Части 1 учебника::"

# cf8a680befd14405a87ea4a829c29300
#: ../../intro/tutorial02.txt:366
msgid "Now the poll change list page looks like this:"
msgstr "Теперь страница списка объектов ``Poll`` выглядит следующим образом:"

# 01a04c5ac2c7400281f4b1f0e3daa57d
#: ../../intro/tutorial02.txt:371
msgid "You can click on the column headers to sort by those values -- except in the case of the ``was_published_recently`` header, because sorting by the output of an arbitrary method is not supported. Also note that the column header for ``was_published_recently`` is, by default, the name of the method (with underscores replaced with spaces), and that each line contains the string representation of the output."
msgstr "Вы можете нажать на заголовок колонки что бы отсортировать записи по полю -- но не для ``was_published_recently``, так как сортировка по методу не поддерживается. Название колонки для ``was_published_recently`` по умолчанию равно названию метода (нижние подчеркивание заменяется на пробелы), а значение равно строковому представлению результата выполнения метода."

# fed44405ef294b16b5dd0a0b4ac793f6
#: ../../intro/tutorial02.txt:378
msgid "You can improve that by giving that method (in ``models.py``) a few attributes, as follows::"
msgstr "Вы можете исправить это добавив несколько атрибутов (в ``models.py``) этому методу::"

# 267b45b9cd084cec80a9cce9f3473d13
#: ../../intro/tutorial02.txt:389
msgid "Edit your admin.py file again and add an improvement to the Poll change list page: Filters. Add the following line to ``PollAdmin``::"
msgstr "Отредактируем файл ``admin.py`` снова и добавим на страницу Фильтры. Добавьте следующую строку в ``PollAdmin``::"

# b9401dc5188249739f27766ccf180e7d
#: ../../intro/tutorial02.txt:394
msgid "That adds a \"Filter\" sidebar that lets people filter the change list by the ``pub_date`` field:"
msgstr "Это добавляет \"Фильтр\" по полю ``pub_date`` в боковой панели:"

# 8892439b8c734ab6b007f985adc58717
#: ../../intro/tutorial02.txt:400
msgid "The type of filter displayed depends on the type of field you're filtering on. Because ``pub_date`` is a :class:`~django.db.models.DateTimeField`, Django knows to give appropriate filter options: \"Any date,\" \"Today,\" \"Past 7 days,\" \"This month,\" \"This year.\""
msgstr "Тип фильтра зависит от типа поля. Так как ``pub_date`` является :class:`~django.db.models.DateTimeField`, Django отображает соответствующие варианты для фильтрации: \"Any date,\" \"Today,\" \"Past 7 days,\" \"This month,\" \"This year.\""

# dc585c8402e24679bf5dbfaabe588891
#: ../../intro/tutorial02.txt:405
msgid "This is shaping up well. Let's add some search capability::"
msgstr "Теперь добавим поиск::"

# 2d8508e7c9654ee7bbe2e1b1714f6051
#: ../../intro/tutorial02.txt:409
msgid "That adds a search box at the top of the change list. When somebody enters search terms, Django will search the ``question`` field. You can use as many fields as you'd like -- although because it uses a ``LIKE`` query behind the scenes, keep it reasonable, to keep your database happy."
msgstr "Это добавляет поле для поиска в верхней части страницы. При вводе запроса, Django будет искать по полю ``question``. Вы можете использовать любое количество полей -- учтите что используется запрос ``LIKE``, так что постарайтесь не перегрузить вашу базу данных."

# 9979a325b46a465abd47771ee9e48fff
#: ../../intro/tutorial02.txt:414
msgid "Finally, because ``Poll`` objects have dates, it'd be convenient to be able to drill down by date. Add this line::"
msgstr "И наконец, так как объекты ``Poll`` содержат поле даты, было бы удобно просматривать записи по дням, месяцам и тд. Добавьте следующую строку::"

# c7df833c80844f4d8dbaddd659609202
#: ../../intro/tutorial02.txt:419
msgid "That adds hierarchical navigation, by date, to the top of the change list page. At top level, it displays all available years. Then it drills down to months and, ultimately, days."
msgstr "Это добавит иерархическую навигацию по дате в верхнюю часть страницы. Она содержит доступные года, месяца и дни."

# 201153f402024039a5ca6c6243217882
#: ../../intro/tutorial02.txt:423
msgid "Now's also a good time to note that change lists give you free pagination. The default is to display 100 items per page. Change-list pagination, search boxes, filters, date-hierarchies and column-header-ordering all work together like you think they should."
msgstr "Страница списка объектов так же содержит постраничное отображение. По умолчанию отображается 100 объектов на страницу."

# 7363520b04114fd390f274dfbbbdebf6
#: ../../intro/tutorial02.txt:429
msgid "Customize the admin look and feel"
msgstr "Настраиваем внешний вид"

# efb5d17f97174e3aaf97afc8db9e58dd
#: ../../intro/tutorial02.txt:431
msgid "Clearly, having \"Django administration\" at the top of each admin page is ridiculous. It's just placeholder text."
msgstr "\"Django administration\" в \"шапке\" страницы выглядит нелепо. Это просто замещающий текст."

# 352de987ce924829ae446bf5454405bf
#: ../../intro/tutorial02.txt:434
msgid "That's easy to change, though, using Django's template system. The Django admin is powered by Django itself, and its interfaces use Django's own template system."
msgstr "Его очень легко заменить использую систему шаблонов Django. Интерфейс администратора работает благодаря Django и использует систему шаблонов Django."

# b3a78c2d51634e9ab36341c8697511ce
#: ../../intro/tutorial02.txt:441
msgid "Customizing your *project's* templates"
msgstr "Кстомизация шаблонов *проекта*"

# ffd0fc7e1d514d44860f4fc559c70cb3
#: ../../intro/tutorial02.txt:443
msgid "Create a ``templates`` directory in your project directory. Templates can live anywhere on your filesystem that Django can access. (Django runs as whatever user your server runs.) However, keeping your templates within the project is a good convention to follow."
msgstr "Создайте каталог ``templates`` в каталоге проекта. Шаблоны могут располагаться где угодно, главное что бы Django имел доступ к ним. (Django запускается под юзером, под которым запущен сервер.) Но мы советуем располагаеть шаблоны внутри проекта."

# 1060b904d19c4553b7c0066de66000f2
#: ../../intro/tutorial02.txt:448
msgid "By default, :setting:`TEMPLATE_DIRS` is empty. So, let's add a line to it, to tell Django where our templates live::"
msgstr "По умолчанию :setting:`TEMPLATE_DIRS` ничего не содержит. Укажем расположение наших шаблонов::"

# 83977485e63942bc9d0a4b964365a56f
#: ../../intro/tutorial02.txt:455
msgid "Now copy the template ``admin/base_site.html`` from within the default Django admin template directory in the source code of Django itself (``django/contrib/admin/templates``) into an ``admin`` subdirectory of whichever directory you're using in :setting:`TEMPLATE_DIRS`. For example, if your :setting:`TEMPLATE_DIRS` includes ``'/path/to/mysite/templates'``, as above, then copy ``django/contrib/admin/templates/admin/base_site.html`` to ``/path/to/mysite/templates/admin/base_site.html``. Don't forget that ``admin`` subdirectory."
msgstr "Теперь скопируем шаблон ``admin/base_site.html`` из каталога с шаблонами интерфейса администратора в исходниках Django (``django/contrib/admin/templates``) в подкаталог ``admin`` в любой из каталогов из :setting:`TEMPLATE_DIRS`. Например, если :setting:`TEMPLATE_DIRS` содержит ``'/path/to/mysite/templates'``, тогда скопируйте ``django/contrib/admin/templates/admin/base_site.html`` в ``/path/to/mysite/templates/admin/base_site.html``. Обратите внимание на подкаталог ``admin``."

# 84b172ca9fb7485db963b175b5980968
#: ../../intro/tutorial02.txt:466
msgid "If you have difficulty finding where the Django source files are located on your system, run the following command:"
msgstr "Если вы не знаете где лежат исходники Django, выполните следующую команду:"

# 0e8ec75d343140ae87a7ea9062450e72
#: ../../intro/tutorial02.txt:477
msgid "Then, just edit the file and replace the generic Django text with your own site's name as you see fit."
msgstr "Отредактируйте файл и замените текст по умолчанию на название вашего сайта."

# 5feb2de7940e41a7b83a9cd9f05da5f5
#: ../../intro/tutorial02.txt:480
msgid "This template file contains lots of text like ``{% block branding %}`` and ``{{ title }}``. The ``{%`` and ``{{`` tags are part of Django's template language. When Django renders ``admin/base_site.html``, this template language will be evaluated to produce the final HTML page. Don't worry if you can't make any sense of the template right now -- we'll delve into Django's templating language in Tutorial 3."
msgstr "Этот шаблон содержит текст подобный ``{% block branding %}`` и ``{{ title }}``. Теги ``{%`` и ``{{`` -- это части синтаксиса системы шаблонов Django. При выполнении шаблона ``admin/base_site.html`` Django создаст HTML страницу. Не волнуйтесь если ничего не понимаете в этом -- в шаблонах Django мы разберемся в Части 3."

# 72cf7a56b85e4f08a18a8e39a3b50e9a
#: ../../intro/tutorial02.txt:487
msgid "Note that any of Django's default admin templates can be overridden. To override a template, just do the same thing you did with ``base_site.html`` -- copy it from the default directory into your custom directory, and make changes."
msgstr "Любой шаблон интерфейса администратора можно переопределить. Чтобы переопределить шаблон, сделайте тоже что и с ``base_site.html`` -- скопируйте его в каталог с шаблонами проекта и внесите изменения."

# 9e8e98d01c8f40d2ab3b248bd243f734
#: ../../intro/tutorial02.txt:493
msgid "Customizing your *application's* templates"
msgstr "Кастомизация шаблонов *приложения*"

# 5af4c4f427c140218405e8069e51c558
#: ../../intro/tutorial02.txt:495
msgid "Astute readers will ask: But if :setting:`TEMPLATE_DIRS` was empty by default, how was Django finding the default admin templates? The answer is that, by default, Django automatically looks for a ``templates/`` subdirectory within each application package, for use as a fallback (don't forget that ``django.contrib.admin`` is an application)."
msgstr "Внимательные читатели спросят: если :setting:`TEMPLATE_DIRS` пустая по умолчанию, как Django находит шаблоны интерфейса администратора по умолчанию? Django пытается найти шаблон в подкаталоге ``templates/`` каждого приложении, если шаблон не найден другим способом, а как мы знаем ``django.contrib.admin`` это приложение."

# 7430c2aa6649410388a23d93a55daaeb
#: ../../intro/tutorial02.txt:501
msgid "Our poll application is not very complex and doesn't need custom admin templates. But if it grew more sophisticated and required modification of Django's standard admin templates for some of its functionality, it would be more sensible to modify the *application's* templates, rather than those in the *project*. That way, you could include the polls application in any new project and be assured that it would find the custom templates it needed."
msgstr "Наше приложение простое и не требует переопределения шаблонов. Но если оно станет большим и сложным, и нам понадобится изменить его шаблоны, логичнее изменить шаблоны для *приложения*, а не для *проекта*. В таком случае вы можете сможете добавить приложения для голосования в любой проект и переопределенные шаблоны будут работать."

# c421363e1155430f86e8777139495a85
#: ../../intro/tutorial02.txt:508
msgid "See the :ref:`template loader documentation <template-loaders>` for more information about how Django finds its templates."
msgstr "Смотрите :ref:`раздел о загрузке шаблонов <template-loaders>`, что бы узнать как Django ищет шаблоны."

# e56cb4a95bf840b6b695449ea3588fcb
#: ../../intro/tutorial02.txt:512
msgid "Customize the admin index page"
msgstr "Настроим главную страницу"

# 2bc787d295f0415a905b8a543d175fe5
#: ../../intro/tutorial02.txt:514
msgid "On a similar note, you might want to customize the look and feel of the Django admin index page."
msgstr "Возможно вам понадобиться настроить главную страницу интерфейса администратора."

# 0ea5203c05ce4ed69c16e6a5baba7a80
#: ../../intro/tutorial02.txt:517
msgid "By default, it displays all the apps in :setting:`INSTALLED_APPS` that have been registered with the admin application, in alphabetical order. You may want to make significant changes to the layout. After all, the index is probably the most important page of the admin, and it should be easy to use."
msgstr "По умолчанию она показывает все приложения в алфавитном порядке из настройки :setting:`INSTALLED_APPS`, которые зарегистрированы в интерфейсе администратора. Главная страница очень важна и должна быть удобной."

# b2ccca41b28648b7a5d1d21e465a33ab
#: ../../intro/tutorial02.txt:522
msgid "The template to customize is ``admin/index.html``. (Do the same as with ``admin/base_site.html`` in the previous section -- copy it from the default directory to your custom template directory.) Edit the file, and you'll see it uses a template variable called ``app_list``. That variable contains every installed Django app. Instead of using that, you can hard-code links to object-specific admin pages in whatever way you think is best. Again, don't worry if you can't understand the template language -- we'll cover that in more detail in Tutorial 3."
msgstr "Для главной страницы используется шаблон ``admin/index.html``. (Сделайте тоже что и с шаблоном ``admin/base_site.html`` из раздела выше -- скопируйте его из приложения Django в каталог шаблонов проекта.) Откройте файл и вы увидите использование переменной ``app_list``. Эта переменная содержи все отображаемые приложения. Вместо нее вы можете явно указать ссылки на нужные страницы. Опять же, не волнуйтесь что вы ничего не понимаете, шаблоны будут обсуждаться в Части 3."

# 0aadffb0c497461987ef2b8789d9e918
#: ../../intro/tutorial02.txt:531
msgid "When you're comfortable with the admin site, read :doc:`part 3 of this tutorial </intro/tutorial03>` to start working on public poll views."
msgstr "Если вы освоили интерфейс администратора, переходите к :doc:`части 3 этого учебника </intro/tutorial03>`."

# e56cb4a95bf840b6b695449ea3588fcb
#~ msgid "You should see the Django admin index page:"
#~ msgstr "Настроим главную страницу интерфейса администратора:"
# 1a36d4c948874715b88ef74c180758aa
#, fuzzy
#~ msgid ""
#~ "Open your settings file (``mysite/settings.py``, remember) and  add a :"
#~ "setting:`TEMPLATE_DIRS` setting::"
#~ msgstr ""
#~ "Откройте файл настроек (напомним это ``mysite/settings.py``) и найдите "
#~ "настройку :setting:`TEMPLATE_DIRS`. :setting:`TEMPLATE_DIRS` являет собой "
#~ "кортеж путей к каталогам, который указывает Django будет искать шаблоны."

# 1a36d4c948874715b88ef74c180758aa
#, fuzzy
#~ msgid ""
#~ ":setting:`TEMPLATE_DIRS` is an iterable of filesystem directories to "
#~ "check when loading Django templates; it's a search path."
#~ msgstr ""
#~ "Откройте файл настроек (напомним это ``mysite/settings.py``) и найдите "
#~ "настройку :setting:`TEMPLATE_DIRS`. :setting:`TEMPLATE_DIRS` являет собой "
#~ "кортеж путей к каталогам, который указывает Django будет искать шаблоны."
