# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2012.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-03-24 01:58\n"
"PO-Revision-Date: 2012-02-15 15:13\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# 279f46a61e7b41b98d8a0a80f476b7cd
#: ../../intro/tutorial02.txt:3
msgid "Writing your first Django app, part 2"
msgstr ""

# ee2059b16d0a4cceb86213baf936f0c4
#: ../../intro/tutorial02.txt:5
msgid ""
"This tutorial begins where :doc:`Tutorial 1 </intro/tutorial01>` left off. "
"We're continuing the Web-poll application and will focus on Django's "
"automatically-generated admin site."
msgstr ""

# 8efae26bb46545f3a0a1e0ba7c1714de
#: ../../intro/tutorial02.txt:11
msgid ""
"Generating admin sites for your staff or clients to add, change and delete "
"content is tedious work that doesn't require much creativity. For that "
"reason, Django entirely automates creation of admin interfaces for models."
msgstr ""

# 338d2e3fd63b4011b073d9e86ca5f478
#: ../../intro/tutorial02.txt:15
msgid ""
"Django was written in a newsroom environment, with a very clear separation "
"between \"content publishers\" and the \"public\" site. Site managers use "
"the system to add news stories, events, sports scores, etc., and that "
"content is displayed on the public site. Django solves the problem of "
"creating a unified interface for site administrators to edit content."
msgstr ""

# 0989045c478d4d5f9cce083c93f73d4b
#: ../../intro/tutorial02.txt:21
msgid ""
"The admin isn't intended to be used by site visitors. It's for site managers."
msgstr ""

# 1369ce2563c64e9c96c9469a7a7a01f3
#: ../../intro/tutorial02.txt:25
msgid "Activate the admin site"
msgstr ""

# 5cf57e0e0e93417db0a8558110031782
#: ../../intro/tutorial02.txt:27
msgid ""
"The Django admin site is not activated by default -- it's an opt-in thing. "
"To activate the admin site for your installation, do these three things:"
msgstr ""

# 2a795479162e455a9f4cc7ef2317a5fe
#: ../../intro/tutorial02.txt:30
msgid ""
"Uncomment ``\"django.contrib.admin\"`` in the :setting:`INSTALLED_APPS` "
"setting."
msgstr ""

# ab63bdfdb8484071825b4e35685b2909
#: ../../intro/tutorial02.txt:32
msgid ""
"Run ``python manage.py syncdb``. Since you have added a new application to :"
"setting:`INSTALLED_APPS`, the database tables need to be updated."
msgstr ""

# bfc1f0798cf140cab1855d03818ce6ec
#: ../../intro/tutorial02.txt:35
msgid ""
"Edit your ``mysite/urls.py`` file and uncomment the lines that reference the "
"admin -- there are three lines in total to uncomment. This file is a "
"URLconf; we'll dig into URLconfs in the next tutorial. For now, all you need "
"to know is that it maps URL roots to applications. In the end, you should "
"have a ``urls.py`` file that looks like this:"
msgstr ""

# 16809f1e779c42f6ab73352cd8abc780
#: ../../intro/tutorial02.txt:61
msgid "(The bold lines are the ones that needed to be uncommented.)"
msgstr ""

# 8002fe91c6f14bf586c7afa2d676b9a2
#: ../../intro/tutorial02.txt:64
msgid "Start the development server"
msgstr ""

# ddbfb4efb6fe42298c6ff98e289afb4e
#: ../../intro/tutorial02.txt:66
msgid "Let's start the development server and explore the admin site."
msgstr ""

# 48348df92a314b7db7eb4c19fabdbf9d
#: ../../intro/tutorial02.txt:68
msgid "Recall from Tutorial 1 that you start the development server like so:"
msgstr ""

# 809c2233a2e04344b3329183e6fa350a
#: ../../intro/tutorial02.txt:74
msgid ""
"Now, open a Web browser and go to \"/admin/\" on your local domain -- e.g., "
"http://127.0.0.1:8000/admin/. You should see the admin's login screen:"
msgstr ""

# 7863b0d61722464f9808c40a98e7e18a
#: ../../intro/tutorial02.txt:82
msgid ""
"If at this point, instead of the above login page, you get an error page "
"reporting something like::"
msgstr ""

# 27cd4e40f9d6483e97863db19f55a820
#: ../../intro/tutorial02.txt:89
msgid ""
"then you're probably using a version of Django that doesn't match this "
"tutorial version. You'll want to either switch to the older tutorial or the "
"newer Django version."
msgstr ""

# 2f91c1b5464d44d0ad4a31cb5e61f586
#: ../../intro/tutorial02.txt:94
msgid "Enter the admin site"
msgstr ""

# 7f94c607c39c4c2ab1a41fbf3f711f43
#: ../../intro/tutorial02.txt:96
msgid ""
"Now, try logging in. (You created a superuser account in the first part of "
"this tutorial, remember?  If you didn't create one or forgot the password "
"you can :ref:`create another one <topics-auth-creating-superusers>`.) You "
"should see the Django admin index page:"
msgstr ""

# 4c7f7818de634195801bccf118033f85
#: ../../intro/tutorial02.txt:104
msgid ""
"You should see a few types of editable content, including groups, users and "
"sites. These are core features Django ships with by default."
msgstr ""

# 31bd7e2f1b8d4ea6bb1bbfd74a7c3705
#: ../../intro/tutorial02.txt:108
msgid "Make the poll app modifiable in the admin"
msgstr ""

# 7170101a17544257b29adcb39f764fe6
#: ../../intro/tutorial02.txt:110
msgid "But where's our poll app? It's not displayed on the admin index page."
msgstr ""

# 5a732d871e864d91a02317088657ffdf
#: ../../intro/tutorial02.txt:112
msgid ""
"Just one thing to do: We need to tell the admin that ``Poll`` objects have "
"an admin interface. To do this, create a file called ``admin.py`` in your "
"``polls`` directory, and edit it to look like this::"
msgstr ""

# 08de2695c0624a8f9689880b94c3dfec
#: ../../intro/tutorial02.txt:121
msgid ""
"You'll need to restart the development server to see your changes. Normally, "
"the server auto-reloads code every time you modify a file, but the action of "
"creating a new file doesn't trigger the auto-reloading logic."
msgstr ""

# 1db75ea0b6744a888fa0c47b243bfd38
#: ../../intro/tutorial02.txt:126
msgid "Explore the free admin functionality"
msgstr ""

# cbc4ff6cbb35489aa8a778d1f5414c79
#: ../../intro/tutorial02.txt:128
msgid ""
"Now that we've registered ``Poll``, Django knows that it should be displayed "
"on the admin index page:"
msgstr ""

# 2e7aa9a9cf6d45e897d61ed00bdadd01
#: ../../intro/tutorial02.txt:134
msgid ""
"Click \"Polls.\" Now you're at the \"change list\" page for polls. This page "
"displays all the polls in the database and lets you choose one to change it. "
"There's the \"What's up?\" poll we created in the first tutorial:"
msgstr ""

# 1237861888334bbaa243a6fdd85c24d1
#: ../../intro/tutorial02.txt:141
msgid "Click the \"What's up?\" poll to edit it:"
msgstr ""

# 0b66c36417aa4878bc7f2f0370189692
#: ../../intro/tutorial02.txt:146
msgid "Things to note here:"
msgstr ""

# ee3f114817964980832c274e87c1794c
#: ../../intro/tutorial02.txt:148
msgid "The form is automatically generated from the Poll model."
msgstr ""

# 77f3a0b29f0a46019a4895e30ce3f162
#: ../../intro/tutorial02.txt:150
msgid ""
"The different model field types (:class:`~django.db.models.DateTimeField`, :"
"class:`~django.db.models.CharField`) correspond to the appropriate HTML "
"input widget. Each type of field knows how to display itself in the Django "
"admin."
msgstr ""

# ab12635e022949448fed52da8934d3d0
#: ../../intro/tutorial02.txt:155
msgid ""
"Each :class:`~django.db.models.DateTimeField` gets free JavaScript "
"shortcuts. Dates get a \"Today\" shortcut and calendar popup, and times get "
"a \"Now\" shortcut and a convenient popup that lists commonly entered times."
msgstr ""

# 5a4190ed5b4c48dcb14e241158719b23
#: ../../intro/tutorial02.txt:159
msgid "The bottom part of the page gives you a couple of options:"
msgstr ""

# a23eacdf08f64f46bedc1cf71c2fb9eb
#: ../../intro/tutorial02.txt:161
msgid ""
"Save -- Saves changes and returns to the change-list page for this type of "
"object."
msgstr ""

# d88f04ac66ad471ea9d361c433c003c8
#: ../../intro/tutorial02.txt:164
msgid ""
"Save and continue editing -- Saves changes and reloads the admin page for "
"this object."
msgstr ""

# b4a26f892b82447da11d5595f0323a72
#: ../../intro/tutorial02.txt:167
msgid ""
"Save and add another -- Saves changes and loads a new, blank form for this "
"type of object."
msgstr ""

# 447c0e08683a4fdabb7a7c218325fe4a
#: ../../intro/tutorial02.txt:170
msgid "Delete -- Displays a delete confirmation page."
msgstr ""

# 1eb3551510194bba894050b509161e2d
#: ../../intro/tutorial02.txt:172
msgid ""
"If the value of \"Date published\" doesn't match the time when you created "
"the poll in Tutorial 1, it probably means you forgot to set the correct "
"value for the :setting:`TIME_ZONE` setting. Change it, reload the page and "
"check that the correct value appears."
msgstr ""

# 7ca3dd6d8d0642bd89afce116e7b6439
#: ../../intro/tutorial02.txt:177
msgid ""
"Change the \"Date published\" by clicking the \"Today\" and \"Now\" "
"shortcuts. Then click \"Save and continue editing.\" Then click \"History\" "
"in the upper right. You'll see a page listing all changes made to this "
"object via the Django admin, with the timestamp and username of the person "
"who made the change:"
msgstr ""

# 80752a202cae40e4871223212bac4808
#: ../../intro/tutorial02.txt:186
msgid "Customize the admin form"
msgstr ""

# e0ece02837fb4fa0ad06061dd1c689ed
#: ../../intro/tutorial02.txt:188
msgid ""
"Take a few minutes to marvel at all the code you didn't have to write. By "
"registering the Poll model with ``admin.site.register(Poll)``, Django was "
"able to construct a default form representation. Often, you'll want to "
"customize how the admin form looks and works. You'll do this by telling "
"Django the options you want when you register the object."
msgstr ""

# 5b96f89a51224899bee68ac28f5b1935
#: ../../intro/tutorial02.txt:194
msgid ""
"Let's see how this works by re-ordering the fields on the edit form. Replace "
"the ``admin.site.register(Poll)`` line with::"
msgstr ""

# bb6affb2248940a8b73192daa18b4d9a
#: ../../intro/tutorial02.txt:202
msgid ""
"You'll follow this pattern -- create a model admin object, then pass it as "
"the second argument to ``admin.site.register()`` -- any time you need to "
"change the admin options for an object."
msgstr ""

# 0e5e8e342bfc4209b749648179533885
#: ../../intro/tutorial02.txt:206
msgid ""
"This particular change above makes the \"Publication date\" come before the "
"\"Question\" field:"
msgstr ""

# b418517b1dd44c5faaae97ec946010d1
#: ../../intro/tutorial02.txt:212
msgid ""
"This isn't impressive with only two fields, but for admin forms with dozens "
"of fields, choosing an intuitive order is an important usability detail."
msgstr ""

# 981db281c0f043e48268c5a8e2fa3137
#: ../../intro/tutorial02.txt:215
msgid ""
"And speaking of forms with dozens of fields, you might want to split the "
"form up into fieldsets::"
msgstr ""

# c6cae3b5c1364cf3ae0503f15b4ef3dc
#: ../../intro/tutorial02.txt:226
msgid ""
"The first element of each tuple in ``fieldsets`` is the title of the "
"fieldset. Here's what our form looks like now:"
msgstr ""

# 76405a45393746698a1c9c84995d62d2
#: ../../intro/tutorial02.txt:232
msgid ""
"You can assign arbitrary HTML classes to each fieldset. Django provides a ``"
"\"collapse\"`` class that displays a particular fieldset initially "
"collapsed. This is useful when you have a long form that contains a number "
"of fields that aren't commonly used::"
msgstr ""

# 54a9ebac1153441a8513d601e4d0543a
#: ../../intro/tutorial02.txt:247
msgid "Adding related objects"
msgstr ""

# 3fd43d45e7704d7eac21d37b5989c548
#: ../../intro/tutorial02.txt:249
msgid ""
"OK, we have our Poll admin page. But a ``Poll`` has multiple ``Choices``, "
"and the admin page doesn't display choices."
msgstr ""

# 2f10a55c8dda45cba443b03bec56a955
#: ../../intro/tutorial02.txt:252
msgid "Yet."
msgstr ""

# d74c025bacdc49c6a3a2f17cab22cfa8
#: ../../intro/tutorial02.txt:254
msgid ""
"There are two ways to solve this problem. The first is to register "
"``Choice`` with the admin just as we did with ``Poll``. That's easy::"
msgstr ""

# b41860db54b145d9b59f6baa3040dcd3
#: ../../intro/tutorial02.txt:261
msgid ""
"Now \"Choices\" is an available option in the Django admin. The \"Add choice"
"\" form looks like this:"
msgstr ""

# 132f040a78464f61bbad333bf3664bad
#: ../../intro/tutorial02.txt:267
msgid ""
"In that form, the \"Poll\" field is a select box containing every poll in "
"the database. Django knows that a :class:`~django.db.models.ForeignKey` "
"should be represented in the admin as a ``<select>`` box. In our case, only "
"one poll exists at this point."
msgstr ""

# d7dee04e8e464d9193d3093348a94076
#: ../../intro/tutorial02.txt:272
msgid ""
"Also note the \"Add Another\" link next to \"Poll.\" Every object with a "
"``ForeignKey`` relationship to another gets this for free. When you click "
"\"Add Another,\" you'll get a popup window with the \"Add poll\" form. If "
"you add a poll in that window and click \"Save,\" Django will save the poll "
"to the database and dynamically add it as the selected choice on the \"Add "
"choice\" form you're looking at."
msgstr ""

# 7a04001c896146cf909daa925f508d1f
#: ../../intro/tutorial02.txt:279
msgid ""
"But, really, this is an inefficient way of adding Choice objects to the "
"system. It'd be better if you could add a bunch of Choices directly when you "
"create the Poll object. Let's make that happen."
msgstr ""

# 5f222f52c64e4686884bbba892353bd3
#: ../../intro/tutorial02.txt:283
msgid ""
"Remove the ``register()`` call for the Choice model. Then, edit the ``Poll`` "
"registration code to read::"
msgstr ""

# d78417ffc83b4ab49711e88415fe8643
#: ../../intro/tutorial02.txt:299
msgid ""
"This tells Django: \"Choice objects are edited on the Poll admin page. By "
"default, provide enough fields for 3 choices.\""
msgstr ""

# 13060f9dd52840f980e2eab933b6ae3a
#: ../../intro/tutorial02.txt:302
msgid ""
"Load the \"Add poll\" page to see how that looks, you may need to restart "
"your development server:"
msgstr ""

# 2b8d1eb40e304d96907d02aebfca6fa1
#: ../../intro/tutorial02.txt:307
msgid ""
"It works like this: There are three slots for related Choices -- as "
"specified by ``extra`` -- and each time you come back to the \"Change\" page "
"for an already-created object, you get another three extra slots."
msgstr ""

# 11a1718511a243df9a9e187a392fa142
#: ../../intro/tutorial02.txt:311
msgid ""
"One small problem, though. It takes a lot of screen space to display all the "
"fields for entering related Choice objects. For that reason, Django offers a "
"tabular way of displaying inline related objects; you just need to change "
"the ``ChoiceInline`` declaration to read::"
msgstr ""

# ff31e79ce1cc4ae98aeac40371e13bd8
#: ../../intro/tutorial02.txt:319
msgid ""
"With that ``TabularInline`` (instead of ``StackedInline``), the related "
"objects are displayed in a more compact, table-based format:"
msgstr ""

# fe0840dfd6974b8398bf9d41d3b07349
#: ../../intro/tutorial02.txt:326
msgid "Customize the admin change list"
msgstr ""

# bbd13b3a8ebc4872ab251693ca4f39cf
#: ../../intro/tutorial02.txt:328
msgid ""
"Now that the Poll admin page is looking good, let's make some tweaks to the "
"\"change list\" page -- the one that displays all the polls in the system."
msgstr ""

# 3cb2967475ca44669088584fd34362bf
#: ../../intro/tutorial02.txt:331
msgid "Here's what it looks like at this point:"
msgstr ""

# c6b6b8d7536f455b9700483586dd7564
#: ../../intro/tutorial02.txt:336
msgid ""
"By default, Django displays the ``str()`` of each object. But sometimes it'd "
"be more helpful if we could display individual fields. To do that, use the "
"``list_display`` admin option, which is a tuple of field names to display, "
"as columns, on the change list page for the object::"
msgstr ""

# 2bc360aa5a864912a986974c7d7aec7e
#: ../../intro/tutorial02.txt:345
msgid ""
"Just for good measure, let's also include the ``was_published_recently`` "
"custom method from Tutorial 1::"
msgstr ""

# cf8a680befd14405a87ea4a829c29300
#: ../../intro/tutorial02.txt:352
msgid "Now the poll change list page looks like this:"
msgstr ""

# 01a04c5ac2c7400281f4b1f0e3daa57d
#: ../../intro/tutorial02.txt:357
msgid ""
"You can click on the column headers to sort by those values -- except in the "
"case of the ``was_published_recently`` header, because sorting by the output "
"of an arbitrary method is not supported. Also note that the column header "
"for ``was_published_recently`` is, by default, the name of the method (with "
"underscores replaced with spaces), and that each line contains the string "
"representation of the output."
msgstr ""

# fed44405ef294b16b5dd0a0b4ac793f6
#: ../../intro/tutorial02.txt:364
msgid ""
"You can improve that by giving that method (in ``models.py``) a few "
"attributes, as follows::"
msgstr ""

# 267b45b9cd084cec80a9cce9f3473d13
#: ../../intro/tutorial02.txt:375
msgid ""
"Edit your admin.py file again and add an improvement to the Poll change list "
"page: Filters. Add the following line to ``PollAdmin``::"
msgstr ""

# b9401dc5188249739f27766ccf180e7d
#: ../../intro/tutorial02.txt:380
msgid ""
"That adds a \"Filter\" sidebar that lets people filter the change list by "
"the ``pub_date`` field:"
msgstr ""

# 8892439b8c734ab6b007f985adc58717
#: ../../intro/tutorial02.txt:386
msgid ""
"The type of filter displayed depends on the type of field you're filtering "
"on. Because ``pub_date`` is a :class:`~django.db.models.fields."
"DateTimeField`, Django knows to give appropriate filter options: \"Any date,"
"\" \"Today,\" \"Past 7 days,\" \"This month,\" \"This year.\""
msgstr ""

# dc585c8402e24679bf5dbfaabe588891
#: ../../intro/tutorial02.txt:391
msgid "This is shaping up well. Let's add some search capability::"
msgstr ""

# 2d8508e7c9654ee7bbe2e1b1714f6051
#: ../../intro/tutorial02.txt:395
msgid ""
"That adds a search box at the top of the change list. When somebody enters "
"search terms, Django will search the ``question`` field. You can use as many "
"fields as you'd like -- although because it uses a ``LIKE`` query behind the "
"scenes, keep it reasonable, to keep your database happy."
msgstr ""

# 9979a325b46a465abd47771ee9e48fff
#: ../../intro/tutorial02.txt:400
msgid ""
"Finally, because Poll objects have dates, it'd be convenient to be able to "
"drill down by date. Add this line::"
msgstr ""

# c7df833c80844f4d8dbaddd659609202
#: ../../intro/tutorial02.txt:405
msgid ""
"That adds hierarchical navigation, by date, to the top of the change list "
"page. At top level, it displays all available years. Then it drills down to "
"months and, ultimately, days."
msgstr ""

# 201153f402024039a5ca6c6243217882
#: ../../intro/tutorial02.txt:409
msgid ""
"Now's also a good time to note that change lists give you free pagination. "
"The default is to display 100 items per page. Change-list pagination, search "
"boxes, filters, date-hierarchies and column-header-ordering all work "
"together like you think they should."
msgstr ""

# 7363520b04114fd390f274dfbbbdebf6
#: ../../intro/tutorial02.txt:415
msgid "Customize the admin look and feel"
msgstr ""

# efb5d17f97174e3aaf97afc8db9e58dd
#: ../../intro/tutorial02.txt:417
msgid ""
"Clearly, having \"Django administration\" at the top of each admin page is "
"ridiculous. It's just placeholder text."
msgstr ""

# 352de987ce924829ae446bf5454405bf
#: ../../intro/tutorial02.txt:420
msgid ""
"That's easy to change, though, using Django's template system. The Django "
"admin is powered by Django itself, and its interfaces use Django's own "
"template system."
msgstr ""

# 1a36d4c948874715b88ef74c180758aa
#: ../../intro/tutorial02.txt:424
msgid ""
"Open your settings file (``mysite/settings.py``, remember) and look at the :"
"setting:`TEMPLATE_DIRS` setting. :setting:`TEMPLATE_DIRS` is a tuple of "
"filesystem directories to check when loading Django templates. It's a search "
"path."
msgstr ""

# e951fc19c0624f6c977d1e2641751ae1
#: ../../intro/tutorial02.txt:429
msgid ""
"By default, :setting:`TEMPLATE_DIRS` is empty. So, let's add a line to it, "
"to tell Django where our templates live::"
msgstr ""

# 4fda0ad17ec74b7d980ecf59a9a4d852
#: ../../intro/tutorial02.txt:436
msgid ""
"Now copy the template ``admin/base_site.html`` from within the default "
"Django admin template directory in the source code of Django itself "
"(``django/contrib/admin/templates``) into an ``admin`` subdirectory of "
"whichever directory you're using in :setting:`TEMPLATE_DIRS`. For example, "
"if your :setting:`TEMPLATE_DIRS` includes ``'/home/my_username/"
"mytemplates'``, as above, then copy ``django/contrib/admin/templates/admin/"
"base_site.html`` to ``/home/my_username/mytemplates/admin/base_site.html``. "
"Don't forget that ``admin`` subdirectory."
msgstr ""

# 0e8ec75d343140ae87a7ea9062450e72
#: ../../intro/tutorial02.txt:445
msgid ""
"Then, just edit the file and replace the generic Django text with your own "
"site's name as you see fit."
msgstr ""

# 5feb2de7940e41a7b83a9cd9f05da5f5
#: ../../intro/tutorial02.txt:448
msgid ""
"This template file contains lots of text like ``{% block branding %}`` and ``"
"{{ title }}``. The ``{%`` and ``{{`` tags are part of Django's template "
"language. When Django renders ``admin/base_site.html``, this template "
"language will be evaluated to produce the final HTML page. Don't worry if "
"you can't make any sense of the template right now -- we'll delve into "
"Django's templating language in Tutorial 3."
msgstr ""

# 72cf7a56b85e4f08a18a8e39a3b50e9a
#: ../../intro/tutorial02.txt:455
msgid ""
"Note that any of Django's default admin templates can be overridden. To "
"override a template, just do the same thing you did with ``base_site.html`` "
"-- copy it from the default directory into your custom directory, and make "
"changes."
msgstr ""

# 5af4c4f427c140218405e8069e51c558
#: ../../intro/tutorial02.txt:460
msgid ""
"Astute readers will ask: But if :setting:`TEMPLATE_DIRS` was empty by "
"default, how was Django finding the default admin templates? The answer is "
"that, by default, Django automatically looks for a ``templates/`` "
"subdirectory within each app package, for use as a fallback. See the :ref:"
"`template loader documentation <template-loaders>` for full information."
msgstr ""

# e56cb4a95bf840b6b695449ea3588fcb
#: ../../intro/tutorial02.txt:467
msgid "Customize the admin index page"
msgstr ""

# 2bc787d295f0415a905b8a543d175fe5
#: ../../intro/tutorial02.txt:469
msgid ""
"On a similar note, you might want to customize the look and feel of the "
"Django admin index page."
msgstr ""

# 0ea5203c05ce4ed69c16e6a5baba7a80
#: ../../intro/tutorial02.txt:472
msgid ""
"By default, it displays all the apps in :setting:`INSTALLED_APPS` that have "
"been registered with the admin application, in alphabetical order. You may "
"want to make significant changes to the layout. After all, the index is "
"probably the most important page of the admin, and it should be easy to use."
msgstr ""

# b2ccca41b28648b7a5d1d21e465a33ab
#: ../../intro/tutorial02.txt:477
msgid ""
"The template to customize is ``admin/index.html``. (Do the same as with "
"``admin/base_site.html`` in the previous section -- copy it from the default "
"directory to your custom template directory.) Edit the file, and you'll see "
"it uses a template variable called ``app_list``. That variable contains "
"every installed Django app. Instead of using that, you can hard-code links "
"to object-specific admin pages in whatever way you think is best. Again, "
"don't worry if you can't understand the template language -- we'll cover "
"that in more detail in Tutorial 3."
msgstr ""

# 0aadffb0c497461987ef2b8789d9e918
#: ../../intro/tutorial02.txt:486
msgid ""
"When you're comfortable with the admin site, read :doc:`part 3 of this "
"tutorial </intro/tutorial03>` to start working on public poll views."
msgstr ""
