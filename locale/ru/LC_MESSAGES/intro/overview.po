# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2012.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-02-29 18:30\n"
"PO-Revision-Date: 2012-02-15 15:13\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# 50f1fa97b3744908a733ce33f3c5ec81
#: ../../intro/overview.txt:3
msgid "Django at a glance"
msgstr ""

# 33dda732ee094e9bb75e96977f7aac86
#: ../../intro/overview.txt:5
msgid ""
"Because Django was developed in a fast-paced newsroom environment, it was "
"designed to make common Web-development tasks fast and easy. Here's an "
"informal overview of how to write a database-driven Web app with Django."
msgstr ""

# 0c511f1be7d94fb996fde8716beeb017
#: ../../intro/overview.txt:9
msgid ""
"The goal of this document is to give you enough technical specifics to "
"understand how Django works, but this isn't intended to be a tutorial or "
"reference -- but we've got both! When you're ready to start a project, you "
"can :doc:`start with the tutorial </intro/tutorial01>` or :doc:`dive right "
"into more detailed documentation </topics/index>`."
msgstr ""

# 6a548e64d4e345c096913e90258490c4
#: ../../intro/overview.txt:16
msgid "Design your model"
msgstr ""

# b4966d54e58b42a095a6596436d2bcf0
#: ../../intro/overview.txt:18
msgid ""
"Although you can use Django without a database, it comes with an object-"
"relational mapper in which you describe your database layout in Python code."
msgstr ""

# 7471e17b193e4c78b12fda8e57668ebe
#: ../../intro/overview.txt:22
msgid ""
"The :doc:`data-model syntax </topics/db/models>` offers many rich ways of "
"representing your models -- so far, it's been solving two years' worth of "
"database-schema problems. Here's a quick example, which might be saved in "
"the file ``mysite/news/models.py``::"
msgstr ""

# ab5d490c954f446e9bcda1471279d626
#: ../../intro/overview.txt:43
msgid "Install it"
msgstr ""

# 61c4effdb2e64b2db43a19ab4657c71b
#: ../../intro/overview.txt:45
msgid ""
"Next, run the Django command-line utility to create the database tables "
"automatically:"
msgstr ""

# 627160d211884f3b84eb115402defa93
#: ../../intro/overview.txt:52
msgid ""
"The :djadmin:`syncdb` command looks at all your available models and creates "
"tables in your database for whichever tables don't already exist."
msgstr ""

# 69d8419199a54bdc8f9c3be7ebcc1035
#: ../../intro/overview.txt:56
msgid "Enjoy the free API"
msgstr ""

# beda5e8518824522b00b8fd83e58564b
#: ../../intro/overview.txt:58
msgid ""
"With that, you've got a free, and rich, :doc:`Python API </topics/db/"
"queries>` to access your data. The API is created on the fly, no code "
"generation necessary::"
msgstr ""

# 5ce5df4273a74ec1aa65a0a5690b0da4
#: ../../intro/overview.txt:131
msgid ""
"A dynamic admin interface: it's not just scaffolding -- it's the whole house"
msgstr ""

# b81cb091c8c648bd90da54edd7912509
#: ../../intro/overview.txt:133
msgid ""
"Once your models are defined, Django can automatically create a "
"professional, production ready :doc:`administrative interface </ref/contrib/"
"admin/index>` -- a Web site that lets authenticated users add, change and "
"delete objects. It's as easy as registering your model in the admin site::"
msgstr ""

# a9be886fad5b40348e7c5eb020322ba6
#: ../../intro/overview.txt:156
msgid ""
"The philosophy here is that your site is edited by a staff, or a client, or "
"maybe just you -- and you don't want to have to deal with creating backend "
"interfaces just to manage content."
msgstr ""

# 381d45386e3f4972aab543ce17de7231
#: ../../intro/overview.txt:160
msgid ""
"One typical workflow in creating Django apps is to create models and get the "
"admin sites up and running as fast as possible, so your staff (or clients) "
"can start populating data. Then, develop the way data is presented to the "
"public."
msgstr ""

# 0bce14d76fc94be2a2aee4587571c83d
#: ../../intro/overview.txt:165
msgid "Design your URLs"
msgstr ""

# 58e63b9d1b564f58a25484295c0c02cf
#: ../../intro/overview.txt:167
msgid ""
"A clean, elegant URL scheme is an important detail in a high-quality Web "
"application. Django encourages beautiful URL design and doesn't put any "
"cruft in URLs, like ``.php`` or ``.asp``."
msgstr ""

# 98f1453d402146778f9b307dd6780a8d
#: ../../intro/overview.txt:171
msgid ""
"To design URLs for an app, you create a Python module called a :doc:`URLconf "
"</topics/http/urls>`. A table of contents for your app, it contains a simple "
"mapping between URL patterns and Python callback functions. URLconfs also "
"serve to decouple URLs from Python code."
msgstr ""

# fa7e1f443c714658946bfb660567d5a4
#: ../../intro/overview.txt:176
msgid ""
"Here's what a URLconf might look like for the ``Reporter``/``Article`` "
"example above::"
msgstr ""

# 4132c4a8a76b4c45a10860c08a7e1273
#: ../../intro/overview.txt:187
msgid ""
"The code above maps URLs, as simple regular expressions, to the location of "
"Python callback functions (\"views\"). The regular expressions use "
"parenthesis to \"capture\" values from the URLs. When a user requests a "
"page, Django runs through each pattern, in order, and stops at the first one "
"that matches the requested URL. (If none of them matches, Django calls a "
"special-case 404 view.) This is blazingly fast, because the regular "
"expressions are compiled at load time."
msgstr ""

# 37b8ee56d0934384a2b47fe3ee6e8747
#: ../../intro/overview.txt:195
msgid ""
"Once one of the regexes matches, Django imports and calls the given view, "
"which is a simple Python function. Each view gets passed a request object -- "
"which contains request metadata -- and the values captured in the regex."
msgstr ""

# d98c6574cbe8453e94e4a3a615e42740
#: ../../intro/overview.txt:199
msgid ""
"For example, if a user requested the URL \"/articles/2005/05/39323/\", "
"Django would call the function ``news.views.article_detail(request, '2005', "
"'05', '39323')``."
msgstr ""

# e9feeb4f63104cae93e74d64eb9fc657
#: ../../intro/overview.txt:204
msgid "Write your views"
msgstr ""

# 61cd63ce954b45dd9455ceea3dac89a6
#: ../../intro/overview.txt:206
msgid ""
"Each view is responsible for doing one of two things: Returning an :class:"
"`~django.http.HttpResponse` object containing the content for the requested "
"page, or raising an exception such as :class:`~django.http.Http404`. The "
"rest is up to you."
msgstr ""

# 79a89f4c14ed41fb9cc9799b6ed3e3d4
#: ../../intro/overview.txt:211
msgid ""
"Generally, a view retrieves data according to the parameters, loads a "
"template and renders the template with the retrieved data. Here's an example "
"view for ``year_archive`` from above::"
msgstr ""

# 236a9d534316495db9333c080ec1c3ca
#: ../../intro/overview.txt:219
msgid ""
"This example uses Django's :doc:`template system </topics/templates>`, which "
"has several powerful features but strives to stay simple enough for non-"
"programmers to use."
msgstr ""

# 8b85f39da2084a519cd2b0c1255a0a9f
#: ../../intro/overview.txt:224
msgid "Design your templates"
msgstr ""

# 2b090855e9d747aaa7f39e174138b750
#: ../../intro/overview.txt:226
msgid "The code above loads the ``news/year_archive.html`` template."
msgstr ""

# faded2d198184380954a870f88b8d329
#: ../../intro/overview.txt:228
msgid ""
"Django has a template search path, which allows you to minimize redundancy "
"among templates. In your Django settings, you specify a list of directories "
"to check for templates. If a template doesn't exist in the first directory, "
"it checks the second, and so on."
msgstr ""

# 2e7b447b28af42508df6ff579a76bb2a
#: ../../intro/overview.txt:233
msgid ""
"Let's say the ``news/year_archive.html`` template was found. Here's what "
"that might look like:"
msgstr ""

# 0a30b5963c51424a897afd4abcd3e693
#: ../../intro/overview.txt:252
msgid ""
"Variables are surrounded by double-curly braces. ``{{ article.headline }}`` "
"means \"Output the value of the article's headline attribute.\" But dots "
"aren't used only for attribute lookup: They also can do dictionary-key "
"lookup, index lookup and function calls."
msgstr ""

# c8c465d8ddbd4affbdadfc3baeeb7d25
#: ../../intro/overview.txt:257
msgid ""
"Note ``{{ article.pub_date|date:\"F j, Y\" }}`` uses a Unix-style \"pipe"
"\" (the \"|\" character). This is called a template filter, and it's a way "
"to filter the value of a variable. In this case, the date filter formats a "
"Python datetime object in the given format (as found in PHP's date function; "
"yes, there is one good idea in PHP)."
msgstr ""

# 7da213dd0d42444cab66cfec7cec56de
#: ../../intro/overview.txt:263
msgid ""
"You can chain together as many filters as you'd like. You can write custom "
"filters. You can write custom template tags, which run custom Python code "
"behind the scenes."
msgstr ""

# 474a565b28e3406a800a635e4af7542a
#: ../../intro/overview.txt:267
msgid ""
"Finally, Django uses the concept of \"template inheritance\": That's what "
"the ``{% extends \"base.html\" %}`` does. It means \"First load the template "
"called 'base', which has defined a bunch of blocks, and fill the blocks with "
"the following blocks.\" In short, that lets you dramatically cut down on "
"redundancy in templates: each template has to define only what's unique to "
"that template."
msgstr ""

# 54d9b3d248254f9b8a37ba251b13a794
#: ../../intro/overview.txt:273
msgid "Here's what the \"base.html\" template might look like:"
msgstr ""

# 322150eb0b01464885757f53853c0325
#: ../../intro/overview.txt:287
msgid ""
"Simplistically, it defines the look-and-feel of the site (with the site's "
"logo), and provides \"holes\" for child templates to fill. This makes a site "
"redesign as easy as changing a single file -- the base template."
msgstr ""

# 72b1a75f0eb54f94a2745c4690c3567c
#: ../../intro/overview.txt:291
msgid ""
"It also lets you create multiple versions of a site, with different base "
"templates, while reusing child templates. Django's creators have used this "
"technique to create strikingly different cell-phone editions of sites -- "
"simply by creating a new base template."
msgstr ""

# 62582a45cf594a69968bcdd260768d62
#: ../../intro/overview.txt:296
msgid ""
"Note that you don't have to use Django's template system if you prefer "
"another system. While Django's template system is particularly well-"
"integrated with Django's model layer, nothing forces you to use it. For that "
"matter, you don't have to use Django's database API, either. You can use "
"another database abstraction layer, you can read XML files, you can read "
"files off disk, or anything you want. Each piece of Django -- models, views, "
"templates -- is decoupled from the next."
msgstr ""

# 5eba2d1475f3456381031482e16cf15d
#: ../../intro/overview.txt:305
msgid "This is just the surface"
msgstr ""

# 60936167281f4005b616968805dbcf5e
#: ../../intro/overview.txt:307
msgid ""
"This has been only a quick overview of Django's functionality. Some more "
"useful features:"
msgstr ""

# 343601aef1954fa3991bc09c0331fec1
#: ../../intro/overview.txt:310
msgid ""
"A :doc:`caching framework </topics/cache>` that integrates with memcached or "
"other backends."
msgstr ""

# 26063e5a47404a35a489e60d54ef18e7
#: ../../intro/overview.txt:313
msgid ""
"A :doc:`syndication framework </ref/contrib/syndication>` that makes "
"creating RSS and Atom feeds as easy as writing a small Python class."
msgstr ""

# dc0994f4669a4e078ebf44f34a82ddec
#: ../../intro/overview.txt:316
msgid ""
"More sexy automatically-generated admin features -- this overview barely "
"scratched the surface."
msgstr ""

# a718f2c75f7a429b8cae699faf88d2f3
#: ../../intro/overview.txt:319
msgid ""
"The next obvious steps are for you to `download Django`_, read :doc:`the "
"tutorial </intro/tutorial01>` and join `the community`_. Thanks for your "
"interest!"
msgstr ""
