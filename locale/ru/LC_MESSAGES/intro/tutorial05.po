# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2013.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-02-27 00:21\n"
"PO-Revision-Date: 2013-02-27 00:21\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# 1e7c953ce96043b1a25f51d4369d5eb0
#: ../../intro/tutorial05.txt:3
msgid "Writing your first Django app, part 5"
msgstr ""

# 90e143e1e6ab48898b408bf863a23cd2
#: ../../intro/tutorial05.txt:5
msgid ""
"This tutorial begins where :doc:`Tutorial 4 </intro/tutorial04>` left off. "
"We've built a Web-poll application, and we'll now create some automated "
"tests for it."
msgstr ""

# 31afc3f5de36435a8579055149e39f8b
#: ../../intro/tutorial05.txt:10
msgid "Introducing automated testing"
msgstr ""

# bebfff6a76d5486b9b64975c16ff41ba
#: ../../intro/tutorial05.txt:13
msgid "What are automated tests?"
msgstr ""

# 46f3ee59dfed4b819335dfe9ad02b0ce
#: ../../intro/tutorial05.txt:15
msgid "Tests are simple routines that check the operation of your code."
msgstr ""

# 8b2d508e51b4425ebc472ab27f58f3e6
#: ../../intro/tutorial05.txt:17
msgid ""
"Testing operates at different levels. Some tests might apply to a tiny "
"detail - *does a particular model method return values as expected?*, while "
"others examine the overall operation of the software - *does a sequence of "
"user inputs on the site produce the desired result?* That's no different "
"from the kind of testing you did earlier in :doc:`Tutorial 1 </intro/"
"tutorial01>`, using the shell to examine the behavior of a method, or "
"running the application and entering data to check how it behaves."
msgstr ""

# e512139f251c4057b966cf407b064764
#: ../../intro/tutorial05.txt:25
msgid ""
"What's different in *automated* tests is that the testing work is done for "
"you by the system. You create a set of tests once, and then as you make "
"changes to your app, you can check that your code still works as you "
"originally intended, without having to perform time consuming manual testing."
msgstr ""

# 560b790ef2e840d9b489e4bd75d2ca4a
#: ../../intro/tutorial05.txt:31
msgid "Why you need to create tests"
msgstr ""

# 344863f48eba4fe3ad7a98f911f60b8f
#: ../../intro/tutorial05.txt:33
msgid "So why create tests, and why now?"
msgstr ""

# 1e15eae9d45d4d188b0cee9ef9af0d70
#: ../../intro/tutorial05.txt:35
msgid ""
"You may feel that you have quite enough on your plate just learning Python/"
"Django, and having yet another thing to learn and do may seem overwhelming "
"and perhaps unnecessary. After all, our polls application is working quite "
"happily now; going through the trouble of creating automated tests is not "
"going to make it work any better. If creating the polls application is the "
"last bit of Django programming you will ever do, then true, you don't need "
"to know how to create automated tests. But, if that's not the case, now is "
"an excellent time to learn."
msgstr ""

# 7cd43681bc7d41cb95c2f3eeca30130f
#: ../../intro/tutorial05.txt:45
msgid "Tests will save you time"
msgstr ""

# 80f927048e664c1995e3157494df9957
#: ../../intro/tutorial05.txt:47
msgid ""
"Up to a certain point, 'checking that it seems to work' will be a "
"satisfactory test. In a more sophisticated application, you might have "
"dozens of complex interactions between components."
msgstr ""

# 87bd83053d2748e6bf0d75d3bb55ce92
#: ../../intro/tutorial05.txt:51
msgid ""
"A change in any of those components could have unexpected consequences on "
"the application's behavior. Checking that it still 'seems to work' could "
"mean running through your code's functionality with twenty different "
"variations of your test data just to make sure you haven't broken something "
"- not a good use of your time."
msgstr ""

# 14db96f708654177a9972dcb3df34840
#: ../../intro/tutorial05.txt:57
msgid ""
"That's especially true when automated tests could do this for you in "
"seconds. If something's gone wrong, tests will also assist in identifying "
"the code that's causing the unexpected behavior."
msgstr ""

# f3b4beac2f344c6e833bb9bccb585209
#: ../../intro/tutorial05.txt:61
msgid ""
"Sometimes it may seem a chore to tear yourself away from your productive, "
"creative programming work to face the unglamorous and unexciting business of "
"writing tests, particularly when you know your code is working properly."
msgstr ""

# e4622af65baf4a50bc3781af01441683
#: ../../intro/tutorial05.txt:65
msgid ""
"However, the task of writing tests is a lot more fulfilling than spending "
"hours testing your application manually or trying to identify the cause of a "
"newly-introduced problem."
msgstr ""

# 8f2d7cc13fde4237abfe62157abb442e
#: ../../intro/tutorial05.txt:70
msgid "Tests don't just identify problems, they prevent them"
msgstr ""

# 2b1b3745d6cf489d9e293a1b8ce988fc
#: ../../intro/tutorial05.txt:72
msgid ""
"It's a mistake to think of tests merely as a negative aspect of development."
msgstr ""

# 588e18b254bb434caca517c45ddb7851
#: ../../intro/tutorial05.txt:74
msgid ""
"Without tests, the purpose or intended behavior of an application might be "
"rather opaque. Even when it's your own code, you will sometimes find "
"yourself poking around in it trying to find out what exactly it's doing."
msgstr ""

# 8e365599872846519060ce21c33c7631
#: ../../intro/tutorial05.txt:78
msgid ""
"Tests change that; they light up your code from the inside, and when "
"something goes wrong, they focus light on the part that has gone wrong - "
"*even if you hadn't even realized it had gone wrong*."
msgstr ""

# 51a7967bb7ec486da03e98d843ecf185
#: ../../intro/tutorial05.txt:83
msgid "Tests make your code more attractive"
msgstr ""

# dbd9ac7091c04be6a6bfe5c530f1c252
#: ../../intro/tutorial05.txt:85
msgid ""
"You might have created a brilliant piece of software, but you will find that "
"many other developers will simply refuse to look at it because it lacks "
"tests; without tests, they won't trust it. Jacob Kaplan-Moss, one of "
"Django's original developers, says \"Code without tests is broken by design."
"\""
msgstr ""

# 458a0551fb214aca9b66d97d112b957b
#: ../../intro/tutorial05.txt:90
msgid ""
"That other developers want to see tests in your software before they take it "
"seriously is yet another reason for you to start writing tests."
msgstr ""

# ca50389812fa424e990ba6ef9f2db1f0
#: ../../intro/tutorial05.txt:94
msgid "Tests help teams work together"
msgstr ""

# e9bcd5201b464acd978e2eccdacce4d4
#: ../../intro/tutorial05.txt:96
msgid ""
"The previous points are written from the point of view of a single developer "
"maintaining an application. Complex applications will be maintained by "
"teams. Tests guarantee that colleagues don't inadvertently break your code "
"(and that you don't break theirs without knowing). If you want to make a "
"living as a Django programmer, you must be good at writing tests!"
msgstr ""

# d86bd06e068e469abcf51eb08739c94f
#: ../../intro/tutorial05.txt:103
msgid "Basic testing strategies"
msgstr ""

# 8ee5898538a3494dacd7d38af15ce20a
#: ../../intro/tutorial05.txt:105
msgid "There are many ways to approach writing tests."
msgstr ""

# 3f63916fdac646b4b48f80bc9dc478e4
#: ../../intro/tutorial05.txt:107
msgid ""
"Some programmers follow a discipline called \"`test-driven development`_\"; "
"they actually write their tests before they write their code. This might "
"seem counter-intuitive, but in fact it's similar to what most people will "
"often do anyway: they describe a problem, then create some code to solve it. "
"Test-driven development simply formalizes the problem in a Python test case."
msgstr ""

# cad26205101946dbbf01b2a704899671
#: ../../intro/tutorial05.txt:113
msgid ""
"More often, a newcomer to testing will create some code and later decide "
"that it should have some tests. Perhaps it would have been better to write "
"some tests earlier, but it's never too late to get started."
msgstr ""

# 0a047a15b0914d718775004717517e5a
#: ../../intro/tutorial05.txt:117
msgid ""
"Sometimes it's difficult to figure out where to get started with writing "
"tests. If you have written several thousand lines of Python, choosing "
"something to test might not be easy. In such a case, it's fruitful to write "
"your first test the next time you make a change, either when you add a new "
"feature or fix a bug."
msgstr ""

# a25e5f0bfa6641d7bf31342b5922c603
#: ../../intro/tutorial05.txt:122
msgid "So let's do that right away."
msgstr ""

# f58dcbb672084cb4ab1e0e437785eb44
#: ../../intro/tutorial05.txt:127
msgid "Writing our first test"
msgstr ""

# c0134a2e7d064e4a8b1174232c6a3038
#: ../../intro/tutorial05.txt:130
msgid "We identify a bug"
msgstr ""

# 82037312102540bd90fac94cae82eded
#: ../../intro/tutorial05.txt:132
msgid ""
"Fortunately, there's a little bug in the ``polls`` application for us to fix "
"right away: the ``Poll.was_published_recently()`` method returns ``True`` if "
"the ``Poll`` was published within the last day (which is correct) but also "
"if the ``Poll``'s ``pub_date`` field is in the future (which certainly "
"isn't)."
msgstr ""

# a3532280b09a40e8835e58b0c75f981e
#: ../../intro/tutorial05.txt:137
msgid ""
"You can see this in the Admin; create a poll whose date lies in the future; "
"you'll see that the ``Poll`` change list claims it was published recently."
msgstr ""

# 33d03950d4a8472e8d3c5ea12189a604
#: ../../intro/tutorial05.txt:140
msgid "You can also see this using the shell::"
msgstr ""

# 19ec86f5cd014e1b9b10388f0dd2767c
#: ../../intro/tutorial05.txt:151
msgid "Since things in the future are not 'recent', this is clearly wrong."
msgstr ""

# 6c77887e759b49898444fdede4e42ddd
#: ../../intro/tutorial05.txt:154
msgid "Create a test to expose the bug"
msgstr ""

# 41066e7c853845f8a38d2be626babf70
#: ../../intro/tutorial05.txt:156
msgid ""
"What we've just done in the shell to test for the problem is exactly what we "
"can do in an automated test, so let's turn that into an automated test."
msgstr ""

# 95f0168c000640e384c3fc85a9a99f99
#: ../../intro/tutorial05.txt:159
msgid ""
"The best place for an application's tests is in the application's ``tests."
"py`` file - the testing system will look there for tests automatically."
msgstr ""

# b8427031517246a7bfefa81b02b1adcb
#: ../../intro/tutorial05.txt:162
msgid ""
"Put the following in the ``tests.py`` file in the ``polls`` application::"
msgstr ""

# d678c986a2c74f83a8cb43b08ed44d2a
#: ../../intro/tutorial05.txt:181
msgid ""
"What we have done here is created a :class:`django.test.TestCase` subclass "
"with a method that creates a ``Poll`` instance with a ``pub_date`` in the "
"future. We then check the output of ``was_published_recently()`` - which "
"*ought* to be False."
msgstr ""

# df857079e1644057af655727bbee86a9
#: ../../intro/tutorial05.txt:187
msgid "Running tests"
msgstr ""

# 0f63fbb90ac44264838ce4caaacf1b80
#: ../../intro/tutorial05.txt:189
msgid "In the terminal, we can run our test::"
msgstr ""

# 9b5b956249c847098a1e6d65329537f8
#: ../../intro/tutorial05.txt:193
msgid "and you'll see something like::"
msgstr ""

# 826a4084791a4ae0b21b01eff86d4725
#: ../../intro/tutorial05.txt:211
msgid "What happened is this:"
msgstr ""

# 63485cd3e9d04d69b3695262ee06499e
#: ../../intro/tutorial05.txt:213
msgid ""
"``python manage.py test polls`` looked for tests in the ``polls`` application"
msgstr ""

# d40725de5aed4f4f8058cc2c23920ac0
#: ../../intro/tutorial05.txt:215
msgid "it found a subclass of the :class:`django.test.TestCase` class"
msgstr ""

# 32a41d269092490eba5c53f5a2e72b6d
#: ../../intro/tutorial05.txt:217
msgid "it created a special database for the purpose of testing"
msgstr ""

# 4d71037978b7483a8378580751aa9191
#: ../../intro/tutorial05.txt:219
msgid "it looked for test methods - ones whose names begin with ``test``"
msgstr ""

# 869078f72a6a4dd0b7ad3079d825dd36
#: ../../intro/tutorial05.txt:221
msgid ""
"in ``test_was_published_recently_with_future_poll`` it created a ``Poll`` "
"instance whose ``pub_date`` field is 30 days in the future"
msgstr ""

# 8fe56deb03d74e7088c08d4f20a3bfdd
#: ../../intro/tutorial05.txt:224
msgid ""
"... and using the ``assertEqual()`` method, it discovered that its "
"``was_published_recently()`` returns ``True``, though we wanted it to return "
"``False``"
msgstr ""

# 7eebbcc087e44e9d9a44c52ccfe52d22
#: ../../intro/tutorial05.txt:228
msgid ""
"The test informs us which test failed and even the line on which the failure "
"occurred."
msgstr ""

# deed5bc5bb3d497a8bb15aebbbb0e693
#: ../../intro/tutorial05.txt:232
msgid "Fixing the bug"
msgstr ""

# 1d20ffc0233649d9a5fa208bb35e31f0
#: ../../intro/tutorial05.txt:234
msgid ""
"We already know what the problem is: ``Poll.was_published_recently()`` "
"should return ``False`` if its ``pub_date`` is in the future. Amend the "
"method in ``models.py``, so that it will only return ``True`` if the date is "
"also in the past::"
msgstr ""

# 7295723df831487bac03d42abab43081
#: ../../intro/tutorial05.txt:243
msgid "and run the test again::"
msgstr ""

# 809f5de828394e6cb11a5793553390b4
#: ../../intro/tutorial05.txt:253
msgid ""
"After identifying a bug, we wrote a test that exposes it and corrected the "
"bug in the code so our test passes."
msgstr ""

# da3d7125da104ae4bd0e7968edc8358d
#: ../../intro/tutorial05.txt:256
msgid ""
"Many other things might go wrong with our application in the future, but we "
"can be sure that we won't inadvertently reintroduce this bug, because simply "
"running the test will warn us immediately. We can consider this little "
"portion of the application pinned down safely forever."
msgstr ""

# 2ed180abd3e248eabf6afdf2dc2978c1
#: ../../intro/tutorial05.txt:262
msgid "More comprehensive tests"
msgstr ""

# 67c36072116349d79f4c8c82e2b879a0
#: ../../intro/tutorial05.txt:264
msgid ""
"While we're here, we can further pin down the ``was_published_recently()`` "
"method; in fact, it would be positively embarrassing if in fixing one bug we "
"had introduced another."
msgstr ""

# ca2298f42e9348edb009f1afcb9b9f92
#: ../../intro/tutorial05.txt:268
msgid ""
"Add two more test methods to the same class, to test the behavior of the "
"method more comprehensively::"
msgstr ""

# 8061eaa0bfc04e99aa4aadbabecf8a13
#: ../../intro/tutorial05.txt:287
msgid ""
"And now we have three tests that confirm that ``Poll.was_published_recently()"
"`` returns sensible values for past, recent, and future polls."
msgstr ""

# 544a76945a454d9b96a90b93f405c0ce
#: ../../intro/tutorial05.txt:290
msgid ""
"Again, ``polls`` is a simple application, but however complex it grows in "
"the future and whatever other code it interacts with, we now have some "
"guarantee that the method we have written tests for will behave in expected "
"ways."
msgstr ""

# 89247992209341f38f992c7f9d5fc3f1
#: ../../intro/tutorial05.txt:295
msgid "Test a view"
msgstr ""

# 8c7d512fd7cf43439e68f79077acc42d
#: ../../intro/tutorial05.txt:297
msgid ""
"The polls application is fairly undiscriminating: it will publish any poll, "
"including ones whose ``pub_date`` field lies in the future. We should "
"improve this. Setting a ``pub_date`` in the future should mean that the Poll "
"is published at that moment, but invisible until then."
msgstr ""

# 7a9cc9bdbf7740aeaac785b5587ddc5c
#: ../../intro/tutorial05.txt:303
msgid "A test for a view"
msgstr ""

# 81950d48161e4ff3a86220b02f0729da
#: ../../intro/tutorial05.txt:305
msgid ""
"When we fixed the bug above, we wrote the test first and then the code to "
"fix it. In fact that was a simple example of test-driven development, but it "
"doesn't really matter in which order we do the work."
msgstr ""

# f43e225fde3f47788d973ec4bda15cb2
#: ../../intro/tutorial05.txt:309
msgid ""
"In our first test, we focused closely on the internal behavior of the code. "
"For this test, we want to check its behavior as it would be experienced by a "
"user through a web browser."
msgstr ""

# 24ca89ab83f54f06a020ea691c7a258a
#: ../../intro/tutorial05.txt:313
msgid ""
"Before we try to fix anything, let's have a look at the tools at our "
"disposal."
msgstr ""

# 3da6eae46b30472cab98b8fd23694922
#: ../../intro/tutorial05.txt:316
msgid "The Django test client"
msgstr ""

# c48764ed43894c069aa7d0810058e6f2
#: ../../intro/tutorial05.txt:318
msgid ""
"Django provides a test :class:`~django.test.client.Client` to simulate a "
"user interacting with the code at the view level.  We can use it in ``tests."
"py`` or even in the shell."
msgstr ""

# 7bb1c5e203604f598a9c87d57a941130
#: ../../intro/tutorial05.txt:322
msgid ""
"We will start again with the shell, where we need to do a couple of things "
"that won't be necessary in ``tests.py``. The first is to set up the test "
"environment in the shell::"
msgstr ""

# 879895e5043b4cd9ac743fc07f1a2673
#: ../../intro/tutorial05.txt:329
msgid ""
"Next we need to import the test client class (later in ``tests.py`` we will "
"use the :class:`django.test.TestCase` class, which comes with its own "
"client, so this won't be required)::"
msgstr ""

# bdd2dd9426ae4b7fa88d7ee7f4110a84
#: ../../intro/tutorial05.txt:337
msgid "With that ready, we can ask the client to do some work for us::"
msgstr ""

# 25b3bdc3ece745358a65cc5d26d74068
#: ../../intro/tutorial05.txt:368
msgid "Improving our view"
msgstr ""

# 7b287475856347b5aa4c70cf2fc0cec8
#: ../../intro/tutorial05.txt:370
msgid ""
"The list of polls shows polls that aren't published yet (i.e. those that "
"have a ``pub_date`` in the future). Let's fix that."
msgstr ""

# 967b14e1d44b4d4798de46712d2b361f
#: ../../intro/tutorial05.txt:373
msgid ""
"In :doc:`Tutorial 4 </intro/tutorial04>` we deleted the view functions from "
"``views.py`` in favor of a :class:`~django.views.generic.list.ListView` in "
"``urls.py``::"
msgstr ""

# 56d8e4f1391f487fa74449f9ef19b64f
#: ../../intro/tutorial05.txt:384
msgid ""
"``response.context_data['latest_poll_list']`` extracts the data this view "
"places into the context."
msgstr ""

# 057f5dc74f954d9081454ddc4a2e6acd
#: ../../intro/tutorial05.txt:387
msgid "We need to amend the line that gives us the ``queryset``::"
msgstr ""

# 2bbd1cbff86842fcb015389d731f21f4
#: ../../intro/tutorial05.txt:391
msgid ""
"Let's change the queryset so that it also checks the date by comparing it "
"with ``timezone.now()``. First we need to add an import::"
msgstr ""

# dd97c23e0f76404493e60033eb258b8b
#: ../../intro/tutorial05.txt:396
msgid "and then we must amend the existing ``url`` function to::"
msgstr ""

# 1142cbf680974b8bb15f6eaa1f57d9d2
#: ../../intro/tutorial05.txt:406
msgid ""
"``Poll.objects.filter(pub_date__lte=timezone.now)`` returns a queryset "
"containing Polls whose ``pub_date`` is less than or equal to - that is, "
"earlier than or equal to - ``timezone.now``. Notice that we use a callable "
"queryset argument, ``timezone.now``, which will be evaluated at request "
"time. If we had included the parentheses, ``timezone.now()`` would be "
"evaluated just once when the web server is started."
msgstr ""

# b51fa38bf4334b53bf6d05cd61c69029
#: ../../intro/tutorial05.txt:414
msgid "Testing our new view"
msgstr ""

# fe0ccb3de584451eb0c2316b469f4fc6
#: ../../intro/tutorial05.txt:416
msgid ""
"Now you can satisfy yourself that this behaves as expected by firing up the "
"runserver, loading the site in your browser, creating ``Polls`` with dates "
"in the past and future, and checking that only those that have been "
"published are listed.  You don't want to have to do that *every single time "
"you make any change that might affect this* - so let's also create a test, "
"based on our shell session above."
msgstr ""

# 163dd99b91a544fd9c113aa596335b0c
#: ../../intro/tutorial05.txt:423
msgid "Add the following to ``polls/tests.py``::"
msgstr ""

# 07102ca8a2b6465bbe20f06fd7fc0092
#: ../../intro/tutorial05.txt:427
msgid ""
"and we'll create a factory method to create polls as well as a new test "
"class::"
msgstr ""

# c391e30da3df42bfb32dbcc5c19e13b8
#: ../../intro/tutorial05.txt:494
msgid "Let's look at some of these more closely."
msgstr ""

# c1eee558a3424d50af1737378e5c76ad
#: ../../intro/tutorial05.txt:496
msgid ""
"First is a poll factory method, ``create_poll``, to take some repetition out "
"of the process of creating polls."
msgstr ""

# af00d259eb454177a960a96c480ed9b5
#: ../../intro/tutorial05.txt:499
msgid ""
"``test_index_view_with_no_polls`` doesn't create any polls, but checks the "
"message: \"No polls are available.\" and verifies the ``latest_poll_list`` "
"is empty. Note that the :class:`django.test.TestCase` class provides some "
"additional assertion methods. In these examples, we use :meth:`~django.test."
"TestCase.assertContains()` and :meth:`~django.test.TestCase."
"assertQuerysetEqual()`."
msgstr ""

# a4c2503a82274a46a1c6f991fe9e252e
#: ../../intro/tutorial05.txt:506
msgid ""
"In ``test_index_view_with_a_past_poll``, we create a poll and verify that it "
"appears in the list."
msgstr ""

# 6c171019d5e94fa8b044356cc4bd5f9d
#: ../../intro/tutorial05.txt:509
msgid ""
"In ``test_index_view_with_a_future_poll``, we create a poll with a "
"``pub_date`` in the future. The database is reset for each test method, so "
"the first poll is no longer there, and so again the index shouldn't have any "
"polls in it."
msgstr ""

# 3975c37abc894c7785de6a87c13479ad
#: ../../intro/tutorial05.txt:513
msgid ""
"And so on. In effect, we are using the tests to tell a story of admin input "
"and user experience on the site, and checking that at every state and for "
"every new change in the state of the system, the expected results are "
"published."
msgstr ""

# 0f4032e10b704d06b947d68ff1b1f65b
#: ../../intro/tutorial05.txt:518
msgid "Testing the ``DetailView``"
msgstr ""

# fa653cbba5c24a9e83752eb71beb38b8
#: ../../intro/tutorial05.txt:520
msgid ""
"What we have works well; however, even though future polls don't appear in "
"the *index*, users can still reach them if they know or guess the right URL. "
"So we need similar constraints in the ``DetailViews``, by adding::"
msgstr ""

# f393ebcd70844834bc7bcac0beef8987
#: ../../intro/tutorial05.txt:526
msgid "to them - for example::"
msgstr ""

# 622e165ccdab4297a6c9f3b208a43523
#: ../../intro/tutorial05.txt:535
msgid ""
"and of course, we will add some tests, to check that a ``Poll`` whose "
"``pub_date`` is in the past can be displayed, and that one with a "
"``pub_date`` in the future is not::"
msgstr ""

# fff49f596ada4b29b832677fc0c9b943
#: ../../intro/tutorial05.txt:559
msgid "Ideas for more tests"
msgstr ""

# 785f7eb5cfce443b97f769a9a26401fb
#: ../../intro/tutorial05.txt:561
msgid ""
"We ought to add similar ``queryset`` arguments to the other ``DetailView`` "
"URLs, and create a new test class for each view. They'll be very similar to "
"what we have just created; in fact there will be a lot of repetition."
msgstr ""

# ead6ffc189b345208c99f5c87ad5fc60
#: ../../intro/tutorial05.txt:565
msgid ""
"We could also improve our application in other ways, adding tests along the "
"way. For example, it's silly that ``Polls`` can be published on the site "
"that have no ``Choices``. So, our views could check for this, and exclude "
"such ``Polls``. Our tests would create a ``Poll`` without ``Choices`` and "
"then test that it's not published, as well as create a similar ``Poll`` "
"*with* ``Choices``, and test that it *is* published."
msgstr ""

# 25d742f110794021afa3dfb68a25105d
#: ../../intro/tutorial05.txt:572
msgid ""
"Perhaps logged-in admin users should be allowed to see unpublished "
"``Polls``, but not ordinary visitors. Again: whatever needs to be added to "
"the software to accomplish this should be accompanied by a test, whether you "
"write the test first and then make the code pass the test, or work out the "
"logic in your code first and then write a test to prove it."
msgstr ""

# 7d90358b732341e380e037ad98d11a50
#: ../../intro/tutorial05.txt:578
msgid ""
"At a certain point you are bound to look at your tests and wonder whether "
"your code is suffering from test bloat, which brings us to:"
msgstr ""

# e335795435f64d29976a4ad098b0d971
#: ../../intro/tutorial05.txt:582
msgid "When testing, more is better"
msgstr ""

# 2b2bdc6976164cbc8c374062a3952b42
#: ../../intro/tutorial05.txt:584
msgid ""
"It might seem that our tests are growing out of control. At this rate there "
"will soon be more code in our tests than in our application, and the "
"repetition is unaesthetic, compared to the elegant conciseness of the rest "
"of our code."
msgstr ""

# 0e1cd79939854091a0e29085949a0985
#: ../../intro/tutorial05.txt:588
msgid ""
"**It doesn't matter**. Let them grow. For the most part, you can write a "
"test once and then forget about it. It will continue performing its useful "
"function as you continue to develop your program."
msgstr ""

# dc801b1c25f04c5db7151d901898efb9
#: ../../intro/tutorial05.txt:592
msgid ""
"Sometimes tests will need to be updated. Suppose that we amend our views so "
"that only ``Polls`` with ``Choices`` are published. In that case, many of "
"our existing tests will fail - *telling us exactly which tests need to be "
"amended to bring them up to date*, so to that extent tests help look after "
"themselves."
msgstr ""

# aaaefc59c9304763a532a210ceec8186
#: ../../intro/tutorial05.txt:597
msgid ""
"At worst, as you continue developing, you might find that you have some "
"tests that are now redundant. Even that's not a problem; in testing "
"redundancy is a *good* thing."
msgstr ""

# 24bdb3709fa948cc9327f1256429b0fa
#: ../../intro/tutorial05.txt:601
msgid ""
"As long as your tests are sensibly arranged, they won't become unmanageable. "
"Good rules-of-thumb include having:"
msgstr ""

# 6e8dc4a1434845b7b4c0fe494d931274
#: ../../intro/tutorial05.txt:604
msgid "a separate ``TestClass`` for each model or view"
msgstr ""

# 56ec7401e2e2488480ffe2a8e75ccc45
#: ../../intro/tutorial05.txt:605
msgid "a separate test method for each set of conditions you want to test"
msgstr ""

# 0882b9fbc026411e83d11e83fa6162d0
#: ../../intro/tutorial05.txt:606
msgid "test method names that describe their function"
msgstr ""

# bf3a8cf396cd4e3fba7bb25553043a3e
#: ../../intro/tutorial05.txt:609
msgid "Further testing"
msgstr ""

# 287afa6cfaee4f7abaefd75154727261
#: ../../intro/tutorial05.txt:611
msgid ""
"This tutorial only introduces some of the basics of testing. There's a great "
"deal more you can do, and a number of very useful tools at your disposal to "
"achieve some very clever things."
msgstr ""

# 02844daea56d432ebf4be0e6fce7a3cf
#: ../../intro/tutorial05.txt:615
msgid ""
"For example, while our tests here have covered some of the internal logic of "
"a model and the way our views publish information, you can use an \"in-"
"browser\" framework such as Selenium_ to test the way your HTML actually "
"renders in a browser. These tools allow you to check not just the behavior "
"of your Django code, but also, for example, of your JavaScript. It's quite "
"something to see the tests launch a browser, and start interacting with your "
"site, as if a human being were driving it! Django includes :class:`~django."
"test.LiveServerTestCase` to facilitate integration with tools like Selenium."
msgstr ""

# 7aafc07806c149b1aeff7b775a6534ed
#: ../../intro/tutorial05.txt:624
msgid ""
"If you have a complex application, you may want to run tests automatically "
"with every commit for the purposes of `continuous integration`_, so that "
"quality control is itself - at least partially - automated."
msgstr ""

# f7424ea461f440d482515e7e704c08d7
#: ../../intro/tutorial05.txt:628
msgid ""
"A good way to spot untested parts of your application is to check code "
"coverage. This also helps identify fragile or even dead code. If you can't "
"test a piece of code, it usually means that code should be refactored or "
"removed. Coverage will help to identify dead code. See :ref:`topics-testing-"
"code-coverage` for details."
msgstr ""

# 7881627aa8c7408c8bb6678671cd4a3b
#: ../../intro/tutorial05.txt:634
msgid ""
":doc:`Testing Django applications </topics/testing/index>` has comprehensive "
"information about testing."
msgstr ""

# 6558e9bd61aa469b87354c244ab8fb6f
#: ../../intro/tutorial05.txt:641
msgid "What's next?"
msgstr ""

# 52cbf297ed6b4a3a8937eb08499fa56a
#: ../../intro/tutorial05.txt:643
msgid ""
"The beginner tutorial ends here for the time being. In the meantime, you "
"might want to check out some pointers on :doc:`where to go from here </intro/"
"whatsnext>`."
msgstr ""

# 0882a80198ba400b8b49e5d4db16d837
#: ../../intro/tutorial05.txt:647
msgid ""
"If you are familiar with Python packaging and interested in learning how to "
"turn polls into a \"reusable app\", check out :doc:`Advanced tutorial: How "
"to write reusable apps</intro/reusable-apps>`."
msgstr ""
