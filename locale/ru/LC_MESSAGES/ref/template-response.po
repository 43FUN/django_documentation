# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2012.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-04-23 16:09\n"
"PO-Revision-Date: 2012-02-15 15:13\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# 035120f7dd0644b7acd21f7251a91035
#: ../../ref/template-response.txt:3
msgid "TemplateResponse and SimpleTemplateResponse"
msgstr ""

# 838b894b66254752b8ba528320e45e90
#: ../../ref/template-response.txt:8
msgid ""
"Standard :class:`~django.http.HttpResponse` objects are static structures. "
"They are provided with a block of pre-rendered content at time of "
"construction, and while that content can be modified, it isn't in a form "
"that makes it easy to perform modifications."
msgstr ""

# 3e8d6237d35d4d5da907665d0cd6009a
#: ../../ref/template-response.txt:13
msgid ""
"However, it can sometimes be beneficial to allow decorators or middleware to "
"modify a response *after* it has been constructed by the view. For example, "
"you may want to change the template that is used, or put additional data "
"into the context."
msgstr ""

# dcf67b0da1ce4d3abe27b776aa08e42d
#: ../../ref/template-response.txt:18
msgid ""
"TemplateResponse provides a way to do just that. Unlike basic :class:"
"`~django.http.HttpResponse` objects, TemplateResponse objects retain the "
"details of the template and context that was provided by the view to compute "
"the response. The final output of the response is not computed until it is "
"needed, later in the response process."
msgstr ""

# 6ad7fb6983534249a39ba420cd275a8c
#: ../../ref/template-response.txt:25
msgid "SimpleTemplateResponse objects"
msgstr ""

# 8e7466c879124bb7b463c8c1a6f25acd
#: ../../ref/template-response.txt:30
msgid "Attributes"
msgstr ""

# b7920f6dbeec4f949e860611aa16f0ab
#: ../../ref/template-response.txt:34
msgid ""
"The name of the template to be rendered. Accepts a :class:`~django.template."
"Template` object, a path to a template or list of template paths."
msgstr ""

# 1824ffb2e2274795b2464836da798924
#: ../../ref/template-response.txt:38
msgid "Example: ``['foo.html', 'path/to/bar.html']``"
msgstr ""

# 2ffca0412f7e43e797192d2d73e1a261
#: ../../ref/template-response.txt:42
msgid ""
"The context data to be used when rendering the template. It can be a "
"dictionary or a context object."
msgstr ""

# 3d6bd91da82b4bbc84335a04b544cf3c
#: ../../ref/template-response.txt:45
msgid "Example: ``{'foo': 123}``"
msgstr ""

# b9a3ef6a8461403ba311f1c8cd2b6739
#: ../../ref/template-response.txt:49
msgid ""
"The current rendered value of the response content, using the current "
"template and context data."
msgstr ""

# df10a49ebb11409cb170a2f802b22b2e
#: ../../ref/template-response.txt:54
msgid "A boolean indicating whether the response content has been rendered."
msgstr ""

# 20f4e8a2577344d390cb66e368dbe832
# 538f99d74cfe45d190ea8d0e56c25099
#: ../../ref/template-response.txt:57 ../../ref/template-response.txt:148
msgid "Methods"
msgstr ""

# cc556049ac21493088739d9fe3ea5431
#: ../../ref/template-response.txt:61
msgid ""
"Instantiates a :class:`~django.template.response.SimpleTemplateResponse` "
"object with the given template, context, content type, and HTTP status."
msgstr ""

# efef304915264e8287c6a65aa1a6f676
# 2cdad32c434641938711339c98d322db
#: ../../ref/template-response.txt:66 ../../ref/template-response.txt:159
msgid ""
"The full name of a template, or a sequence of template names. :class:"
"`~django.template.Template` instances can also be used."
msgstr ""

# bb7b2627ea144cf0a32d639da2401a27
# ecb1548c3f2d4803bcda429da32d12fe
#: ../../ref/template-response.txt:70 ../../ref/template-response.txt:163
msgid ""
"A dictionary of values to add to the template context. By default, this is "
"an empty dictionary. :class:`~django.template.Context` objects are also "
"accepted as ``context`` values."
msgstr ""

# 454e61c11f084e67a744313e5af2f010
# 35f18e3ad2f24d9ca79e511494e001cb
#: ../../ref/template-response.txt:75 ../../ref/template-response.txt:168
msgid "The HTTP Status code for the response."
msgstr ""

# 4cf3a8d7dfd64b6d992f6dfc212aae45
# 98a630fb26b242e1b69820235e575974
#: ../../ref/template-response.txt:77 ../../ref/template-response.txt:170
msgid "``content_type``"
msgstr ""

# 36c192237fae4cccbafa417a237a1bfc
# b65a311bdc7646088fde270085ae4c14
#: ../../ref/template-response.txt:81 ../../ref/template-response.txt:174
msgid ""
"Historically, this parameter was only called ``mimetype`` (now deprecated), "
"but since this is actually the value included in the HTTP ``Content-Type`` "
"header, it can also include the character set encoding, which makes it more "
"than just a MIME type specification. If ``mimetype`` is specified (not "
"``None``), that value is used. Otherwise, ``content_type`` is used. If "
"neither is given, :setting:`DEFAULT_CONTENT_TYPE` is used."
msgstr ""

# 53b5bd996fba438a9cbfe1de11793ad7
#: ../../ref/template-response.txt:92
msgid ""
"Converts context data into a context instance that can be used for rendering "
"a template. Accepts a dictionary of context data or a context object. "
"Returns a :class:`~django.template.Context` instance containing the provided "
"data."
msgstr ""

# 4cfaf82f4c9d4d5d99abfc6d8b2fc3f0
#: ../../ref/template-response.txt:97
msgid "Override this method in order to customize context instantiation."
msgstr ""

# b387d9c6d1d54d96b80b8089801c6430
#: ../../ref/template-response.txt:101
msgid ""
"Resolves the template instance to use for rendering. Accepts a path of a "
"template to use, or a sequence of template paths. :class:`~django.template."
"Template` instances may also be provided. Returns the :class:`~django."
"template.Template` instance to be rendered."
msgstr ""

# ddfc7c81c9874d8db854f9bf587ad41a
#: ../../ref/template-response.txt:107
msgid "Override this method in order to customize template rendering."
msgstr ""

# ec0b8d549adb463a82841e22fc4f760c
#: ../../ref/template-response.txt:111
msgid ""
"Add a callback that will be invoked after rendering has taken place. This "
"hook can be used to defer certain processing operations (such as caching) "
"until after rendering has occurred."
msgstr ""

# 576a72929cdb4fc8b37eb2ffde5d23e6
#: ../../ref/template-response.txt:115
msgid ""
"If the :class:`~django.template.response.SimpleTemplateResponse` has already "
"been rendered, the callback will be invoked immediately."
msgstr ""

# dbd65246d8044236b96a7021e6196d2b
#: ../../ref/template-response.txt:119
msgid ""
"When called, callbacks will be passed a single argument -- the rendered :"
"class:`~django.template.response.SimpleTemplateResponse` instance."
msgstr ""

# 9d0f95d122844861bc622ecb2ba0a1e8
#: ../../ref/template-response.txt:123
msgid ""
"If the callback returns a value that is not `None`, this will be used as the "
"response instead of the original response object (and will be passed to the "
"next post rendering callback etc.)"
msgstr ""

# e79d3a36a072486f88f4a57d9f5f3fc0
#: ../../ref/template-response.txt:129
msgid ""
"Sets ``response.content`` to the result obtained by :attr:"
"`SimpleTemplateResponse.rendered_content`, runs all post-rendering "
"callbacks, and returns the resulting response object."
msgstr ""

# e944bb236dbb45649a09787d640101d0
#: ../../ref/template-response.txt:133
msgid ""
"``render()`` will only have an effect the first time it is called. On "
"subsequent calls, it will return the result obtained from the first call."
msgstr ""

# 6550183f2ebb4d28b92a2ca5a5ef230b
#: ../../ref/template-response.txt:138
msgid "TemplateResponse objects"
msgstr ""

# da3053af1a1943c09858276e65e0f9b6
#: ../../ref/template-response.txt:142
msgid ""
"TemplateResponse is a subclass of :class:`~django.template.response."
"SimpleTemplateResponse` that uses a :class:`~django.template.RequestContext` "
"instead of a :class:`~django.template.Context`."
msgstr ""

# b7fee1ebbd9d4e28aee74bdbae7bb76e
#: ../../ref/template-response.txt:152
msgid ""
"Instantiates an ``TemplateResponse`` object with the given template, "
"context, MIME type and HTTP status."
msgstr ""

# 9502bcd0c07642c19fd2f8b0436cc656
#: ../../ref/template-response.txt:156
msgid "An :class:`~django.http.HttpRequest` instance."
msgstr ""

# 86140ea7980646408747ad89e09ee839
#: ../../ref/template-response.txt:183
msgid ""
"A hint indicating which application contains the current view. See the :ref:"
"`namespaced URL resolution strategy <topics-http-reversing-url-namespaces>` "
"for more information."
msgstr ""

# e957a6540ac94cc297a5d5940c2e4825
#: ../../ref/template-response.txt:189
msgid "The rendering process"
msgstr ""

# 32fcb1c32d2d447fb53f43ac704d44c0
#: ../../ref/template-response.txt:191
msgid ""
"Before a :class:`~django.template.response.TemplateResponse` instance can be "
"returned to the client, it must be rendered. The rendering process takes the "
"intermediate representation of template and context, and turns it into the "
"final byte stream that can be served to the client."
msgstr ""

# c31de5bf16a041a4951ec44c13ab63b7
#: ../../ref/template-response.txt:196
msgid ""
"There are three circumstances under which a ``TemplateResponse`` will be "
"rendered:"
msgstr ""

# 70579d61fc874bb3a80dbe8b3db921c8
#: ../../ref/template-response.txt:199
msgid ""
"When the ``TemplateResponse`` instance is explicitly rendered, using the :"
"meth:`SimpleTemplateResponse.render()` method."
msgstr ""

# cf8bef5aece8471dbe195619f00a42ba
#: ../../ref/template-response.txt:202
msgid ""
"When the content of the response is explicitly set by assigning ``response."
"content``."
msgstr ""

# b6e7e217758a4e2ea789f12910577d9b
#: ../../ref/template-response.txt:205
msgid ""
"After passing through template response middleware, but before passing "
"through response middleware."
msgstr ""

# e1c4c55a55cd4194a69253e2cb611686
#: ../../ref/template-response.txt:208
msgid ""
"A ``TemplateResponse`` can only be rendered once. The first call to :meth:"
"`SimpleTemplateResponse.render` sets the content of the response; subsequent "
"rendering calls do not change the response content."
msgstr ""

# 93a442eddf804d97bb73ccd78841bc44
#: ../../ref/template-response.txt:212
msgid ""
"However, when ``response.content`` is explicitly assigned, the change is "
"always applied. If you want to force the content to be re-rendered, you can "
"re-evaluate the rendered content, and assign the content of the response "
"manually::"
msgstr ""

# af4de78e40d14a9482d976e5bdc86962
#: ../../ref/template-response.txt:235
msgid "Post-render callbacks"
msgstr ""

# 441f662b7bb14c9d9f015e5a5f235417
#: ../../ref/template-response.txt:237
msgid ""
"Some operations -- such as caching -- cannot be performed on an unrendered "
"template. They must be performed on a fully complete and rendered response."
msgstr ""

# 31862379efa3481e957767d644be1caa
#: ../../ref/template-response.txt:241
msgid ""
"If you're using middleware, the solution is easy. Middleware provides "
"multiple opportunities to process a response on exit from a view. If you put "
"behavior in the Response middleware is guaranteed to execute after template "
"rendering has taken place."
msgstr ""

# 422f696ecf934afa859d11bf53e3aeef
#: ../../ref/template-response.txt:246
msgid ""
"However, if you're using a decorator, the same opportunities do not exist. "
"Any behavior defined in a decorator is handled immediately."
msgstr ""

# a3e506eb5c7c46a0a5b0c1aec4182065
#: ../../ref/template-response.txt:249
msgid ""
"To compensate for this (and any other analogous use cases), :class:"
"`TemplateResponse` allows you to register callbacks that will be invoked "
"when rendering has completed. Using this callback, you can defer critical "
"processing until a point where you can guarantee that rendered content will "
"be available."
msgstr ""

# 62f1ff8d21f04d5e9c18482ac83d5f9a
#: ../../ref/template-response.txt:255
msgid ""
"To define a post-render callback, just define a function that takes a single "
"argument -- response -- and register that function with the template "
"response::"
msgstr ""

# efaedf6f5b2c4d979396c2a99036d6f1
#: ../../ref/template-response.txt:271
msgid ""
"``my_render_callback()`` will be invoked after the ``mytemplate.html`` has "
"been rendered, and will be provided the fully rendered :class:"
"`TemplateResponse` instance as an argument."
msgstr ""

# 1c0149e8f220435aa07c092a6c3f3321
#: ../../ref/template-response.txt:275
msgid ""
"If the template has already been rendered, the callback will be invoked "
"immediately."
msgstr ""

# 7d7bbe2d5a254bedbaddd7ff480c4b79
#: ../../ref/template-response.txt:279
msgid "Using TemplateResponse and SimpleTemplateResponse"
msgstr ""

# 295e1e902a704a7b8424a694d1a05ec1
#: ../../ref/template-response.txt:281
msgid ""
"A TemplateResponse object can be used anywhere that a normal HttpResponse "
"can be used. It can also be used as an alternative to calling :func:`~django."
"shortcuts.render_to_response()`."
msgstr ""

# dab3ceba1c61457d9a18ae65145f89af
#: ../../ref/template-response.txt:285
msgid ""
"For example, the following simple view returns a :class:`TemplateResponse()` "
"with a simple template, and a context containing a queryset::"
msgstr ""
