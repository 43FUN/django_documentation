# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2012.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-02-15 15:13\n"
"PO-Revision-Date: 2012-02-15 15:13\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# 1d201004172a46e59165f832c52481b4
#: ../../ref/templates/api.txt:3
msgid "The Django template language: For Python programmers"
msgstr ""

# 523ab89fd9274fffacba647757a590b2
#: ../../ref/templates/api.txt:5
msgid ""
"This document explains the Django template system from a technical "
"perspective -- how it works and how to extend it. If you're just looking for "
"reference on the language syntax, see :doc:`/topics/templates`."
msgstr ""

# 0f7ad3c91f0a483fac3791c90a7b8508
#: ../../ref/templates/api.txt:9
msgid ""
"If you're looking to use the Django template system as part of another "
"application -- i.e., without the rest of the framework -- make sure to read "
"the `configuration`_ section later in this document."
msgstr ""

# c5016c1597d948c8a10aabddd092ffb7
#: ../../ref/templates/api.txt:16
msgid "Basics"
msgstr ""

# 6e1167d354544442bf489d0f43826259
#: ../../ref/templates/api.txt:18
msgid ""
"A **template** is a text document, or a normal Python string, that is marked-"
"up using the Django template language. A template can contain **block tags** "
"or **variables**."
msgstr ""

# cd3854f00e4d48d0ae0fef931d6ed185
#: ../../ref/templates/api.txt:22
msgid "A **block tag** is a symbol within a template that does something."
msgstr ""

# bc011e8fead7414ea49eeeed695dc6f2
#: ../../ref/templates/api.txt:24
msgid ""
"This definition is deliberately vague. For example, a block tag can output "
"content, serve as a control structure (an \"if\" statement or \"for\" loop), "
"grab content from a database or enable access to other template tags."
msgstr ""

# 681a759e2e91403fb9bf11718eefa6de
#: ../../ref/templates/api.txt:28
msgid "Block tags are surrounded by ``\"{%\"`` and ``\"%}\"``."
msgstr ""

# 171996132fe348919cc95b02c8b4a9ae
#: ../../ref/templates/api.txt:30
msgid "Example template with block tags:"
msgstr ""

# e00ecbce5b1f4864a40e6ac8fbdfed08
#: ../../ref/templates/api.txt:36
msgid "A **variable** is a symbol within a template that outputs a value."
msgstr ""

# 76199fbd4c8f4168809b0564b0980fe4
#: ../../ref/templates/api.txt:38
msgid "Variable tags are surrounded by ``\"{{\"`` and ``\"}}\"``."
msgstr ""

# 00425ff901b1484c9c8ff0a725131c77
#: ../../ref/templates/api.txt:40
msgid "Example template with variables:"
msgstr ""

# c178484ab3034fbd8c70ff6f35c36fa1
#: ../../ref/templates/api.txt:46
msgid ""
"A **context** is a \"variable name\" -> \"variable value\" mapping that is "
"passed to a template."
msgstr ""

# 49a9b1db1f5e4b3eb959454a50ecf646
#: ../../ref/templates/api.txt:49
msgid ""
"A template **renders** a context by replacing the variable \"holes\" with "
"values from the context and executing all block tags."
msgstr ""

# 93e4b2cc2ec441e7afc4fac2a7d50039
#: ../../ref/templates/api.txt:53
msgid "Using the template system"
msgstr ""

# c9a0b776484849c28ce22782f30c9e28
#: ../../ref/templates/api.txt:57
msgid "Using the template system in Python is a two-step process:"
msgstr ""

# 3cbf75ced2e046d8b1ba15e0ff119d06
#: ../../ref/templates/api.txt:59
msgid "First, you compile the raw template code into a ``Template`` object."
msgstr ""

# 91629278e2f749ba8e8273ff1b4115ca
#: ../../ref/templates/api.txt:60
msgid ""
"Then, you call the ``render()`` method of the ``Template`` object with a "
"given context."
msgstr ""

# b178157bd37c4d57888f649cea31be62
#: ../../ref/templates/api.txt:64
msgid "Compiling a string"
msgstr ""

# 3f5bf22c215040838bdbfffa2ce09e7c
#: ../../ref/templates/api.txt:66
msgid ""
"The easiest way to create a ``Template`` object is by instantiating it "
"directly. The class lives at :class:`django.template.Template`. The "
"constructor takes one argument -- the raw template code::"
msgstr ""

# 16370177e41b436ba9e84d2c26c74ce2
#: ../../ref/templates/api.txt:77
msgid ""
"The system only parses your raw template code once -- when you create the "
"``Template`` object. From then on, it's stored internally as a \"node\" "
"structure for performance."
msgstr ""

# f3631b1d934e4066a9dbfc9b4f180c45
#: ../../ref/templates/api.txt:81
msgid ""
"Even the parsing itself is quite fast. Most of the parsing happens via a "
"single call to a single, short, regular expression."
msgstr ""

# b8479b83e5e5453f8d8cff47b5354942
#: ../../ref/templates/api.txt:85
msgid "Rendering a context"
msgstr ""

# 96e15b84123d4e208b76a62fc6ff5c21
#: ../../ref/templates/api.txt:89
msgid ""
"Once you have a compiled ``Template`` object, you can render a context -- or "
"multiple contexts -- with it. The ``Context`` class lives at :class:`django."
"template.Context`, and the constructor takes two (optional) arguments:"
msgstr ""

# 685166cfc97c469f9943fb9fc4bdfea4
#: ../../ref/templates/api.txt:94
msgid "A dictionary mapping variable names to variable values."
msgstr ""

# b141f02d72c74a32a9c8fb67ad0ba180
#: ../../ref/templates/api.txt:96
msgid ""
"The name of the current application. This application name is used to help :"
"ref:`resolve namespaced URLs<topics-http-reversing-url-namespaces>`. If "
"you're not using namespaced URLs, you can ignore this argument."
msgstr ""

# b31114656a0b4c80babfe0969e50845a
#: ../../ref/templates/api.txt:100
msgid ""
"Call the ``Template`` object's ``render()`` method with the context to \"fill"
"\" the template::"
msgstr ""

# 9ab9dfa090284318baec2b52b0bfc9f5
#: ../../ref/templates/api.txt:114
msgid ""
"Variable names must consist of any letter (A-Z), any digit (0-9), an "
"underscore or a dot."
msgstr ""

# 054cdf9dc0af4943be66560c80e3de26
#: ../../ref/templates/api.txt:117
msgid ""
"Dots have a special meaning in template rendering. A dot in a variable name "
"signifies a **lookup**. Specifically, when the template system encounters a "
"dot in a variable name, it tries the following lookups, in this order:"
msgstr ""

# f75b61bd2d1c49b4ba3d6d3ec3b26663
#: ../../ref/templates/api.txt:121
msgid "Dictionary lookup. Example: ``foo[\"bar\"]``"
msgstr ""

# 55b4428f26fd4a25a21963417dc54b41
#: ../../ref/templates/api.txt:122
msgid "Attribute lookup. Example: ``foo.bar``"
msgstr ""

# bbceeff1118e4da2b909562d35269a50
#: ../../ref/templates/api.txt:123
msgid "List-index lookup. Example: ``foo[bar]``"
msgstr ""

# db5e81b0818e4544b5ccd7019f45cc7c
#: ../../ref/templates/api.txt:125
msgid ""
"The template system uses the first lookup type that works. It's short-"
"circuit logic. Here are a few examples::"
msgstr ""

# ae9a3a25971f49bebd4170bbd0bc8b2d
#: ../../ref/templates/api.txt:146
msgid ""
"If any part of the variable is callable, the template system will try "
"calling it. Example::"
msgstr ""

# 1ed4d072fd0f4472a42f3e8a5d4ddfae
#: ../../ref/templates/api.txt:161
msgid ""
"Callable variables are slightly more complex than variables which only "
"require straight lookups. Here are some things to keep in mind:"
msgstr ""

# 5b6dd06f94af43c599facef6e0c51bbc
#: ../../ref/templates/api.txt:164
msgid ""
"If the variable raises an exception when called, the exception will be "
"propagated, unless the exception has an attribute "
"``silent_variable_failure`` whose value is ``True``. If the exception *does* "
"have a ``silent_variable_failure`` attribute whose value is ``True``, the "
"variable will render as an empty string. Example::"
msgstr ""

# 592dd2e2a3e644c5a8e800ed2c959a50
#: ../../ref/templates/api.txt:189
msgid ""
"Note that :exc:`django.core.exceptions.ObjectDoesNotExist`, which is the "
"base class for all Django database API ``DoesNotExist`` exceptions, has "
"``silent_variable_failure = True``. So if you're using Django templates with "
"Django model objects, any ``DoesNotExist`` exception will fail silently."
msgstr ""

# d73f22c8b1954859b58e4f27ef4eb2aa
#: ../../ref/templates/api.txt:195
msgid ""
"A variable can only be called if it has no required arguments. Otherwise, "
"the system will return an empty string."
msgstr ""

# c776f677bf8146da8b35d2c9fc7053aa
#: ../../ref/templates/api.txt:198
msgid ""
"Obviously, there can be side effects when calling some variables, and it'd "
"be either foolish or a security hole to allow the template system to access "
"them."
msgstr ""

# a9cbe2f62d254a07861264c91cd668b0
#: ../../ref/templates/api.txt:202
msgid ""
"A good example is the :meth:`~django.db.models.Model.delete` method on each "
"Django model object. The template system shouldn't be allowed to do "
"something like this::"
msgstr ""

# 9f926c76e557480ba20683c4b3d012ee
#: ../../ref/templates/api.txt:208
msgid ""
"To prevent this, set an ``alters_data`` attribute on the callable variable. "
"The template system won't call a variable if it has ``alters_data=True`` "
"set, and will instead replace the variable with :setting:"
"`TEMPLATE_STRING_IF_INVALID`, unconditionally.  The dynamically-generated :"
"meth:`~django.db.models.Model.delete` and :meth:`~django.db.models.Model."
"save` methods on Django model objects get ``alters_data=True`` "
"automatically. Example::"
msgstr ""

# 5998286e9ce14a5bb7f17386be8846bd
#: ../../ref/templates/api.txt:232
msgid "How invalid variables are handled"
msgstr ""

# fa0bd15decb2475abc38d172aeff627f
#: ../../ref/templates/api.txt:234
msgid ""
"Generally, if a variable doesn't exist, the template system inserts the "
"value of the :setting:`TEMPLATE_STRING_IF_INVALID` setting, which is set to "
"``''`` (the empty string) by default."
msgstr ""

# 00f8c67b48fc45b1b82a7d080d450bb4
#: ../../ref/templates/api.txt:238
msgid ""
"Filters that are applied to an invalid variable will only be applied if :"
"setting:`TEMPLATE_STRING_IF_INVALID` is set to ``''`` (the empty string). "
"If :setting:`TEMPLATE_STRING_IF_INVALID` is set to any other value, variable "
"filters will be ignored."
msgstr ""

# 83b13b0c542440c6ae29aa4550e1d850
#: ../../ref/templates/api.txt:243
msgid ""
"This behavior is slightly different for the ``if``, ``for`` and ``regroup`` "
"template tags. If an invalid variable is provided to one of these template "
"tags, the variable will be interpreted as ``None``. Filters are always "
"applied to invalid variables within these template tags."
msgstr ""

# c93e99e5e7ad4341803113e86569f0ec
#: ../../ref/templates/api.txt:248
msgid ""
"If :setting:`TEMPLATE_STRING_IF_INVALID` contains a ``'%s'``, the format "
"marker will be replaced with the name of the invalid variable."
msgstr ""

# 5fe77ee37a764c9a9d21afc4af1dd96a
#: ../../ref/templates/api.txt:253
msgid ""
"While :setting:`TEMPLATE_STRING_IF_INVALID` can be a useful debugging tool, "
"it is a bad idea to turn it on as a 'development default'."
msgstr ""

# c4e4535f0e85426da064d2780ce65f1d
#: ../../ref/templates/api.txt:256
msgid ""
"Many templates, including those in the Admin site, rely upon the silence of "
"the template system when a non-existent variable is encountered. If you "
"assign a value other than ``''`` to :setting:`TEMPLATE_STRING_IF_INVALID`, "
"you will experience rendering problems with these templates and sites."
msgstr ""

# d9c1b9e7a8b142a2942d3a959e03396c
#: ../../ref/templates/api.txt:262
msgid ""
"Generally, :setting:`TEMPLATE_STRING_IF_INVALID` should only be enabled in "
"order to debug a specific template problem, then cleared once debugging is "
"complete."
msgstr ""

# 23aa021c846d43c1bc1457f2ca6f6dc6
#: ../../ref/templates/api.txt:267
msgid "Playing with Context objects"
msgstr ""

# 3d215e0a227d4ec9a65d7c6b2042d470
#: ../../ref/templates/api.txt:271
msgid ""
"Most of the time, you'll instantiate ``Context`` objects by passing in a "
"fully-populated dictionary to ``Context()``. But you can add and delete "
"items from a ``Context`` object once it's been instantiated, too, using "
"standard dictionary syntax::"
msgstr ""

# 2cfc8d63979a4e47b03873aec19ea4cd
#: ../../ref/templates/api.txt:290
msgid ""
"A ``Context`` object is a stack. That is, you can ``push()`` and ``pop()`` "
"it. If you ``pop()`` too much, it'll raise ``django.template."
"ContextPopException``::"
msgstr ""

# 2170415dc10649d8bfa0edfe98bde326
#: ../../ref/templates/api.txt:313
msgid ""
"In addition to ``push()`` and ``pop()``, the ``Context`` object also defines "
"an ``update()`` method. This works like ``push()`` but takes a dictionary as "
"an argument and pushes that dictionary onto the stack instead of an empty "
"one."
msgstr ""

# 1a23db2e66de429da838ef8c0eaaaf87
#: ../../ref/templates/api.txt:329
msgid ""
"Using a ``Context`` as a stack comes in handy in some custom template tags, "
"as you'll see below."
msgstr ""

# b3cfecf2edf84488aea9f62878ef6a9a
#: ../../ref/templates/api.txt:335
msgid "Subclassing Context: RequestContext"
msgstr ""

# 794c75488db84963a4a2df2eb1408c38
#: ../../ref/templates/api.txt:339
msgid ""
"Django comes with a special ``Context`` class, ``django.template."
"RequestContext``, that acts slightly differently than the normal ``django."
"template.Context``. The first difference is that it takes an :class:`~django."
"http.HttpRequest` as its first argument. For example::"
msgstr ""

# 36600bf9272b490a8f22225c32c90645
#: ../../ref/templates/api.txt:348
msgid ""
"The second difference is that it automatically populates the context with a "
"few variables, according to your :setting:`TEMPLATE_CONTEXT_PROCESSORS` "
"setting."
msgstr ""

# d81ca0560a544e65b007c7936c5d9c2f
#: ../../ref/templates/api.txt:351
msgid ""
"The :setting:`TEMPLATE_CONTEXT_PROCESSORS` setting is a tuple of callables "
"-- called **context processors** -- that take a request object as their "
"argument and return a dictionary of items to be merged into the context. By "
"default, :setting:`TEMPLATE_CONTEXT_PROCESSORS` is set to::"
msgstr ""

# e3c6eff88d9147f6a2ff50c8ca76a65a
#: ../../ref/templates/api.txt:379
msgid ""
"Each processor is applied in order. That means, if one processor adds a "
"variable to the context and a second processor adds a variable with the same "
"name, the second will override the first. The default processors are "
"explained below."
msgstr ""

# 4a2eea9aaaf54d3f8082702b8671ba97
#: ../../ref/templates/api.txt:386
msgid ""
"When you use ``RequestContext``, the variables you supply directly are added "
"first, followed any variables supplied by context processors. This means "
"that a context processor may overwrite a variable you've supplied, so take "
"care to avoid variable names which overlap with those supplied by your "
"context processors."
msgstr ""

# 277c1ac702d4493eb42bcd33fdaa9682
#: ../../ref/templates/api.txt:392
msgid ""
"Also, you can give ``RequestContext`` a list of additional processors, using "
"the optional, third positional argument, ``processors``. In this example, "
"the ``RequestContext`` instance gets a ``ip_address`` variable::"
msgstr ""

# 2c01ea357f9948d481caebeae0d9f320
#: ../../ref/templates/api.txt:408
msgid ""
"If you're using Django's :func:`~django.shortcuts.render_to_response()` "
"shortcut to populate a template with the contents of a dictionary, your "
"template will be passed a ``Context`` instance by default (not a "
"``RequestContext``). To use a ``RequestContext`` in your template rendering, "
"pass an optional third argument to :func:`~django.shortcuts."
"render_to_response()`: a ``RequestContext`` instance. Your code might look "
"like this::"
msgstr ""

# 67a7f24f7c234c958535ea79c218237a
#: ../../ref/templates/api.txt:422
msgid "Here's what each of the default processors does:"
msgstr ""

# 4f74c55c8ffb45b0b8ba336076dbd8d5
#: ../../ref/templates/api.txt:425
msgid "django.contrib.auth.context_processors.auth"
msgstr ""

# ccc4c69ee49f4b7e83c22f45fb4231ef
#: ../../ref/templates/api.txt:427
msgid ""
"If :setting:`TEMPLATE_CONTEXT_PROCESSORS` contains this processor, every "
"``RequestContext`` will contain these three variables:"
msgstr ""

# 2099f68b2f5e48b28426eba03ba71aed
#: ../../ref/templates/api.txt:430
msgid ""
"``user`` -- An ``auth.User`` instance representing the currently logged-in "
"user (or an ``AnonymousUser`` instance, if the client isn't logged in)."
msgstr ""

# df4a1fc2c560491a89c4b3c257fe4c39
#: ../../ref/templates/api.txt:434
msgid ""
"``perms`` -- An instance of ``django.contrib.auth.context_processors."
"PermWrapper``, representing the permissions that the currently logged-in "
"user has."
msgstr ""

# b6966b419065485c982913cd7f637d4f
#: ../../ref/templates/api.txt:448
msgid "django.core.context_processors.debug"
msgstr ""

# a782b2b8c6fd44ba917bcfbbdf44e825
#: ../../ref/templates/api.txt:450
msgid ""
"If :setting:`TEMPLATE_CONTEXT_PROCESSORS` contains this processor, every "
"``RequestContext`` will contain these two variables -- but only if your :"
"setting:`DEBUG` setting is set to ``True`` and the request's IP address "
"(``request.META['REMOTE_ADDR']``) is in the :setting:`INTERNAL_IPS` setting:"
msgstr ""

# 6271cf99e53345d49968b2696f57c449
#: ../../ref/templates/api.txt:455
msgid ""
"``debug`` -- ``True``. You can use this in templates to test whether you're "
"in :setting:`DEBUG` mode."
msgstr ""

# 88c3d9db22e145de9770af0ccb2e2cff
#: ../../ref/templates/api.txt:457
msgid ""
"``sql_queries`` -- A list of ``{'sql': ..., 'time': ...}`` dictionaries, "
"representing every SQL query that has happened so far during the request and "
"how long it took. The list is in order by query."
msgstr ""

# 40b3281520c24cd3b9f25692a7eb1e66
#: ../../ref/templates/api.txt:462
msgid "django.core.context_processors.i18n"
msgstr ""

# 13192c07fd7f4886978238bd1647af92
#: ../../ref/templates/api.txt:464
msgid ""
"If :setting:`TEMPLATE_CONTEXT_PROCESSORS` contains this processor, every "
"``RequestContext`` will contain these two variables:"
msgstr ""

# fd018e6040574d409ffe9e8f6821ce22
#: ../../ref/templates/api.txt:467
msgid "``LANGUAGES`` -- The value of the :setting:`LANGUAGES` setting."
msgstr ""

# db178c2698da4a83acd2ae7a47dd4c2d
#: ../../ref/templates/api.txt:468
msgid ""
"``LANGUAGE_CODE`` -- ``request.LANGUAGE_CODE``, if it exists. Otherwise, the "
"value of the :setting:`LANGUAGE_CODE` setting."
msgstr ""

# 7e82e3a962514a29bc03b9c1d8f887cc
#: ../../ref/templates/api.txt:471
msgid "See :doc:`/topics/i18n/index` for more."
msgstr ""

# fc4072670a644ed4a02af0c52d98c520
#: ../../ref/templates/api.txt:474
msgid "django.core.context_processors.media"
msgstr ""

# 12e09d53127e4245a94bd154e7c386a3
#: ../../ref/templates/api.txt:476
msgid ""
"If :setting:`TEMPLATE_CONTEXT_PROCESSORS` contains this processor, every "
"``RequestContext`` will contain a variable ``MEDIA_URL``, providing the "
"value of the :setting:`MEDIA_URL` setting."
msgstr ""

# 0df2d136ed844df4a50afee535e871cf
#: ../../ref/templates/api.txt:481
msgid "django.core.context_processors.static"
msgstr ""

# f3d32a76ba94481da1d0d32d26f18845
#: ../../ref/templates/api.txt:487
msgid ""
"If :setting:`TEMPLATE_CONTEXT_PROCESSORS` contains this processor, every "
"``RequestContext`` will contain a variable ``STATIC_URL``, providing the "
"value of the :setting:`STATIC_URL` setting."
msgstr ""

# e6fe13fc616949f4bae7a8c5d2ae2d25
#: ../../ref/templates/api.txt:492
msgid "django.core.context_processors.csrf"
msgstr ""

# 076ae19c926d4ab18330243dae9b902c
#: ../../ref/templates/api.txt:496
msgid ""
"This processor adds a token that is needed by the :ttag:`csrf_token` "
"template tag for protection against :doc:`Cross Site Request Forgeries </ref/"
"contrib/csrf>`."
msgstr ""

# d72b464bbbc54949b59c36334dc7feaf
#: ../../ref/templates/api.txt:501
msgid "django.core.context_processors.request"
msgstr ""

# 98fac01ff9c94f6abbdd64330987bc5b
#: ../../ref/templates/api.txt:503
msgid ""
"If :setting:`TEMPLATE_CONTEXT_PROCESSORS` contains this processor, every "
"``RequestContext`` will contain a variable ``request``, which is the "
"current :class:`~django.http.HttpRequest`. Note that this processor is not "
"enabled by default; you'll have to activate it."
msgstr ""

# 9f9382901d7a46d192a2fa172846980b
#: ../../ref/templates/api.txt:509
msgid "django.contrib.messages.context_processors.messages"
msgstr ""

# 0cf86bf9c82c4143a8f98da8516eaf7c
#: ../../ref/templates/api.txt:511
msgid ""
"If :setting:`TEMPLATE_CONTEXT_PROCESSORS` contains this processor, every "
"``RequestContext`` will contain a single additional variable:"
msgstr ""

# 28d38d131fd8482d9d2c81b1b68fd0f8
#: ../../ref/templates/api.txt:514
msgid ""
"``messages`` -- A list of messages (as strings) that have been set via the "
"user model (using ``user.message_set.create``) or through the :doc:`messages "
"framework </ref/contrib/messages>`."
msgstr ""

# 1fcde39b1ac443d8b4163bef8893de09
#: ../../ref/templates/api.txt:528
msgid "Writing your own context processors"
msgstr ""

# 2e07708a63e24295b61c5c28b7a42378
#: ../../ref/templates/api.txt:530
msgid ""
"A context processor has a very simple interface: It's just a Python function "
"that takes one argument, an :class:`~django.http.HttpRequest` object, and "
"returns a dictionary that gets added to the template context. Each context "
"processor *must* return a dictionary."
msgstr ""

# 6b0ac5e3f8d34d8db46cc759c9fbadaa
#: ../../ref/templates/api.txt:535
msgid ""
"Custom context processors can live anywhere in your code base. All Django "
"cares about is that your custom context processors are pointed-to by your :"
"setting:`TEMPLATE_CONTEXT_PROCESSORS` setting."
msgstr ""

# d81d691eb3f547c1977948b7ce189443
#: ../../ref/templates/api.txt:540
msgid "Loading templates"
msgstr ""

# 9769e4cc33644631ac451b17ef9ad14f
#: ../../ref/templates/api.txt:542
msgid ""
"Generally, you'll store templates in files on your filesystem rather than "
"using the low-level ``Template`` API yourself. Save templates in a directory "
"specified as a **template directory**."
msgstr ""

# 9b644db389ab4622988041bbfbb06311
#: ../../ref/templates/api.txt:546
msgid ""
"Django searches for template directories in a number of places, depending on "
"your template-loader settings (see \"Loader types\" below), but the most "
"basic way of specifying template directories is by using the :setting:"
"`TEMPLATE_DIRS` setting."
msgstr ""

# e0741e1950ef4699ba6f4cac63ff138f
#: ../../ref/templates/api.txt:552
msgid "The TEMPLATE_DIRS setting"
msgstr ""

# b963a6780eb34ebd8c8372a2b3020080
#: ../../ref/templates/api.txt:554
msgid ""
"Tell Django what your template directories are by using the :setting:"
"`TEMPLATE_DIRS` setting in your settings file. This should be set to a list "
"or tuple of strings that contain full paths to your template directory(ies). "
"Example::"
msgstr ""

# 0be6659172bd4a05befb3397349badb6
#: ../../ref/templates/api.txt:564
msgid ""
"Your templates can go anywhere you want, as long as the directories and "
"templates are readable by the Web server. They can have any extension you "
"want, such as ``.html`` or ``.txt``, or they can have no extension at all."
msgstr ""

# 1f5dbb2948f54aab8299117d1382f8db
#: ../../ref/templates/api.txt:568
msgid ""
"Note that these paths should use Unix-style forward slashes, even on Windows."
msgstr ""

# e3a1efffc99c4aeeaa973c966f5b60c7
#: ../../ref/templates/api.txt:573
msgid "The Python API"
msgstr ""

# 7e80a0e0f60e44dab0834b2c09165b6b
#: ../../ref/templates/api.txt:575
msgid "Django has two ways to load templates from files:"
msgstr ""

# 982ca7c6f779465eb43bdd4fd9732676
#: ../../ref/templates/api.txt:579
msgid ""
"``get_template`` returns the compiled template (a ``Template`` object) for "
"the template with the given name. If the template doesn't exist, it raises "
"``django.template.TemplateDoesNotExist``."
msgstr ""

# 1d9e88c402fa41e283ac3ada1911811e
#: ../../ref/templates/api.txt:585
msgid ""
"``select_template`` is just like ``get_template``, except it takes a list of "
"template names. Of the list, it returns the first template that exists."
msgstr ""

# 423a741d62074cbe81e9757a0624ca70
#: ../../ref/templates/api.txt:588
msgid ""
"For example, if you call ``get_template('story_detail.html')`` and have the "
"above :setting:`TEMPLATE_DIRS` setting, here are the files Django will look "
"for, in order:"
msgstr ""

# 2e0ee63e3f0d4f21a2fafc6b7bbec8ad
# 1803a692346042ccb14e8d305eac6522
#: ../../ref/templates/api.txt:592 ../../ref/templates/api.txt:600
msgid "``/home/html/templates/lawrence.com/story_detail.html``"
msgstr ""

# 16242f67738e44a2994ac1725d6b969d
# 2bef4fb42a9c438ca1540f3dad1b64f6
#: ../../ref/templates/api.txt:593 ../../ref/templates/api.txt:601
msgid "``/home/html/templates/default/story_detail.html``"
msgstr ""

# 61cffbed641149579be89541913953e7
#: ../../ref/templates/api.txt:595
msgid ""
"If you call ``select_template(['story_253_detail.html', 'story_detail.html'])"
"``, here's what Django will look for:"
msgstr ""

# 8568200fc8bb4647b408b1434db37912
#: ../../ref/templates/api.txt:598
msgid "``/home/html/templates/lawrence.com/story_253_detail.html``"
msgstr ""

# 2159ec691c6a4b09a395e8267f3b36bd
#: ../../ref/templates/api.txt:599
msgid "``/home/html/templates/default/story_253_detail.html``"
msgstr ""

# 2d0f63d34b6e47fa88e74ea50017018f
#: ../../ref/templates/api.txt:603
msgid "When Django finds a template that exists, it stops looking."
msgstr ""

# f00cde4cb9ab4dd189d37d269c964575
#: ../../ref/templates/api.txt:607
msgid ""
"You can use ``select_template()`` for super-flexible \"templatability.\" For "
"example, if you've written a news story and want some stories to have custom "
"templates, use something like ``select_template(['story_%s_detail.html' % "
"story.id, 'story_detail.html'])``. That'll allow you to use a custom "
"template for an individual story, with a fallback template for stories that "
"don't have custom templates."
msgstr ""

# 8011a261467e46178cd9ddab3aaeb8c7
#: ../../ref/templates/api.txt:615
msgid "Using subdirectories"
msgstr ""

# 0591f24d108f4428930f19b7c28027e6
#: ../../ref/templates/api.txt:617
msgid ""
"It's possible -- and preferable -- to organize templates in subdirectories "
"of the template directory. The convention is to make a subdirectory for each "
"Django app, with subdirectories within those subdirectories as needed."
msgstr ""

# cddaa40c34254f36b25d4ab157828ca5
#: ../../ref/templates/api.txt:621
msgid ""
"Do this for your own sanity. Storing all templates in the root level of a "
"single directory gets messy."
msgstr ""

# 8cbe197b72964bfd9c37e2ef0914a6d5
#: ../../ref/templates/api.txt:624
msgid ""
"To load a template that's within a subdirectory, just use a slash, like so::"
msgstr ""

# 6b704e28322e4943a4cf3bc4d38fc99b
#: ../../ref/templates/api.txt:628
msgid ""
"Using the same :setting:`TEMPLATE_DIRS` setting from above, this example "
"``get_template()`` call will attempt to load the following templates:"
msgstr ""

# e1cf406e1d9e465997c40f4eafce6755
#: ../../ref/templates/api.txt:631
msgid "``/home/html/templates/lawrence.com/news/story_detail.html``"
msgstr ""

# f49d19997fdf4c8cb1f5faec6152fdc2
#: ../../ref/templates/api.txt:632
msgid "``/home/html/templates/default/news/story_detail.html``"
msgstr ""

# f5de52746ee64836bff2111256443442
#: ../../ref/templates/api.txt:637
msgid "Loader types"
msgstr ""

# a3e1a45cce4049b7b9236c6b951c0373
#: ../../ref/templates/api.txt:639
msgid ""
"By default, Django uses a filesystem-based template loader, but Django comes "
"with a few other template loaders, which know how to load templates from "
"other sources."
msgstr ""

# b2bb78e6164e46e2abcf47d3af2a37d6
#: ../../ref/templates/api.txt:643
msgid ""
"Some of these other loaders are disabled by default, but you can activate "
"them by editing your :setting:`TEMPLATE_LOADERS` setting. :setting:"
"`TEMPLATE_LOADERS` should be a tuple of strings, where each string "
"represents a template loader class. Here are the template loaders that come "
"with Django:"
msgstr ""

# 51b2227ae0f0440da206259e90aa40d0
#: ../../ref/templates/api.txt:654
msgid ""
"Loads templates from the filesystem, according to :setting:`TEMPLATE_DIRS`. "
"This loader is enabled by default."
msgstr ""

# b8ee5b981d6b452ab14eca16e8f331c9
#: ../../ref/templates/api.txt:658
msgid ""
"Loads templates from Django apps on the filesystem. For each app in :setting:"
"`INSTALLED_APPS`, the loader looks for a ``templates`` subdirectory. If the "
"directory exists, Django looks for templates in there."
msgstr ""

# 48d7074334514cb0ac403327830e08eb
#: ../../ref/templates/api.txt:662
msgid ""
"This means you can store templates with your individual apps. This also "
"makes it easy to distribute Django apps with default templates."
msgstr ""

# 38bd1c8504a045629583779a4c3cc2c2
#: ../../ref/templates/api.txt:665
msgid "For example, for this setting::"
msgstr ""

# bf67f6a422e54dca8fa37ca2b90a417f
#: ../../ref/templates/api.txt:669
msgid ""
"...then ``get_template('foo.html')`` will look for templates in these "
"directories, in this order:"
msgstr ""

# 91a7f0f96feb41598a172ab788421e56
#: ../../ref/templates/api.txt:672
msgid "``/path/to/myproject/polls/templates/foo.html``"
msgstr ""

# bd7ce3af1d4543309aacbcdf8ac8444b
#: ../../ref/templates/api.txt:673
msgid "``/path/to/myproject/music/templates/foo.html``"
msgstr ""

# 04c73a10d68a45fbbf9ef4d4d00a769b
#: ../../ref/templates/api.txt:675
msgid ""
"Note that the loader performs an optimization when it is first imported: It "
"caches a list of which :setting:`INSTALLED_APPS` packages have a "
"``templates`` subdirectory."
msgstr ""

# 49e0044590b840ceb79bd35f885a2831
#: ../../ref/templates/api.txt:679
msgid "This loader is enabled by default."
msgstr ""

# ce2a25b669ee4bf08a984f1dd31d7ec9
#: ../../ref/templates/api.txt:682
msgid ""
"Just like ``app_directories`` above, but it loads templates from Python eggs "
"rather than from the filesystem."
msgstr ""

# efc4aa376af64478925271255c365323
# 20bb1c0bcb424e0ab796724346461155
#: ../../ref/templates/api.txt:685 ../../ref/templates/api.txt:717
msgid "This loader is disabled by default."
msgstr ""

# 0537a19bb307473d8d7fefaf136432c5
#: ../../ref/templates/api.txt:688
msgid ""
"By default, the templating system will read and compile your templates every "
"time they need to be rendered. While the Django templating system is quite "
"fast, the overhead from reading and compiling templates can add up."
msgstr ""

# 13c13aee0e9b455eaf2f4900ba60a41a
#: ../../ref/templates/api.txt:692
msgid ""
"The cached template loader is a class-based loader that you configure with a "
"list of other loaders that it should wrap. The wrapped loaders are used to "
"locate unknown templates when they are first encountered. The cached loader "
"then stores the compiled ``Template`` in memory. The cached ``Template`` "
"instance is returned for subsequent requests to load the same template."
msgstr ""

# 516fe45b918b4719b19990806f80c661
#: ../../ref/templates/api.txt:698
msgid ""
"For example, to enable template caching with the ``filesystem`` and "
"``app_directories`` template loaders you might use the following settings::"
msgstr ""

# 524f570e0dad476b999724a81d0afd81
#: ../../ref/templates/api.txt:710
msgid ""
"All of the built-in Django template tags are safe to use with the cached "
"loader, but if you're using custom template tags that come from third party "
"packages, or that you wrote yourself, you should ensure that the ``Node`` "
"implementation for each tag is thread-safe. For more information, see :ref:"
"`template tag thread safety considerations<template_tag_thread_safety>`."
msgstr ""

# eeea2eb077de42bd9852eb0866145e05
#: ../../ref/templates/api.txt:719
msgid ""
"Django uses the template loaders in order according to the :setting:"
"`TEMPLATE_LOADERS` setting. It uses each loader until a loader finds a match."
msgstr ""

# 54b77857e724476c829d200888ceecbc
#: ../../ref/templates/api.txt:724
msgid "The ``render_to_string`` shortcut"
msgstr ""

# c9b323809de74788a855878589b920aa
#: ../../ref/templates/api.txt:728
msgid ""
"To cut down on the repetitive nature of loading and rendering templates, "
"Django provides a shortcut function which largely automates the process: "
"``render_to_string()`` in :mod:`django.template.loader`, which loads a "
"template, renders it and returns the resulting string::"
msgstr ""

# 7d1ccbdb8f384a33b92c27ca41b68891
#: ../../ref/templates/api.txt:737
msgid ""
"The ``render_to_string`` shortcut takes one required argument -- "
"``template_name``, which should be the name of the template to load and "
"render (or a list of template names, in which case Django will use the first "
"template in the list that exists) -- and two optional arguments:"
msgstr ""

# 0633e44d6a314835bce68844bc39a569
#: ../../ref/templates/api.txt:743
msgid ""
"A dictionary to be used as variables and values for the template's context. "
"This can also be passed as the second positional argument."
msgstr ""

# b246484646714a56b37f67995939ab10
#: ../../ref/templates/api.txt:748
msgid ""
"An instance of ``Context`` or a subclass (e.g., an instance of "
"``RequestContext``) to use as the template's context. This can also be "
"passed as the third positional argument."
msgstr ""

# cf8d59a123e84504b351826b4304c0f1
#: ../../ref/templates/api.txt:752
msgid ""
"See also the :func:`~django.shortcuts.render_to_response()` shortcut, which "
"calls ``render_to_string`` and feeds the result into an :class:`~django.http."
"HttpResponse` suitable for returning directly from a view."
msgstr ""

# f770006c4081468e8d776053a86e9107
#: ../../ref/templates/api.txt:757
msgid "Configuring the template system in standalone mode"
msgstr ""

# 03a65f3e05234e26825dca20e92ca495
#: ../../ref/templates/api.txt:761
msgid ""
"This section is only of interest to people trying to use the template system "
"as an output component in another application. If you're using the template "
"system as part of a Django application, nothing here applies to you."
msgstr ""

# f78697993cdb4fb6a21d15e5b00c0cb5
#: ../../ref/templates/api.txt:766
msgid ""
"Normally, Django will load all the configuration information it needs from "
"its own default configuration file, combined with the settings in the module "
"given in the :envvar:`DJANGO_SETTINGS_MODULE` environment variable. But if "
"you're using the template system independently of the rest of Django, the "
"environment variable approach isn't very convenient, because you probably "
"want to configure the template system in line with the rest of your "
"application rather than dealing with settings files and pointing to them via "
"environment variables."
msgstr ""

# c0968cfba57e4fb5b913041e5584da37
#: ../../ref/templates/api.txt:774
msgid ""
"To solve this problem, you need to use the manual configuration option "
"described in :ref:`settings-without-django-settings-module`. Simply import "
"the appropriate pieces of the templating system and then, *before* you call "
"any of the templating functions, call :func:`django.conf.settings.configure()"
"` with any settings you wish to specify. You might want to consider setting "
"at least :setting:`TEMPLATE_DIRS` (if you're going to use template "
"loaders), :setting:`DEFAULT_CHARSET` (although the default of ``utf-8`` is "
"probably fine) and :setting:`TEMPLATE_DEBUG`. All available settings are "
"described in the :doc:`settings documentation </ref/settings>`, and any "
"setting starting with ``TEMPLATE_`` is of obvious interest."
msgstr ""

# 7a0e4a2f481d4aeb8d460c4e4b3506ba
#: ../../ref/templates/api.txt:788
msgid "Using an alternative template language"
msgstr ""

# 427727f49de346498176ff34e8191e1e
#: ../../ref/templates/api.txt:792
msgid ""
"The Django ``Template`` and ``Loader`` classes implement a simple API for "
"loading and rendering templates. By providing some simple wrapper classes "
"that implement this API we can use third party template systems like `Jinja2 "
"<http://jinja.pocoo.org/2/>`_ or `Cheetah <http://www.cheetahtemplate.org/"
">`_. This allows us to use third-party template libraries without giving up "
"useful Django features like the Django ``Context`` object and handy "
"shortcuts like :func:`~django.shortcuts.render_to_response()`."
msgstr ""

# c761273a76c24f8795b698c47b5ad833
#: ../../ref/templates/api.txt:800
msgid ""
"The core component of the Django templating system is the ``Template`` "
"class. This class has a very simple interface: it has a constructor that "
"takes a single positional argument specifying the template string, and a "
"``render()`` method that takes a :class:`~django.template.Context` object "
"and returns a string containing the rendered response."
msgstr ""

# cf5c429e2374405885de45b6191482ae
#: ../../ref/templates/api.txt:806
msgid ""
"Suppose we're using a template language that defines a ``Template`` object "
"with a ``render()`` method that takes a dictionary rather than a ``Context`` "
"object. We can write a simple wrapper that implements the Django "
"``Template`` interface::"
msgstr ""

# 03648e77ce7d4457918a89fe9183aaad
#: ../../ref/templates/api.txt:819
msgid ""
"That's all that's required to make our fictional ``Template`` class "
"compatible with the Django loading and rendering system!"
msgstr ""

# 19af1eb9afab482da382654eb5dbed66
#: ../../ref/templates/api.txt:822
msgid ""
"The next step is to write a ``Loader`` class that returns instances of our "
"custom template class instead of the default :class:`~django.template."
"Template`. Custom ``Loader`` classes should inherit from ``django.template."
"loader.BaseLoader`` and override the ``load_template_source()`` method, "
"which takes a ``template_name`` argument, loads the template from disk (or "
"elsewhere), and returns a tuple: ``(template_string, template_origin)``."
msgstr ""

# 49b9f30483244915a7e7398162a8471b
#: ../../ref/templates/api.txt:829
msgid ""
"The ``load_template()`` method of the ``Loader`` class retrieves the "
"template string by calling ``load_template_source()``, instantiates a "
"``Template`` from the template source, and returns a tuple: ``(template, "
"template_origin)``. Since this is the method that actually instantiates the "
"``Template``, we'll need to override it to use our custom template class "
"instead. We can inherit from the builtin :class:`django.template.loaders."
"app_directories.Loader` to take advantage of the ``load_template_source()`` "
"method implemented there::"
msgstr ""

# 968ec19b83d144c783db3ac24f333baf
#: ../../ref/templates/api.txt:846
msgid ""
"Finally, we need to modify our project settings, telling Django to use our "
"custom loader. Now we can write all of our templates in our alternative "
"template language while continuing to use the rest of the Django templating "
"system."
msgstr ""
