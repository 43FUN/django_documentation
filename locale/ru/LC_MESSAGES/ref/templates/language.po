# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2015.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-04-02 10:33+0300\n"
"PO-Revision-Date: 2015-03-19 15:06+0200\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

#: ../../ref/templates/language.txt:3
msgid "The Django template language"
msgstr ""

#: ../../ref/templates/language.txt:5
msgid ""
"This document explains the language syntax of the Django template system. If "
"you're looking for a more technical perspective on how it works and how to "
"extend it, see :doc:`/ref/templates/api`."
msgstr ""

#: ../../ref/templates/language.txt:9
msgid ""
"Django's template language is designed to strike a balance between power and "
"ease. It's designed to feel comfortable to those used to working with HTML. "
"If you have any exposure to other text-based template languages, such as "
"Smarty_ or Jinja2_, you should feel right at home with Django's templates."
msgstr ""

#: ../../ref/templates/language.txt:14 ../../ref/templates/language.txt:67
msgid "Philosophy"
msgstr ""

#: ../../ref/templates/language.txt:16
msgid ""
"If you have a background in programming, or if you're used to languages "
"which mix programming code directly into HTML, you'll want to bear in mind "
"that the Django template system is not simply Python embedded into HTML. "
"This is by design: the template system is meant to express presentation, not "
"program logic."
msgstr ""

#: ../../ref/templates/language.txt:22
msgid ""
"The Django template system provides tags which function similarly to some "
"programming constructs -- an :ttag:`if` tag for boolean tests, a :ttag:`for` "
"tag for looping, etc. -- but these are not simply executed as the "
"corresponding Python code, and the template system will not execute "
"arbitrary Python expressions. Only the tags, filters and syntax listed below "
"are supported by default (although you can add :doc:`your own extensions </"
"howto/custom-template-tags>` to the template language as needed)."
msgstr ""

#: ../../ref/templates/language.txt:35
msgid "Templates"
msgstr ""

#: ../../ref/templates/language.txt:39
msgid ""
"A template is simply a text file. It can generate any text-based format "
"(HTML, XML, CSV, etc.)."
msgstr ""

#: ../../ref/templates/language.txt:42
msgid ""
"A template contains **variables**, which get replaced with values when the "
"template is evaluated, and **tags**, which control the logic of the template."
msgstr ""

#: ../../ref/templates/language.txt:45
msgid ""
"Below is a minimal template that illustrates a few basics. Each element will "
"be explained later in this document."
msgstr ""

#: ../../ref/templates/language.txt:69
msgid ""
"Why use a text-based template instead of an XML-based one (like Zope's TAL)? "
"We wanted Django's template language to be usable for more than just XML/"
"HTML templates. At World Online, we use it for emails, JavaScript and CSV. "
"You can use the template language for any text-based format."
msgstr ""

#: ../../ref/templates/language.txt:75
msgid "Oh, and one more thing: making humans edit XML is sadistic!"
msgstr ""

#: ../../ref/templates/language.txt:78
msgid "Variables"
msgstr ""

#: ../../ref/templates/language.txt:80
msgid ""
"Variables look like this: ``{{ variable }}``. When the template engine "
"encounters a variable, it evaluates that variable and replaces it with the "
"result. Variable names consist of any combination of alphanumeric characters "
"and the underscore (``\"_\"``). The dot (``\".\"``) also appears in variable "
"sections, although that has a special meaning, as indicated below. "
"Importantly, *you cannot have spaces or punctuation characters in variable "
"names.*"
msgstr ""

#: ../../ref/templates/language.txt:88
msgid "Use a dot (``.``) to access attributes of a variable."
msgstr ""

#: ../../ref/templates/language.txt:90
msgid "Behind the scenes"
msgstr ""

#: ../../ref/templates/language.txt:92
msgid ""
"Technically, when the template system encounters a dot, it tries the "
"following lookups, in this order:"
msgstr ""

#: ../../ref/templates/language.txt:95
msgid "Dictionary lookup"
msgstr ""

#: ../../ref/templates/language.txt:96
msgid "Attribute or method lookup"
msgstr ""

#: ../../ref/templates/language.txt:97
msgid "Numeric index lookup"
msgstr ""

#: ../../ref/templates/language.txt:99
msgid ""
"If the resulting value is callable, it is called with no arguments. The "
"result of the call becomes the template value."
msgstr ""

#: ../../ref/templates/language.txt:102
msgid ""
"This lookup order can cause some unexpected behavior with objects that "
"override dictionary lookup. For example, consider the following code snippet "
"that attempts to loop over a ``collections.defaultdict``::"
msgstr ""

#: ../../ref/templates/language.txt:110
msgid ""
"Because dictionary lookup happens first, that behavior kicks in and provides "
"a default value instead of using the intended ``.iteritems()`` method. In "
"this case, consider converting to a dictionary first."
msgstr ""

#: ../../ref/templates/language.txt:114
msgid ""
"In the above example, ``{{ section.title }}`` will be replaced with the "
"``title`` attribute of the ``section`` object."
msgstr ""

#: ../../ref/templates/language.txt:117
msgid ""
"If you use a variable that doesn't exist, the template system will insert "
"the value of the ``string_if_invalid`` option, which is set to ``''`` (the "
"empty string) by default."
msgstr ""

#: ../../ref/templates/language.txt:121
msgid ""
"Note that \"bar\" in a template expression like ``{{ foo.bar }}`` will be "
"interpreted as a literal string and not using the value of the variable \"bar"
"\", if one exists in the template context."
msgstr ""

#: ../../ref/templates/language.txt:126
msgid "Filters"
msgstr ""

#: ../../ref/templates/language.txt:128
msgid "You can modify variables for display by using **filters**."
msgstr ""

#: ../../ref/templates/language.txt:130
msgid ""
"Filters look like this: ``{{ name|lower }}``. This displays the value of the "
"``{{ name }}`` variable after being filtered through the :tfilter:`lower` "
"filter, which converts text to lowercase. Use a pipe (``|``) to apply a "
"filter."
msgstr ""

#: ../../ref/templates/language.txt:134
msgid ""
"Filters can be \"chained.\" The output of one filter is applied to the next. "
"``{{ text|escape|linebreaks }}`` is a common idiom for escaping text "
"contents, then converting line breaks to ``<p>`` tags."
msgstr ""

#: ../../ref/templates/language.txt:138
msgid ""
"Some filters take arguments. A filter argument looks like this: ``{{ bio|"
"truncatewords:30 }}``. This will display the first 30 words of the ``bio`` "
"variable."
msgstr ""

#: ../../ref/templates/language.txt:142
msgid ""
"Filter arguments that contain spaces must be quoted; for example, to join a "
"list with commas and spaces you'd use ``{{ list|join:\", \" }}``."
msgstr ""

#: ../../ref/templates/language.txt:145
msgid ""
"Django provides about sixty built-in template filters. You can read all "
"about them in the :ref:`built-in filter reference <ref-templates-builtins-"
"filters>`. To give you a taste of what's available, here are some of the "
"more commonly used template filters:"
msgstr ""

#: ../../ref/templates/language.txt:157
msgid ":tfilter:`default`"
msgstr ""

#: ../../ref/templates/language.txt:151
msgid ""
"If a variable is false or empty, use given default. Otherwise, use the value "
"of the variable. For example::"
msgstr ""

#: ../../ref/templates/language.txt:156
msgid ""
"If ``value`` isn't provided or is empty, the above will display \"``nothing``"
"\"."
msgstr ""

#: ../../ref/templates/language.txt:165
msgid ":tfilter:`length`"
msgstr ""

#: ../../ref/templates/language.txt:160
msgid ""
"Returns the length of the value. This works for both strings and lists. For "
"example::"
msgstr ""

#: ../../ref/templates/language.txt:165
msgid "If ``value`` is ``['a', 'b', 'c', 'd']``, the output will be ``4``."
msgstr ""

#: ../../ref/templates/language.txt:173
msgid ":tfilter:`filesizeformat`"
msgstr ""

#: ../../ref/templates/language.txt:168
msgid ""
"Formats the value like a \"human-readable\" file size (i.e. ``'13 KB'``, "
"``'4.1 MB'``, ``'102 bytes'``, etc). For example::"
msgstr ""

#: ../../ref/templates/language.txt:173
msgid "If ``value`` is 123456789, the output would be ``117.7 MB``."
msgstr ""

#: ../../ref/templates/language.txt:175
msgid ""
"Again, these are just a few examples; see the :ref:`built-in filter "
"reference <ref-templates-builtins-filters>` for the complete list."
msgstr ""

#: ../../ref/templates/language.txt:178
msgid ""
"You can also create your own custom template filters; see :doc:`/howto/"
"custom-template-tags`."
msgstr ""

#: ../../ref/templates/language.txt:183 ../../ref/templates/language.txt:254
msgid ""
"Django's admin interface can include a complete reference of all template "
"tags and filters available for a given site. See :doc:`/ref/contrib/admin/"
"admindocs`."
msgstr ""

#: ../../ref/templates/language.txt:188
msgid "Tags"
msgstr ""

#: ../../ref/templates/language.txt:190
msgid ""
"Tags look like this: ``{% tag %}``. Tags are more complex than variables: "
"Some create text in the output, some control flow by performing loops or "
"logic, and some load external information into the template to be used by "
"later variables."
msgstr ""

#: ../../ref/templates/language.txt:194
msgid ""
"Some tags require beginning and ending tags (i.e. ``{% tag %} ... tag "
"contents ... {% endtag %}``)."
msgstr ""

#: ../../ref/templates/language.txt:197
msgid ""
"Django ships with about two dozen built-in template tags. You can read all "
"about them in the :ref:`built-in tag reference <ref-templates-builtins-"
"tags>`. To give you a taste of what's available, here are some of the more "
"commonly used tags:"
msgstr ""

#: ../../ref/templates/language.txt:210
msgid ":ttag:`for`"
msgstr ""

#: ../../ref/templates/language.txt:203
msgid ""
"Loop over each item in an array.  For example, to display a list of athletes "
"provided in ``athlete_list``::"
msgstr ""

#: ../../ref/templates/language.txt:240
msgid ":ttag:`if`, ``elif``, and ``else``"
msgstr ""

#: ../../ref/templates/language.txt:213
msgid ""
"Evaluates a variable, and if that variable is \"true\" the contents of the "
"block are displayed::"
msgstr ""

#: ../../ref/templates/language.txt:224
msgid ""
"In the above, if ``athlete_list`` is not empty, the number of athletes will "
"be displayed by the ``{{ athlete_list|length }}`` variable. Otherwise, if "
"``athlete_in_locker_room_list`` is not empty, the message \"Athletes should "
"be out...\" will be displayed. If both lists are empty, \"No athletes.\" "
"will be displayed."
msgstr ""

#: ../../ref/templates/language.txt:230
msgid "You can also use filters and various operators in the :ttag:`if` tag::"
msgstr ""

#: ../../ref/templates/language.txt:238
msgid ""
"While the above example works, be aware that most template filters return "
"strings, so mathematical comparisons using filters will generally not work "
"as you expect. :tfilter:`length` is an exception."
msgstr ""

#: ../../ref/templates/language.txt:244
msgid ":ttag:`block` and :ttag:`extends`"
msgstr ""

#: ../../ref/templates/language.txt:243
msgid ""
"Set up `template inheritance`_ (see below), a powerful way of cutting down "
"on \"boilerplate\" in templates."
msgstr ""

#: ../../ref/templates/language.txt:246
msgid ""
"Again, the above is only a selection of the whole list; see the :ref:`built-"
"in tag reference <ref-templates-builtins-tags>` for the complete list."
msgstr ""

#: ../../ref/templates/language.txt:249
msgid ""
"You can also create your own custom template tags; see :doc:`/howto/custom-"
"template-tags`."
msgstr ""

#: ../../ref/templates/language.txt:261
msgid "Comments"
msgstr ""

#: ../../ref/templates/language.txt:263
msgid ""
"To comment-out part of a line in a template, use the comment syntax: ``{# #}"
"``."
msgstr ""

#: ../../ref/templates/language.txt:265
msgid "For example, this template would render as ``'hello'``::"
msgstr ""

#: ../../ref/templates/language.txt:269
msgid "A comment can contain any template code, invalid or not. For example::"
msgstr ""

#: ../../ref/templates/language.txt:273
msgid ""
"This syntax can only be used for single-line comments (no newlines are "
"permitted between the ``{#`` and ``#}`` delimiters). If you need to comment "
"out a multiline portion of the template, see the :ttag:`comment` tag."
msgstr ""

#: ../../ref/templates/language.txt:280
msgid "Template inheritance"
msgstr ""

#: ../../ref/templates/language.txt:282
msgid ""
"The most powerful -- and thus the most complex -- part of Django's template "
"engine is template inheritance. Template inheritance allows you to build a "
"base \"skeleton\" template that contains all the common elements of your "
"site and defines **blocks** that child templates can override."
msgstr ""

#: ../../ref/templates/language.txt:287
msgid ""
"It's easiest to understand template inheritance by starting with an example::"
msgstr ""

#: ../../ref/templates/language.txt:312
msgid ""
"This template, which we'll call ``base.html``, defines a simple HTML "
"skeleton document that you might use for a simple two-column page. It's the "
"job of \"child\" templates to fill the empty blocks with content."
msgstr ""

#: ../../ref/templates/language.txt:316
msgid ""
"In this example, the :ttag:`block` tag defines three blocks that child "
"templates can fill in. All the :ttag:`block` tag does is to tell the "
"template engine that a child template may override those portions of the "
"template."
msgstr ""

#: ../../ref/templates/language.txt:320
msgid "A child template might look like this::"
msgstr ""

#: ../../ref/templates/language.txt:333
msgid ""
"The :ttag:`extends` tag is the key here. It tells the template engine that "
"this template \"extends\" another template. When the template system "
"evaluates this template, first it locates the parent -- in this case, \"base."
"html\"."
msgstr ""

#: ../../ref/templates/language.txt:337
msgid ""
"At that point, the template engine will notice the three :ttag:`block` tags "
"in ``base.html`` and replace those blocks with the contents of the child "
"template. Depending on the value of ``blog_entries``, the output might look "
"like::"
msgstr ""

#: ../../ref/templates/language.txt:367
msgid ""
"Note that since the child template didn't define the ``sidebar`` block, the "
"value from the parent template is used instead. Content within a ``{% block "
"%}`` tag in a parent template is always used as a fallback."
msgstr ""

#: ../../ref/templates/language.txt:371
msgid ""
"You can use as many levels of inheritance as needed. One common way of using "
"inheritance is the following three-level approach:"
msgstr ""

#: ../../ref/templates/language.txt:374
msgid ""
"Create a ``base.html`` template that holds the main look-and-feel of your "
"site."
msgstr ""

#: ../../ref/templates/language.txt:376
msgid ""
"Create a ``base_SECTIONNAME.html`` template for each \"section\" of your "
"site. For example, ``base_news.html``, ``base_sports.html``. These templates "
"all extend ``base.html`` and include section-specific styles/design."
msgstr ""

#: ../../ref/templates/language.txt:380
msgid ""
"Create individual templates for each type of page, such as a news article or "
"blog entry. These templates extend the appropriate section template."
msgstr ""

#: ../../ref/templates/language.txt:384
msgid ""
"This approach maximizes code reuse and makes it easy to add items to shared "
"content areas, such as section-wide navigation."
msgstr ""

#: ../../ref/templates/language.txt:387
msgid "Here are some tips for working with inheritance:"
msgstr ""

#: ../../ref/templates/language.txt:389
msgid ""
"If you use :ttag:`{% extends %}<extends>` in a template, it must be the "
"first template tag in that template. Template inheritance won't work, "
"otherwise."
msgstr ""

#: ../../ref/templates/language.txt:392
msgid ""
"More :ttag:`{% block %}<block>` tags in your base templates are better. "
"Remember, child templates don't have to define all parent blocks, so you can "
"fill in reasonable defaults in a number of blocks, then only define the ones "
"you need later. It's better to have more hooks than fewer hooks."
msgstr ""

#: ../../ref/templates/language.txt:397
msgid ""
"If you find yourself duplicating content in a number of templates, it "
"probably means you should move that content to a ``{% block %}`` in a parent "
"template."
msgstr ""

#: ../../ref/templates/language.txt:401
msgid ""
"If you need to get the content of the block from the parent template, the "
"``{{ block.super }}`` variable will do the trick. This is useful if you want "
"to add to the contents of a parent block instead of completely overriding "
"it. Data inserted using ``{{ block.super }}`` will not be automatically "
"escaped (see the `next section`_), since it was already escaped, if "
"necessary, in the parent template."
msgstr ""

#: ../../ref/templates/language.txt:408
msgid ""
"For extra readability, you can optionally give a *name* to your ``{% "
"endblock %}`` tag. For example::"
msgstr ""

#: ../../ref/templates/language.txt:415
msgid ""
"In larger templates, this technique helps you see which ``{% block %}`` tags "
"are being closed."
msgstr ""

#: ../../ref/templates/language.txt:418
msgid ""
"Finally, note that you can't define multiple :ttag:`block` tags with the "
"same name in the same template. This limitation exists because a block tag "
"works in \"both\" directions. That is, a block tag doesn't just provide a "
"hole to fill -- it also defines the content that fills the hole in the "
"*parent*. If there were two similarly-named :ttag:`block` tags in a "
"template, that template's parent wouldn't know which one of the blocks' "
"content to use."
msgstr ""

#: ../../ref/templates/language.txt:429
msgid "Automatic HTML escaping"
msgstr ""

#: ../../ref/templates/language.txt:431
msgid ""
"When generating HTML from templates, there's always a risk that a variable "
"will include characters that affect the resulting HTML. For example, "
"consider this template fragment::"
msgstr ""

#: ../../ref/templates/language.txt:437
msgid ""
"At first, this seems like a harmless way to display a user's name, but "
"consider what would happen if the user entered their name as this::"
msgstr ""

#: ../../ref/templates/language.txt:442
msgid "With this name value, the template would be rendered as::"
msgstr ""

#: ../../ref/templates/language.txt:446
msgid "...which means the browser would pop-up a JavaScript alert box!"
msgstr ""

#: ../../ref/templates/language.txt:448
msgid "Similarly, what if the name contained a ``'<'`` symbol, like this?"
msgstr ""

#: ../../ref/templates/language.txt:454
msgid "That would result in a rendered template like this::"
msgstr ""

#: ../../ref/templates/language.txt:458
msgid ""
"...which, in turn, would result in the remainder of the Web page being "
"bolded!"
msgstr ""

#: ../../ref/templates/language.txt:460
msgid ""
"Clearly, user-submitted data shouldn't be trusted blindly and inserted "
"directly into your Web pages, because a malicious user could use this kind "
"of hole to do potentially bad things. This type of security exploit is "
"called a `Cross Site Scripting`_ (XSS) attack."
msgstr ""

#: ../../ref/templates/language.txt:465
msgid "To avoid this problem, you have two options:"
msgstr ""

#: ../../ref/templates/language.txt:467
msgid ""
"One, you can make sure to run each untrusted variable through the :tfilter:"
"`escape` filter (documented below), which converts potentially harmful HTML "
"characters to unharmful ones. This was the default solution in Django for "
"its first few years, but the problem is that it puts the onus on *you*, the "
"developer / template author, to ensure you're escaping everything. It's easy "
"to forget to escape data."
msgstr ""

#: ../../ref/templates/language.txt:474
msgid ""
"Two, you can take advantage of Django's automatic HTML escaping. The "
"remainder of this section describes how auto-escaping works."
msgstr ""

#: ../../ref/templates/language.txt:477
msgid ""
"By default in Django, every template automatically escapes the output of "
"every variable tag. Specifically, these five characters are escaped:"
msgstr ""

#: ../../ref/templates/language.txt:481
msgid "``<`` is converted to ``&lt;``"
msgstr ""

#: ../../ref/templates/language.txt:482
msgid "``>`` is converted to ``&gt;``"
msgstr ""

#: ../../ref/templates/language.txt:483
msgid "``'`` (single quote) is converted to ``&#39;``"
msgstr ""

#: ../../ref/templates/language.txt:484
msgid "``\"`` (double quote) is converted to ``&quot;``"
msgstr ""

#: ../../ref/templates/language.txt:485
msgid "``&`` is converted to ``&amp;``"
msgstr ""

#: ../../ref/templates/language.txt:487
msgid ""
"Again, we stress that this behavior is on by default. If you're using "
"Django's template system, you're protected."
msgstr ""

#: ../../ref/templates/language.txt:493
msgid "How to turn it off"
msgstr ""

#: ../../ref/templates/language.txt:495
msgid ""
"If you don't want data to be auto-escaped, on a per-site, per-template level "
"or per-variable level, you can turn it off in several ways."
msgstr ""

#: ../../ref/templates/language.txt:498
msgid ""
"Why would you want to turn it off? Because sometimes, template variables "
"contain data that you *intend* to be rendered as raw HTML, in which case you "
"don't want their contents to be escaped. For example, you might store a blob "
"of HTML in your database and want to embed that directly into your template. "
"Or, you might be using Django's template system to produce text that is "
"*not* HTML -- like an email message, for instance."
msgstr ""

#: ../../ref/templates/language.txt:506
msgid "For individual variables"
msgstr ""

#: ../../ref/templates/language.txt:508
msgid ""
"To disable auto-escaping for an individual variable, use the :tfilter:`safe` "
"filter::"
msgstr ""

#: ../../ref/templates/language.txt:514
msgid ""
"Think of *safe* as shorthand for *safe from further escaping* or *can be "
"safely interpreted as HTML*. In this example, if ``data`` contains "
"``'<b>'``, the output will be::"
msgstr ""

#: ../../ref/templates/language.txt:522
msgid "For template blocks"
msgstr ""

#: ../../ref/templates/language.txt:524
msgid ""
"To control auto-escaping for a template, wrap the template (or just a "
"particular section of the template) in the :ttag:`autoescape` tag, like so::"
msgstr ""

#: ../../ref/templates/language.txt:531
msgid ""
"The :ttag:`autoescape` tag takes either ``on`` or ``off`` as its argument. "
"At times, you might want to force auto-escaping when it would otherwise be "
"disabled. Here is an example template::"
msgstr ""

#: ../../ref/templates/language.txt:546
msgid ""
"The auto-escaping tag passes its effect onto templates that extend the "
"current one as well as templates included via the :ttag:`include` tag, just "
"like all block tags. For example:"
msgstr ""

#: ../../ref/templates/language.txt:566
msgid ""
"Because auto-escaping is turned off in the base template, it will also be "
"turned off in the child template, resulting in the following rendered HTML "
"when the ``greeting`` variable contains the string ``<b>Hello!</b>``::"
msgstr ""

#: ../../ref/templates/language.txt:574
msgid "Notes"
msgstr ""

#: ../../ref/templates/language.txt:576
msgid ""
"Generally, template authors don't need to worry about auto-escaping very "
"much. Developers on the Python side (people writing views and custom "
"filters) need to think about the cases in which data shouldn't be escaped, "
"and mark data appropriately, so things Just Work in the template."
msgstr ""

#: ../../ref/templates/language.txt:581
msgid ""
"If you're creating a template that might be used in situations where you're "
"not sure whether auto-escaping is enabled, then add an :tfilter:`escape` "
"filter to any variable that needs escaping. When auto-escaping is on, "
"there's no danger of the :tfilter:`escape` filter *double-escaping* data -- "
"the :tfilter:`escape` filter does not affect auto-escaped variables."
msgstr ""

#: ../../ref/templates/language.txt:590
msgid "String literals and automatic escaping"
msgstr ""

#: ../../ref/templates/language.txt:592
msgid "As we mentioned earlier, filter arguments can be strings::"
msgstr ""

#: ../../ref/templates/language.txt:596
msgid ""
"All string literals are inserted **without** any automatic escaping into the "
"template -- they act as if they were all passed through the :tfilter:`safe` "
"filter. The reasoning behind this is that the template author is in control "
"of what goes into the string literal, so they can make sure the text is "
"correctly escaped when the template is written."
msgstr ""

#: ../../ref/templates/language.txt:602
msgid "This means you would write ::"
msgstr ""

#: ../../ref/templates/language.txt:606
msgid "...rather than::"
msgstr ""

#: ../../ref/templates/language.txt:610
msgid ""
"This doesn't affect what happens to data coming from the variable itself. "
"The variable's contents are still automatically escaped, if necessary, "
"because they're beyond the control of the template author."
msgstr ""

#: ../../ref/templates/language.txt:617
msgid "Accessing method calls"
msgstr ""

#: ../../ref/templates/language.txt:619
msgid ""
"Most method calls attached to objects are also available from within "
"templates. This means that templates have access to much more than just "
"class attributes (like field names) and variables passed in from views. For "
"example, the Django ORM provides the :ref:`\"entry_set\"<topics-db-queries-"
"related>` syntax for finding a collection of objects related on a foreign "
"key. Therefore, given a model called \"comment\" with a foreign key "
"relationship to a model called \"task\" you can loop through all comments "
"attached to a given task like this::"
msgstr ""

#: ../../ref/templates/language.txt:631
msgid ""
"Similarly, :doc:`QuerySets</ref/models/querysets>` provide a ``count()`` "
"method to count the number of objects they contain. Therefore, you can "
"obtain a count of all comments related to the current task with::"
msgstr ""

#: ../../ref/templates/language.txt:637
msgid ""
"And of course you can easily access methods you've explicitly defined on "
"your own models:"
msgstr ""

#: ../../ref/templates/language.txt:652
msgid ""
"Because Django intentionally limits the amount of logic processing available "
"in the template language, it is not possible to pass arguments to method "
"calls accessed from within templates. Data should be calculated in views, "
"then passed to templates for display."
msgstr ""

#: ../../ref/templates/language.txt:660
msgid "Custom tag and filter libraries"
msgstr ""

#: ../../ref/templates/language.txt:662
msgid ""
"Certain applications provide custom tag and filter libraries. To access them "
"in a template, ensure the application is in :setting:`INSTALLED_APPS` (we'd "
"add ``'django.contrib.humanize'`` for this example), and then use the :ttag:"
"`load` tag in a template::"
msgstr ""

#: ../../ref/templates/language.txt:671
msgid ""
"In the above, the :ttag:`load` tag loads the ``humanize`` tag library, which "
"then makes the ``intcomma`` filter available for use. If you've enabled :mod:"
"`django.contrib.admindocs`, you can consult the documentation area in your "
"admin to find the list of custom libraries in your installation."
msgstr ""

#: ../../ref/templates/language.txt:676
msgid ""
"The :ttag:`load` tag can take multiple library names, separated by spaces. "
"Example::"
msgstr ""

#: ../../ref/templates/language.txt:681
msgid ""
"See :doc:`/howto/custom-template-tags` for information on writing your own "
"custom template libraries."
msgstr ""

#: ../../ref/templates/language.txt:685
msgid "Custom libraries and template inheritance"
msgstr ""

#: ../../ref/templates/language.txt:687
msgid ""
"When you load a custom tag or filter library, the tags/filters are only made "
"available to the current template -- not any parent or child templates along "
"the template-inheritance path."
msgstr ""

#: ../../ref/templates/language.txt:691
msgid ""
"For example, if a template ``foo.html`` has ``{% load humanize %}``, a child "
"template (e.g., one that has ``{% extends \"foo.html\" %}``) will *not* have "
"access to the humanize template tags and filters. The child template is "
"responsible for its own ``{% load humanize %}``."
msgstr ""

#: ../../ref/templates/language.txt:696
msgid "This is a feature for the sake of maintainability and sanity."
msgstr ""

#: ../../ref/templates/language.txt:701
msgid ":doc:`The Templates Reference </ref/templates/index>`"
msgstr ""

#: ../../ref/templates/language.txt:701
msgid ""
"Covers built-in tags, built-in filters, using an alternative template, "
"language, and more."
msgstr ""
