# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2014.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-07-30 13:35+0300\n"
"PO-Revision-Date: 2014-07-11 11:43+0300\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# 6184e981af5f4369ad53ad53c6fb45d4
#: ../../ref/applications.txt:3
msgid "Applications"
msgstr ""

# 3d0a497f10ee412da39876c55693358f
#: ../../ref/applications.txt:9
msgid ""
"Django contains a registry of installed applications that stores "
"configuration and provides introspection. It also maintains a list of "
"available :doc:`models </topics/db/models>`."
msgstr ""

# dfd89330fa7d452e81c49f85c715e64b
#: ../../ref/applications.txt:13
msgid ""
"This registry is simply called :attr:`~django.apps.apps` and it's available "
"in :mod:`django.apps`::"
msgstr ""

# 26e4aec6f85849d7a7e6e80a2aa062fd
#: ../../ref/applications.txt:21
msgid "Projects and applications"
msgstr ""

# fe58c65cd28443a4982031254d26d37d
#: ../../ref/applications.txt:23
msgid ""
"Django has historically used the term **project** to describe an "
"installation of Django. A project is defined primarily by a settings module."
msgstr ""

# 42159b1d350a4e95897f8cd71a9fadc8
#: ../../ref/applications.txt:26
msgid ""
"The term **application** describes a Python package that provides some set "
"of features. Applications may be reused in various projects."
msgstr ""

# 162227c8122143e88931a9f35ee4536e
#: ../../ref/applications.txt:30
msgid ""
"This terminology is somewhat confusing these days as it became common to use "
"the phrase \"web app\" to describe what equates to a Django project."
msgstr ""

# 049a1578bc584030b2771cc08c5d9b01
#: ../../ref/applications.txt:33
msgid ""
"Applications include some combination of models, views, templates, template "
"tags, static files, URLs, middleware, etc. They're generally wired into "
"projects with the :setting:`INSTALLED_APPS` setting and optionally with "
"other mechanisms such as URLconfs, the :setting:`MIDDLEWARE_CLASSES` "
"setting, or template inheritance."
msgstr ""

# 717b82cd64724e77b9c426b3213fab40
#: ../../ref/applications.txt:39
msgid ""
"It is important to understand that a Django application is just a set of "
"code that interacts with various parts of the framework. There's no such "
"thing as an ``Application`` object. However, there's a few places where "
"Django needs to interact with installed applications, mainly for "
"configuration and also for introspection. That's why the application "
"registry maintains metadata in an :class:`~django.apps.AppConfig` instance "
"for each installed application."
msgstr ""

# c89ec388166047e599f9204e50d97659
#: ../../ref/applications.txt:47
msgid "Configuring applications"
msgstr ""

# 1d4f661ed9f84cadb674ea65f1e5b76c
#: ../../ref/applications.txt:49
msgid ""
"To configure an application, subclass :class:`~django.apps.AppConfig` and "
"put the dotted path to that subclass in :setting:`INSTALLED_APPS`."
msgstr ""

# b87c9ee35ef545f5ad2ad65d3e6dfd6a
#: ../../ref/applications.txt:52
msgid ""
"When :setting:`INSTALLED_APPS` simply contains the dotted path to an "
"application module, Django checks for a ``default_app_config`` variable in "
"that module."
msgstr ""

# 51228743eea2451c841c3e6ab85c341e
#: ../../ref/applications.txt:56
msgid ""
"If it's defined, it's the dotted path to the :class:`~django.apps.AppConfig` "
"subclass for that application."
msgstr ""

# 0c770b52c3c24ce4a4e398aedec27c74
#: ../../ref/applications.txt:59
msgid ""
"If there is no ``default_app_config``, Django uses the base :class:`~django."
"apps.AppConfig` class."
msgstr ""

# 9db3d8a05cb841a9aeff9111569c881e
#: ../../ref/applications.txt:63
msgid "For application authors"
msgstr ""

# 73481a9f0f4e4564bd0ed04416aa588b
#: ../../ref/applications.txt:65
msgid ""
"If you're creating a pluggable app called \"Rock ’n’ roll\", here's how you "
"would provide a proper name for the admin::"
msgstr ""

# 3a97b6ca624043db9da24c9b2c1e1189
#: ../../ref/applications.txt:76
msgid ""
"You can make your application load this :class:`~django.apps.AppConfig` "
"subclass by default as follows::"
msgstr ""

# 3a0d673329434c0ba9b3dfd80134af12
#: ../../ref/applications.txt:83
msgid ""
"That will cause ``RockNRollConfig`` to be used when :setting:"
"`INSTALLED_APPS` just contains ``'rock_n_roll'``. This allows you to make "
"use of :class:`~django.apps.AppConfig` features without requiring your users "
"to update their :setting:`INSTALLED_APPS` setting."
msgstr ""

# 7d98c5f6c8144a5dbbb277486704356b
#: ../../ref/applications.txt:88
msgid ""
"Of course, you can also tell your users to put ``'rock_n_roll.apps."
"RockNRollConfig'`` in their :setting:`INSTALLED_APPS` setting. You can even "
"provide several different :class:`~django.apps.AppConfig` subclasses with "
"different behaviors and allow your users to choose one via their :setting:"
"`INSTALLED_APPS` setting."
msgstr ""

# 301a4ac46a8442d48a01addb22759724
#: ../../ref/applications.txt:94
msgid ""
"The recommended convention is to put the configuration class in a submodule "
"of the application called ``apps``. However, this isn't enforced by Django."
msgstr ""

# 24f11e3f1c284364bea53680d90276bd
#: ../../ref/applications.txt:97
msgid ""
"You must include the :attr:`~django.apps.AppConfig.name` attribute for "
"Django to determine which application this configuration applies to. You can "
"define any attributes documented in the :class:`~django.apps.AppConfig` API "
"reference."
msgstr ""

# 0caf3c801b204356a8cd9e8e62a2c286
#: ../../ref/applications.txt:104
msgid ""
"If your code imports the application registry in an application's ``__init__."
"py``, the name ``apps`` will clash with the ``apps`` submodule. The best "
"practice is to move that code to a submodule and import it. A workaround is "
"to import the registry under a different name::"
msgstr ""

# 20f5921b5af949e6a1f946f4d2271b52
#: ../../ref/applications.txt:112
msgid "For application users"
msgstr ""

# 51db10dd03224d6aa50d3ded32677f8c
#: ../../ref/applications.txt:114
msgid ""
"If you're using \"Rock ’n’ roll\" in a project called ``anthology``, but you "
"want it to show up as \"Gypsy jazz\" instead, you can provide your own "
"configuration::"
msgstr ""

# 5a697c03020b44f8886faedf9edc5d54
#: ../../ref/applications.txt:132
msgid ""
"Again, defining project-specific configuration classes in a submodule called "
"``apps`` is a convention, not a requirement."
msgstr ""

# 3e8c358b7b1242b2ac60127000020973
#: ../../ref/applications.txt:136
msgid "Application configuration"
msgstr ""

# 95c5f5bb807846dc9c28d2e74718db60
#: ../../ref/applications.txt:140
msgid ""
"Application configuration objects store metadata for an application. Some "
"attributes can be configured in :class:`~django.apps.AppConfig` subclasses. "
"Others are set by Django and read-only."
msgstr ""

# 77bcc150ba7f4ece9834ef0b23a13d29
#: ../../ref/applications.txt:145
msgid "Configurable attributes"
msgstr ""

# b5b6a9705693426d9dee8ced333554b5
#: ../../ref/applications.txt:149
msgid "Full Python path to the application, e.g. ``'django.contrib.admin'``."
msgstr ""

# 4b1530adc94e43e9a8964489a7ccbd04
#: ../../ref/applications.txt:151
msgid ""
"This attribute defines which application the configuration applies to. It "
"must be set in all :class:`~django.apps.AppConfig` subclasses."
msgstr ""

# 2587693d6192489da11ff99030a4548c
# a753a8157e1043158a8271042735ce13
#: ../../ref/applications.txt:154 ../../ref/applications.txt:164
msgid "It must be unique across a Django project."
msgstr ""

# c78628924c74443e88dac4232a6c63a1
#: ../../ref/applications.txt:158
msgid "Short name for the application, e.g. ``'admin'``"
msgstr ""

# 27b61fc3a8d54a8f99869e6ae661f877
#: ../../ref/applications.txt:160
msgid ""
"This attribute allows relabeling an application when two applications have "
"conflicting labels. It defaults to the last component of ``name``. It should "
"be a valid Python identifier."
msgstr ""

# 1bc08e5ab501449eaf5a8431d41b6b0b
#: ../../ref/applications.txt:168
msgid "Human-readable name for the application, e.g. \"Administration\"."
msgstr ""

# b71a553106fe4d868d766edff07a3ac1
#: ../../ref/applications.txt:170
msgid "This attribute defaults to ``label.title()``."
msgstr ""

# ea53f0314a0e4a97a08340be677a617d
#: ../../ref/applications.txt:174
msgid ""
"Filesystem path to the application directory, e.g. ``'/usr/lib/python2.7/"
"dist-packages/django/contrib/admin'``."
msgstr ""

# 6439d92ed2ca49dfb4797dcbdfd9effd
#: ../../ref/applications.txt:177
msgid ""
"In most cases, Django can automatically detect and set this, but you can "
"also provide an explicit override as a class attribute on your :class:"
"`~django.apps.AppConfig` subclass. In a few situations this is required; for "
"instance if the app package is a `namespace package`_ with multiple paths."
msgstr ""

# e81dac903c014139afe2518344847e7d
#: ../../ref/applications.txt:184
msgid "Read-only attributes"
msgstr ""

# a1d9be5c0a7449dda4639360a2399221
#: ../../ref/applications.txt:188
msgid ""
"Root module for the application, e.g. ``<module 'django.contrib.admin' from "
"'django/contrib/admin/__init__.pyc'>``."
msgstr ""

# abf90fd4ca3346c5939575a64d3f7fef
#: ../../ref/applications.txt:193
msgid ""
"Module containing the models, e.g. ``<module 'django.contrib.admin.models' "
"from 'django/contrib/admin/models.pyc'>``."
msgstr ""

# b291181cf9b84179bc331041ce54cc22
#: ../../ref/applications.txt:196
msgid ""
"It may be ``None`` if the application doesn't contain a ``models`` module. "
"Note that the database related signals such as :data:`~django.db.models."
"signals.pre_migrate` and :data:`~django.db.models.signals.post_migrate` are "
"only emitted for applications that have a ``models`` module."
msgstr ""

# 317a63a3e02441118c1c71d57a3460b8
#: ../../ref/applications.txt:203
msgid "Methods"
msgstr ""

# 857a7693bc384a68b86672cb00d50dae
#: ../../ref/applications.txt:207
msgid "Returns an iterable of :class:`~django.db.models.Model` classes."
msgstr ""

# b3c6725f378b4b8c8edd5d045fe87aa3
#: ../../ref/applications.txt:211
msgid ""
"Returns the :class:`~django.db.models.Model` with the given ``model_name``. "
"Raises :exc:`LookupError` if no such model exists. ``model_name`` is case-"
"insensitive."
msgstr ""

# 1fe323cf62c44e248a671b6fccfc44b5
#: ../../ref/applications.txt:217
msgid ""
"Subclasses can override this method to perform initialization tasks such as "
"registering signals. It is called as soon as the registry is fully populated."
msgstr ""

# ac9390303ea74dec8b57bada4fa86aee
#: ../../ref/applications.txt:221
msgid ""
"You cannot import models in modules that define application configuration "
"classes, but you can use :meth:`get_model` to access a model class by name, "
"like this::"
msgstr ""

# 0572ebf84f8d4e2c9f3050d49a16135b
#: ../../ref/applications.txt:230
msgid ""
"Although you can access model classes as described above, avoid interacting "
"with the database in your :meth:`ready()` implementation. This includes "
"model methods that execute queries (:meth:`~django.db.models.Model.save()`, :"
"meth:`~django.db.models.Model.delete()`, manager methods etc.), and also raw "
"SQL queries via ``django.db.connection``. Your :meth:`ready()` method will "
"run during startup of every management command. For example, even though the "
"test database configuration is separate from the production settings, "
"``manage.py test`` would still execute some queries against your "
"**production** database!"
msgstr ""

# 88ac827c1ef741bf80ae509e93c98cc0
#: ../../ref/applications.txt:243
msgid ""
"In the usual initialization process, the ``ready`` method is only called "
"once by Django. But in some corner cases, particularly in tests which are "
"fiddling with installed applications, ``ready`` might be called more than "
"once. In that case, either write idempotents methods, or put a flag on your "
"``AppConfig`` classes to prevent re-running code which should be executed "
"exactly one time."
msgstr ""

# c97d9c5ba502478d8dfcc7e7f3293169
#: ../../ref/applications.txt:253
msgid "Namespace packages as apps (Python 3.3+)"
msgstr ""

# 4143b6da920a446f9f905b2ac285201b
#: ../../ref/applications.txt:255
msgid ""
"Python versions 3.3 and later support Python packages without an ``__init__."
"py`` file. These packages are known as \"namespace packages\" and may be "
"spread across multiple directories at different locations on ``sys.path`` "
"(see :pep:`420`)."
msgstr ""

# 1075e23b9c9b490991f25b821997e743
#: ../../ref/applications.txt:260
msgid ""
"Django applications require a single base filesystem path where Django "
"(depending on configuration) will search for templates, static assets, etc. "
"Thus, namespace packages may only be Django applications if one of the "
"following is true:"
msgstr ""

# fd150b061fbc4b35a5e6a81c91e91ea9
#: ../../ref/applications.txt:265
msgid ""
"The namespace package actually has only a single location (i.e. is not "
"spread across more than one directory.)"
msgstr ""

# cc394dde190244d0aa1645eca2a3ad6e
#: ../../ref/applications.txt:268
msgid ""
"The :class:`~django.apps.AppConfig` class used to configure the application "
"has a :attr:`~django.apps.AppConfig.path` class attribute, which is the "
"absolute directory path Django will use as the single base path for the "
"application."
msgstr ""

# fe7b5a0918334ddb9396a99299f7e72f
#: ../../ref/applications.txt:273
msgid ""
"If neither of these conditions is met, Django will raise :exc:`~django.core."
"exceptions.ImproperlyConfigured`."
msgstr ""

# 1c095ff53dd04e2eafa8477ffb23e51e
#: ../../ref/applications.txt:277
msgid "Application registry"
msgstr ""

# df39fc1279904b3781696685494d7d62
#: ../../ref/applications.txt:281
msgid ""
"The application registry provides the following public API. Methods that "
"aren't listed below are considered private and may change without notice."
msgstr ""

# a60f9a8c3189491e975a252795b2094d
#: ../../ref/applications.txt:286
msgid ""
"Boolean attribute that is set to ``True`` when the registry is fully "
"populated."
msgstr ""

# 6e6601037172493eb50aa5b86a5679cd
#: ../../ref/applications.txt:291
msgid "Returns an iterable of :class:`~django.apps.AppConfig` instances."
msgstr ""

# 6ae56e4d169e457aaff559b61d7ce376
#: ../../ref/applications.txt:295
msgid ""
"Returns an :class:`~django.apps.AppConfig` for the application with the "
"given ``app_label``. Raises :exc:`LookupError` if no such application exists."
msgstr ""

# 11c7325177864dd2a54ff1d899bb17af
#: ../../ref/applications.txt:301
msgid ""
"Checks whether an application with the given name exists in the registry. "
"``app_name`` is the full name of the app, e.g. ``'django.contrib.admin'``."
msgstr ""

# ffd9fccfc2d6488fa0dafa087f642386
#: ../../ref/applications.txt:306
msgid ""
"Returns the :class:`~django.db.models.Model` with the given ``app_label`` "
"and ``model_name``. As a shortcut, this method also accepts a single "
"argument in the form ``app_label.model_name``. ``model_name`` is case- "
"insensitive."
msgstr ""

# d7e5c54ca3d140e7aeb32e1b9775a225
#: ../../ref/applications.txt:311
msgid ""
"Raises :exc:`LookupError` if no such application or model exists. Raises :"
"exc:`ValueError` when called with a single argument that doesn't contain "
"exactly one dot."
msgstr ""

# 96b3f8e72c374edfa95c87d4c5087e65
#: ../../ref/applications.txt:316
msgid "Initialization process"
msgstr ""

# 6fb32cd827e641feb591b396294b700e
#: ../../ref/applications.txt:319
msgid "How applications are loaded"
msgstr ""

# 3d7e4db343f54d708b72b261da12153f
#: ../../ref/applications.txt:321
msgid ""
"When Django starts, :func:`django.setup()` is responsible for populating the "
"application registry."
msgstr ""

# 652880d1200d45cd90dc1cd0bb594c5c
#: ../../ref/applications.txt:328
msgid "Configures Django by:"
msgstr ""

# aed601dc0e5b4578860ae8fa2aa82885
#: ../../ref/applications.txt:330
msgid "Loading the settings."
msgstr ""

# 891bf6c78d4649bfacf342014c584de7
#: ../../ref/applications.txt:331
msgid "Setting up logging."
msgstr ""

# d50543d77d134874b82c07a54bcdc899
#: ../../ref/applications.txt:332
msgid "Initializing the application registry."
msgstr ""

# f994069efd194180b4d0fb243aaf404a
#: ../../ref/applications.txt:334
msgid "This function is called automatically:"
msgstr ""

# 6ab7650419864cc18e017b162a719193
#: ../../ref/applications.txt:336
msgid "When running an HTTP server via Django's WSGI support."
msgstr ""

# e87f7f6b22974c9c8bb3f6e62141b3bc
#: ../../ref/applications.txt:337
msgid "When invoking a management command."
msgstr ""

# 5cd924d945a24e66ab6d531e6037f50b
#: ../../ref/applications.txt:339
msgid ""
"It must be called explicitly in other cases, for instance in plain Python "
"scripts."
msgstr ""

# 8d23c752a9dd4e65933fa358af208ea2
#: ../../ref/applications.txt:344
msgid ""
"The application registry is initialized in three stages. At each stage, "
"Django processes all applications in the order of :setting:`INSTALLED_APPS`."
msgstr ""

# 92e70b3d71324e81896bf9c22c72583c
#: ../../ref/applications.txt:347
msgid "First Django imports each item in :setting:`INSTALLED_APPS`."
msgstr ""

# 043c40f58a1d4ae2ab78b7879a39b905
#: ../../ref/applications.txt:349
msgid ""
"If it's an application configuration class, Django imports the root package "
"of the application, defined by its :attr:`~AppConfig.name` attribute. If "
"it's a Python package, Django creates a default application configuration."
msgstr ""

# f1f56a9d27df444a95c5a7464d7e95d7
#: ../../ref/applications.txt:353
msgid "*At this stage, your code shouldn't import any models!*"
msgstr ""

# 89045fd1fc644f988344d7761b7bd297
#: ../../ref/applications.txt:355
msgid ""
"In other words, your applications' root packages and the modules that define "
"your application configuration classes shouldn't import any models, even "
"indirectly."
msgstr ""

# 689b2b4b7bff46be90b310c204f5e92c
#: ../../ref/applications.txt:359
msgid ""
"Strictly speaking, Django allows importing models once their application "
"configuration is loaded. However, in order to avoid needless constraints on "
"the order of :setting:`INSTALLED_APPS`, it's strongly recommended not import "
"any models at this stage."
msgstr ""

# 1f0db4228b3e437bbd6c2ef43e281831
#: ../../ref/applications.txt:364
msgid ""
"Once this stage completes, APIs that operate of application configurations "
"such as :meth:`~apps.get_app_config()` become usable."
msgstr ""

# 4f08f399fbd54c9b9d49e409c6d8d37d
#: ../../ref/applications.txt:367
msgid ""
"Then Django attempts to import the ``models`` submodule of each application, "
"if there is one."
msgstr ""

# 7a57d2feb6d44dec8b284584731decd3
#: ../../ref/applications.txt:370
msgid ""
"You must define or import all models in your application's ``models.py`` or "
"``models/__init__.py``. Otherwise, the application registry may not be fully "
"populated at this point, which could cause the ORM to malfunction."
msgstr ""

# 351dfe702edf415ab1359106bf006800
#: ../../ref/applications.txt:374
msgid ""
"Once this stage completes, APIs that operate on models such as :meth:`~apps."
"get_model()` become usable."
msgstr ""

# 7624167026ca460d974f9cd174e5803e
#: ../../ref/applications.txt:377
msgid ""
"Finally Django runs the :meth:`~AppConfig.ready()` method of each "
"application configuration."
msgstr ""

# 1c2cfab5043a4d6da88094014f26b49e
#: ../../ref/applications.txt:383
msgid "Troubleshooting"
msgstr ""

# 3c9afbb9fddf4462985e778107903f07
#: ../../ref/applications.txt:385
msgid ""
"Here are some common problems that you may encounter during initialization:"
msgstr ""

# 87e5d70cf5a44049bbb2d01a2849a796
#: ../../ref/applications.txt:387
msgid ""
"``AppRegistryNotReady`` This happens when importing an application "
"configuration or a models module triggers code that depends on the app "
"registry."
msgstr ""

# 87773a486c64491e8f7ac9568417578c
#: ../../ref/applications.txt:391
msgid ""
"For example, :func:`~django.utils.translation.ugettext()` uses the app "
"registry to look up translation catalogs in applications. To translate at "
"import time, you need :func:`~django.utils.translation.ugettext_lazy()` "
"instead. (Using :func:`~django.utils.translation.ugettext()` would be a bug, "
"because the translation would happen at import time, rather than at each "
"request depending on the active language.)"
msgstr ""

# df0ada8c9e934316ba0dbc670dbd0b88
#: ../../ref/applications.txt:398
msgid ""
"Executing database queries with the ORM at import time in models modules "
"will also trigger this exception. The ORM cannot function properly until all "
"models are available."
msgstr ""

# 04820e65523042ad887bedcc4842d43c
#: ../../ref/applications.txt:402
msgid ""
"Another common culprit is :func:`django.contrib.auth.get_user_model()`. Use "
"the :setting:`AUTH_USER_MODEL` setting to reference the User model at import "
"time."
msgstr ""

# ec30ede352aa44dc88bb1b571fda5a7a
#: ../../ref/applications.txt:406
msgid ""
"This exception also happens if you forget to call :func:`django.setup()` in "
"a standalone Python script."
msgstr ""

# ca9eddb117074f888d7e963a1e999f7d
#: ../../ref/applications.txt:409
msgid ""
"``ImportError: cannot import name ...`` This happens if the import sequence "
"ends up in a loop."
msgstr ""

# 60ac6d1e8f654bf9887408e879021abc
#: ../../ref/applications.txt:412
msgid ""
"To eliminate such problems, you should minimize dependencies between your "
"models modules and do as little work as possible at import time. To avoid "
"executing code at import time, you can move it into a function and cache its "
"results. The code will be executed when you first need its results. This "
"concept is known as \"lazy evaluation\"."
msgstr ""

# 43df0337bd4f44eba24ddda265c23b13
#: ../../ref/applications.txt:418
msgid ""
"``django.contrib.admin`` automatically performs autodiscovery of ``admin`` "
"modules in installed applications. To prevent it, change your :setting:"
"`INSTALLED_APPS` to contain ``'django.contrib.admin.apps."
"SimpleAdminConfig'`` instead of ``'django.contrib.admin'``."
msgstr ""
