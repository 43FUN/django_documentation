# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2014.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-07-11 11:43+0300\n"
"PO-Revision-Date: 2014-07-11 11:43+0300\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# 6991ee0c5e684488b83121a653265d2e
#: ../../ref/migration-operations.txt:3
msgid "Migration Operations"
msgstr ""

# 7d91ddbc5bae4cdf96653f5d20f95852
#: ../../ref/migration-operations.txt:7
msgid ""
"Migration files are composed of one or more ``Operation``\\s, objects that "
"declaratively record what the migration should do to your database."
msgstr ""

# 0cd1aed3607c402aa44f798e2c786121
#: ../../ref/migration-operations.txt:10
msgid ""
"Django also uses these ``Operation`` objects to work out what your models "
"looked like historically, and to calculate what changes you've made to your "
"models since the last migration so it can automatically write your "
"migrations; that's why they're declarative, as it means Django can easily "
"load them all into memory and run through them without touching the database "
"to work out what your project should look like."
msgstr ""

# 7d861b5ab7e84a0abf4f0632d31495f6
#: ../../ref/migration-operations.txt:17
msgid ""
"There are also more specialized ``Operation`` objects which are for things "
"like :ref:`data migrations <data-migrations>` and for advanced manual "
"database manipulation. You can also write your own ``Operation`` classes if "
"you want to encapsulate a custom change you commonly make."
msgstr ""

# 934970e5ecab43e49113fd12e44d7752
#: ../../ref/migration-operations.txt:22
msgid ""
"If you need an empty migration file to write your own ``Operation`` objects "
"into, just use ``python manage.py makemigrations --empty yourappname``, but "
"be aware that manually adding schema-altering operations can confuse the "
"migration autodetector and make resulting runs of :djadmin:`makemigrations` "
"output incorrect code."
msgstr ""

# 5b513dd5da4f4774bad13b8dfb9d049c
#: ../../ref/migration-operations.txt:28
msgid ""
"All of the core Django operations are available from the ``django.db."
"migrations.operations`` module."
msgstr ""

# cbccb1e6c90a43eaa97119c7998704b0
#: ../../ref/migration-operations.txt:32
msgid "Schema Operations"
msgstr ""

# 9dcdd6ab818941e985ff6fbf1220d275
#: ../../ref/migration-operations.txt:35
msgid "CreateModel"
msgstr ""

# 1ff95d28f96a4a22829899e8512e2e5a
#: ../../ref/migration-operations.txt:39
msgid ""
"Creates a new model in the project history and a corresponding table in the "
"database to match it."
msgstr ""

# 5fcd0b11ee994346a5b1d63b95e5256f
#: ../../ref/migration-operations.txt:42
msgid ""
"``name`` is the model name, as would be written in the ``models.py`` file."
msgstr ""

# 5f9d62d00df142cba99ec2854d19778a
#: ../../ref/migration-operations.txt:44
msgid ""
"``fields`` is a list of 2-tuples of ``(field_name, field_instance)``. The "
"field instance should be an unbound field (so just ``models.CharField()``, "
"rather than a field takes from another model)."
msgstr ""

# 2844ebb149024806982a23409109eca1
#: ../../ref/migration-operations.txt:48
msgid ""
"``options`` is an optional dictionary of values from the model's ``Meta`` "
"class."
msgstr ""

# 0ce11fa9f96e4fb58c2987c78ffaa19b
#: ../../ref/migration-operations.txt:50
msgid ""
"``bases`` is an optional list of other classes to have this model inherit "
"from; it can contain both class objects as well as strings in the format ``"
"\"appname.ModelName\"`` if you want to depend on another model (so you "
"inherit from the historical version). If it's not supplied, it defaults to "
"just inheriting from the standard ``models.Model``."
msgstr ""

# 4ef221ba19744976959af54b140802c3
#: ../../ref/migration-operations.txt:57
msgid "DeleteModel"
msgstr ""

# af38421d8a61461482e0a7f8ba63eb57
#: ../../ref/migration-operations.txt:61
msgid ""
"Deletes the model from the project history and its table from the database."
msgstr ""

# 9c1a1b9a21c04ba1a18695baf96c4462
#: ../../ref/migration-operations.txt:64
msgid "RenameModel"
msgstr ""

# e897a50c8ae544f2b98b7db0644243c4
#: ../../ref/migration-operations.txt:68
msgid "Renames the model from an old name to a new one."
msgstr ""

# 8860cb10ff1041fabf9192c64d0b675c
#: ../../ref/migration-operations.txt:70
msgid ""
"You may have to manually add this if you change the model's name and quite a "
"few of its fields at once; to the autodetector, this will look like you "
"deleted a model with the old name and added a new one with a different name, "
"and the migration it creates will lose any data in the old table."
msgstr ""

# a384fc316af540dbac2152ec122b8ee7
#: ../../ref/migration-operations.txt:77
msgid "AlterModelTable"
msgstr ""

# faefd6700ae24b1597a16c5d93bc6be7
#: ../../ref/migration-operations.txt:81
msgid ""
"Changes the model's table name (the :attr:`~django.db.models.Options."
"db_table` option on the ``Meta`` subclass)."
msgstr ""

# edaa21d6704c438486084cabcbb324ea
#: ../../ref/migration-operations.txt:85
msgid "AlterUniqueTogether"
msgstr ""

# 06a701a8125f41e08021eb6c4432e611
#: ../../ref/migration-operations.txt:89
msgid ""
"Changes the model's set of unique constraints (the :attr:`~django.db.models."
"Options.unique_together` option on the ``Meta`` subclass)."
msgstr ""

# a585c35767174aa4b94d855a829db825
#: ../../ref/migration-operations.txt:94
msgid "AlterIndexTogether"
msgstr ""

# aab07ea88ca3470a80f5e0a902cc4071
#: ../../ref/migration-operations.txt:98
msgid ""
"Changes the model's set of custom indexes (the :attr:`~django.db.models."
"Options.index_together` option on the ``Meta`` subclass)."
msgstr ""

# 7ece29db3844450ea25d290be436b478
#: ../../ref/migration-operations.txt:103
msgid "AlterOrderWithRespectTo"
msgstr ""

# f63db12e533347bca12be5b7d289d326
#: ../../ref/migration-operations.txt:107
msgid ""
"Makes or deletes the ``_order`` column needed for the :attr:`~django.db."
"models.Options.order_with_respect_to` option on the ``Meta`` subclass."
msgstr ""

# 6bb492d20b5845fba5764f28851b3f59
#: ../../ref/migration-operations.txt:112
msgid "AlterModelOptions"
msgstr ""

# 682c2f3765034d22b786892626d08dc7
#: ../../ref/migration-operations.txt:116
msgid ""
"Stores changes to miscellaneous model options (settings on a model's "
"``Meta``) like ``permissions`` and ``verbose_name``. Does not affect the "
"database, but persists these changes for :class:`RunPython` instances to use."
msgstr ""

# 0164d3fd0b7d45bfa86dd03bf4467ba9
#: ../../ref/migration-operations.txt:121
msgid "AddField"
msgstr ""

# 59e10ee79d3443d58bf9f5f7f5394229
#: ../../ref/migration-operations.txt:125
msgid ""
"Adds a field to a model. ``model_name`` is the model's name, ``name`` is the "
"field's name, and ``field`` is an unbound Field instance (the thing you "
"would put in the field declaration in ``models.py`` - for example, ``models."
"IntegerField(null=True)``."
msgstr ""

# 833077c12fb641c2b7e01c4260b5bdb5
#: ../../ref/migration-operations.txt:130
msgid ""
"The ``preserve_default`` argument indicates whether the field's default "
"value is permanent and should be baked into the project state (``True``), or "
"if it is temporary and just for this migration (``False``) - usually because "
"the migration is adding a non-nullable field to a table and needs a default "
"value to put into existing rows. It does not effect the behavior of setting "
"defaults in the database directly - Django never sets database defaults, and "
"always applies them in the Django ORM code."
msgstr ""

# 5810f0959ab142b18ec57efb03274d9a
#: ../../ref/migration-operations.txt:139
msgid "RemoveField"
msgstr ""

# 6e1321146416463f80f76aa1b8431692
#: ../../ref/migration-operations.txt:143
msgid "Removes a field from a model."
msgstr ""

# 66da73fa399b4164905580d56ca0d577
#: ../../ref/migration-operations.txt:145
msgid ""
"Bear in mind that when reversed this is actually adding a field to a model; "
"if the field is not nullable this may make this operation irreversible "
"(apart from any data loss, which of course is irreversible)."
msgstr ""

# 7bc4ce0744014d069c65551ff1507ece
#: ../../ref/migration-operations.txt:150
msgid "AlterField"
msgstr ""

# 39ed1cb689d94d89a73a611152c7f611
#: ../../ref/migration-operations.txt:154
msgid ""
"Alters a field's definition, including changes to its type, :attr:`~django."
"db.models.Field.null`, :attr:`~django.db.models.Field.unique`, :attr:"
"`~django.db.models.Field.db_column` and other field attributes."
msgstr ""

# 27d18f9b2812412889655fe3f7f624c7
#: ../../ref/migration-operations.txt:158
msgid ""
"Note that not all changes are possible on all databases - for example, you "
"cannot change a text-type field like ``models.TextField()`` into a number-"
"type field like ``models.IntegerField()`` on most databases."
msgstr ""

# 8cd36e39a1d44077aa3880b0fd0c1417
#: ../../ref/migration-operations.txt:163
msgid "RenameField"
msgstr ""

# 61e6f2fab96748e6b3fa918d4d7aa1fb
#: ../../ref/migration-operations.txt:167
msgid ""
"Changes a field's name (and, unless :attr:`~django.db.models.Field."
"db_column` is set, its column name)."
msgstr ""

# 76686ff69da34bf586de9e590d6db005
#: ../../ref/migration-operations.txt:171
msgid "Special Operations"
msgstr ""

# bbfddb5e67f74e56bedf24ab171c0aba
#: ../../ref/migration-operations.txt:174
msgid "RunSQL"
msgstr ""

# 4b6138bb53ea4be7a20b64a39786a87f
#: ../../ref/migration-operations.txt:178
msgid ""
"Allows running of arbitrary SQL on the database - useful for more advanced "
"features of database backends that Django doesn't support directly, like "
"partial indexes."
msgstr ""

# 3193b80303134f118807168483c7606c
#: ../../ref/migration-operations.txt:182
msgid ""
"``sql``, and ``reverse_sql`` if provided, should be strings of SQL to run on "
"the database. On most database backends (all but PostgreSQL), Django will "
"split the SQL into individual statements prior to executing them. This "
"requires installing the sqlparse_ Python library."
msgstr ""

# ab7f5623ae884819851b7b2e0e53ebf5
#: ../../ref/migration-operations.txt:187
msgid ""
"The ``state_operations`` argument is so you can supply operations that are "
"equivalent to the SQL in terms of project state; for example, if you are "
"manually creating a column, you should pass in a list containing an "
"``AddField`` operation here so that the autodetector still has an up-to-date "
"state of the model (otherwise, when you next run ``makemigrations``, it "
"won't see any operation that adds that field and so will try to run it "
"again)."
msgstr ""

# 888d3706fbe64dc8837d1c9be74744f7
#: ../../ref/migration-operations.txt:197
msgid "RunPython"
msgstr ""

# ebb34643314a421c93c61181d0e731f4
#: ../../ref/migration-operations.txt:201
msgid ""
"Runs custom Python code in a historical context. ``code`` (and "
"``reverse_code`` if supplied) should be callable objects that accept two "
"arguments; the first is an instance of ``django.apps.registry.Apps`` "
"containing historical models that match the operation's place in the project "
"history, and the second is an instance of :class:`SchemaEditor <django.db."
"backends.schema.BaseDatabaseSchemaEditor>`."
msgstr ""

# 148ceff56f8c4faf89fc51d86ff162e8
#: ../../ref/migration-operations.txt:208
msgid ""
"You are advised to write the code as a separate function above the "
"``Migration`` class in the migration file, and just pass it to "
"``RunPython``. Here's an example of using ``RunPython`` to create some "
"initial objects on a ``Country`` model::"
msgstr ""

# c29eb10d9273441eafbf20509a2583e5
#: ../../ref/migration-operations.txt:234
msgid ""
"This is generally the operation you would use to create :ref:`data "
"migrations <data-migrations>`, run custom data updates and alterations, and "
"anything else you need access to an ORM and/or python code for."
msgstr ""

# b721758871f04706b70a20e54aeb28ec
#: ../../ref/migration-operations.txt:239
msgid ""
"If you're upgrading from South, this is basically the South pattern as an "
"operation - one or two methods for forwards and backwards, with an ORM and "
"schema operations available. You should be able to translate the ``orm."
"Model`` or ``orm[\"appname\", \"Model\"]`` references from South directly "
"into ``apps.get_model(\"appname\", \"Model\")`` references here and leave "
"most of the rest of the code unchanged for data migrations."
msgstr ""

# d03d2004c0164f83a04c86696ab12dd1
#: ../../ref/migration-operations.txt:246
msgid ""
"Much like :class:`RunSQL`, ensure that if you change schema inside here "
"you're either doing it outside the scope of the Django model system (e.g. "
"triggers) or that you use :class:`SeparateDatabaseAndState` to add in "
"operations that will reflect your changes to the model state - otherwise, "
"the versioned ORM and the autodetector will stop working correctly."
msgstr ""

# 5ff06ce1b9be4769919886387bea4605
#: ../../ref/migration-operations.txt:252
msgid ""
"By default, ``RunPython`` will run its contents inside a transaction even on "
"databases that do not support DDL transactions (for example, MySQL and "
"Oracle). This should be safe, but may cause a crash if you attempt to use "
"the ``schema_editor`` provided on these backends; in this case, please set "
"``atomic=False``."
msgstr ""

# fa6db5a3beaa4fc99498b1a1c59a064a
#: ../../ref/migration-operations.txt:260
msgid ""
"``RunPython`` does not magically alter the connection of the models for you; "
"any model methods you call will go to the default database unless you give "
"them the current database alias (available from ``schema_editor.connection."
"alias``, where ``schema_editor`` is the second argument to your function)."
msgstr ""

# aa34b38124814b37bf2aed672bd80922
#: ../../ref/migration-operations.txt:267
msgid "SeparateDatabaseAndState"
msgstr ""

# 8c2f77fd997f4f6499a56686b3a24bc3
#: ../../ref/migration-operations.txt:271
msgid ""
"A highly specialized operation that let you mix and match the database "
"(schema-changing) and state (autodetector-powering) aspects of operations."
msgstr ""

# 0cdd65d45b514d8aa043e119ae951dec
#: ../../ref/migration-operations.txt:274
msgid ""
"It accepts two list of operations, and when asked to apply state will use "
"the state list, and when asked to apply changes to the database will use the "
"database list. Do not use this operation unless you're very sure you know "
"what you're doing."
msgstr ""

# a18b6ea469ec4b1e8ebb9e4e898d3759
#: ../../ref/migration-operations.txt:279
msgid "Writing your own"
msgstr ""

# 0fb0c59a081643e693dd903ceed5107a
#: ../../ref/migration-operations.txt:281
msgid ""
"Operations have a relatively simple API, and they're designed so that you "
"can easily write your own to supplement the built-in Django ones. The basic "
"structure of an ``Operation`` looks like this::"
msgstr ""

# 369281f7cd6944b5a2119938faf8f06f
#: ../../ref/migration-operations.txt:320
msgid ""
"You can take this template and work from it, though we suggest looking at "
"the built-in Django operations in ``django.db.migrations.operations`` - "
"they're easy to read and cover a lot of the example usage of semi-internal "
"aspects of the migration framework like ``ProjectState`` and the patterns "
"used to get historical models."
msgstr ""

# 92eaa639746e4bcaabd6b92ff26d7a58
#: ../../ref/migration-operations.txt:326
msgid "Some things to note:"
msgstr ""

# 44a39afe238b44d093ec186d4f165913
#: ../../ref/migration-operations.txt:328
msgid ""
"You don't need to learn too much about ``ProjectState`` to just write simple "
"migrations; just know that it has a ``.render()`` method that turns it into "
"an app registry (which you can then call ``get_model`` on)."
msgstr ""

# 31ae169dc4a948e099f178c7cbccad65
#: ../../ref/migration-operations.txt:332
msgid ""
"``database_forwards`` and ``database_backwards`` both get two states passed "
"to them; these just represent the difference the ``state_forwards`` method "
"would have applied, but are given to you for convenience and speed reasons."
msgstr ""

# e7c572a77ce1438d86f5f27e19b8b93c
#: ../../ref/migration-operations.txt:336
msgid ""
"``to_state`` in the database_backwards method is the *older* state; that is, "
"the one that will be the current state once the migration has finished "
"reversing."
msgstr ""

# 7cf4142c297b4a74b2e274cbc980deae
#: ../../ref/migration-operations.txt:339
msgid ""
"You might see implementations of ``references_model`` on the built-in "
"operations; this is part of the autodetection code and does not matter for "
"custom operations."
msgstr ""

# 970db007e87f4d19afb02bef7ac0bc98
#: ../../ref/migration-operations.txt:343
msgid ""
"As a simple example, let's make an operation that loads PostgreSQL "
"extensions (which contain some of PostgreSQL's more exciting features). It's "
"simple enough; there's no model state changes, and all it does is run one "
"command::"
msgstr ""
