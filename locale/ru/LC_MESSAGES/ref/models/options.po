# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2012.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-02-15 15:13\n"
"PO-Revision-Date: 2012-02-15 15:13\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# d258a73cb4544c7daff9c6f339fbfbcc
#: ../../ref/models/options.txt:3
msgid "Model ``Meta`` options"
msgstr ""

# 4b583de99e6e4b16878d9c6a2a208a0e
#: ../../ref/models/options.txt:5
msgid ""
"This document explains all the possible :ref:`metadata options <meta-"
"options>` that you can give your model in its internal ``class Meta``."
msgstr ""

# ff4bd6e0c6254170bda3ba35707df9e4
#: ../../ref/models/options.txt:10
msgid "Available ``Meta`` options"
msgstr ""

# 7eb908962e064fd5af7eaf9d2fbe5ecc
#: ../../ref/models/options.txt:15
msgid "``abstract``"
msgstr ""

# 5dff99ca9f7b49e2a69c1402cc1c4b5a
#: ../../ref/models/options.txt:19
msgid ""
"If ``abstract = True``, this model will be an :ref:`abstract base class "
"<abstract-base-classes>`."
msgstr ""

# 9b0631d9ac424ef78a2bbdf87ffdfe0e
#: ../../ref/models/options.txt:23
msgid "``app_label``"
msgstr ""

# 0b794b58c4fb4977b094107ee2471389
#: ../../ref/models/options.txt:27
msgid ""
"If a model exists outside of the standard :file:`models.py` (for instance, "
"if the app's models are in submodules of ``myapp.models``), the model must "
"define which app it is part of::"
msgstr ""

# 0c5bb9f034914b9eb4c722bec10c57fb
#: ../../ref/models/options.txt:34
msgid "``db_table``"
msgstr ""

# 64e96f22f8e54c1d80a78c1240dfcb7a
#: ../../ref/models/options.txt:38
msgid "The name of the database table to use for the model::"
msgstr ""

# c101f9cca056486a961e8a1346edb032
#: ../../ref/models/options.txt:45
msgid "Table names"
msgstr ""

# c38ab2f15caa4f11a3e1e4992c73c4f0
#: ../../ref/models/options.txt:47
msgid ""
"To save you time, Django automatically derives the name of the database "
"table from the name of your model class and the app that contains it. A "
"model's database table name is constructed by joining the model's \"app label"
"\" -- the name you used in :djadmin:`manage.py startapp <startapp>` -- to "
"the model's class name, with an underscore between them."
msgstr ""

# d3c57a4a33c34c4ea23ec6788bf826a3
#: ../../ref/models/options.txt:53
msgid ""
"For example, if you have an app ``bookstore`` (as created by ``manage.py "
"startapp bookstore``), a model defined as ``class Book`` will have a "
"database table named ``bookstore_book``."
msgstr ""

# e34d0723d0144eaea877f0b0c6d0ffad
#: ../../ref/models/options.txt:57
msgid ""
"To override the database table name, use the ``db_table`` parameter in "
"``class Meta``."
msgstr ""

# 1f4d945d304b42848b0556206c8a96aa
#: ../../ref/models/options.txt:60
msgid ""
"If your database table name is an SQL reserved word, or contains characters "
"that aren't allowed in Python variable names -- notably, the hyphen -- "
"that's OK. Django quotes column and table names behind the scenes."
msgstr ""

# 7edc74b87d314e8fb44bbb7214172ba7
#: ../../ref/models/options.txt:66
msgid ""
"It is strongly advised that you use lowercase table names when you override "
"the table name via ``db_table``, particularly if you are using the MySQL "
"backend. See the :ref:`MySQL notes <mysql-notes>` for more details."
msgstr ""

# 14dfec7e126b46ac9dec2dc51fd5d564
#: ../../ref/models/options.txt:72
msgid "``db_tablespace``"
msgstr ""

# d512eec6e3904a94b36cab736e61e1a7
#: ../../ref/models/options.txt:76
msgid ""
"The name of the :doc:`database tablespace </topics/db/tablespaces>` to use "
"for this model. The default is the project's :setting:`DEFAULT_TABLESPACE` "
"setting, if set. If the backend doesn't support tablespaces, this option is "
"ignored."
msgstr ""

# df1ca5ea1a274bd38d0434b3279380c4
#: ../../ref/models/options.txt:82
msgid "``get_latest_by``"
msgstr ""

# d6d9744f8ca948e4b853b798187c0cbc
#: ../../ref/models/options.txt:86
msgid ""
"The name of a :class:`DateField` or :class:`DateTimeField` in the model. "
"This specifies the default field to use in your model :class:`Manager`'s :"
"class:`~QuerySet.latest` method."
msgstr ""

# d7e0f4e5ed854172bfd09464a7c38e78
#: ../../ref/models/options.txt:90
msgid "Example::"
msgstr ""

# d4ead685278a48e28b5a7a90ce4f339c
#: ../../ref/models/options.txt:94
msgid ""
"See the docs for :meth:`~django.db.models.query.QuerySet.latest` for more."
msgstr ""

# b66c0b57595b4ed2b61d3b2194e6900c
#: ../../ref/models/options.txt:97
msgid "``managed``"
msgstr ""

# 57498771df3d42cf9c860174bfe7c567
#: ../../ref/models/options.txt:101
msgid ""
"Defaults to ``True``, meaning Django will create the appropriate database "
"tables in :djadmin:`syncdb` and remove them as part of a :djadmin:`reset` "
"management command. That is, Django *manages* the database tables' "
"lifecycles."
msgstr ""

# 90a61f3fc4d949f9aec68c74e4fee5d6
#: ../../ref/models/options.txt:106
msgid ""
"If ``False``, no database table creation or deletion operations will be "
"performed for this model. This is useful if the model represents an existing "
"table or a database view that has been created by some other means. This is "
"the *only* difference when ``managed=False``. All other aspects of model "
"handling are exactly the same as normal. This includes"
msgstr ""

# 5e9d4e709c694feebe3e6be55a659900
#: ../../ref/models/options.txt:112
msgid ""
"Adding an automatic primary key field to the model if you don't declare it.  "
"To avoid confusion for later code readers, it's recommended to specify all "
"the columns from the database table you are modeling when using unmanaged "
"models."
msgstr ""

# 32e23ac9bf4f430dad9044aae7ce2923
#: ../../ref/models/options.txt:117
msgid ""
"If a model with ``managed=False`` contains a :class:`~django.db.models."
"ManyToManyField` that points to another unmanaged model, then the "
"intermediate table for the many-to-many join will also not be created. "
"However, the intermediary table between one managed and one unmanaged model "
"*will* be created."
msgstr ""

# c4018d33e65b4783a6d4e27665d9fa3c
#: ../../ref/models/options.txt:123
msgid ""
"If you need to change this default behavior, create the intermediary table "
"as an explicit model (with ``managed`` set as needed) and use the :attr:"
"`ManyToManyField.through` attribute to make the relation use your custom "
"model."
msgstr ""

# 861a2585096440fba645b44d8ad68878
#: ../../ref/models/options.txt:128
msgid ""
"For tests involving models with ``managed=False``, it's up to you to ensure "
"the correct tables are created as part of the test setup."
msgstr ""

# 0009477403e1456b95ea40cbcae01687
#: ../../ref/models/options.txt:131
msgid ""
"If you're interested in changing the Python-level behavior of a model class, "
"you *could* use ``managed=False`` and create a copy of an existing model. "
"However, there's a better approach for that situation: :ref:`proxy-models`."
msgstr ""

# 26e37df93c814b3b9f803a843d8d4d2d
#: ../../ref/models/options.txt:136
msgid "``order_with_respect_to``"
msgstr ""

# 4002cd1d348744bbbf1c0008b896b268
#: ../../ref/models/options.txt:140
msgid ""
"Marks this object as \"orderable\" with respect to the given field. This is "
"almost always used with related objects to allow them to be ordered with "
"respect to a parent object. For example, if an ``Answer`` relates to a "
"``Question`` object, and a question has more than one answer, and the order "
"of answers matters, you'd do this::"
msgstr ""

# e6dd93aa5e7943dcbcfe30f2df8c6143
#: ../../ref/models/options.txt:153
msgid ""
"When ``order_with_respect_to`` is set, two additional methods are provided "
"to retrieve and to set the order of the related objects: ``get_RELATED_order"
"()`` and ``set_RELATED_order()``, where ``RELATED`` is the lowercased model "
"name. For example, assuming that a ``Question`` object has multiple related "
"``Answer`` objects, the list returned contains the primary keys of the "
"related ``Answer`` objects::"
msgstr ""

# 4dac0ca321864f5ba32b44e27c3b48e2
#: ../../ref/models/options.txt:164
msgid ""
"The order of a ``Question`` object's related ``Answer`` objects can be set "
"by passing in a list of ``Answer`` primary keys::"
msgstr ""

# a7f22e9f75dc4bb5b4034aa6fe7baab5
#: ../../ref/models/options.txt:169
msgid ""
"The related objects also get two methods, ``get_next_in_order()`` and "
"``get_previous_in_order()``, which can be used to access those objects in "
"their proper order. Assuming the ``Answer`` objects are ordered by ``id``::"
msgstr ""

# 08d9f2d090eb472b811e1b94ac78828d
#: ../../ref/models/options.txt:180
msgid "``ordering``"
msgstr ""

# bf653ec507fb430fa04d0a0261c18309
#: ../../ref/models/options.txt:184
msgid ""
"The default ordering for the object, for use when obtaining lists of "
"objects::"
msgstr ""

# 626f80acb9044cb0a7566d0e5ae0ecf5
#: ../../ref/models/options.txt:188
msgid ""
"This is a tuple or list of strings. Each string is a field name with an "
"optional \"-\" prefix, which indicates descending order. Fields without a "
"leading \"-\" will be ordered ascending. Use the string \"?\" to order "
"randomly."
msgstr ""

# f7d883c4e7884bc188f0507e6d1b9389
#: ../../ref/models/options.txt:192
msgid "For example, to order by a ``pub_date`` field ascending, use this::"
msgstr ""

# 7d4afbb578cc467883a5e6937561afeb
#: ../../ref/models/options.txt:196
msgid "To order by ``pub_date`` descending, use this::"
msgstr ""

# 12fee70873df40c3961688e223c1c337
#: ../../ref/models/options.txt:200
msgid ""
"To order by ``pub_date`` descending, then by ``author`` ascending, use this::"
msgstr ""

# 3f436714fa86457e9026d112815f178b
#: ../../ref/models/options.txt:209
msgid "``permissions``"
msgstr ""

# d70c8df1a8974962869fdf9fec4749c3
#: ../../ref/models/options.txt:213
msgid ""
"Extra permissions to enter into the permissions table when creating this "
"object. Add, delete and change permissions are automatically created for "
"each object that has ``admin`` set. This example specifies an extra "
"permission, ``can_deliver_pizzas``::"
msgstr ""

# ffd966d0011f4ee09ba92913f0a3e281
#: ../../ref/models/options.txt:220
msgid ""
"This is a list or tuple of 2-tuples in the format ``(permission_code, "
"human_readable_permission_name)``."
msgstr ""

# 7484421d0da643e9bcd3ba6ebf2e4d3c
#: ../../ref/models/options.txt:224
msgid "``proxy``"
msgstr ""

# f24b020f818f4e1a8de7ed51b066078a
#: ../../ref/models/options.txt:228
msgid ""
"If ``proxy = True``, a model which subclasses another model will be treated "
"as a :ref:`proxy model <proxy-models>`."
msgstr ""

# 570a63d83dc4413db0c54dc9b126eb4b
#: ../../ref/models/options.txt:232
msgid "``unique_together``"
msgstr ""

# 9ce0a8c1c125456c88751f41fb87c811
#: ../../ref/models/options.txt:236
msgid "Sets of field names that, taken together, must be unique::"
msgstr ""

# 4f1a6373c1ff4a5e922c91c30bf7c858
#: ../../ref/models/options.txt:240
msgid ""
"This is a list of lists of fields that must be unique when considered "
"together. It's used in the Django admin and is enforced at the database "
"level (i.e., the appropriate ``UNIQUE`` statements are included in the "
"``CREATE TABLE`` statement)."
msgstr ""

# 86c0ff01812946379d5c7d1b1723e66e
#: ../../ref/models/options.txt:245
msgid ""
"For convenience, unique_together can be a single list when dealing with a "
"single set of fields::"
msgstr ""

# f0786eee219f40278f3335648355fe54
#: ../../ref/models/options.txt:251
msgid "``verbose_name``"
msgstr ""

# 564d85dce8d34b15977642496f9dc349
#: ../../ref/models/options.txt:255
msgid "A human-readable name for the object, singular::"
msgstr ""

# 67ff1759f19a4da89453f44656b84618
#: ../../ref/models/options.txt:259
msgid ""
"If this isn't given, Django will use a munged version of the class name: "
"``CamelCase`` becomes ``camel case``."
msgstr ""

# 4e8194e1af334532817d25ddd62aa1de
#: ../../ref/models/options.txt:263
msgid "``verbose_name_plural``"
msgstr ""

# 2dcc199c32f44a23865b844905039002
#: ../../ref/models/options.txt:267
msgid "The plural name for the object::"
msgstr ""

# dbe859f3b1e94cb5b340f67606f8d479
#: ../../ref/models/options.txt:271
msgid ""
"If this isn't given, Django will use :attr:`~Options.verbose_name` + ``\"s"
"\"``."
msgstr ""
