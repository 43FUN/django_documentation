# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2015.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-11-17 10:48+0200\n"
"PO-Revision-Date: 2015-03-19 15:06+0200\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

#: ../../ref/models/database-functions.txt:3
msgid "Database Functions"
msgstr ""

#: ../../ref/models/database-functions.txt:10
msgid ""
"The classes documented below provide a way for users to use functions "
"provided by the underlying database as annotations, aggregations, or filters "
"in Django. Functions are also :doc:`expressions <expressions>`, so they can "
"be used and combined with other expressions like :ref:`aggregate functions "
"<aggregation-functions>`."
msgstr ""

#: ../../ref/models/database-functions.txt:16
msgid "We'll be using the following model in examples of each function::"
msgstr ""

#: ../../ref/models/database-functions.txt:24
msgid ""
"We don't usually recommend allowing ``null=True`` for ``CharField`` since "
"this allows the field to have two \"empty values\", but it's important for "
"the ``Coalesce`` example below."
msgstr ""

#: ../../ref/models/database-functions.txt:29
msgid "Coalesce"
msgstr ""

#: ../../ref/models/database-functions.txt:33
msgid ""
"Accepts a list of at least two field names or expressions and returns the "
"first non-null value (note that an empty string is not considered a null "
"value). Each argument must be of a similar type, so mixing text and numbers "
"will result in a database error."
msgstr ""

#: ../../ref/models/database-functions.txt:38
msgid "Usage examples::"
msgstr ""

#: ../../ref/models/database-functions.txt:60
msgid ""
"A Python value passed to ``Coalesce`` on MySQL may be converted to an "
"incorrect type unless explicitly cast to the correct database type:"
msgstr ""

#: ../../ref/models/database-functions.txt:70
msgid "Concat"
msgstr ""

#: ../../ref/models/database-functions.txt:74
msgid ""
"Accepts a list of at least two text fields or expressions and returns the "
"concatenated text. Each argument must be of a text or char type. If you want "
"to concatenate a ``TextField()`` with a ``CharField()``, then be sure to "
"tell Django that the ``output_field`` should be a ``TextField()``. This is "
"also required when concatenating a ``Value`` as in the example below."
msgstr ""

#: ../../ref/models/database-functions.txt:80
msgid ""
"This function will never have a null result. On backends where a null "
"argument results in the entire expression being null, Django will ensure "
"that each null part is converted to an empty string first."
msgstr ""

#: ../../ref/models/database-functions.txt:84
#: ../../ref/models/database-functions.txt:107
#: ../../ref/models/database-functions.txt:172
#: ../../ref/models/database-functions.txt:205
#: ../../ref/models/database-functions.txt:227
#: ../../ref/models/database-functions.txt:249
#: ../../ref/models/database-functions.txt:269
msgid "Usage example::"
msgstr ""

#: ../../ref/models/database-functions.txt:97
msgid "Greatest"
msgstr ""

#: ../../ref/models/database-functions.txt:103
msgid ""
"Accepts a list of at least two field names or expressions and returns the "
"greatest value. Each argument must be of a similar type, so mixing text and "
"numbers will result in a database error."
msgstr ""

#: ../../ref/models/database-functions.txt:124
msgid ""
"``annotated_comment.last_updated`` will be the most recent of ``blog."
"modified`` and ``comment.modified``."
msgstr ""

#: ../../ref/models/database-functions.txt:129
msgid ""
"The behavior of ``Greatest`` when one or more expression may be ``null`` "
"varies between databases:"
msgstr ""

#: ../../ref/models/database-functions.txt:132
msgid ""
"PostgreSQL: ``Greatest`` will return the largest non-null expression, or "
"``null`` if all expressions are ``null``."
msgstr ""

#: ../../ref/models/database-functions.txt:134
msgid ""
"SQLite, Oracle, and MySQL: If any expression is ``null``, ``Greatest`` will "
"return ``null``."
msgstr ""

#: ../../ref/models/database-functions.txt:137
msgid ""
"The PostgreSQL behavior can be emulated using ``Coalesce`` if you know a "
"sensible minimum value to provide as a default."
msgstr ""

#: ../../ref/models/database-functions.txt:141
msgid "Least"
msgstr ""

#: ../../ref/models/database-functions.txt:147
msgid ""
"Accepts a list of at least two field names or expressions and returns the "
"least value. Each argument must be of a similar type, so mixing text and "
"numbers will result in a database error."
msgstr ""

#: ../../ref/models/database-functions.txt:153
msgid ""
"The behavior of ``Least`` when one or more expression may be ``null`` varies "
"between databases:"
msgstr ""

#: ../../ref/models/database-functions.txt:156
msgid ""
"PostgreSQL: ``Least`` will return the smallest non-null expression, or "
"``null`` if all expressions are ``null``."
msgstr ""

#: ../../ref/models/database-functions.txt:158
msgid ""
"SQLite, Oracle, and MySQL: If any expression is ``null``, ``Least`` will "
"return ``null``."
msgstr ""

#: ../../ref/models/database-functions.txt:161
msgid ""
"The PostgreSQL behavior can be emulated using ``Coalesce`` if you know a "
"sensible maximum value to provide as a default."
msgstr ""

#: ../../ref/models/database-functions.txt:165
msgid "Length"
msgstr ""

#: ../../ref/models/database-functions.txt:169
msgid ""
"Accepts a single text field or expression and returns the number of "
"characters the value has. If the expression is null, then the length will "
"also be null."
msgstr ""

#: ../../ref/models/database-functions.txt:183
msgid "It can also be registered as a transform. For example::"
msgstr ""

#: ../../ref/models/database-functions.txt:193
#: ../../ref/models/database-functions.txt:215
#: ../../ref/models/database-functions.txt:279
msgid "The ability to register the function as a transform was added."
msgstr ""

#: ../../ref/models/database-functions.txt:196
msgid "Lower"
msgstr ""

#: ../../ref/models/database-functions.txt:200
msgid ""
"Accepts a single text field or expression and returns the lowercase "
"representation."
msgstr ""

#: ../../ref/models/database-functions.txt:203
#: ../../ref/models/database-functions.txt:267
msgid ""
"It can also be registered as a transform as described in :class:`Length`."
msgstr ""

#: ../../ref/models/database-functions.txt:218
msgid "Now"
msgstr ""

#: ../../ref/models/database-functions.txt:224
msgid ""
"Returns the database server's current date and time when the query is "
"executed, typically using the SQL ``CURRENT_TIMESTAMP``."
msgstr ""

#: ../../ref/models/database-functions.txt:0
msgid "PostgreSQL considerations"
msgstr ""

#: ../../ref/models/database-functions.txt:235
msgid ""
"On PostgreSQL, the SQL ``CURRENT_TIMESTAMP`` returns the time that the "
"current transaction started. Therefore for cross-database compatibility, "
"``Now()`` uses ``STATEMENT_TIMESTAMP`` instead. If you need the transaction "
"timestamp, use :class:`django.contrib.postgres.functions.TransactionNow`."
msgstr ""

#: ../../ref/models/database-functions.txt:241
msgid "Substr"
msgstr ""

#: ../../ref/models/database-functions.txt:245
msgid ""
"Returns a substring of length ``length`` from the field or expression "
"starting at position ``pos``. The position is 1-indexed, so the position "
"must be greater than 0. If ``length`` is ``None``, then the rest of the "
"string will be returned."
msgstr ""

#: ../../ref/models/database-functions.txt:260
msgid "Upper"
msgstr ""

#: ../../ref/models/database-functions.txt:264
msgid ""
"Accepts a single text field or expression and returns the uppercase "
"representation."
msgstr ""
