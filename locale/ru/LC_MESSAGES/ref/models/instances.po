# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2012.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-02-29 18:30\n"
"PO-Revision-Date: 2012-02-15 15:13\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# 649d32f81a064b32986e8b43eb7595ab
#: ../../ref/models/instances.txt:3
msgid "Model instance reference"
msgstr ""

# c6efd924e01f4f5e85840f18f35c7521
#: ../../ref/models/instances.txt:7
msgid ""
"This document describes the details of the ``Model`` API. It builds on the "
"material presented in the :doc:`model </topics/db/models>` and :doc:"
"`database query </topics/db/queries>` guides, so you'll probably want to "
"read and understand those documents before reading this one."
msgstr ""

# 9e05c32aecc046e7ab0539d8b19518ec
#: ../../ref/models/instances.txt:12
msgid ""
"Throughout this reference we'll use the :ref:`example Weblog models "
"<queryset-model-example>` presented in the :doc:`database query guide </"
"topics/db/queries>`."
msgstr ""

# 0c1451ca4f1545dbbb555d1be14cfe78
#: ../../ref/models/instances.txt:17
msgid "Creating objects"
msgstr ""

# 35323d643346474b90514a3432055e40
#: ../../ref/models/instances.txt:19
msgid ""
"To create a new instance of a model, just instantiate it like any other "
"Python class:"
msgstr ""

# 23fe6764d1174f5897dac08572e9dc9b
#: ../../ref/models/instances.txt:24
msgid ""
"The keyword arguments are simply the names of the fields you've defined on "
"your model. Note that instantiating a model in no way touches your database; "
"for that, you need to :meth:`~Model.save()`."
msgstr ""

# a1af197f5374441fbd6f668e42644aef
#: ../../ref/models/instances.txt:31
msgid "Validating objects"
msgstr ""

# 93bd9a6303ac44f981b1dcbe691d5c83
#: ../../ref/models/instances.txt:35
msgid "There are three steps involved in validating a model:"
msgstr ""

# 2d28ada844a04da99aff382e3cec5dcd
#: ../../ref/models/instances.txt:37
msgid "Validate the model fields"
msgstr ""

# 5960436d670c49339e1f8a77a898d12f
#: ../../ref/models/instances.txt:38
msgid "Validate the model as a whole"
msgstr ""

# d3c5d873719c4115a6ed637da6a6642b
#: ../../ref/models/instances.txt:39
msgid "Validate the field uniqueness"
msgstr ""

# c04c6f856f3f42c9af2f08d69dce7d7b
#: ../../ref/models/instances.txt:41
msgid ""
"All three steps are performed when you call a model's :meth:`~Model."
"full_clean()` method."
msgstr ""

# 0ef0de90d1694bd6a19ea26ae8fa0ac2
#: ../../ref/models/instances.txt:44
msgid ""
"When you use a :class:`~django.forms.ModelForm`, the call to :meth:`~django."
"forms.Form.is_valid()` will perform these validation steps for all the "
"fields that are included on the form. See the :doc:`ModelForm documentation "
"</topics/forms/modelforms>` for more information. You should only need to "
"call a model's :meth:`~Model.full_clean()` method if you plan to handle "
"validation errors yourself, or if you have excluded fields from the :class:"
"`~django.forms.ModelForm` that require validation."
msgstr ""

# 06e39a0d61cf4fd8b83b5cea1435e0a3
#: ../../ref/models/instances.txt:54
msgid ""
"This method calls :meth:`Model.clean_fields()`, :meth:`Model.clean()`, and :"
"meth:`Model.validate_unique()`, in that order and raises a :exc:`~django."
"core.exceptions.ValidationError` that has a ``message_dict`` attribute "
"containing errors from all three stages."
msgstr ""

# 63d338c2a66e4453b34aad181339d1a7
#: ../../ref/models/instances.txt:59
msgid ""
"The optional ``exclude`` argument can be used to provide a list of field "
"names that can be excluded from validation and cleaning. :class:`~django."
"forms.ModelForm` uses this argument to exclude fields that aren't present on "
"your form from being validated since any errors raised could not be "
"corrected by the user."
msgstr ""

# 1a6a7d81bc384d96aad756aad0f488ca
#: ../../ref/models/instances.txt:65
msgid ""
"Note that ``full_clean()`` will *not* be called automatically when you call "
"your model's :meth:`~Model.save()` method, nor as a result of :class:"
"`~django.forms.ModelForm` validation. You'll need to call it manually when "
"you want to run one-step model validation for your own manually created "
"models."
msgstr ""

# ba18aee0c7da4eab844b716ea7779a0f
#: ../../ref/models/instances.txt:71
msgid "Example::"
msgstr ""

# 6c596143cc8a410eadd412441a29c35c
#: ../../ref/models/instances.txt:79
msgid ""
"The first step ``full_clean()`` performs is to clean each individual field."
msgstr ""

# 59bc3b15bd0246f58c315b3ace31c220
#: ../../ref/models/instances.txt:83
msgid ""
"This method will validate all fields on your model. The optional ``exclude`` "
"argument lets you provide a list of field names to exclude from validation. "
"It will raise a :exc:`~django.core.exceptions.ValidationError` if any fields "
"fail validation."
msgstr ""

# 5a68808ab9ab4bf5a61145be54c1134a
#: ../../ref/models/instances.txt:88
msgid ""
"The second step ``full_clean()`` performs is to call :meth:`Model.clean()`. "
"This method should be overridden to perform custom validation on your model."
msgstr ""

# 84b3e98dac6644bfae1c75bb3ba03ba5
#: ../../ref/models/instances.txt:93
msgid ""
"This method should be used to provide custom model validation, and to modify "
"attributes on your model if desired. For instance, you could use it to "
"automatically provide a value for a field, or to do validation that requires "
"access to more than a single field::"
msgstr ""

# add054fa6fe04f13bc58b99020a5edab
#: ../../ref/models/instances.txt:107
msgid ""
"Any :exc:`~django.core.exceptions.ValidationError` exceptions raised by "
"``Model.clean()`` will be stored in a special key error dictionary key, "
"``NON_FIELD_ERRORS``, that is used for errors that are tied to the entire "
"model instead of to a specific field::"
msgstr ""

# 91c9d98f74c54c40a03252a75f9e3ca8
#: ../../ref/models/instances.txt:118
msgid ""
"Finally, ``full_clean()`` will check any unique constraints on your model."
msgstr ""

# 50104e825b5444d783baf3fa5ac928c7
#: ../../ref/models/instances.txt:122
msgid ""
"This method is similar to :meth:`~Model.clean_fields`, but validates all "
"uniqueness constraints on your model instead of individual field values. The "
"optional ``exclude`` argument allows you to provide a list of field names to "
"exclude from validation. It will raise a :exc:`~django.core.exceptions."
"ValidationError` if any fields fail validation."
msgstr ""

# 03268cec819643c6b67a15565ec4818b
#: ../../ref/models/instances.txt:128
msgid ""
"Note that if you provide an ``exclude`` argument to ``validate_unique()``, "
"any :attr:`~django.db.models.Options.unique_together` constraint involving "
"one of the fields you provided will not be checked."
msgstr ""

# 098c3d147234461bad39df3e02a35830
#: ../../ref/models/instances.txt:134
msgid "Saving objects"
msgstr ""

# c840ed2fcba34cca99fd1acd27a82263
#: ../../ref/models/instances.txt:136
msgid "To save an object back to the database, call ``save()``:"
msgstr ""

# 5ba36080b7ba4d20994326616e1ef50d
#: ../../ref/models/instances.txt:143
msgid ""
"If you want customized saving behavior, you can override this ``save()`` "
"method. See :ref:`overriding-model-methods` for more details."
msgstr ""

# c52b843201a2476fa312ed7b6bf111ec
#: ../../ref/models/instances.txt:146
msgid ""
"The model save process also has some subtleties; see the sections below."
msgstr ""

# f774cc85cd73454bb517c9844e7254d3
#: ../../ref/models/instances.txt:149
msgid "Auto-incrementing primary keys"
msgstr ""

# 40ea6476c815472688ba7fbbcfc19fa5
#: ../../ref/models/instances.txt:151
msgid ""
"If a model has an :class:`~django.db.models.AutoField` — an auto-"
"incrementing primary key — then that auto-incremented value will be "
"calculated and saved as an attribute on your object the first time you call "
"``save()``::"
msgstr ""

# 651b53b421564ed38375f6909679f70e
#: ../../ref/models/instances.txt:160
msgid ""
"There's no way to tell what the value of an ID will be before you call ``save"
"()``, because that value is calculated by your database, not by Django."
msgstr ""

# 9b83a66be2014246a4a2c59d1d6f957e
#: ../../ref/models/instances.txt:163
msgid ""
"For convenience, each model has an :class:`~django.db.models.AutoField` "
"named ``id`` by default unless you explicitly specify ``primary_key=True`` "
"on a field in your model. See the documentation for :class:`~django.db."
"models.AutoField` for more details."
msgstr ""

# 190326b03b374f859182598c91a12f37
#: ../../ref/models/instances.txt:169
msgid "The ``pk`` property"
msgstr ""

# f539c4204852435a95e3b12a1412b519
#: ../../ref/models/instances.txt:173
msgid ""
"Regardless of whether you define a primary key field yourself, or let Django "
"supply one for you, each model will have a property called ``pk``. It "
"behaves like a normal attribute on the model, but is actually an alias for "
"whichever attribute is the primary key field for the model. You can read and "
"set this value, just as you would for any other attribute, and it will "
"update the correct field in the model."
msgstr ""

# 206bfe2281e3478ba50e6cd99f458b05
#: ../../ref/models/instances.txt:181
msgid "Explicitly specifying auto-primary-key values"
msgstr ""

# daf5d25b018a4eb58a7907f4d0f07994
#: ../../ref/models/instances.txt:183
msgid ""
"If a model has an :class:`~django.db.models.AutoField` but you want to "
"define a new object's ID explicitly when saving, just define it explicitly "
"before saving, rather than relying on the auto-assignment of the ID::"
msgstr ""

# 3a93a98526b8426ab9497a2aac2905f2
#: ../../ref/models/instances.txt:192
msgid ""
"If you assign auto-primary-key values manually, make sure not to use an "
"already-existing primary-key value! If you create a new object with an "
"explicit primary-key value that already exists in the database, Django will "
"assume you're changing the existing record rather than creating a new one."
msgstr ""

# 35bff39e62734d489e22b1fa14ae38f8
#: ../../ref/models/instances.txt:197
msgid ""
"Given the above ``'Cheddar Talk'`` blog example, this example would override "
"the previous record in the database::"
msgstr ""

# 819cafcb27af459785fec1a2a0eae827
#: ../../ref/models/instances.txt:203
msgid ""
"See `How Django knows to UPDATE vs. INSERT`_, below, for the reason this "
"happens."
msgstr ""

# 5be5ef59904444f9821b174edb1dbdc0
#: ../../ref/models/instances.txt:206
msgid ""
"Explicitly specifying auto-primary-key values is mostly useful for bulk-"
"saving objects, when you're confident you won't have primary-key collision."
msgstr ""

# d04372d78ad4406aa992d39972fe9a8f
#: ../../ref/models/instances.txt:210
msgid "What happens when you save?"
msgstr ""

# fc8ca633e516453ea0ed02cb05bd78b1
#: ../../ref/models/instances.txt:212
msgid "When you save an object, Django performs the following steps:"
msgstr ""

# 49a649847dc940979b384aa452c71120
#: ../../ref/models/instances.txt:214
msgid ""
"**Emit a pre-save signal.** The :doc:`signal </ref/signals>` :attr:`django."
"db.models.signals.pre_save` is sent, allowing any functions listening for "
"that signal to take some customized action."
msgstr ""

# 40caa366c585447dafced6ad65484e31
#: ../../ref/models/instances.txt:219
msgid ""
"**Pre-process the data.** Each field on the object is asked to perform any "
"automated data modification that the field may need to perform."
msgstr ""

# bedb769fff8148bc9f47e76ac72d11c2
#: ../../ref/models/instances.txt:223
msgid ""
"Most fields do *no* pre-processing — the field data is kept as-is. Pre-"
"processing is only used on fields that have special behavior.  For example, "
"if your model has a :class:`~django.db.models.DateField` with "
"``auto_now=True``, the pre-save phase will alter the data in the object to "
"ensure that the date field contains the current date stamp. (Our "
"documentation doesn't yet include a list of all the fields with this "
"\"special behavior.\")"
msgstr ""

# a69652b8dc60447a952cccd013446ab8
#: ../../ref/models/instances.txt:231
msgid ""
"**Prepare the data for the database.** Each field is asked to provide its "
"current value in a data type that can be written to the database."
msgstr ""

# e82d742cedf142fc98ede65b66888951
#: ../../ref/models/instances.txt:234
msgid ""
"Most fields require *no* data preparation. Simple data types, such as "
"integers and strings, are 'ready to write' as a Python object. However, more "
"complex data types often require some modification."
msgstr ""

# e03d498e9b2240698a9d9927cea8db6b
#: ../../ref/models/instances.txt:238
msgid ""
"For example, :class:`~django.db.models.DateField` fields use a Python "
"``datetime`` object to store data. Databases don't store ``datetime`` "
"objects, so the field value must be converted into an ISO-compliant date "
"string for insertion into the database."
msgstr ""

# 91daa17ee949449ab037d99f75483d64
#: ../../ref/models/instances.txt:243
msgid ""
"**Insert the data into the database.** The pre-processed, prepared data is "
"then composed into an SQL statement for insertion into the database."
msgstr ""

# 91052ed0d4524864805f7340fb7cc2f3
#: ../../ref/models/instances.txt:247
msgid ""
"**Emit a post-save signal.** The signal :attr:`django.db.models.signals."
"post_save` is sent, allowing any functions listening for that signal to take "
"some customized action."
msgstr ""

# 445b4fbfdf014f23bc065356b5f68677
#: ../../ref/models/instances.txt:253
msgid "How Django knows to UPDATE vs. INSERT"
msgstr ""

# a692e205b6a04318ac7a2d019f0eacbb
#: ../../ref/models/instances.txt:255
msgid ""
"You may have noticed Django database objects use the same ``save()`` method "
"for creating and changing objects. Django abstracts the need to use "
"``INSERT`` or ``UPDATE`` SQL statements. Specifically, when you call ``save()"
"``, Django follows this algorithm:"
msgstr ""

# b3dcce1ebf954ca482fd930b73e57efa
#: ../../ref/models/instances.txt:260
msgid ""
"If the object's primary key attribute is set to a value that evaluates to "
"``True`` (i.e., a value other than ``None`` or the empty string), Django "
"executes a ``SELECT`` query to determine whether a record with the given "
"primary key already exists."
msgstr ""

# bed72b10d96343c4b711127d99134753
#: ../../ref/models/instances.txt:264
msgid ""
"If the record with the given primary key does already exist, Django executes "
"an ``UPDATE`` query."
msgstr ""

# a13f1673a6524d59a3f2dd04dc251464
#: ../../ref/models/instances.txt:266
msgid ""
"If the object's primary key attribute is *not* set, or if it's set but a "
"record doesn't exist, Django executes an ``INSERT``."
msgstr ""

# 34aa17e5fafd43b08b28323d32cdadef
#: ../../ref/models/instances.txt:269
msgid ""
"The one gotcha here is that you should be careful not to specify a primary-"
"key value explicitly when saving new objects, if you cannot guarantee the "
"primary-key value is unused. For more on this nuance, see `Explicitly "
"specifying auto-primary-key values`_ above and `Forcing an INSERT or "
"UPDATE`_ below."
msgstr ""

# d180ef568b2b4c21a0763872d5b1b3f8
#: ../../ref/models/instances.txt:277
msgid "Forcing an INSERT or UPDATE"
msgstr ""

# 46e1acd5799248f49c7010a3adb1174a
#: ../../ref/models/instances.txt:279
msgid ""
"In some rare circumstances, it's necessary to be able to force the :meth:"
"`~Model.save()` method to perform an SQL ``INSERT`` and not fall back to "
"doing an ``UPDATE``. Or vice-versa: update, if possible, but not insert a "
"new row. In these cases you can pass the ``force_insert=True`` or "
"``force_update=True`` parameters to the :meth:`~Model.save()` method. "
"Obviously, passing both parameters is an error: you cannot both insert *and* "
"update at the same time!"
msgstr ""

# 7aa800ee3a5d43b2a798e4d6993f27f8
#: ../../ref/models/instances.txt:287
msgid ""
"It should be very rare that you'll need to use these parameters. Django will "
"almost always do the right thing and trying to override that will lead to "
"errors that are difficult to track down. This feature is for advanced use "
"only."
msgstr ""

# 3e9e7e8e699741929140673d8bdd9a74
#: ../../ref/models/instances.txt:293
msgid "Updating attributes based on existing fields"
msgstr ""

# 5280780451ad4fb195240aac2eacc58b
#: ../../ref/models/instances.txt:295
msgid ""
"Sometimes you'll need to perform a simple arithmetic task on a field, such "
"as incrementing or decrementing the current value. The obvious way to "
"achieve this is to do something like::"
msgstr ""

# e928f345411d488ab159890fccc309c2
#: ../../ref/models/instances.txt:303
msgid ""
"If the old ``number_sold`` value retrieved from the database was 10, then "
"the value of 11 will be written back to the database."
msgstr ""

# f558936c4c5a4cce8a4a5ed14bd6f9dc
#: ../../ref/models/instances.txt:306
msgid ""
"This sequence has a standard update problem in that it contains a race "
"condition. If another thread of execution has already saved an updated value "
"after the current thread retrieved the old value, the current thread will "
"only save the old value plus one, rather than the new (current) value plus "
"one."
msgstr ""

# d4ecdc8b5c9d4726bce0631972668fa7
#: ../../ref/models/instances.txt:311
msgid ""
"The process can be made robust and slightly faster by expressing the update "
"relative to the original field value, rather than as an explicit assignment "
"of a new value. Django provides :ref:`F() expressions <query-expressions>` "
"for performing this kind of relative update. Using ``F()`` expressions, the "
"previous example is expressed as::"
msgstr ""

# b8bcd00048d949af8374c8169c90d582
#: ../../ref/models/instances.txt:322
msgid ""
"This approach doesn't use the initial value from the database. Instead, it "
"makes the database do the update based on whatever value is current at the "
"time that the :meth:`~Model.save()` is executed."
msgstr ""

# 0a6dd6bd5ca042abad21f7a3d651f1ba
#: ../../ref/models/instances.txt:326
msgid ""
"Once the object has been saved, you must reload the object in order to "
"access the actual value that was applied to the updated field::"
msgstr ""

# 243276e7f53b4e898cafe9c475d44fa8
#: ../../ref/models/instances.txt:333
msgid ""
"For more details, see the documentation on :ref:`F() expressions <query-"
"expressions>` and their :ref:`use in update queries <topics-db-queries-"
"update>`."
msgstr ""

# 5710063c94b64f6a9867bbff8de57716
#: ../../ref/models/instances.txt:338
msgid "Deleting objects"
msgstr ""

# e7946ed560a34e83b2c99a904e4407cf
#: ../../ref/models/instances.txt:345
msgid ""
"Issues a SQL ``DELETE`` for the object. This only deletes the object in the "
"database; the Python instance will still exist and will still have data in "
"its fields."
msgstr ""

# 76bbf5d60a17460c98f0e01eaa8ecc3a
#: ../../ref/models/instances.txt:349
msgid ""
"For more details, including how to delete objects in bulk, see :ref:`topics-"
"db-queries-delete`."
msgstr ""

# 15b756b0ac7d48188d9957ab58daff95
#: ../../ref/models/instances.txt:352
msgid ""
"If you want customized deletion behavior, you can override the ``delete()`` "
"method. See :ref:`overriding-model-methods` for more details."
msgstr ""

# 722e6dd3564f4c2a821c76ed276b03c9
#: ../../ref/models/instances.txt:358
msgid "Other model instance methods"
msgstr ""

# b485a9afc82343eeab9befa8696e54ac
#: ../../ref/models/instances.txt:360
msgid "A few object methods have special purposes."
msgstr ""

# 77ddec81cdd4478dac1e8dcf53721767
#: ../../ref/models/instances.txt:363
msgid "``__unicode__``"
msgstr ""

# 322fead3b40a4c5780afc817e7714563
#: ../../ref/models/instances.txt:367
msgid ""
"The ``__unicode__()`` method is called whenever you call ``unicode()`` on an "
"object. Django uses ``unicode(obj)`` (or the related function, :meth:`str"
"(obj) <Model.__str__>`) in a number of places. Most notably, to display an "
"object in the Django admin site and as the value inserted into a template "
"when it displays an object. Thus, you should always return a nice, human-"
"readable representation of the model from the ``__unicode__()`` method."
msgstr ""

# 5b4e92636d0f4db499d2704f36b4edfb
# f0f49d96bd0242a4bb39fa7a3a784269
#: ../../ref/models/instances.txt:374 ../../ref/models/instances.txt:420
msgid "For example::"
msgstr ""

# 77610f5d55554d99963e837d02254090
#: ../../ref/models/instances.txt:383
msgid ""
"If you define a ``__unicode__()`` method on your model and not a :meth:"
"`~Model.__str__()` method, Django will automatically provide you with a :"
"meth:`~Model.__str__()` that calls ``__unicode__()`` and then converts the "
"result correctly to a UTF-8 encoded string object. This is recommended "
"development practice: define only ``__unicode__()`` and let Django take care "
"of the conversion to string objects when required."
msgstr ""

# 811e6bcf2367418bb7cdc15a31029b32
#: ../../ref/models/instances.txt:391
msgid "``__str__``"
msgstr ""

# c1169ef193684b02a2f0ff7ea349c3bd
#: ../../ref/models/instances.txt:395
msgid ""
"The ``__str__()`` method is called whenever you call ``str()`` on an object. "
"The main use for this method directly inside Django is when the ``repr()`` "
"output of a model is displayed anywhere (for example, in debugging output). "
"Thus, you should return a nice, human-readable string for the object's "
"``__str__()``.  It isn't required to put ``__str__()`` methods everywhere if "
"you have sensible :meth:`~Model.__unicode__()` methods."
msgstr ""

# 389315b6074e4b5ebd98d75cde5e3c31
#: ../../ref/models/instances.txt:399
msgid ""
"The previous :meth:`~Model.__unicode__()` example could be similarly written "
"using ``__str__()`` like this::"
msgstr ""

# 7be347663638442f8bf2f6a99674af1d
#: ../../ref/models/instances.txt:412
msgid "``get_absolute_url``"
msgstr ""

# 170be423e7b9487797847057de6377f5
#: ../../ref/models/instances.txt:416
msgid ""
"Define a ``get_absolute_url()`` method to tell Django how to calculate the "
"canonical URL for an object. To callers, this method should appear to return "
"a string that can be used to refer to the object over HTTP."
msgstr ""

# c2e13c9d8417413bac11402b7b71ad6d
#: ../../ref/models/instances.txt:425
msgid ""
"(Whilst this code is correct and simple, it may not be the most portable way "
"to write this kind of method. The :func:`permalink() decorator <permalink>`, "
"documented below, is usually the best approach and you should read that "
"section before diving into code implementation.)"
msgstr ""

# f01a31faf0bc4c679cb0db2cfa8b3b01
#: ../../ref/models/instances.txt:430
msgid ""
"One place Django uses ``get_absolute_url()`` is in the admin app. If an "
"object defines this method, the object-editing page will have a \"View on "
"site\" link that will jump you directly to the object's public view, as "
"given by ``get_absolute_url()``."
msgstr ""

# f16957c12a9b4c5184b86620d3f85233
#: ../../ref/models/instances.txt:435
msgid ""
"Similarly, a couple of other bits of Django, such as the :doc:`syndication "
"feed framework </ref/contrib/syndication>`, use ``get_absolute_url()`` when "
"it is defined. If it makes sense for your model's instances to each have a "
"unique URL, you should define ``get_absolute_url()``."
msgstr ""

# c79820e1a3f049c6b2afbf034475175e
#: ../../ref/models/instances.txt:440
msgid ""
"It's good practice to use ``get_absolute_url()`` in templates, instead of "
"hard-coding your objects' URLs. For example, this template code is bad::"
msgstr ""

# 366627a9ab644c97b9436cbfe11008c1
#: ../../ref/models/instances.txt:446
msgid "This template code is much better::"
msgstr ""

# f6ba7b82b1be4413bd17195594598517
#: ../../ref/models/instances.txt:450
msgid ""
"The logic here is that if you change the URL structure of your objects, even "
"for something simple such as correcting a spelling error, you don't want to "
"have to track down every place that the URL might be created. Specify it "
"once, in ``get_absolute_url()`` and have all your other code call that one "
"place."
msgstr ""

# 2b5c045aaa9a42faa0fac63212011858
#: ../../ref/models/instances.txt:456
msgid ""
"The string you return from ``get_absolute_url()`` **must** contain only "
"ASCII characters (required by the URI specfication, :rfc:`2396`) and be URL-"
"encoded, if necessary."
msgstr ""

# a2803a2645ed46faa1d84776eab4976a
#: ../../ref/models/instances.txt:460
msgid ""
"Code and templates calling ``get_absolute_url()`` should be able to use the "
"result directly without any further processing. You may wish to use the "
"``django.utils.encoding.iri_to_uri()`` function to help with this if you are "
"using unicode strings containing characters outside the ASCII range at all."
msgstr ""

# 2543e14c1a644a1e8e41151dbeeab8ab
#: ../../ref/models/instances.txt:467
msgid "The ``permalink`` decorator"
msgstr ""

# b1b78646f341486084aa97e70c0f5d6d
#: ../../ref/models/instances.txt:469
msgid ""
"The way we wrote ``get_absolute_url()`` above is a slightly violation of the "
"DRY principle: the URL for this object is defined both in the URLconf file "
"and in the model."
msgstr ""

# 6654de20a4484ebdb2ef73cbedb9e69e
#: ../../ref/models/instances.txt:473
msgid ""
"You can decouple your models from the URLconf using the ``permalink`` "
"decorator:"
msgstr ""

# 0de89d47f43f44d49c394757dba7a1cb
#: ../../ref/models/instances.txt:477
msgid ""
"This decorator takes the name of a URL pattern (either a view name or a URL "
"pattern name) and a list of position or keyword arguments and uses the "
"URLconf patterns to construct the correct, full URL. It returns a string for "
"the correct URL, with all parameters substituted in the correct positions."
msgstr ""

# daa122604922490fb98638f694970b68
#: ../../ref/models/instances.txt:482
msgid ""
"The ``permalink`` decorator is a Python-level equivalent to the :ttag:`url` "
"template tag and a high-level wrapper for the :func:`django.core."
"urlresolvers.reverse()` function."
msgstr ""

# 1655bcda94964ca3bf1dbeae206f18d7
#: ../../ref/models/instances.txt:484
msgid ""
"An example should make it clear how to use ``permalink()``. Suppose your "
"URLconf contains a line such as::"
msgstr ""

# b7b893018cd1456b8026524b479956c1
#: ../../ref/models/instances.txt:489
msgid ""
"...your model could have a :meth:`~django.db.models.Model.get_absolute_url()"
"` method that looked like this::"
msgstr ""

# 802da1e481af4c5082ad2fed6faeaae9
#: ../../ref/models/instances.txt:498
msgid "Similarly, if you had a URLconf entry that looked like::"
msgstr ""

# f6bc301e2a664f01ad133cd4048eb2db
#: ../../ref/models/instances.txt:502
msgid "...you could reference this using ``permalink()`` as follows::"
msgstr ""

# 12d9d11a392c4ece98b445b7838fcf84
#: ../../ref/models/instances.txt:511
msgid ""
"Notice that we specify an empty sequence for the second parameter in this "
"case, because we only want to pass keyword parameters, not positional ones."
msgstr ""

# 316dfa73947d483685e17f74efb6264d
#: ../../ref/models/instances.txt:514
msgid ""
"In this way, you're associating the model's absolute path with the view that "
"is used to display it, without repeating the view's URL information "
"anywhere. You can still use the :meth:`~django.db.models.Model."
"get_absolute_url()` method in templates, as before."
msgstr ""

# 57204706e08e4e6ca39b05f42d2dea98
#: ../../ref/models/instances.txt:519
msgid ""
"In some cases, such as the use of generic views or the re-use of custom "
"views for multiple models, specifying the view function may confuse the "
"reverse URL matcher (because multiple patterns point to the same view). For "
"that case, Django has :ref:`named URL patterns <naming-url-patterns>`. Using "
"a named URL pattern, it's possible to give a name to a pattern, and then "
"reference the name rather than the view function. A named URL pattern is "
"defined by replacing the pattern tuple by a call to the ``url`` function)::"
msgstr ""

# ee9251dfedba4df1bee846838c55e640
#: ../../ref/models/instances.txt:531
msgid ""
"...and then using that name to perform the reverse URL resolution instead of "
"the view name::"
msgstr ""

# cfc54b578d704da8b1de4d5c5351a237
#: ../../ref/models/instances.txt:540
msgid ""
"More details on named URL patterns are in the :doc:`URL dispatch "
"documentation </topics/http/urls>`."
msgstr ""

# 453c15c6a8844c309a23b08f28369113
#: ../../ref/models/instances.txt:544
msgid "Extra instance methods"
msgstr ""

# cf5de768199043bc8999fe4610b43407
#: ../../ref/models/instances.txt:546
msgid ""
"In addition to :meth:`~Model.save()`, :meth:`~Model.delete()`, a model "
"object might have some of the following methods:"
msgstr ""

# e0af5f91ae4a45bfa89adb4e84adaa04
#: ../../ref/models/instances.txt:551
msgid ""
"For every field that has :attr:`~django.db.models.Field.choices` set, the "
"object will have a ``get_FOO_display()`` method, where ``FOO`` is the name "
"of the field. This method returns the \"human-readable\" value of the field. "
"For example, in the following model::"
msgstr ""

# 1dcb1fbfbcd94144ab4b08557dac8804
#: ../../ref/models/instances.txt:564
msgid ""
"...each ``Person`` instance will have a ``get_gender_display()`` method. "
"Example::"
msgstr ""

# 29b4c3a7c4604d31883039917f636f41
#: ../../ref/models/instances.txt:576
msgid ""
"For every :class:`~django.db.models.DateField` and :class:`~django.db.models."
"DateTimeField` that does not have :attr:`null=True <django.db.models.Field."
"null>`, the object will have ``get_next_by_FOO()`` and ``get_previous_by_FOO"
"()`` methods, where ``FOO`` is the name of the field. This returns the next "
"and previous object with respect to the date field, raising the appropriate :"
"exc:`~django.db.DoesNotExist` exception when appropriate."
msgstr ""

# 806da9d072664e75a06d22615ab20138
#: ../../ref/models/instances.txt:583
msgid ""
"Both methods accept optional keyword arguments, which should be in the "
"format described in :ref:`Field lookups <field-lookups>`."
msgstr ""

# ee2b2e31cf7b488799a7efffc60e78a9
#: ../../ref/models/instances.txt:586
msgid ""
"Note that in the case of identical date values, these methods will use the "
"primary key as a tie-breaker. This guarantees that no records are skipped or "
"duplicated. That also means you cannot use those methods on unsaved objects."
msgstr ""
