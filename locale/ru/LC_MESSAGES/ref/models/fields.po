# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2012.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-02-15 15:13\n"
"PO-Revision-Date: 2012-02-15 15:13\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# 8c3574e0b9844bc2ab306e3fd9e3a480
#: ../../ref/models/fields.txt:3
msgid "Model field reference"
msgstr ""

# bf5836b84ffa41dea84a87ed1603e8ad
#: ../../ref/models/fields.txt:10
msgid ""
"This document contains all the gory details about all the `field options`_ "
"and `field types`_ Django's got to offer."
msgstr ""

# 8db684042d98466aa16a0d154ee0faf0
#: ../../ref/models/fields.txt:15
msgid ""
"If the built-in fields don't do the trick, you can try :mod:`django.contrib."
"localflavor`, which contains assorted pieces of code that are useful for "
"particular countries or cultures. Also, you can easily :doc:`write your own "
"custom model fields </howto/custom-model-fields>`."
msgstr ""

# b1f19cc7b4d44b24bbcc23bdaf3ee60f
#: ../../ref/models/fields.txt:22
msgid ""
"Technically, these models are defined in :mod:`django.db.models.fields`, but "
"for convenience they're imported into :mod:`django.db.models`; the standard "
"convention is to use ``from django.db import models`` and refer to fields as "
"``models.<Foo>Field``."
msgstr ""

# 949e35976cf4493d969fdcafdd398184
#: ../../ref/models/fields.txt:30
msgid "Field options"
msgstr ""

# 1f48e229206740f489037756eb045c48
#: ../../ref/models/fields.txt:32
msgid ""
"The following arguments are available to all field types. All are optional."
msgstr ""

# a64b7d33d09d4249afe63ec8c430cb6c
#: ../../ref/models/fields.txt:35
msgid "``null``"
msgstr ""

# 5edcb87a14ed4743a4bd25d9552d0291
#: ../../ref/models/fields.txt:39
msgid ""
"If ``True``, Django will store empty values as ``NULL`` in the database. "
"Default is ``False``."
msgstr ""

# 299c9454fa224fce9ffd2932e94b7ee0
#: ../../ref/models/fields.txt:42
msgid ""
"Note that empty string values will always get stored as empty strings, not "
"as ``NULL``. Only use ``null=True`` for non-string fields such as integers, "
"booleans and dates. For both types of fields, you will also need to set "
"``blank=True`` if you wish to permit empty values in forms, as the :attr:"
"`~Field.null` parameter only affects database storage (see :attr:`~Field."
"blank`)."
msgstr ""

# 746d1969e15243ac924113ffee5bfa3e
#: ../../ref/models/fields.txt:49
msgid ""
"Avoid using :attr:`~Field.null` on string-based fields such as :class:"
"`CharField` and :class:`TextField` unless you have an excellent reason. If a "
"string-based field has ``null=True``, that means it has two possible values "
"for \"no data\": ``NULL``, and the empty string. In most cases, it's "
"redundant to have two possible values for \"no data;\" Django convention is "
"to use the empty string, not ``NULL``."
msgstr ""

# eac78538e7a943089aabb4f7e287fcfe
#: ../../ref/models/fields.txt:58
msgid ""
"When using the Oracle database backend, the ``null=True`` option will be "
"coerced for string-based fields that have the empty string as a possible "
"value, and the value ``NULL`` will be stored to denote the empty string."
msgstr ""

# 8f49544161974108b7bb7556c08adb53
#: ../../ref/models/fields.txt:62
msgid ""
"If you want to accept :attr:`~Field.null` values with :class:`BooleanField`, "
"use :class:`NullBooleanField` instead."
msgstr ""

# 21722edb888c48a3adb088c10c164695
#: ../../ref/models/fields.txt:66
msgid "``blank``"
msgstr ""

# 6b8cd9cf2523413cb14648f334c6a2b6
#: ../../ref/models/fields.txt:70
msgid "If ``True``, the field is allowed to be blank. Default is ``False``."
msgstr ""

# 15dc731b778542e3b2a7b42fb3efd545
#: ../../ref/models/fields.txt:72
msgid ""
"Note that this is different than :attr:`~Field.null`. :attr:`~Field.null` is "
"purely database-related, whereas :attr:`~Field.blank` is validation-related. "
"If a field has ``blank=True``, validation on Django's admin site will allow "
"entry of an empty value. If a field has ``blank=False``, the field will be "
"required."
msgstr ""

# 0932349bf5ae4d69ac2dd2c90ebedeeb
#: ../../ref/models/fields.txt:80
msgid "``choices``"
msgstr ""

# 3db863fff97b49298c864bb69172dfd0
#: ../../ref/models/fields.txt:84
msgid ""
"An iterable (e.g., a list or tuple) of 2-tuples to use as choices for this "
"field."
msgstr ""

# a476634468b1440e933e3ffba538bad2
#: ../../ref/models/fields.txt:87
msgid ""
"If this is given, Django's admin will use a select box instead of the "
"standard text field and will limit choices to the choices given."
msgstr ""

# 989256f596904c15896f92a0c36c274d
#: ../../ref/models/fields.txt:90
msgid "A choices list looks like this::"
msgstr ""

# 06b3378ed2e84d00a25066994511c71f
#: ../../ref/models/fields.txt:100
msgid ""
"The first element in each tuple is the actual value to be stored. The second "
"element is the human-readable name for the option."
msgstr ""

# e8791684c6a141409f8d8562962d00a1
#: ../../ref/models/fields.txt:103
msgid "The choices list can be defined either as part of your model class::"
msgstr ""

# 56eeaf02a0d440959c9d14fb640fbfe6
#: ../../ref/models/fields.txt:112
msgid "or outside your model class altogether::"
msgstr ""

# 719553d08a9b404c98548b5bd2ec62cf
#: ../../ref/models/fields.txt:121
msgid ""
"You can also collect your available choices into named groups that can be "
"used for organizational purposes::"
msgstr ""

# 2c6993e86ae243979d2a220d5468b55f
#: ../../ref/models/fields.txt:138
msgid ""
"The first element in each tuple is the name to apply to the group. The "
"second element is an iterable of 2-tuples, with each 2-tuple containing a "
"value and a human-readable name for an option. Grouped options may be "
"combined with ungrouped options within a single list (such as the `unknown` "
"option in this example)."
msgstr ""

# 112c83d1f8e24ac29d752bf16d1b34de
#: ../../ref/models/fields.txt:144
msgid ""
"For each model field that has :attr:`~Field.choices` set, Django will add a "
"method to retrieve the human-readable name for the field's current value. "
"See :meth:`~django.db.models.Model.get_FOO_display` in the database API "
"documentation."
msgstr ""

# 1ac62f308271409fb2ccb1481d849071
#: ../../ref/models/fields.txt:149
msgid ""
"Finally, note that choices can be any iterable object -- not necessarily a "
"list or tuple. This lets you construct choices dynamically. But if you find "
"yourself hacking :attr:`~Field.choices` to be dynamic, you're probably "
"better off using a proper database table with a :class:`ForeignKey`. :attr:"
"`~Field.choices` is meant for static data that doesn't change much, if ever."
msgstr ""

# 4c0fd3c3453b4abebfe2e64d1007a2e6
#: ../../ref/models/fields.txt:156
msgid "``db_column``"
msgstr ""

# b47a9cc6ebe84c5a800278745e914956
#: ../../ref/models/fields.txt:160
msgid ""
"The name of the database column to use for this field. If this isn't given, "
"Django will use the field's name."
msgstr ""

# 31bef95c88c0488c90db54961c7e6d2d
#: ../../ref/models/fields.txt:163
msgid ""
"If your database column name is an SQL reserved word, or contains characters "
"that aren't allowed in Python variable names -- notably, the hyphen -- "
"that's OK. Django quotes column and table names behind the scenes."
msgstr ""

# 5b0a481694314364b83c2b1cb19600be
#: ../../ref/models/fields.txt:169
msgid "``db_index``"
msgstr ""

# e6bf60e4fa32443da614fd5f86355554
#: ../../ref/models/fields.txt:173
msgid ""
"If ``True``, djadmin:`django-admin.py sqlindexes <sqlindexes>` will output a "
"``CREATE INDEX`` statement for this field."
msgstr ""

# 55032a4532e54bfea9e535058dc8e01a
#: ../../ref/models/fields.txt:177
msgid "``db_tablespace``"
msgstr ""

# 62481809a3694862bcc3cb0ff5b26b1f
#: ../../ref/models/fields.txt:181
msgid ""
"The name of the :doc:`database tablespace </topics/db/tablespaces>` to use "
"for this field's index, if this field is indexed. The default is the "
"project's :setting:`DEFAULT_INDEX_TABLESPACE` setting, if set, or the :attr:"
"`~Options.db_tablespace` of the model, if any. If the backend doesn't "
"support tablespaces for indexes, this option is ignored."
msgstr ""

# 738893ac9a464bf587a73a8c34d12a11
#: ../../ref/models/fields.txt:188
msgid "``default``"
msgstr ""

# 66cc0377f8d54c998b5efa6c0b63b349
#: ../../ref/models/fields.txt:192
msgid ""
"The default value for the field. This can be a value or a callable object. "
"If callable it will be called every time a new object is created."
msgstr ""

# 750eb18dc5034be3ac51a5db175f3c2b
#: ../../ref/models/fields.txt:196
msgid "``editable``"
msgstr ""

# 7c3627d3daaa459b8889099957a25618
#: ../../ref/models/fields.txt:200
msgid ""
"If ``False``, the field will not be editable in the admin or via forms "
"automatically generated from the model class. Default is ``True``."
msgstr ""

# 6e65b2b6c34947a59d781de6605a92b4
#: ../../ref/models/fields.txt:204
msgid "``error_messages``"
msgstr ""

# 146706692c50405190649f6c8075250a
#: ../../ref/models/fields.txt:210
msgid ""
"The ``error_messages`` argument lets you override the default messages that "
"the field will raise. Pass in a dictionary with keys matching the error "
"messages you want to override."
msgstr ""

# 39febea652b5492d9d74801ea19ee1a9
#: ../../ref/models/fields.txt:214
msgid ""
"Error message keys include ``null``, ``blank``, ``invalid``, "
"``invalid_choice``, and ``unique``. Additional error message keys are "
"specified for each field in the `Field types`_ section below."
msgstr ""

# e21a3bb0e16d454cb6229717eb7796e2
#: ../../ref/models/fields.txt:219
msgid "``help_text``"
msgstr ""

# 7000d523df3846a78b92c5b0b63d58ce
#: ../../ref/models/fields.txt:223
msgid ""
"Extra \"help\" text to be displayed under the field on the object's admin "
"form. It's useful for documentation even if your object doesn't have an "
"admin form."
msgstr ""

# 82dcba9212a944749b0d7c7121a6e8c0
#: ../../ref/models/fields.txt:226
msgid ""
"Note that this value is *not* HTML-escaped when it's displayed in the admin "
"interface. This lets you include HTML in :attr:`~Field.help_text` if you so "
"desire. For example::"
msgstr ""

# 580032aedb9b4beeab09ffd1e206acbe
#: ../../ref/models/fields.txt:232
msgid ""
"Alternatively you can use plain text and ``django.utils.html.escape()`` to "
"escape any HTML special characters."
msgstr ""

# ccb13b4516194e24a9ad1349ee5cf320
#: ../../ref/models/fields.txt:236
msgid "``primary_key``"
msgstr ""

# c9014c14bbc34b37bc7e551859db8b90
#: ../../ref/models/fields.txt:240
msgid "If ``True``, this field is the primary key for the model."
msgstr ""

# d28040dbddaa47b5b6ceecea9677247d
#: ../../ref/models/fields.txt:242
msgid ""
"If you don't specify ``primary_key=True`` for any fields in your model, "
"Django will automatically add an :class:`IntegerField` to hold the primary "
"key, so you don't need to set ``primary_key=True`` on any of your fields "
"unless you want to override the default primary-key behavior. For more, see :"
"ref:`automatic-primary-key-fields`."
msgstr ""

# e979e5b8d0ce4ebe93e0247fbf073b7a
#: ../../ref/models/fields.txt:248
msgid ""
"``primary_key=True`` implies :attr:`null=False <Field.null>` and :attr:"
"`unique=True <Field.unique>`. Only one primary key is allowed on an object."
msgstr ""

# 593fb17b072141369e1e208341eda565
#: ../../ref/models/fields.txt:252
msgid "``unique``"
msgstr ""

# 95788ac44fcf48ec9547b21db29a57b0
#: ../../ref/models/fields.txt:256
msgid "If ``True``, this field must be unique throughout the table."
msgstr ""

# 38d364c67e0a4b3798cbd4592b5bff91
#: ../../ref/models/fields.txt:258
msgid ""
"This is enforced at the database level and at the Django admin-form level. "
"If you try to save a model with a duplicate value in a :attr:`~Field.unique` "
"field, a :exc:`django.db.IntegrityError` will be raised by the model's :meth:"
"`~django.db.models.Model.save` method."
msgstr ""

# 9228e41d79ad4f8c9a4a5c808992b330
#: ../../ref/models/fields.txt:263
msgid ""
"This option is valid on all field types except :class:`ManyToManyField` and :"
"class:`FileField`."
msgstr ""

# 16ac57d4c130475b88e90bfa9b59d0f7
#: ../../ref/models/fields.txt:267
msgid "``unique_for_date``"
msgstr ""

# 7676407ce35e44f18d360ba2de0890a5
#: ../../ref/models/fields.txt:271
msgid ""
"Set this to the name of a :class:`DateField` or :class:`DateTimeField` to "
"require that this field be unique for the value of the date field."
msgstr ""

# 23874035c391463cba86e99e2c4beb25
#: ../../ref/models/fields.txt:274
msgid ""
"For example, if you have a field ``title`` that has ``unique_for_date="
"\"pub_date\"``, then Django wouldn't allow the entry of two records with the "
"same ``title`` and ``pub_date``."
msgstr ""

# 95dc37dbce0148aaafc10847615efaf4
#: ../../ref/models/fields.txt:278
msgid ""
"This is enforced at the Django admin-form level but not at the database "
"level."
msgstr ""

# 8896dd7bc9294164a27a32b55196b7c7
#: ../../ref/models/fields.txt:281
msgid "``unique_for_month``"
msgstr ""

# bf8b8c34cc3342a28c0617fd5a46a863
#: ../../ref/models/fields.txt:285
msgid ""
"Like :attr:`~Field.unique_for_date`, but requires the field to be unique "
"with respect to the month."
msgstr ""

# 9998918199404177bb376e9d49164202
#: ../../ref/models/fields.txt:289
msgid "``unique_for_year``"
msgstr ""

# 34718c18f48d4beebe457cd4ea532bf4
#: ../../ref/models/fields.txt:293
msgid ""
"Like :attr:`~Field.unique_for_date` and :attr:`~Field.unique_for_month`."
msgstr ""

# 810d4df1fe7b445095fc7c61d7006ad8
#: ../../ref/models/fields.txt:296
msgid "``verbose_name``"
msgstr ""

# a17ba1776b8b4aa88a8325a70871da6b
#: ../../ref/models/fields.txt:300
msgid ""
"A human-readable name for the field. If the verbose name isn't given, Django "
"will automatically create it using the field's attribute name, converting "
"underscores to spaces. See :ref:`Verbose field names <verbose-field-names>`."
msgstr ""

# 2d7b380f37764041b6fbe885bef493bd
#: ../../ref/models/fields.txt:305
msgid "``validators``"
msgstr ""

# 5164e5b66d10475eabaf9c1c543a5f4c
#: ../../ref/models/fields.txt:311
msgid ""
"A list of validators to run for this field. See the :doc:`validators "
"documentation </ref/validators>` for more information."
msgstr ""

# 18b963e82b4546918406f0f304af94eb
#: ../../ref/models/fields.txt:317
msgid "Field types"
msgstr ""

# 082b945827d14012a2e68d4f99bb07bd
#: ../../ref/models/fields.txt:322
msgid "``AutoField``"
msgstr ""

# 82e1fe5d0c71467d9862d47b34404f7e
#: ../../ref/models/fields.txt:326
msgid ""
"An :class:`IntegerField` that automatically increments according to "
"available IDs. You usually won't need to use this directly; a primary key "
"field will automatically be added to your model if you don't specify "
"otherwise. See :ref:`automatic-primary-key-fields`."
msgstr ""

# 83d29df4fc8d46cd907838a39c49f99a
#: ../../ref/models/fields.txt:332
msgid "``BigIntegerField``"
msgstr ""

# 5ec28ef1e8e642deb0da59abb230a9c0
#: ../../ref/models/fields.txt:338
msgid ""
"A 64 bit integer, much like an :class:`IntegerField` except that it is "
"guaranteed to fit numbers from -9223372036854775808 to 9223372036854775807. "
"The admin represents this as an ``<input type=\"text\">`` (a single-line "
"input)."
msgstr ""

# a5cb2135a6bd43d7bd284e7312447416
#: ../../ref/models/fields.txt:344
msgid "``BooleanField``"
msgstr ""

# 68b6f9896d334c4f868ad663cdc47cb0
#: ../../ref/models/fields.txt:348
msgid "A true/false field."
msgstr ""

# 18088d3b3dd04aec805a4d3f8bc064d9
#: ../../ref/models/fields.txt:350
msgid "The admin represents this as a checkbox."
msgstr ""

# 594009a7a8ff428e8572d1daf75d7b4e
#: ../../ref/models/fields.txt:352
msgid ""
"If you need to accept :attr:`~Field.null` values then use :class:"
"`NullBooleanField` instead."
msgstr ""

# 85f1d44cd44143a0855fb1a1dc492c4a
#: ../../ref/models/fields.txt:361
msgid "``CharField``"
msgstr ""

# 4b41c5b207494cc8be62a33a6c66953f
#: ../../ref/models/fields.txt:365
msgid "A string field, for small- to large-sized strings."
msgstr ""

# c234a5f64c2247bd84e3791e292fb555
#: ../../ref/models/fields.txt:367
msgid "For large amounts of text, use :class:`~django.db.models.TextField`."
msgstr ""

# 7ea77972e584406c8fbb70cfcb838df7
# 2cd5a0971f6e4ba7b41f9233044cffa4
# c39d201a4b3a4319bc10478010c69b1b
# 7135c9597bc844b9bf1029ee7057a762
#: ../../ref/models/fields.txt:369 ../../ref/models/fields.txt:469
#: ../../ref/models/fields.txt:707 ../../ref/models/fields.txt:899
msgid ""
"The admin represents this as an ``<input type=\"text\">`` (a single-line "
"input)."
msgstr ""

# 33c6fdea57dd430c8057f0e066e9f475
#: ../../ref/models/fields.txt:371
msgid ":class:`CharField` has one extra required argument:"
msgstr ""

# 3685f67898574a29a149e781eaa8f2a8
#: ../../ref/models/fields.txt:375
msgid ""
"The maximum length (in characters) of the field. The max_length is enforced "
"at the database level and in Django's validation."
msgstr ""

# bf3bae0a55664dd5a2f69042f03e4673
#: ../../ref/models/fields.txt:380
msgid ""
"If you are writing an application that must be portable to multiple database "
"backends, you should be aware that there are restrictions on ``max_length`` "
"for some backends. Refer to the :doc:`database backend notes </ref/"
"databases>` for details."
msgstr ""

# 373efc2a709d4fa1b99b8f496b63d5bf
#: ../../ref/models/fields.txt:387
msgid ""
"If you are using this field with MySQLdb 1.2.2 and the ``utf8_bin`` "
"collation (which is *not* the default), there are some issues to be aware "
"of. Refer to the :ref:`MySQL database notes <mysql-collation>` for details."
msgstr ""

# 692ea20f1f5e4e5984fad147ba250369
#: ../../ref/models/fields.txt:394
msgid "``CommaSeparatedIntegerField``"
msgstr ""

# 05eaed3139b940a88587706a154f9b41
#: ../../ref/models/fields.txt:398
msgid ""
"A field of integers separated by commas. As in :class:`CharField`, the :attr:"
"`~CharField.max_length` argument is required and the note about database "
"portability mentioned there should be heeded."
msgstr ""

# 1a94384169c84ed7ab5888cd212442a6
#: ../../ref/models/fields.txt:403
msgid "``DateField``"
msgstr ""

# fbc801227a4a40dc8b8f34282e001c1c
#: ../../ref/models/fields.txt:407
msgid ""
"A date, represented in Python by a ``datetime.date`` instance. Has a few "
"extra, optional arguments:"
msgstr ""

# 79635f0fed254a31aa7973c53ae4bacb
#: ../../ref/models/fields.txt:412
msgid ""
"Automatically set the field to now every time the object is saved. Useful "
"for \"last-modified\" timestamps. Note that the current date is *always* "
"used; it's not just a default value that you can override."
msgstr ""

# f32850092b49421897cd5b0a79858302
#: ../../ref/models/fields.txt:418
msgid ""
"Automatically set the field to now when the object is first created. Useful "
"for creation of timestamps. Note that the current date is *always* used; "
"it's not just a default value that you can override."
msgstr ""

# 7ce7b7d9be9646ac83ee43e2da746588
#: ../../ref/models/fields.txt:422
msgid ""
"The admin represents this as an ``<input type=\"text\">`` with a JavaScript "
"calendar, and a shortcut for \"Today\". Includes an additional "
"``invalid_date`` error message key."
msgstr ""

# 9676f0dc473b47a99f2aad98dbf1e16e
#: ../../ref/models/fields.txt:427
msgid ""
"As currently implemented, setting ``auto_now`` or ``auto_now_add`` to "
"``True`` will cause the field to have ``editable=False`` and ``blank=True`` "
"set."
msgstr ""

# 9ea587e4e3524b39a67603cfda36d057
#: ../../ref/models/fields.txt:432
msgid "``DateTimeField``"
msgstr ""

# 7ddddeee8f264a7caed679719fd17558
#: ../../ref/models/fields.txt:436
msgid ""
"A date and time, represented in Python by a ``datetime.datetime`` instance. "
"Takes the same extra arguments as :class:`DateField`."
msgstr ""

# 0238f5fa36f54e76955c6fe78307adde
#: ../../ref/models/fields.txt:439
msgid ""
"The admin represents this as two ``<input type=\"text\">`` fields, with "
"JavaScript shortcuts."
msgstr ""

# a845530191a544dcb5ba3624790feb2d
#: ../../ref/models/fields.txt:443
msgid "``DecimalField``"
msgstr ""

# d25c51fab5bb410fbd56e4f1441f1d0b
#: ../../ref/models/fields.txt:447
msgid ""
"A fixed-precision decimal number, represented in Python by a :class:"
"`~decimal.Decimal` instance. Has two **required** arguments:"
msgstr ""

# b9801849694b463d9a74448b5f4a93e3
#: ../../ref/models/fields.txt:452
msgid ""
"The maximum number of digits allowed in the number. Note that this number "
"must be greater than or equal to ``decimal_places``, if it exists."
msgstr ""

# 1926a9516f52462b9b715ced195e8251
#: ../../ref/models/fields.txt:457
msgid "The number of decimal places to store with the number."
msgstr ""

# 4e32207e096e49c29e7577574ed3633c
#: ../../ref/models/fields.txt:459
msgid ""
"For example, to store numbers up to 999 with a resolution of 2 decimal "
"places, you'd use::"
msgstr ""

# 9aca9a3a948f44259a57f69ba3c15981
#: ../../ref/models/fields.txt:464
msgid ""
"And to store numbers up to approximately one billion with a resolution of 10 "
"decimal places::"
msgstr ""

# d20e1f8cff3d4abd9f64e5b34dab3e86
#: ../../ref/models/fields.txt:473
msgid ""
"For more information about the differences between the :class:`FloatField` "
"and :class:`DecimalField` classes, please see :ref:`FloatField vs. "
"DecimalField <floatfield_vs_decimalfield>`."
msgstr ""

# 5643c3c3b85f43c49301e730cb781305
#: ../../ref/models/fields.txt:478
msgid "``EmailField``"
msgstr ""

# db898623fc2a46148f39e94967e3cfd0
#: ../../ref/models/fields.txt:482
msgid ""
"A :class:`CharField` that checks that the value is a valid email address."
msgstr ""

# 2f2a524f57904e969789685ccd0efdee
#: ../../ref/models/fields.txt:485
msgid "``FileField``"
msgstr ""

# 9b089018e91144c7ae42062df86fb5c7
#: ../../ref/models/fields.txt:489
msgid "A file-upload field."
msgstr ""

# 6ebc973729c348798c659e7eaf5f06a5
#: ../../ref/models/fields.txt:492
msgid ""
"The ``primary_key`` and ``unique`` arguments are not supported, and will "
"raise a ``TypeError`` if used."
msgstr ""

# 6010854b282b4f9bb639fb34bcb4632e
#: ../../ref/models/fields.txt:495
msgid "Has one **required** argument:"
msgstr ""

# 75c345765fc6430cb35099252d85fc21
#: ../../ref/models/fields.txt:499
msgid ""
"A local filesystem path that will be appended to your :setting:`MEDIA_ROOT` "
"setting to determine the value of the :attr:`~django.core.files.File.url` "
"attribute."
msgstr ""

# ffe8dc7d538b48be84193da1edf66984
#: ../../ref/models/fields.txt:503
msgid ""
"This path may contain :func:`~time.strftime` formatting, which will be "
"replaced by the date/time of the file upload (so that uploaded files don't "
"fill up the given directory)."
msgstr ""

# b13e63c3d15c4bda8e1619e28c867f0c
#: ../../ref/models/fields.txt:507
msgid ""
"This may also be a callable, such as a function, which will be called to "
"obtain the upload path, including the filename. This callable must be able "
"to accept two arguments, and return a Unix-style path (with forward slashes) "
"to be passed along to the storage system. The two arguments that will be "
"passed are:"
msgstr ""

# e5a274e5ee6447eb983ed3e7aee124e4
#: ../../ref/models/fields.txt:514
msgid "Argument"
msgstr ""

# d19f1390467348f5ae3be0c273b00d06
#: ../../ref/models/fields.txt:514
msgid "Description"
msgstr ""

# f1eaa67b17484094b4180f2b64c88999
#: ../../ref/models/fields.txt:516
msgid "``instance``"
msgstr ""

# 51d7ea9394724b928722b1b640115e79
#: ../../ref/models/fields.txt:516
msgid ""
"An instance of the model where the ``FileField`` is defined. More "
"specifically, this is the particular instance where the current file is "
"being attached."
msgstr ""

# c840ca02ec9f4d34ab785e49b6729966
#: ../../ref/models/fields.txt:521
msgid ""
"In most cases, this object will not have been saved to the database yet, so "
"if it uses the default ``AutoField``, *it might not yet have a value for its "
"primary key field*."
msgstr ""

# 08b51c302ebd44e8b45b506d7629c8da
#: ../../ref/models/fields.txt:526
msgid "``filename``"
msgstr ""

# b3fbea48879148bdaa500977c206519f
#: ../../ref/models/fields.txt:526
msgid ""
"The filename that was originally given to the file. This may or may not be "
"taken into account when determining the final destination path."
msgstr ""

# f2df786f57d547b39cf855f10e9c4a8a
#: ../../ref/models/fields.txt:531
msgid "Also has one optional argument:"
msgstr ""

# 79ba275a2ca349e88c2e118052f87601
#: ../../ref/models/fields.txt:535
msgid ""
"Optional. A storage object, which handles the storage and retrieval of your "
"files. See :doc:`/topics/files` for details on how to provide this object."
msgstr ""

# 7baf9bc3a27d4a1d873d0572db0fbca1
#: ../../ref/models/fields.txt:538
msgid ""
"The admin represents this field as an ``<input type=\"file\">`` (a file-"
"upload widget)."
msgstr ""

# 0644b76ce62441aaa7f0cd15a92c9a27
#: ../../ref/models/fields.txt:541
msgid ""
"Using a :class:`FileField` or an :class:`ImageField` (see below) in a model "
"takes a few steps:"
msgstr ""

# a6795ee231464a619bf58d72ce463600
#: ../../ref/models/fields.txt:544
msgid ""
"In your settings file, you'll need to define :setting:`MEDIA_ROOT` as the "
"full path to a directory where you'd like Django to store uploaded files. "
"(For performance, these files are not stored in the database.) Define :"
"setting:`MEDIA_URL` as the base public URL of that directory. Make sure that "
"this directory is writable by the Web server's user account."
msgstr ""

# 7e466f2d372b4bc295d8ef8ca77cd635
#: ../../ref/models/fields.txt:550
msgid ""
"Add the :class:`FileField` or :class:`ImageField` to your model, making sure "
"to define the :attr:`~FileField.upload_to` option to tell Django to which "
"subdirectory of :setting:`MEDIA_ROOT` it should upload files."
msgstr ""

# 2b93b64f17ef4548b5a447c10fb61f18
#: ../../ref/models/fields.txt:554
msgid ""
"All that will be stored in your database is a path to the file (relative to :"
"setting:`MEDIA_ROOT`). You'll most likely want to use the convenience :attr:"
"`~django.core.files.File.url` function provided by Django. For example, if "
"your :class:`ImageField` is called ``mug_shot``, you can get the absolute "
"path to your image in a template with ``{{ object.mug_shot.url }}``."
msgstr ""

# 3755e07f631d4b4a83e71bba8133d25e
#: ../../ref/models/fields.txt:561
msgid ""
"For example, say your :setting:`MEDIA_ROOT` is set to ``'/home/media'``, "
"and :attr:`~FileField.upload_to` is set to ``'photos/%Y/%m/%d'``. The ``'%Y/"
"%m/%d'`` part of :attr:`~FileField.upload_to` is :func:`~time.strftime` "
"formatting; ``'%Y'`` is the four-digit year, ``'%m'`` is the two-digit month "
"and ``'%d'`` is the two-digit day. If you upload a file on Jan. 15, 2007, it "
"will be saved in the directory ``/home/media/photos/2007/01/15``."
msgstr ""

# 24a7aff69f894620bc484c8f0c57a76e
#: ../../ref/models/fields.txt:568
msgid ""
"If you wanted to retrieve the uploaded file's on-disk filename, or the "
"file's size, you could use the :attr:`~django.core.files.File.name` and :"
"attr:`~django.core.files.File.size` attributes respectively; for more "
"information on the available attributes and methods, see the :class:`~django."
"core.files.File` class reference and the :doc:`/topics/files` topic guide."
msgstr ""

# 331bc9a31d734743b73ab865cccd49a2
#: ../../ref/models/fields.txt:576
msgid ""
"The file is saved as part of saving the model in the database, so the actual "
"file name used on disk cannot be relied on until after the model has been "
"saved."
msgstr ""

# 75e79999d24a4aabb4fffc2e9efbbe94
#: ../../ref/models/fields.txt:580
msgid ""
"The uploaded file's relative URL can be obtained using the :attr:`~django.db."
"models.fields.FileField.url` attribute. Internally, this calls the :meth:"
"`~django.core.files.storage.Storage.url` method of the underlying :class:"
"`~django.core.files.storage.Storage` class."
msgstr ""

# 4f30fb5c203440dd95125ae0c5fa2206
#: ../../ref/models/fields.txt:587
msgid ""
"Note that whenever you deal with uploaded files, you should pay close "
"attention to where you're uploading them and what type of files they are, to "
"avoid security holes. *Validate all uploaded files* so that you're sure the "
"files are what you think they are. For example, if you blindly let somebody "
"upload files, without validation, to a directory that's within your Web "
"server's document root, then somebody could upload a CGI or PHP script and "
"execute that script by visiting its URL on your site. Don't allow that."
msgstr ""

# 82d3e19145f149e1ba0b68d7a1b9bc17
#: ../../ref/models/fields.txt:595
msgid ""
"Also note that even an uploaded HTML file, since it can be executed by the "
"browser (though not by the server), can pose security threats that are "
"equivalent to XSS or CSRF attacks."
msgstr ""

# 62509adbe0414b92b2aae736e8e5cb68
#: ../../ref/models/fields.txt:599
msgid ""
"By default, :class:`FileField` instances are created as ``varchar(100)`` "
"columns in your database. As with other fields, you can change the maximum "
"length using the :attr:`~CharField.max_length` argument."
msgstr ""

# d0fba97f8c144d3fbc44c789f00b1f70
#: ../../ref/models/fields.txt:604
msgid "FileField and FieldFile"
msgstr ""

# 1652b28e48d24256abde753aa031246b
#: ../../ref/models/fields.txt:606
msgid ""
"When you access a :class:`FileField` on a model, you are given an instance "
"of :class:`FieldFile` as a proxy for accessing the underlying file. This "
"class has several methods that can be used to interact with file data:"
msgstr ""

# 00efa5f28acf40b390570cdf6e152350
#: ../../ref/models/fields.txt:612
msgid ""
"Behaves like the standard Python ``open()`` method and opens the file "
"associated with this instance in the mode specified by ``mode``."
msgstr ""

# e2375f94a807447f9bbb555003b817b2
#: ../../ref/models/fields.txt:617
msgid ""
"Behaves like the standard Python ``file.close()`` method and closes the file "
"associated with this instance."
msgstr ""

# 9461704bb51d499b89e444fb66f14211
#: ../../ref/models/fields.txt:622
msgid ""
"This method takes a filename and file contents and passes them to the "
"storage class for the field, then associates the stored file with the model "
"field. If you want to manually associate file data with :class:`FileField` "
"instances on your model, the ``save()`` method is used to persist that file "
"data."
msgstr ""

# f875b0b4104c4415a1f0ddcacf846357
#: ../../ref/models/fields.txt:628
msgid ""
"Takes two required arguments: ``name`` which is the name of the file, and "
"``content`` which is an object containing the file's contents.  The optional "
"``save`` argument controls whether or not the instance is saved after the "
"file has been altered. Defaults to ``True``."
msgstr ""

# 5a35a656cac94d348b007fda814f4b32
#: ../../ref/models/fields.txt:633
msgid ""
"Note that the ``content`` argument should be an instance of :class:`django."
"core.files.File`, not Python's built-in file object. You can construct a :"
"class:`~django.core.files.File` from an existing Python file object like "
"this::"
msgstr ""

# 42648af5e1344238a58edab90f87bdb7
#: ../../ref/models/fields.txt:643
msgid "Or you can construct one from a Python string like this::"
msgstr ""

# 55163e17c41e43fcaba376b95531e153
#: ../../ref/models/fields.txt:648
msgid "For more information, see :doc:`/topics/files`."
msgstr ""

# db96c77494b542b3b68ff09250e383c3
#: ../../ref/models/fields.txt:652
msgid ""
"Deletes the file associated with this instance and clears all attributes on "
"the field. Note: This method will close the file if it happens to be open "
"when ``delete()`` is called."
msgstr ""

# 65dfde837435447191e53893a216728b
#: ../../ref/models/fields.txt:656
msgid ""
"The optional ``save`` argument controls whether or not the instance is saved "
"after the file has been deleted. Defaults to ``True``."
msgstr ""

# 385fd41490fb49c880e3f92d620bab25
#: ../../ref/models/fields.txt:660
msgid "``FilePathField``"
msgstr ""

# 0585d29386c94d5ba1bf44d9f508d210
#: ../../ref/models/fields.txt:664
msgid ""
"A :class:`CharField` whose choices are limited to the filenames in a certain "
"directory on the filesystem. Has three special arguments, of which the first "
"is **required**:"
msgstr ""

# 87ebbe7c341b437da3babc01bf72b52c
#: ../../ref/models/fields.txt:670
msgid ""
"Required. The absolute filesystem path to a directory from which this :class:"
"`FilePathField` should get its choices. Example: ``\"/home/images\"``."
msgstr ""

# 07530c2dcfef4f08802d4940560059b5
#: ../../ref/models/fields.txt:675
msgid ""
"Optional. A regular expression, as a string, that :class:`FilePathField` "
"will use to filter filenames. Note that the regex will be applied to the "
"base filename, not the full path. Example: ``\"foo.*\\.txt$\"``, which will "
"match a file called ``foo23.txt`` but not ``bar.txt`` or ``foo23.gif``."
msgstr ""

# 5421eb38402143589395bf27d57d672c
#: ../../ref/models/fields.txt:682
msgid ""
"Optional. Either ``True`` or ``False``. Default is ``False``. Specifies "
"whether all subdirectories of :attr:`~FilePathField.path` should be included"
msgstr ""

# f874b74b1b98491c86ceda74f32a799b
#: ../../ref/models/fields.txt:685
msgid "Of course, these arguments can be used together."
msgstr ""

# 1f2f5a551ea44eb1a6f3e279a0b38fab
#: ../../ref/models/fields.txt:687
msgid ""
"The one potential gotcha is that :attr:`~FilePathField.match` applies to the "
"base filename, not the full path. So, this example::"
msgstr ""

# f17ceaa13f8f488185382de87d36d775
#: ../../ref/models/fields.txt:692
msgid ""
"...will match ``/home/images/foo.gif`` but not ``/home/images/foo/bar.gif`` "
"because the :attr:`~FilePathField.match` applies to the base filename (``foo."
"gif`` and ``bar.gif``)."
msgstr ""

# 2262ca133bee441584b0eece2e4a35a2
#: ../../ref/models/fields.txt:696
msgid ""
"By default, :class:`FilePathField` instances are created as ``varchar(100)`` "
"columns in your database. As with other fields, you can change the maximum "
"length using the :attr:`~CharField.max_length` argument."
msgstr ""

# 0d4b75c208d1453698b1f5da20114b1f
#: ../../ref/models/fields.txt:701
msgid "``FloatField``"
msgstr ""

# 0ff04ae1624148f0a2e3ca4e3f6cfa7e
#: ../../ref/models/fields.txt:705
msgid "A floating-point number represented in Python by a ``float`` instance."
msgstr ""

# 1a919f175dce4b58bae1e6ab899292b9
#: ../../ref/models/fields.txt:713
msgid ""
"The :class:`FloatField` class is sometimes mixed up with the :class:"
"`DecimalField` class. Although they both represent real numbers, they "
"represent those numbers differently. ``FloatField`` uses Python's ``float`` "
"type internally, while ``DecimalField`` uses Python's ``Decimal`` type. For "
"information on the difference between the two, see Python's documentation "
"for the :mod:`decimal` module."
msgstr ""

# 468c1c14b7904a12b113fc543eeb7ac1
#: ../../ref/models/fields.txt:721
msgid "``ImageField``"
msgstr ""

# 3ec80fb0e2db41f083e3b6b0e83057eb
#: ../../ref/models/fields.txt:725
msgid ""
"Inherits all attributes and methods from :class:`FileField`, but also "
"validates that the uploaded object is a valid image."
msgstr ""

# 9639abfecb544310851a7d1cdc2d0c6a
#: ../../ref/models/fields.txt:728
msgid ""
"In addition to the special attributes that are available for :class:"
"`FileField`, an :class:`ImageField` also has :attr:`~django.core.files.File."
"height` and :attr:`~django.core.files.File.width` attributes."
msgstr ""

# 10b8eef0943a4a728b3c189dea293653
#: ../../ref/models/fields.txt:732
msgid ""
"To facilitate querying on those attributes, :class:`ImageField` has two "
"extra optional arguments:"
msgstr ""

# 85ea5105c062407585681b79c585f52c
#: ../../ref/models/fields.txt:737
msgid ""
"Name of a model field which will be auto-populated with the height of the "
"image each time the model instance is saved."
msgstr ""

# c661f625e1ac4d8c8fac23c59cac1992
#: ../../ref/models/fields.txt:742
msgid ""
"Name of a model field which will be auto-populated with the width of the "
"image each time the model instance is saved."
msgstr ""

# 8f8a360c12304295a8be9d4c944007fb
#: ../../ref/models/fields.txt:745
msgid "Requires the `Python Imaging Library`_."
msgstr ""

# 693103d12f804a60afad1589f7412835
#: ../../ref/models/fields.txt:749
msgid ""
"By default, :class:`ImageField` instances are created as ``varchar(100)`` "
"columns in your database. As with other fields, you can change the maximum "
"length using the :attr:`~CharField.max_length` argument."
msgstr ""

# bfd201dcf2f849ea938d4b5ed07c459f
#: ../../ref/models/fields.txt:754
msgid "``IntegerField``"
msgstr ""

# 07aa3cc0412e4e659893012794c0f0a0
#: ../../ref/models/fields.txt:758
msgid ""
"An integer. The admin represents this as an ``<input type=\"text\">`` (a "
"single-line input)."
msgstr ""

# c7e236a1ca364e4cb5bed0841e9a4938
#: ../../ref/models/fields.txt:762
msgid "``IPAddressField``"
msgstr ""

# 6f5c0727235843fdbd8d5b19c45c167c
#: ../../ref/models/fields.txt:766
msgid ""
"An IP address, in string format (e.g. \"192.0.2.30\"). The admin represents "
"this as an ``<input type=\"text\">`` (a single-line input)."
msgstr ""

# 10efef2ebb6146259b432f82eea2a6ce
#: ../../ref/models/fields.txt:770
msgid "``GenericIPAddressField``"
msgstr ""

# 9e28b938238a4ccbabfb06fd1019df22
#: ../../ref/models/fields.txt:776
msgid ""
"An IPv4 or IPv6 address, in string format (e.g. ``192.0.2.30`` or "
"``2a02:42fe::4``). The admin represents this as an ``<input type=\"text\">`` "
"(a single-line input)."
msgstr ""

# 8f11f506da0f4f1bacec1998c5c225a3
#: ../../ref/models/fields.txt:780
msgid ""
"The IPv6 address normalization follows :rfc:`4291#section-2.2` section 2.2, "
"including using the IPv4 format suggested in paragraph 3 of that section, "
"like ``::ffff:192.0.2.0``. For example, ``2001:0::0:01`` would be normalized "
"to ``2001::1``, and ``::ffff:0a0a:0a0a`` to ``::ffff:10.10.10.10``. All "
"characters are converted to lowercase."
msgstr ""

# 0083f498c8b8437ebd28a6d107af6468
#: ../../ref/models/fields.txt:788
msgid ""
"Limits valid inputs to the specified protocol. Accepted values are "
"``'both'`` (default), ``'IPv4'`` or ``'IPv6'``. Matching is case insensitive."
msgstr ""

# 05daf697f56548e3a921c39c24c664a4
#: ../../ref/models/fields.txt:794
msgid ""
"Unpacks IPv4 mapped addresses like ``::ffff::192.0.2.1``. If this option is "
"enabled that address would be unpacked to ``192.0.2.1``. Default is "
"disabled. Can only be used when ``protocol`` is set to ``'both'``."
msgstr ""

# 6606f41ad49146eaa1940d1640714d49
#: ../../ref/models/fields.txt:800
msgid "``NullBooleanField``"
msgstr ""

# 7a370dcd7f804de19fa3cd2daf834398
#: ../../ref/models/fields.txt:804
msgid ""
"Like a :class:`BooleanField`, but allows ``NULL`` as one of the options. Use "
"this instead of a :class:`BooleanField` with ``null=True``. The admin "
"represents this as a ``<select>`` box with \"Unknown\", \"Yes\" and \"No\" "
"choices."
msgstr ""

# 230cf89377a14151bd8eeedfc5299dac
#: ../../ref/models/fields.txt:809
msgid "``PositiveIntegerField``"
msgstr ""

# 4068d3aefae14d06afca8debfa591e7c
#: ../../ref/models/fields.txt:813
msgid ""
"Like an :class:`IntegerField`, but must be either positive or zero (`0`). "
"The value `0` is accepted for backward compatibility reasons."
msgstr ""

# 8aeb8e6539d3496fb8386a1d98e107be
#: ../../ref/models/fields.txt:817
msgid "``PositiveSmallIntegerField``"
msgstr ""

# 45c7cd2886f148ffa8bd561ab732e191
#: ../../ref/models/fields.txt:821
msgid ""
"Like a :class:`PositiveIntegerField`, but only allows values under a certain "
"(database-dependent) point."
msgstr ""

# 528a021487b44adba07404ac592151b9
#: ../../ref/models/fields.txt:825
msgid "``SlugField``"
msgstr ""

# 1614324341bc4c67b2bb5e4cde36f595
#: ../../ref/models/fields.txt:829
msgid ""
":term:`Slug` is a newspaper term. A slug is a short label for something, "
"containing only letters, numbers, underscores or hyphens. They're generally "
"used in URLs."
msgstr ""

# db6c0ab23a6e4de5acb87c5682e734ec
#: ../../ref/models/fields.txt:833
msgid ""
"Like a CharField, you can specify :attr:`~CharField.max_length` (read the "
"note about database portability and :attr:`~CharField.max_length` in that "
"section, too). If :attr:`~CharField.max_length` is not specified, Django "
"will use a default length of 50."
msgstr ""

# 8c5fbaf0c4b742e39ceb1cf2887dfb18
#: ../../ref/models/fields.txt:838
msgid "Implies setting :attr:`Field.db_index` to ``True``."
msgstr ""

# b38d4980701c47beaa8beabae7d8214a
#: ../../ref/models/fields.txt:840
msgid ""
"It is often useful to automatically prepopulate a SlugField based on the "
"value of some other value.  You can do this automatically in the admin "
"using :attr:`~django.contrib.admin.ModelAdmin.prepopulated_fields`."
msgstr ""

# c96a689127ac4b0aa63cccadb6f38ea2
#: ../../ref/models/fields.txt:845
msgid "``SmallIntegerField``"
msgstr ""

# 8f4d2afa4d564e20bac96947ab99aa55
#: ../../ref/models/fields.txt:849
msgid ""
"Like an :class:`IntegerField`, but only allows values under a certain "
"(database-dependent) point."
msgstr ""

# 7e9ffe6139cf4afb91b92e2de31373ab
#: ../../ref/models/fields.txt:853
msgid "``TextField``"
msgstr ""

# b9b3d7b20a3244db8f4bd48a2350511b
#: ../../ref/models/fields.txt:857
msgid ""
"A large text field. The admin represents this as a ``<textarea>`` (a multi-"
"line input)."
msgstr ""

# b0cfac2022804d58a432f9c0e98ff372
#: ../../ref/models/fields.txt:862
msgid ""
"If you are using this field with MySQLdb 1.2.1p2 and the ``utf8_bin`` "
"collation (which is *not* the default), there are some issues to be aware "
"of. Refer to the :ref:`MySQL database notes <mysql-collation>` for details."
msgstr ""

# 4c7cf6a35a414a7780a52d9b3c2739ef
#: ../../ref/models/fields.txt:868
msgid "``TimeField``"
msgstr ""

# ff4c3ad454724348a3a62310a8799add
#: ../../ref/models/fields.txt:872
msgid ""
"A time, represented in Python by a ``datetime.time`` instance. Accepts the "
"same auto-population options as :class:`DateField`."
msgstr ""

# 22ed7c19571c49ac8592c0da81372d9f
#: ../../ref/models/fields.txt:875
msgid ""
"The admin represents this as an ``<input type=\"text\">`` with some "
"JavaScript shortcuts."
msgstr ""

# 74494961615e41c9989f9e307c7d82af
#: ../../ref/models/fields.txt:879
msgid "``URLField``"
msgstr ""

# 2d93325aec6141b6a4743fda17f75170
#: ../../ref/models/fields.txt:883
msgid "A :class:`CharField` for a URL. Has one extra optional argument:"
msgstr ""

# c84f43a1f02e4edb82d6d38cdd620483
#: ../../ref/models/fields.txt:891
msgid ""
"If ``True``, the URL given will be checked for existence (i.e., the URL "
"actually loads and doesn't give a 404 response) using a ``HEAD`` request. "
"Redirects are allowed, but will not be followed."
msgstr ""

# 37d4d8adde684a4283f682dc1d5fa26f
#: ../../ref/models/fields.txt:895
msgid ""
"Note that when you're using the single-threaded development server, "
"validating a URL being served by the same server will hang. This should not "
"be a problem for multithreaded servers."
msgstr ""

# c068c988bff24970967a42210d75a0d7
#: ../../ref/models/fields.txt:901
msgid ""
"Like all :class:`CharField` subclasses, :class:`URLField` takes the "
"optional :attr:`~CharField.max_length`argument. If you don't specify :attr:"
"`~CharField.max_length`, a default of 200 is used."
msgstr ""

# 8518ecdc360745deb178ad0e3980ddfd
#: ../../ref/models/fields.txt:906
msgid "``XMLField``"
msgstr ""

# 6266eac19ff849e2bce93e7e9bc87629
#: ../../ref/models/fields.txt:913
msgid ""
"A :class:`TextField` that stores XML data and a path to a schema. Takes one "
"optional argument:"
msgstr ""

# 277c1edc453b4107b94a03c170cd050a
#: ../../ref/models/fields.txt:918
msgid "The filesystem path to a schema for the field."
msgstr ""

# b2d5ca194bdb4413a0fbd07f0c7a8e7a
#: ../../ref/models/fields.txt:922
msgid "Relationship fields"
msgstr ""

# d23c120ec8db4e33b3c52534445f0ed2
#: ../../ref/models/fields.txt:929
msgid "Django also defines a set of fields that represent relations."
msgstr ""

# ee73d6cc498c49ee95019db656bf6e07
#: ../../ref/models/fields.txt:934
msgid "``ForeignKey``"
msgstr ""

# d0089dc5c247434dbf435d7eae829b45
#: ../../ref/models/fields.txt:938
msgid ""
"A many-to-one relationship. Requires a positional argument: the class to "
"which the model is related."
msgstr ""

# e8c653b65641489986a454054ebbfc2a
#: ../../ref/models/fields.txt:943
msgid ""
"To create a recursive relationship -- an object that has a many-to-one "
"relationship with itself -- use ``models.ForeignKey('self')``."
msgstr ""

# 9748ca87459c4f1282fbdd6c2a122cbd
#: ../../ref/models/fields.txt:948
msgid ""
"If you need to create a relationship on a model that has not yet been "
"defined, you can use the name of the model, rather than the model object "
"itself::"
msgstr ""

# 92f857e28da04bc9b798694cbc8002cc
#: ../../ref/models/fields.txt:958
msgid ""
"To refer to models defined in another application, you can explicitly "
"specify a model with the full application label. For example, if the "
"``Manufacturer`` model above is defined in another application called "
"``production``, you'd need to use::"
msgstr ""

# 11f402d534ce46c893bec481886fcf74
#: ../../ref/models/fields.txt:966
msgid ""
"This sort of reference can be useful when resolving circular import "
"dependencies between two applications."
msgstr ""

# 02d578ada9c4485b98e2f47c12adc0ac
# dcce012faebf4d0396e2b2a96dd8ec51
#: ../../ref/models/fields.txt:970 ../../ref/models/fields.txt:1084
msgid "Database Representation"
msgstr ""

# b474d05aa81e4e9487e6271a03138ee2
#: ../../ref/models/fields.txt:972
msgid ""
"Behind the scenes, Django appends ``\"_id\"`` to the field name to create "
"its database column name. In the above example, the database table for the "
"``Car`` model will have a ``manufacturer_id`` column. (You can change this "
"explicitly by specifying :attr:`~Field.db_column`) However, your code should "
"never have to deal with the database column name, unless you write custom "
"SQL. You'll always deal with the field names of your model object."
msgstr ""

# 4182db376f8a4f9484e745cb148b4499
# 05c6b1fc246e43cb9664c3ec9be7e5fe
#: ../../ref/models/fields.txt:982 ../../ref/models/fields.txt:1099
msgid "Arguments"
msgstr ""

# 5556ec4080254de79724c440589044ee
#: ../../ref/models/fields.txt:984
msgid ""
":class:`ForeignKey` accepts an extra set of arguments -- all optional -- "
"that define the details of how the relation works."
msgstr ""

# ce6c861277f94919b621092bfeaa6626
#: ../../ref/models/fields.txt:989
msgid ""
"A dictionary of lookup arguments and values (see :doc:`/topics/db/queries`) "
"that limit the available admin choices for this object. Use this with "
"functions from the Python ``datetime`` module to limit choices of objects by "
"date. For example::"
msgstr ""

# 2a489537c2c04f0a84cb70789a8cc31d
#: ../../ref/models/fields.txt:996
msgid ""
"only allows the choice of related objects with a ``pub_date`` before the "
"current date/time to be chosen."
msgstr ""

# f2f109ca071141c79cd3d6e9527976b8
#: ../../ref/models/fields.txt:999
msgid ""
"Instead of a dictionary this can also be a :class:`~django.db.models.Q` "
"object for more :ref:`complex queries <complex-lookups-with-q>`. However, if "
"``limit_choices_to`` is a :class:`~django.db.models.Q` object then it will "
"only have an effect on the choices available in the admin when the field is "
"not listed in ``raw_id_fields`` in the ``ModelAdmin`` for the model."
msgstr ""

# 55230a57e9df458e9ef33a0b029aa87c
#: ../../ref/models/fields.txt:1007
msgid ""
"The name to use for the relation from the related object back to this one. "
"See the :ref:`related objects documentation <backwards-related-objects>` for "
"a full explanation and example. Note that you must set this value when "
"defining relations on :ref:`abstract models <abstract-base-classes>`; and "
"when you do so :ref:`some special syntax <abstract-related-name>` is "
"available."
msgstr ""

# 743fb6f6f76f46b68bad10893d0baf37
#: ../../ref/models/fields.txt:1014
msgid ""
"If you'd prefer Django didn't create a backwards relation, set "
"``related_name`` to ``'+'``. For example, this will ensure that the ``User`` "
"model won't get a backwards relation to this model::"
msgstr ""

# 67aeaa8e376a4995b86f097e7174523c
#: ../../ref/models/fields.txt:1022
msgid ""
"The field on the related object that the relation is to. By default, Django "
"uses the primary key of the related object."
msgstr ""

# 9f3747827cfa4f0f9a5c92df3a660289
#: ../../ref/models/fields.txt:1029
msgid ""
"When an object referenced by a :class:`ForeignKey` is deleted, Django by "
"default emulates the behavior of the SQL constraint ``ON DELETE CASCADE`` "
"and also deletes the object containing the ``ForeignKey``. This behavior can "
"be overridden by specifying the :attr:`on_delete` argument. For example, if "
"you have a nullable :class:`ForeignKey` and you want it to be set null when "
"the referenced object is deleted::"
msgstr ""

# 3d652d7d0a674ee3a3e5644c4ccb622f
#: ../../ref/models/fields.txt:1038
msgid ""
"The possible values for :attr:`on_delete` are found in :mod:`django.db."
"models`:"
msgstr ""

# 718ffd92a1324a128bc588f9eaab0847
#: ../../ref/models/fields.txt:1041
msgid ":attr:`~django.db.models.CASCADE`: Cascade deletes; the default."
msgstr ""

# 9c414319e02044d7bb5d1c6b84f5330c
#: ../../ref/models/fields.txt:1043
msgid ""
":attr:`~django.db.models.PROTECT`: Prevent deletion of the referenced object "
"by raising :exc:`django.db.models.ProtectedError`, a subclass of :exc:"
"`django.db.IntegrityError`."
msgstr ""

# a6428fdb07584ab190ee6415f0aa35ac
#: ../../ref/models/fields.txt:1047
msgid ""
":attr:`~django.db.models.SET_NULL`: Set the :class:`ForeignKey` null; this "
"is only possible if :attr:`null` is ``True``."
msgstr ""

# 62a9d7a56451469480a62c4f0caff3d1
#: ../../ref/models/fields.txt:1050
msgid ""
":attr:`~django.db.models.SET_DEFAULT`: Set the :class:`ForeignKey` to its "
"default value; a default for the :class:`ForeignKey` must be set."
msgstr ""

# 2b16266adda24ffc835673f59757fa69
#: ../../ref/models/fields.txt:1053
msgid ""
":func:`~django.db.models.SET()`: Set the :class:`ForeignKey` to the value "
"passed to :func:`~django.db.models.SET()`, or if a callable is passed in, "
"the result of calling it. In most cases, passing a callable will be "
"necessary to avoid executing queries at the time your models.py is imported::"
msgstr ""

# ec245c0521ea4cd0b673d172b0019256
#: ../../ref/models/fields.txt:1065
msgid ""
":attr:`~django.db.models.DO_NOTHING`: Take no action. If your database "
"backend enforces referential integrity, this will cause an :exc:`~django.db."
"IntegrityError` unless you manually add a SQL ``ON DELETE`` constraint to "
"the database field (perhaps using :ref:`initial sql<initial-sql>`)."
msgstr ""

# ea27a02a3b6c43f4bbd64075e142ad5f
#: ../../ref/models/fields.txt:1074
msgid "``ManyToManyField``"
msgstr ""

# c3ebc38f2b4f4ea6b5c424b4c1912bd3
#: ../../ref/models/fields.txt:1078
msgid ""
"A many-to-many relationship. Requires a positional argument: the class to "
"which the model is related. This works exactly the same as it does for :"
"class:`ForeignKey`, including all the options regarding :ref:`recursive "
"<recursive-relationships>` and :ref:`lazy <lazy-relationships>` "
"relationships."
msgstr ""

# a20b2447d01a493eb260a80cf11a1b00
#: ../../ref/models/fields.txt:1086
msgid ""
"Behind the scenes, Django creates an intermediary join table to represent "
"the many-to-many relationship. By default, this table name is generated "
"using the name of the many-to-many field and the model that contains it. "
"Since some databases don't support table names above a certain length, these "
"table names will be automatically truncated to 64 characters and a "
"uniqueness hash will be used. This means you might see table names like "
"``author_books_9cdf4``; this is perfectly normal. You can manually provide "
"the name of the join table using the :attr:`~ManyToManyField.db_table` "
"option."
msgstr ""

# 0e254819a98c42cb8b969ecc2d13d268
#: ../../ref/models/fields.txt:1101
msgid ""
":class:`ManyToManyField` accepts an extra set of arguments -- all optional "
"-- that control how the relationship functions."
msgstr ""

# 331f6897a2a94821b03a0e671bc2fb0e
#: ../../ref/models/fields.txt:1106
msgid "Same as :attr:`ForeignKey.related_name`."
msgstr ""

# 28a9ed874c5544099722db8de0cd60b4
#: ../../ref/models/fields.txt:1110
msgid "Same as :attr:`ForeignKey.limit_choices_to`."
msgstr ""

# 386c14006cfe42008e9238ace5584383
#: ../../ref/models/fields.txt:1112
msgid ""
"``limit_choices_to`` has no effect when used on a ``ManyToManyField`` with a "
"custom intermediate table specified using the :attr:`~ManyToManyField."
"through` parameter."
msgstr ""

# 5a21d4f19c8e4e88951c5900ddb81fa4
#: ../../ref/models/fields.txt:1118
msgid ""
"Only used in the definition of ManyToManyFields on self. Consider the "
"following model::"
msgstr ""

# f68ae1c4697d459c908fd5376ff44708
#: ../../ref/models/fields.txt:1124
msgid ""
"When Django processes this model, it identifies that it has a :class:"
"`ManyToManyField` on itself, and as a result, it doesn't add a "
"``person_set`` attribute to the ``Person`` class. Instead, the :class:"
"`ManyToManyField` is assumed to be symmetrical -- that is, if I am your "
"friend, then you are my friend."
msgstr ""

# 668954eee40f4282b0b11888c00c6afa
#: ../../ref/models/fields.txt:1130
msgid ""
"If you do not want symmetry in many-to-many relationships with ``self``, "
"set :attr:`~ManyToManyField.symmetrical` to ``False``. This will force "
"Django to add the descriptor for the reverse relationship, allowing :class:"
"`ManyToManyField` relationships to be non-symmetrical."
msgstr ""

# 9dc8fd04bc744848912b63d9b3632b1a
#: ../../ref/models/fields.txt:1137
msgid ""
"Django will automatically generate a table to manage many-to-many "
"relationships. However, if you want to manually specify the intermediary "
"table, you can use the :attr:`~ManyToManyField.through` option to specify "
"the Django model that represents the intermediate table that you want to use."
msgstr ""

# 0845754cb225453d86c8838da74774fc
#: ../../ref/models/fields.txt:1143
msgid ""
"The most common use for this option is when you want to associate :ref:"
"`extra data with a many-to-many relationship <intermediary-manytomany>`."
msgstr ""

# 3fe1e19d86be4840a482c7d645842ccd
#: ../../ref/models/fields.txt:1149
msgid ""
"The name of the table to create for storing the many-to-many data. If this "
"is not provided, Django will assume a default name based upon the names of "
"the two tables being joined."
msgstr ""

# 13a32ac5c4184542b884d2bb36eb12b1
#: ../../ref/models/fields.txt:1156
msgid "``OneToOneField``"
msgstr ""

# 3908cd10d0684bb4b068b1d79e67c23c
#: ../../ref/models/fields.txt:1160
msgid ""
"A one-to-one relationship. Conceptually, this is similar to a :class:"
"`ForeignKey` with :attr:`unique=True <Field.unique>`, but the \"reverse\" "
"side of the relation will directly return a single object."
msgstr ""

# a44a448d3b3c42b29b3e3ed60d91d96e
#: ../../ref/models/fields.txt:1164
msgid ""
"This is most useful as the primary key of a model which \"extends\" another "
"model in some way; :ref:`multi-table-inheritance` is implemented by adding "
"an implicit one-to-one relation from the child model to the parent model, "
"for example."
msgstr ""

# 3294d5281bf14f96887346600ffc2b6d
#: ../../ref/models/fields.txt:1169
msgid ""
"One positional argument is required: the class to which the model will be "
"related. This works exactly the same as it does for :class:`ForeignKey`, "
"including all the options regarding :ref:`recursive <recursive-"
"relationships>` and :ref:`lazy <lazy-relationships>` relationships."
msgstr ""

# d6506538d1bc4daf9348d818541abf56
#: ../../ref/models/fields.txt:1176
msgid ""
"Additionally, ``OneToOneField`` accepts all of the extra arguments accepted "
"by :class:`ForeignKey`, plus one extra argument:"
msgstr ""

# 0c2d3028dd88429d93ad8996b26e000f
#: ../../ref/models/fields.txt:1181
msgid ""
"When ``True`` and used in a model which inherits from another (concrete) "
"model, indicates that this field should be used as the link back to the "
"parent class, rather than the extra ``OneToOneField`` which would normally "
"be implicitly created by subclassing."
msgstr ""
