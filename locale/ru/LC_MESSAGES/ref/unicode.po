# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2012.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-11-07 10:34\n"
"PO-Revision-Date: 2012-02-15 15:13\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# 71f84f41706a4129b84d011ecab7c52d
#: ../../ref/unicode.txt:3
msgid "Unicode data"
msgstr ""

# 97e497a37cb74467b3d0b7c9efe02f78
#: ../../ref/unicode.txt:5
msgid ""
"Django natively supports Unicode data everywhere. Providing your database "
"can somehow store the data, you can safely pass around Unicode strings to "
"templates, models and the database."
msgstr ""

# 5ef09130e9c649c7ad084e4e5b0c6736
#: ../../ref/unicode.txt:9
msgid ""
"This document tells you what you need to know if you're writing applications "
"that use data or templates that are encoded in something other than ASCII."
msgstr ""

# 61bcff32399b45ffb5d8c07829704756
#: ../../ref/unicode.txt:13
msgid "Creating the database"
msgstr ""

# fbab3d0211b347c5b46a9e94ab1ebc38
#: ../../ref/unicode.txt:15
msgid ""
"Make sure your database is configured to be able to store arbitrary string "
"data. Normally, this means giving it an encoding of UTF-8 or UTF-16. If you "
"use a more restrictive encoding -- for example, latin1 (iso8859-1) -- you "
"won't be able to store certain characters in the database, and information "
"will be lost."
msgstr ""

# 7adb45438ff943df9a5b7cb9c727de40
#: ../../ref/unicode.txt:20
msgid ""
"MySQL users, refer to the `MySQL manual`_ (section 9.1.3.2 for MySQL 5.1) "
"for details on how to set or alter the database character set encoding."
msgstr ""

# 96ec8576a11940f7837f707c33c9584d
#: ../../ref/unicode.txt:23
msgid ""
"PostgreSQL users, refer to the `PostgreSQL manual`_ (section 22.3.2 in "
"PostgreSQL 9) for details on creating databases with the correct encoding."
msgstr ""

# fba02cc224574f3d8eb5d75a480807d1
#: ../../ref/unicode.txt:26
msgid ""
"SQLite users, there is nothing you need to do. SQLite always uses UTF-8 for "
"internal encoding."
msgstr ""

# ff2fd663d84847018522d23bbabb7282
#: ../../ref/unicode.txt:32
msgid ""
"All of Django's database backends automatically convert Unicode strings into "
"the appropriate encoding for talking to the database. They also "
"automatically convert strings retrieved from the database into Python "
"Unicode strings. You don't even need to tell Django what encoding your "
"database uses: that is handled transparently."
msgstr ""

# 15d7447521fa4d3a8f759a5d9652f230
#: ../../ref/unicode.txt:38
msgid "For more, see the section \"The database API\" below."
msgstr ""

# af5f8049c13e44d98199ed0ceceafe98
#: ../../ref/unicode.txt:41
msgid "General string handling"
msgstr ""

# eb245fe5d1294e41acf0af8573e05c4d
#: ../../ref/unicode.txt:43
msgid ""
"Whenever you use strings with Django -- e.g., in database lookups, template "
"rendering or anywhere else -- you have two choices for encoding those "
"strings. You can use Unicode strings, or you can use normal strings "
"(sometimes called \"bytestrings\") that are encoded using UTF-8."
msgstr ""

# a3e2d61ee7d84215ad8a6dba6872fb9b
#: ../../ref/unicode.txt:73
msgid ""
"A bytestring does not carry any information with it about its encoding. For "
"that reason, we have to make an assumption, and Django assumes that all "
"bytestrings are in UTF-8."
msgstr ""

# 2f354764235a4919865608975d77f5f7
#: ../../ref/unicode.txt:77
msgid ""
"If you pass a string to Django that has been encoded in some other format, "
"things will go wrong in interesting ways. Usually, Django will raise a "
"``UnicodeDecodeError`` at some point."
msgstr ""

# 7d74f4149fcc49beb09636a6d1339325
#: ../../ref/unicode.txt:81
msgid ""
"If your code only uses ASCII data, it's safe to use your normal strings, "
"passing them around at will, because ASCII is a subset of UTF-8."
msgstr ""

# d9f0e1fe17fa4cd7b99b161dfd057d19
#: ../../ref/unicode.txt:84
msgid ""
"Don't be fooled into thinking that if your :setting:`DEFAULT_CHARSET` "
"setting is set to something other than ``'utf-8'`` you can use that other "
"encoding in your bytestrings! :setting:`DEFAULT_CHARSET` only applies to the "
"strings generated as the result of template rendering (and email). Django "
"will always assume UTF-8 encoding for internal bytestrings. The reason for "
"this is that the :setting:`DEFAULT_CHARSET` setting is not actually under "
"your control (if you are the application developer). It's under the control "
"of the person installing and using your application -- and if that person "
"chooses a different setting, your code must still continue to work. Ergo, it "
"cannot rely on that setting."
msgstr ""

# 4cb8fc5871bb4491bf586c0137c7fbd0
#: ../../ref/unicode.txt:94
msgid ""
"In most cases when Django is dealing with strings, it will convert them to "
"Unicode strings before doing anything else. So, as a general rule, if you "
"pass in a bytestring, be prepared to receive a Unicode string back in the "
"result."
msgstr ""

# 6954a7bafe354c139f01f37c1df18aac
#: ../../ref/unicode.txt:99
msgid "Translated strings"
msgstr ""

# 08f2e6041a964e768fa2861754f57b68
#: ../../ref/unicode.txt:101
msgid ""
"Aside from Unicode strings and bytestrings, there's a third type of string-"
"like object you may encounter when using Django. The framework's "
"internationalization features introduce the concept of a \"lazy translation"
"\" -- a string that has been marked as translated but whose actual "
"translation result isn't determined until the object is used in a string. "
"This feature is useful in cases where the translation locale is unknown "
"until the string is used, even though the string might have originally been "
"created when the code was first imported."
msgstr ""

# 055493ec6177439e91e31e8d2d5f217c
#: ../../ref/unicode.txt:110
msgid ""
"Normally, you won't have to worry about lazy translations. Just be aware "
"that if you examine an object and it claims to be a ``django.utils."
"functional.__proxy__`` object, it is a lazy translation. Calling ``unicode()"
"`` with the lazy translation as the argument will generate a Unicode string "
"in the current locale."
msgstr ""

# c490974aa40f48c1825adea420a98bb1
#: ../../ref/unicode.txt:116
msgid ""
"For more details about lazy translation objects, refer to the :doc:"
"`internationalization </topics/i18n/index>` documentation."
msgstr ""

# 7c6ed93cc58248a18cc9b33b59fe60d4
#: ../../ref/unicode.txt:120
msgid "Useful utility functions"
msgstr ""

# b990b0ba5c734f21af9bce990e5696f8
#: ../../ref/unicode.txt:122
msgid ""
"Because some string operations come up again and again, Django ships with a "
"few useful functions that should make working with Unicode and bytestring "
"objects a bit easier."
msgstr ""

# 7c341f68c945438a93e8feae4a38b2cd
#: ../../ref/unicode.txt:127
msgid "Conversion functions"
msgstr ""

# 3b179dcd3ece4a869033a2fd1a30e3d3
#: ../../ref/unicode.txt:129
msgid ""
"The ``django.utils.encoding`` module contains a few functions that are handy "
"for converting back and forth between Unicode and bytestrings."
msgstr ""

# 839461a5e1734fe592293bfa8ed8f006
#: ../../ref/unicode.txt:132
msgid ""
"``smart_text(s, encoding='utf-8', strings_only=False, errors='strict')`` "
"converts its input to a Unicode string. The ``encoding`` parameter specifies "
"the input encoding. (For example, Django uses this internally when "
"processing form input data, which might not be UTF-8 encoded.) The "
"``strings_only`` parameter, if set to True, will result in Python numbers, "
"booleans and ``None`` not being converted to a string (they keep their "
"original types). The ``errors`` parameter takes any of the values that are "
"accepted by Python's ``unicode()`` function for its error handling."
msgstr ""

# c313ef0bdb3943509dc329a946e985e0
#: ../../ref/unicode.txt:142
msgid ""
"If you pass ``smart_text()`` an object that has a ``__unicode__`` method, it "
"will use that method to do the conversion."
msgstr ""

# 950fea0b97a14305ba0eb9efa2cb3b68
#: ../../ref/unicode.txt:145
msgid ""
"``force_text(s, encoding='utf-8', strings_only=False, errors='strict')`` is "
"identical to ``smart_text()`` in almost all cases. The difference is when "
"the first argument is a :ref:`lazy translation <lazy-translations>` "
"instance. While ``smart_text()`` preserves lazy translations, ``force_text()"
"`` forces those objects to a Unicode string (causing the translation to "
"occur). Normally, you'll want to use ``smart_text()``. However, ``force_text"
"()`` is useful in template tags and filters that absolutely *must* have a "
"string to work with, not just something that can be converted to a string."
msgstr ""

# 7c874d14b1164add99b5a76ecf616869
#: ../../ref/unicode.txt:155
msgid ""
"``smart_bytes(s, encoding='utf-8', strings_only=False, errors='strict')`` is "
"essentially the opposite of ``smart_text()``. It forces the first argument "
"to a bytestring. The ``strings_only`` parameter has the same behavior as for "
"``smart_text()`` and ``force_text()``. This is slightly different semantics "
"from Python's builtin ``str()`` function, but the difference is needed in a "
"few places within Django's internals."
msgstr ""

# 97e5177f126b4102bff9a0fee2561127
#: ../../ref/unicode.txt:162
msgid ""
"Normally, you'll only need to use ``smart_text()``. Call it as early as "
"possible on any input data that might be either Unicode or a bytestring, and "
"from then on, you can treat the result as always being Unicode."
msgstr ""

# c2e00a4aec8449eb9d3fa8513c9a5ff4
#: ../../ref/unicode.txt:169
msgid "URI and IRI handling"
msgstr ""

# c33570ed0d3b45fb9f3f28a1f02e81e6
#: ../../ref/unicode.txt:171
msgid ""
"Web frameworks have to deal with URLs (which are a type of IRI_). One "
"requirement of URLs is that they are encoded using only ASCII characters. "
"However, in an international environment, you might need to construct a URL "
"from an IRI_ -- very loosely speaking, a URI_ that can contain Unicode "
"characters. Quoting and converting an IRI to URI can be a little tricky, so "
"Django provides some assistance."
msgstr ""

# 8eb896f3ce6e456296275513d63d640f
#: ../../ref/unicode.txt:178
msgid ""
"The function ``django.utils.encoding.iri_to_uri()`` implements the "
"conversion from IRI to URI as required by the specification (:rfc:`3987`)."
msgstr ""

# c61223c714924c32a9f815084c79a1cd
#: ../../ref/unicode.txt:181
msgid ""
"The functions ``django.utils.http.urlquote()`` and ``django.utils.http."
"urlquote_plus()`` are versions of Python's standard ``urllib.quote()`` and "
"``urllib.quote_plus()`` that work with non-ASCII characters. (The data is "
"converted to UTF-8 prior to encoding.)"
msgstr ""

# 13f58ab5ea0643a8a0ab96d4ec0a461d
#: ../../ref/unicode.txt:186
msgid ""
"These two groups of functions have slightly different purposes, and it's "
"important to keep them straight. Normally, you would use ``urlquote()`` on "
"the individual portions of the IRI or URI path so that any reserved "
"characters such as '&' or '%' are correctly encoded. Then, you apply "
"``iri_to_uri()`` to the full IRI and it converts any non-ASCII characters to "
"the correct encoded values."
msgstr ""

# 535f8023052f48f38f4baf04ab00e229
#: ../../ref/unicode.txt:194
msgid ""
"Technically, it isn't correct to say that ``iri_to_uri()`` implements the "
"full algorithm in the IRI specification. It doesn't (yet) perform the "
"international domain name encoding portion of the algorithm."
msgstr ""

# aa1ea0876dfc483fab78219720f39be0
#: ../../ref/unicode.txt:198
msgid ""
"The ``iri_to_uri()`` function will not change ASCII characters that are "
"otherwise permitted in a URL. So, for example, the character '%' is not "
"further encoded when passed to ``iri_to_uri()``. This means you can pass a "
"full URL to this function and it will not mess up the query string or "
"anything like that."
msgstr ""

# 64232a8cb67d47f2ba010fd6a86b1078
#: ../../ref/unicode.txt:204
msgid "An example might clarify things here::"
msgstr ""

# a2d3147821824d568d3d3478da36939e
#: ../../ref/unicode.txt:211
msgid ""
"If you look carefully, you can see that the portion that was generated by "
"``urlquote()`` in the second example was not double-quoted when passed to "
"``iri_to_uri()``. This is a very important and useful feature. It means that "
"you can construct your IRI without worrying about whether it contains non-"
"ASCII characters and then, right at the end, call ``iri_to_uri()`` on the "
"result."
msgstr ""

# 99ccbabc520c45be99af6467dc244b0c
#: ../../ref/unicode.txt:218
msgid ""
"The ``iri_to_uri()`` function is also idempotent, which means the following "
"is always true::"
msgstr ""

# aef855dee53c4301b9beb9b8c88c7297
#: ../../ref/unicode.txt:223
msgid ""
"So you can safely call it multiple times on the same IRI without risking "
"double-quoting problems."
msgstr ""

# 05dfcc3092ab446d9daf28d5fbfc522f
#: ../../ref/unicode.txt:230
msgid "Models"
msgstr ""

# 9a2f3e969e9949f689feebe80cc92a06
#: ../../ref/unicode.txt:232
msgid ""
"Because all strings are returned from the database as Unicode strings, model "
"fields that are character based (CharField, TextField, URLField, etc) will "
"contain Unicode values when Django retrieves data from the database. This is "
"*always* the case, even if the data could fit into an ASCII bytestring."
msgstr ""

# 8f5168ae54f049678e6c6539fccbdf93
#: ../../ref/unicode.txt:237
msgid ""
"You can pass in bytestrings when creating a model or populating a field, and "
"Django will convert it to Unicode when it needs to."
msgstr ""

# 57e09905d740402b9f0afcccf9ab14f6
#: ../../ref/unicode.txt:241
msgid "Choosing between ``__str__()`` and ``__unicode__()``"
msgstr ""

# c5cf637947e246b0bbf82278e9682f14
#: ../../ref/unicode.txt:245
msgid ""
"If you are on Python 3, you can skip this section because you'll always "
"create ``__str__()`` rather than ``__unicode__()``. If you'd like "
"compatibility with Python 2, you can decorate your model class with :func:"
"`~django.utils.encoding.python_2_unicode_compatible`."
msgstr ""

# 3329c6bf1614488d9549be4fa9ebbddb
#: ../../ref/unicode.txt:250
msgid ""
"One consequence of using Unicode by default is that you have to take some "
"care when printing data from the model."
msgstr ""

# 154174c4da474b919279ddac47bc5de2
#: ../../ref/unicode.txt:253
msgid ""
"In particular, rather than giving your model a ``__str__()`` method, we "
"recommended you implement a ``__unicode__()`` method. In the ``__unicode__()"
"`` method, you can quite safely return the values of all your fields without "
"having to worry about whether they fit into a bytestring or not. (The way "
"Python works, the result of ``__str__()`` is *always* a bytestring, even if "
"you accidentally try to return a Unicode object)."
msgstr ""

# 704a5f0daabc4242bc30a4414ef276d3
#: ../../ref/unicode.txt:260
msgid ""
"You can still create a ``__str__()`` method on your models if you want, of "
"course, but you shouldn't need to do this unless you have a good reason. "
"Django's ``Model`` base class automatically provides a ``__str__()`` "
"implementation that calls ``__unicode__()`` and encodes the result into "
"UTF-8. This means you'll normally only need to implement a ``__unicode__()`` "
"method and let Django handle the coercion to a bytestring when required."
msgstr ""

# bc573647f59e4a429ae9fdfa74272659
#: ../../ref/unicode.txt:268
msgid "Taking care in ``get_absolute_url()``"
msgstr ""

# 5a7f720545484df7911fee45f3325b07
#: ../../ref/unicode.txt:270
msgid ""
"URLs can only contain ASCII characters. If you're constructing a URL from "
"pieces of data that might be non-ASCII, be careful to encode the results in "
"a way that is suitable for a URL. The :func:`~django.core.urlresolvers."
"reverse` function handles this for you automatically."
msgstr ""

# 1201f403616248138a0342ec7b035117
#: ../../ref/unicode.txt:275
msgid ""
"If you're constructing a URL manually (i.e., *not* using the ``reverse()`` "
"function), you'll need to take care of the encoding yourself. In this case, "
"use the ``iri_to_uri()`` and ``urlquote()`` functions that were documented "
"above_. For example::"
msgstr ""

# 67fda75a9b304ff18279fc21ab1f6956
#: ../../ref/unicode.txt:287
msgid ""
"This function returns a correctly encoded URL even if ``self.location`` is "
"something like \"Jack visited Paris & Orléans\". (In fact, the ``iri_to_uri()"
"`` call isn't strictly necessary in the above example, because all the non-"
"ASCII characters would have been removed in quoting in the first line.)"
msgstr ""

# 022685bb217a447594f4df260ad1b722
#: ../../ref/unicode.txt:295
msgid "The database API"
msgstr ""

# 8b847a38115b4b15936a2960bfb6b922
#: ../../ref/unicode.txt:297
msgid ""
"You can pass either Unicode strings or UTF-8 bytestrings as arguments to "
"``filter()`` methods and the like in the database API. The following two "
"querysets are identical::"
msgstr ""

# e29ec60154354ff5987dea7a375ee387
#: ../../ref/unicode.txt:307
msgid "Templates"
msgstr ""

# c11d083ca5414108be093f0d3ef1f4e8
#: ../../ref/unicode.txt:309
msgid ""
"You can use either Unicode or bytestrings when creating templates manually::"
msgstr ""

# 1122ff7ff44940e385c7d90df0d7c72c
#: ../../ref/unicode.txt:316
msgid ""
"But the common case is to read templates from the filesystem, and this "
"creates a slight complication: not all filesystems store their data encoded "
"as UTF-8. If your template files are not stored with a UTF-8 encoding, set "
"the :setting:`FILE_CHARSET` setting to the encoding of the files on disk. "
"When Django reads in a template file, it will convert the data from this "
"encoding to Unicode. (:setting:`FILE_CHARSET` is set to ``'utf-8'`` by "
"default.)"
msgstr ""

# 84975e1dcc0244dfaeb4ab6abf00985d
#: ../../ref/unicode.txt:323
msgid ""
"The :setting:`DEFAULT_CHARSET` setting controls the encoding of rendered "
"templates. This is set to UTF-8 by default."
msgstr ""

# caf02266ef594b76bc150c27ed3bf39b
#: ../../ref/unicode.txt:327
msgid "Template tags and filters"
msgstr ""

# be65434e202d42e38e573d56e0c50ef8
#: ../../ref/unicode.txt:329
msgid ""
"A couple of tips to remember when writing your own template tags and filters:"
msgstr ""

# 481b5d90df1743339ab00e37f31c4000
#: ../../ref/unicode.txt:331
msgid ""
"Always return Unicode strings from a template tag's ``render()`` method and "
"from template filters."
msgstr ""

# 91ffbc86d42c4d3cbf0c9693ba5de58a
#: ../../ref/unicode.txt:334
msgid ""
"Use ``force_text()`` in preference to ``smart_text()`` in these places. Tag "
"rendering and filter calls occur as the template is being rendered, so there "
"is no advantage to postponing the conversion of lazy translation objects "
"into strings. It's easier to work solely with Unicode strings at that point."
msgstr ""

# 49fd815bcaf64c539e2dc96d5e21cdfb
#: ../../ref/unicode.txt:341
msgid "Email"
msgstr ""

# cd6a36ea2dd04b7db4b224eeee4a8f54
#: ../../ref/unicode.txt:343
msgid ""
"Django's email framework (in ``django.core.mail``) supports Unicode "
"transparently. You can use Unicode data in the message bodies and any "
"headers. However, you're still obligated to respect the requirements of the "
"email specifications, so, for example, email addresses should use only ASCII "
"characters."
msgstr ""

# aaf669b85f19417aa4005509b319ee13
#: ../../ref/unicode.txt:349
msgid ""
"The following code example demonstrates that everything except email "
"addresses can be non-ASCII::"
msgstr ""

# 86d4128f75744f3d97d775a87d9f77e3
#: ../../ref/unicode.txt:364
msgid "Form submission"
msgstr ""

# a6dd550991ab4ba692bd24b1893c042a
#: ../../ref/unicode.txt:366
msgid ""
"HTML form submission is a tricky area. There's no guarantee that the "
"submission will include encoding information, which means the framework "
"might have to guess at the encoding of submitted data."
msgstr ""

# c1d32b412f8646ce9debc6209f81a014
#: ../../ref/unicode.txt:370
msgid ""
"Django adopts a \"lazy\" approach to decoding form data. The data in an "
"``HttpRequest`` object is only decoded when you access it. In fact, most of "
"the data is not decoded at all. Only the ``HttpRequest.GET`` and "
"``HttpRequest.POST`` data structures have any decoding applied to them. "
"Those two fields will return their members as Unicode data. All other "
"attributes and methods of ``HttpRequest`` return data exactly as it was "
"submitted by the client."
msgstr ""

# 53436b98a4514d41a8879ced28b99cb6
#: ../../ref/unicode.txt:378
msgid ""
"By default, the :setting:`DEFAULT_CHARSET` setting is used as the assumed "
"encoding for form data. If you need to change this for a particular form, "
"you can set the ``encoding`` attribute on an ``HttpRequest`` instance. For "
"example::"
msgstr ""

# bd502faf221f4096bee46ac6a5932c4a
#: ../../ref/unicode.txt:387
msgid ""
"You can even change the encoding after having accessed ``request.GET`` or "
"``request.POST``, and all subsequent accesses will use the new encoding."
msgstr ""

# 2c9f5a098eb8449db22ca990f0305eee
#: ../../ref/unicode.txt:390
msgid ""
"Most developers won't need to worry about changing form encoding, but this "
"is a useful feature for applications that talk to legacy systems whose "
"encoding you cannot control."
msgstr ""

# cf3ddf54f3514d5c96d8efe846000bb9
#: ../../ref/unicode.txt:394
msgid ""
"Django does not decode the data of file uploads, because that data is "
"normally treated as collections of bytes, rather than strings. Any automatic "
"decoding there would alter the meaning of the stream of bytes."
msgstr ""
