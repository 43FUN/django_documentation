# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2012.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-02-27 00:21\n"
"PO-Revision-Date: 2012-02-15 15:13\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# 9e5bd67f33364020a89517e7ecfb9e72
#: ../../ref/files/storage.txt:2
msgid "File storage API"
msgstr ""

# 821ab12ac90b417d9b98ea05fab57ca5
#: ../../ref/files/storage.txt:7
msgid "Getting the current storage class"
msgstr ""

# 85a397cca98f4441a32bdc47407b4282
#: ../../ref/files/storage.txt:9
msgid ""
"Django provides two convenient ways to access the current storage class:"
msgstr ""

# 4ef32c95b4a1446abf1e367ab5035524
#: ../../ref/files/storage.txt:13
msgid ""
":class:`~django.core.files.storage.DefaultStorage` provides lazy access to "
"the current default storage system as defined by :setting:"
"`DEFAULT_FILE_STORAGE`. :class:`DefaultStorage` uses :func:`~django.core."
"files.storage.get_storage_class` internally."
msgstr ""

# d9f3e092a59e4c70b59807f3460397d3
#: ../../ref/files/storage.txt:20
msgid "Returns a class or module which implements the storage API."
msgstr ""

# 1e8a8be4de894d4c86f06e8d3b9756db
#: ../../ref/files/storage.txt:22
msgid ""
"When called without the ``import_path`` parameter ``get_storage_class`` will "
"return the current default storage system as defined by :setting:"
"`DEFAULT_FILE_STORAGE`. If ``import_path`` is provided, "
"``get_storage_class`` will attempt to import the class or module from the "
"given path and will return it if successful. An exception will be raised if "
"the import is unsuccessful."
msgstr ""

# 59ff58ddefce490b94ff4a0b9afd5c36
#: ../../ref/files/storage.txt:30
msgid "The FileSystemStorage Class"
msgstr ""

# 7b05f629dc91455ea64ae4a127dc0624
#: ../../ref/files/storage.txt:34
msgid ""
"The :class:`~django.core.files.storage.FileSystemStorage` class implements "
"basic file storage on a local filesystem. It inherits from :class:`~django."
"core.files.storage.Storage` and provides implementations for all the public "
"methods thereof."
msgstr ""

# 5a997f48a1dd4c2e822594cb88858904
#: ../../ref/files/storage.txt:41
msgid ""
"The ``FileSystemStorage.delete()`` method will not raise raise an exception "
"if the given file name does not exist."
msgstr ""

# 9ce3da7d9dc74f3084ddd0acd8e9548b
#: ../../ref/files/storage.txt:45
msgid "The Storage Class"
msgstr ""

# cc5de11b2b314fa392d1bdc2117fc0c0
#: ../../ref/files/storage.txt:49
msgid ""
"The :class:`~django.core.files.storage.Storage` class provides a "
"standardized API for storing files, along with a set of default behaviors "
"that all other storage systems can inherit or override as necessary."
msgstr ""

# 8717cf20103845e1a5d0c6e7d56586c4
#: ../../ref/files/storage.txt:56
msgid ""
"Returns a ``datetime`` object containing the last accessed time of the file. "
"For storage systems that aren't able to return the last accessed time this "
"will raise ``NotImplementedError`` instead."
msgstr ""

# 56b328ae866e4469a1d5774b9faac204
#: ../../ref/files/storage.txt:62
msgid ""
"Returns a ``datetime`` object containing the creation time of the file. For "
"storage systems that aren't able to return the creation time this will raise "
"``NotImplementedError`` instead."
msgstr ""

# a0aba45535e440e6bc098f4e0e14c188
#: ../../ref/files/storage.txt:68
msgid ""
"Deletes the file referenced by ``name``. If deletion is not supported on the "
"target storage system this will raise ``NotImplementedError`` instead"
msgstr ""

# bb5049b4f75f4c12a190b5c1a1bae831
#: ../../ref/files/storage.txt:74
msgid ""
"Returns ``True`` if a file referenced by the given name already exists in "
"the storage system, or ``False`` if the name is available for a new file."
msgstr ""

# ac6f60e01c49413dbaa8836c7ec212d7
#: ../../ref/files/storage.txt:80
msgid ""
"Returns a filename based on the ``name`` parameter that's free and available "
"for new content to be written to on the target storage system."
msgstr ""

# c43bfd7e172b46a2962f8bb3116fab65
#: ../../ref/files/storage.txt:87
msgid ""
"Returns a filename based on the ``name`` parameter that's suitable for use "
"on the target storage system."
msgstr ""

# faa21e69f2f1452db538f72d142fea81
#: ../../ref/files/storage.txt:92
msgid ""
"Lists the contents of the specified path, returning a 2-tuple of lists; the "
"first item being directories, the second item being files. For storage "
"systems that aren't able to provide such a listing, this will raise a "
"``NotImplementedError`` instead."
msgstr ""

# 589b909bacc04828aaa4070b0dd74960
#: ../../ref/files/storage.txt:99
msgid ""
"Returns a ``datetime`` object containing the last modified time. For storage "
"systems that aren't able to return the last modified time, this will raise "
"``NotImplementedError`` instead."
msgstr ""

# 3301c808925641408e9062dec892b83b
#: ../../ref/files/storage.txt:105
msgid ""
"Opens the file given by ``name``. Note that although the returned file is "
"guaranteed to be a ``File`` object, it might actually be some subclass. In "
"the case of remote file storage this means that reading/writing could be "
"quite slow, so be warned."
msgstr ""

# 45ca31f8dba14502b48002b7f72f12f8
#: ../../ref/files/storage.txt:112
msgid ""
"The local filesystem path where the file can be opened using Python's "
"standard ``open()``. For storage systems that aren't accessible from the "
"local filesystem, this will raise ``NotImplementedError`` instead."
msgstr ""

# 10a1d671129048bb84d1857d3b050502
#: ../../ref/files/storage.txt:118
msgid ""
"Saves a new file using the storage system, preferably with the name "
"specified. If there already exists a file with this name ``name``, the "
"storage system may modify the filename as necessary to get a unique name. "
"The actual name of the stored file will be returned."
msgstr ""

# c57b4c6bad474e8190ea9d10044ac43f
#: ../../ref/files/storage.txt:123
msgid ""
"The ``content`` argument must be an instance of :class:`django.core.files."
"File` or of a subclass of :class:`~django.core.files.File`."
msgstr ""

# 41d28d8e100c4dc5ac00a2e85c7295b8
#: ../../ref/files/storage.txt:129
msgid ""
"Returns the total size, in bytes, of the file referenced by ``name``. For "
"storage systems that aren't able to return the file size this will raise "
"``NotImplementedError`` instead."
msgstr ""

# 1d556884b2394bb9b38fd77f3fed237f
#: ../../ref/files/storage.txt:135
msgid ""
"Returns the URL where the contents of the file referenced by ``name`` can be "
"accessed. For storage systems that don't support access by URL this will "
"raise ``NotImplementedError`` instead."
msgstr ""
