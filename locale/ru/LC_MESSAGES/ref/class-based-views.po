# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2012.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-02-15 15:13\n"
"PO-Revision-Date: 2012-02-15 15:13\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# f3a1fdff01ba452c90d83bfe97b19bb6
#: ../../ref/class-based-views.txt:3
msgid "Class-based generic views"
msgstr ""

# 2b6357ef6e9b4e719602d0c800d2981c
#: ../../ref/class-based-views.txt:8
msgid ""
"Prior to Django 1.3, generic views were implemented as functions. The "
"function-based implementation has been deprecated in favor of the class-"
"based approach described here."
msgstr ""

# c93f6e86c5394ef59143055b5af5bde4
#: ../../ref/class-based-views.txt:12
msgid ""
"For details on the previous generic views implementation, see the :doc:"
"`topic guide </topics/generic-views>` and :doc:`detailed reference </ref/"
"generic-views>`."
msgstr ""

# e8a26e65e4af42b980cde08464e05072
#: ../../ref/class-based-views.txt:16
msgid ""
"Writing Web applications can be monotonous, because we repeat certain "
"patterns again and again. Django tries to take away some of that monotony at "
"the model and template layers, but Web developers also experience this "
"boredom at the view level."
msgstr ""

# 5c6126ef49b1431381ee4bf8868f4c5a
#: ../../ref/class-based-views.txt:21
msgid ""
"A general introduction to class-based generic views can be found in the :doc:"
"`topic guide </topics/class-based-views>`."
msgstr ""

# 5551bbab14774aeabee816548fe7b466
#: ../../ref/class-based-views.txt:24
msgid ""
"This reference contains details of Django's built-in generic views, along "
"with a list of the keyword arguments that each generic view expects. "
"Remember that arguments may either come from the URL pattern or from the "
"``extra_context`` additional-information dictionary."
msgstr ""

# b941649ec6ef4518a79271ef8077c2e2
#: ../../ref/class-based-views.txt:29
msgid ""
"Most generic views require the ``queryset`` key, which is a ``QuerySet`` "
"instance; see :doc:`/topics/db/queries` for more information about "
"``QuerySet`` objects."
msgstr ""

# 325b704eff194870b706d3ec697eea5c
#: ../../ref/class-based-views.txt:34
msgid "Mixins"
msgstr ""

# b3338e3457ee42a2a8a3886c3df1d8d1
#: ../../ref/class-based-views.txt:36
msgid ""
"A mixin class is a way of using the inheritance capabilities of classes to "
"compose a class out of smaller pieces of behavior. Django's class-based "
"generic views are constructed by composing mixins into usable generic views."
msgstr ""

# f6d4d552620f4df482f9738a46814e98
#: ../../ref/class-based-views.txt:41
msgid ""
"For example, the :class:`~django.views.generic.base.detail.DetailView` is "
"composed from:"
msgstr ""

# 17e0cd2216c14b8283208f83cd716847
#: ../../ref/class-based-views.txt:44
msgid ""
":class:`~django.db.views.generic.base.View`, which provides the basic class-"
"based behavior"
msgstr ""

# 25c3bee774a5495eab4e0436369b5fb7
#: ../../ref/class-based-views.txt:46
msgid ""
":class:`~django.db.views.generic.detail.SingleObjectMixin`, which provides "
"the utilities for retrieving and displaying a single object"
msgstr ""

# b28596455c754a51974c8b44c3ce5b45
#: ../../ref/class-based-views.txt:48
msgid ""
":class:`~django.db.views.generic.detail.SingleObjectTemplateResponseMixin`, "
"which provides the tools for rendering a single object into a template-based "
"response."
msgstr ""

# 91027f2e53fa46b5b4ca93820f858041
#: ../../ref/class-based-views.txt:52
msgid ""
"When combined, these mixins provide all the pieces necessary to provide a "
"view over a single object that renders a template to produce a response."
msgstr ""

# 8a99a0bc4d66483b8dbdff23ad64f4f7
#: ../../ref/class-based-views.txt:56
msgid ""
"Django provides a range of mixins. If you want to write your own generic "
"views, you can build classes that compose these mixins in interesting ways. "
"Alternatively, you can just use the pre-mixed `Generic views`_ that Django "
"provides."
msgstr ""

# 00f4e5acd03b4b79be6ad435e953274c
#: ../../ref/class-based-views.txt:63
msgid ""
"When the documentation for a view gives the list of mixins, that view "
"inherits all the properties and methods of that mixin."
msgstr ""

# 4944937467584262b189d59714bc564c
#: ../../ref/class-based-views.txt:67
msgid "Simple mixins"
msgstr ""

# 56948b53f9be4f11b43d808669f5412d
#: ../../ref/class-based-views.txt:72
msgid "TemplateResponseMixin"
msgstr ""

# ee07dd9f106e4e4f9dee1cfa69a5965a
#: ../../ref/class-based-views.txt:77
msgid "The path to the template to use when rendering the view."
msgstr ""

# 795d0c5c26844109bbf30d737f39a0f5
#: ../../ref/class-based-views.txt:81
msgid ""
"The response class to be returned by ``render_to_response`` method. Default "
"is :class:`TemplateResponse <django.template.response.TemplateResponse>`. "
"The template and context of ``TemplateResponse`` instances can be altered "
"later (e.g. in :ref:`template response middleware <template-response-"
"middleware>`)."
msgstr ""

# 2f0e53a9110f43db85f98672aa339f5b
#: ../../ref/class-based-views.txt:88
msgid ""
"If you need custom template loading or custom context object instantiation, "
"create a ``TemplateResponse`` subclass and assign it to ``response_class``."
msgstr ""

# 79733bc6b46f4d9ba13da06ddc4dd675
#: ../../ref/class-based-views.txt:94
msgid "Returns a ``self.response_class`` instance."
msgstr ""

# c19994cec35646c7948d22a9befb68e5
#: ../../ref/class-based-views.txt:96
msgid ""
"If any keyword arguments are provided, they will be passed to the "
"constructor of the response class."
msgstr ""

# 677b11f8892246cc96447c441f19d760
#: ../../ref/class-based-views.txt:99
msgid ""
"Calls :meth:`~TemplateResponseMixin.get_template_names()` to obtain the list "
"of template names that will be searched looking for an existent template."
msgstr ""

# bab924293f3749e4a5bc0997cb8e959d
#: ../../ref/class-based-views.txt:105
msgid ""
"Returns a list of template names to search for when rendering the template."
msgstr ""

# 8985bc0103054ec4a70146fe24116bdc
#: ../../ref/class-based-views.txt:108
msgid ""
"If :attr:`TemplateResponseMixin.template_name` is specified, the default "
"implementation will return a list containing :attr:`TemplateResponseMixin."
"template_name` (if it is specified)."
msgstr ""

# 9367f426b77e4a0c91fac47401be78e8
#: ../../ref/class-based-views.txt:114
msgid "Single object mixins"
msgstr ""

# 444e8de6368c4289861aa672fb99231c
#: ../../ref/class-based-views.txt:119
msgid "SingleObjectMixin"
msgstr ""

# 3f92feebf0f344b49e1dfc0205b26afe
# 4f6fdd0bad4444e89a97355792df53da
#: ../../ref/class-based-views.txt:124 ../../ref/class-based-views.txt:287
msgid ""
"The model that this view will display data for. Specifying ``model = Foo`` "
"is effectively the same as specifying ``queryset = Foo.objects.all()``."
msgstr ""

# bc35c9e28f184b09bb6f8d46fd8c3b76
#: ../../ref/class-based-views.txt:130
msgid ""
"A ``QuerySet`` that represents the objects. If provided, the value of :attr:"
"`SingleObjectMixin.queryset` supersedes the value provided for :attr:"
"`SingleObjectMixin.model`."
msgstr ""

# 729403d4b23942f4bdabacd5e07c49ee
#: ../../ref/class-based-views.txt:136
msgid ""
"The name of the field on the model that contains the slug. By default, "
"``slug_field`` is ``'slug'``."
msgstr ""

# 0f122e1595404fa5ba8b8377ea8e7376
#: ../../ref/class-based-views.txt:143
msgid ""
"The name of the URLConf keyword argument that contains the slug. By default, "
"``slug_url_kwarg`` is ``'slug'``."
msgstr ""

# 16dae3610a0340d89af1bb674bdf6341
#: ../../ref/class-based-views.txt:150
msgid ""
"The name of the URLConf keyword argument that contains the primary key. By "
"default, ``pk_url_kwarg`` is ``'pk'``."
msgstr ""

# d5f745d660b2467f98ae60c91560059f
# b463fa2f681646a6a7afdfe872f749f7
#: ../../ref/class-based-views.txt:155 ../../ref/class-based-views.txt:315
msgid "Designates the name of the variable to use in the context."
msgstr ""

# ed37c68a0da9429a9e1b813717800280
#: ../../ref/class-based-views.txt:159
msgid ""
"Returns the single object that this view will display. If ``queryset`` is "
"provided, that queryset will be used as the source of objects; otherwise, :"
"meth:`~SingleObjectMixin.get_queryset` will be used. ``get_object()`` looks "
"for a :attr:`SingleObjectMixin.pk_url_kwarg` argument in the arguments to "
"the view; if this argument is found, this method performs a primary-key "
"based lookup using that value. If this argument is not found, it looks for "
"a :attr:`SingleObjectMixin.slug_url_kwarg` argument, and performs a slug "
"lookup using the :attr:`SingleObjectMixin.slug_field`."
msgstr ""

# 3b98dffbe7114d79a9543c78a251dca7
#: ../../ref/class-based-views.txt:173
msgid ""
"Returns the queryset that will be used to retrieve the object that this view "
"will display. By default, :meth:`~SingleObjectMixin.get_queryset` returns "
"the value of the :attr:`~SingleObjectMixin.queryset` attribute if it is set, "
"otherwise it constructs a :class:`QuerySet` by calling the `all()` method on "
"the :attr:`~SingleObjectMixin.model` attribute's default manager."
msgstr ""

# 65e23ade58564247ac333b4b056ca961
#: ../../ref/class-based-views.txt:182
msgid ""
"Return the context variable name that will be used to contain the data that "
"this view is manipulating. If :attr:`~SingleObjectMixin.context_object_name` "
"is not set, the context name will be constructed from the ``object_name`` of "
"the model that the queryset is composed from. For example, the model "
"``Article`` would have context object named ``'article'``."
msgstr ""

# 86d79ab6d6a84fb0b2906690804483f0
# 653f6795298b4553a027aad04f1d243d
#: ../../ref/class-based-views.txt:191 ../../ref/class-based-views.txt:362
msgid "Returns context data for displaying the list of objects."
msgstr ""

# 9c0466dbc0da4a4b989fd812569944f0
# 9d7862f271ab44ec821f3230c87de888
# 77d55b1b85d540c7940195951ea12b25
# 497b247f79254e3ca7990f8651ac510d
# b1f03a6e5aba439688288c2a6e6ca217
# 7a8c1ec6205b47c6bb226298d06e8d32
# 543b04bc1d3d44aeac6f6ebfe0c9dafc
# 2b9988c169e84f86ac786e650b820488
#: ../../ref/class-based-views.txt:193 ../../ref/class-based-views.txt:364
#: ../../ref/class-based-views.txt:472 ../../ref/class-based-views.txt:902
#: ../../ref/class-based-views.txt:1150 ../../ref/class-based-views.txt:1189
#: ../../ref/class-based-views.txt:1235 ../../ref/class-based-views.txt:1271
msgid "**Context**"
msgstr ""

# 63928cd1aba5453d9c81b133ae069d59
#: ../../ref/class-based-views.txt:195
msgid ""
"``object``: The object that this view is displaying. If "
"``context_object_name`` is specified, that variable will also be set in the "
"context, with the same value as ``object``."
msgstr ""

# e4a18a9067e14fc7b7df32c132795ba4
#: ../../ref/class-based-views.txt:200
msgid "SingleObjectTemplateResponseMixin"
msgstr ""

# eef8284386a34537afbdc4f34866b0db
#: ../../ref/class-based-views.txt:204
msgid ""
"A mixin class that performs template-based response rendering for views that "
"operate upon a single object instance. Requires that the view it is mixed "
"with provides ``self.object``, the object instance that the view is "
"operating on. ``self.object`` will usually be, but is not required to be, an "
"instance of a Django model. It may be ``None`` if the view is in the process "
"of constructing a new instance."
msgstr ""

# 82fa5b606df6497589680685067b05d5
# 9fcfdd3a14e7495cb2ca7bdea480381e
#: ../../ref/class-based-views.txt:211 ../../ref/class-based-views.txt:393
msgid "**Extends**"
msgstr ""

# 293e1b1d21e84b5184155f426086ddd5
# eb58997d0cd142b485c416358bad2467
#: ../../ref/class-based-views.txt:213 ../../ref/class-based-views.txt:395
msgid ":class:`~django.views.generic.base.TemplateResponseMixin`"
msgstr ""

# 0c49a8db3cb542e1aabb2cfd889f8f37
#: ../../ref/class-based-views.txt:217
msgid ""
"The field on the current object instance that can be used to determine the "
"name of a candidate template. If either ``template_name_field`` or the value "
"of the ``template_name_field`` on the current object instance is ``None``, "
"the object will not be interrogated for a candidate template name."
msgstr ""

# 17ca6be2dcca4f61a7f928d4d87399c0
#: ../../ref/class-based-views.txt:225
msgid ""
"The suffix to append to the auto-generated candidate template name. Default "
"suffix is ``_detail``."
msgstr ""

# 144a36f368eb49308b74ecff360409af
# 59b1809d97e34d3c99aa4545e6b79241
#: ../../ref/class-based-views.txt:230 ../../ref/class-based-views.txt:404
msgid "Returns a list of candidate template names. Returns the following list:"
msgstr ""

# ca7cebaade214d28a055b1692f98950c
# 1e33ae7018a249a29290b25b71c7f325
#: ../../ref/class-based-views.txt:232 ../../ref/class-based-views.txt:406
msgid "the value of ``template_name`` on the view (if provided)"
msgstr ""

# 59984dcbf12241e188c3ec09a59a38eb
#: ../../ref/class-based-views.txt:233
msgid ""
"the contents of the ``template_name_field`` field on the object instance "
"that the view is operating upon (if available)"
msgstr ""

# cafb036972e84e75b8fbf934ebd5e451
# 89cbe70983014a5e9e661b99b7b15832
#: ../../ref/class-based-views.txt:235 ../../ref/class-based-views.txt:407
msgid "``<app_label>/<object_name><template_name_suffix>.html``"
msgstr ""

# 424208c5a8d34d25b0815f93a2256c9e
#: ../../ref/class-based-views.txt:238
msgid "Multiple object mixins"
msgstr ""

# dc20a71dfddf4f91aa4c053df438a13e
#: ../../ref/class-based-views.txt:243
msgid "MultipleObjectMixin"
msgstr ""

# af7350dd6edc45a28b7350fa08ed0158
#: ../../ref/class-based-views.txt:246
msgid "A mixin that can be used to display a list of objects."
msgstr ""

# c7f93dfcc5d14afe85ef2c0cd6033f7a
#: ../../ref/class-based-views.txt:248
msgid ""
"If ``paginate_by`` is specified, Django will paginate the results returned "
"by this. You can specify the page number in the URL in one of two ways:"
msgstr ""

# e0e3f6afddd54ca282fb99928ec83ecd
#: ../../ref/class-based-views.txt:251
msgid ""
"Use the ``page`` parameter in the URLconf. For example, this is what your "
"URLconf might look like::"
msgstr ""

# fdfaf894f2144d3e9cb918dfa0fe77a5
#: ../../ref/class-based-views.txt:256
msgid ""
"Pass the page number via the ``page`` query-string parameter. For example, a "
"URL would look like this::"
msgstr ""

# e315fe40a225420bb24cdf81aa0d6af5
#: ../../ref/class-based-views.txt:261
msgid ""
"These values and lists are 1-based, not 0-based, so the first page would be "
"represented as page ``1``."
msgstr ""

# d26f2d64db7b4aefaae910a0863638b7
#: ../../ref/class-based-views.txt:264
msgid ""
"For more on pagination, read the :doc:`pagination documentation </topics/"
"pagination>`."
msgstr ""

# 0308db10f3624b64a2498e4a8884a41c
#: ../../ref/class-based-views.txt:267
msgid ""
"As a special case, you are also permitted to use ``last`` as a value for "
"``page``::"
msgstr ""

# f1e81354b1264954b0def77714893afb
#: ../../ref/class-based-views.txt:272
msgid ""
"This allows you to access the final page of results without first having to "
"determine how many pages there are."
msgstr ""

# 5e0a5cbe66dc404bbb2e106cb00dc8d8
#: ../../ref/class-based-views.txt:275
msgid ""
"Note that ``page`` *must* be either a valid page number or the value "
"``last``; any other value for ``page`` will result in a 404 error."
msgstr ""

# fdec182fbe304cc4a47b75dd690db4b1
#: ../../ref/class-based-views.txt:280
msgid ""
"A boolean specifying whether to display the page if no objects are "
"available. If this is ``False`` and no objects are available, the view will "
"raise a 404 instead of displaying an empty page. By default, this is "
"``True``."
msgstr ""

# c1c517a0245043ba8889add53b1b29c4
#: ../../ref/class-based-views.txt:293
msgid ""
"A ``QuerySet`` that represents the objects. If provided, the value of :attr:"
"`MultipleObjectMixin.queryset` supersedes the value provided for :attr:"
"`MultipleObjectMixin.model`."
msgstr ""

# 58a74757d920435085ad3a08e2336618
#: ../../ref/class-based-views.txt:299
msgid ""
"An integer specifying how many objects should be displayed per page. If this "
"is given, the view will paginate objects with :attr:`MultipleObjectMixin."
"paginate_by` objects per page. The view will expect either a ``page`` query "
"string parameter (via ``GET``) or a ``page`` variable specified in the "
"URLconf."
msgstr ""

# 096b6c7a31944b7b8f1140704f8d3490
#: ../../ref/class-based-views.txt:307
msgid ""
"The paginator class to be used for pagination. By default, :class:`django."
"core.paginator.Paginator` is used. If the custom paginator class doesn't "
"have the same constructor interface as :class:`django.core.paginator."
"Paginator`, you will also need to provide an implementation for :meth:"
"`MultipleObjectMixin.get_paginator`."
msgstr ""

# 42a8a9943da44e8d9f152060522f1834
#: ../../ref/class-based-views.txt:319
msgid "Returns the queryset that represents the data this view will display."
msgstr ""

# 722d625ff25740adb3963d967f5249f5
#: ../../ref/class-based-views.txt:323
msgid ""
"Returns a 4-tuple containing (``paginator``, ``page``, ``object_list``, "
"``is_paginated``)."
msgstr ""

# d15c4aa9e3d7458cbee5393d16d4659e
#: ../../ref/class-based-views.txt:326
msgid ""
"Constructed by paginating ``queryset`` into pages of size ``page_size``. If "
"the request contains a ``page`` argument, either as a captured URL argument "
"or as a GET argument, ``object_list`` will correspond to the objects from "
"that page."
msgstr ""

# 4f20b78bc6ae46139ea2a7c7e8f5b716
#: ../../ref/class-based-views.txt:333
msgid ""
"Returns the number of items to paginate by, or ``None`` for no pagination. "
"By default this simply returns the value of :attr:`MultipleObjectMixin."
"paginate_by`."
msgstr ""

# 4441f31becdd4f768c4f9a5341056e71
#: ../../ref/class-based-views.txt:339
msgid ""
"Returns an instance of the paginator to use for this view. By default, "
"instantiates an instance of :attr:`paginator_class`."
msgstr ""

# 44dc40ada30944e58be534b2e86c4f70
#: ../../ref/class-based-views.txt:344
msgid ""
"Return a boolean specifying whether to display the page if no objects are "
"available. If this method returns ``False`` and no objects are available, "
"the view will raise a 404 instead of displaying an empty page. By default, "
"this is ``True``."
msgstr ""

# 23fbe00c23b34167b094617ae9cee742
#: ../../ref/class-based-views.txt:351
msgid ""
"Return the context variable name that will be used to contain the list of "
"data that this view is manipulating. If ``object_list`` is a queryset of "
"Django objects and :attr:`~MultipleObjectMixin.context_object_name` is not "
"set, the context name will be the ``object_name`` of the model that the "
"queryset is composed from, with postfix ``'_list'`` appended. For example, "
"the model ``Article`` would have a context object named ``article_list``."
msgstr ""

# 7a3a97355ad248d394269e1a43bb18ca
#: ../../ref/class-based-views.txt:366
msgid ""
"``object_list``: The list of objects that this view is displaying. If "
"``context_object_name`` is specified, that variable will also be set in the "
"context, with the same value as ``object_list``."
msgstr ""

# 820dca158daa4ddbb6022bf31abd05d0
#: ../../ref/class-based-views.txt:370
msgid ""
"``is_paginated``: A boolean representing whether the results are paginated. "
"Specifically, this is set to ``False`` if no page size has been specified, "
"or if the available objects do not span multiple pages."
msgstr ""

# fadb2681918f4e78a1b5caa01f9279d7
#: ../../ref/class-based-views.txt:375
msgid ""
"``paginator``: An instance of :class:`django.core.paginator.Paginator`. If "
"the page is not paginated, this context variable will be ``None``."
msgstr ""

# e58d238f739d4b67b8866a42d2598615
#: ../../ref/class-based-views.txt:379
msgid ""
"``page_obj``: An instance of :class:`django.core.paginator.Page`. If the "
"page is not paginated, this context variable will be ``None``."
msgstr ""

# ae9ea7d6d7ae406aad39ffa18d2fa857
#: ../../ref/class-based-views.txt:384
msgid "MultipleObjectTemplateResponseMixin"
msgstr ""

# 710f9de55071402da3dc736eb68f04ee
#: ../../ref/class-based-views.txt:387
msgid ""
"A mixin class that performs template-based response rendering for views that "
"operate upon a list of object instances. Requires that the view it is mixed "
"with provides ``self.object_list``, the list of object instances that the "
"view is operating on. ``self.object_list`` may be, but is not required to "
"be, a :class:`~django.db.models.query.QuerySet`."
msgstr ""

# 38f506d76ae44f639feec040a086b767
#: ../../ref/class-based-views.txt:399
msgid ""
"The suffix to append to the auto-generated candidate template name. Default "
"suffix is ``_list``."
msgstr ""

# 7020f2e75da04b518c27304a62cea30a
#: ../../ref/class-based-views.txt:410
msgid "Editing mixins"
msgstr ""

# 2508454f57fd4ca18d00e88a424c5b41
#: ../../ref/class-based-views.txt:415
msgid "FormMixin"
msgstr ""

# 70506b338faf45c8a0496c4ddab70d22
#: ../../ref/class-based-views.txt:418
msgid ""
"A mixin class that provides facilities for creating and displaying forms."
msgstr ""

# 4e221efb6f724c389087adc6b4af787d
#: ../../ref/class-based-views.txt:422
msgid "A dictionary containing initial data for the form."
msgstr ""

# 4b6e7d424ce14d64a339f2ff3195af58
#: ../../ref/class-based-views.txt:426
msgid "The form class to instantiate."
msgstr ""

# 9627ec98f5f04c97afdb3405c1a48111
# db6bd3e5485d45ecaeb8ef6b7e0f8d03
#: ../../ref/class-based-views.txt:430 ../../ref/class-based-views.txt:503
msgid "The URL to redirect to when the form is successfully processed."
msgstr ""

# a8a20b1357894e1094aa984b37868031
#: ../../ref/class-based-views.txt:434
msgid ""
"Retrieve initial data for the form. By default, returns :attr:`.initial`."
msgstr ""

# 77907a2c853c4a938a4a18d1e2fb3187
#: ../../ref/class-based-views.txt:439
msgid "Retrieve the form class to instantiate. By default :attr:`.form_class`."
msgstr ""

# df16be147551490cbb8fa660e1ca1f82
#: ../../ref/class-based-views.txt:444
msgid ""
"Instantiate an instance of ``form_class`` using :meth:`.get_form_kwargs`."
msgstr ""

# d7c233fc045d4637a94ea4eb981339b2
#: ../../ref/class-based-views.txt:449
msgid "Build the keyword arguments required to instantiate the form."
msgstr ""

# 6e48e9fefc4a4d7e8386b3d5ec21516d
#: ../../ref/class-based-views.txt:451
msgid ""
"The ``initial`` argument is set to :meth:`.get_initial`. If the request is a "
"``POST`` or ``PUT``, the request data (``request.POST`` and ``request."
"FILES``) will also be provided."
msgstr ""

# 34d293798cb8492187a5d618e1a4219e
#: ../../ref/class-based-views.txt:457
msgid ""
"Determine the URL to redirect to when the form is successfully validated. "
"Returns :attr:`.success_url` by default."
msgstr ""

# 2ee097ac5e59423f86ee7335d6023053
#: ../../ref/class-based-views.txt:462
msgid "Redirects to :meth:`.get_success_url`."
msgstr ""

# ca072866011e4e74bfb9d09678381cb8
# 1dcda6edff854133a41ec2b641d8f589
#: ../../ref/class-based-views.txt:466 ../../ref/class-based-views.txt:537
msgid "Renders a response, providing the invalid form as context."
msgstr ""

# 7fb4ecc9a7814e80a4a95363a99ee4ee
#: ../../ref/class-based-views.txt:470
msgid "Populates a context containing the contents of ``kwargs``."
msgstr ""

# d2bc937179614872b1faf342a6533ab1
#: ../../ref/class-based-views.txt:474
msgid "``form``: The form instance that was generated for the view."
msgstr ""

# 455d9ebf44f349a896e31f9a155f3e52
#: ../../ref/class-based-views.txt:478
msgid ""
"Views mixing :class:`FormMixin` must provide an implementation of :meth:`."
"form_valid` and :meth:`.form_invalid`."
msgstr ""

# 512d511153ae4e27b1a9725211214d26
#: ../../ref/class-based-views.txt:483
msgid "ModelFormMixin"
msgstr ""

# 54684fdd0b404a5bbbeca0593d0ca9b8
#: ../../ref/class-based-views.txt:486
msgid "A form mixin that works on ModelForms, rather than a standalone form."
msgstr ""

# 776bf4e101bb4e09aa9d92c8ee7b6fd1
#: ../../ref/class-based-views.txt:488
msgid ""
"Since this is a subclass of :class:`~django.views.generic.detail."
"SingleObjectMixin`, instances of this mixin have access to the :attr:"
"`~SingleObjectMixin.model` and :attr:`~SingleObjectMixin.queryset` "
"attributes, describing the type of object that the ModelForm is "
"manipulating. The view also provides ``self.object``, the instance being "
"manipulated. If the instance is being created, ``self.object`` will be "
"``None``."
msgstr ""

# 9ba11c26a4034bc2b55438404d36977d
# 36d5226af43b47028bd2770b29802f80
# 352b822277624d829d06d2ee094491e0
# 34b9e5874267490c8ede66858c6208ff
# e736452bcd5149a78814e2af1cd7cdfb
# 0e3683b7384847c0b5eb0efd9f4fb5f4
# 8d45fb8fa121423682e950785708bd75
# c87ef1e9517d426f8eb56089055af8e3
# e8f95aae2c724b7bbb72c096308bfcbb
# f85e5d5778cc41c387595351687b1e8f
# 80d67f3cedfc472992eef85c3f0f8b77
# 78379bb86e2e46409c656bc6a8c157e8
# 4f441054523745229345f00e8760d759
# 4a656ca22f184b95b0567a07ccdffb08
# 29fdbc277fc14001b6b4e6c372bb3fed
# 9b904854537d4d7bbcf5ebe4adf42468
#: ../../ref/class-based-views.txt:496 ../../ref/class-based-views.txt:783
#: ../../ref/class-based-views.txt:889 ../../ref/class-based-views.txt:972
#: ../../ref/class-based-views.txt:998 ../../ref/class-based-views.txt:1021
#: ../../ref/class-based-views.txt:1038 ../../ref/class-based-views.txt:1057
#: ../../ref/class-based-views.txt:1076 ../../ref/class-based-views.txt:1108
#: ../../ref/class-based-views.txt:1132 ../../ref/class-based-views.txt:1182
#: ../../ref/class-based-views.txt:1228 ../../ref/class-based-views.txt:1263
#: ../../ref/class-based-views.txt:1312 ../../ref/class-based-views.txt:1331
msgid "**Mixins**"
msgstr ""

# 8c5b2cce49d84ae7b5de0f016a36ce0e
# d51614ea53254598a07754e273ca326b
#: ../../ref/class-based-views.txt:498 ../../ref/class-based-views.txt:1023
msgid ":class:`django.views.generic.edit.FormMixin`"
msgstr ""

# 72e0f8cbb4d84f0bb038f05326eb35a8
# 52b3b8c2005c480bb580b4b83ae75534
#: ../../ref/class-based-views.txt:499 ../../ref/class-based-views.txt:974
msgid ":class:`django.views.generic.detail.SingleObjectMixin`"
msgstr ""

# 2fd230ad66eb4d5f963d1fea305c8fc4
#: ../../ref/class-based-views.txt:505
msgid ""
"``success_url`` may contain dictionary string formatting, which will be "
"interpolated against the object's field attributes. For example, you could "
"use ``success_url=\"/polls/%(slug)s/\"`` to redirect to a URL composed out "
"of the ``slug`` field on a model."
msgstr ""

# f1736e68853c4f769d467f4d3d522d2f
#: ../../ref/class-based-views.txt:512
msgid ""
"Retrieve the form class to instantiate. If :attr:`FormMixin.form_class` is "
"provided, that class will be used. Otherwise, a ModelForm will be "
"instantiated using the model associated with the :attr:`~SingleObjectMixin."
"queryset`, or with the :attr:`~SingleObjectMixin.model`, depending on which "
"attribute is provided."
msgstr ""

# 447c0e44f80946a9bb944a6d31130465
#: ../../ref/class-based-views.txt:521
msgid ""
"Add the current instance (``self.object``) to the standard :meth:`FormMixin."
"get_form_kwargs`."
msgstr ""

# f6459c1d76b2460b8ef2729413ea2f22
#: ../../ref/class-based-views.txt:526
msgid ""
"Determine the URL to redirect to when the form is successfully validated. "
"Returns :attr:`FormMixin.success_url` if it is provided; otherwise, attempts "
"to use the ``get_absolute_url()`` of the object."
msgstr ""

# d2dca55a08f04472852a0149d6ee74b6
#: ../../ref/class-based-views.txt:532
msgid ""
"Saves the form instance, sets the current object for the view, and redirects "
"to :meth:`.get_success_url`."
msgstr ""

# 0519e6db960241ceae0c924fa26141ff
#: ../../ref/class-based-views.txt:540
msgid "ProcessFormView"
msgstr ""

# fef5e1022c2d45b691f11608306579f8
#: ../../ref/class-based-views.txt:543
msgid "A mixin that provides basic HTTP GET and POST workflow."
msgstr ""

# 671b02a63d044071b344d3c4dc3e7386
#: ../../ref/class-based-views.txt:547
msgid ""
"Constructs a form, then renders a response using a context that contains "
"that form."
msgstr ""

# 18cb160a12e94954bae106f8f4956b6a
#: ../../ref/class-based-views.txt:552
msgid ""
"Constructs a form, checks the form for validity, and handles it accordingly."
msgstr ""

# c042ad0d8e234b41a0473e1500eb3519
#: ../../ref/class-based-views.txt:555
msgid "The PUT action is also handled, as an analog of POST."
msgstr ""

# 054173fba0f347a1a05071d473b0d058
#: ../../ref/class-based-views.txt:558
msgid "DeletionMixin"
msgstr ""

# e9ed93c501cf4fe68e6cad7b7fea9152
#: ../../ref/class-based-views.txt:561
msgid "Enables handling of the ``DELETE`` http action."
msgstr ""

# 3098ee04cd594121929dc07993914000
#: ../../ref/class-based-views.txt:565
msgid ""
"The url to redirect to when the nominated object has been successfully "
"deleted."
msgstr ""

# 5d04daad08854e48968e03bbcb4e03c6
#: ../../ref/class-based-views.txt:570
msgid ""
"Returns the url to redirect to when the nominated object has been "
"successfully deleted. Returns :attr:`~django.views.generic.edit."
"DeletionMixin.success_url` by default."
msgstr ""

# 13b4cf720a6145fda1e8e0397d447f28
#: ../../ref/class-based-views.txt:576
msgid "Date-based mixins"
msgstr ""

# 7fe0d17113934affa5f0fde4317d1b6f
#: ../../ref/class-based-views.txt:581
msgid "YearMixin"
msgstr ""

# ca432b5273e644499b4cb9b96e6808cd
#: ../../ref/class-based-views.txt:584
msgid ""
"A mixin that can be used to retrieve and provide parsing information for a "
"year component of a date."
msgstr ""

# 77a08adc19dc4ea58eece28dd5681e00
#: ../../ref/class-based-views.txt:589
msgid ""
"The :func:`~time.strftime` format to use when parsing the year. By default, "
"this is ``'%Y'``."
msgstr ""

# 3b9f941e4bba4b52830689bbb272b337
#: ../../ref/class-based-views.txt:594
msgid ""
"**Optional** The value for the year (as a string). By default, set to "
"``None``, which means the year will be determined using other means."
msgstr ""

# a2b97e8cc643490489cfdef2f4aa2dad
#: ../../ref/class-based-views.txt:599
msgid ""
"Returns the :func:`~time.strftime` format to use when parsing the year. "
"Returns :attr:`YearMixin.year_format` by default."
msgstr ""

# 4cb9d39f609a4fa8881e0b7d6812e5b0
#: ../../ref/class-based-views.txt:604
msgid ""
"Returns the year for which this view will display data. Tries the following "
"sources, in order:"
msgstr ""

# 68fb1ced77284a33aad184e16be306c7
#: ../../ref/class-based-views.txt:607
msgid "The value of the :attr:`YearMixin.year` attribute."
msgstr ""

# f8956e16242144cbadfe03709741a0ae
#: ../../ref/class-based-views.txt:608
msgid "The value of the `year` argument captured in the URL pattern"
msgstr ""

# f73db15cfcce47aba6a5bb37470fa3fe
#: ../../ref/class-based-views.txt:609
msgid "The value of the `year` GET query argument."
msgstr ""

# 3d5873cf9791499a81c9ea7d7cf790d8
#: ../../ref/class-based-views.txt:611
msgid "Raises a 404 if no valid year specification can be found."
msgstr ""

# a3990e717d114d77ae271ba67b4e88f6
#: ../../ref/class-based-views.txt:614
msgid "MonthMixin"
msgstr ""

# ed67557b4fd84153be9b5052ac9668d9
#: ../../ref/class-based-views.txt:617
msgid ""
"A mixin that can be used to retrieve and provide parsing information for a "
"month component of a date."
msgstr ""

# 0ea24e6e632249a697f4aafa4ab78b4d
#: ../../ref/class-based-views.txt:622
msgid ""
"The :func:`~time.strftime` format to use when parsing the month. By default, "
"this is ``'%b'``."
msgstr ""

# 78b9ae4c1e5b435cb88665b9cb921e1b
#: ../../ref/class-based-views.txt:627
msgid ""
"**Optional** The value for the month (as a string). By default, set to "
"``None``, which means the month will be determined using other means."
msgstr ""

# 63280ee9f44949a0a790ade6e2f70777
#: ../../ref/class-based-views.txt:632
msgid ""
"Returns the :func:`~time.strftime` format to use when parsing the month. "
"Returns :attr:`MonthMixin.month_format` by default."
msgstr ""

# 66df282244864c4489b3363a2038a331
#: ../../ref/class-based-views.txt:637
msgid ""
"Returns the month for which this view will display data. Tries the following "
"sources, in order:"
msgstr ""

# 47d05b3c91b844d188058e3b7e2063e3
#: ../../ref/class-based-views.txt:640
msgid "The value of the :attr:`MonthMixin.month` attribute."
msgstr ""

# a533518dcaa64e0c8f8e3a0b2dd876ee
#: ../../ref/class-based-views.txt:641
msgid "The value of the `month` argument captured in the URL pattern"
msgstr ""

# dbf88779fe014b3fb73efddadc122d57
#: ../../ref/class-based-views.txt:642
msgid "The value of the `month` GET query argument."
msgstr ""

# 7a365602351e4c7a8a950a6e696aaa66
#: ../../ref/class-based-views.txt:644
msgid "Raises a 404 if no valid month specification can be found."
msgstr ""

# 4dc63b629ec94c2382139054fdd26ac5
#: ../../ref/class-based-views.txt:648
msgid ""
"Returns a date object containing the first day of the month after the date "
"provided. Returns ``None`` if mixed with a view that sets ``allow_future = "
"False``, and the next month is in the future. If ``allow_empty = False``, "
"returns the next month that contains data."
msgstr ""

# 775cd71008bd443086d43610116d5158
#: ../../ref/class-based-views.txt:655
msgid ""
"Returns a date object containing the first day of the month before the date "
"provided. If ``allow_empty = False``, returns the previous month that "
"contained data."
msgstr ""

# 675d010e58774093b112b3ddf79afaae
#: ../../ref/class-based-views.txt:660
msgid "DayMixin"
msgstr ""

# 8d15f45ebcd14890a4eba10f672a6157
#: ../../ref/class-based-views.txt:663
msgid ""
"A mixin that can be used to retrieve and provide parsing information for a "
"day component of a date."
msgstr ""

# 130920a105c14e11b1984d59bd16b996
#: ../../ref/class-based-views.txt:668
msgid ""
"The :func:`~time.strftime` format to use when parsing the day. By default, "
"this is ``'%d'``."
msgstr ""

# 00d769447e8747d1b2eb5202b6258b30
#: ../../ref/class-based-views.txt:673
msgid ""
"**Optional** The value for the day (as a string). By default, set to "
"``None``, which means the day will be determined using other means."
msgstr ""

# ae9d5efc1bd344c6abe0a25443b8961d
#: ../../ref/class-based-views.txt:678
msgid ""
"Returns the :func:`~time.strftime` format to use when parsing the day. "
"Returns :attr:`DayMixin.day_format` by default."
msgstr ""

# 913aae47e3d744e2b0dbec1a153cac50
#: ../../ref/class-based-views.txt:683
msgid ""
"Returns the day for which this view will display data. Tries the following "
"sources, in order:"
msgstr ""

# f1bf839f186a4b699a0bc6c6f864b952
#: ../../ref/class-based-views.txt:686
msgid "The value of the :attr:`DayMixin.day` attribute."
msgstr ""

# bf4a9e3c80bb412f971c50da36efe2e9
#: ../../ref/class-based-views.txt:687
msgid "The value of the `day` argument captured in the URL pattern"
msgstr ""

# 3575971a30ea41c3bb57d2dc76790fb0
#: ../../ref/class-based-views.txt:688
msgid "The value of the `day` GET query argument."
msgstr ""

# a18ef4a6fedd4cd38bcef299e9a6501d
#: ../../ref/class-based-views.txt:690
msgid "Raises a 404 if no valid day specification can be found."
msgstr ""

# 66811c0617074b329620ff84832eea63
#: ../../ref/class-based-views.txt:694
msgid ""
"Returns a date object containing the next day after the date provided. "
"Returns ``None`` if mixed with a view that sets ``allow_future = False``, "
"and the next day is in the future. If ``allow_empty = False``, returns the "
"next day that contains data."
msgstr ""

# 0df05ffaa24e48e4a2e4a42176073be8
#: ../../ref/class-based-views.txt:701
msgid ""
"Returns a date object containing the previous day. If ``allow_empty = "
"False``, returns the previous day that contained data."
msgstr ""

# 999bb93e285b41429c20d02d53de85c2
#: ../../ref/class-based-views.txt:705
msgid "WeekMixin"
msgstr ""

# b78b062208c84d998924b65c4430c4c9
#: ../../ref/class-based-views.txt:708
msgid ""
"A mixin that can be used to retrieve and provide parsing information for a "
"week component of a date."
msgstr ""

# 8aded5eb50534348b8d524ddf3eaea9d
#: ../../ref/class-based-views.txt:713
msgid ""
"The :func:`~time.strftime` format to use when parsing the week. By default, "
"this is ``'%U'``."
msgstr ""

# 38f65ab94a284e9c982ca5d6c9bb94e0
#: ../../ref/class-based-views.txt:718
msgid ""
"**Optional** The value for the week (as a string). By default, set to "
"``None``, which means the week will be determined using other means."
msgstr ""

# dc8149d7b94f406ca80164bdf63dc766
#: ../../ref/class-based-views.txt:723
msgid ""
"Returns the :func:`~time.strftime` format to use when parsing the week. "
"Returns :attr:`WeekMixin.week_format` by default."
msgstr ""

# 71f83fdd2b30458cb4bbec74a7721963
#: ../../ref/class-based-views.txt:728
msgid ""
"Returns the week for which this view will display data. Tries the following "
"sources, in order:"
msgstr ""

# 1d434d0d463a412a997a28e9f734c47e
#: ../../ref/class-based-views.txt:731
msgid "The value of the :attr:`WeekMixin.week` attribute."
msgstr ""

# 6ccc55b377cc40acad0476501b1ee5b3
#: ../../ref/class-based-views.txt:732
msgid "The value of the `week` argument captured in the URL pattern"
msgstr ""

# e18d6968a5324cff8957196bfd8165d4
#: ../../ref/class-based-views.txt:733
msgid "The value of the `week` GET query argument."
msgstr ""

# ad39d8fd1c1d4ad49c55988aea3f8d0a
#: ../../ref/class-based-views.txt:735
msgid "Raises a 404 if no valid week specification can be found."
msgstr ""

# 17550db318e54976a4983655746cd395
#: ../../ref/class-based-views.txt:739
msgid "DateMixin"
msgstr ""

# c946bf1df34c48c59556dd642c06ac0d
#: ../../ref/class-based-views.txt:742
msgid "A mixin class providing common behavior for all date-based views."
msgstr ""

# 6dc60ca88b294f6aa9d1d621b54f0218
#: ../../ref/class-based-views.txt:746
msgid ""
"The name of the ``DateField`` or ``DateTimeField`` in the ``QuerySet``'s "
"model that the date-based archive should use to determine the objects on the "
"page."
msgstr ""

# 4a599c9128f946e2b5cb1abba64ef23e
#: ../../ref/class-based-views.txt:752
msgid ""
"A boolean specifying whether to include \"future\" objects on this page, "
"where \"future\" means objects in which the field specified in "
"``date_field`` is greater than the current date/time. By default, this is "
"``False``."
msgstr ""

# 98bf41e95bae4a1dbdeb14e359b92f0d
#: ../../ref/class-based-views.txt:759
msgid ""
"Returns the name of the field that contains the date data that this view "
"will operate on. Returns :attr:`DateMixin.date_field` by default."
msgstr ""

# 25ec1ce445854acfb244dadb5a96d310
#: ../../ref/class-based-views.txt:764
msgid ""
"Determine whether to include \"future\" objects on this page, where \"future"
"\" means objects in which the field specified in ``date_field`` is greater "
"than the current date/time. Returns :attr:`DateMixin.allow_future` by "
"default."
msgstr ""

# beed399e018f47c1b133980c2000e5d3
#: ../../ref/class-based-views.txt:770
msgid "BaseDateListView"
msgstr ""

# 2cfc199371a54cc6acefb41b74e4a5f6
#: ../../ref/class-based-views.txt:773
msgid ""
"A base class that provides common behavior for all date-based views. There "
"won't normally be a reason to instantiate :class:`~django.views.generic."
"dates.BaseDateListView`; instantiate one of the subclasses instead."
msgstr ""

# a7c4aebc0a5a4c3a922fb508b401ceb5
#: ../../ref/class-based-views.txt:778
msgid ""
"While this view (and it's subclasses) are executing, ``self.object_list`` "
"will contain the list of objects that the view is operating upon, and ``self."
"date_list`` will contain the list of dates for which data is available."
msgstr ""

# 905900c6b4524c1189c0565c72ead557
#: ../../ref/class-based-views.txt:785
msgid ":class:`~django.views.generic.dates.DateMixin`"
msgstr ""

# 55e0b951c4824c94888af85b0c8d4227
#: ../../ref/class-based-views.txt:786
msgid ":class:`~django.views.generic.list.MultipleObjectMixin`"
msgstr ""

# cdc27e81e84447668f8c73e988d369ac
#: ../../ref/class-based-views.txt:790
msgid ""
"A boolean specifying whether to display the page if no objects are "
"available. If this is ``True`` and no objects are available, the view will "
"display an empty page instead of raising a 404. By default, this is "
"``False``."
msgstr ""

# 8ffaaa2ead2341f695415c649d75b659
#: ../../ref/class-based-views.txt:797
msgid ""
"Returns a 3-tuple containing (``date_list``, ``latest``, ``extra_context``)."
msgstr ""

# efce9be983e14e5dbc886b0cf3cc0008
#: ../../ref/class-based-views.txt:800
msgid ""
"``date_list`` is the list of dates for which data is available. "
"``object_list`` is the list of objects ``extra_context`` is a dictionary of "
"context data that will be added to any context data provided by the :class:"
"`~django.views.generic.list.MultipleObjectMixin`."
msgstr ""

# 1076bd505cc24417adfbf96a019868e3
#: ../../ref/class-based-views.txt:808
msgid ""
"Returns a queryset, filtered using the query arguments defined by "
"``lookup``. Enforces any restrictions on the queryset, such as "
"``allow_empty`` and ``allow_future``."
msgstr ""

# 4c203563f1944e7a9465e7ae43e48591
#: ../../ref/class-based-views.txt:814
msgid ""
"Returns the list of dates of type ``date_type`` for which ``queryset`` "
"contains entries. For example, ``get_date_list(qs, 'year')`` will return the "
"list of years for which ``qs`` has entries. See :meth:`~django.db.models."
"query.QuerySet.dates()` for the ways that the ``date_type`` argument can be "
"used."
msgstr ""

# 4d7f6c2ad6e84903b83a0bb127f5fe32
#: ../../ref/class-based-views.txt:822
msgid "Generic views"
msgstr ""

# 941319165b4349d1956cbc235f10b1a6
#: ../../ref/class-based-views.txt:825
msgid "Simple generic views"
msgstr ""

# 216b3ba0d2a44c94a8be617b22781924
#: ../../ref/class-based-views.txt:830
msgid "View"
msgstr ""

# 99a0d6c072f24eb5826f26aa01d78883
#: ../../ref/class-based-views.txt:833
msgid ""
"The master class-based base view. All other generic class-based views "
"inherit from this base class."
msgstr ""

# 4ee762ceb4b54cdab600872a2c93e6ce
#: ../../ref/class-based-views.txt:836
msgid ""
"Each request served by a :class:`~django.views.generic.base.View` has an "
"independent state; therefore, it is safe to store state variables on the "
"instance (i.e., ``self.foo = 3`` is a thread-safe operation)."
msgstr ""

# 9c33305c0f704071afcca88be4d13350
#: ../../ref/class-based-views.txt:840
msgid ""
"A class-based view is deployed into a URL pattern using the :meth:`~View."
"as_view()` classmethod::"
msgstr ""

# 98ab629ef3af44a0bac8a480123626c9
#: ../../ref/class-based-views.txt:847
msgid ""
"Any argument passed into :meth:`~View.as_view()` will be assigned onto the "
"instance that is used to service a request. Using the previous example, this "
"means that every request on ``MyView`` is able to interrogate ``self.size``."
msgstr ""

# c4334d83a6c24aa3bf0c93f45f1936ed
#: ../../ref/class-based-views.txt:854
msgid ""
"Arguments passed to a view are shared between every instance of a view. This "
"means that you shoudn't use a list, dictionary, or any other variable object "
"as an argument to a view. If you did, the actions of one user visiting your "
"view could have an effect on subsequent users visiting the same view."
msgstr ""

# 9b892b895b24447ab46832da5d465a0e
#: ../../ref/class-based-views.txt:862
msgid ""
"The ``view`` part of the view -- the method that accepts a ``request`` "
"argument plus arguments, and returns a HTTP response."
msgstr ""

# 7c1768594b9749dbac15bd94a248a631
#: ../../ref/class-based-views.txt:865
msgid ""
"The default implementation will inspect the HTTP method and attempt to "
"delegate to a method that matches the HTTP method; a ``GET`` will be "
"delegated to :meth:`~View.get()`, a ``POST`` to :meth:`~View.post()`, and so "
"on."
msgstr ""

# 503f4a317b6940e99d17ce239babc9ea
#: ../../ref/class-based-views.txt:870
msgid ""
"The default implementation also sets ``request``, ``args`` and ``kwargs`` as "
"instance variables, so any method on the view can know the full details of "
"the request that was made to invoke the view."
msgstr ""

# 828bd6b0431a468da24ef28762b26d4e
#: ../../ref/class-based-views.txt:876
msgid ""
"If the view was called with HTTP method it doesn't support, this method is "
"called instead."
msgstr ""

# 82d9b15020b548d2a0bcafc4d3acdd79
#: ../../ref/class-based-views.txt:879
msgid ""
"The default implementation returns ``HttpResponseNotAllowed`` with list of "
"allowed methods in plain text."
msgstr ""

# 9af526e89f564db8b8d0ddf09adbd1eb
#: ../../ref/class-based-views.txt:883
msgid "TemplateView"
msgstr ""

# 38d26327a7d047ca9d14306aa93f82de
#: ../../ref/class-based-views.txt:886
msgid ""
"Renders a given template, passing it a ``{{ params }}`` template variable, "
"which is a dictionary of the parameters captured in the URL."
msgstr ""

# 69ee8b338def4738b7ab8058b9266b94
#: ../../ref/class-based-views.txt:891
msgid ":class:`django.views.generic.base.TemplateResponseMixin`"
msgstr ""

# 91ddce57c8e84cc78bbf2640471ea20d
#: ../../ref/class-based-views.txt:895
msgid "The full name of a template to use."
msgstr ""

# 46b9e41063c040a28e932698c0a174e8
#: ../../ref/class-based-views.txt:899
msgid ""
"Return a context data dictionary consisting of the contents of ``kwargs`` "
"stored in the context variable ``params``."
msgstr ""

# a740315313da4e8ca04a419107e8aa56
#: ../../ref/class-based-views.txt:904
msgid ""
"``params``: The dictionary of keyword arguments captured from the URL "
"pattern that served the view."
msgstr ""

# 66d6f09f032c4b90a24e4e7f592cade1
#: ../../ref/class-based-views.txt:908
msgid "RedirectView"
msgstr ""

# e9a87e75dd784defa3f58a2a04a3b5ce
#: ../../ref/class-based-views.txt:911
msgid "Redirects to a given URL."
msgstr ""

# f52f2a2597864a238c8a550dbd4f219e
#: ../../ref/class-based-views.txt:913
msgid ""
"The given URL may contain dictionary-style string formatting, which will be "
"interpolated against the parameters captured in the URL. Because keyword "
"interpolation is *always* done (even if no arguments are passed in), any ``"
"\"%\"`` characters in the URL must be written as ``\"%%\"`` so that Python "
"will convert them to a single percent sign on output."
msgstr ""

# c165c046252044de9f211cdbdde0aca6
#: ../../ref/class-based-views.txt:919
msgid ""
"If the given URL is ``None``, Django will return an ``HttpResponseGone`` "
"(410)."
msgstr ""

# 552d95e4718944a593b925fdef601fe4
#: ../../ref/class-based-views.txt:924
msgid ""
"The URL to redirect to, as a string. Or ``None`` to raise a 410 (Gone) HTTP "
"error."
msgstr ""

# d7636cb3c08441d7b8e2a2bcb051750f
#: ../../ref/class-based-views.txt:929
msgid ""
"Whether the redirect should be permanent. The only difference here is the "
"HTTP status code returned. If ``True``, then the redirect will use status "
"code 301. If ``False``, then the redirect will use status code 302. By "
"default, ``permanent`` is ``True``."
msgstr ""

# 9a247f9b9d014683835464f8bf176442
#: ../../ref/class-based-views.txt:936
msgid ""
"Whether to pass along the GET query string to the new location. If ``True``, "
"then the query string is appended to the URL. If ``False``, then the query "
"string is discarded. By default, ``query_string`` is ``False``."
msgstr ""

# a6da0818fd8e428a9a70223ad934ef9b
#: ../../ref/class-based-views.txt:943
msgid "Constructs the target URL for redirection."
msgstr ""

# 18c19b8b0c0d46c0b5729bbc7018c47c
#: ../../ref/class-based-views.txt:945
msgid ""
"The default implementation uses :attr:`~RedirectView.url` as a starting "
"string, performs expansion of ``%`` parameters in that string, as well as "
"the appending of query string if requested by :attr:`~RedirectView."
"query_string`. Subclasses may implement any behavior they wish, as long as "
"the method returns a redirect-ready URL string."
msgstr ""

# 94a35b4da2af4e4e8139893a0a0ef670
#: ../../ref/class-based-views.txt:953
msgid "Detail views"
msgstr ""

# 63c665272d8648eca62cf8bed3bc2369
#: ../../ref/class-based-views.txt:958
msgid "DetailView"
msgstr ""

# 8abb2db1be534504a5eb4c6fa8877477
#: ../../ref/class-based-views.txt:962
msgid "A page representing an individual object."
msgstr ""

# e6cae8ec247d4c29b1c086e7599149cc
#: ../../ref/class-based-views.txt:964
msgid ""
"While this view is executing, ``self.object`` will contain the object that "
"the view is operating upon."
msgstr ""

# feeb37cb2816451aba33a1c2b5f252c0
#: ../../ref/class-based-views.txt:967
msgid ""
":class:`~django.views.generic.base.BaseDetailView` implements the same "
"behavior as :class:`~django.views.generic.base.DetailView`, but doesn't "
"include the :class:`~django.views.generic.detail."
"SingleObjectTemplateResponseMixin`."
msgstr ""

# 9beb5c1423a14dad982f695e246c060f
# 518f9ed9a8584191bfbebec68bd1ec59
#: ../../ref/class-based-views.txt:975 ../../ref/class-based-views.txt:1333
msgid ":class:`django.views.generic.detail.SingleObjectTemplateResponseMixin`"
msgstr ""

# 694597aef7574d86b5db108b6b445723
#: ../../ref/class-based-views.txt:978
msgid "List views"
msgstr ""

# 80ffd2c3946d478e8712536dc4cf425d
#: ../../ref/class-based-views.txt:983
msgid "ListView"
msgstr ""

# 390d04f3bcbb4e448fa57419613cf133
#: ../../ref/class-based-views.txt:987
msgid "A page representing a list of objects."
msgstr ""

# 82ee060c8eed402f8d07f4d8c19db17d
#: ../../ref/class-based-views.txt:989
msgid ""
"While this view is executing, ``self.object_list`` will contain the list of "
"objects (usually, but not necessarily a queryset) that the view is operating "
"upon."
msgstr ""

# 89a8d811600a453a96423b9dc865f058
#: ../../ref/class-based-views.txt:993
msgid ""
":class:`~django.views.generic.list.BaseListView` implements the same "
"behavior as :class:`~django.views.generic.list.ListView`, but doesn't "
"include the :class:`~django.views.generic.list."
"MultipleObjectTemplateResponseMixin`."
msgstr ""

# e43030b6698b452d8120068b5d9627bf
#: ../../ref/class-based-views.txt:1000
msgid ":class:`django.views.generic.list.MultipleObjectMixin`"
msgstr ""

# bf258f7ce1b74504b4e237831a04c785
# 71b9dc53b8514b889c3a1f705fb5ab30
# b39e93c30df944a29ef0b39024d2f301
# 419f6cda91c94d73adf3ee7aba4a2d73
# 6b3af6b45bb4419ca66e2071618cf7b7
# e7eefc3c31b84d9b999163984c0b4551
# 86f9c00f84894c2a85b32ad70fec331e
#: ../../ref/class-based-views.txt:1001 ../../ref/class-based-views.txt:1111
#: ../../ref/class-based-views.txt:1134 ../../ref/class-based-views.txt:1184
#: ../../ref/class-based-views.txt:1230 ../../ref/class-based-views.txt:1265
#: ../../ref/class-based-views.txt:1314
msgid ":class:`django.views.generic.list.MultipleObjectTemplateResponseMixin`"
msgstr ""

# 3b77c7c2c1244858b7f9a3ac0eeb9237
#: ../../ref/class-based-views.txt:1005
msgid "Editing views"
msgstr ""

# 574193f6bad64f3daa05428109f43f36
#: ../../ref/class-based-views.txt:1010
msgid "FormView"
msgstr ""

# f15aba00393e4ed8acc9d95a63e7a201
#: ../../ref/class-based-views.txt:1014
msgid ""
"A view that displays a form. On error, redisplays the form with validation "
"errors; on success, redirects to a new URL."
msgstr ""

# 6d7b48f56bec4dd49e329beebbc4de62
#: ../../ref/class-based-views.txt:1017
msgid ""
":class:`~django.views.generic.edit.BaseFormView` implements the same "
"behavior as :class:`~django.views.generic.edit.FormView`, but doesn't "
"include the :class:`~django.views.generic.base.TemplateResponseMixin`."
msgstr ""

# ff3f3c7c6cc74df2bd1c90399aeb71cc
# 583bcb8c7a364d4282b07d22101eaa40
# 94c8ccad1da84d30b4629333d5492673
#: ../../ref/class-based-views.txt:1024 ../../ref/class-based-views.txt:1041
#: ../../ref/class-based-views.txt:1060
msgid ":class:`django.views.generic.edit.ProcessFormView`"
msgstr ""

# 2149e6c2724745b2afca4858ce52d5a4
#: ../../ref/class-based-views.txt:1027
msgid "CreateView"
msgstr ""

# c08136dca064421aa4471d3c604ff467
#: ../../ref/class-based-views.txt:1031
msgid ""
"A view that displays a form for creating an object, redisplaying the form "
"with validation errors (if there are any) and saving the object."
msgstr ""

# 119473124e544c7cb992feda2597f7b1
#: ../../ref/class-based-views.txt:1034
msgid ""
":class:`~django.views.generic.edit.BaseCreateView` implements the same "
"behavior as :class:`~django.views.generic.edit.CreateView`, but doesn't "
"include the :class:`~django.views.generic.base.TemplateResponseMixin`."
msgstr ""

# f422f0c28b10461a960eee0f3e9d7c2a
# 6eb23d37b39f41c9a6818d65adc4f37a
#: ../../ref/class-based-views.txt:1040 ../../ref/class-based-views.txt:1059
msgid ":class:`django.views.generic.edit.ModelFormMixin`"
msgstr ""

# 619af171b3f74484bb0ab21f515a9f4b
#: ../../ref/class-based-views.txt:1044
msgid "UpdateView"
msgstr ""

# 06ace2563f7c4b8281e044b5af0124ae
#: ../../ref/class-based-views.txt:1048
msgid ""
"A view that displays a form for editing an existing object, redisplaying the "
"form with validation errors (if there are any) and saving changes to the "
"object. This uses a form automatically generated from the object's model "
"class (unless a form class is manually specified)."
msgstr ""

# 79dd3a274667406e971cd84b3d587b34
#: ../../ref/class-based-views.txt:1053
msgid ""
":class:`~django.views.generic.edit.BaseUpdateView` implements the same "
"behavior as :class:`~django.views.generic.edit.UpdateView`, but doesn't "
"include the :class:`~django.views.generic.base.TemplateResponseMixin`."
msgstr ""

# 6e4dcf52fd8d4b0aa4b78c788e10b65c
#: ../../ref/class-based-views.txt:1063
msgid "DeleteView"
msgstr ""

# 5f273f775f944d559862f7a15011bd90
#: ../../ref/class-based-views.txt:1067
msgid ""
"A view that displays a confirmation page and deletes an existing object. The "
"given object will only be deleted if the request method is ``POST``. If this "
"view is fetched via ``GET``, it will display a confirmation page that should "
"contain a form that POSTs to the same URL."
msgstr ""

# 8764b44375f44bee9f31cbbbf311f303
#: ../../ref/class-based-views.txt:1072
msgid ""
":class:`~django.views.generic.edit.BaseDeleteView` implements the same "
"behavior as :class:`~django.views.generic.edit.DeleteView`, but doesn't "
"include the :class:`~django.views.generic.base.TemplateResponseMixin`."
msgstr ""

# b4a39a2b4a5e4fd38b34b7afcfe9b946
#: ../../ref/class-based-views.txt:1078
msgid ":class:`django.views.generic.edit.DeletionMixin`"
msgstr ""

# 2561f1dc908e49699a1354843b97d8fc
# b2f6220487374cfab0c7da7d2a2523f2
#: ../../ref/class-based-views.txt:1079 ../../ref/class-based-views.txt:1334
msgid ":class:`django.views.generic.detail.BaseDetailView`"
msgstr ""

# e8457b7816dc47d0b7e400c3054f77f6
# 01b697964f274deba26e9d08fe0867b9
# 1e990af795eb4dfe8e967b7ae26c554b
# d2456c91a4d74ab98408d63eb0b41976
# d9cece969a544845b351ebfddc415c5e
# fe8e4ade60c8472e9da6f8f67bc835ab
#: ../../ref/class-based-views.txt:1081 ../../ref/class-based-views.txt:1113
#: ../../ref/class-based-views.txt:1163 ../../ref/class-based-views.txt:1210
#: ../../ref/class-based-views.txt:1245 ../../ref/class-based-views.txt:1294
msgid "**Notes**"
msgstr ""

# 0cf6aa6c6a504543a399f2373777261b
#: ../../ref/class-based-views.txt:1083
msgid ""
"The delete confirmation page displayed to a GET request uses a "
"``template_name_suffix`` of ``'_confirm_delete'``."
msgstr ""

# 56f93c2e27e845ffab0798e3894f1edc
#: ../../ref/class-based-views.txt:1087
msgid "Date-based views"
msgstr ""

# 4df1360cdfea4a2796fced7b2ec622c8
#: ../../ref/class-based-views.txt:1089
msgid ""
"Date-based generic views (in the module :mod:`django.views.generic.dates`) "
"are views for displaying drilldown pages for date-based data."
msgstr ""

# de43a2998257459c9c72b4a7bbbedf4d
#: ../../ref/class-based-views.txt:1095
msgid "ArchiveIndexView"
msgstr ""

# 13a4d6f04b474b7680287033f2831300
#: ../../ref/class-based-views.txt:1099
msgid ""
"A top-level index page showing the \"latest\" objects, by date. Objects with "
"a date in the *future* are not included unless you set ``allow_future`` to "
"``True``."
msgstr ""

# 55df90db258547eba2e8bcebc9530896
#: ../../ref/class-based-views.txt:1103
msgid ""
":class:`~django.views.generic.dates.BaseArchiveIndexView` implements the "
"same behavior as :class:`~django.views.generic.dates.ArchiveIndexView`, but "
"doesn't include the :class:`~django.views.generic.list."
"MultipleObjectTemplateResponseMixin`."
msgstr ""

# 6ad79f36b0314bea94ee987892e2a550
# 871abac97c934ec69a6e3ce919425108
# 3e44cd645a83448886ebbebf08c86829
# a61f8c3ef10e41348cb82f84fc1ee77e
# b2713a3e4b3f45a289f7e4a882886bdc
#: ../../ref/class-based-views.txt:1110 ../../ref/class-based-views.txt:1136
#: ../../ref/class-based-views.txt:1187 ../../ref/class-based-views.txt:1233
#: ../../ref/class-based-views.txt:1269
msgid ":class:`django.views.generic.dates.BaseDateListView`"
msgstr ""

# 839e29070bbc4c6a8040345d17573bd6
#: ../../ref/class-based-views.txt:1115
msgid "Uses a default ``context_object_name`` of ``latest``."
msgstr ""

# e3f7f30f87f343e38b0ae9d716a4dcb2
#: ../../ref/class-based-views.txt:1116
msgid "Uses a default ``template_name_suffix`` of ``_archive``."
msgstr ""

# 65e0c5b450f345bbb63f0791f6e67f20
#: ../../ref/class-based-views.txt:1119
msgid "YearArchiveView"
msgstr ""

# 0f45ada48b834a8f883f9516f4d64c6f
#: ../../ref/class-based-views.txt:1123
msgid ""
"A yearly archive page showing all available months in a given year. Objects "
"with a date in the *future* are not displayed unless you set "
"``allow_future`` to ``True``."
msgstr ""

# 157f79554c5849f4ab66f4fe37e91027
#: ../../ref/class-based-views.txt:1127
msgid ""
":class:`~django.views.generic.dates.BaseYearArchiveView` implements the same "
"behavior as :class:`~django.views.generic.dates.YearArchiveView`, but "
"doesn't include the :class:`~django.views.generic.list."
"MultipleObjectTemplateResponseMixin`."
msgstr ""

# e2dc4843e1a14b1fa3e2987db88645e8
# 5dd7cc638cc946c5ad624db0378bed5e
# d20305b1bde6477c93636bc8245def51
# cbc1b41233074bbfada4c5ffe4dd475e
# b0b95a6613cc43c9b278380fa1accf11
#: ../../ref/class-based-views.txt:1135 ../../ref/class-based-views.txt:1185
#: ../../ref/class-based-views.txt:1231 ../../ref/class-based-views.txt:1266
#: ../../ref/class-based-views.txt:1336
msgid ":class:`django.views.generic.dates.YearMixin`"
msgstr ""

# dc9bd95b3cca48a78dcb0924cc1abb72
#: ../../ref/class-based-views.txt:1140
msgid ""
"A boolean specifying whether to retrieve the full list of objects for this "
"year and pass those to the template. If ``True``, the list of objects will "
"be made available to the context. By default, this is ``False``."
msgstr ""

# 67fe3a7a508a48c68fc31d3bd16728a7
#: ../../ref/class-based-views.txt:1147
msgid ""
"Determine if an object list will be returned as part of the context. If "
"``False``, the ``None`` queryset will be used as the object list."
msgstr ""

# 636cc69ecbf34c8db81ee49568639b40
#: ../../ref/class-based-views.txt:1152
msgid ""
"In addition to the context provided by :class:`django.views.generic.list."
"MultipleObjectMixin` (via :class:`django.views.generic.dates."
"BaseDateListView`), the template's context will be:"
msgstr ""

# 81e3eeaf339a40459c93787d34846d1f
#: ../../ref/class-based-views.txt:1157
msgid ""
"``date_list``: A ``DateQuerySet`` object containing all months that have "
"objects available according to ``queryset``, represented as ``datetime."
"datetime`` objects, in ascending order."
msgstr ""

# 12e8d8b9dc1e46058c8c84865f9d98ab
#: ../../ref/class-based-views.txt:1161
msgid "``year``: The given year, as a four-character string."
msgstr ""

# f84aae96576b478d83dde7b3c3b63844
#: ../../ref/class-based-views.txt:1165
msgid "Uses a default ``template_name_suffix`` of ``_archive_year``."
msgstr ""

# f0a0f93447f44939b60075a5bca98e6f
#: ../../ref/class-based-views.txt:1168
msgid "MonthArchiveView"
msgstr ""

# 4b3e1ca0252e44529e2c4d42ce8a375f
#: ../../ref/class-based-views.txt:1172
msgid ""
"A monthly archive page showing all objects in a given month. Objects with a "
"date in the *future* are not displayed unless you set ``allow_future`` to "
"``True``."
msgstr ""

# e5a6076b28af419484b8a772bed9519d
#: ../../ref/class-based-views.txt:1176
msgid ""
":class:`~django.views.generic.dates.BaseMonthArchiveView` implements the "
"same behavior as :class:`~django.views.generic.dates.MonthArchiveView`, but "
"doesn't include the :class:`~django.views.generic.list."
"MultipleObjectTemplateResponseMixin`."
msgstr ""

# 55fae78ac907464d8a7c2a413e94492b
# ba91a915e13c4d35ac7e4c5ebb9f4073
# 23f8a42984b741cc965c79e82529fd98
# 7d3778e69dc54fecaa4e53f24e63ae38
#: ../../ref/class-based-views.txt:1186 ../../ref/class-based-views.txt:1232
#: ../../ref/class-based-views.txt:1267 ../../ref/class-based-views.txt:1337
msgid ":class:`django.views.generic.dates.MonthMixin`"
msgstr ""

# f8983c6b58a645388d8e6f6cfd48a1c8
# 1ac8d9497ab34599a21b1fd32170edf3
# abfb4148d5404eb38dc33d5e0585db67
#: ../../ref/class-based-views.txt:1191 ../../ref/class-based-views.txt:1237
#: ../../ref/class-based-views.txt:1273
msgid ""
"In addition to the context provided by :class:`~django.views.generic.list."
"MultipleObjectMixin` (via :class:`~django.views.generic.dates."
"BaseDateListView`), the template's context will be:"
msgstr ""

# 0f4f8de8f8474ebe8310a7ef89d249be
#: ../../ref/class-based-views.txt:1196
msgid ""
"``date_list``: A ``DateQuerySet`` object containing all days that have "
"objects available in the given month, according to ``queryset``, represented "
"as ``datetime.datetime`` objects, in ascending order."
msgstr ""

# a22a6e5b12f04959b174bd3989df5762
#: ../../ref/class-based-views.txt:1200
msgid "``month``: A ``datetime.date`` object representing the given month."
msgstr ""

# 0e6f27229e3d4898be76a533f4d82d3a
# cb5caeae111149f2a505197b6c4ba3df
#: ../../ref/class-based-views.txt:1202 ../../ref/class-based-views.txt:1286
msgid ""
"``next_month``: A ``datetime.date`` object representing the first day of the "
"next month. If the next month is in the future, this will be ``None``."
msgstr ""

# 80c3bee5009a473fb187934d0d59c598
# cf42c26de7e84f8d82b5da0acb1c09a0
#: ../../ref/class-based-views.txt:1206 ../../ref/class-based-views.txt:1290
msgid ""
"``previous_month``: A ``datetime.date`` object representing the first day of "
"the previous month. Unlike ``next_month``, this will never be ``None``."
msgstr ""

# 0b601e80c61b41eaa8968882203a2a25
#: ../../ref/class-based-views.txt:1212
msgid "Uses a default ``template_name_suffix`` of ``_archive_month``."
msgstr ""

# f965b59becc14134bd379b497f50e514
#: ../../ref/class-based-views.txt:1215
msgid "WeekArchiveView"
msgstr ""

# ec69760b354b453593ea4e8d22d48437
#: ../../ref/class-based-views.txt:1219
msgid ""
"A weekly archive page showing all objects in a given week. Objects with a "
"date in the *future* are not displayed unless you set ``allow_future`` to "
"``True``."
msgstr ""

# 1c8284e42fe84b9cab256b19f4bc7d2a
#: ../../ref/class-based-views.txt:1223
msgid ""
":class:`~django.views.generic.dates.BaseWeekArchiveView` implements the same "
"behavior as :class:`~django.views.generic.dates.WeekArchiveView`, but "
"doesn't include the :class:`~django.views.generic.list."
"MultipleObjectTemplateResponseMixin`."
msgstr ""

# afe523b6275e4e52871c08a505714543
#: ../../ref/class-based-views.txt:1242
msgid ""
"``week``: A ``datetime.date`` object representing the first day of the given "
"week."
msgstr ""

# a23f030bdee242a1b237edaad8875109
#: ../../ref/class-based-views.txt:1247
msgid "Uses a default ``template_name_suffix`` of ``_archive_week``."
msgstr ""

# 9337768b83a747f3879cc6be34ad3125
#: ../../ref/class-based-views.txt:1250
msgid "DayArchiveView"
msgstr ""

# d753e049dc0a4ae0a00ea9abf831ee59
#: ../../ref/class-based-views.txt:1254
msgid ""
"A day archive page showing all objects in a given day. Days in the future "
"throw a 404 error, regardless of whether any objects exist for future days, "
"unless you set ``allow_future`` to ``True``."
msgstr ""

# c65c63ecceb94b6a8359edb6b23228d4
#: ../../ref/class-based-views.txt:1258
msgid ""
":class:`~django.views.generic.dates.BaseDayArchiveView` implements the same "
"behavior as :class:`~django.views.generic.dates.DayArchiveView`, but doesn't "
"include the :class:`~django.views.generic.list."
"MultipleObjectTemplateResponseMixin`."
msgstr ""

# 7dcaf336b5124668bc41f2951610143f
# 18da009c86ce46efa583e93dd1c0216e
#: ../../ref/class-based-views.txt:1268 ../../ref/class-based-views.txt:1338
msgid ":class:`django.views.generic.dates.DayMixin`"
msgstr ""

# f88cf75d875d4c58bf7bc486bb7dfbbf
#: ../../ref/class-based-views.txt:1278
msgid "``day``: A ``datetime.date`` object representing the given day."
msgstr ""

# d56abe67ee114f62b3b35753301dd977
#: ../../ref/class-based-views.txt:1280
msgid ""
"``next_day``: A ``datetime.date`` object representing the next day. If the "
"next day is in the future, this will be ``None``."
msgstr ""

# 3b79bf761dd84215946f6fa75700fac4
#: ../../ref/class-based-views.txt:1283
msgid ""
"``previous_day``: A ``datetime.date`` object representing the previous day. "
"Unlike ``next_day``, this will never be ``None``."
msgstr ""

# c012019e289e4ceea7efe082fcfa4272
#: ../../ref/class-based-views.txt:1296
msgid "Uses a default ``template_name_suffix`` of ``_archive_day``."
msgstr ""

# 12dad9ac4d39473e85795ebaffe5abb6
#: ../../ref/class-based-views.txt:1299
msgid "TodayArchiveView"
msgstr ""

# 01229735dae54b9c9e8486da30b9bfee
#: ../../ref/class-based-views.txt:1303
msgid ""
"A day archive page showing all objects for *today*. This is exactly the same "
"as :class:`django.views.generic.dates.DayArchiveView`, except today's date "
"is used instead of the ``year``/``month``/``day`` arguments."
msgstr ""

# 8d82f9a5cddf493faa8f802e66fc8288
#: ../../ref/class-based-views.txt:1307
msgid ""
":class:`~django.views.generic.dates.BaseTodayArchiveView` implements the "
"same behavior as :class:`~django.views.generic.dates.TodayArchiveView`, but "
"doesn't include the :class:`~django.views.generic.list."
"MultipleObjectTemplateResponseMixin`."
msgstr ""

# 5fa7616d76344f099626ec7302b96202
#: ../../ref/class-based-views.txt:1315
msgid ":class:`django.views.generic.dates.BaseDayArchiveView`"
msgstr ""

# b690db5a70b647e09dfc703cccdbf7f5
#: ../../ref/class-based-views.txt:1318
msgid "DateDetailView"
msgstr ""

# 1c993b3e369e4648a4da82ce8d903700
#: ../../ref/class-based-views.txt:1322
msgid ""
"A page representing an individual object. If the object has a date value in "
"the future, the view will throw a 404 error by default, unless you set "
"``allow_future`` to ``True``."
msgstr ""

# 5c0ab938fd054526aa805f26d4d01f47
#: ../../ref/class-based-views.txt:1326
msgid ""
":class:`~django.views.generic.dates.BaseDateDetailView` implements the same "
"behavior as :class:`~django.views.generic.dates.DateDetailView`, but doesn't "
"include the :class:`~django.views.generic.detail."
"SingleObjectTemplateResponseMixin`."
msgstr ""

# 765df78b98114cf9b2f4af4dafcbf7d5
#: ../../ref/class-based-views.txt:1335
msgid ":class:`django.views.generic.dates.DateMixin`"
msgstr ""
