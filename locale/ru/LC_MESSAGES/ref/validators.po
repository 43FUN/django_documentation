# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2012.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-02-15 15:13\n"
"PO-Revision-Date: 2012-02-15 15:13\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# 396b324f127347e6a74e046f5441e898
#: ../../ref/validators.txt:3
msgid "Validators"
msgstr ""

# 9652dfde3978402ca4420fa7a1f16609
#: ../../ref/validators.txt:10
msgid "Writing validators"
msgstr ""

# 31c55954a27944779fd7738000c6bd9b
#: ../../ref/validators.txt:12
msgid ""
"A validator is a callable that takes a value and raises a :exc:`~django.core."
"exceptions.ValidationError` if it doesn't meet some criteria. Validators can "
"be useful for re-using validation logic between different types of fields."
msgstr ""

# 07bbb42bb42043a583f8c1922e177773
#: ../../ref/validators.txt:17
msgid "For example, here's a validator that only allows even numbers::"
msgstr ""

# b00d53d0fc714eb5a6f6c5f7c68a7e4d
#: ../../ref/validators.txt:25
msgid ""
"You can add this to a model field via the field's :attr:`~django.db.models."
"Field.validators` argument::"
msgstr ""

# c7f9a9f786c2499fa071e5e031b608d5
#: ../../ref/validators.txt:33
msgid ""
"Because values are converted to Python before validators are run, you can "
"even use the same validator with forms::"
msgstr ""

# 0568b1c959da4290b78ca49ae1279b27
#: ../../ref/validators.txt:42
msgid "How validators are run"
msgstr ""

# 98f2e457bb5f442ea6c0cae5a7ccd9b7
#: ../../ref/validators.txt:44
msgid ""
"See the :doc:`form validation </ref/forms/validation>` for more information "
"on how validators are run in forms, and :ref:`Validating objects <validating-"
"objects>` for how they're run in models. Note that validators will not be "
"run automatically when you save a model, but if you are using a :class:"
"`~django.forms.ModelForm`, it will run your validators on any fields that "
"are included in your form. See the :doc:`ModelForm documentation </topics/"
"forms/modelforms>` for information on how model validation interacts with "
"forms."
msgstr ""

# 43272589022447c4bb398f8beedada64
#: ../../ref/validators.txt:54
msgid "Built-in validators"
msgstr ""

# b278309cc981487dbbc968ee991dd9cc
#: ../../ref/validators.txt:56
msgid ""
"The :mod:`django.core.validators` module contains a collection of callable "
"validators for use with model and form fields. They're used internally but "
"are available for use with your own fields, too. They can be used in "
"addition to, or in lieu of custom ``field.clean()`` methods."
msgstr ""

# c38511c6708d45e59a1320aee8a06b10
#: ../../ref/validators.txt:62
msgid "``RegexValidator``"
msgstr ""

# 7111a95210b64201a718e403ac5569d1
#: ../../ref/validators.txt:72
msgid ""
"The regular expression pattern to search for the provided ``value``, or a "
"pre-compiled regular expression. Raises a :exc:`~django.core.exceptions."
"ValidationError` with :attr:`message` and :attr:`code` if no match is found. "
"By default, matches any string (including an empty string)."
msgstr ""

# 9e63595558244fd0b9e3373a45c93727
#: ../../ref/validators.txt:80
msgid ""
"The error message used by :exc:`~django.core.exceptions.ValidationError` if "
"validation fails. Defaults to ``\"Enter a valid value\"``."
msgstr ""

# ad6620c53005493eb76f949c90544c16
#: ../../ref/validators.txt:86
msgid ""
"The error code used by :exc:`~django.core.exceptions.ValidationError` if "
"validation fails. Defaults to ``\"invalid\"``."
msgstr ""

# 88cf7a45f58a4e48a1af307d79030252
#: ../../ref/validators.txt:90
msgid "``URLValidator``"
msgstr ""

# d3e92502cc5c49518af01090e6ad77ae
#: ../../ref/validators.txt:93
msgid ""
"A :class:`RegexValidator` that ensures a value looks like a URL and "
"optionally verifies that the URL actually exists (i.e., doesn't return a 404 "
"status code). Raises an error code of ``'invalid'`` if it doesn't look like "
"a URL, and a code of ``'invalid_link'`` if it doesn't exist."
msgstr ""

# fc2ba599a2374045867c1a974d7a139c
#: ../../ref/validators.txt:105
msgid "If set to ``True``, this validator checks that the URL actually exists."
msgstr ""

# e7cb7c4676ba413cb5ae86eea9a8198b
#: ../../ref/validators.txt:109
msgid ""
"If :attr:`verify_exists` is ``True``, Django uses this value as the \"User-"
"agent\" for the request."
msgstr ""

# 87c0782aed8540cca278c79779a94b6a
#: ../../ref/validators.txt:113
msgid "``validate_email``"
msgstr ""

# 09754d4911864e30a13ceecb53a4479b
#: ../../ref/validators.txt:116
msgid ""
"A :class:`RegexValidator` instance that ensures a value looks like an email "
"address."
msgstr ""

# ba1248ee1fe74a85a429a98bf6b08fbe
#: ../../ref/validators.txt:120
msgid "``validate_slug``"
msgstr ""

# 6e76b955f2be4b3abb67adebca1ff549
#: ../../ref/validators.txt:123
msgid ""
"A :class:`RegexValidator` instance that ensures a value consists of only "
"letters, numbers, underscores or hyphens."
msgstr ""

# 0c73389717534d6c8c9e15f3a74c3910
#: ../../ref/validators.txt:127
msgid "``validate_ipv4_address``"
msgstr ""

# 4be9f53b463a431989de474dcf2cd790
#: ../../ref/validators.txt:130
msgid ""
"A :class:`RegexValidator` instance that ensures a value looks like an IPv4 "
"address."
msgstr ""

# bcaec4fa91e246da8317aaed83448bd0
#: ../../ref/validators.txt:134
msgid "``validate_ipv6_address``"
msgstr ""

# dd8ce18fb4c145de9ff3b88c49a0c209
#: ../../ref/validators.txt:139
msgid "Uses :mod:`django.utils.ipv6` to check the validity of an IPv6 address."
msgstr ""

# 1a86a0b1df914ec5b555327896b80978
#: ../../ref/validators.txt:142
msgid "``validate_ipv46_address``"
msgstr ""

# c002872337e647d7a29fcb57c3acc35f
#: ../../ref/validators.txt:147
msgid ""
"Uses both ``validate_ipv4_address`` and ``validate_ipv6_address`` to ensure "
"a value is either a valid IPv4 or IPv6 address."
msgstr ""

# 077084b1195c41d2a32ea8a5ba6d254e
#: ../../ref/validators.txt:151
msgid "``validate_comma_separated_integer_list``"
msgstr ""

# 9e6d6f9bf88547dca245b3db94e33e72
#: ../../ref/validators.txt:154
msgid ""
"A :class:`RegexValidator` instance that ensures a value is a comma-separated "
"list of integers."
msgstr ""

# 6c5e55e4443945098196edc5465256ce
#: ../../ref/validators.txt:158
msgid "``MaxValueValidator``"
msgstr ""

# 8d596226d0044aa291fd6ea151c088c4
#: ../../ref/validators.txt:161
msgid ""
"Raises a :exc:`~django.core.exceptions.ValidationError` with a code of "
"``'max_value'`` if ``value`` is greater than ``max_value``."
msgstr ""

# 3db36e9e530f43bcb876abacba3744f4
#: ../../ref/validators.txt:165
msgid "``MinValueValidator``"
msgstr ""

# 602f25f921734bff966bdc9b015d4758
#: ../../ref/validators.txt:168
msgid ""
"Raises a :exc:`~django.core.exceptions.ValidationError` with a code of "
"``'min_value'`` if ``value`` is less than ``min_value``."
msgstr ""

# 55cad9e4b23440c38894ae644441e4f7
#: ../../ref/validators.txt:172
msgid "``MaxLengthValidator``"
msgstr ""

# f06de5e9c6834f9da017e73d2589d04b
#: ../../ref/validators.txt:175
msgid ""
"Raises a :exc:`~django.core.exceptions.ValidationError` with a code of "
"``'max_length'`` if the length of ``value`` is greater than ``max_length``."
msgstr ""

# e2d31fdb086f490f8a2e13f0145ea8d3
#: ../../ref/validators.txt:179
msgid "``MinLengthValidator``"
msgstr ""

# 9c7d9fe3e14b4e28bd226ccbb707f043
#: ../../ref/validators.txt:182
msgid ""
"Raises a :exc:`~django.core.exceptions.ValidationError` with a code of "
"``'min_length'`` if the length of ``value`` is less than ``min_length``."
msgstr ""
