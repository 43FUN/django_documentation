# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2012.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-02-27 00:21\n"
"PO-Revision-Date: 2012-02-15 15:13\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# 396b324f127347e6a74e046f5441e898
#: ../../ref/validators.txt:3
msgid "Validators"
msgstr "Валидаторы"

# 9652dfde3978402ca4420fa7a1f16609
#: ../../ref/validators.txt:9
msgid "Writing validators"
msgstr "Создание валидаторов"

# 31c55954a27944779fd7738000c6bd9b
#: ../../ref/validators.txt:11
msgid ""
"A validator is a callable that takes a value and raises a :exc:`~django.core."
"exceptions.ValidationError` if it doesn't meet some criteria. Validators can "
"be useful for re-using validation logic between different types of fields."
msgstr ""
"Валидатор — это вызываемый объект (callable), который принимает значение и "
"вызывает исключение :exc:`~django.core.exceptions.ValidationError`, если "
"значение не соответствует неким критериям. Валидаторы могут быть полезны "
"когда надо использовать одинаковую логику проверки для разных типов полей."

# 07bbb42bb42043a583f8c1922e177773
#: ../../ref/validators.txt:16
msgid "For example, here's a validator that only allows even numbers::"
msgstr ""
"Например, здесь показан валидатор, который принимает только чётные числа::"

# b00d53d0fc714eb5a6f6c5f7c68a7e4d
#: ../../ref/validators.txt:24
msgid ""
"You can add this to a model field via the field's :attr:`~django.db.models."
"Field.validators` argument::"
msgstr ""
"Вы можете добавить его к полю модели с помощью аргумента :attr:`~django.db."
"models.Field.validators`::"

# c7f9a9f786c2499fa071e5e031b608d5
#: ../../ref/validators.txt:32
msgid ""
"Because values are converted to Python before validators are run, you can "
"even use the same validator with forms::"
msgstr ""
"Так как значения преобразоваются в типы языка Python до запуска  валидатора, "
"вы можете использовать тот же валидатор и для форм::"

# 0568b1c959da4290b78ca49ae1279b27
#: ../../ref/validators.txt:41
msgid "How validators are run"
msgstr "Как валидаторы запускаются"

# 98f2e457bb5f442ea6c0cae5a7ccd9b7
#: ../../ref/validators.txt:43
msgid ""
"See the :doc:`form validation </ref/forms/validation>` for more information "
"on how validators are run in forms, and :ref:`Validating objects <validating-"
"objects>` for how they're run in models. Note that validators will not be "
"run automatically when you save a model, but if you are using a :class:"
"`~django.forms.ModelForm`, it will run your validators on any fields that "
"are included in your form. See the :doc:`ModelForm documentation </topics/"
"forms/modelforms>` for information on how model validation interacts with "
"forms."
msgstr ""
"Обратитесь к документации по :doc:`проверке форм </ref/forms/validation>` "
"для получения подробностей о работе валидаторов в формах и к документации "
"по :ref:`проверке объектов <validating-objects>`, чтобы узнать как "
"валидаторы запускаются для моделей. Следует отметить, что валидаторы не "
"запускаются автоматически в случае когда вы сохраняете модель. Но если вы "
"используете класс :class:`~django.forms.ModelForm`, то он запустит ваши "
"валидаторы для всех полей формы. Обратитесь к документации на :doc:"
"`модельные формы </topics/forms/modelforms>` для получения информации о том, "
"как валидаторы модели взаимодействуют с формами."

# 43272589022447c4bb398f8beedada64
#: ../../ref/validators.txt:53
msgid "Built-in validators"
msgstr "Встроенные валидаторы"

# b278309cc981487dbbc968ee991dd9cc
#: ../../ref/validators.txt:55
msgid ""
"The :mod:`django.core.validators` module contains a collection of callable "
"validators for use with model and form fields. They're used internally but "
"are available for use with your own fields, too. They can be used in "
"addition to, or in lieu of custom ``field.clean()`` methods."
msgstr ""
"Модуль :mod:`django.core.validators` содержит коллекцию валидаторов, которые "
"можно использовать как с моделями, так и с полями формы. Они используются "
"Django, но также доступны для применения в ваших полях. Их можно "
"использовать в дополнение к или вместо метода ``field.clean()``."

# c38511c6708d45e59a1320aee8a06b10
#: ../../ref/validators.txt:61
msgid "``RegexValidator``"
msgstr "``RegexValidator``"

# 7111a95210b64201a718e403ac5569d1
#: ../../ref/validators.txt:71
msgid ""
"The regular expression pattern to search for the provided ``value``, or a "
"pre-compiled regular expression. Raises a :exc:`~django.core.exceptions."
"ValidationError` with :attr:`message` and :attr:`code` if no match is found. "
"By default, matches any string (including an empty string)."
msgstr ""
"Шаблон регулярного выражения для поиска в предоставленном ``value`` или "
"заранее скомпилированное регулярное выражение. Вызывает исключение :exc:"
"`~django.core.exceptions.ValidationError` с атрибутами :attr:`message` и :"
"attr:`code`, если ничего не совпало. По умолчанию совпадает с любыми "
"строками, включая пустые строки."

# 9e63595558244fd0b9e3373a45c93727
#: ../../ref/validators.txt:79
msgid ""
"The error message used by :exc:`~django.core.exceptions.ValidationError` if "
"validation fails. Defaults to ``\"Enter a valid value\"``."
msgstr ""
"Сообщение об ошибке, используемое исключением :exc:`~django.core.exceptions."
"ValidationError`, если проверка не прошла. По умолчанию, ``\"Enter a valid "
"value\"``."

# ad6620c53005493eb76f949c90544c16
#: ../../ref/validators.txt:85
msgid ""
"The error code used by :exc:`~django.core.exceptions.ValidationError` if "
"validation fails. Defaults to ``\"invalid\"``."
msgstr ""
"Код ошибки, используемый исключением :exc:`~django.core.exceptions."
"ValidationError`, если проверка не прошла. По умолчанию ``\"invalid\"``."

# 88cf7a45f58a4e48a1af307d79030252
#: ../../ref/validators.txt:89
msgid "``URLValidator``"
msgstr "``URLValidator``"

# 09754d4911864e30a13ceecb53a4479b
#: ../../ref/validators.txt:92
#, fuzzy
msgid ""
"A :class:`RegexValidator` that ensures a value looks like a URL, and raises "
"an error code of ``'invalid'`` if it doesn't."
msgstr ""
"Экземпляр класса :class:`RegexValidator`, который проверяет, что значение "
"выглядит как адрес электронной почты."

# 87c0782aed8540cca278c79779a94b6a
#: ../../ref/validators.txt:96
msgid "``validate_email``"
msgstr "``validate_email``"

# 09754d4911864e30a13ceecb53a4479b
#: ../../ref/validators.txt:99
#, fuzzy
msgid ""
"An ``EmailValidator`` instance that ensures a value looks like an email "
"address."
msgstr ""
"Экземпляр класса :class:`RegexValidator`, который проверяет, что значение "
"выглядит как адрес электронной почты."

# ba1248ee1fe74a85a429a98bf6b08fbe
#: ../../ref/validators.txt:103
msgid "``validate_slug``"
msgstr "``validate_slug``"

# 6e76b955f2be4b3abb67adebca1ff549
#: ../../ref/validators.txt:106
msgid ""
"A :class:`RegexValidator` instance that ensures a value consists of only "
"letters, numbers, underscores or hyphens."
msgstr ""
"Экземпляр класса :class:`RegexValidator`, который проверяет, что значение "
"содержит только буквы, числа, символы подчёркивания или тире."

# 0c73389717534d6c8c9e15f3a74c3910
#: ../../ref/validators.txt:110
msgid "``validate_ipv4_address``"
msgstr "``validate_ipv4_address``"

# 4be9f53b463a431989de474dcf2cd790
#: ../../ref/validators.txt:113
msgid ""
"A :class:`RegexValidator` instance that ensures a value looks like an IPv4 "
"address."
msgstr ""
"Экземпляр класса :class:`RegexValidator`, который проверяет, что значение "
"выглядит как IPv4 адрес."

# bcaec4fa91e246da8317aaed83448bd0
#: ../../ref/validators.txt:117
msgid "``validate_ipv6_address``"
msgstr "``validate_ipv6_address``"

# dd8ce18fb4c145de9ff3b88c49a0c209
#: ../../ref/validators.txt:121
#, fuzzy
msgid "Uses ``django.utils.ipv6`` to check the validity of an IPv6 address."
msgstr ""
"Использует :mod:`django.utils.ipv6` для проверки соответствия значения IPv6 "
"адресу."

# 1a86a0b1df914ec5b555327896b80978
#: ../../ref/validators.txt:124
msgid "``validate_ipv46_address``"
msgstr "``validate_ipv46_address``"

# c002872337e647d7a29fcb57c3acc35f
#: ../../ref/validators.txt:128
msgid ""
"Uses both ``validate_ipv4_address`` and ``validate_ipv6_address`` to ensure "
"a value is either a valid IPv4 or IPv6 address."
msgstr ""
"Использует оба валидатора (``validate_ipv4_address`` и "
"``validate_ipv6_address``) для проверки, что значение соответствует IPv4 или "
"IPv6 адресу."

# 077084b1195c41d2a32ea8a5ba6d254e
#: ../../ref/validators.txt:132
msgid "``validate_comma_separated_integer_list``"
msgstr "``validate_comma_separated_integer_list``"

# 9e6d6f9bf88547dca245b3db94e33e72
#: ../../ref/validators.txt:135
msgid ""
"A :class:`RegexValidator` instance that ensures a value is a comma-separated "
"list of integers."
msgstr ""
"Экземпляр класса :class:`RegexValidator`, который проверяет, что значение "
"является списком целых чисел, разделённых запятыми."

# 6c5e55e4443945098196edc5465256ce
#: ../../ref/validators.txt:139
msgid "``MaxValueValidator``"
msgstr "``MaxValueValidator``"

# 8d596226d0044aa291fd6ea151c088c4
#: ../../ref/validators.txt:142
msgid ""
"Raises a :exc:`~django.core.exceptions.ValidationError` with a code of "
"``'max_value'`` if ``value`` is greater than ``max_value``."
msgstr ""
"Вызывает исключение :exc:`~django.core.exceptions.ValidationError` с кодом "
"``'max_value'``, если ``value`` больше, чем ``max_value``."

# 3db36e9e530f43bcb876abacba3744f4
#: ../../ref/validators.txt:146
msgid "``MinValueValidator``"
msgstr "``MinValueValidator``"

# 602f25f921734bff966bdc9b015d4758
#: ../../ref/validators.txt:149
msgid ""
"Raises a :exc:`~django.core.exceptions.ValidationError` with a code of "
"``'min_value'`` if ``value`` is less than ``min_value``."
msgstr ""
"Вызывает исключение :exc:`~django.core.exceptions.ValidationError` с кодом "
"``'min_value'``, если ``value`` меньше, чем ``min_value``."

# 55cad9e4b23440c38894ae644441e4f7
#: ../../ref/validators.txt:153
msgid "``MaxLengthValidator``"
msgstr "``MaxLengthValidator``"

# f06de5e9c6834f9da017e73d2589d04b
#: ../../ref/validators.txt:156
msgid ""
"Raises a :exc:`~django.core.exceptions.ValidationError` with a code of "
"``'max_length'`` if the length of ``value`` is greater than ``max_length``."
msgstr ""
"Вызывает исключение :exc:`~django.core.exceptions.ValidationError` с кодом "
"``'max_length'``, если длина ``value`` больше, чем ``max_length``."

# e2d31fdb086f490f8a2e13f0145ea8d3
#: ../../ref/validators.txt:160
msgid "``MinLengthValidator``"
msgstr "``MinLengthValidator``"

# 9c7d9fe3e14b4e28bd226ccbb707f043
#: ../../ref/validators.txt:163
msgid ""
"Raises a :exc:`~django.core.exceptions.ValidationError` with a code of "
"``'min_length'`` if the length of ``value`` is less than ``min_length``."
msgstr ""
"Вызывает исключение :exc:`~django.core.exceptions.ValidationError` с кодом "
"``'min_length'``, если длина ``value`` меньше, чем ``min_length``."

# d3e92502cc5c49518af01090e6ad77ae
#~ msgid ""
#~ "A :class:`RegexValidator` that ensures a value looks like a URL and "
#~ "optionally verifies that the URL actually exists (i.e., doesn't return a "
#~ "404 status code). Raises an error code of ``'invalid'`` if it doesn't "
#~ "look like a URL, and a code of ``'invalid_link'`` if it doesn't exist."
#~ msgstr ""
#~ "Класс :class:`RegexValidator`, который проверяет, что значение выглядит "
#~ "как URL, и обеспечивает необязательную проверку существования этого URL "
#~ "(т.е., в ответ не приходит отклик со статусом 404). Вызывает исключение с "
#~ "кодом ``'invalid'``, если значение не похоже на URL, или с кодом "
#~ "``'invalid_link'``, если запрос получил статус 404."

# fc2ba599a2374045867c1a974d7a139c
#~ msgid ""
#~ "If set to ``True``, this validator checks that the URL actually exists."
#~ msgstr ""
#~ "Если значение равно ``True``, то валидатор проверяет существование URL."

# e7cb7c4676ba413cb5ae86eea9a8198b
#~ msgid ""
#~ "If :attr:`verify_exists` is ``True``, Django uses this value as the "
#~ "\"User-agent\" for the request."
#~ msgstr ""
#~ "Если атрибут :attr:`verify_exists` имеет значение ``True``, то Django "
#~ "использует это значение в качестве значения поля \"User-agent\" при "
#~ "выполнении запроса."
