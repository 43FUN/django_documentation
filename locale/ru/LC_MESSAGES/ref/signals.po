# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2012.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-11-17 10:48+0200\n"
"PO-Revision-Date: 2012-02-15 15:13\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# 766dc812213f4553b69927ba80a9b518
#: ../../ref/signals.txt:3
msgid "Signals"
msgstr ""

# c9a356d550654efc8ad4a337b557ee04
#: ../../ref/signals.txt:5
msgid "A list of all the signals that Django sends."
msgstr ""

# 1cdbf9969e534068a58aa06a9b5150b8
#: ../../ref/signals.txt:9
msgid ""
"See the documentation on the :doc:`signal dispatcher </topics/signals>` for "
"information regarding how to register for and receive signals."
msgstr ""

# 68df36876f2641a2b3c90f7306d1a399
#: ../../ref/signals.txt:12
msgid ""
"The :doc:`authentication framework </topics/auth/index>` sends :ref:`signals "
"when a user is logged in / out <topics-auth-signals>`."
msgstr ""

# c40cc7fd020c472091e94c3875099299
#: ../../ref/signals.txt:16
msgid "Model signals"
msgstr ""

# 8c0b288191cf47b690c03afccb94551b
#: ../../ref/signals.txt:21
msgid ""
"The :mod:`django.db.models.signals` module defines a set of signals sent by "
"the model system."
msgstr ""

# ecedbcf748fb4a22ba5b0d495be4d765
#: ../../ref/signals.txt:26
msgid ""
"Many of these signals are sent by various model methods like ``__init__()`` "
"or :meth:`~django.db.models.Model.save` that you can override in your own "
"code."
msgstr ""

# f8c1112aabce400e9ac17fa44dbebc5b
#: ../../ref/signals.txt:30
msgid ""
"If you override these methods on your model, you must call the parent class' "
"methods for this signals to be sent."
msgstr ""

# 050d2e9d36d64f33bf8175e24aa8193f
#: ../../ref/signals.txt:33
msgid ""
"Note also that Django stores signal handlers as weak references by default, "
"so if your handler is a local function, it may be garbage collected.  To "
"prevent this, pass ``weak=False`` when you call the signal's :meth:`~django."
"dispatch.Signal.connect`."
msgstr ""

# 3d6a6c76b9fc4d2cb602ce5fa8a572e1
#: ../../ref/signals.txt:39
msgid ""
"Model signals ``sender`` model can be lazily referenced when connecting a "
"receiver by specifying its full application label. For example, an "
"``Answer`` model defined in the ``polls`` application could be referenced as "
"``'polls.Answer'``. This sort of reference can be quite handy when dealing "
"with circular import dependencies and swappable models."
msgstr ""

# 2a9902ef38454c49baab437db1f253c4
#: ../../ref/signals.txt:46
msgid "pre_init"
msgstr ""

# 6f48abc1e814471c9cf9a9af9dabed3e
#: ../../ref/signals.txt:53
msgid ""
"Whenever you instantiate a Django model, this signal is sent at the "
"beginning of the model's ``__init__()`` method."
msgstr ""

# 43d8372ab2a742e5a4a16a3b25b00773
# 96339037119e4a1796726dd657c3659d
# ce0210c05bf446fa8c0afc421ff94480
# fdb048f64d7f4f3ba3ae2de4c294d0c9
# 4b8a3b8725014aeea52a9308c655311a
# 072e0b9549ab4f2ebccf0be21433b0d1
# d2da4722dbeb4d88be774897d174fbc6
# 0f510eb0b0c249e6b54e3ac0273c0a47
# 1531035299b148e3a4a30148636742d9
# e25e83677d7e45ce871f91dd12fbae72
# b8d289bd36944c49a0f377cb4f68502a
# 3231bc598f234c4397999fbf9e4dfd18
# d43e3d83b9164feca95589344dd6292e
# d510ca06d2284827bae4ceb79351013d
#: ../../ref/signals.txt:56 ../../ref/signals.txt:92 ../../ref/signals.txt:109
#: ../../ref/signals.txt:139 ../../ref/signals.txt:172
#: ../../ref/signals.txt:193 ../../ref/signals.txt:219
#: ../../ref/signals.txt:381 ../../ref/signals.txt:422
#: ../../ref/signals.txt:491 ../../ref/signals.txt:519
#: ../../ref/signals.txt:532 ../../ref/signals.txt:569
#: ../../ref/signals.txt:593 ../../ref/signals.txt:624
msgid "Arguments sent with this signal:"
msgstr ""

# a3770635d9f243d5a28736485f059344
# 5d85ac59dc4c4cfa89250900ae7db105
# 6019662c347f4617b6d4bb497a70f319
#: ../../ref/signals.txt:59 ../../ref/signals.txt:76 ../../ref/signals.txt:95
#: ../../ref/signals.txt:112 ../../ref/signals.txt:142
#: ../../ref/signals.txt:175 ../../ref/signals.txt:196
#: ../../ref/signals.txt:225 ../../ref/signals.txt:300
#: ../../ref/signals.txt:327 ../../ref/signals.txt:365
#: ../../ref/signals.txt:385 ../../ref/signals.txt:426
#: ../../ref/signals.txt:494 ../../ref/signals.txt:522
#: ../../ref/signals.txt:535 ../../ref/signals.txt:572
#: ../../ref/signals.txt:596 ../../ref/signals.txt:629
msgid "``sender``"
msgstr ""

# c4c82fa14eeb44d8947b323b0e89ec68
#: ../../ref/signals.txt:59
msgid "The model class that just had an instance created."
msgstr ""

# e7e42eb003e6467d8a3f684e62648fc4
#: ../../ref/signals.txt:62 ../../ref/signals.txt:78
msgid "``args``"
msgstr ""

# 94bec71c0ed94cb7b1a1a95eed6335d8
#: ../../ref/signals.txt:62
msgid "A list of positional arguments passed to ``__init__()``:"
msgstr ""

# cc1071febf094ad9900543cda209cbde
#: ../../ref/signals.txt:65 ../../ref/signals.txt:81
msgid "``kwargs``"
msgstr ""

# 045e386f6a6d43b49ce3bb70653e6c04
#: ../../ref/signals.txt:65
msgid "A dictionary of keyword arguments passed to ``__init__()``:"
msgstr ""

# aa4c184ee6eb4219928258fd63d6f90a
#: ../../ref/signals.txt:67
msgid "For example, the :doc:`tutorial </intro/tutorial01>` has this line::"
msgstr ""

# 84e72369d6c9490d8b03876e638648c1
#: ../../ref/signals.txt:71
msgid "The arguments sent to a :data:`pre_init` handler would be:"
msgstr ""

# d79b5d7a2fe248098693e1a639c04460
# 670c0f1cc0394a5eae9c16382991650e
# 2edd58127511409199f867d47b8cda5c
#: ../../ref/signals.txt:74 ../../ref/signals.txt:298
#: ../../ref/signals.txt:325
msgid "Argument"
msgstr ""

# cfe6fb6e7f2e4f2683da1c5439e2deff
# befd645e87e445daa5d16fdc72d9c050
# 1d9bf5afbc534c63ad2b4bd76bdbb61b
#: ../../ref/signals.txt:74 ../../ref/signals.txt:298
#: ../../ref/signals.txt:325
msgid "Value"
msgstr ""

# df579fc4dd4d48d9a0072b2cac006f13
#: ../../ref/signals.txt:76
msgid "``Poll`` (the class itself)"
msgstr ""

# 1e7d8078f6ae4e2aa215565b4ce045bc
#: ../../ref/signals.txt:78
msgid ""
"``[]`` (an empty list because there were no positional arguments passed to "
"``__init__()``.)"
msgstr ""

# d7815dde9b234aa6ad925919ad46285d
#: ../../ref/signals.txt:81
msgid "``{'question': \"What's up?\", 'pub_date': datetime.now()}``"
msgstr ""

# 95ce03e9373341eca7d82642db493681
#: ../../ref/signals.txt:85
msgid "post_init"
msgstr ""

# fdfb0a5f2ed647fabe749e5661a750e2
#: ../../ref/signals.txt:90
msgid ""
"Like pre_init, but this one is sent when the ``__init__()`` method finishes."
msgstr ""

# 89d442f929ad484b927d721db0b11d83
#: ../../ref/signals.txt:95
msgid "As above: the model class that just had an instance created."
msgstr ""

# ed34f1cb2b0242bfa8ee42b37f444079
# 8d3c2b6602274c5c978ad582713c3e18
#: ../../ref/signals.txt:98 ../../ref/signals.txt:115
#: ../../ref/signals.txt:145 ../../ref/signals.txt:178
#: ../../ref/signals.txt:202 ../../ref/signals.txt:230
#: ../../ref/signals.txt:302 ../../ref/signals.txt:329
msgid "``instance``"
msgstr ""

# 48e0f04dc509442f9eaedfd44c89dad7
#: ../../ref/signals.txt:98
msgid "The actual instance of the model that's just been created."
msgstr ""

# c5c68cd8430f41799586ea6f5295dd4f
#: ../../ref/signals.txt:101
msgid "pre_save"
msgstr ""

# 212c5c9b7d1441dba8d6195c4fb2f6ac
#: ../../ref/signals.txt:106
msgid ""
"This is sent at the beginning of a model's :meth:`~django.db.models.Model."
"save` method."
msgstr ""

# 5c8584ce1f7849d1b7c772289184be9f
# 8600beef3e424e079010da4243b48ecc
# 1750cc060d13409f8cfef0255ef9d387
# ab4219a0d7944652bc23dc20e128acbb
#: ../../ref/signals.txt:112 ../../ref/signals.txt:142
#: ../../ref/signals.txt:175 ../../ref/signals.txt:196
msgid "The model class."
msgstr ""

# c37cfdefd5cf4cee9806a84d0a05f445
# 261894ca1c8243ec996aa3c75fb4547b
#: ../../ref/signals.txt:115 ../../ref/signals.txt:145
msgid "The actual instance being saved."
msgstr ""

# 3056ff338b324fbf9967583b8364ffc9
# 5d442801dea74eda89f34fa0a16ab7b0
#: ../../ref/signals.txt:121 ../../ref/signals.txt:154
msgid "``raw``"
msgstr ""

# 1d3da69f585b49a7a016b9673e3ba2e4
# 9c71bd03985840e4944eba6603538a43
#: ../../ref/signals.txt:118 ../../ref/signals.txt:151
msgid ""
"A boolean; ``True`` if the model is saved exactly as presented (i.e. when "
"loading a fixture). One should not query/modify other records in the "
"database as the database might not be in a consistent state yet."
msgstr ""

# e58ee8366c664ff5895552cd657f0ac4
# 8585e40f5e55461daf01a1642370d4be
#: ../../ref/signals.txt:124 ../../ref/signals.txt:157
#: ../../ref/signals.txt:181 ../../ref/signals.txt:205
#: ../../ref/signals.txt:265 ../../ref/signals.txt:315
#: ../../ref/signals.txt:343 ../../ref/signals.txt:406
#: ../../ref/signals.txt:448
msgid "``using``"
msgstr ""

# 3d6a756b35ef4b139e3a216097e4f1da
# 15aee2ceee0e487b8a3405f1541c8842
# f011c2e63ae54e2faed3b1f08b1eb26c
# 381e15d733ed4bda80bde6e1948ce904
# 7b87a71baa7640918e4e4d54df347d65
#: ../../ref/signals.txt:124 ../../ref/signals.txt:157
#: ../../ref/signals.txt:181 ../../ref/signals.txt:205
#: ../../ref/signals.txt:265
msgid "The database alias being used."
msgstr ""

# 477b987d6e554fe2bc17ebd5e7e10a50
# 2600290c0beb47e2ae2c2c6aa94d05a0
#: ../../ref/signals.txt:128 ../../ref/signals.txt:161
msgid "``update_fields``"
msgstr ""

# 79b2c0528a5647a085311d68084c2886
# e64bba791829482bbf9ec8bc51c07763
#: ../../ref/signals.txt:127 ../../ref/signals.txt:160
msgid ""
"The set of fields to update explicitly specified in the ``save()`` method. "
"``None`` if this argument was not used in the ``save()`` call."
msgstr ""

# 3f1466fa8eed471fb4d2a1a4fcf7babb
#: ../../ref/signals.txt:131
msgid "post_save"
msgstr ""

# 499cbf8a90f5484e88a84d3832e2afc5
#: ../../ref/signals.txt:136
msgid ""
"Like :data:`pre_save`, but sent at the end of the :meth:`~django.db.models."
"Model.save` method."
msgstr ""

# 3a041b056b484ac1bef712d2ada6e144
#: ../../ref/signals.txt:148
msgid "``created``"
msgstr ""

# 1b0ff9cfae194eea81e129fce3f7a50d
#: ../../ref/signals.txt:148
msgid "A boolean; ``True`` if a new record was created."
msgstr ""

# 1626bfb1ef9b4d8280f4fa1ea01ac087
#: ../../ref/signals.txt:164
msgid "pre_delete"
msgstr ""

# a929de0520c2435b8d8cb9c51c8da591
#: ../../ref/signals.txt:169
msgid ""
"Sent at the beginning of a model's :meth:`~django.db.models.Model.delete` "
"method and a queryset's :meth:`~django.db.models.query.QuerySet.delete` "
"method."
msgstr ""

# 2c3ac420774a43d4bff65d6feda9cb9e
# 8b73e6d0c5d845f68c3a89f28a17a910
#: ../../ref/signals.txt:178 ../../ref/signals.txt:199
msgid "The actual instance being deleted."
msgstr ""

# 10104ddaff9a47dd8a466f2f61a951ba
#: ../../ref/signals.txt:184
msgid "post_delete"
msgstr ""

# 4ecfa5bd63504eb49ab5dde8e83caef8
#: ../../ref/signals.txt:189
msgid ""
"Like :data:`pre_delete`, but sent at the end of a model's :meth:`~django.db."
"models.Model.delete` method and a queryset's :meth:`~django.db.models.query."
"QuerySet.delete` method."
msgstr ""

# 5f413627b3124668807f46e78d465751
#: ../../ref/signals.txt:201
msgid ""
"Note that the object will no longer be in the database, so be very careful "
"what you do with this instance."
msgstr ""

# e9ac3e49d523455382a2eb3d4a3b79da
#: ../../ref/signals.txt:208
msgid "m2m_changed"
msgstr ""

# 611ef8704cf6413badf9f39371c7c0d6
#: ../../ref/signals.txt:213
msgid ""
"Sent when a :class:`~django.db.models.ManyToManyField` is changed on a model "
"instance. Strictly speaking, this is not a model signal since it is sent by "
"the :class:`~django.db.models.ManyToManyField`, but since it complements "
"the :data:`pre_save`/:data:`post_save` and :data:`pre_delete`/:data:"
"`post_delete` when it comes to tracking changes to models, it is included "
"here."
msgstr ""

# 28e5c195f7dc477381895d09fe83a1d0
#: ../../ref/signals.txt:222
msgid ""
"The intermediate model class describing the :class:`~django.db.models."
"ManyToManyField`. This class is automatically created when a many-to-many "
"field is defined; you can access it using the ``through`` attribute on the "
"many-to-many field."
msgstr ""

# 5d15be79c88945ddad03f2c260f83532
#: ../../ref/signals.txt:228
msgid ""
"The instance whose many-to-many relation is updated. This can be an instance "
"of the ``sender``, or of the class the :class:`~django.db.models."
"ManyToManyField` is related to."
msgstr ""

# 311a8675a367416192e0884f954db9f3
# e2e78023ae3d4c9fa5e2bc6de301aea8
#: ../../ref/signals.txt:247 ../../ref/signals.txt:304
#: ../../ref/signals.txt:331
msgid "``action``"
msgstr ""

# f623b7a177d946998a7efb3f3f4baf99
#: ../../ref/signals.txt:233
msgid ""
"A string indicating the type of update that is done on the relation. This "
"can be one of the following:"
msgstr ""

# dcc5c474bb2f42bb94c4544feed4b42b
#: ../../ref/signals.txt:236
msgid "``\"pre_add\"``"
msgstr ""

# 2e3d321598e14c5086fca62ffc4ef846
#: ../../ref/signals.txt:237
msgid "Sent *before* one or more objects are added to the relation."
msgstr ""

# 86289bae48ad4a9ead83188b0b5e7624
#: ../../ref/signals.txt:238
msgid "``\"post_add\"``"
msgstr ""

# 4394d4f9833b4897ac73d1117a120431
#: ../../ref/signals.txt:239
msgid "Sent *after* one or more objects are added to the relation."
msgstr ""

# 368181ab07bb474692591492f1bc79ba
#: ../../ref/signals.txt:240
msgid "``\"pre_remove\"``"
msgstr ""

# 536e934f7ed649a38d7e3afc02708e06
#: ../../ref/signals.txt:241
msgid "Sent *before* one or more objects are removed from the relation."
msgstr ""

# 3ff903e955064fe3a858847c86045422
#: ../../ref/signals.txt:242
msgid "``\"post_remove\"``"
msgstr ""

# f0a453a0d0464b5f982601fbd9edbd02
#: ../../ref/signals.txt:243
msgid "Sent *after* one or more objects are removed from the relation."
msgstr ""

# ec719add8b2741418bb28bfa1afd8c02
#: ../../ref/signals.txt:244
msgid "``\"pre_clear\"``"
msgstr ""

# 05a66c18c4d541c591327b575b6a84e9
#: ../../ref/signals.txt:245
msgid "Sent *before* the relation is cleared."
msgstr ""

# 4617e9ef122a4ff59891e3b0f4ca0ae5
#: ../../ref/signals.txt:247
msgid "``\"post_clear\"``"
msgstr ""

# 16cb09c338fd43e3be60ee68920e4476
#: ../../ref/signals.txt:247
msgid "Sent *after* the relation is cleared."
msgstr ""

# 3d9ccf31e7994642a60be4164c4f282b
# 8fdf5745c28e404b98e3d2b5a0a47bcc
#: ../../ref/signals.txt:251 ../../ref/signals.txt:306
#: ../../ref/signals.txt:333
msgid "``reverse``"
msgstr ""

# 84bd75c93ac24c608475d686cbdff5db
#: ../../ref/signals.txt:250
msgid ""
"Indicates which side of the relation is updated (i.e., if it is the forward "
"or reverse relation that is being modified)."
msgstr ""

# aadd22127d8441bbbd333adfa632c81d
# 28b347b666bf4c8484b695f1c2f905f3
#: ../../ref/signals.txt:255 ../../ref/signals.txt:310
#: ../../ref/signals.txt:337
msgid "``model``"
msgstr ""

# 3600e914133042a797894a4375f1a419
#: ../../ref/signals.txt:254
msgid ""
"The class of the objects that are added to, removed from or cleared from the "
"relation."
msgstr ""

# 67353e61736c4d748817c5be7cfe36ca
# d2e10aba8aa241c9a0f2076857336a14
#: ../../ref/signals.txt:262 ../../ref/signals.txt:313
#: ../../ref/signals.txt:340
msgid "``pk_set``"
msgstr ""

# 29420ddc240e49b9ab8036172d458a3b
#: ../../ref/signals.txt:258
msgid ""
"For the ``pre_add``, ``post_add``, ``pre_remove`` and ``post_remove`` "
"actions, this is a set of primary key values that have been added to or "
"removed from the relation."
msgstr ""

# 058214d2cc7540a69ee488597c783be8
#: ../../ref/signals.txt:262
msgid "For the ``pre_clear`` and ``post_clear`` actions, this is ``None``."
msgstr ""

# 8ce6f2255731423b90abe3e271aaec76
#: ../../ref/signals.txt:267
msgid ""
"For example, if a ``Pizza`` can have multiple ``Topping`` objects, modeled "
"like this::"
msgstr ""

# f40cc6e9cb7e4533be7452ceee1a0a53
#: ../../ref/signals.txt:278
msgid "If we connected a handler like this::"
msgstr ""

# e9353c4552a741f0aec5314519a3b4a4
#: ../../ref/signals.txt:288
msgid "and then did something like this::"
msgstr ""

# 5d1fab9fbf624e6ba376bae411b7d637
#: ../../ref/signals.txt:294
msgid ""
"the arguments sent to a :data:`m2m_changed` handler (``toppings_changed`` in "
"the example above) would be:"
msgstr ""

# 118b0666743e43b4913c632088a3a2c7
# a5447f7a65e64841904d2169e47cbd0f
#: ../../ref/signals.txt:300 ../../ref/signals.txt:327
msgid "``Pizza.toppings.through`` (the intermediate m2m class)"
msgstr ""

# 05643b683d844cb7ae3d9975450214e9
#: ../../ref/signals.txt:302
msgid "``p`` (the ``Pizza`` instance being modified)"
msgstr ""

# 11cc567b3ed74608a2b004d8d4b7449e
#: ../../ref/signals.txt:304
msgid "``\"pre_add\"`` (followed by a separate signal with ``\"post_add\"``)"
msgstr ""

# 46a0dda1b2d1415cb64f86b3479bfb17
#: ../../ref/signals.txt:306
msgid ""
"``False`` (``Pizza`` contains the :class:`~django.db.models."
"ManyToManyField`, so this call modifies the forward relation)"
msgstr ""

# 9df208f53e5a4966b74c7dc9039fe8f9
#: ../../ref/signals.txt:310
msgid "``Topping`` (the class of the objects added to the ``Pizza``)"
msgstr ""

#: ../../ref/signals.txt:313
msgid "``{t.id}`` (since only ``Topping t`` was added to the relation)"
msgstr ""

# 65198cf578b443269c301add2f74cea2
# 5f372a88c7f5489495fbcf9d1cb0eecb
#: ../../ref/signals.txt:315 ../../ref/signals.txt:343
msgid "``\"default\"`` (since the default router sends writes here)"
msgstr ""

# ce1d429b3a0443b2901313e726035b25
#: ../../ref/signals.txt:318
msgid "And if we would then do something like this::"
msgstr ""

# d5a90ff59d4b4db8940649202c7148d7
# 321207210a10485b963a5d6af921d9a2
#: ../../ref/signals.txt:322
msgid "the arguments sent to a :data:`m2m_changed` handler would be:"
msgstr ""

# b67ebec03f224aa2a1759ef522098bdb
#: ../../ref/signals.txt:329
msgid "``t`` (the ``Topping`` instance being modified)"
msgstr ""

# 12d07ab86f0746ea910c48dd3c0c8bc5
#: ../../ref/signals.txt:331
msgid ""
"``\"pre_remove\"`` (followed by a separate signal with ``\"post_remove\"``)"
msgstr ""

# 1494c6f10ac34b739f1c17564e9ce3aa
#: ../../ref/signals.txt:333
msgid ""
"``True`` (``Pizza`` contains the :class:`~django.db.models.ManyToManyField`, "
"so this call modifies the reverse relation)"
msgstr ""

# 86b95ee44b1043de8d30dc3286d3c42b
#: ../../ref/signals.txt:337
msgid "``Pizza`` (the class of the objects removed from the ``Topping``)"
msgstr ""

#: ../../ref/signals.txt:340
msgid "``{p.id}`` (since only ``Pizza p`` was removed from the relation)"
msgstr ""

# 54702ad86d6c4e92b38beee0eeb4708d
#: ../../ref/signals.txt:347
msgid "class_prepared"
msgstr ""

# e0689dafec4b412ca7e3dc8c3b2bc01d
#: ../../ref/signals.txt:352
msgid ""
"Sent whenever a model class has been \"prepared\" -- that is, once model has "
"been defined and registered with Django's model system. Django uses this "
"signal internally; it's not generally used in third-party applications."
msgstr ""

# 37dddcc19e80498cb44013e877b3f929
#: ../../ref/signals.txt:356
msgid ""
"Since this signal is sent during the app registry population process, and :"
"meth:`AppConfig.ready() <django.apps.AppConfig.ready>` runs after the app "
"registry is fully populated, receivers cannot be connected in that method. "
"One possibility is to connect them ``AppConfig.__init__()`` instead, taking "
"care not to import models or trigger calls to the app registry."
msgstr ""

# e8d5edb44c0643fe89c0805276b86bbb
#: ../../ref/signals.txt:362
msgid "Arguments that are sent with this signal:"
msgstr ""

# b47302eee0e443b9b23e1f84e11c4d78
#: ../../ref/signals.txt:365
msgid "The model class which was just prepared."
msgstr ""

# be4a65d4649542c2a9d0752238eb3a7f
#: ../../ref/signals.txt:368
msgid "Management signals"
msgstr ""

# c283cebe4c784d7db73dc3a8be6be9a1
#: ../../ref/signals.txt:370
msgid "Signals sent by :doc:`django-admin </ref/django-admin>`."
msgstr ""

# 1d2266a09d284e9fb8b7d14ae6b3c2cf
#: ../../ref/signals.txt:373
msgid "pre_migrate"
msgstr ""

# 6b29cb2642df4618b145183091c4f6d7
#: ../../ref/signals.txt:378
msgid ""
"Sent by the :djadmin:`migrate` command before it starts to install an "
"application. It's not emitted for applications that lack a ``models`` module."
msgstr ""

# 6ac73fb33da74238940715d3bd4d5423
#: ../../ref/signals.txt:384
msgid ""
"An :class:`~django.apps.AppConfig` instance for the application about to be "
"migrated/synced."
msgstr ""

# 925e599761b349a4b58d5c4a461d3e87
# 38479f8a9960465f9226a181747cfa68
#: ../../ref/signals.txt:388 ../../ref/signals.txt:429
msgid "``app_config``"
msgstr ""

# 10d4a4ac39a34340bb2e545a75382771
#: ../../ref/signals.txt:388 ../../ref/signals.txt:429
msgid "Same as ``sender``."
msgstr ""

# 69619ee5aae7416792144f14a79baac8
#: ../../ref/signals.txt:395 ../../ref/signals.txt:436
msgid "``verbosity``"
msgstr ""

# cdbdb019718b47aa8cde3013f5f575e5
#: ../../ref/signals.txt:391 ../../ref/signals.txt:432
msgid ""
"Indicates how much information manage.py is printing on screen. See the :"
"djadminopt:`--verbosity` flag for details."
msgstr ""

# 0d8152ff9ff643969c1c73897f4d7b36
#: ../../ref/signals.txt:394
msgid ""
"Functions which listen for :data:`pre_migrate` should adjust what they "
"output to the screen based on the value of this argument."
msgstr ""

# 30073a75990a4711b17ae34cbd209417
#: ../../ref/signals.txt:403 ../../ref/signals.txt:444
msgid "``interactive``"
msgstr ""

# 98db55ce30234f70bb4e44f21e787a88
#: ../../ref/signals.txt:398 ../../ref/signals.txt:439
msgid ""
"If ``interactive`` is ``True``, it's safe to prompt the user to input things "
"on the command line. If ``interactive`` is ``False``, functions which listen "
"for this signal should not try to prompt for anything."
msgstr ""

# bcb03b911e1b40f39115502b9ff90cdd
#: ../../ref/signals.txt:402 ../../ref/signals.txt:443
msgid ""
"For example, the :mod:`django.contrib.auth` app only prompts to create a "
"superuser when ``interactive`` is ``True``."
msgstr ""

# 0da5990d5f3b44f9a36646f42b1e1bc3
#: ../../ref/signals.txt:406
msgid "The alias of database on which a command will operate."
msgstr ""

# f4ab72b7ca04420e998d495921f60619
#: ../../ref/signals.txt:409
msgid "post_migrate"
msgstr ""

# bfa31d52588d47d4aebd48c8d1b02657
#: ../../ref/signals.txt:414
msgid ""
"Sent by the :djadmin:`migrate` command after it installs an application, and "
"the :djadmin:`flush` command. It's not emitted for applications that lack a "
"``models`` module."
msgstr ""

# 46d9f2eb4ee64c00a3387d0d50000784
#: ../../ref/signals.txt:418
msgid ""
"It is important that handlers of this signal perform idempotent changes (e."
"g. no database alterations) as this may cause the :djadmin:`flush` "
"management command to fail if it also ran during the :djadmin:`migrate` "
"command."
msgstr ""

# c12d0560ff65456088d4059e95bc5df0
#: ../../ref/signals.txt:425
msgid ""
"An :class:`~django.apps.AppConfig` instance for the application that was "
"just installed."
msgstr ""

# a6a8814049c540e28618c3ec4fd93246
#: ../../ref/signals.txt:435
msgid ""
"Functions which listen for :data:`post_migrate` should adjust what they "
"output to the screen based on the value of this argument."
msgstr ""

# d07d35234fa44dbe954ee6e09286eb42
#: ../../ref/signals.txt:447
msgid ""
"The database alias used for synchronization. Defaults to the ``default`` "
"database."
msgstr ""

# 54320a4186004ce1a9aa02878b8aef56
#: ../../ref/signals.txt:450
msgid ""
"For example, you could register a callback in an :class:`~django.apps."
"AppConfig` like this::"
msgstr ""

#: ../../ref/signals.txt:468
msgid ""
"If you provide an :class:`~django.apps.AppConfig` instance as the sender "
"argument, please ensure that the signal is registered in :meth:`~django.apps."
"AppConfig.ready`. ``AppConfig``\\s are recreated for tests that run with a "
"modified set of :setting:`INSTALLED_APPS` (such as when settings are "
"overridden) and such signals should be connected for each new ``AppConfig`` "
"instance."
msgstr ""

# 6c50dd43ce964a0bacb0a908d70d5559
#: ../../ref/signals.txt:476
msgid "Request/response signals"
msgstr ""

# 8ed9c7c8c2c14fb59fad0e10947348a4
#: ../../ref/signals.txt:481
msgid "Signals sent by the core framework when processing a request."
msgstr ""

# 38389f2a455f4ea5a0b2d1c67de50781
#: ../../ref/signals.txt:484
msgid "request_started"
msgstr ""

# 939d5849d10f43b59652abe189c50ded
#: ../../ref/signals.txt:489
msgid "Sent when Django begins processing an HTTP request."
msgstr ""

# 9c39faabe6124297b4770fdbe33dc344
#: ../../ref/signals.txt:494
msgid ""
"The handler class -- e.g. ``django.core.handlers.wsgi.WsgiHandler`` -- that "
"handled the request."
msgstr ""

#: ../../ref/signals.txt:497
msgid "``environ``"
msgstr ""

#: ../../ref/signals.txt:497
msgid "The ``environ`` dictionary provided to the request."
msgstr ""

#: ../../ref/signals.txt:501
msgid "The ``environ`` argument was added."
msgstr ""

# 9161d5c6718145ac99d915eee53659f7
#: ../../ref/signals.txt:504
msgid "request_finished"
msgstr ""

# 70e5e37f1ac84f4198515f60e7d80554
#: ../../ref/signals.txt:509
msgid "Sent when Django finishes delivering an HTTP response to the client."
msgstr ""

# 3b65427a2af04e7d8b4ca1c5930f33c9
#: ../../ref/signals.txt:513
msgid ""
"Some WSGI servers and middleware do not always call ``close`` on the "
"response object after handling a request, most notably uWSGI prior to 1.2.6 "
"and Sentry's error reporting middleware up to 2.0.7. In those cases this "
"signal isn't sent at all. This can result in idle connections to database "
"and memcache servers."
msgstr ""

# 458a2b85523b45018218f3e18d7f0b73
# 1a8eebbe3b5b45c292bd624aefc387d1
#: ../../ref/signals.txt:522 ../../ref/signals.txt:535
msgid "The handler class, as above."
msgstr ""

# ec3e4c0a9642486ab43b7abb7fa9d10d
#: ../../ref/signals.txt:525
msgid "got_request_exception"
msgstr ""

# 118a05957943469b9923244cd87175a5
#: ../../ref/signals.txt:530
msgid ""
"This signal is sent whenever Django encounters an exception while processing "
"an incoming HTTP request."
msgstr ""

# 1c4ed057e0bd4d74af915b2683613e0c
#: ../../ref/signals.txt:538
msgid "``request``"
msgstr ""

# 98672dd10e0f470c909f42015d401b82
#: ../../ref/signals.txt:538
msgid "The :class:`~django.http.HttpRequest` object."
msgstr ""

# 54593f58db9d484294a259f149a2c534
#: ../../ref/signals.txt:541
msgid "Test signals"
msgstr ""

# a6f163951cf9400aa2cc3f2bded00e00
#: ../../ref/signals.txt:546
msgid "Signals only sent when :ref:`running tests <running-tests>`."
msgstr ""

# 246d0a2a2c364cdf92aebbe2ff339d63
#: ../../ref/signals.txt:549
msgid "setting_changed"
msgstr ""

# 3067c4196a394266913a14c11002790b
#: ../../ref/signals.txt:554
msgid ""
"This signal is sent when the value of a setting is changed through the "
"``django.test.TestCase.settings()`` context manager or the :func:`django."
"test.override_settings` decorator/context manager."
msgstr ""

# 5f86fef3fb7445d0bcc7bfd5b75a24eb
#: ../../ref/signals.txt:558
msgid ""
"It's actually sent twice: when the new value is applied (\"setup\") and when "
"the original value is restored (\"teardown\"). Use the ``enter`` argument to "
"distinguish between the two."
msgstr ""

#: ../../ref/signals.txt:562
msgid ""
"You can also import this signal from ``django.core.signals`` to avoid "
"importing from ``django.test`` in non-test situations."
msgstr ""

#: ../../ref/signals.txt:567
msgid "The signal was moved to ``django.core.signals`` as described above."
msgstr ""

# 756f2323048a4ae6b99015d71b61a610
#: ../../ref/signals.txt:572
msgid "The settings handler."
msgstr ""

# 84879ff5921647bf8c17c805ad5f3aac
#: ../../ref/signals.txt:575
msgid "``setting``"
msgstr ""

# 8ab517bcfdaa4e1a905bc14f933dc20f
#: ../../ref/signals.txt:575
msgid "The name of the setting."
msgstr ""

# ba46d59db1894bfb8c34d47621c5563a
#: ../../ref/signals.txt:579
msgid "``value``"
msgstr ""

# 3e61a12b0f9542a6b58c565b950ef719
#: ../../ref/signals.txt:578
msgid ""
"The value of the setting after the change. For settings that initially don't "
"exist, in the \"teardown\" phase, ``value`` is ``None``."
msgstr ""

# 89114d6a746c4456b3778f596d71b821
#: ../../ref/signals.txt:582
msgid "``enter``"
msgstr ""

# aab46d7d77d74335b42b9f3fcc618612
#: ../../ref/signals.txt:582
msgid "A boolean; ``True`` if the setting is applied, ``False`` if restored."
msgstr ""

# 79e6f930d80b4b8da238e4e847e4b82f
#: ../../ref/signals.txt:585
msgid "template_rendered"
msgstr ""

# a21e860e0b1a42f6955eb9138ced51d7
#: ../../ref/signals.txt:590
msgid ""
"Sent when the test system renders a template. This signal is not emitted "
"during normal operation of a Django server -- it is only available during "
"testing."
msgstr ""

# 37578b71a0c645489da6ef486cc6d1f8
#: ../../ref/signals.txt:596
msgid "The :class:`~django.template.Template` object which was rendered."
msgstr ""

# 157753e0c14b4a2e94559e5c3e4557e7
#: ../../ref/signals.txt:599
msgid "``template``"
msgstr ""

# 2ad3aea44a00415181de6dd9b4f8ffc4
# 48cc3be4bc3347aaa260132818585099
#: ../../ref/signals.txt:599
msgid "Same as sender"
msgstr ""

# 2e6fd9511f6841b2b0180512400494cf
#: ../../ref/signals.txt:603
msgid "``context``"
msgstr ""

# 818c1246daf64237a436388ed937e423
#: ../../ref/signals.txt:602
msgid ""
"The :class:`~django.template.Context` with which the template was rendered."
msgstr ""

# a1cb96e765b8482cbd17814c9a7c0784
#: ../../ref/signals.txt:606
msgid "Database Wrappers"
msgstr ""

# 022f3ab5452943898e0e3de71cff46aa
#: ../../ref/signals.txt:611
msgid ""
"Signals sent by the database wrapper when a database connection is initiated."
msgstr ""

# 8c638d07c6f1403382096cdbceb27bb2
#: ../../ref/signals.txt:615
msgid "connection_created"
msgstr ""

# e5c14a3aca194743a498991129e32bc5
#: ../../ref/signals.txt:620
msgid ""
"Sent when the database wrapper makes the initial connection to the "
"database.  This is particularly useful if you'd like to send any post "
"connection commands to the SQL backend."
msgstr ""

#: ../../ref/signals.txt:627
msgid ""
"The database wrapper class -- i.e. ``django.db.backends.postgresql."
"DatabaseWrapper`` or ``django.db.backends.mysql.DatabaseWrapper``, etc."
msgstr ""

# 3117c8050320478ca7eda2f6ababec88
#: ../../ref/signals.txt:635
msgid "``connection``"
msgstr ""

# 8b8a0609de514c36b0ca684e28e8c5cc
#: ../../ref/signals.txt:632
msgid ""
"The database connection that was opened. This can be used in a multiple-"
"database configuration to differentiate connection signals from different "
"databases."
msgstr ""
