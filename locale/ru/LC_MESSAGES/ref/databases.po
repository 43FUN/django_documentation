# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2012.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-07-30 13:35+0300\n"
"PO-Revision-Date: 2012-02-15 15:13\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# c586a9a598fc419dae88177cd52bb841
#: ../../ref/databases.txt:3
msgid "Databases"
msgstr ""

# 2c469103f40b4c8f8722bd15ef5031bd
#: ../../ref/databases.txt:5
msgid ""
"Django attempts to support as many features as possible on all database "
"backends. However, not all database backends are alike, and we've had to "
"make design decisions on which features to support and which assumptions we "
"can make safely."
msgstr ""

# afce327157f24a8598e01f8c9a033125
#: ../../ref/databases.txt:10
msgid ""
"This file describes some of the features that might be relevant to Django "
"usage. Of course, it is not intended as a replacement for server-specific "
"documentation or reference manuals."
msgstr ""

# afda96439a8b45f6a041cab55297c81e
#: ../../ref/databases.txt:15
msgid "General notes"
msgstr ""

# 90f8d13b66b746ba8634258c61eae1af
#: ../../ref/databases.txt:20
msgid "Persistent connections"
msgstr ""

# b81264ecd32b4218b6be4c548d113190
#: ../../ref/databases.txt:24
msgid ""
"Persistent connections avoid the overhead of re-establishing a connection to "
"the database in each request. They're controlled by the :setting:"
"`CONN_MAX_AGE` parameter which defines the maximum lifetime of a connection. "
"It can be set independently for each database."
msgstr ""

# a742c14c54404842bc8fa5c97fbd5cf0
#: ../../ref/databases.txt:29
msgid ""
"The default value is ``0``, preserving the historical behavior of closing "
"the database connection at the end of each request. To enable persistent "
"connections, set :setting:`CONN_MAX_AGE` to a positive number of seconds. "
"For unlimited persistent connections, set it to ``None``."
msgstr ""

# 0ce4f88fdd8444c5bf3dd57b240f8831
#: ../../ref/databases.txt:35
msgid "Connection management"
msgstr ""

# 0a849482b0a84c5f91b70967a1ab6dd8
#: ../../ref/databases.txt:37
msgid ""
"Django opens a connection to the database when it first makes a database "
"query. It keeps this connection open and reuses it in subsequent requests. "
"Django closes the connection once it exceeds the maximum age defined by :"
"setting:`CONN_MAX_AGE` or when it isn't usable any longer."
msgstr ""

# aaed5cba5fca4a40b3183b490f2272df
#: ../../ref/databases.txt:42
msgid ""
"In detail, Django automatically opens a connection to the database whenever "
"it needs one and doesn't have one already â€” either because this is the first "
"connection, or because the previous connection was closed."
msgstr ""

# cbe501c8d797469490d14dca7e5c346a
#: ../../ref/databases.txt:46
msgid ""
"At the beginning of each request, Django closes the connection if it has "
"reached its maximum age. If your database terminates idle connections after "
"some time, you should set :setting:`CONN_MAX_AGE` to a lower value, so that "
"Django doesn't attempt to use a connection that has been terminated by the "
"database server. (This problem may only affect very low traffic sites.)"
msgstr ""

# 57d1287d9879475f9d4617e03bb4d55b
#: ../../ref/databases.txt:52
msgid ""
"At the end of each request, Django closes the connection if it has reached "
"its maximum age or if it is in an unrecoverable error state. If any database "
"errors have occurred while processing the requests, Django checks whether "
"the connection still works, and closes it if it doesn't. Thus, database "
"errors affect at most one request; if the connection becomes unusable, the "
"next request gets a fresh connection."
msgstr ""

# 6f99afc57ac748a4a0ae29a594a3e0f8
#: ../../ref/databases.txt:60
msgid "Caveats"
msgstr ""

# 99416b3d20d94d379885a6ec16065813
#: ../../ref/databases.txt:62
msgid ""
"Since each thread maintains its own connection, your database must support "
"at least as many simultaneous connections as you have worker threads."
msgstr ""

# ea0268d387ba44f1aabedf75bb978899
#: ../../ref/databases.txt:65
msgid ""
"Sometimes a database won't be accessed by the majority of your views, for "
"example because it's the database of an external system, or thanks to "
"caching. In such cases, you should set :setting:`CONN_MAX_AGE` to a low "
"value or even ``0``, because it doesn't make sense to maintain a connection "
"that's unlikely to be reused. This will help keep the number of simultaneous "
"connections to this database small."
msgstr ""

# b4daee6f45c848d4aa99a75944c92289
#: ../../ref/databases.txt:72
msgid ""
"The development server creates a new thread for each request it handles, "
"negating the effect of persistent connections. Don't enable them during "
"development."
msgstr ""

# 3e6e222d31b143d9b2933f3e83ecc64e
#: ../../ref/databases.txt:76
msgid ""
"When Django establishes a connection to the database, it sets up appropriate "
"parameters, depending on the backend being used. If you enable persistent "
"connections, this setup is no longer repeated every request. If you modify "
"parameters such as the connection's isolation level or time zone, you should "
"either restore Django's defaults at the end of each request, force an "
"appropriate value at the beginning of each request, or disable persistent "
"connections."
msgstr ""

# d78a6cc484b941139b56f7236cc0b45d
#: ../../ref/databases.txt:85
msgid "Encoding"
msgstr ""

# ca2ef9ab579e4650b7059c953dcc52db
#: ../../ref/databases.txt:87
msgid ""
"Django assumes that all databases use UTF-8 encoding. Using other encodings "
"may result in unexpected behavior such as \"value too long\" errors from "
"your database for data that is valid in Django. See the database specific "
"notes below for information on how to set up your database correctly."
msgstr ""

# 31727228b1a14d3f8a1b0187c5124f7f
#: ../../ref/databases.txt:95
msgid "PostgreSQL notes"
msgstr ""

# 0218ac83e0de4062964daab705e3d3d0
#: ../../ref/databases.txt:97
msgid "Django supports PostgreSQL 8.4 and higher."
msgstr ""

# 30cb07dfaa9044769304574c5423ff7a
#: ../../ref/databases.txt:100
msgid "PostgreSQL connection settings"
msgstr ""

# f6bc985e1c5c4bb8982405f26ffdb2bd
#: ../../ref/databases.txt:102
msgid "See :setting:`HOST` for details."
msgstr ""

# fa1343ffc1fd4b1285b92dd7d1eeef24
#: ../../ref/databases.txt:105
msgid "Optimizing PostgreSQL's configuration"
msgstr ""

# 70f4b63ce6ed45b8b866aa7208562559
#: ../../ref/databases.txt:107
msgid "Django needs the following parameters for its database connections:"
msgstr ""

# 2b19ed1f91c847c096a397f8cd9c3395
#: ../../ref/databases.txt:109
msgid "``client_encoding``: ``'UTF8'``,"
msgstr ""

# d113d6f064f646a0940e70371ea5bb85
#: ../../ref/databases.txt:110
msgid ""
"``default_transaction_isolation``: ``'read committed'`` by default, or the "
"value set in the connection options (see below),"
msgstr ""

# bb1a61da0b2247049fa41ec346077b70
#: ../../ref/databases.txt:112
msgid ""
"``timezone``: ``'UTC'`` when :setting:`USE_TZ` is ``True``, value of :"
"setting:`TIME_ZONE` otherwise."
msgstr ""

# 53031fc87a8d4a9081a7bc49a881781d
#: ../../ref/databases.txt:115
msgid ""
"If these parameters already have the correct values, Django won't set them "
"for every new connection, which improves performance slightly. You can "
"configure them directly in :file:`postgresql.conf` or more conveniently per "
"database user with `ALTER ROLE`_."
msgstr ""

# 1e9064acf32a4bf28f4b32d6f808b31e
#: ../../ref/databases.txt:120
msgid ""
"Django will work just fine without this optimization, but each new "
"connection will do some additional queries to set these parameters."
msgstr ""

# ed3e099b6d064dcea9b067cabc21ae9b
#: ../../ref/databases.txt:128
msgid "Autocommit mode"
msgstr ""

# c63772ce6329444cad4de794047521b1
#: ../../ref/databases.txt:132
msgid ""
"In previous versions of Django, database-level autocommit could be enabled "
"by setting the ``autocommit`` key in the :setting:`OPTIONS` part of your "
"database configuration in :setting:`DATABASES`::"
msgstr ""

# 0eea9ad074484ab79bd517b6f10e1a74
#: ../../ref/databases.txt:143
msgid ""
"Since Django 1.6, autocommit is turned on by default. This configuration is "
"ignored and can be safely removed."
msgstr ""

# 58d9120a9ab946dab447997bec4d3d71
#: ../../ref/databases.txt:149
msgid "Isolation level"
msgstr ""

# ceaa25f82ad04fa5a3df935b7ab437f5
#: ../../ref/databases.txt:153
msgid ""
"Like PostgreSQL itself, Django defaults to the ``READ COMMITTED`` `isolation "
"level`_. If you need a higher isolation level such as ``REPEATABLE READ`` or "
"``SERIALIZABLE``, set it in the :setting:`OPTIONS` part of your database "
"configuration in :setting:`DATABASES`::"
msgstr ""

# 98316c189010436b9120dc94ca60d115
#: ../../ref/databases.txt:169
msgid ""
"Under higher isolation levels, your application should be prepared to handle "
"exceptions raised on serialization failures. This option is designed for "
"advanced uses."
msgstr ""

# ccb30563456c40e6a87d40e2e826147e
#: ../../ref/databases.txt:176
msgid "Indexes for ``varchar`` and ``text`` columns"
msgstr ""

# d0ff741e979b4bcdb0abe3e6963d5f9a
#: ../../ref/databases.txt:178
msgid ""
"When specifying ``db_index=True`` on your model fields, Django typically "
"outputs a single ``CREATE INDEX`` statement.  However, if the database type "
"for the field is either ``varchar`` or ``text`` (e.g., used by "
"``CharField``, ``FileField``, and ``TextField``), then Django will create an "
"additional index that uses an appropriate `PostgreSQL operator class`_ for "
"the column.  The extra index is necessary to correctly perform lookups that "
"use the ``LIKE`` operator in their SQL, as is done with the ``contains`` and "
"``startswith`` lookup types."
msgstr ""

# 0988f645c38348c296c2a951eb2739e2
#: ../../ref/databases.txt:192
msgid "MySQL notes"
msgstr ""

# 9c7585dcec82413f819aa25740a94b9f
#: ../../ref/databases.txt:195
msgid "Version support"
msgstr ""

# 3997e354bcfa4a8caf8c59932103d52c
#: ../../ref/databases.txt:197
msgid "Django supports MySQL 5.0.3 and higher."
msgstr ""

# 1aa634dacfc74c4a9196c925c53dfa16
#: ../../ref/databases.txt:199
msgid ""
"`MySQL 5.0`_ adds the ``information_schema`` database, which contains "
"detailed data on all database schema. Django's ``inspectdb`` feature uses it."
msgstr ""

# f3559f1dead84c8f82b9ace9b514669d
#: ../../ref/databases.txt:202
msgid ""
"Django expects the database to support Unicode (UTF-8 encoding) and "
"delegates to it the task of enforcing transactions and referential "
"integrity. It is important to be aware of the fact that the two latter ones "
"aren't actually enforced by MySQL when using the MyISAM storage engine, see "
"the next section."
msgstr ""

# 7fdf1eb5f1d44199a391ec5b14fdcd86
#: ../../ref/databases.txt:213
msgid "Storage engines"
msgstr ""

# 4c3bfbaf0d9e4a5e8ac2b0e5ea158275
#: ../../ref/databases.txt:215
msgid ""
"MySQL has several `storage engines`_. You can change the default storage "
"engine in the server configuration."
msgstr ""

# 86d3904f3410425cb86bbcb16c1983ba
#: ../../ref/databases.txt:218
msgid ""
"Until MySQL 5.5.4, the default engine was MyISAM_ [#]_. The main drawbacks "
"of MyISAM are that it doesn't support transactions or enforce foreign-key "
"constraints. On the plus side, it was the only engine that supported full-"
"text indexing and searching until MySQL 5.6.4."
msgstr ""

# e61b75b4aa0a4b26a380cfa0dd6f08bf
#: ../../ref/databases.txt:223
msgid ""
"Since MySQL 5.5.5, the default storage engine is InnoDB_. This engine is "
"fully transactional and supports foreign key references. It's probably the "
"best choice at this point. However, note that the InnoDB autoincrement "
"counter is lost on a MySQL restart because it does not remember the "
"``AUTO_INCREMENT`` value, instead recreating it as \"max(id)+1\". This may "
"result in an inadvertent reuse of :class:`~django.db.models.AutoField` "
"values."
msgstr ""

# 59540b9206234cf0a94176d5d142cc49
#: ../../ref/databases.txt:230
msgid ""
"If you upgrade an existing project to MySQL 5.5.5 and subsequently add some "
"tables, ensure that your tables are using the same storage engine (i.e. "
"MyISAM vs. InnoDB). Specifically, if tables that have a ``ForeignKey`` "
"between them use different storage engines, you may see an error like the "
"following when running ``migrate``::"
msgstr ""

# 2f14b6fdc6ab4cd2bdd02dedd5dcac93
#: ../../ref/databases.txt:244
msgid ""
"Unless this was changed by the packager of your MySQL package. We've had "
"reports that the Windows Community Server installer sets up InnoDB as the "
"default storage engine, for example."
msgstr ""

# b9f95d17733f4e969859adbb911e1f9d
#: ../../ref/databases.txt:251
msgid "MySQL DB API Drivers"
msgstr ""

# fcbbe2968ef54a7caec4b019b64c2d75
#: ../../ref/databases.txt:253
msgid ""
"The Python Database API is described in `PEP 249`_. MySQL has two prominent "
"drivers that implement this API:"
msgstr ""

# c66d7a1981be435ebcbd846ddb4f13e5
#: ../../ref/databases.txt:258
msgid ""
"`MySQLdb`_ is a native driver that has been developed and supported for over "
"a decade by Andy Dustman."
msgstr ""

# a5bb69f602ef408bbb5b7876a19d92d5
#: ../../ref/databases.txt:260
msgid ""
"`MySQL Connector/Python`_ is a pure Python driver from Oracle that does not "
"require the MySQL client library or any Python modules outside the standard "
"library."
msgstr ""

# eecfa68f8dcd44ef92341a306ade248a
#: ../../ref/databases.txt:267
msgid ""
"Both drivers are thread-safe and both provide connection pooling. The major "
"difference is that MySQL Connector/Python supports Python 3."
msgstr ""

# 34a7ef0ed9a548a6838f34c9ff0a8524
#: ../../ref/databases.txt:270
msgid ""
"In addition to a DB API driver, Django needs an adapter to access the "
"database drivers from its ORM. Django provides an adapter for MySQLdb while "
"MySQL Connector/Python includes `its own`_."
msgstr ""

# ff7ed08e70794151a8f5bbaf1ef42da2
#: ../../ref/databases.txt:277
msgid "MySQLdb"
msgstr ""

# bae465b29ff647b89a49dfa756253e39
#: ../../ref/databases.txt:279
msgid "Django requires MySQLdb version 1.2.1p2 or later."
msgstr ""

# 9f13a60182fe4bb8bc8be2eb4ecbaa0e
#: ../../ref/databases.txt:282
msgid ""
"If you see ``ImportError: cannot import name ImmutableSet`` when trying to "
"use Django, your MySQLdb installation may contain an outdated ``sets.py`` "
"file that conflicts with the built-in module of the same name from Python "
"2.4 and later. To fix this, verify that you have installed MySQLdb version "
"1.2.1p2 or newer, then delete the ``sets.py`` file in the MySQLdb directory "
"that was left by an earlier version."
msgstr ""

# bda78c6a24194ea7b48886effdaa7670
#: ../../ref/databases.txt:290
msgid ""
"There are known issues with the way MySQLdb converts date strings into "
"datetime objects. Specifically, date strings with value 0000-00-00 are valid "
"for MySQL but will be converted into None by MySQLdb."
msgstr ""

# 2420515b77784520be2fd0b80efae47c
#: ../../ref/databases.txt:294
msgid ""
"This means you should be careful while using loaddata/dumpdata with rows "
"that may have 0000-00-00 values, as they will be converted to None."
msgstr ""

# 53753067c62d40cc9bf0083edff5574c
#: ../../ref/databases.txt:298
msgid ""
"At the time of writing, the latest release of MySQLdb (1.2.4) doesn't "
"support Python 3. In order to use MySQLdb under Python 3, you'll have to "
"install an unofficial fork, such as `MySQL-for-Python-3`_."
msgstr ""

# 849ede0a5b8b4967997a19c5e8a9ae77
#: ../../ref/databases.txt:302
msgid ""
"This port is still in alpha. In particular, it doesn't support binary data, "
"making it impossible to use :class:`django.db.models.BinaryField`."
msgstr ""

# cbf950c7dd3c4686a1847dad7fc3127c
#: ../../ref/databases.txt:308
msgid "MySQL Connector/Python"
msgstr ""

# 1563b39d92e9469aaaa5d72ceddd704c
#: ../../ref/databases.txt:310
msgid ""
"MySQL Connector/Python is available from the `download page`_. The Django "
"adapter is available in versions 1.1.X and later. It may not support the "
"most recent releases of Django."
msgstr ""

# 0a0161374e1f47b6b60569df747d2a23
#: ../../ref/databases.txt:319
msgid "Time zone definitions"
msgstr ""

# 1d7be74842de47cda57664a41887840a
#: ../../ref/databases.txt:321
msgid ""
"If you plan on using Django's :doc:`timezone support </topics/i18n/"
"timezones>`, use `mysql_tzinfo_to_sql`_ to load time zone tables into the "
"MySQL database. This needs to be done just once for your MySQL server, not "
"per database."
msgstr ""

# cdfa892660e14e72ac041e7879d85d33
#: ../../ref/databases.txt:328
msgid "Creating your database"
msgstr ""

# 95a145f3bbbe47f4b298850c0db23f5c
#: ../../ref/databases.txt:330
msgid ""
"You can `create your database`_ using the command-line tools and this SQL::"
msgstr ""

# 6738cfef46d24d2b9f9ad2b8020bdf9a
#: ../../ref/databases.txt:334
msgid "This ensures all tables and columns will use UTF-8 by default."
msgstr ""

# b54c56a1186f45fe87a45aca5c416d78
#: ../../ref/databases.txt:341
msgid "Collation settings"
msgstr ""

# cb00b5b193324428923ad956b843cc1e
#: ../../ref/databases.txt:343
msgid ""
"The collation setting for a column controls the order in which data is "
"sorted as well as what strings compare as equal. It can be set on a database-"
"wide level and also per-table and per-column. This is `documented "
"thoroughly`_ in the MySQL documentation. In all cases, you set the collation "
"by directly manipulating the database tables; Django doesn't provide a way "
"to set this on the model definition."
msgstr ""

# 49ed2251b9fe448a99929ba686cf3e3c
#: ../../ref/databases.txt:352
msgid ""
"By default, with a UTF-8 database, MySQL will use the ``utf8_general_ci`` "
"collation. This results in all string equality comparisons being done in a "
"*case-insensitive* manner. That is, ``\"Fred\"`` and ``\"freD\"`` are "
"considered equal at the database level. If you have a unique constraint on a "
"field, it would be illegal to try to insert both ``\"aa\"`` and ``\"AA\"`` "
"into the same column, since they compare as equal (and, hence, non-unique) "
"with the default collation."
msgstr ""

# 7757513fc69041658f74ac30e63eb506
#: ../../ref/databases.txt:360
msgid ""
"In many cases, this default will not be a problem. However, if you really "
"want case-sensitive comparisons on a particular column or table, you would "
"change the column or table to use the ``utf8_bin`` collation. The main thing "
"to be aware of in this case is that if you are using MySQLdb 1.2.2, the "
"database backend in Django will then return bytestrings (instead of unicode "
"strings) for any character fields it receive from the database. This is a "
"strong variation from Django's normal practice of *always* returning unicode "
"strings. It is up to you, the developer, to handle the fact that you will "
"receive bytestrings if you configure your table(s) to use ``utf8_bin`` "
"collation. Django itself should mostly work smoothly with such columns "
"(except for the ``contrib.sessions`` ``Session`` and ``contrib.admin`` "
"``LogEntry`` tables described below), but your code must be prepared to call "
"``django.utils.encoding.smart_text()`` at times if it really wants to work "
"with consistent data -- Django will not do this for you (the database "
"backend layer and the model population layer are separated internally so the "
"database layer doesn't know it needs to make this conversion in this one "
"particular case)."
msgstr ""

# 909132f026134fc79260e5fb3b357b28
#: ../../ref/databases.txt:377
msgid ""
"If you're using MySQLdb 1.2.1p2, Django's standard :class:`~django.db.models."
"CharField` class will return unicode strings even with ``utf8_bin`` "
"collation. However, :class:`~django.db.models.TextField` fields will be "
"returned as an ``array.array`` instance (from Python's standard ``array`` "
"module). There isn't a lot Django can do about that, since, again, the "
"information needed to make the necessary conversions isn't available when "
"the data is read in from the database. This problem was `fixed in MySQLdb "
"1.2.2`_, so if you want to use :class:`~django.db.models.TextField` with "
"``utf8_bin`` collation, upgrading to version 1.2.2 and then dealing with the "
"bytestrings (which shouldn't be too difficult) as described above is the "
"recommended solution."
msgstr ""

# 6abaed3505404307aae40551f25b8226
#: ../../ref/databases.txt:389
msgid ""
"Should you decide to use ``utf8_bin`` collation for some of your tables with "
"MySQLdb 1.2.1p2 or 1.2.2, you should still use ``utf8_general_ci`` (the "
"default) collation for the ``django.contrib.sessions.models.Session`` table "
"(usually called ``django_session``) and the ``django.contrib.admin.models."
"LogEntry`` table (usually called ``django_admin_log``). Those are the two "
"standard tables that use :class:`~django.db.models.TextField` internally."
msgstr ""

# 9e14f353b82a4649b979489f7c64f902
#: ../../ref/databases.txt:399
msgid ""
"Please note that according to `MySQL Unicode Character Sets`_, comparisons "
"for the ``utf8_general_ci`` collation are faster, but slightly less correct, "
"than comparisons for ``utf8_unicode_ci``. If this is acceptable for your "
"application, you should use ``utf8_general_ci`` because it is faster. If "
"this is not acceptable (for example, if you require German dictionary "
"order), use ``utf8_unicode_ci`` because it is more accurate."
msgstr ""

# 1c9f0938d39b4b48a099827998e1e6c4
# 176c663a236d41228e00c0f4c5cc510c
#: ../../ref/databases.txt:409 ../../ref/databases.txt:766
msgid "Connecting to the database"
msgstr ""

# 926d139dfc2e47409c0ea793c1ff5f80
#: ../../ref/databases.txt:411
msgid "Refer to the :doc:`settings documentation </ref/settings>`."
msgstr ""

# 37738feab7d04b759de6a8245f9ce91e
#: ../../ref/databases.txt:413
msgid "Connection settings are used in this order:"
msgstr ""

# 89a3b3f73f684b11ada9e92c4132738b
#: ../../ref/databases.txt:415
msgid ":setting:`OPTIONS`."
msgstr ""

# a0cf6e193a30472ca57311b6287d1c9e
#: ../../ref/databases.txt:416
msgid ""
":setting:`NAME`, :setting:`USER`, :setting:`PASSWORD`, :setting:`HOST`, :"
"setting:`PORT`"
msgstr ""

# 49c0d71d9df74382b4304c18fd09600b
#: ../../ref/databases.txt:418
msgid "MySQL option files."
msgstr ""

# a623019f8b9c4dd49b5437e48ab07ada
#: ../../ref/databases.txt:420
msgid ""
"In other words, if you set the name of the database in :setting:`OPTIONS`, "
"this will take precedence over :setting:`NAME`, which would override "
"anything in a `MySQL option file`_."
msgstr ""

# a82680eea99f47fcabd09d8c492022c3
#: ../../ref/databases.txt:424
msgid "Here's a sample configuration which uses a MySQL option file::"
msgstr ""

# 57aecf5d933344d8968fe5b148d76152
#: ../../ref/databases.txt:444
msgid ""
"Several other MySQLdb connection options may be useful, such as ``ssl``, "
"``init_command``, and ``sql_mode``. Consult the `MySQLdb documentation`_ for "
"more details."
msgstr ""

# 217308a487e84954a0959f6448cf1c33
#: ../../ref/databases.txt:452
msgid "Creating your tables"
msgstr ""

# 6483fb9c488c4a5ca7c1aab9be402b0e
#: ../../ref/databases.txt:454
msgid ""
"When Django generates the schema, it doesn't specify a storage engine, so "
"tables will be created with whatever default storage engine your database "
"server is configured for. The easiest solution is to set your database "
"server's default storage engine to the desired engine."
msgstr ""

# 125e3b961560407bb9c8888364c4bba4
#: ../../ref/databases.txt:459
msgid ""
"If you're using a hosting service and can't change your server's default "
"storage engine, you have a couple of options."
msgstr ""

# 12a7c9c979d54bdba2ecf64ad266e460
#: ../../ref/databases.txt:462
msgid ""
"After the tables are created, execute an ``ALTER TABLE`` statement to "
"convert a table to a new storage engine (such as InnoDB)::"
msgstr ""

# d8d09c00192c4bcc8b8bfcc2dd80e3e6
#: ../../ref/databases.txt:467
msgid "This can be tedious if you have a lot of tables."
msgstr ""

# 398f673dc5da4727b62c7f6e5ef9d849
#: ../../ref/databases.txt:469
msgid ""
"Another option is to use the ``init_command`` option for MySQLdb prior to "
"creating your tables::"
msgstr ""

# 8538c3ef9240417e9bc69776573dde26
#: ../../ref/databases.txt:476
msgid ""
"This sets the default storage engine upon connecting to the database. After "
"your tables have been created, you should remove this option as it adds a "
"query that is only needed during table creation to each database connection."
msgstr ""

# 88b1252ee7b947c9a35ec8cd7276c3a1
#: ../../ref/databases.txt:481
msgid ""
"Another method for changing the storage engine is described in "
"AlterModelOnSyncDB_."
msgstr ""

# fa8a014d4c204efca8768f3e3787cc65
#: ../../ref/databases.txt:487
msgid "Table names"
msgstr ""

# abea8b81741141ac89eee810483c3cb0
#: ../../ref/databases.txt:489
msgid ""
"There are `known issues`_ in even the latest versions of MySQL that can "
"cause the case of a table name to be altered when certain SQL statements are "
"executed under certain conditions. It is recommended that you use lowercase "
"table names, if possible, to avoid any problems that might arise from this "
"behavior. Django uses lowercase table names when it auto-generates table "
"names from models, so this is mainly a consideration if you are overriding "
"the table name via the :class:`~django.db.models.Options.db_table` parameter."
msgstr ""

# cfc6c5866bdd4058becca48026d77e6d
#: ../../ref/databases.txt:500
msgid "Savepoints"
msgstr ""

# 2aff9774b6e542b482ca6af2c42ad3ce
#: ../../ref/databases.txt:502
msgid ""
"Both the Django ORM and MySQL (when using the InnoDB :ref:`storage engine "
"<mysql-storage-engines>`) support database :ref:`savepoints <topics-db-"
"transactions-savepoints>`."
msgstr ""

# 5b85f4292560406cb6375da1ffb29b55
#: ../../ref/databases.txt:506
msgid ""
"If you use the MyISAM storage engine please be aware of the fact that you "
"will receive database-generated errors if you try to use the :ref:`savepoint-"
"related methods of the transactions API <topics-db-transactions-"
"savepoints>`. The reason for this is that detecting the storage engine of a "
"MySQL database/table is an expensive operation so it was decided it isn't "
"worth to dynamically convert these methods in no-op's based in the results "
"of such detection."
msgstr ""

# 613fe0b08dfc42308264d832166cc1ea
#: ../../ref/databases.txt:514
msgid "Notes on specific fields"
msgstr ""

# dec78d4d90b649cc8b9286ac8a1d002f
#: ../../ref/databases.txt:517
msgid "Character fields"
msgstr ""

# 610bd42fc85346ee85a323ad8c4e2e9f
#: ../../ref/databases.txt:519
msgid ""
"Any fields that are stored with ``VARCHAR`` column types have their "
"``max_length`` restricted to 255 characters if you are using ``unique=True`` "
"for the field. This affects :class:`~django.db.models.CharField`, :class:"
"`~django.db.models.SlugField` and :class:`~django.db.models."
"CommaSeparatedIntegerField`."
msgstr ""

# cf82d630a6f346609370da677649ec3d
#: ../../ref/databases.txt:526
msgid "DateTime fields"
msgstr ""

# 89c5c6aa112d4b2f8a218af4403e25ac
#: ../../ref/databases.txt:528
msgid ""
"MySQL does not have a timezone-aware column type. If an attempt is made to "
"store a timezone-aware ``time`` or ``datetime`` to a :class:`~django.db."
"models.TimeField` or :class:`~django.db.models.DateTimeField` respectively, "
"a ``ValueError`` is raised rather than truncating data."
msgstr ""

# 3353dfe2492b4ccfbf3bbc52ba4de4af
#: ../../ref/databases.txt:533
msgid ""
"MySQL does not store fractions of seconds. Fractions of seconds are "
"truncated to zero when the time is stored."
msgstr ""

# 98debd2f8a8e46d7b27a0b681672a0ff
#: ../../ref/databases.txt:537
msgid "Row locking with ``QuerySet.select_for_update()``"
msgstr ""

# 99787140938942d6af6f4707757297d6
#: ../../ref/databases.txt:539
msgid ""
"MySQL does not support the ``NOWAIT`` option to the ``SELECT ... FOR "
"UPDATE`` statement. If ``select_for_update()`` is used with ``nowait=True`` "
"then a ``DatabaseError`` will be raised."
msgstr ""

# 9e87a6baee50418bbdb1ae17ede5b892
#: ../../ref/databases.txt:544
msgid "Automatic typecasting can cause unexpected results"
msgstr ""

# fd8900f92b694a2b8161203f49fc38fa
#: ../../ref/databases.txt:546
msgid ""
"When performing a query on a string type, but with an integer value, MySQL "
"will coerce the types of all values in the table to an integer before "
"performing the comparison. If your table contains the values ``'abc'``, "
"``'def'`` and you query for ``WHERE mycolumn=0``, both rows will match. "
"Similarly, ``WHERE mycolumn=1`` will match the value ``'abc1'``. Therefore, "
"string type fields included in Django will always cast the value to a string "
"before using it in a query."
msgstr ""

# 738c09352dff4a39b629dc275565a3ec
#: ../../ref/databases.txt:553
msgid ""
"If you implement custom model fields that inherit from :class:`~django.db."
"models.Field` directly, are overriding :meth:`~django.db.models.Field."
"get_prep_value`, or use :meth:`extra() <django.db.models.query.QuerySet."
"extra>` or :meth:`raw() <django.db.models.Manager.raw>`, you should ensure "
"that you perform the appropriate typecasting."
msgstr ""

# 65f1b72f33864d42918dd946b9b52aa7
#: ../../ref/databases.txt:562
msgid "SQLite notes"
msgstr ""

# 8a844898e3804aa7a98fbbb0ca326d32
#: ../../ref/databases.txt:564
msgid ""
"SQLite_ provides an excellent development alternative for applications that "
"are predominantly read-only or require a smaller installation footprint. As "
"with all database servers, though, there are some differences that are "
"specific to SQLite that you should be aware of."
msgstr ""

# f5e3090499cb4e769c98d2b73d2ea739
#: ../../ref/databases.txt:574
msgid "Substring matching and case sensitivity"
msgstr ""

# f72a76b1283f4447b6d0d7d5574bf5bb
#: ../../ref/databases.txt:576
msgid ""
"For all SQLite versions, there is some slightly counter-intuitive behavior "
"when attempting to match some types of strings.  These are triggered when "
"using the :lookup:`iexact` or :lookup:`contains` filters in Querysets. The "
"behavior splits into two cases:"
msgstr ""

# 1b00a38d5fb441bcbab9ad0995841404
#: ../../ref/databases.txt:581
msgid ""
"1. For substring matching, all matches are done case-insensitively. That is "
"a filter such as ``filter(name__contains=\"aa\")`` will match a name of ``"
"\"Aabb\"``."
msgstr ""

# 92491c4e2aaf4efe8b8463160fbf08d1
#: ../../ref/databases.txt:584
msgid ""
"2. For strings containing characters outside the ASCII range, all exact "
"string matches are performed case-sensitively, even when the case-"
"insensitive options are passed into the query. So the :lookup:`iexact` "
"filter will behave exactly the same as the :lookup:`exact` filter in these "
"cases."
msgstr ""

# 5e5ccfdb939a41c7812a9de9be7f688a
#: ../../ref/databases.txt:589
msgid ""
"Some possible workarounds for this are `documented at sqlite.org`_, but they "
"aren't utilized by the default SQLite backend in Django, as incorporating "
"them would be fairly difficult to do robustly. Thus, Django exposes the "
"default SQLite behavior and you should be aware of this when doing case-"
"insensitive or substring filtering."
msgstr ""

# da65651abe5e4ed59e20158124955965
#: ../../ref/databases.txt:598
msgid "SQLite 3.3.6 or newer strongly recommended"
msgstr ""

# 9d7b7c3e1e5b45c4a2ff508594360286
#: ../../ref/databases.txt:600
msgid "Versions of SQLite 3.3.5 and older contains the following bugs:"
msgstr ""

# 9ea61e284c694161bac1ac2fff6c1741
#: ../../ref/databases.txt:602
msgid ""
"A bug when `handling`_ ``ORDER BY`` parameters. This can cause problems when "
"you use the ``select`` parameter for the ``extra()`` QuerySet method. The "
"bug can be identified by the error message ``OperationalError: ORDER BY "
"terms must not be non-integer constants``."
msgstr ""

# 4eaaf0d5c04b4239b6c8839924140a98
#: ../../ref/databases.txt:607
msgid ""
"A bug when handling `aggregation`_ together with DateFields and "
"DecimalFields."
msgstr ""

# 153c9ce68a1641a89c8a928f06f2d69f
#: ../../ref/databases.txt:613
msgid ""
"SQLite 3.3.6 was released in April 2006, so most current binary "
"distributions for different platforms include newer version of SQLite usable "
"from Python through either the ``pysqlite2`` or the ``sqlite3`` modules."
msgstr ""

# d61d6f4f038a4793a007709e0ca367b7
#: ../../ref/databases.txt:618
msgid "Version 3.5.9"
msgstr ""

# cf33c0311227450aba84e605372c2da0
#: ../../ref/databases.txt:620
msgid ""
"The Ubuntu \"Intrepid Ibex\" (8.10) SQLite 3.5.9-3 package contains a bug "
"that causes problems with the evaluation of query expressions. If you are "
"using Ubuntu \"Intrepid Ibex\", you will need to update the package to "
"version 3.5.9-3ubuntu1 or newer (recommended) or find an alternate source "
"for SQLite packages, or install SQLite from source."
msgstr ""

# 8afb4207f9324102adbad1f1b3aed553
#: ../../ref/databases.txt:626
msgid ""
"At one time, Debian Lenny shipped with the same malfunctioning SQLite "
"3.5.9-3 package. However the Debian project has subsequently issued updated "
"versions of the SQLite package that correct these bugs. If you find you are "
"getting unexpected results under Debian, ensure you have updated your SQLite "
"package to 3.5.9-5 or later."
msgstr ""

# ccb1e7ee15724bbeabeacca1e62627d5
#: ../../ref/databases.txt:632
msgid ""
"The problem does not appear to exist with other versions of SQLite packaged "
"with other operating systems."
msgstr ""

# c115d6f309b541ac8c65eaf567fed69a
#: ../../ref/databases.txt:636
msgid "Version 3.6.2"
msgstr ""

# 748175fd52d648b8bc040b338f1c982e
#: ../../ref/databases.txt:638
msgid ""
"SQLite version 3.6.2 (released August 30, 2008) introduced a bug into "
"``SELECT DISTINCT`` handling that is triggered by, among other things, "
"Django's ``DateQuerySet`` (returned by the ``dates()`` method on a queryset)."
msgstr ""

# 7d095ad8d8f34197818c905fecad6467
#: ../../ref/databases.txt:642
msgid ""
"You should avoid using this version of SQLite with Django. Either upgrade to "
"3.6.3 (released September 22, 2008) or later, or downgrade to an earlier "
"version of SQLite."
msgstr ""

# 58f9b10f40764f56b48aa43b2b875731
#: ../../ref/databases.txt:649
msgid "Using newer versions of the SQLite DB-API 2.0 driver"
msgstr ""

# a433b34e9a014601ba9b05e13e050a52
#: ../../ref/databases.txt:651
msgid ""
"Django will use a ``pysqlite2`` module in preference to ``sqlite3`` as "
"shipped with the Python standard library if it finds one is available."
msgstr ""

# ac73d13142f340de89d184ece86bd3c6
#: ../../ref/databases.txt:654
msgid ""
"This provides the ability to upgrade both the DB-API 2.0 interface or SQLite "
"3 itself to versions newer than the ones included with your particular "
"Python binary distribution, if needed."
msgstr ""

# 02441a738ba34954b51578e9b6f4bb6f
#: ../../ref/databases.txt:659
msgid "\"Database is locked\" errors"
msgstr ""

# 572d1b48d40e49aeab0adac1f8766e98
#: ../../ref/databases.txt:661
msgid ""
"SQLite is meant to be a lightweight database, and thus can't support a high "
"level of concurrency. ``OperationalError: database is locked`` errors "
"indicate that your application is experiencing more concurrency than "
"``sqlite`` can handle in default configuration. This error means that one "
"thread or process has an exclusive lock on the database connection and "
"another thread timed out waiting for the lock the be released."
msgstr ""

# cc3bc9561a4d4387bdb26e3dc84535a5
#: ../../ref/databases.txt:668
msgid ""
"Python's SQLite wrapper has a default timeout value that determines how long "
"the second thread is allowed to wait on the lock before it times out and "
"raises the ``OperationalError: database is locked`` error."
msgstr ""

# 9848702c914940efabe623f57fcd5ab9
#: ../../ref/databases.txt:673
msgid "If you're getting this error, you can solve it by:"
msgstr ""

# c8a9678f0b1e4bae8ba8ce71915579b7
#: ../../ref/databases.txt:675
msgid ""
"Switching to another database backend. At a certain point SQLite becomes too "
"\"lite\" for real-world applications, and these sorts of concurrency errors "
"indicate you've reached that point."
msgstr ""

# 346d5a36dc274aa4b5ea81825658f272
#: ../../ref/databases.txt:679
msgid ""
"Rewriting your code to reduce concurrency and ensure that database "
"transactions are short-lived."
msgstr ""

# c2c5b5f1da194469959488ab20f1b3c9
#: ../../ref/databases.txt:682
msgid ""
"Increase the default timeout value by setting the ``timeout`` database "
"option option::"
msgstr ""

# 02f8f4bc09594f8dbd6eeb5d60d7d793
#: ../../ref/databases.txt:691
msgid ""
"This will simply make SQLite wait a bit longer before throwing \"database is "
"locked\" errors; it won't really do anything to solve them."
msgstr ""

# a13e2fc148224ea5a4d91311ab531296
#: ../../ref/databases.txt:695
msgid "``QuerySet.select_for_update()`` not supported"
msgstr ""

# d2ac40e89a3a41a6b87a8bf0a2eeadff
#: ../../ref/databases.txt:697
msgid ""
"SQLite does not support the ``SELECT ... FOR UPDATE`` syntax. Calling it "
"will have no effect."
msgstr ""

# d5b14fcb02414c85ad06daffff1bee54
#: ../../ref/databases.txt:701
msgid "\"pyformat\" parameter style in raw queries not supported"
msgstr ""

# e2d138c0b5174cf29d7fd57b7653525c
#: ../../ref/databases.txt:703
msgid ""
"For most backends, raw queries (``Manager.raw()`` or ``cursor.execute()``) "
"can use the \"pyformat\" parameter style, where placeholders in the query "
"are given as ``'%(name)s'`` and the parameters are passed as a dictionary "
"rather than a list. SQLite does not support this."
msgstr ""

# d1e554ff9a74418e9fea2738612ee988
#: ../../ref/databases.txt:711
msgid "Parameters not quoted in ``connection.queries``"
msgstr ""

# 53484825315f40c0a828ef9002a76d9f
#: ../../ref/databases.txt:713
msgid ""
"``sqlite3`` does not provide a way to retrieve the SQL after quoting and "
"substituting the parameters. Instead, the SQL in ``connection.queries`` is "
"rebuilt with a simple string interpolation. It may be incorrect. Make sure "
"you add quotes where necessary before copying a query into an SQLite shell."
msgstr ""

# 46c8788e1cf5420f9b327abed04f6c09
#: ../../ref/databases.txt:721
msgid "Oracle notes"
msgstr ""

# 82e0ed79785c4c91995744d64439f4f3
#: ../../ref/databases.txt:723
msgid ""
"Django supports `Oracle Database Server`_ versions 9i and higher. Oracle "
"version 10g or later is required to use Django's ``regex`` and ``iregex`` "
"query operators. You will also need at least version 4.3.1 of the "
"`cx_Oracle`_ Python driver."
msgstr ""

# 3b072b9a6fb14a318a39d1b198370821
#: ../../ref/databases.txt:728
msgid ""
"Note that due to a Unicode-corruption bug in ``cx_Oracle`` 5.0, that version "
"of the driver should **not** be used with Django; ``cx_Oracle`` 5.0.1 "
"resolved this issue, so if you'd like to use a more recent ``cx_Oracle``, "
"use version 5.0.1."
msgstr ""

# d9e71cc51bd542a48ec5a70902a1b877
#: ../../ref/databases.txt:733
msgid ""
"``cx_Oracle`` 5.0.1 or greater can optionally be compiled with the "
"``WITH_UNICODE`` environment variable.  This is recommended but not required."
msgstr ""

# dd38ea4ffbc247d990e335025c78ddc5
#: ../../ref/databases.txt:740
msgid ""
"In order for the ``python manage.py migrate`` command to work, your Oracle "
"database user must have privileges to run the following commands:"
msgstr ""

# bd49722b791c4be18f563e5a6cd8627c
#: ../../ref/databases.txt:743
msgid "CREATE TABLE"
msgstr ""

# a061e1814b4549948df9812a22101ec7
#: ../../ref/databases.txt:744
msgid "CREATE SEQUENCE"
msgstr ""

# 8274a4e4912b44f7bdeb9aefc6507fd7
#: ../../ref/databases.txt:745
msgid "CREATE PROCEDURE"
msgstr ""

# ef47a55683ee4403b5e19773030967c0
#: ../../ref/databases.txt:746
msgid "CREATE TRIGGER"
msgstr ""

# 8a7fc784230a4cce8688c254e6bdd83e
#: ../../ref/databases.txt:748
msgid ""
"To run Django's test suite, the user needs these *additional* privileges:"
msgstr ""

# e9e0c85fd6f04aa4a96de9b5a6bf9534
#: ../../ref/databases.txt:750
msgid "CREATE USER"
msgstr ""

# 8f6bb7c9174e47689b33ba4459a43e62
#: ../../ref/databases.txt:751
msgid "DROP USER"
msgstr ""

# dbbc47a583de4e54b1ebc2cff5e44024
#: ../../ref/databases.txt:752
msgid "CREATE TABLESPACE"
msgstr ""

# b579bd2de96b49e1a3a723f52205219c
#: ../../ref/databases.txt:753
msgid "DROP TABLESPACE"
msgstr ""

# 2aa0c278de814db199b4949c37ead332
#: ../../ref/databases.txt:754
msgid "CONNECT WITH ADMIN OPTION"
msgstr ""

# 5f400a7b02eb4384bb414e1e446580dc
#: ../../ref/databases.txt:755
msgid "RESOURCE WITH ADMIN OPTION"
msgstr ""

# c96752a6daf94c86b3b249fc12129f5e
#: ../../ref/databases.txt:757
msgid ""
"The Oracle database backend uses the ``SYS.DBMS_LOB`` package, so your user "
"will require execute permissions on it. It's normally accessible to all "
"users by default, but in case it is not, you'll need to grant permissions "
"like so:"
msgstr ""

# 2984bd5908744edc969b4eab96cabdb3
#: ../../ref/databases.txt:768
msgid ""
"To connect using the service name of your Oracle database, your ``settings."
"py`` file should look something like this::"
msgstr ""

# 5b657ce76ffc4f8a887e052e5e75a36e
#: ../../ref/databases.txt:783
msgid ""
"In this case, you should leave both :setting:`HOST` and :setting:`PORT` "
"empty. However, if you don't use a ``tnsnames.ora`` file or a similar naming "
"method and want to connect using the SID (\"xe\" in this example), then fill "
"in both :setting:`HOST` and :setting:`PORT` like so::"
msgstr ""

# 95245bde537d4d829225915b400a8238
#: ../../ref/databases.txt:799
msgid ""
"You should either supply both :setting:`HOST` and :setting:`PORT`, or leave "
"both as empty strings. Django will use a different connect descriptor "
"depending on that choice."
msgstr ""

# 70443cb5f9aa4e34ad97e370b9b325b7
#: ../../ref/databases.txt:804
msgid "Threaded option"
msgstr ""

# 29a49bf8011341ec83dd914cbdc76318
#: ../../ref/databases.txt:806
msgid ""
"If you plan to run Django in a multithreaded environment (e.g. Apache using "
"the default MPM module on any modern operating system), then you **must** "
"set the ``threaded`` option of your Oracle database configuration to True::"
msgstr ""

# c28a8f1303054522bbac665ea8f658fd
#: ../../ref/databases.txt:814
msgid "Failure to do this may result in crashes and other odd behavior."
msgstr ""

# 016b8bacceeb4405bce9a22bc953d9ab
#: ../../ref/databases.txt:817
msgid "INSERT ... RETURNING INTO"
msgstr ""

# 721719a970074b5e85ccc7d2c9bff7b6
#: ../../ref/databases.txt:819
msgid ""
"By default, the Oracle backend uses a ``RETURNING INTO`` clause to "
"efficiently retrieve the value of an ``AutoField`` when inserting new rows.  "
"This behavior may result in a ``DatabaseError`` in certain unusual setups, "
"such as when inserting into a remote table, or into a view with an ``INSTEAD "
"OF`` trigger. The ``RETURNING INTO`` clause can be disabled by setting the "
"``use_returning_into`` option of the database configuration to False::"
msgstr ""

# d774572ec4c540e6b75278cea5ec331d
#: ../../ref/databases.txt:830
msgid ""
"In this case, the Oracle backend will use a separate ``SELECT`` query to "
"retrieve AutoField values."
msgstr ""

# 010810bfcba743bbbd47ecfd11493d66
#: ../../ref/databases.txt:834
msgid "Naming issues"
msgstr ""

# 6d955e99b0cf4e2dbcc3599f8a1d84c7
#: ../../ref/databases.txt:836
msgid ""
"Oracle imposes a name length limit of 30 characters. To accommodate this, "
"the backend truncates database identifiers to fit, replacing the final four "
"characters of the truncated name with a repeatable MD5 hash value. "
"Additionally, the backend turns database identifiers to all-uppercase."
msgstr ""

# 7a35dde3dd9d48e9b44406bda1366ada
#: ../../ref/databases.txt:841
msgid ""
"To prevent these transformations (this is usually required only when dealing "
"with legacy databases or accessing tables which belong to other users), use "
"a quoted name as the value for ``db_table``::"
msgstr ""

# c1015ef9d3654f8caeab3a77f26057ed
#: ../../ref/databases.txt:853
msgid ""
"Quoted names can also be used with Django's other supported database "
"backends; except for Oracle, however, the quotes have no effect."
msgstr ""

# bd786e5db5c242ac9deb71fc55c037b2
#: ../../ref/databases.txt:856
msgid ""
"When running ``migrate``, an ``ORA-06552`` error may be encountered if "
"certain Oracle keywords are used as the name of a model field or the value "
"of a ``db_column`` option.  Django quotes all identifiers used in queries to "
"prevent most such problems, but this error can still occur when an Oracle "
"datatype is used as a column name.  In particular, take care to avoid using "
"the names ``date``, ``timestamp``, ``number`` or ``float`` as a field name."
msgstr ""

# a20530da3f1641a786da48a3b84b08ac
#: ../../ref/databases.txt:865
msgid "NULL and empty strings"
msgstr ""

# b27badd40ffb45db956b35f51e8939ef
#: ../../ref/databases.txt:867
msgid ""
"Django generally prefers to use the empty string ('') rather than NULL, but "
"Oracle treats both identically. To get around this, the Oracle backend "
"ignores an explicit ``null`` option on fields that have the empty string as "
"a possible value and generates DDL as if ``null=True``. When fetching from "
"the database, it is assumed that a ``NULL`` value in one of these fields "
"really means the empty string, and the data is silently converted to reflect "
"this assumption."
msgstr ""

# 947f0671a27b4f889a89054c794815d5
#: ../../ref/databases.txt:876
msgid "``TextField`` limitations"
msgstr ""

# c6bf8cfb1b63423ca3926564e7c61406
#: ../../ref/databases.txt:878
msgid ""
"The Oracle backend stores ``TextFields`` as ``NCLOB`` columns. Oracle "
"imposes some limitations on the usage of such LOB columns in general:"
msgstr ""

# d0f2199b50e64244b1ca9b27db1c37a8
#: ../../ref/databases.txt:881
msgid "LOB columns may not be used as primary keys."
msgstr ""

# 11c0d6bc4166488a938c3fd9ff91f7ee
#: ../../ref/databases.txt:883
msgid "LOB columns may not be used in indexes."
msgstr ""

# 720df93b8f9c4f9d9197269a0869da38
#: ../../ref/databases.txt:885
msgid ""
"LOB columns may not be used in a ``SELECT DISTINCT`` list. This means that "
"attempting to use the ``QuerySet.distinct`` method on a model that includes "
"``TextField`` columns will result in an error when run against Oracle. As a "
"workaround, use the ``QuerySet.defer`` method in conjunction with "
"``distinct()`` to prevent ``TextField`` columns from being included in the "
"``SELECT DISTINCT`` list."
msgstr ""

# f6b80f2d700e4d3ba396842b3c5e4464
#: ../../ref/databases.txt:895
msgid "Using a 3rd-party database backend"
msgstr ""

# b22a303d49434cbc9493d02898f6826b
#: ../../ref/databases.txt:897
msgid ""
"In addition to the officially supported databases, there are backends "
"provided by 3rd parties that allow you to use other databases with Django:"
msgstr ""

# 4eb5ca2aaf9846cbbe17e6db5c60978b
#: ../../ref/databases.txt:900
msgid "`SAP SQL Anywhere`_"
msgstr ""

# d3700e63784c41c485574b038488125b
#: ../../ref/databases.txt:901
msgid "`IBM DB2`_"
msgstr ""

# 9f33f032f5ed40d2bfb39c028a0fc630
#: ../../ref/databases.txt:902
msgid "`Microsoft SQL Server`_"
msgstr ""

# 0592880cb07544d2af0d0d27f81f8a62
#: ../../ref/databases.txt:903
msgid "Firebird_"
msgstr ""

# b37e690874ca43c5b1c9058da94cd528
#: ../../ref/databases.txt:904
msgid "ODBC_"
msgstr ""

# d8228665505d42ae822595511466ce79
#: ../../ref/databases.txt:905
msgid "ADSDB_"
msgstr ""

# 8418f167892b4f638a54569f326c0a09
#: ../../ref/databases.txt:907
msgid ""
"The Django versions and ORM features supported by these unofficial backends "
"vary considerably. Queries regarding the specific capabilities of these "
"unofficial backends, along with any support queries, should be directed to "
"the support channels provided by each 3rd party project."
msgstr ""
