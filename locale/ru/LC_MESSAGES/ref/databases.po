# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2012.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-02-27 00:21\n"
"PO-Revision-Date: 2012-02-15 15:13\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# c586a9a598fc419dae88177cd52bb841
#: ../../ref/databases.txt:3
msgid "Databases"
msgstr ""

# 2c469103f40b4c8f8722bd15ef5031bd
#: ../../ref/databases.txt:5
msgid ""
"Django attempts to support as many features as possible on all database "
"backends. However, not all database backends are alike, and we've had to "
"make design decisions on which features to support and which assumptions we "
"can make safely."
msgstr ""

# afce327157f24a8598e01f8c9a033125
#: ../../ref/databases.txt:10
msgid ""
"This file describes some of the features that might be relevant to Django "
"usage. Of course, it is not intended as a replacement for server-specific "
"documentation or reference manuals."
msgstr ""

# 31727228b1a14d3f8a1b0187c5124f7f
#: ../../ref/databases.txt:17
msgid "PostgreSQL notes"
msgstr ""

# 84861503138a453f986a3801c5ce97fd
#: ../../ref/databases.txt:19
msgid "Django supports PostgreSQL 8.2 and higher."
msgstr ""

# bb7a7bc81fba419395daf79a9d448ced
#: ../../ref/databases.txt:22
msgid "PostgreSQL 8.2 to 8.2.4"
msgstr ""

# ada8d25e72974b099fa5f12cfc95864e
#: ../../ref/databases.txt:24
msgid ""
"The implementation of the population statistics aggregates ``STDDEV_POP`` "
"and ``VAR_POP`` that shipped with PostgreSQL 8.2 to 8.2.4 are `known to be "
"faulty`_. Users of these releases of PostgreSQL are advised to upgrade to "
"`Release 8.2.5`_ or later. Django will raise a ``NotImplementedError`` if "
"you attempt to use the ``StdDev(sample=False)`` or ``Variance(sample=False)"
"`` aggregate with a database backend that falls within the affected release "
"range."
msgstr ""

# 30cb07dfaa9044769304574c5423ff7a
#: ../../ref/databases.txt:35
msgid "PostgreSQL connection settings"
msgstr ""

# f6bc985e1c5c4bb8982405f26ffdb2bd
#: ../../ref/databases.txt:37
msgid "See :setting:`HOST` for details."
msgstr ""

# fa1343ffc1fd4b1285b92dd7d1eeef24
#: ../../ref/databases.txt:40
msgid "Optimizing PostgreSQL's configuration"
msgstr ""

# 70f4b63ce6ed45b8b866aa7208562559
#: ../../ref/databases.txt:42
msgid "Django needs the following parameters for its database connections:"
msgstr ""

# 2b19ed1f91c847c096a397f8cd9c3395
#: ../../ref/databases.txt:44
msgid "``client_encoding``: ``'UTF8'``,"
msgstr ""

# a7d26a3f9a3f46d59c28d48183dd091b
#: ../../ref/databases.txt:45
msgid "``default_transaction_isolation``: ``'read committed'``,"
msgstr ""

# bb1a61da0b2247049fa41ec346077b70
#: ../../ref/databases.txt:46
msgid ""
"``timezone``: ``'UTC'`` when :setting:`USE_TZ` is ``True``, value of :"
"setting:`TIME_ZONE` otherwise."
msgstr ""

# 53031fc87a8d4a9081a7bc49a881781d
#: ../../ref/databases.txt:49
msgid ""
"If these parameters already have the correct values, Django won't set them "
"for every new connection, which improves performance slightly. You can "
"configure them directly in :file:`postgresql.conf` or more conveniently per "
"database user with `ALTER ROLE`_."
msgstr ""

# 1e9064acf32a4bf28f4b32d6f808b31e
#: ../../ref/databases.txt:54
msgid ""
"Django will work just fine without this optimization, but each new "
"connection will do some additional queries to set these parameters."
msgstr ""

# d218ab6159e94fdf84bf109df2f64c93
#: ../../ref/databases.txt:60
msgid "Transaction handling"
msgstr ""

# d5fe2aa1fb074ce8b01a09730172c9b4
#: ../../ref/databases.txt:62
msgid ""
":doc:`By default </topics/db/transactions>`, Django runs with an open "
"transaction which it commits automatically when any built-in, data-altering "
"model function is called. The PostgreSQL backends normally operate the same "
"as any other Django backend in this respect."
msgstr ""

# ed3e099b6d064dcea9b067cabc21ae9b
#: ../../ref/databases.txt:70
msgid "Autocommit mode"
msgstr ""

# 1a34b63463b545d9b74d23828b6a4090
#: ../../ref/databases.txt:72
msgid ""
"If your application is particularly read-heavy and doesn't make many "
"database writes, the overhead of a constantly open transaction can sometimes "
"be noticeable. For those situations, you can configure Django to use *"
"\"autocommit\"* behavior for the connection, meaning that each database "
"operation will normally be in its own transaction, rather than having the "
"transaction extend over multiple operations. In this case, you can still "
"manually start a transaction if you're doing something that requires "
"consistency across multiple database operations. The autocommit behavior is "
"enabled by setting the ``autocommit`` key in the :setting:`OPTIONS` part of "
"your database configuration in :setting:`DATABASES`::"
msgstr ""

# 8a25afde64a74313abae25d0181f0a20
#: ../../ref/databases.txt:88
msgid ""
"In this configuration, Django still ensures that :ref:`delete() <topics-db-"
"queries-delete>` and :ref:`update() <topics-db-queries-update>` queries run "
"inside a single transaction, so that either all the affected objects are "
"changed or none of them are."
msgstr ""

# 47c20be6377e4c45b5bf79d7e9bb88b2
#: ../../ref/databases.txt:95
msgid ""
"This functionality is not the same as the :ref:`autocommit <topics-db-"
"transactions-autocommit>` decorator. That decorator is a Django-level "
"implementation that commits automatically after data changing operations. "
"The feature enabled using the :setting:`OPTIONS` option provides autocommit "
"behavior at the database adapter level. It commits after *every* operation."
msgstr ""

# 6ddc4878b43147e2b4a012b8a6144aa1
#: ../../ref/databases.txt:102
msgid ""
"If you are using this feature and performing an operation akin to delete or "
"updating that requires multiple operations, you are strongly recommended to "
"wrap you operations in manual transaction handling to ensure data "
"consistency. You should also audit your existing code for any instances of "
"this behavior before enabling this feature. It's faster, but it provides "
"less automatic protection for multi-call operations."
msgstr ""

# ccb30563456c40e6a87d40e2e826147e
#: ../../ref/databases.txt:110
msgid "Indexes for ``varchar`` and ``text`` columns"
msgstr ""

# d0ff741e979b4bcdb0abe3e6963d5f9a
#: ../../ref/databases.txt:112
msgid ""
"When specifying ``db_index=True`` on your model fields, Django typically "
"outputs a single ``CREATE INDEX`` statement.  However, if the database type "
"for the field is either ``varchar`` or ``text`` (e.g., used by "
"``CharField``, ``FileField``, and ``TextField``), then Django will create an "
"additional index that uses an appropriate `PostgreSQL operator class`_ for "
"the column.  The extra index is necessary to correctly perform lookups that "
"use the ``LIKE`` operator in their SQL, as is done with the ``contains`` and "
"``startswith`` lookup types."
msgstr ""

# 0988f645c38348c296c2a951eb2739e2
#: ../../ref/databases.txt:126
msgid "MySQL notes"
msgstr ""

# 9c7585dcec82413f819aa25740a94b9f
#: ../../ref/databases.txt:129
msgid "Version support"
msgstr ""

# 3997e354bcfa4a8caf8c59932103d52c
#: ../../ref/databases.txt:131
msgid "Django supports MySQL 5.0.3 and higher."
msgstr ""

# 1aa634dacfc74c4a9196c925c53dfa16
#: ../../ref/databases.txt:133
msgid ""
"`MySQL 5.0`_ adds the ``information_schema`` database, which contains "
"detailed data on all database schema. Django's ``inspectdb`` feature uses it."
msgstr ""

# f3559f1dead84c8f82b9ace9b514669d
#: ../../ref/databases.txt:139
msgid ""
"Django expects the database to support Unicode (UTF-8 encoding) and "
"delegates to it the task of enforcing transactions and referential "
"integrity. It is important to be aware of the fact that the two latter ones "
"aren't actually enforced by MySQL when using the MyISAM storage engine, see "
"the next section."
msgstr ""

# 7fdf1eb5f1d44199a391ec5b14fdcd86
#: ../../ref/databases.txt:150
msgid "Storage engines"
msgstr ""

# 22a83eadf8604bf7b35ab72dac128029
#: ../../ref/databases.txt:152
msgid ""
"MySQL has several `storage engines`_ (previously called table types). You "
"can change the default storage engine in the server configuration."
msgstr ""

# 520fd7fc388a4ade846f92734cd28285
#: ../../ref/databases.txt:155
msgid ""
"Until MySQL 5.5.4, the default engine was MyISAM_ [#]_. The main drawbacks "
"of MyISAM are that it doesn't support transactions or enforce foreign-key "
"constraints. On the plus side, it's currently the only engine that supports "
"full-text indexing and searching."
msgstr ""

# 2430c4f457174be8a2c2d29179a5b1ce
#: ../../ref/databases.txt:160
msgid ""
"Since MySQL 5.5.5, the default storage engine is InnoDB_. This engine is "
"fully transactional and supports foreign key references. It's probably the "
"best choice at this point."
msgstr ""

# 01d61b01068f4af19c2a41b2da27aae7
#: ../../ref/databases.txt:164
msgid ""
"If you upgrade an existing project to MySQL 5.5.5 and subsequently add some "
"tables, ensure that your tables are using the same storage engine (i.e. "
"MyISAM vs. InnoDB). Specifically, if tables that have a ``ForeignKey`` "
"between them use different storage engines, you may see an error like the "
"following when running ``syncdb``::"
msgstr ""

# 2f14b6fdc6ab4cd2bdd02dedd5dcac93
#: ../../ref/databases.txt:178
msgid ""
"Unless this was changed by the packager of your MySQL package. We've had "
"reports that the Windows Community Server installer sets up InnoDB as the "
"default storage engine, for example."
msgstr ""

# ff7ed08e70794151a8f5bbaf1ef42da2
#: ../../ref/databases.txt:183
msgid "MySQLdb"
msgstr ""

# 155921b4f75d4a3aab3985134ff44207
#: ../../ref/databases.txt:185
msgid ""
"`MySQLdb`_ is the Python interface to MySQL. Version 1.2.1p2 or later is "
"required for full MySQL support in Django."
msgstr ""

# 9f13a60182fe4bb8bc8be2eb4ecbaa0e
#: ../../ref/databases.txt:189
msgid ""
"If you see ``ImportError: cannot import name ImmutableSet`` when trying to "
"use Django, your MySQLdb installation may contain an outdated ``sets.py`` "
"file that conflicts with the built-in module of the same name from Python "
"2.4 and later. To fix this, verify that you have installed MySQLdb version "
"1.2.1p2 or newer, then delete the ``sets.py`` file in the MySQLdb directory "
"that was left by an earlier version."
msgstr ""

# cdfa892660e14e72ac041e7879d85d33
#: ../../ref/databases.txt:199
msgid "Creating your database"
msgstr ""

# 95a145f3bbbe47f4b298850c0db23f5c
#: ../../ref/databases.txt:201
msgid ""
"You can `create your database`_ using the command-line tools and this SQL::"
msgstr ""

# 6738cfef46d24d2b9f9ad2b8020bdf9a
#: ../../ref/databases.txt:205
msgid "This ensures all tables and columns will use UTF-8 by default."
msgstr ""

# b54c56a1186f45fe87a45aca5c416d78
#: ../../ref/databases.txt:212
msgid "Collation settings"
msgstr ""

# cb00b5b193324428923ad956b843cc1e
#: ../../ref/databases.txt:214
msgid ""
"The collation setting for a column controls the order in which data is "
"sorted as well as what strings compare as equal. It can be set on a database-"
"wide level and also per-table and per-column. This is `documented "
"thoroughly`_ in the MySQL documentation. In all cases, you set the collation "
"by directly manipulating the database tables; Django doesn't provide a way "
"to set this on the model definition."
msgstr ""

# 65e8fb678b2b4b54bd123594c2c52b7d
#: ../../ref/databases.txt:223
msgid ""
"By default, with a UTF-8 database, MySQL will use the "
"``utf8_general_ci_swedish`` collation. This results in all string equality "
"comparisons being done in a *case-insensitive* manner. That is, ``\"Fred\"`` "
"and ``\"freD\"`` are considered equal at the database level. If you have a "
"unique constraint on a field, it would be illegal to try to insert both ``"
"\"aa\"`` and ``\"AA\"`` into the same column, since they compare as equal "
"(and, hence, non-unique) with the default collation."
msgstr ""

# 7757513fc69041658f74ac30e63eb506
#: ../../ref/databases.txt:231
msgid ""
"In many cases, this default will not be a problem. However, if you really "
"want case-sensitive comparisons on a particular column or table, you would "
"change the column or table to use the ``utf8_bin`` collation. The main thing "
"to be aware of in this case is that if you are using MySQLdb 1.2.2, the "
"database backend in Django will then return bytestrings (instead of unicode "
"strings) for any character fields it receive from the database. This is a "
"strong variation from Django's normal practice of *always* returning unicode "
"strings. It is up to you, the developer, to handle the fact that you will "
"receive bytestrings if you configure your table(s) to use ``utf8_bin`` "
"collation. Django itself should mostly work smoothly with such columns "
"(except for the ``contrib.sessions`` ``Session`` and ``contrib.admin`` "
"``LogEntry`` tables described below), but your code must be prepared to call "
"``django.utils.encoding.smart_text()`` at times if it really wants to work "
"with consistent data -- Django will not do this for you (the database "
"backend layer and the model population layer are separated internally so the "
"database layer doesn't know it needs to make this conversion in this one "
"particular case)."
msgstr ""

# 909132f026134fc79260e5fb3b357b28
#: ../../ref/databases.txt:248
msgid ""
"If you're using MySQLdb 1.2.1p2, Django's standard :class:`~django.db.models."
"CharField` class will return unicode strings even with ``utf8_bin`` "
"collation. However, :class:`~django.db.models.TextField` fields will be "
"returned as an ``array.array`` instance (from Python's standard ``array`` "
"module). There isn't a lot Django can do about that, since, again, the "
"information needed to make the necessary conversions isn't available when "
"the data is read in from the database. This problem was `fixed in MySQLdb "
"1.2.2`_, so if you want to use :class:`~django.db.models.TextField` with "
"``utf8_bin`` collation, upgrading to version 1.2.2 and then dealing with the "
"bytestrings (which shouldn't be too difficult) as described above is the "
"recommended solution."
msgstr ""

# 10151229b64e4cd4abd242d8a0bc559c
#: ../../ref/databases.txt:260
msgid ""
"Should you decide to use ``utf8_bin`` collation for some of your tables with "
"MySQLdb 1.2.1p2 or 1.2.2, you should still use ``utf8_collation_ci_swedish`` "
"(the default) collation for the ``django.contrib.sessions.models.Session`` "
"table (usually called ``django_session``) and the ``django.contrib.admin."
"models.LogEntry`` table (usually called ``django_admin_log``). Those are the "
"two standard tables that use :class:`~django.db.models.TextField` internally."
msgstr ""

# 1c9f0938d39b4b48a099827998e1e6c4
# 176c663a236d41228e00c0f4c5cc510c
#: ../../ref/databases.txt:271 ../../ref/databases.txt:598
msgid "Connecting to the database"
msgstr ""

# 926d139dfc2e47409c0ea793c1ff5f80
#: ../../ref/databases.txt:273
msgid "Refer to the :doc:`settings documentation </ref/settings>`."
msgstr ""

# 37738feab7d04b759de6a8245f9ce91e
#: ../../ref/databases.txt:275
msgid "Connection settings are used in this order:"
msgstr ""

# 89a3b3f73f684b11ada9e92c4132738b
#: ../../ref/databases.txt:277
msgid ":setting:`OPTIONS`."
msgstr ""

# a0cf6e193a30472ca57311b6287d1c9e
#: ../../ref/databases.txt:278
msgid ""
":setting:`NAME`, :setting:`USER`, :setting:`PASSWORD`, :setting:`HOST`, :"
"setting:`PORT`"
msgstr ""

# 49c0d71d9df74382b4304c18fd09600b
#: ../../ref/databases.txt:280
msgid "MySQL option files."
msgstr ""

# a623019f8b9c4dd49b5437e48ab07ada
#: ../../ref/databases.txt:282
msgid ""
"In other words, if you set the name of the database in :setting:`OPTIONS`, "
"this will take precedence over :setting:`NAME`, which would override "
"anything in a `MySQL option file`_."
msgstr ""

# a82680eea99f47fcabd09d8c492022c3
#: ../../ref/databases.txt:286
msgid "Here's a sample configuration which uses a MySQL option file::"
msgstr ""

# 3611861e0060407e938efd7ca1e6af74
#: ../../ref/databases.txt:306
msgid ""
"Several other MySQLdb connection options may be useful, such as ``ssl``, "
"``use_unicode``, ``init_command``, and ``sql_mode``. Consult the `MySQLdb "
"documentation`_ for more details."
msgstr ""

# 217308a487e84954a0959f6448cf1c33
#: ../../ref/databases.txt:314
msgid "Creating your tables"
msgstr ""

# 6483fb9c488c4a5ca7c1aab9be402b0e
#: ../../ref/databases.txt:316
msgid ""
"When Django generates the schema, it doesn't specify a storage engine, so "
"tables will be created with whatever default storage engine your database "
"server is configured for. The easiest solution is to set your database "
"server's default storage engine to the desired engine."
msgstr ""

# 125e3b961560407bb9c8888364c4bba4
#: ../../ref/databases.txt:321
msgid ""
"If you're using a hosting service and can't change your server's default "
"storage engine, you have a couple of options."
msgstr ""

# 12a7c9c979d54bdba2ecf64ad266e460
#: ../../ref/databases.txt:324
msgid ""
"After the tables are created, execute an ``ALTER TABLE`` statement to "
"convert a table to a new storage engine (such as InnoDB)::"
msgstr ""

# d8d09c00192c4bcc8b8bfcc2dd80e3e6
#: ../../ref/databases.txt:329
msgid "This can be tedious if you have a lot of tables."
msgstr ""

# 398f673dc5da4727b62c7f6e5ef9d849
#: ../../ref/databases.txt:331
msgid ""
"Another option is to use the ``init_command`` option for MySQLdb prior to "
"creating your tables::"
msgstr ""

# 8538c3ef9240417e9bc69776573dde26
#: ../../ref/databases.txt:338
msgid ""
"This sets the default storage engine upon connecting to the database. After "
"your tables have been created, you should remove this option as it adds a "
"query that is only needed during table creation to each database connection."
msgstr ""

# 88b1252ee7b947c9a35ec8cd7276c3a1
#: ../../ref/databases.txt:343
msgid ""
"Another method for changing the storage engine is described in "
"AlterModelOnSyncDB_."
msgstr ""

# fa8a014d4c204efca8768f3e3787cc65
#: ../../ref/databases.txt:349
msgid "Table names"
msgstr ""

# abea8b81741141ac89eee810483c3cb0
#: ../../ref/databases.txt:351
msgid ""
"There are `known issues`_ in even the latest versions of MySQL that can "
"cause the case of a table name to be altered when certain SQL statements are "
"executed under certain conditions. It is recommended that you use lowercase "
"table names, if possible, to avoid any problems that might arise from this "
"behavior. Django uses lowercase table names when it auto-generates table "
"names from models, so this is mainly a consideration if you are overriding "
"the table name via the :class:`~django.db.models.Options.db_table` parameter."
msgstr ""

# cfc6c5866bdd4058becca48026d77e6d
#: ../../ref/databases.txt:362
msgid "Savepoints"
msgstr ""

# eb4410f08053445f8597eba75b65cc74
#: ../../ref/databases.txt:364
msgid ""
"Both the Django ORM and MySQL (when using the InnoDB :ref:`storage engine "
"<mysql-storage-engines>`) support database :ref:`savepoints <topics-db-"
"transactions-savepoints>`, but this feature wasn't available in Django until "
"version 1.4 when such supports was added."
msgstr ""

# 5b85f4292560406cb6375da1ffb29b55
#: ../../ref/databases.txt:369
msgid ""
"If you use the MyISAM storage engine please be aware of the fact that you "
"will receive database-generated errors if you try to use the :ref:`savepoint-"
"related methods of the transactions API <topics-db-transactions-"
"savepoints>`. The reason for this is that detecting the storage engine of a "
"MySQL database/table is an expensive operation so it was decided it isn't "
"worth to dynamically convert these methods in no-op's based in the results "
"of such detection."
msgstr ""

# 613fe0b08dfc42308264d832166cc1ea
#: ../../ref/databases.txt:377
msgid "Notes on specific fields"
msgstr ""

# dec78d4d90b649cc8b9286ac8a1d002f
#: ../../ref/databases.txt:380
msgid "Character fields"
msgstr ""

# 610bd42fc85346ee85a323ad8c4e2e9f
#: ../../ref/databases.txt:382
msgid ""
"Any fields that are stored with ``VARCHAR`` column types have their "
"``max_length`` restricted to 255 characters if you are using ``unique=True`` "
"for the field. This affects :class:`~django.db.models.CharField`, :class:"
"`~django.db.models.SlugField` and :class:`~django.db.models."
"CommaSeparatedIntegerField`."
msgstr ""

# cf82d630a6f346609370da677649ec3d
#: ../../ref/databases.txt:389
msgid "DateTime fields"
msgstr ""

# 89c5c6aa112d4b2f8a218af4403e25ac
#: ../../ref/databases.txt:391
msgid ""
"MySQL does not have a timezone-aware column type. If an attempt is made to "
"store a timezone-aware ``time`` or ``datetime`` to a :class:`~django.db."
"models.TimeField` or :class:`~django.db.models.DateTimeField` respectively, "
"a ``ValueError`` is raised rather than truncating data."
msgstr ""

# 3353dfe2492b4ccfbf3bbc52ba4de4af
#: ../../ref/databases.txt:396
msgid ""
"MySQL does not store fractions of seconds. Fractions of seconds are "
"truncated to zero when the time is stored."
msgstr ""

# 98debd2f8a8e46d7b27a0b681672a0ff
#: ../../ref/databases.txt:400
msgid "Row locking with ``QuerySet.select_for_update()``"
msgstr ""

# 99787140938942d6af6f4707757297d6
#: ../../ref/databases.txt:402
msgid ""
"MySQL does not support the ``NOWAIT`` option to the ``SELECT ... FOR "
"UPDATE`` statement. If ``select_for_update()`` is used with ``nowait=True`` "
"then a ``DatabaseError`` will be raised."
msgstr ""

# 65f1b72f33864d42918dd946b9b52aa7
#: ../../ref/databases.txt:409
msgid "SQLite notes"
msgstr ""

# 8a844898e3804aa7a98fbbb0ca326d32
#: ../../ref/databases.txt:411
msgid ""
"SQLite_ provides an excellent development alternative for applications that "
"are predominantly read-only or require a smaller installation footprint. As "
"with all database servers, though, there are some differences that are "
"specific to SQLite that you should be aware of."
msgstr ""

# f5e3090499cb4e769c98d2b73d2ea739
#: ../../ref/databases.txt:421
msgid "Substring matching and case sensitivity"
msgstr ""

# f72a76b1283f4447b6d0d7d5574bf5bb
#: ../../ref/databases.txt:423
msgid ""
"For all SQLite versions, there is some slightly counter-intuitive behavior "
"when attempting to match some types of strings.  These are triggered when "
"using the :lookup:`iexact` or :lookup:`contains` filters in Querysets. The "
"behavior splits into two cases:"
msgstr ""

# 1b00a38d5fb441bcbab9ad0995841404
#: ../../ref/databases.txt:428
msgid ""
"1. For substring matching, all matches are done case-insensitively. That is "
"a filter such as ``filter(name__contains=\"aa\")`` will match a name of ``"
"\"Aabb\"``."
msgstr ""

# 92491c4e2aaf4efe8b8463160fbf08d1
#: ../../ref/databases.txt:431
msgid ""
"2. For strings containing characters outside the ASCII range, all exact "
"string matches are performed case-sensitively, even when the case-"
"insensitive options are passed into the query. So the :lookup:`iexact` "
"filter will behave exactly the same as the :lookup:`exact` filter in these "
"cases."
msgstr ""

# 023e4b4bb53a4da6954d3dc138bc27a9
#: ../../ref/databases.txt:436
msgid ""
"Some possible workarounds for this are `documented at sqlite.org`_, but they "
"aren't utilised by the default SQLite backend in Django, as incorporating "
"them would be fairly difficult to do robustly. Thus, Django exposes the "
"default SQLite behavior and you should be aware of this when doing case-"
"insensitive or substring filtering."
msgstr ""

# da65651abe5e4ed59e20158124955965
#: ../../ref/databases.txt:445
msgid "SQLite 3.3.6 or newer strongly recommended"
msgstr ""

# 9d7b7c3e1e5b45c4a2ff508594360286
#: ../../ref/databases.txt:447
msgid "Versions of SQLite 3.3.5 and older contains the following bugs:"
msgstr ""

# 9ea61e284c694161bac1ac2fff6c1741
#: ../../ref/databases.txt:449
msgid ""
"A bug when `handling`_ ``ORDER BY`` parameters. This can cause problems when "
"you use the ``select`` parameter for the ``extra()`` QuerySet method. The "
"bug can be identified by the error message ``OperationalError: ORDER BY "
"terms must not be non-integer constants``."
msgstr ""

# 4eaaf0d5c04b4239b6c8839924140a98
#: ../../ref/databases.txt:454
msgid ""
"A bug when handling `aggregation`_ together with DateFields and "
"DecimalFields."
msgstr ""

# 153c9ce68a1641a89c8a928f06f2d69f
#: ../../ref/databases.txt:460
msgid ""
"SQLite 3.3.6 was released in April 2006, so most current binary "
"distributions for different platforms include newer version of SQLite usable "
"from Python through either the ``pysqlite2`` or the ``sqlite3`` modules."
msgstr ""

# d61d6f4f038a4793a007709e0ca367b7
#: ../../ref/databases.txt:465
msgid "Version 3.5.9"
msgstr ""

# cf33c0311227450aba84e605372c2da0
#: ../../ref/databases.txt:467
msgid ""
"The Ubuntu \"Intrepid Ibex\" (8.10) SQLite 3.5.9-3 package contains a bug "
"that causes problems with the evaluation of query expressions. If you are "
"using Ubuntu \"Intrepid Ibex\", you will need to update the package to "
"version 3.5.9-3ubuntu1 or newer (recommended) or find an alternate source "
"for SQLite packages, or install SQLite from source."
msgstr ""

# 8afb4207f9324102adbad1f1b3aed553
#: ../../ref/databases.txt:473
msgid ""
"At one time, Debian Lenny shipped with the same malfunctioning SQLite "
"3.5.9-3 package. However the Debian project has subsequently issued updated "
"versions of the SQLite package that correct these bugs. If you find you are "
"getting unexpected results under Debian, ensure you have updated your SQLite "
"package to 3.5.9-5 or later."
msgstr ""

# ccb1e7ee15724bbeabeacca1e62627d5
#: ../../ref/databases.txt:479
msgid ""
"The problem does not appear to exist with other versions of SQLite packaged "
"with other operating systems."
msgstr ""

# c115d6f309b541ac8c65eaf567fed69a
#: ../../ref/databases.txt:483
msgid "Version 3.6.2"
msgstr ""

# 66f49d4f52f34bb88a29c4cb625b57f2
#: ../../ref/databases.txt:485
msgid ""
"SQLite version 3.6.2 (released August 30, 2008) introduced a bug into "
"``SELECT DISTINCT`` handling that is triggered by, amongst other things, "
"Django's ``DateQuerySet`` (returned by the ``dates()`` method on a queryset)."
msgstr ""

# 7d095ad8d8f34197818c905fecad6467
#: ../../ref/databases.txt:489
msgid ""
"You should avoid using this version of SQLite with Django. Either upgrade to "
"3.6.3 (released September 22, 2008) or later, or downgrade to an earlier "
"version of SQLite."
msgstr ""

# 58f9b10f40764f56b48aa43b2b875731
#: ../../ref/databases.txt:496
msgid "Using newer versions of the SQLite DB-API 2.0 driver"
msgstr ""

# 4a5d1af5f15c4db599bd189e69fa03c8
#: ../../ref/databases.txt:498
msgid ""
"For versions of Python 2.5 or newer that include ``sqlite3`` in the standard "
"library Django will now use a ``pysqlite2`` interface in preference to "
"``sqlite3`` if it finds one is available."
msgstr ""

# ac73d13142f340de89d184ece86bd3c6
#: ../../ref/databases.txt:502
msgid ""
"This provides the ability to upgrade both the DB-API 2.0 interface or SQLite "
"3 itself to versions newer than the ones included with your particular "
"Python binary distribution, if needed."
msgstr ""

# 02441a738ba34954b51578e9b6f4bb6f
#: ../../ref/databases.txt:507
msgid "\"Database is locked\" errors"
msgstr ""

# 572d1b48d40e49aeab0adac1f8766e98
#: ../../ref/databases.txt:509
msgid ""
"SQLite is meant to be a lightweight database, and thus can't support a high "
"level of concurrency. ``OperationalError: database is locked`` errors "
"indicate that your application is experiencing more concurrency than "
"``sqlite`` can handle in default configuration. This error means that one "
"thread or process has an exclusive lock on the database connection and "
"another thread timed out waiting for the lock the be released."
msgstr ""

# cc3bc9561a4d4387bdb26e3dc84535a5
#: ../../ref/databases.txt:516
msgid ""
"Python's SQLite wrapper has a default timeout value that determines how long "
"the second thread is allowed to wait on the lock before it times out and "
"raises the ``OperationalError: database is locked`` error."
msgstr ""

# 9848702c914940efabe623f57fcd5ab9
#: ../../ref/databases.txt:521
msgid "If you're getting this error, you can solve it by:"
msgstr ""

# c8a9678f0b1e4bae8ba8ce71915579b7
#: ../../ref/databases.txt:523
msgid ""
"Switching to another database backend. At a certain point SQLite becomes too "
"\"lite\" for real-world applications, and these sorts of concurrency errors "
"indicate you've reached that point."
msgstr ""

# 346d5a36dc274aa4b5ea81825658f272
#: ../../ref/databases.txt:527
msgid ""
"Rewriting your code to reduce concurrency and ensure that database "
"transactions are short-lived."
msgstr ""

# c2c5b5f1da194469959488ab20f1b3c9
#: ../../ref/databases.txt:530
msgid ""
"Increase the default timeout value by setting the ``timeout`` database "
"option option::"
msgstr ""

# 02f8f4bc09594f8dbd6eeb5d60d7d793
#: ../../ref/databases.txt:539
msgid ""
"This will simply make SQLite wait a bit longer before throwing \"database is "
"locked\" errors; it won't really do anything to solve them."
msgstr ""

# a13e2fc148224ea5a4d91311ab531296
#: ../../ref/databases.txt:543
msgid "``QuerySet.select_for_update()`` not supported"
msgstr ""

# d2ac40e89a3a41a6b87a8bf0a2eeadff
#: ../../ref/databases.txt:545
msgid ""
"SQLite does not support the ``SELECT ... FOR UPDATE`` syntax. Calling it "
"will have no effect."
msgstr ""

# d1e554ff9a74418e9fea2738612ee988
#: ../../ref/databases.txt:551
msgid "Parameters not quoted in ``connection.queries``"
msgstr ""

# 7981b6a946624ee38274c4d321dd323e
#: ../../ref/databases.txt:553
msgid ""
"``sqlite3`` does not provide a way to retrieve the SQL after quoting and "
"substituting the parameters. Instead, the SQL in ``connection.queries`` is "
"rebuilt with a simple string interpolation. It may be incorrect. Make sure "
"you add quotes where necessary before copying a query into a SQLite shell."
msgstr ""

# 46c8788e1cf5420f9b327abed04f6c09
#: ../../ref/databases.txt:561
msgid "Oracle notes"
msgstr ""

# 82e0ed79785c4c91995744d64439f4f3
#: ../../ref/databases.txt:563
msgid ""
"Django supports `Oracle Database Server`_ versions 9i and higher. Oracle "
"version 10g or later is required to use Django's ``regex`` and ``iregex`` "
"query operators. You will also need at least version 4.3.1 of the "
"`cx_Oracle`_ Python driver."
msgstr ""

# 3b072b9a6fb14a318a39d1b198370821
#: ../../ref/databases.txt:568
msgid ""
"Note that due to a Unicode-corruption bug in ``cx_Oracle`` 5.0, that version "
"of the driver should **not** be used with Django; ``cx_Oracle`` 5.0.1 "
"resolved this issue, so if you'd like to use a more recent ``cx_Oracle``, "
"use version 5.0.1."
msgstr ""

# d9e71cc51bd542a48ec5a70902a1b877
#: ../../ref/databases.txt:573
msgid ""
"``cx_Oracle`` 5.0.1 or greater can optionally be compiled with the "
"``WITH_UNICODE`` environment variable.  This is recommended but not required."
msgstr ""

# 5d2018a82c2e4b4db4a84d83efd3f54e
#: ../../ref/databases.txt:580
msgid ""
"In order for the ``python manage.py syncdb`` command to work, your Oracle "
"database user must have privileges to run the following commands:"
msgstr ""

# bd49722b791c4be18f563e5a6cd8627c
#: ../../ref/databases.txt:583
msgid "CREATE TABLE"
msgstr ""

# a061e1814b4549948df9812a22101ec7
#: ../../ref/databases.txt:584
msgid "CREATE SEQUENCE"
msgstr ""

# 8274a4e4912b44f7bdeb9aefc6507fd7
#: ../../ref/databases.txt:585
msgid "CREATE PROCEDURE"
msgstr ""

# ef47a55683ee4403b5e19773030967c0
#: ../../ref/databases.txt:586
msgid "CREATE TRIGGER"
msgstr ""

# 8a7fc784230a4cce8688c254e6bdd83e
#: ../../ref/databases.txt:588
msgid ""
"To run Django's test suite, the user needs these *additional* privileges:"
msgstr ""

# e9e0c85fd6f04aa4a96de9b5a6bf9534
#: ../../ref/databases.txt:590
msgid "CREATE USER"
msgstr ""

# 8f6bb7c9174e47689b33ba4459a43e62
#: ../../ref/databases.txt:591
msgid "DROP USER"
msgstr ""

# dbbc47a583de4e54b1ebc2cff5e44024
#: ../../ref/databases.txt:592
msgid "CREATE TABLESPACE"
msgstr ""

# b579bd2de96b49e1a3a723f52205219c
#: ../../ref/databases.txt:593
msgid "DROP TABLESPACE"
msgstr ""

# 2aa0c278de814db199b4949c37ead332
#: ../../ref/databases.txt:594
msgid "CONNECT WITH ADMIN OPTION"
msgstr ""

# 5f400a7b02eb4384bb414e1e446580dc
#: ../../ref/databases.txt:595
msgid "RESOURCE WITH ADMIN OPTION"
msgstr ""

# 06ba3c1b02e3449c8e2b93eb47a12a0f
#: ../../ref/databases.txt:600
msgid ""
"Your Django settings.py file should look something like this for Oracle::"
msgstr ""

# 447fe8596c8447c68ad156f2d5c5fdd7
#: ../../ref/databases.txt:614
msgid ""
"If you don't use a ``tnsnames.ora`` file or a similar naming method that "
"recognizes the SID (\"xe\" in this example), then fill in both :setting:"
"`HOST` and :setting:`PORT` like so::"
msgstr ""

# a2548d34c4324d88977c48fc816952ab
#: ../../ref/databases.txt:629
msgid ""
"You should supply both :setting:`HOST` and :setting:`PORT`, or leave both as "
"empty strings."
msgstr ""

# 70443cb5f9aa4e34ad97e370b9b325b7
#: ../../ref/databases.txt:633
msgid "Threaded option"
msgstr ""

# 005308a6bb064e22bf5ede00e00f0395
#: ../../ref/databases.txt:635
msgid ""
"If you plan to run Django in a multithreaded environment (e.g. Apache in "
"Windows using the default MPM module), then you **must** set the "
"``threaded`` option of your Oracle database configuration to True::"
msgstr ""

# c28a8f1303054522bbac665ea8f658fd
#: ../../ref/databases.txt:643
msgid "Failure to do this may result in crashes and other odd behavior."
msgstr ""

# 016b8bacceeb4405bce9a22bc953d9ab
#: ../../ref/databases.txt:646
msgid "INSERT ... RETURNING INTO"
msgstr ""

# 721719a970074b5e85ccc7d2c9bff7b6
#: ../../ref/databases.txt:648
msgid ""
"By default, the Oracle backend uses a ``RETURNING INTO`` clause to "
"efficiently retrieve the value of an ``AutoField`` when inserting new rows.  "
"This behavior may result in a ``DatabaseError`` in certain unusual setups, "
"such as when inserting into a remote table, or into a view with an ``INSTEAD "
"OF`` trigger. The ``RETURNING INTO`` clause can be disabled by setting the "
"``use_returning_into`` option of the database configuration to False::"
msgstr ""

# d774572ec4c540e6b75278cea5ec331d
#: ../../ref/databases.txt:659
msgid ""
"In this case, the Oracle backend will use a separate ``SELECT`` query to "
"retrieve AutoField values."
msgstr ""

# 010810bfcba743bbbd47ecfd11493d66
#: ../../ref/databases.txt:663
msgid "Naming issues"
msgstr ""

# 2c59298fef524af68b6c7863a09bcc8e
#: ../../ref/databases.txt:665
msgid ""
"Oracle imposes a name length limit of 30 characters. To accommodate this, "
"the backend truncates database identifiers to fit, replacing the final four "
"characters of the truncated name with a repeatable MD5 hash value."
msgstr ""

# 5aa152325d52438aa7277e08df3d440b
#: ../../ref/databases.txt:669
msgid ""
"When running syncdb, an ``ORA-06552`` error may be encountered if certain "
"Oracle keywords are used as the name of a model field or the value of a "
"``db_column`` option.  Django quotes all identifiers used in queries to "
"prevent most such problems, but this error can still occur when an Oracle "
"datatype is used as a column name.  In particular, take care to avoid using "
"the names ``date``, ``timestamp``, ``number`` or ``float`` as a field name."
msgstr ""

# a20530da3f1641a786da48a3b84b08ac
#: ../../ref/databases.txt:678
msgid "NULL and empty strings"
msgstr ""

# b27badd40ffb45db956b35f51e8939ef
#: ../../ref/databases.txt:680
msgid ""
"Django generally prefers to use the empty string ('') rather than NULL, but "
"Oracle treats both identically. To get around this, the Oracle backend "
"ignores an explicit ``null`` option on fields that have the empty string as "
"a possible value and generates DDL as if ``null=True``. When fetching from "
"the database, it is assumed that a ``NULL`` value in one of these fields "
"really means the empty string, and the data is silently converted to reflect "
"this assumption."
msgstr ""

# 947f0671a27b4f889a89054c794815d5
#: ../../ref/databases.txt:689
msgid "``TextField`` limitations"
msgstr ""

# c6bf8cfb1b63423ca3926564e7c61406
#: ../../ref/databases.txt:691
msgid ""
"The Oracle backend stores ``TextFields`` as ``NCLOB`` columns. Oracle "
"imposes some limitations on the usage of such LOB columns in general:"
msgstr ""

# d0f2199b50e64244b1ca9b27db1c37a8
#: ../../ref/databases.txt:694
msgid "LOB columns may not be used as primary keys."
msgstr ""

# 11c0d6bc4166488a938c3fd9ff91f7ee
#: ../../ref/databases.txt:696
msgid "LOB columns may not be used in indexes."
msgstr ""

# 720df93b8f9c4f9d9197269a0869da38
#: ../../ref/databases.txt:698
msgid ""
"LOB columns may not be used in a ``SELECT DISTINCT`` list. This means that "
"attempting to use the ``QuerySet.distinct`` method on a model that includes "
"``TextField`` columns will result in an error when run against Oracle. As a "
"workaround, use the ``QuerySet.defer`` method in conjunction with ``distinct"
"()`` to prevent ``TextField`` columns from being included in the ``SELECT "
"DISTINCT`` list."
msgstr ""

# f6b80f2d700e4d3ba396842b3c5e4464
#: ../../ref/databases.txt:708
msgid "Using a 3rd-party database backend"
msgstr ""

# b22a303d49434cbc9493d02898f6826b
#: ../../ref/databases.txt:710
msgid ""
"In addition to the officially supported databases, there are backends "
"provided by 3rd parties that allow you to use other databases with Django:"
msgstr ""

# 172c013e0957437db3057b048ad340c6
#: ../../ref/databases.txt:713
msgid "`Sybase SQL Anywhere`_"
msgstr ""

# d3700e63784c41c485574b038488125b
#: ../../ref/databases.txt:714
msgid "`IBM DB2`_"
msgstr ""

# 3f4df7bd794b4551807f81fc51084144
#: ../../ref/databases.txt:715
msgid "`Microsoft SQL Server 2005`_"
msgstr ""

# 0592880cb07544d2af0d0d27f81f8a62
#: ../../ref/databases.txt:716
msgid "Firebird_"
msgstr ""

# b37e690874ca43c5b1c9058da94cd528
#: ../../ref/databases.txt:717
msgid "ODBC_"
msgstr ""

# d8228665505d42ae822595511466ce79
#: ../../ref/databases.txt:718
msgid "ADSDB_"
msgstr ""

# 8418f167892b4f638a54569f326c0a09
#: ../../ref/databases.txt:720
msgid ""
"The Django versions and ORM features supported by these unofficial backends "
"vary considerably. Queries regarding the specific capabilities of these "
"unofficial backends, along with any support queries, should be directed to "
"the support channels provided by each 3rd party project."
msgstr ""
