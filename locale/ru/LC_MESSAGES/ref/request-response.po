# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2012.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-02-29 18:30\n"
"PO-Revision-Date: 2012-02-15 15:13\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# b2211400c769428586748d8dfba69719
#: ../../ref/request-response.txt:3
msgid "Request and response objects"
msgstr ""

# d707a7dc7ed0492c89c6c8adc7bb05ea
#: ../../ref/request-response.txt:9
msgid "Quick overview"
msgstr ""

# ea2c0cde6f66467dac16fc9dd6acd8f0
#: ../../ref/request-response.txt:11
msgid ""
"Django uses request and response objects to pass state through the system."
msgstr ""

# 8606a7352091408aa2f742cbac6a3501
#: ../../ref/request-response.txt:13
msgid ""
"When a page is requested, Django creates an :class:`HttpRequest` object that "
"contains metadata about the request. Then Django loads the appropriate view, "
"passing the :class:`HttpRequest` as the first argument to the view function. "
"Each view is responsible for returning an :class:`HttpResponse` object."
msgstr ""

# edd2d48f1d084b83a4a59ed999807a9e
#: ../../ref/request-response.txt:18
msgid ""
"This document explains the APIs for :class:`HttpRequest` and :class:"
"`HttpResponse` objects."
msgstr ""

# dbb086d8d34d4c3ea8903f61ad6e1220
#: ../../ref/request-response.txt:22
msgid "HttpRequest objects"
msgstr ""

# 9b4dcb0a8ed34e46b0c5bfe8474fe5ba
# 9d903a8efd6b433f89a4010f994d4a82
# 7e3b5dd4a77341ca9528fa350f854720
#: ../../ref/request-response.txt:29 ../../ref/request-response.txt:332
#: ../../ref/request-response.txt:596
msgid "Attributes"
msgstr ""

# 92238e3faa78441889497721ee9bd36a
#: ../../ref/request-response.txt:31
msgid "All attributes except ``session`` should be considered read-only."
msgstr ""

# 77e66ca125bd41189d1933180cad000c
#: ../../ref/request-response.txt:37
msgid ""
"Before Django 1.4, ``HttpRequest.body`` was named ``HttpRequest."
"raw_post_data``."
msgstr ""

# 8f3565e3f242490f8a744ef81d736ecd
#: ../../ref/request-response.txt:40
msgid ""
"The raw HTTP request body as a byte string. This is useful for processing "
"data in different ways than conventional HTML forms: binary images, XML "
"payload etc. For processing conventional form data, use ``HttpRequest.POST``."
msgstr ""

# 06f3a60e6ed74c1083ac00d5a62d6f4a
#: ../../ref/request-response.txt:46
msgid ""
"You can also read from an HttpRequest using a file-like interface. See :meth:"
"`HttpRequest.read()`."
msgstr ""

# 9f3f098d3b064b3b8327240c1ca99b5c
#: ../../ref/request-response.txt:51
msgid ""
"A string representing the full path to the requested page, not including the "
"domain."
msgstr ""

# 0c6d1bd7e2624472a0c099aed4eb62c3
#: ../../ref/request-response.txt:54
msgid "Example: ``\"/music/bands/the_beatles/\"``"
msgstr ""

# 0b9a857a4c2b4a25ae1583ec8d2c5633
#: ../../ref/request-response.txt:58
msgid ""
"Under some Web server configurations, the portion of the URL after the host "
"name is split up into a script prefix portion and a path info portion (this "
"happens, for example, when using the ``django.root`` option with the :doc:"
"`modpython handler from Apache </howto/deployment/modpython>`). The "
"``path_info`` attribute always contains the path info portion of the path, "
"no matter what Web server is being used. Using this instead of attr:"
"`~HttpRequest.path` can make your code much easier to move between test and "
"deployment servers."
msgstr ""

# 5a2afdd5620c4daeb2e332b25e485e6d
#: ../../ref/request-response.txt:67
msgid ""
"For example, if the ``django.root`` for your application is set to ``\"/minfo"
"\"``, then ``path`` might be ``\"/minfo/music/bands/the_beatles/\"`` and "
"``path_info`` would be ``\"/music/bands/the_beatles/\"``."
msgstr ""

# 71446f4c27764092880d4c45d9d67e0e
#: ../../ref/request-response.txt:73
msgid ""
"A string representing the HTTP method used in the request. This is "
"guaranteed to be uppercase. Example::"
msgstr ""

# 0d1bb64c4cd54dd5ae638b57e0370e8b
#: ../../ref/request-response.txt:83
msgid ""
"A string representing the current encoding used to decode form submission "
"data (or ``None``, which means the :setting:`DEFAULT_CHARSET` setting is "
"used). You can write to this attribute to change the encoding used when "
"accessing the form data. Any subsequent attribute accesses (such as reading "
"from ``GET`` or ``POST``) will use the new ``encoding`` value.  Useful if "
"you know the form data is not in the :setting:`DEFAULT_CHARSET` encoding."
msgstr ""

# b1339e08a3e34441a37c80b86528a952
#: ../../ref/request-response.txt:92
msgid ""
"A dictionary-like object containing all given HTTP GET parameters. See the :"
"class:`QueryDict` documentation below."
msgstr ""

# be704d6f51414a40b034e336f9fc1921
#: ../../ref/request-response.txt:97
msgid ""
"A dictionary-like object containing all given HTTP POST parameters. See the :"
"class:`QueryDict` documentation below."
msgstr ""

# e86a4ab1cb71420b896171a8d5e38e5a
#: ../../ref/request-response.txt:100
msgid ""
"It's possible that a request can come in via POST with an empty ``POST`` "
"dictionary -- if, say, a form is requested via the POST HTTP method but does "
"not include form data. Therefore, you shouldn't use ``if request.POST`` to "
"check for use of the POST method; instead, use ``if request.method == \"POST"
"\"`` (see above)."
msgstr ""

# 223d86bfc89c401c8acd1b4d9f551e67
#: ../../ref/request-response.txt:106
msgid ""
"Note: ``POST`` does *not* include file-upload information. See ``FILES``."
msgstr ""

# 72e9200e1862433fa3c3d90ccc8c3993
#: ../../ref/request-response.txt:110
msgid ""
"For convenience, a dictionary-like object that searches ``POST`` first, then "
"``GET``. Inspired by PHP's ``$_REQUEST``."
msgstr ""

# 8379bf23eefc4a89b98ab996df67b280
#: ../../ref/request-response.txt:113
msgid ""
"For example, if ``GET = {\"name\": \"john\"}`` and ``POST = {\"age\": '34'}"
"``, ``REQUEST[\"name\"]`` would be ``\"john\"``, and ``REQUEST[\"age\"]`` "
"would be ``\"34\"``."
msgstr ""

# a2f6688c6de24485ad9b65a2ce03550f
#: ../../ref/request-response.txt:117
msgid ""
"It's strongly suggested that you use ``GET`` and ``POST`` instead of "
"``REQUEST``, because the former are more explicit."
msgstr ""

# 28616482100146c98e2ac2ca8afee863
#: ../../ref/request-response.txt:122
msgid ""
"A standard Python dictionary containing all cookies. Keys and values are "
"strings."
msgstr ""

# 3692299a62134353ab97ca819fef6773
#: ../../ref/request-response.txt:127
msgid ""
"A dictionary-like object containing all uploaded files. Each key in "
"``FILES`` is the ``name`` from the ``<input type=\"file\" name=\"\" />``. "
"Each value in ``FILES`` is an :class:`UploadedFile` as described below."
msgstr ""

# 270d997993a344449a019fab1089f310
#: ../../ref/request-response.txt:131
msgid "See :doc:`/topics/files` for more information."
msgstr ""

# 9e005f5667dd45dab8e4c6b30213ec85
#: ../../ref/request-response.txt:133
msgid ""
"Note that ``FILES`` will only contain data if the request method was POST "
"and the ``<form>`` that posted to the request had ``enctype=\"multipart/form-"
"data\"``. Otherwise, ``FILES`` will be a blank dictionary-like object."
msgstr ""

# 011f19d5b7b1427bb3931e417289aee6
#: ../../ref/request-response.txt:140
msgid ""
"A standard Python dictionary containing all available HTTP headers. "
"Available headers depend on the client and server, but here are some "
"examples:"
msgstr ""

# 1682041efc5143948fc17bfc080e3f7a
#: ../../ref/request-response.txt:144
msgid "``CONTENT_LENGTH`` -- the length of the request body (as a string)."
msgstr ""

# 4aeb3bb7edf743a5b24e4756cae2cfdd
#: ../../ref/request-response.txt:145
msgid "``CONTENT_TYPE`` -- the MIME type of the request body."
msgstr ""

# 93df98a3903945deb951a996fb71acb5
#: ../../ref/request-response.txt:146
msgid "``HTTP_ACCEPT_ENCODING`` -- Acceptable encodings for the response."
msgstr ""

# c36aa59c684f4ff7a99332b7330cf5b7
#: ../../ref/request-response.txt:147
msgid "``HTTP_ACCEPT_LANGUAGE`` -- Acceptable languages for the response."
msgstr ""

# a010b193cdf1435783caf699d2e1dc6c
#: ../../ref/request-response.txt:148
msgid "``HTTP_HOST`` -- The HTTP Host header sent by the client."
msgstr ""

# 4e7f7cba9c1d4a8da1f60ddb44b7c54f
#: ../../ref/request-response.txt:149
msgid "``HTTP_REFERER`` -- The referring page, if any."
msgstr ""

# 68d18575ea914037a3108f82c787b25e
#: ../../ref/request-response.txt:150
msgid "``HTTP_USER_AGENT`` -- The client's user-agent string."
msgstr ""

# 775afd77934344e193d88e154b4ec447
#: ../../ref/request-response.txt:151
msgid "``QUERY_STRING`` -- The query string, as a single (unparsed) string."
msgstr ""

# 5cd540f48d744cce8b191fe039c3520e
#: ../../ref/request-response.txt:152
msgid "``REMOTE_ADDR`` -- The IP address of the client."
msgstr ""

# 1a07d92ffb374bae981045f4189173da
#: ../../ref/request-response.txt:153
msgid "``REMOTE_HOST`` -- The hostname of the client."
msgstr ""

# eddb1ae03dba443aa5e8e690293e6110
#: ../../ref/request-response.txt:154
msgid "``REMOTE_USER`` -- The user authenticated by the Web server, if any."
msgstr ""

# afdb6d8598a84291b25704510b103478
#: ../../ref/request-response.txt:155
msgid "``REQUEST_METHOD`` -- A string such as ``\"GET\"`` or ``\"POST\"``."
msgstr ""

# 7b078ca04a174485b6af330fdc89fc64
#: ../../ref/request-response.txt:156
msgid "``SERVER_NAME`` -- The hostname of the server."
msgstr ""

# c7c157e789ca43a49adf50337508e96d
#: ../../ref/request-response.txt:157
msgid "``SERVER_PORT`` -- The port of the server (as a string)."
msgstr ""

# 87a2a4d6d0504153b2dc4cc0df3a8606
#: ../../ref/request-response.txt:159
msgid ""
"With the exception of ``CONTENT_LENGTH`` and ``CONTENT_TYPE``, as given "
"above, any HTTP headers in the request are converted to ``META`` keys by "
"converting all characters to uppercase, replacing any hyphens with "
"underscores and adding an ``HTTP_`` prefix to the name. So, for example, a "
"header called ``X-Bender`` would be mapped to the ``META`` key "
"``HTTP_X_BENDER``."
msgstr ""

# 62814af0b87449a0b6cdbf015fd22bca
#: ../../ref/request-response.txt:168
msgid ""
"A ``django.contrib.auth.models.User`` object representing the currently "
"logged-in user. If the user isn't currently logged in, ``user`` will be set "
"to an instance of ``django.contrib.auth.models.AnonymousUser``. You can tell "
"them apart with ``is_authenticated()``, like so::"
msgstr ""

# 224c67582a314fb8b246a6071b87a01a
#: ../../ref/request-response.txt:178
msgid ""
"``user`` is only available if your Django installation has the "
"``AuthenticationMiddleware`` activated. For more, see :doc:`/topics/auth`."
msgstr ""

# 9ddf5c73ad1341b0b9f45894cdab465d
#: ../../ref/request-response.txt:184
msgid ""
"A readable-and-writable, dictionary-like object that represents the current "
"session. This is only available if your Django installation has session "
"support activated. See the :doc:`session documentation </topics/http/"
"sessions>` for full details."
msgstr ""

# 56c0daca3ca74ecb8126f7928bab68a7
#: ../../ref/request-response.txt:191
msgid ""
"Not defined by Django itself, but will be read if other code (e.g., a custom "
"middleware class) sets it. When present, this will be used as the root "
"URLconf for the current request, overriding the :setting:`ROOT_URLCONF` "
"setting. See :ref:`how-django-processes-a-request` for details."
msgstr ""

# 08c634bbd3554176b2dca88a53fd6a3d
# 44d3adacb90c42afbf3855e352ba8cff
# 627ef7bc0af2416685b0d939ea317139
# fe37a8d1b44942299d8e0588dcf89379
#: ../../ref/request-response.txt:197 ../../ref/request-response.txt:343
#: ../../ref/request-response.txt:371 ../../ref/request-response.txt:608
msgid "Methods"
msgstr ""

# ae6e91fbc7ed489093bd4dff5e8db3eb
#: ../../ref/request-response.txt:201
msgid ""
"Returns the originating host of the request using information from the "
"``HTTP_X_FORWARDED_HOST`` (if :setting:`USE_X_FORWARDED_HOST` is enabled) "
"and ``HTTP_HOST`` headers, in that order. If they don't provide a value, the "
"method uses a combination of ``SERVER_NAME`` and ``SERVER_PORT`` as detailed "
"in :pep:`3333`."
msgstr ""

# e5a14caede72494c8ba98ccec988a5ea
#: ../../ref/request-response.txt:207
msgid "Example: ``\"127.0.0.1:8000\"``"
msgstr ""

# 19529ff87bb44d018c815e8559d64e1f
#: ../../ref/request-response.txt:209
msgid ""
"The :meth:`~HttpRequest.get_host()` method fails when the host is behind "
"multiple proxies. One solution is to use middleware to rewrite the proxy "
"headers, as in the following example::"
msgstr ""

# d664439c26354ac9ac2db4ec76e947c9
#: ../../ref/request-response.txt:231
msgid ""
"This middleware should be positionned before any other middleware that "
"relies on the value of :meth:`~HttpRequest.get_host()`, for instance :class:"
"`~django.middleware.common.CommonMiddleware` or :class:`~django.middleware."
"csrf.CsrfViewMiddleware`."
msgstr ""

# a73e20a339eb4f188e60dab4dca03a5e
#: ../../ref/request-response.txt:238
msgid "Returns the ``path``, plus an appended query string, if applicable."
msgstr ""

# b81d1d3bcd1f4eff91f0801937f0faa5
#: ../../ref/request-response.txt:240
msgid "Example: ``\"/music/bands/the_beatles/?print=true\"``"
msgstr ""

# 91b7e69ebcc34151841720ea0856082e
#: ../../ref/request-response.txt:244
msgid ""
"Returns the absolute URI form of ``location``. If no location is provided, "
"the location will be set to ``request.get_full_path()``."
msgstr ""

# 1a7e0003eed44a43a4c5f43e78a31dbb
#: ../../ref/request-response.txt:247
msgid ""
"If the location is already an absolute URI, it will not be altered. "
"Otherwise the absolute URI is built using the server variables available in "
"this request."
msgstr ""

# cf14c0a45c4c40e4ab5e36c7e4a4605c
#: ../../ref/request-response.txt:251
msgid "Example: ``\"http://example.com/music/bands/the_beatles/?print=true\"``"
msgstr ""

# 33430fc679cf40bd9c4a2bbd75e49f59
#: ../../ref/request-response.txt:257
msgid ""
"Returns a cookie value for a signed cookie, or raises a :class:`~django.core."
"signing.BadSignature` exception if the signature is no longer valid. If you "
"provide the ``default`` argument the exception will be suppressed and that "
"default value will be returned instead."
msgstr ""

# 05fec99492df41f7b27c8c53727bee69
#: ../../ref/request-response.txt:262
msgid ""
"The optional ``salt`` argument can be used to provide extra protection "
"against brute force attacks on your secret key. If supplied, the ``max_age`` "
"argument will be checked against the signed timestamp attached to the cookie "
"value to ensure the cookie is not older than ``max_age`` seconds."
msgstr ""

# 0731a5162f9e4a0289121355c35fc7f4
#: ../../ref/request-response.txt:268
msgid "For example::"
msgstr ""

# a27dd73c22054249a7b092fcc9b79d0c
#: ../../ref/request-response.txt:288
msgid ""
"See :doc:`cryptographic signing </topics/signing>` for more information."
msgstr ""

# 4b36043dc082468da1a2f2c74196b016
#: ../../ref/request-response.txt:292
msgid ""
"Returns ``True`` if the request is secure; that is, if it was made with "
"HTTPS."
msgstr ""

# 74cb2ede9a2f427f9783256918ca10be
#: ../../ref/request-response.txt:297
msgid ""
"Returns ``True`` if the request was made via an ``XMLHttpRequest``, by "
"checking the ``HTTP_X_REQUESTED_WITH`` header for the string "
"``'XMLHttpRequest'``. Most modern JavaScript libraries send this header. If "
"you write your own XMLHttpRequest call (on the browser side), you'll have to "
"set this header manually if you want ``is_ajax()`` to work."
msgstr ""

# 6a50c3808c924e42bf88ff9625b3157a
#: ../../ref/request-response.txt:311
msgid ""
"Methods implementing a file-like interface for reading from an HttpRequest "
"instance. This makes it possible to consume an incoming request in a "
"streaming fashion. A common use-case would be to process a big XML payload "
"with iterative parser without constructing a whole XML tree in memory."
msgstr ""

# 911c8fac86da453cadd9bd3149caf49d
#: ../../ref/request-response.txt:317
msgid ""
"Given this standard interface, an HttpRequest instance can be passed "
"directly to an XML parser such as ElementTree::"
msgstr ""

# f0ce286b8f3349ba9a4465dfdc80b8e4
#: ../../ref/request-response.txt:326
msgid "UploadedFile objects"
msgstr ""

# 3a52638271d44bdd947c6365fdc0c235
#: ../../ref/request-response.txt:336
msgid "The name of the uploaded file."
msgstr ""

# 55a840a681114075a66694a90a7b1b22
#: ../../ref/request-response.txt:340
msgid "The size, in bytes, of the uploaded file."
msgstr ""

# 5ff7216988ad478ca56a2758346b661e
#: ../../ref/request-response.txt:347
msgid "Returns a generator that yields sequential chunks of data."
msgstr ""

# c150daa85bd64fca96ad9cfd4c2fe7d4
#: ../../ref/request-response.txt:351
msgid "Read a number of bytes from the file."
msgstr ""

# 711a1e61babe47c3a5decdb904700425
#: ../../ref/request-response.txt:356
msgid "QueryDict objects"
msgstr ""

# 01f8070f0f3740b0b4d04c63bda6bcb0
#: ../../ref/request-response.txt:360
msgid ""
"In an :class:`HttpRequest` object, the ``GET`` and ``POST`` attributes are "
"instances of ``django.http.QueryDict``. :class:`QueryDict` is a dictionary-"
"like class customized to deal with multiple values for the same key. This is "
"necessary because some HTML form elements, notably ``<select multiple="
"\"multiple\">``, pass multiple values for the same key."
msgstr ""

# d31fbf1f884641a18b755604f31a8421
#: ../../ref/request-response.txt:366
msgid ""
"``QueryDict`` instances are immutable, unless you create a ``copy()`` of "
"them. That means you can't change attributes of ``request.POST`` and "
"``request.GET`` directly."
msgstr ""

# 3db2c973524a4f9ea4d46a6e42127d01
#: ../../ref/request-response.txt:373
msgid ""
":class:`QueryDict` implements all the standard dictionary methods, because "
"it's a subclass of dictionary. Exceptions are outlined here:"
msgstr ""

# 29b98e1eb67a46749f0b9fee7c9e7986
#: ../../ref/request-response.txt:378
msgid ""
"Returns the value for the given key. If the key has more than one value, "
"``__getitem__()`` returns the last value. Raises ``django.utils."
"datastructures.MultiValueDictKeyError`` if the key does not exist. (This is "
"a subclass of Python's standard ``KeyError``, so you can stick to catching "
"``KeyError``.)"
msgstr ""

# d3a84bfec551487997934e2312e364b9
#: ../../ref/request-response.txt:386
msgid ""
"Sets the given key to ``[value]`` (a Python list whose single element is "
"``value``). Note that this, as other dictionary functions that have side "
"effects, can only be called on a mutable ``QueryDict`` (one that was created "
"via ``copy()``)."
msgstr ""

# 3e3c0675969541f2b4c9a1858c80af95
#: ../../ref/request-response.txt:393
msgid ""
"Returns ``True`` if the given key is set. This lets you do, e.g., ``if \"foo"
"\" in request.GET``."
msgstr ""

# 4eabfed063d54473977fa650b9b062c8
#: ../../ref/request-response.txt:398
msgid ""
"Uses the same logic as ``__getitem__()`` above, with a hook for returning a "
"default value if the key doesn't exist."
msgstr ""

# de47346398824c4f91d0b92b480f27cf
#: ../../ref/request-response.txt:403
msgid ""
"Just like the standard dictionary ``setdefault()`` method, except it uses "
"``__setitem__()`` internally."
msgstr ""

# 954503e9efd24ea989dd9e200127b36e
#: ../../ref/request-response.txt:408
msgid ""
"Takes either a ``QueryDict`` or standard dictionary. Just like the standard "
"dictionary ``update()`` method, except it *appends* to the current "
"dictionary items rather than replacing them. For example::"
msgstr ""

# a83424ed41e6423c9b9775dea32ceae7
#: ../../ref/request-response.txt:422
msgid ""
"Just like the standard dictionary ``items()`` method, except this uses the "
"same last-value logic as ``__getitem__()``. For example::"
msgstr ""

# 189a8cf639dc44d4987643268e653107
#: ../../ref/request-response.txt:431
msgid ""
"Just like the standard dictionary ``iteritems()`` method. Like :meth:"
"`QueryDict.items()` this uses the same last-value logic as :meth:`QueryDict."
"__getitem__()`."
msgstr ""

# 03f3ed58510e44989b39773dde603161
#: ../../ref/request-response.txt:437
msgid ""
"Like :meth:`QueryDict.iteritems()` except it includes all values, as a list, "
"for each member of the dictionary."
msgstr ""

# 3881692539024a2cb7b1d2be8acfbaee
#: ../../ref/request-response.txt:442
msgid ""
"Just like the standard dictionary ``values()`` method, except this uses the "
"same last-value logic as ``__getitem__()``. For example::"
msgstr ""

# f7e53e42cda7442e8d3790c5393c7b83
#: ../../ref/request-response.txt:451
msgid "Just like :meth:`QueryDict.values()`, except an iterator."
msgstr ""

# 139bba7521c64487b4dfce7bf843a573
#: ../../ref/request-response.txt:453
msgid "In addition, ``QueryDict`` has the following methods:"
msgstr ""

# 9c8fe7907ae1458ba3fa810a33a18065
#: ../../ref/request-response.txt:457
msgid ""
"Returns a copy of the object, using ``copy.deepcopy()`` from the Python "
"standard library. The copy will be mutable -- that is, you can change its "
"values."
msgstr ""

# 1fcd4aaa1f624352a28fa4c6abd2f1b8
#: ../../ref/request-response.txt:463
msgid ""
"Returns the data with the requested key, as a Python list. Returns an empty "
"list if the key doesn't exist and no default value was provided. It's "
"guaranteed to return a list of some sort unless the default value was no "
"list."
msgstr ""

# 82a9458843c446c28a0970d9c4b03f15
#: ../../ref/request-response.txt:473
msgid "Sets the given key to ``list_`` (unlike ``__setitem__()``)."
msgstr ""

# d1b833d807c849f4912fad7bb8d9dd03
#: ../../ref/request-response.txt:477
msgid "Appends an item to the internal list associated with key."
msgstr ""

# 80758a8897cc403a9f39618aa6f364ba
#: ../../ref/request-response.txt:481
msgid ""
"Just like ``setdefault``, except it takes a list of values instead of a "
"single value."
msgstr ""

# dcede540b2a44fe599ae95dce55579b3
#: ../../ref/request-response.txt:486
msgid ""
"Like :meth:`items()`, except it includes all values, as a list, for each "
"member of the dictionary. For example::"
msgstr ""

# f9ccddba5f6c4a53ba8caadfe429d90c
#: ../../ref/request-response.txt:497
msgid ""
"Returns ``dict`` representation of ``QueryDict``. For every (key, list) pair "
"in ``QueryDict``, ``dict`` will have (key, item), where item is one element "
"of the list, using same logic as :meth:`QueryDict.__getitem__()`::"
msgstr ""

# 6668660d68694aada31165873281d3da
#: ../../ref/request-response.txt:507
msgid "Returns a string of the data in query-string format. Example::"
msgstr ""

# e4d8c84724014880bb72d9057e101b05
#: ../../ref/request-response.txt:516
msgid ""
"Optionally, urlencode can be passed characters which do not require "
"encoding. For example::"
msgstr ""

# a8f9e457bc3b4e8383b67a8564d7310c
#: ../../ref/request-response.txt:525
msgid "HttpResponse objects"
msgstr ""

# 2dba81b7c8ab418c951765943956e25b
#: ../../ref/request-response.txt:529
msgid ""
"In contrast to :class:`HttpRequest` objects, which are created automatically "
"by Django, :class:`HttpResponse` objects are your responsibility. Each view "
"you write is responsible for instantiating, populating and returning an :"
"class:`HttpResponse`."
msgstr ""

# 76944b68077f4e0e8f17065e62509d3b
#: ../../ref/request-response.txt:534
msgid "The :class:`HttpResponse` class lives in the :mod:`django.http` module."
msgstr ""

# 8f1215b4cfe74a7691edf0011c33cc02
#: ../../ref/request-response.txt:537
msgid "Usage"
msgstr ""

# 74239950ef1e4eeea95506cb065afd05
#: ../../ref/request-response.txt:540
msgid "Passing strings"
msgstr ""

# 3f0f6972182240e889127ff48dcc4b7e
#: ../../ref/request-response.txt:542
msgid ""
"Typical usage is to pass the contents of the page, as a string, to the :"
"class:`HttpResponse` constructor::"
msgstr ""

# 18c7278ed41945c2bd77ee2e1aa340ad
#: ../../ref/request-response.txt:549
msgid ""
"But if you want to add content incrementally, you can use ``response`` as a "
"file-like object::"
msgstr ""

# 968060a8485f42dcaac8bf67178ebedf
#: ../../ref/request-response.txt:557
msgid "Passing iterators"
msgstr ""

# 9bc135c1788e4fe490939b8c2b38bc98
#: ../../ref/request-response.txt:559
msgid ""
"Finally, you can pass ``HttpResponse`` an iterator rather than passing it "
"hard-coded strings. If you use this technique, follow these guidelines:"
msgstr ""

# 9a2519818cda4f87b9d034d1bd908995
#: ../../ref/request-response.txt:562
msgid "The iterator should return strings."
msgstr ""

# 00e3d91a3dbe4870a20241a0ddfd8f05
#: ../../ref/request-response.txt:563
msgid ""
"If an :class:`HttpResponse` has been initialized with an iterator as its "
"content, you can't use the :class:`HttpResponse` instance as a file-like "
"object. Doing so will raise ``Exception``."
msgstr ""

# 24256c8432e043ac9f8283f9c273f8f8
#: ../../ref/request-response.txt:568
msgid "Setting headers"
msgstr ""

# aec1512d314045b0aeb97b8b3d0f25fa
#: ../../ref/request-response.txt:570
msgid ""
"To set or remove a header in your response, treat it like a dictionary::"
msgstr ""

# 6e172d16d3a74fed8185828c5e9b856c
#: ../../ref/request-response.txt:576
msgid ""
"Note that unlike a dictionary, ``del`` doesn't raise ``KeyError`` if the "
"header doesn't exist."
msgstr ""

# 2c7a4d3b9d1a43aab0bc4b9e7047550f
#: ../../ref/request-response.txt:579
msgid ""
"HTTP headers cannot contain newlines. An attempt to set a header containing "
"a newline character (CR or LF) will raise ``BadHeaderError``"
msgstr ""

# f73b0241d62040288bcb23f7227db450
#: ../../ref/request-response.txt:583
msgid "Telling the browser to treat the response as a file attachment"
msgstr ""

# cccb7c730a0a481c8ac3b92956bbad91
#: ../../ref/request-response.txt:585
msgid ""
"To tell the browser to treat the response as a file attachment, use the "
"``content_type`` argument and set the ``Content-Disposition`` header. For "
"example, this is how you might return a Microsoft Excel spreadsheet::"
msgstr ""

# b34f45beac1c478f878054fc36df1ae9
#: ../../ref/request-response.txt:592
msgid ""
"There's nothing Django-specific about the ``Content-Disposition`` header, "
"but it's easy to forget the syntax, so we've included it here."
msgstr ""

# f1b9be8204af4403bddd047548ac6eb5
#: ../../ref/request-response.txt:600
msgid ""
"A string representing the content, encoded from a Unicode object if "
"necessary."
msgstr ""

# ed04331429e54e9995058732b65b9a6b
#: ../../ref/request-response.txt:605
msgid "The `HTTP Status code`_ for the response."
msgstr ""

# 6cc7098661804a12ab60f6b9f276386c
#: ../../ref/request-response.txt:612
msgid ""
"Instantiates an ``HttpResponse`` object with the given page content (a "
"string) and MIME type. The :setting:`DEFAULT_CONTENT_TYPE` is ``'text/"
"html'``."
msgstr ""

# c97e391f23d245e88381547b7fe8a733
#: ../../ref/request-response.txt:616
msgid ""
"``content`` should be an iterator or a string. If it's an iterator, it "
"should return strings, and those strings will be joined together to form the "
"content of the response. If it is not an iterator or a string, it will be "
"converted to a string when accessed."
msgstr ""

# 0f62f3e25a4f4deb8426026dd1a87a83
#: ../../ref/request-response.txt:622
msgid "``status`` is the `HTTP Status code`_ for the response."
msgstr ""

# 1f9c10b573204cc2843b67dec037d6f3
#: ../../ref/request-response.txt:624
msgid ""
"``content_type`` is an alias for ``mimetype``. Historically, this parameter "
"was only called ``mimetype``, but since this is actually the value included "
"in the HTTP ``Content-Type`` header, it can also include the character set "
"encoding, which makes it more than just a MIME type specification. If "
"``mimetype`` is specified (not ``None``), that value is used. Otherwise, "
"``content_type`` is used. If neither is given, the :setting:"
"`DEFAULT_CONTENT_TYPE` setting is used."
msgstr ""

# 1bf8ae2461954fbc9a1cddff88ab47cc
#: ../../ref/request-response.txt:634
msgid ""
"Sets the given header name to the given value. Both ``header`` and ``value`` "
"should be strings."
msgstr ""

# 148380a175954a019420735cb2e734f4
#: ../../ref/request-response.txt:639
msgid ""
"Deletes the header with the given name. Fails silently if the header doesn't "
"exist. Case-insensitive."
msgstr ""

# 3ae9d0f629d64aa29a87692fbcd5ceb3
#: ../../ref/request-response.txt:644
msgid "Returns the value for the given header name. Case-insensitive."
msgstr ""

# f74deca2d03f43b88cac9da641fa4c68
#: ../../ref/request-response.txt:648
msgid ""
"Returns ``True`` or ``False`` based on a case-insensitive check for a header "
"with the given name."
msgstr ""

# 65686736d62c4be7bc5a2f4fda2f26c5
#: ../../ref/request-response.txt:655
msgid ""
"The possibility of specifying a ``datetime.datetime`` object in ``expires``, "
"and the auto-calculation of ``max_age`` in such case was added. The "
"``httponly`` argument was also added."
msgstr ""

# 52d17aee609e40b1aeb5daec79a362c0
#: ../../ref/request-response.txt:661
msgid "The default value for httponly was changed from ``False`` to ``True``."
msgstr ""

# 69bb53d6b2f9424f935b6250253a278e
#: ../../ref/request-response.txt:663
msgid ""
"Sets a cookie. The parameters are the same as in the :class:`Cookie.Morsel` "
"object in the Python standard library."
msgstr ""

# f978aaa2fcd4427191d37413568441fd
#: ../../ref/request-response.txt:666
msgid ""
"``max_age`` should be a number of seconds, or ``None`` (default) if the "
"cookie should last only as long as the client's browser session. If "
"``expires`` is not specified, it will be calculated."
msgstr ""

# bccf04f15bbb40d0803cd4555d181499
#: ../../ref/request-response.txt:669
msgid ""
"``expires`` should either be a string in the format ``\"Wdy, DD-Mon-YY HH:MM:"
"SS GMT\"`` or a ``datetime.datetime`` object in UTC. If ``expires`` is a "
"``datetime`` object, the ``max_age`` will be calculated."
msgstr ""

# b6ab0a1bd18649ed92ecca9d9b931f84
#: ../../ref/request-response.txt:673
msgid ""
"Use ``domain`` if you want to set a cross-domain cookie. For example, "
"``domain=\".lawrence.com\"`` will set a cookie that is readable by the "
"domains www.lawrence.com, blogs.lawrence.com and calendars.lawrence.com. "
"Otherwise, a cookie will only be readable by the domain that set it."
msgstr ""

# 5c5668de6f814bcc95137d42cbb31228
#: ../../ref/request-response.txt:678
msgid ""
"Use ``httponly=True`` if you want to prevent client-side JavaScript from "
"having access to the cookie."
msgstr ""

# a22675be92944b019d2dbe2154c35a1e
#: ../../ref/request-response.txt:681
msgid ""
"HTTPOnly_ is a flag included in a Set-Cookie HTTP response header. It is not "
"part of the :rfc:`2109` standard for cookies, and it isn't honored "
"consistently by all browsers. However, when it is honored, it can be a "
"useful way to mitigate the risk of client side script accessing the "
"protected cookie data."
msgstr ""

# 13ff68d4de914b4794cba9539a35a166
#: ../../ref/request-response.txt:694
msgid ""
"Like :meth:`~HttpResponse.set_cookie()`, but :doc:`cryptographic signing </"
"topics/signing>` the cookie before setting it. Use in conjunction with :meth:"
"`HttpRequest.get_signed_cookie`. You can use the optional ``salt`` argument "
"for added key strength, but you will need to remember to pass it to the "
"corresponding :meth:`HttpRequest.get_signed_cookie` call."
msgstr ""

# ed59f014bc0d469da0b9ac43cb07a49f
#: ../../ref/request-response.txt:703
msgid ""
"Deletes the cookie with the given key. Fails silently if the key doesn't "
"exist."
msgstr ""

# 051d86635e644104a7d603b16d8099f1
#: ../../ref/request-response.txt:706
msgid ""
"Due to the way cookies work, ``path`` and ``domain`` should be the same "
"values you used in ``set_cookie()`` -- otherwise the cookie may not be "
"deleted."
msgstr ""

# 6feb846140624b55a484b5c8a6aafdb5
# c0a180efcd384baf8c81b072178310a5
# 78b376388ec24f97a6e08153f0e20285
#: ../../ref/request-response.txt:712 ../../ref/request-response.txt:716
#: ../../ref/request-response.txt:720
msgid "This method makes an :class:`HttpResponse` instance a file-like object."
msgstr ""

# 9e87c3481cf440b8b1a16e124397d2f6
#: ../../ref/request-response.txt:728
msgid "HttpResponse subclasses"
msgstr ""

# 2f1575380b2b496c8f82301a7ecaf74a
#: ../../ref/request-response.txt:730
msgid ""
"Django includes a number of ``HttpResponse`` subclasses that handle "
"different types of HTTP responses. Like ``HttpResponse``, these subclasses "
"live in :mod:`django.http`."
msgstr ""

# 8c4f9db3530a4debb7be739fa7d439fb
#: ../../ref/request-response.txt:736
msgid ""
"The constructor takes a single argument -- the path to redirect to. This can "
"be a fully qualified URL (e.g. ``'http://www.yahoo.com/search/'``) or an "
"absolute path with no domain (e.g. ``'/search/'``). Note that this returns "
"an HTTP status code 302."
msgstr ""

# 0157657a47c84ed0858743b6ab775e68
#: ../../ref/request-response.txt:743
msgid ""
"Like :class:`HttpResponseRedirect`, but it returns a permanent redirect "
"(HTTP status code 301) instead of a \"found\" redirect (status code 302)."
msgstr ""

# 08239c6d4ffb4249aa50553d31c65440
#: ../../ref/request-response.txt:748
msgid ""
"The constructor doesn't take any arguments. Use this to designate that a "
"page hasn't been modified since the user's last request (status code 304)."
msgstr ""

# d374391146a94a0e8f302b219bd8592b
#: ../../ref/request-response.txt:753
msgid "Acts just like :class:`HttpResponse` but uses a 400 status code."
msgstr ""

# 48953e6b4c06494aba3e591954c16144
#: ../../ref/request-response.txt:757
msgid "Acts just like :class:`HttpResponse` but uses a 404 status code."
msgstr ""

# 30b25e6cce064f759133e530def9ae80
#: ../../ref/request-response.txt:761
msgid "Acts just like :class:`HttpResponse` but uses a 403 status code."
msgstr ""

# d80cbfa84e954a329fea50fd7b988862
#: ../../ref/request-response.txt:765
msgid ""
"Like :class:`HttpResponse`, but uses a 405 status code. Takes a single, "
"required argument: a list of permitted methods (e.g. ``['GET', 'POST']``)."
msgstr ""

# b6ff097f8677491a949f85796e9d9ff6
#: ../../ref/request-response.txt:770
msgid "Acts just like :class:`HttpResponse` but uses a 410 status code."
msgstr ""

# 19e977b63fa3498688ca8149345d49d8
#: ../../ref/request-response.txt:774
msgid "Acts just like :class:`HttpResponse` but uses a 500 status code."
msgstr ""

# 43a326703bfb40e7a43460cc0917aaf9
#: ../../ref/request-response.txt:778
msgid ""
"If a custom subclass of :class:`HttpResponse` implements a ``render`` "
"method, Django will treat it as emulating a :class:`~django.template."
"response.SimpleTemplateResponse`, and the ``render`` method must itself "
"return a valid response object."
msgstr ""
