# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2013.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-11-07 10:34\n"
"PO-Revision-Date: 2013-02-27 00:21\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# 880e92cbd9834c9981803b2e693d5701
#: ../../ref/urls.txt:3
msgid "``django.conf.urls`` utility functions"
msgstr ""

# 9e2ac309688e4368abfd118744d6ec99
#: ../../ref/urls.txt:8
msgid "patterns()"
msgstr ""

# 742dbc18982940f384cd5a5745009660
#: ../../ref/urls.txt:12
msgid ""
"A function that takes a prefix, and an arbitrary number of URL patterns, and "
"returns a list of URL patterns in the format Django needs."
msgstr ""

# 224492f51a8d4fb8b01814e459f0545a
#: ../../ref/urls.txt:15
msgid ""
"The first argument to ``patterns()`` is a string ``prefix``. See :ref:`The "
"view prefix <urlpatterns-view-prefix>`."
msgstr ""

# 16d45e494af440559c9a063177c564f0
#: ../../ref/urls.txt:18
msgid "The remaining arguments should be tuples in this format::"
msgstr ""

# 17b6998d31c74ab59fad3514f3dfe999
#: ../../ref/urls.txt:22
msgid ""
"The ``optional_dictionary`` and ``optional_name`` parameters are described "
"in :ref:`Passing extra options to view functions <views-extra-options>`."
msgstr ""

# b108c12ac8bb4da78b1fb852ead7d253
#: ../../ref/urls.txt:26
msgid ""
"Because ``patterns()`` is a function call, it accepts a maximum of 255 "
"arguments (URL patterns, in this case). This is a limit for all Python "
"function calls. This is rarely a problem in practice, because you'll "
"typically structure your URL patterns modularly by using ``include()`` "
"sections. However, on the off-chance you do hit the 255-argument limit, "
"realize that ``patterns()`` returns a Python list, so you can split up the "
"construction of the list."
msgstr ""

# 12db4d844be049a0a4bae38eff8ee13a
#: ../../ref/urls.txt:43
msgid ""
"Python lists have unlimited size, so there's no limit to how many URL "
"patterns you can construct. The only limit is that you can only create 254 "
"at a time (the 255th argument is the initial prefix argument)."
msgstr ""

# d15b276ac5474fa2a0f78e1160145b91
#: ../../ref/urls.txt:48
msgid "static()"
msgstr ""

# 6d63b3307b0a428a88bb325154cc1757
#: ../../ref/urls.txt:52
msgid ""
"Helper function to return a URL pattern for serving files in debug mode::"
msgstr ""

# 5dc9c61e7348449faceff3d1c24ddbb5
#: ../../ref/urls.txt:62
msgid "url()"
msgstr ""

# ac94a0e944ad45d78e48bc7c6c407176
#: ../../ref/urls.txt:66
msgid ""
"You can use the ``url()`` function, instead of a tuple, as an argument to "
"``patterns()``. This is convenient if you want to specify a name without the "
"optional extra arguments dictionary. For example::"
msgstr ""

# ac870c88a0fb48658e08a5063a367c91
#: ../../ref/urls.txt:75
msgid "This function takes five arguments, most of which are optional::"
msgstr ""

# a44f7a54fd314000951c43bccaeccbf5
#: ../../ref/urls.txt:79
msgid ""
"See :ref:`Naming URL patterns <naming-url-patterns>` for why the ``name`` "
"parameter is useful."
msgstr ""

# 3302bcb9b71e46d7bca4fdb91f54507e
#: ../../ref/urls.txt:82
msgid ""
"The ``prefix`` parameter has the same meaning as the first argument to "
"``patterns()`` and is only relevant when you're passing a string as the "
"``view`` parameter."
msgstr ""

# 23b5b9f396f44fc1bc31c21599180396
#: ../../ref/urls.txt:87
msgid "include()"
msgstr ""

# c701938d62154578bb0412d1e72a3538
#: ../../ref/urls.txt:93
msgid ""
"A function that takes a full Python import path to another URLconf module "
"that should be \"included\" in this place. Optionally, the :term:"
"`application namespace` and :term:`instance namespace` where the entries "
"will be included into can also be specified."
msgstr ""

# 81d75fb61331451e936df1866bc309ae
#: ../../ref/urls.txt:98
msgid ""
"``include()`` also accepts as an argument either an iterable that returns "
"URL patterns or a 3-tuple containing such iterable plus the names of the "
"application and instance namespaces."
msgstr ""

# b700f63ffec04fbc9e12638d153fbeae
#: ../../ref/urls.txt:113
msgid "See :ref:`including-other-urlconfs` and :ref:`namespaces-and-include`."
msgstr ""

# c15fad16754c4f5ca70ecaa442f5c749
#: ../../ref/urls.txt:116
msgid "handler400"
msgstr ""

# 79e1d08e50ef4957a82037635c1bd700
#: ../../ref/urls.txt:122
msgid ""
"A callable, or a string representing the full Python import path to the view "
"that should be called if the HTTP client has sent a request that caused an "
"error condition and a response with a status code of 400."
msgstr ""

# ee94f4b442184c128dc1a6e7eabe2114
#: ../../ref/urls.txt:126 ../../ref/urls.txt:141
msgid ""
"By default, this is ``'django.views.defaults.permission_denied'``. That "
"default value should suffice."
msgstr ""

# b5012ceb695c4785bd2c0ab1dee5af2c
#: ../../ref/urls.txt:129
msgid ""
"See the documentation about :ref:`the 400 (bad request) view "
"<http_bad_request_view>` for more information."
msgstr ""

# 85790d6085864ffab4208adadd5b8b8a
#: ../../ref/urls.txt:133
msgid "handler403"
msgstr ""

# a050a5eb51e641479d877f0ffe2f6f37
#: ../../ref/urls.txt:137
msgid ""
"A callable, or a string representing the full Python import path to the view "
"that should be called if the user doesn't have the permissions required to "
"access a resource."
msgstr ""

# cf2c3c9704254b809c18df7a9eac2989
#: ../../ref/urls.txt:144
msgid ""
"See the documentation about :ref:`the 403 (HTTP Forbidden) view "
"<http_forbidden_view>` for more information."
msgstr ""

# c30e1596b4a7445499890164eed8d707
#: ../../ref/urls.txt:148
msgid "handler404"
msgstr ""

# 2d0838524c2745b28e6c7be8a33dc5e7
#: ../../ref/urls.txt:152
msgid ""
"A callable, or a string representing the full Python import path to the view "
"that should be called if none of the URL patterns match."
msgstr ""

# 503584fd78824df49eca0df3e0f3a4fe
#: ../../ref/urls.txt:155
msgid ""
"By default, this is ``'django.views.defaults.page_not_found'``. That default "
"value should suffice."
msgstr ""

# 18665d5c354a4e76a9810f4960e28d69
#: ../../ref/urls.txt:158
msgid ""
"See the documentation about :ref:`the 404 (HTTP Not Found) view "
"<http_not_found_view>` for more information."
msgstr ""

# 28cc605e38f245728ad113384b2de6d7
#: ../../ref/urls.txt:162
msgid "handler500"
msgstr ""

# 5a192794e2b14f28a212009b613e5f22
#: ../../ref/urls.txt:166
msgid ""
"A callable, or a string representing the full Python import path to the view "
"that should be called in case of server errors. Server errors happen when "
"you have runtime errors in view code."
msgstr ""

# 16c159926d7b4eefbcde9deaca3bcbf4
#: ../../ref/urls.txt:170
msgid ""
"By default, this is ``'django.views.defaults.server_error'``. That default "
"value should suffice."
msgstr ""

# 5d43d9f9571d4b759dc30e42e2cfa7e1
#: ../../ref/urls.txt:173
msgid ""
"See the documentation about :ref:`the 500 (HTTP Internal Server Error) view "
"<http_internal_server_error_view>` for more information."
msgstr ""
