# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2012.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-02-15 15:13\n"
"PO-Revision-Date: 2012-02-15 15:13\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# 9b024d1b1dbf42acb0724e7836d051ee
#: ../../ref/forms/api.txt:3
msgid "The Forms API"
msgstr ""

# b80e31aedec64fdeaa4323be536dcbb4
#: ../../ref/forms/api.txt:11
msgid ""
"This document covers the gritty details of Django's forms API. You should "
"read the :doc:`introduction to working with forms </topics/forms/index>` "
"first."
msgstr ""

# fd99005902cb4d6882bd056cf462c7b6
#: ../../ref/forms/api.txt:18
msgid "Bound and unbound forms"
msgstr ""

# 7d616271526f4a64a7823113307ecbea
#: ../../ref/forms/api.txt:20
msgid ""
"A :class:`Form` instance is either **bound** to a set of data, or "
"**unbound**."
msgstr ""

# be0dade5cb3e405c80008a26240502ee
#: ../../ref/forms/api.txt:22
msgid ""
"If it's **bound** to a set of data, it's capable of validating that data and "
"rendering the form as HTML with the data displayed in the HTML."
msgstr ""

# 08a615f7c97c4e2eb474b68c433eb1af
#: ../../ref/forms/api.txt:25
msgid ""
"If it's **unbound**, it cannot do validation (because there's no data to "
"validate!), but it can still render the blank form as HTML."
msgstr ""

# a4224b123d034d16ae143c82ee7bc231
#: ../../ref/forms/api.txt:30
msgid ""
"To create an unbound :class:`Form` instance, simply instantiate the class::"
msgstr ""

# de6ce79d2ed94f8f8551bdd8ac5a70b7
#: ../../ref/forms/api.txt:34
msgid ""
"To bind data to a form, pass the data as a dictionary as the first parameter "
"to your :class:`Form` class constructor::"
msgstr ""

# f6c5001b9dcb47f88cd86c7ef8efc483
#: ../../ref/forms/api.txt:43
msgid ""
"In this dictionary, the keys are the field names, which correspond to the "
"attributes in your :class:`Form` class. The values are the data you're "
"trying to validate. These will usually be strings, but there's no "
"requirement that they be strings; the type of data you pass depends on the :"
"class:`Field`, as we'll see in a moment."
msgstr ""

# 5e79be7ef7314cd99b8ff036689b6120
#: ../../ref/forms/api.txt:51
msgid ""
"If you need to distinguish between bound and unbound form instances at "
"runtime, check the value of the form's :attr:`~Form.is_bound` attribute::"
msgstr ""

# 9330e28ba49b4ad7a42965e816027741
#: ../../ref/forms/api.txt:61
msgid ""
"Note that passing an empty dictionary creates a *bound* form with empty "
"data::"
msgstr ""

# ca8b6455c2d94f4297e3a2393392a2cd
#: ../../ref/forms/api.txt:67
msgid ""
"If you have a bound :class:`Form` instance and want to change the data "
"somehow, or if you want to bind an unbound :class:`Form` instance to some "
"data, create another :class:`Form` instance. There is no way to change data "
"in a :class:`Form` instance. Once a :class:`Form` instance has been created, "
"you should consider its data immutable, whether it has data or not."
msgstr ""

# 35fc9b3fe1914c088aa766fadae95308
#: ../../ref/forms/api.txt:74
msgid "Using forms to validate data"
msgstr ""

# bc30596886a44d268d3ee8b8215dd232
#: ../../ref/forms/api.txt:78
msgid ""
"The primary task of a :class:`Form` object is to validate data. With a "
"bound :class:`Form` instance, call the :meth:`~Form.is_valid` method to run "
"validation and return a boolean designating whether the data was valid::"
msgstr ""

# 7e088148706a46b79743dbac1c69f716
#: ../../ref/forms/api.txt:90
msgid ""
"Let's try with some invalid data. In this case, ``subject`` is blank (an "
"error, because all fields are required by default) and ``sender`` is not a "
"valid email address::"
msgstr ""

# 693b11622e42449797a6742c253aad0f
#: ../../ref/forms/api.txt:104
msgid ""
"Access the :attr:`~Form.errors` attribute to get a dictionary of error "
"messages::"
msgstr ""

# 8f6cc0ab88c4443b8b41a3fc681d7329
#: ../../ref/forms/api.txt:110
msgid ""
"In this dictionary, the keys are the field names, and the values are lists "
"of Unicode strings representing the error messages. The error messages are "
"stored in lists because a field can have multiple error messages."
msgstr ""

# cab653911ca94deea738773256d401ea
#: ../../ref/forms/api.txt:114
msgid ""
"You can access :attr:`~Form.errors` without having to call :meth:`~Form."
"is_valid` first. The form's data will be validated the first time either you "
"call :meth:`~Form.is_valid` or access :attr:`~Form.errors`."
msgstr ""

# 62c73e38410a45adbe141852fb4ecd48
#: ../../ref/forms/api.txt:118
msgid ""
"The validation routines will only get called once, regardless of how many "
"times you access :attr:`~Form.errors` or call :meth:`~Form.is_valid`. This "
"means that if validation has side effects, those side effects will only be "
"triggered once."
msgstr ""

# 4208058aeffa40d8b998a2f76456e8b1
#: ../../ref/forms/api.txt:123
msgid "Behavior of unbound forms"
msgstr ""

# 27477804acf747a48958a4eacc1f1690
#: ../../ref/forms/api.txt:125
msgid ""
"It's meaningless to validate a form with no data, but, for the record, "
"here's what happens with unbound forms::"
msgstr ""

# 0c81282d6fd3486f9d491b1ba86ecaf3
#: ../../ref/forms/api.txt:135
msgid "Dynamic initial values"
msgstr ""

# a0e0a9796c954124a6d2ecd0f0043952
#: ../../ref/forms/api.txt:139
msgid ""
"Use :attr:`~Form.initial` to declare the initial value of form fields at "
"runtime. For example, you might want to fill in a ``username`` field with "
"the username of the current session."
msgstr ""

# b407069874d34982bd72b49fb322323c
#: ../../ref/forms/api.txt:143
msgid ""
"To accomplish this, use the :attr:`~Form.initial` argument to a :class:"
"`Form`. This argument, if given, should be a dictionary mapping field names "
"to initial values. Only include the fields for which you're specifying an "
"initial value; it's not necessary to include every field in your form. For "
"example::"
msgstr ""

# b1a8486e700746f588b3e9ddf3d24172
#: ../../ref/forms/api.txt:150
msgid ""
"These values are only displayed for unbound forms, and they're not used as "
"fallback values if a particular value isn't provided."
msgstr ""

# 14d603d3177b48139ebf9d71b7e617e1
#: ../../ref/forms/api.txt:153
msgid ""
"Note that if a :class:`~django.forms.fields.Field` defines :attr:`~Form."
"initial` *and* you include ``initial`` when instantiating the ``Form``, then "
"the latter ``initial`` will have precedence. In this example, ``initial`` is "
"provided both at the field level and at the form instance level, and the "
"latter gets precedence::"
msgstr ""

# 6d34b25e3f5e4b58b1e70ac7fdefac69
#: ../../ref/forms/api.txt:170
msgid "Accessing \"clean\" data"
msgstr ""

# 672fa6b894c14f66ad2766c4fd1b28bb
#: ../../ref/forms/api.txt:174
msgid ""
"Each field in a :class:`Form` class is responsible not only for validating "
"data, but also for \"cleaning\" it -- normalizing it to a consistent format. "
"This is a nice feature, because it allows data for a particular field to be "
"input in a variety of ways, always resulting in consistent output."
msgstr ""

# 890715d0918046ab81ed225549315871
#: ../../ref/forms/api.txt:179
msgid ""
"For example, :class:`~django.forms.DateField` normalizes input into a Python "
"``datetime.date`` object. Regardless of whether you pass it a string in the "
"format ``'1994-07-15'``, a ``datetime.date`` object, or a number of other "
"formats, ``DateField`` will always normalize it to a ``datetime.date`` "
"object as long as it's valid."
msgstr ""

# 3f566e8f2ebb41f8be9134e3768d102c
#: ../../ref/forms/api.txt:185
msgid ""
"Once you've created a :class:`~Form` instance with a set of data and "
"validated it, you can access the clean data via its ``cleaned_data`` "
"attribute::"
msgstr ""

# c745bda1d8c64625ad0d22e208273366
#: ../../ref/forms/api.txt:198
msgid ""
"Note that any text-based field -- such as ``CharField`` or ``EmailField`` -- "
"always cleans the input into a Unicode string. We'll cover the encoding "
"implications later in this document."
msgstr ""

# dc22232a855a4f34803ffdd9539ed8fd
#: ../../ref/forms/api.txt:202
msgid ""
"If your data does *not* validate, your ``Form`` instance will not have a "
"``cleaned_data`` attribute::"
msgstr ""

# e500e7ed1656470c973ba41d6c6e3f58
#: ../../ref/forms/api.txt:217
msgid ""
"``cleaned_data`` will always *only* contain a key for fields defined in the "
"``Form``, even if you pass extra data when you define the ``Form``. In this "
"example, we pass a bunch of extra fields to the ``ContactForm`` constructor, "
"but ``cleaned_data`` contains only the form's fields::"
msgstr ""

# 533bcbae10ae469497155044ded9785e
#: ../../ref/forms/api.txt:235
msgid ""
"``cleaned_data`` will include a key and value for *all* fields defined in "
"the ``Form``, even if the data didn't include a value for fields that are "
"not required. In this example, the data dictionary doesn't include a value "
"for the ``nick_name`` field, but ``cleaned_data`` includes it, with an empty "
"value::"
msgstr ""

# d5eef22300204f6e90d0fecf4e59ed8f
#: ../../ref/forms/api.txt:251
msgid ""
"In this above example, the ``cleaned_data`` value for ``nick_name`` is set "
"to an empty string, because ``nick_name`` is ``CharField``, and ``CharField``"
"\\s treat empty values as an empty string. Each field type knows what its "
"\"blank\" value is -- e.g., for ``DateField``, it's ``None`` instead of the "
"empty string. For full details on each field's behavior in this case, see "
"the \"Empty value\" note for each field in the \"Built-in ``Field`` classes"
"\" section below."
msgstr ""

# 0cad4c5453df47088e47f263f0d1d20e
#: ../../ref/forms/api.txt:258
msgid ""
"You can write code to perform validation for particular form fields (based "
"on their name) or for the form as a whole (considering combinations of "
"various fields). More information about this is in :doc:`/ref/forms/"
"validation`."
msgstr ""

# 48af74b4cd614558a66ffcf29eb53776
#: ../../ref/forms/api.txt:263
msgid "Outputting forms as HTML"
msgstr ""

# 4ed23cfd3117484d9f8df9d9eda26a5a
#: ../../ref/forms/api.txt:265
msgid ""
"The second task of a ``Form`` object is to render itself as HTML. To do so, "
"simply ``print`` it::"
msgstr ""

# cdab81b91b0a48d99e82651eab4940b9
#: ../../ref/forms/api.txt:275
msgid ""
"If the form is bound to data, the HTML output will include that data "
"appropriately. For example, if a field is represented by an ``<input type="
"\"text\">``, the data will be in the ``value`` attribute. If a field is "
"represented by an ``<input type=\"checkbox\">``, then that HTML will include "
"``checked=\"checked\"`` if appropriate::"
msgstr ""

# a234643592f0409393cd008712eb52b0
#: ../../ref/forms/api.txt:292
msgid ""
"This default output is a two-column HTML table, with a ``<tr>`` for each "
"field. Notice the following:"
msgstr ""

# b2c084fbdf2c4044b79c0e177540b6a5
#: ../../ref/forms/api.txt:295
msgid ""
"For flexibility, the output does *not* include the ``<table>`` and ``</"
"table>`` tags, nor does it include the ``<form>`` and ``</form>`` tags or an "
"``<input type=\"submit\">`` tag. It's your job to do that."
msgstr ""

# 9cec1933373f406b919e4fcb9705f55e
#: ../../ref/forms/api.txt:299
msgid ""
"Each field type has a default HTML representation. ``CharField`` and "
"``EmailField`` are represented by an ``<input type=\"text\">``. "
"``BooleanField`` is represented by an ``<input type=\"checkbox\">``. Note "
"these are merely sensible defaults; you can specify which HTML to use for a "
"given field by using widgets, which we'll explain shortly."
msgstr ""

# 599bbd49673c413b8ddb18d5b9988ebb
#: ../../ref/forms/api.txt:305
msgid ""
"The HTML ``name`` for each tag is taken directly from its attribute name in "
"the ``ContactForm`` class."
msgstr ""

# 16807210069f4c8a8edba554a0e7f1fc
#: ../../ref/forms/api.txt:308
msgid ""
"The text label for each field -- e.g. ``'Subject:'``, ``'Message:'`` and "
"``'Cc myself:'`` is generated from the field name by converting all "
"underscores to spaces and upper-casing the first letter. Again, note these "
"are merely sensible defaults; you can also specify labels manually."
msgstr ""

# 15b6e77cb3524fe59bf5af8688e23fd7
#: ../../ref/forms/api.txt:313
msgid ""
"Each text label is surrounded in an HTML ``<label>`` tag, which points to "
"the appropriate form field via its ``id``. Its ``id``, in turn, is generated "
"by prepending ``'id_'`` to the field name. The ``id`` attributes and "
"``<label>`` tags are included in the output by default, to follow best "
"practices, but you can change that behavior."
msgstr ""

# 7ceae7856dc74cd280bf44d96623be8b
#: ../../ref/forms/api.txt:319
msgid ""
"Although ``<table>`` output is the default output style when you ``print`` a "
"form, other output styles are available. Each style is available as a method "
"on a form object, and each rendering method returns a Unicode object."
msgstr ""

# d9701f053a174b76bed794f26446cde3
#: ../../ref/forms/api.txt:324
msgid "``as_p()``"
msgstr ""

# c630f65949184ebeb4ab63159c02cd6e
#: ../../ref/forms/api.txt:328
msgid ""
"``as_p()`` renders the form as a series of ``<p>`` tags, with each ``<p>`` "
"containing one field::"
msgstr ""

# ea8e2f09e85f4e5c9f1235c8f1fb15b6
#: ../../ref/forms/api.txt:341
msgid "``as_ul()``"
msgstr ""

# fa1fe65fd1f54d3a918a311825a1e2b1
#: ../../ref/forms/api.txt:345
msgid ""
"``as_ul()`` renders the form as a series of ``<li>`` tags, with each "
"``<li>`` containing one field. It does *not* include the ``<ul>`` or ``</"
"ul>``, so that you can specify any HTML attributes on the ``<ul>`` for "
"flexibility::"
msgstr ""

# ed47171e80ec4a3c9b65ad4358f55a01
#: ../../ref/forms/api.txt:360
msgid "``as_table()``"
msgstr ""

# 7233b07df84441c7bcc1eeb921249cef
#: ../../ref/forms/api.txt:364
msgid ""
"Finally, ``as_table()`` outputs the form as an HTML ``<table>``. This is "
"exactly the same as ``print``. In fact, when you ``print`` a form object, it "
"calls its ``as_table()`` method behind the scenes::"
msgstr ""

# d1f22e5dbf324aec80a9f1487689d543
#: ../../ref/forms/api.txt:378
msgid "Styling required or erroneous form rows"
msgstr ""

# 053e9eb1515d4120b6e8d4218df40284
#: ../../ref/forms/api.txt:382
msgid ""
"It's pretty common to style form rows and fields that are required or have "
"errors. For example, you might want to present required form rows in bold "
"and highlight errors in red."
msgstr ""

# 9c78596fc8114ac2bee05bda1bf47437
#: ../../ref/forms/api.txt:386
msgid ""
"The :class:`Form` class has a couple of hooks you can use to add ``class`` "
"attributes to required rows or to rows with errors: simply set the :attr:"
"`Form.error_css_class` and/or :attr:`Form.required_css_class` attributes::"
msgstr ""

# f81225acc6e140e2af26e3b9e59c09dd
#: ../../ref/forms/api.txt:397
msgid ""
"Once you've done that, rows will be given ``\"error\"`` and/or ``\"required"
"\"`` classes, as needed. The HTML will look something like::"
msgstr ""

# d1433d4f88034e21bf03e0c4ca36df0d
#: ../../ref/forms/api.txt:410
msgid "Configuring HTML ``<label>`` tags"
msgstr ""

# 5dd8d384015b4747a3f01031d2e6ef35
#: ../../ref/forms/api.txt:412
msgid ""
"An HTML ``<label>`` tag designates which label text is associated with which "
"form element. This small enhancement makes forms more usable and more "
"accessible to assistive devices. It's always a good idea to use ``<label>`` "
"tags."
msgstr ""

# 22be033540ab4d82a67a561652618cce
#: ../../ref/forms/api.txt:416
msgid ""
"By default, the form rendering methods include HTML ``id`` attributes on the "
"form elements and corresponding ``<label>`` tags around the labels. The "
"``id`` attribute values are generated by prepending ``id_`` to the form "
"field names. This behavior is configurable, though, if you want to change "
"the ``id`` convention or remove HTML ``id`` attributes and ``<label>`` tags "
"entirely."
msgstr ""

# ce67d93e132146a1bdc8466cf22c841d
#: ../../ref/forms/api.txt:422
msgid ""
"Use the ``auto_id`` argument to the ``Form`` constructor to control the "
"label and ``id`` behavior. This argument must be ``True``, ``False`` or a "
"string."
msgstr ""

# e61362d69fc2443887fd5c235627cd07
#: ../../ref/forms/api.txt:425
msgid ""
"If ``auto_id`` is ``False``, then the form output will not include "
"``<label>`` tags nor ``id`` attributes::"
msgstr ""

# afd5cb2148e347528bd0ebee778327d4
#: ../../ref/forms/api.txt:445
msgid ""
"If ``auto_id`` is set to ``True``, then the form output *will* include "
"``<label>`` tags and will simply use the field name as its ``id`` for each "
"form field::"
msgstr ""

# 7cc21479afb140668b3ea328a170b21b
#: ../../ref/forms/api.txt:466
msgid ""
"If ``auto_id`` is set to a string containing the format character ``'%s'``, "
"then the form output will include ``<label>`` tags, and will generate ``id`` "
"attributes based on the format string. For example, for a format string "
"``'field_%s'``, a field named ``subject`` will get the ``id`` value "
"``'field_subject'``. Continuing our example::"
msgstr ""

# ab31baad54b245efaee280baa67a3d88
#: ../../ref/forms/api.txt:489
msgid ""
"If ``auto_id`` is set to any other true value -- such as a string that "
"doesn't include ``%s`` -- then the library will act as if ``auto_id`` is "
"``True``."
msgstr ""

# e19fc6c0ca7747478061b28ec47cda10
#: ../../ref/forms/api.txt:492
msgid "By default, ``auto_id`` is set to the string ``'id_%s'``."
msgstr ""

# 217177bfd7464e58a139fbdd6ea94387
#: ../../ref/forms/api.txt:494
msgid ""
"Normally, a colon (``:``) will be appended after any label name when a form "
"is rendered. It's possible to change the colon to another character, or omit "
"it entirely, using the ``label_suffix`` parameter::"
msgstr ""

# 5d44008ae7fe4c55984554080c527e07
#: ../../ref/forms/api.txt:511
msgid ""
"Note that the label suffix is added only if the last character of the label "
"isn't a punctuation character (``.``, ``!``, ``?`` or ``:``)"
msgstr ""

# 5dd165a536e14f89946c2d4f9fdcb4ee
#: ../../ref/forms/api.txt:515
msgid "Notes on field ordering"
msgstr ""

# ea6edb43ae2f44e9b664f2dfcba42111
#: ../../ref/forms/api.txt:517
msgid ""
"In the ``as_p()``, ``as_ul()`` and ``as_table()`` shortcuts, the fields are "
"displayed in the order in which you define them in your form class. For "
"example, in the ``ContactForm`` example, the fields are defined in the order "
"``subject``, ``message``, ``sender``, ``cc_myself``. To reorder the HTML "
"output, just change the order in which those fields are listed in the class."
msgstr ""

# 95d38c9a65874fc6ae6c4f74b9858dd9
#: ../../ref/forms/api.txt:524
msgid "How errors are displayed"
msgstr ""

# 4e6b97ac9e424fa091198207e2f71e39
#: ../../ref/forms/api.txt:526
msgid ""
"If you render a bound ``Form`` object, the act of rendering will "
"automatically run the form's validation if it hasn't already happened, and "
"the HTML output will include the validation errors as a ``<ul class="
"\"errorlist\">`` near the field. The particular positioning of the error "
"messages depends on the output method you're using::"
msgstr ""

# 9d00b339491d412f88063bea8fe1479c
#: ../../ref/forms/api.txt:556
msgid "Customizing the error list format"
msgstr ""

# 827ea633dae8413d903221f568455c4f
#: ../../ref/forms/api.txt:558
msgid ""
"By default, forms use ``django.forms.util.ErrorList`` to format validation "
"errors. If you'd like to use an alternate class for displaying errors, you "
"can pass that in at construction time::"
msgstr ""

# 084f5b0c4bbf46f98c4e6e440ed57868
#: ../../ref/forms/api.txt:579
msgid "More granular output"
msgstr ""

# 11d64c7c3e8a4db5a28e78a05019edb4
#: ../../ref/forms/api.txt:581
msgid ""
"The ``as_p()``, ``as_ul()`` and ``as_table()`` methods are simply shortcuts "
"for lazy developers -- they're not the only way a form object can be "
"displayed."
msgstr ""

# 6f805632f3ff44ed868ec9ff52d216b5
#: ../../ref/forms/api.txt:586
msgid ""
"Used to display HTML or access attributes for a single field of a :class:"
"`Form` instance."
msgstr ""

# 05a6107507624dc89062ac6bde6d74c9
#: ../../ref/forms/api.txt:589
msgid ""
"The :meth:`__unicode__` and :meth:`__str__` methods of this object displays "
"the HTML for this field."
msgstr ""

# 8432d23b01e04a4786680ddbbdf7bf69
#: ../../ref/forms/api.txt:592
msgid ""
"To retrieve a single ``BoundField``, use dictionary lookup syntax on your "
"form using the field's name as the key::"
msgstr ""

# 9236e432dc6e4111bcd60c7e9dc7cdf3
#: ../../ref/forms/api.txt:599
msgid "To retrieve all ``BoundField`` objects, iterate the form::"
msgstr ""

# a090a4e99b53456eb3b4c3c61fc41c57
#: ../../ref/forms/api.txt:608
msgid ""
"The field-specific output honors the form object's ``auto_id`` setting::"
msgstr ""

# 5caa028c5e434d34861c502dc0e56c8a
#: ../../ref/forms/api.txt:617
msgid "For a field's list of errors, access the field's ``errors`` attribute."
msgstr ""

# ef4a7196061340cba6ce398b1b5fde5a
#: ../../ref/forms/api.txt:621
msgid ""
"A list-like object that is displayed as an HTML ``<ul class=\"errorlist\">`` "
"when printed::"
msgstr ""

# 45929f84c27341b5bb6b62e8d9c14cba
#: ../../ref/forms/api.txt:643
msgid ""
"When you use Django's rendering shortcuts, CSS classes are used to indicate "
"required form fields or fields that contain errors. If you're manually "
"rendering a form, you can access these CSS classes using the ``css_classes`` "
"method::"
msgstr ""

# 2c39d90cad344c9dbbe181e125fb8d7a
#: ../../ref/forms/api.txt:652
msgid ""
"If you want to provide some additional classes in addition to the error and "
"required classes that may be required, you can provide those classes as an "
"argument::"
msgstr ""

# d434191be80b4da0a5d645b02de4082e
#: ../../ref/forms/api.txt:664
msgid ""
"Use this method to render the raw value of this field as it would be "
"rendered by a ``Widget``::"
msgstr ""

# 940d4068a9c54ee09a2189d497a6972e
#: ../../ref/forms/api.txt:678
msgid "Binding uploaded files to a form"
msgstr ""

# ac12629eaaf94d699a975c1cae1becb2
#: ../../ref/forms/api.txt:680
msgid ""
"Dealing with forms that have ``FileField`` and ``ImageField`` fields is a "
"little more complicated than a normal form."
msgstr ""

# 8ef7d7b48865421680b7e7a967b87b18
#: ../../ref/forms/api.txt:683
msgid ""
"Firstly, in order to upload files, you'll need to make sure that your "
"``<form>`` element correctly defines the ``enctype`` as ``\"multipart/form-"
"data\"``::"
msgstr ""

# d55e769375574105b58f3ec3a0f850e4
#: ../../ref/forms/api.txt:689
msgid ""
"Secondly, when you use the form, you need to bind the file data. File data "
"is handled separately to normal form data, so when your form contains a "
"``FileField`` and ``ImageField``, you will need to specify a second argument "
"when you bind your form. So if we extend our ContactForm to include an "
"``ImageField`` called ``mugshot``, we need to bind the file data containing "
"the mugshot image::"
msgstr ""

# 02efa6ca406745a998cc753bd20347d8
#: ../../ref/forms/api.txt:705
msgid ""
"In practice, you will usually specify ``request.FILES`` as the source of "
"file data (just like you use ``request.POST`` as the source of form data)::"
msgstr ""

# fbcc6ed5a1fd421e83dd326707d4a168
#: ../../ref/forms/api.txt:712
msgid ""
"Constructing an unbound form is the same as always -- just omit both form "
"data *and* file data::"
msgstr ""

# 8447519582e54aeebe99e90b441cf265
#: ../../ref/forms/api.txt:719
msgid "Testing for multipart forms"
msgstr ""

# aa88b67eaad44eab8963d0529737e87f
#: ../../ref/forms/api.txt:721
msgid ""
"If you're writing reusable views or templates, you may not know ahead of "
"time whether your form is a multipart form or not. The ``is_multipart()`` "
"method tells you whether the form requires multipart encoding for "
"submission::"
msgstr ""

# 95ff906665d04d2d81b6aefe795fc0d6
#: ../../ref/forms/api.txt:729
msgid "Here's an example of how you might use this in a template::"
msgstr ""

# 675c09ebeb6446b2aa9e0fed93f5a1ae
#: ../../ref/forms/api.txt:740
msgid "Subclassing forms"
msgstr ""

# 09725b38562c462a82bc82c51846bb6a
#: ../../ref/forms/api.txt:742
msgid ""
"If you have multiple ``Form`` classes that share fields, you can use "
"subclassing to remove redundancy."
msgstr ""

# bbbb40ab93714ef18cf3a5766709acae
#: ../../ref/forms/api.txt:745
msgid ""
"When you subclass a custom ``Form`` class, the resulting subclass will "
"include all fields of the parent class(es), followed by the fields you "
"define in the subclass."
msgstr ""

# 3a31b64ccd0e453992a5385ab977d5da
#: ../../ref/forms/api.txt:749
msgid ""
"In this example, ``ContactFormWithPriority`` contains all the fields from "
"``ContactForm``, plus an additional field, ``priority``. The ``ContactForm`` "
"fields are ordered first::"
msgstr ""

# ada416fd3d3445dcb02c316fb16a7025
#: ../../ref/forms/api.txt:763
msgid ""
"It's possible to subclass multiple forms, treating forms as \"mix-ins.\" In "
"this example, ``BeatleForm`` subclasses both ``PersonForm`` and "
"``InstrumentForm`` (in that order), and its field list includes the fields "
"from the parent classes::"
msgstr ""

# fe37bfc2bf584db6ae48529dc2541d81
#: ../../ref/forms/api.txt:785
msgid "Prefixes for forms"
msgstr ""

# f34fc70c319d453595c991f6ab6ba31c
#: ../../ref/forms/api.txt:789
msgid ""
"You can put several Django forms inside one ``<form>`` tag. To give each "
"``Form`` its own namespace, use the ``prefix`` keyword argument::"
msgstr ""
