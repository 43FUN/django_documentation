# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2012.
# 
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-02-29 18:30\n"
"PO-Revision-Date: 2012-02-15 15:13\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# 04c114de81524d788c49310caff69d5a
#: ../../ref/forms/validation.txt:2
msgid "Form and field validation"
msgstr "Проверка форм и полей формы"

# ac1b690f74b042c298278dda10323430
#: ../../ref/forms/validation.txt:6
msgid ""
"Form validation happens when the data is cleaned. If you want to customize "
"this process, there are various places you can change, each one serving a "
"different purpose. Three types of cleaning methods are run during form "
"processing. These are normally executed when you call the ``is_valid()`` "
"method on a form. There are other things that can trigger cleaning and "
"validation (accessing the ``errors`` attribute or calling ``full_clean()`` "
"directly), but normally they won't be needed."
msgstr ""
"Проверка формы происходит при нормализации её данных. При возникновении "
"необходимости вмешаться в этот процесс, есть много мест, где можно это "
"сделать и которые влияют на разные этапы проверки. Во время обработки формы "
"вызываются три типа метода для нормализации данных. Процесс проверки "
"запускается при вызове метода ``is_valid()`` формы. Существуют ситуации, "
"которые запускают нормализацию и проверку данных (обращение к свойству "
"``errors`` или прямой вызов метода ``full_clean()``), но они возникают "
"достаточно редко."

# 7877226f14874d9cbf55f6796d321cdf
#: ../../ref/forms/validation.txt:14
msgid ""
"In general, any cleaning method can raise ``ValidationError`` if there is a "
"problem with the data it is processing, passing the relevant error message "
"to the ``ValidationError`` constructor. If no ``ValidationError`` is raised, "
"the method should return the cleaned (normalized) data as a Python object."
msgstr ""
"В общем случае, любой нормализующий метод может вызвать исключение "
"``ValidationError`` при наличии проблем с данными, передавая соответствующее "
"сообщение об ошибке в конструктор исключения. Если проблем не выявлено, то "
"метод должен возвращать нормализованное значение в виде объекта языка Python."
""

# 0d9c6e51f0564e22be26f2e3d75bbde9
#: ../../ref/forms/validation.txt:19
msgid ""
"If you detect multiple errors during a cleaning method and wish to signal "
"all of them to the form submitter, it is possible to pass a list of errors "
"to the ``ValidationError`` constructor."
msgstr ""
"При обнаружении нескольких ошибок в процессе нормализации поля и при наличии "
"желания отобразить их одновременно на форме, следует передать их в виде "
"списка в конструктор исключения."

# cacdfe89b6d746ecb576f826a129b211
#: ../../ref/forms/validation.txt:23
msgid ""
"Most validation can be done using `validators`_ - simple helpers that can be "
"reused easily. Validators are simple functions (or callables) that take a "
"single argument and raise ``ValidationError`` on invalid input. Validators "
"are run after the field's ``to_python`` and ``validate`` methods have been "
"called."
msgstr ""
"Большая часть проверок может быть выполнена с помощью `validators`_, которые "
"являются простыми в использовании вспомогательными объектами. Валидатор — "
"это простая функция (или вызываемый объект, callable), которая принимает "
"единственный аргумент и вызывает исключение ``ValidationError`` в случае "
"проблем с полученным значением. Валидаторы запускаются после вызова методов "
"поля: ``to_python`` и ``validate``."

# 04298184d92a4633881ae2f50907ab83
#: ../../ref/forms/validation.txt:28
msgid ""
"Validation of a Form is split into several steps, which can be customized or "
"overridden:"
msgstr ""
"Проверка формы состоит из нескольких этапов, каждый из которых может быть "
"настроен или переопределён:"

# bf72593d5dac40fb8e7663b66238a909
#: ../../ref/forms/validation.txt:31
msgid ""
"The ``to_python()`` method on a Field is the first step in every validation. "
"It coerces the value to correct datatype and raises ``ValidationError`` if "
"that is not possible. This method accepts the raw value from the widget and "
"returns the converted value. For example, a FloatField will turn the data "
"into a Python ``float`` or raise a ``ValidationError``."
msgstr ""
"Вызов метода поля ``to_python()`` является первым этапом каждой проверки. Он "
"приводит значение к соответствующему типу данных или вызывает исключение "
"``ValidationError``, если это невозможно. Метод принимает сырое значение от "
"виджета и возвращает нормализованное значение. Например, поле типа "
"``FloatField`` преобразовывает данные в тип ``float`` языка Python или "
"вызывает исключение ``ValidationError``."

# 7911286063994186b6f8e5b1241aebf2
#: ../../ref/forms/validation.txt:38
msgid ""
"The ``validate()`` method on a Field handles field-specific validation that "
"is not suitable for a validator, It takes a value that has been coerced to "
"correct datatype and raises ``ValidationError`` on any error. This method "
"does not return anything and shouldn't alter the value. You should override "
"it to handle validation logic that you can't or don't want to put in a "
"validator."
msgstr ""
"Метод ``validate()`` поля выполняет стандартную проверку данных и приводит "
"значение к правильному типу данных или вызывает исключение "
"``ValidationError`` на любую ошибку. Этот метод не возвращает значение и не "
"должен изменять проверяемые данные. Если вам надо обеспечить логику, которую "
"невозможно или нежелательно выносить в валидатор, то вам следует "
"переопределить этот метод."

# fe6027ea91a847b49bc8b50ced749b74
#: ../../ref/forms/validation.txt:45
msgid ""
"The ``run_validators()`` method on a Field runs all of the field's "
"validators and aggregates all the errors into a single ``ValidationError``. "
"You shouldn't need to override this method."
msgstr ""
"Метод поля ``run_validators()`` запускает все валидаторы  и аккумулирует все "
"возникающие ошибки в одно исключение ``ValidationError``. Вам не стоит "
"переопределять этот метод."

# f135d4480aca445093d1a22af064a12a
#: ../../ref/forms/validation.txt:49
msgid ""
"The ``clean()`` method on a Field subclass. This is responsible for running "
"``to_python``, ``validate`` and ``run_validators`` in the correct order and "
"propagating their errors. If, at any time, any of the methods raise "
"``ValidationError``, the validation stops and that error is raised. This "
"method returns the clean data, which is then inserted into the "
"``cleaned_data`` dictionary of the form."
msgstr ""
"Метод ``clean()`` поля отвечает за вызов методов ``to_python``, ``validate`` "
"и ``run_validators`` в правильном порядке и передачу их ошибок. Как только "
"любой из этих методов вызовет исключение ``ValidationError``, процесс "
"проверки прекращается и ошибка передаётся выше. Этот метод возвращает "
"проверенные данные, которые затем помещаются в словарь ``cleaned_data`` "
"формы."

# 7ca929ced5d0428a9d4f5211dc0c98bc
#: ../../ref/forms/validation.txt:56
msgid ""
"The ``clean_<fieldname>()`` method in a form subclass -- where "
"``<fieldname>`` is replaced with the name of the form field attribute. This "
"method does any cleaning that is specific to that particular attribute, "
"unrelated to the type of field that it is. This method is not passed any "
"parameters. You will need to look up the value of the field in ``self."
"cleaned_data`` and remember that it will be a Python object at this point, "
"not the original string submitted in the form (it will be in "
"``cleaned_data`` because the general field ``clean()`` method, above, has "
"already cleaned the data once)."
msgstr ""
"Для проверки значения поля используется метод ``clean_<fieldname>()``, где "
"``<fieldname>`` заменяется на имя поля. Этот метод выполняет проверку "
"значения. Метод не принимает аргументы. Для получения значения поля "
"обращайтесь к словарю\n"
"``self.cleaned_data`` и помните, что там будет объект языка Python, а не "
"строка, переданная формой."

# 5745b3cc8fb841f8a831ff069fe4e987
#: ../../ref/forms/validation.txt:66
msgid ""
"For example, if you wanted to validate that the contents of a ``CharField`` "
"called ``serialnumber`` was unique, ``clean_serialnumber()`` would be the "
"right place to do this. You don't need a specific field (it's just a "
"``CharField``), but you want a formfield-specific piece of validation and, "
"possibly, cleaning/normalizing the data."
msgstr ""
"Например, если требуется проверить, что содержимое ``CharField``поля с "
"именем ``serialnumber`` является уникальным, то метод "
"``clean_serialnumber()`` будет правильным местом для такого функционала. Вам "
"не нужно специального поля (пусть будет ``CharField``), но требуется хитрая "
"проверка данных и, возможно, очистка/нормализация данных."

# 8593ee3099c347bb82a1ac587d42c7a1
#: ../../ref/forms/validation.txt:73
msgid ""
"Just like the general field ``clean()`` method, above, this method should "
"return the cleaned data, regardless of whether it changed anything or not."
msgstr ""
"Подобно методу ``clean()``, описанному выше, этот метод должен возвращать "
"проверенные данные, независимо от того изменялись они или нет."

# c491ab54304a4a75ac6aa00f16e30d8f
#: ../../ref/forms/validation.txt:77
msgid ""
"The Form subclass's ``clean()`` method. This method can perform any "
"validation that requires access to multiple fields from the form at once. "
"This is where you might put in things to check that if field ``A`` is "
"supplied, field ``B`` must contain a valid email address and the like. The "
"data that this method returns is the final ``cleaned_data`` attribute for "
"the form, so don't forget to return the full list of cleaned data if you "
"override this method (by default, ``Form.clean()`` just returns ``self."
"cleaned_data``)."
msgstr ""
"Метод ``clean()`` потомка формы. Этот метод может выполнять любую проверку, "
"которая нуждается в одновременном доступе к данным нескольких полей. Именно "
"здесь в можете проверять, что если поле ``A`` заполнено, то поле ``B`` "
"должно содержать правильный адрес электронной почты и так далее. Данные, "
"которые возвращает этот метод,The data that this method returns is the final "
"``cleaned_data`` attribute for the form, so don't forget to return the full "
"list of cleaned data if you override this method (by default, ``Form."
"clean()`` just returns ``self.cleaned_data``)."

# f0af9ad49bc14b6eb0892d21f55aecad
#: ../../ref/forms/validation.txt:86
msgid ""
"Note that any errors raised by your ``Form.clean()`` override will not be "
"associated with any field in particular. They go into a special \"field\" "
"(called ``__all__``), which you can access via the ``non_field_errors()`` "
"method if you need to. If you want to attach errors to a specific field in "
"the form, you will need to access the ``_errors`` attribute on the form, "
"which is `described later`_."
msgstr ""

# dad01054e9ec43bf9188aeadc139062f
#: ../../ref/forms/validation.txt:93
msgid ""
"Also note that there are special considerations when overriding the "
"``clean()`` method of a ``ModelForm`` subclass. (see the :ref:`ModelForm "
"documentation <overriding-modelform-clean-method>` for more information)"
msgstr ""

# 2d7bcf40aa684081b3f96da43e19d235
#: ../../ref/forms/validation.txt:98
msgid ""
"These methods are run in the order given above, one field at a time.  That "
"is, for each field in the form (in the order they are declared in the form "
"definition), the ``Field.clean()`` method (or its override) is run, then "
"``clean_<fieldname>()``. Finally, once those two methods are run for every "
"field, the ``Form.clean()`` method, or its override, is executed."
msgstr ""

# 580c5538caf143b3a0b26acebba6213e
#: ../../ref/forms/validation.txt:104
msgid "Examples of each of these methods are provided below."
msgstr ""

# cc6769750d454e0393389789e1b3966f
#: ../../ref/forms/validation.txt:106
msgid ""
"As mentioned, any of these methods can raise a ``ValidationError``. For any "
"field, if the ``Field.clean()`` method raises a ``ValidationError``, any "
"field-specific cleaning method is not called. However, the cleaning methods "
"for all remaining fields are still executed."
msgstr ""

# 0dba0b7d427046a59ca3057c0c3df5ae
#: ../../ref/forms/validation.txt:111
msgid ""
"The ``clean()`` method for the ``Form`` class or subclass is always run. If "
"that method raises a ``ValidationError``, ``cleaned_data`` will be an empty "
"dictionary."
msgstr ""

# f6b441d267c34719a36d900d6ef675d9
#: ../../ref/forms/validation.txt:115
msgid ""
"The previous paragraph means that if you are overriding ``Form.clean()``, "
"you should iterate through ``self.cleaned_data.items()``, possibly "
"considering the ``_errors`` dictionary attribute on the form as well. In "
"this way, you will already know which fields have passed their individual "
"validation requirements."
msgstr ""

# 7671a61ccaa9442abb1755168487579c
#: ../../ref/forms/validation.txt:123
msgid "Form subclasses and modifying field errors"
msgstr ""

# b04913281bf64c99a81214fbba169465
#: ../../ref/forms/validation.txt:125
msgid ""
"Sometimes, in a form's ``clean()`` method, you will want to add an error "
"message to a particular field in the form. This won't always be appropriate "
"and the more typical situation is to raise a ``ValidationError`` from ``Form."
"clean()``, which is turned into a form-wide error that is available through "
"the ``Form.non_field_errors()`` method."
msgstr ""

# 8420abdd0c134ddaa82b9defce4e3824
#: ../../ref/forms/validation.txt:131
msgid ""
"When you really do need to attach the error to a particular field, you "
"should store (or amend) a key in the ``Form._errors`` attribute. This "
"attribute is an instance of a ``django.forms.util.ErrorDict`` class. "
"Essentially, though, it's just a dictionary. There is a key in the "
"dictionary for each field in the form that has an error. Each value in the "
"dictionary is a ``django.forms.util.ErrorList`` instance, which is a list "
"that knows how to display itself in different ways. So you can treat "
"``_errors`` as a dictionary mapping field names to lists."
msgstr ""

# 300a9b40cbd74306bd38aabaa718c94d
#: ../../ref/forms/validation.txt:140
msgid ""
"If you want to add a new error to a particular field, you should check "
"whether the key already exists in ``self._errors`` or not. If not, create a "
"new entry for the given key, holding an empty ``ErrorList`` instance. In "
"either case, you can then append your error message to the list for the "
"field name in question and it will be displayed when the form is displayed."
msgstr ""

# 7238bc8bbc9d4b1eaed9cd393af9faee
#: ../../ref/forms/validation.txt:146
msgid ""
"There is an example of modifying ``self._errors`` in the following section."
msgstr ""

# c53096b6444146ae8564b50d09ce4eac
#: ../../ref/forms/validation.txt:150
msgid ""
"You may be wondering why is this attribute called ``_errors`` and not "
"``errors``. Normal Python practice is to prefix a name with an underscore if "
"it's not for external usage. In this case, you are subclassing the ``Form`` "
"class, so you are essentially writing new internals. In effect, you are "
"given permission to access some of the internals of ``Form``."
msgstr ""

# a7b90913a8f449b398d689573be3eb87
#: ../../ref/forms/validation.txt:156
msgid ""
"Of course, any code outside your form should never access ``_errors`` "
"directly. The data is available to external code through the ``errors`` "
"property, which populates ``_errors`` before returning it)."
msgstr ""

# 80aa2fac45da469bb657a9ebd3c84652
#: ../../ref/forms/validation.txt:160
msgid ""
"Another reason is purely historical: the attribute has been called "
"``_errors`` since the early days of the forms module and changing it now "
"(particularly since ``errors`` is used for the read-only property name) "
"would be inconvenient for a number of reasons. You can use whichever "
"explanation makes you feel more comfortable. The result is the same."
msgstr ""

# 9eeb0e676da741d69ec679b7d9eae1f7
#: ../../ref/forms/validation.txt:167
msgid "Using validation in practice"
msgstr ""

# aac8d8efc6ad410e942a270410f8ffac
#: ../../ref/forms/validation.txt:169
msgid ""
"The previous sections explained how validation works in general for forms. "
"Since it can sometimes be easier to put things into place by seeing each "
"feature in use, here are a series of small examples that use each of the "
"previous features."
msgstr ""

# e3494411f62d4b848fb04b8bc19deea2
#: ../../ref/forms/validation.txt:177
msgid "Using validators"
msgstr ""

# 946d47fb191c428facd354abd58f4575
#: ../../ref/forms/validation.txt:180
msgid ""
"Django's form (and model) fields support use of simple utility functions and "
"classes known as validators. These can be passed to a field's constructor, "
"via the field's ``validators`` argument, or defined on the Field class "
"itself with the ``default_validators`` attribute."
msgstr ""

# 4e55c7fa49f94cac97beca8b7d366923
#: ../../ref/forms/validation.txt:185
msgid ""
"Simple validators can be used to validate values inside the field, let's "
"have a look at Django's ``EmailField``::"
msgstr ""

# 98b0ab38cbd94fb9b1289ef4a28b87b5
#: ../../ref/forms/validation.txt:194
msgid ""
"As you can see, ``EmailField`` is just a ``CharField`` with customized error "
"message and a validator that validates email addresses. This can also be "
"done on field definition so::"
msgstr ""

# e9518ba34ed24aeea7da467e702f290d
#: ../../ref/forms/validation.txt:200
msgid "is equivalent to::"
msgstr ""

# 48e48689c74948cfaf388d10f122f9bd
#: ../../ref/forms/validation.txt:207
msgid "Form field default cleaning"
msgstr ""

# c6d6e0cf5d7f41ed9971e303f8b037e9
#: ../../ref/forms/validation.txt:209
msgid ""
"Let's firstly create a custom form field that validates its input is a "
"string containing comma-separated email addresses. The full class looks like "
"this::"
msgstr ""

# 196f4110608a459680329ea10642076e
#: ../../ref/forms/validation.txt:233
msgid ""
"Every form that uses this field will have these methods run before anything "
"else can be done with the field's data. This is cleaning that is specific to "
"this type of field, regardless of how it is subsequently used."
msgstr ""

# 8a9acc8446b5414598973cba372301e9
#: ../../ref/forms/validation.txt:237
msgid ""
"Let's create a simple ``ContactForm`` to demonstrate how you'd use this "
"field::"
msgstr ""

# 9efe8c8dd2d348fda999e54c90b9f98e
#: ../../ref/forms/validation.txt:247
msgid ""
"Simply use ``MultiEmailField`` like any other form field. When the "
"``is_valid()`` method is called on the form, the ``MultiEmailField.clean()`` "
"method will be run as part of the cleaning process and it will, in turn, "
"call the custom ``to_python()`` and ``validate()`` methods."
msgstr ""

# 94e5e7859710405e9a6481e13a72ac7f
#: ../../ref/forms/validation.txt:253
msgid "Cleaning a specific field attribute"
msgstr ""

# 0c3a50620e144ba98f9ed3b06b96cc66
#: ../../ref/forms/validation.txt:255
msgid ""
"Continuing on from the previous example, suppose that in our "
"``ContactForm``, we want to make sure that the ``recipients`` field always "
"contains the address ``\"fred@example.com\"``. This is validation that is "
"specific to our form, so we don't want to put it into the general "
"``MultiEmailField`` class. Instead, we write a cleaning method that operates "
"on the ``recipients`` field, like so::"
msgstr ""

# 7ea73683891249818a6524d9ce98cdee
#: ../../ref/forms/validation.txt:275
msgid "Cleaning and validating fields that depend on each other"
msgstr ""

# 5a4cc6ba283949699964219f535b253c
#: ../../ref/forms/validation.txt:277
msgid ""
"Suppose we add another requirement to our contact form: if the ``cc_myself`` "
"field is ``True``, the ``subject`` must contain the word ``\"help\"``. We "
"are performing validation on more than one field at a time, so the form's "
"``clean()`` method is a good spot to do this. Notice that we are talking "
"about the ``clean()`` method on the form here, whereas earlier we were "
"writing a ``clean()`` method on a field. It's important to keep the field "
"and form difference clear when working out where to validate things. Fields "
"are single data points, forms are a collection of fields."
msgstr ""

# 8d2d52f32bdd448f9d638eb31e04649a
#: ../../ref/forms/validation.txt:286
msgid ""
"By the time the form's ``clean()`` method is called, all the individual "
"field clean methods will have been run (the previous two sections), so "
"``self.cleaned_data`` will be populated with any data that has survived so "
"far. So you also need to remember to allow for the fact that the fields you "
"are wanting to validate might not have survived the initial individual field "
"checks."
msgstr ""

# 0999d493c3384cf086dc10e8ea23d8c5
#: ../../ref/forms/validation.txt:293
msgid ""
"There are two ways to report any errors from this step. Probably the most "
"common method is to display the error at the top of the form. To create such "
"an error, you can raise a ``ValidationError`` from the ``clean()`` method. "
"For example::"
msgstr ""

# 2b7112a898ec4633b8096d14ea42ed33
#: ../../ref/forms/validation.txt:316
msgid ""
"In this code, if the validation error is raised, the form will display an "
"error message at the top of the form (normally) describing the problem."
msgstr ""

# 553a06c427fe4694811d910072acce02
#: ../../ref/forms/validation.txt:319
msgid ""
"Note that the call to ``super(ContactForm, self).clean()`` in the example "
"code ensures that any validation logic in parent classes is maintained."
msgstr ""

# 6c8bf7860b554c998fe30cfcfdc88874
#: ../../ref/forms/validation.txt:322
msgid ""
"The second approach might involve assigning the error message to one of the "
"fields. In this case, let's assign an error message to both the \"subject\" "
"and \"cc_myself\" rows in the form display. Be careful when doing this in "
"practice, since it can lead to confusing form output. We're showing what is "
"possible here and leaving it up to you and your designers to work out what "
"works effectively in your particular situation. Our new code (replacing the "
"previous sample) looks like this::"
msgstr ""

# 9c6bc23b5a1d4252bd45996291467e05
#: ../../ref/forms/validation.txt:354
msgid ""
"As you can see, this approach requires a bit more effort, not withstanding "
"the extra design effort to create a sensible form display. The details are "
"worth noting, however. Firstly, earlier we mentioned that you might need to "
"check if the field name keys already exist in the ``_errors`` dictionary. In "
"this case, since we know the fields exist in ``self.cleaned_data``, they "
"must have been valid when cleaned as individual fields, so there will be no "
"corresponding entries in ``_errors``."
msgstr ""

# 8e2b04590ed74edd90f133cb516849c7
#: ../../ref/forms/validation.txt:362
msgid ""
"Secondly, once we have decided that the combined data in the two fields we "
"are considering aren't valid, we must remember to remove them from the "
"``cleaned_data``."
msgstr ""

# 8eb58e1e2e4844038e984d68864a2633
#: ../../ref/forms/validation.txt:366
msgid ""
"In fact, Django will currently completely wipe out the ``cleaned_data`` "
"dictionary if there are any errors in the form. However, this behavior may "
"change in the future, so it's not a bad idea to clean up after yourself in "
"the first place."
msgstr ""
