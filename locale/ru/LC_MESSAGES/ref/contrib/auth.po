# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2012.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-08-21 17:15\n"
"PO-Revision-Date: 2012-02-15 15:13\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# 5ece0c9d368647b388a337b8c29ccce1
#: ../../ref/contrib/auth.txt:2
msgid "``django.contrib.auth``"
msgstr ""

# 52227055fa2a41ec8ed7a6259b5ecb31
#: ../../ref/contrib/auth.txt:4
msgid ""
"This document provides API reference material for the components of Django's "
"authentication system. For more details on the usage of these components or "
"how to customize authentication and authorization see the :doc:"
"`authentication topic guide </topics/auth/index>`."
msgstr ""

# fbc702cb2dbf4cf4bf1e4050bdb9786f
#: ../../ref/contrib/auth.txt:12
msgid "User"
msgstr ""

# 9d24d49db24849079a8a087da8235565
# 292a31748a4c4e90a94edbaa61fd3d39
# f2bde1928b704fdcb89b1ae8a1ea7ccb
#: ../../ref/contrib/auth.txt:15 ../../ref/contrib/auth.txt:300
#: ../../ref/contrib/auth.txt:330
msgid "Fields"
msgstr ""

# 510da60c87ff4dd2a2957ca9eb5367dc
#: ../../ref/contrib/auth.txt:19
msgid ""
":class:`~django.contrib.auth.models.User` objects have the following fields:"
msgstr ""

# a91f4fcf0b214bdb8e40c210ece7d0d1
#: ../../ref/contrib/auth.txt:24
msgid ""
"Required. 30 characters or fewer. Usernames may contain alphanumeric, ``_``, "
"``@``, ``+``, ``.`` and ``-`` characters."
msgstr ""

# a02a9dd9f8974c4ea20aac81bf44f788
# 152d5575ec174d4ba9fe7cd079122e95
#: ../../ref/contrib/auth.txt:29 ../../ref/contrib/auth.txt:33
msgid "Optional. 30 characters or fewer."
msgstr ""

# 8fa09e1943b349c7ac5435a7dc796855
#: ../../ref/contrib/auth.txt:37
msgid "Optional. Email address."
msgstr ""

# 233f30bb90f6416a8f2fbacc3eea8aa9
#: ../../ref/contrib/auth.txt:41
msgid ""
"Required. A hash of, and metadata about, the password. (Django doesn't store "
"the raw password.) Raw passwords can be arbitrarily long and can contain any "
"character. See the :doc:`password documentation </topics/auth/passwords>`."
msgstr ""

# 461eeccdd74948ccabd1993e556ef7ca
#: ../../ref/contrib/auth.txt:48
msgid "Many-to-many relationship to :class:`~django.contrib.auth.models.Group`"
msgstr ""

# 04ffd0a286574bd88352e7b2a130951e
#: ../../ref/contrib/auth.txt:52
msgid ""
"Many-to-many relationship to :class:`~django.contrib.auth.models.Permission`"
msgstr ""

# b9c7cdbc067e4475a3e15a877e69cc7a
#: ../../ref/contrib/auth.txt:56
msgid "Boolean. Designates whether this user can access the admin site."
msgstr ""

# 8f316535b0b34482a50b7e76b8f586a6
#: ../../ref/contrib/auth.txt:60
msgid ""
"Boolean. Designates whether this user account should be considered active. "
"We recommend that you set this flag to ``False`` instead of deleting "
"accounts; that way, if your applications have any foreign keys to users, the "
"foreign keys won't break."
msgstr ""

# 2932d8b24cd74d0593eb28799decfd19
#: ../../ref/contrib/auth.txt:65
msgid ""
"This doesn't necessarily control whether or not the user can log in. "
"Authentication backends aren't required to check for the ``is_active`` flag, "
"and the default backends do not. If you want to reject a login based on "
"``is_active`` being ``False``, it's up to you to check that in your own "
"login view or a custom authentication backend. However, the :class:`~django."
"contrib.auth.forms.AuthenticationForm` used by the :func:`~django.contrib."
"auth.views.login` view (which is the default) *does* perform this check, as "
"do the permission-checking methods such as :meth:`~django.contrib.auth."
"models.User.has_perm` and the authentication in the Django admin. All of "
"those functions/methods will return ``False`` for inactive users."
msgstr ""

# 13bf6a9eba8c46cea59e982e532394ec
#: ../../ref/contrib/auth.txt:79
msgid ""
"Boolean. Designates that this user has all permissions without explicitly "
"assigning them."
msgstr ""

# 1a141181221f4e79816dd44a959e313b
#: ../../ref/contrib/auth.txt:84
msgid ""
"A datetime of the user's last login. Is set to the current date/time by "
"default."
msgstr ""

# 28f71e725f4849daac45d66fea32637a
#: ../../ref/contrib/auth.txt:89
msgid ""
"A datetime designating when the account was created. Is set to the current "
"date/time by default when the account is created."
msgstr ""

# 6768335e760a4fd5a52e9eb477e0774e
# 4e60d119e0004de4bd1e1875bea3205b
#: ../../ref/contrib/auth.txt:93 ../../ref/contrib/auth.txt:319
msgid "Methods"
msgstr ""

# cf6846fdd927413ab2c501cdf273f2bf
#: ../../ref/contrib/auth.txt:99
msgid ""
"Returns the username for the user. Since the User model can be swapped out, "
"you should use  this method instead of referencing the username attribute "
"directly."
msgstr ""

# fb0b8aea36c44268b82a6bbc18f64d9b
#: ../../ref/contrib/auth.txt:105
msgid ""
"Always returns ``False``. This is a way of differentiating :class:`~django."
"contrib.auth.models.User` and :class:`~django.contrib.auth.models."
"AnonymousUser` objects. Generally, you should prefer using :meth:`~django."
"contrib.auth.models.User.is_authenticated()` to this method."
msgstr ""

# 30bd1d81560f4e6b827984c6b994d928
#: ../../ref/contrib/auth.txt:114
msgid ""
"Always returns ``True`` (as opposed to ``AnonymousUser.is_authenticated()`` "
"which always returns ``False``). This is a way to tell if the user has been "
"authenticated. This does not imply any permissions, and doesn't check if the "
"user is active or has a valid session. Even though normally you will call "
"this method on ``request.user`` to find out whether it has been populated by "
"the :class:`~django.contrib.auth.middleware.AuthenticationMiddleware` "
"(representing the currently logged-in user), you should know this method "
"returns ``True`` for any :class:`~django.contrib.auth.models.User` instance."
msgstr ""

# e0d7fa7e6c9c457fa24e938816c02a16
#: ../../ref/contrib/auth.txt:127
msgid ""
"Returns the :attr:`~django.contrib.auth.models.User.first_name` plus the :"
"attr:`~django.contrib.auth.models.User.last_name`, with a space in between."
msgstr ""

# d06ca4ba986947d4b1c78ac001073afa
#: ../../ref/contrib/auth.txt:133
msgid ""
"Sets the user's password to the given raw string, taking care of the "
"password hashing. Doesn't save the :class:`~django.contrib.auth.models.User` "
"object."
msgstr ""

# 0c7248270c7b40889c6b4b46a85e54f7
#: ../../ref/contrib/auth.txt:139
msgid ""
"Returns ``True`` if the given raw string is the correct password for the "
"user. (This takes care of the password hashing in making the comparison.)"
msgstr ""

# e820a9bf2af740939b6e0bc2dc7fc0e8
#: ../../ref/contrib/auth.txt:145
msgid ""
"Marks the user as having no password set.  This isn't the same as having a "
"blank string for a password. :meth:`~django.contrib.auth.models.User."
"check_password()` for this user will never return ``True``. Doesn't save "
"the :class:`~django.contrib.auth.models.User` object."
msgstr ""

# 0ec4dac0ff31410b9c6b690d2e46c941
#: ../../ref/contrib/auth.txt:151
msgid ""
"You may need this if authentication for your application takes place against "
"an existing external source such as an LDAP directory."
msgstr ""

# 563135e78b9643eca650a9069e599c9a
#: ../../ref/contrib/auth.txt:156
msgid ""
"Returns ``False`` if :meth:`~django.contrib.auth.models.User."
"set_unusable_password()` has been called for this user."
msgstr ""

# a8a8aca7b7c24031b942ff817876f55a
#: ../../ref/contrib/auth.txt:162
msgid ""
"Returns a set of permission strings that the user has, through his/her "
"groups."
msgstr ""

# 43755b1401e74783947ea937dd700bf4
#: ../../ref/contrib/auth.txt:165
msgid ""
"If ``obj`` is passed in, only returns the group permissions for this "
"specific object."
msgstr ""

# ca972a1d07fc45188dc8e58878d65270
#: ../../ref/contrib/auth.txt:170
msgid ""
"Returns a set of permission strings that the user has, both through group "
"and user permissions."
msgstr ""

# fe566b8541d146a4b983db16bbdf1323
#: ../../ref/contrib/auth.txt:173
msgid ""
"If ``obj`` is passed in, only returns the permissions for this specific "
"object."
msgstr ""

# 5272f551cacb496fb122dcf15755fdae
#: ../../ref/contrib/auth.txt:178
msgid ""
"Returns ``True`` if the user has the specified permission, where perm is in "
"the format ``\"<app label>.<permission codename>\"``. (see documentation on :"
"ref:`permissions <topic-authorization>`). If the user is inactive, this "
"method will always return ``False``."
msgstr ""

# 1a79d1915a4c4360a8cc9dad81b579c5
#: ../../ref/contrib/auth.txt:183
msgid ""
"If ``obj`` is passed in, this method won't check for a permission for the "
"model, but for this specific object."
msgstr ""

# f120a848e23d428e8c835e5ee36908fb
#: ../../ref/contrib/auth.txt:188
msgid ""
"Returns ``True`` if the user has each of the specified permissions, where "
"each perm is in the format ``\"<app label>.<permission codename>\"``. If the "
"user is inactive, this method will always return ``False``."
msgstr ""

# 57367628b4e4476ba2dcf40a200536aa
#: ../../ref/contrib/auth.txt:193
msgid ""
"If ``obj`` is passed in, this method won't check for permissions for the "
"model, but for the specific object."
msgstr ""

# 4a1f34ecd582490aa404a56fb8de5118
#: ../../ref/contrib/auth.txt:198
msgid ""
"Returns ``True`` if the user has any permissions in the given package (the "
"Django app label). If the user is inactive, this method will always return "
"``False``."
msgstr ""

# aa68d88ea6dc41adb59bfa19d3a959e3
#: ../../ref/contrib/auth.txt:204
msgid ""
"Sends an email to the user. If ``from_email`` is ``None``, Django uses the :"
"setting:`DEFAULT_FROM_EMAIL`."
msgstr ""

# 6c5c3be8b5fc47d09e72e20a9ec1010d
#: ../../ref/contrib/auth.txt:215
msgid ""
"Returns a site-specific profile for this user. Raises ``django.contrib.auth."
"models.SiteProfileNotAvailable`` if the current site doesn't allow profiles, "
"or :exc:`django.core.exceptions.ObjectDoesNotExist` if the user does not "
"have a profile."
msgstr ""

# 0f6193af36fe42c19d2cb1ba3b2d89da
#: ../../ref/contrib/auth.txt:222
msgid "Manager methods"
msgstr ""

# cfce8bd57e3f41e28a7b84d5c44df9a2
#: ../../ref/contrib/auth.txt:226
msgid ""
"The :class:`~django.contrib.auth.models.User` model has a custom manager "
"that has the following helper methods (in addition to the methods provided "
"by :class:`~django.contrib.auth.models.BaseUserManager`):"
msgstr ""

# 2f049a5540744f39872c1bafd97de3c4
#: ../../ref/contrib/auth.txt:237
msgid "Creates, saves and returns a :class:`~django.contrib.auth.models.User`."
msgstr ""

# aec3d3c82e6244ee805a2b93c114527f
#: ../../ref/contrib/auth.txt:239
msgid ""
"The :attr:`~django.contrib.auth.models.User.username` and :attr:`~django."
"contrib.auth.models.User.password` are set as given. The domain portion of :"
"attr:`~django.contrib.auth.models.User.email` is automatically converted to "
"lowercase, and the returned :class:`~django.contrib.auth.models.User` object "
"will have :attr:`~django.contrib.auth.models.User.is_active` set to ``True``."
msgstr ""

# 9ec1c956a5ed435295987af5859927f4
#: ../../ref/contrib/auth.txt:246
msgid ""
"If no password is provided, :meth:`~django.contrib.auth.models.User."
"set_unusable_password()` will be called."
msgstr ""

# 3def4de2093d4d30829dedc86b3d1ae3
#: ../../ref/contrib/auth.txt:250
msgid ""
"The ``extra_fields`` keyword arguments are passed through to the :class:"
"`~django.contrib.auth.models.User`'s ``__init__`` method to allow setting "
"arbitrary fields on a :ref:`custom User model <auth-custom-user>`."
msgstr ""

# 5880119f075941519e1b6d1a75754517
#: ../../ref/contrib/auth.txt:255
msgid ""
"See :ref:`Creating users <topics-auth-creating-users>` for example usage."
msgstr ""

# 70799761e1254792afb04410e2b0c6cb
#: ../../ref/contrib/auth.txt:259
msgid ""
"Same as :meth:`create_user`, but sets :attr:`~models.User.is_staff` and :"
"attr:`~models.User.is_superuser` to ``True``."
msgstr ""

# fe2bc5e4ac254a8ba9d36a2b4f5b0c35
#: ../../ref/contrib/auth.txt:264
msgid "Anonymous users"
msgstr ""

# 5190c769d4a14a579b1b4f7a20c1e9f7
#: ../../ref/contrib/auth.txt:268
msgid ""
":class:`django.contrib.auth.models.AnonymousUser` is a class that implements "
"the :class:`django.contrib.auth.models.User` interface, with these "
"differences:"
msgstr ""

# a10b040c0bbd4496897f73e144e04e91
#: ../../ref/contrib/auth.txt:272
msgid ":ref:`id <automatic-primary-key-fields>` is always ``None``."
msgstr ""

# 10d30b7e8816423785248b671bdace6e
#: ../../ref/contrib/auth.txt:273
msgid ""
":attr:`~django.contrib.auth.models.User.is_staff` and :attr:`~django.contrib."
"auth.models.User.is_superuser` are always ``False``."
msgstr ""

# 7357e9121ed9458eaba047233d84730d
#: ../../ref/contrib/auth.txt:276
msgid ":attr:`~django.contrib.auth.models.User.is_active` is always ``False``."
msgstr ""

# ad7fa8ccdc0b4ea9aef06a3f2e80f98b
#: ../../ref/contrib/auth.txt:277
msgid ""
":attr:`~django.contrib.auth.models.User.groups` and :attr:`~django.contrib."
"auth.models.User.user_permissions` are always empty."
msgstr ""

# 9a6378c57b804ca1ae5d4b07f582c9b5
#: ../../ref/contrib/auth.txt:280
msgid ""
":meth:`~django.contrib.auth.models.User.is_anonymous()` returns ``True`` "
"instead of ``False``."
msgstr ""

# e4756b49f7b64a0095c35bc0fc97aef5
#: ../../ref/contrib/auth.txt:282
msgid ""
":meth:`~django.contrib.auth.models.User.is_authenticated()` returns "
"``False`` instead of ``True``."
msgstr ""

# 81140d9c39bd4c4b8fae9cd0aa208338
#: ../../ref/contrib/auth.txt:284
msgid ""
":meth:`~django.contrib.auth.models.User.set_password()`, :meth:`~django."
"contrib.auth.models.User.check_password()`, :meth:`~django.db.models.Model."
"save` and :meth:`~django.db.models.Model.delete()` raise :exc:`~exceptions."
"NotImplementedError`."
msgstr ""

# aabd345e9afd4828baeeb92d30b952b9
#: ../../ref/contrib/auth.txt:290
msgid ""
"In practice, you probably won't need to use :class:`~django.contrib.auth."
"models.AnonymousUser` objects on your own, but they're used by Web requests, "
"as explained in the next section."
msgstr ""

# 2837587179914cbfa87bf88d260ea2e6
#: ../../ref/contrib/auth.txt:295
msgid "Permission"
msgstr ""

# d958e33551c1473f9471e7ebf34f7f57
#: ../../ref/contrib/auth.txt:302
msgid ""
":class:`~django.contrib.auth.models.Permission` objects have the following "
"fields:"
msgstr ""

# aa267680416d4a31b499a82b94bd6feb
#: ../../ref/contrib/auth.txt:307
msgid "Required. 50 characters or fewer. Example: ``'Can vote'``."
msgstr ""

# f4b13300a7dd42559acc9e2e39d0cc49
#: ../../ref/contrib/auth.txt:311
msgid ""
"Required. A reference to the ``django_content_type`` database table, which "
"contains a record for each installed Django model."
msgstr ""

# 4bfc42ade07a41589a5f4e29593f7a72
#: ../../ref/contrib/auth.txt:316
msgid "Required. 100 characters or fewer. Example: ``'can_vote'``."
msgstr ""

# 8c54c2409fb049478aa3f620bbd00bc1
#: ../../ref/contrib/auth.txt:321
msgid ""
":class:`~django.contrib.auth.models.Permission` objects have the standard "
"data-access methods like any other :doc:`Django model </ref/models/"
"instances>`."
msgstr ""

# d919740182f34bb58a50e429429e9246
#: ../../ref/contrib/auth.txt:325
msgid "Group"
msgstr ""

# 5dd707e90ad2412cb95bc67f0ef5778d
#: ../../ref/contrib/auth.txt:332
msgid ""
":class:`~django.contrib.auth.models.Group` objects have the following fields:"
msgstr ""

# 43118e9947304c5a9592492fba31c476
#: ../../ref/contrib/auth.txt:336
msgid ""
"Required. 80 characters or fewer. Any characters are permitted. Example: "
"``'Awesome Users'``."
msgstr ""

# 2fdaed7063d44a008ec3b930b9115469
#: ../../ref/contrib/auth.txt:341
msgid "Many-to-many field to :class:`~django.contrib.auth.models.Permission`::"
msgstr ""

# 40ea1d6c0ff642d9a1548bd945352c1b
#: ../../ref/contrib/auth.txt:351
msgid "Login and logout signals"
msgstr ""

# 3dc4c4053b54417e8d8e2befe475105f
#: ../../ref/contrib/auth.txt:355
msgid ""
"The auth framework uses the following :doc:`signals </topics/signals>` that "
"can be used for notification when a user logs in or out."
msgstr ""

# b1f0947a56ff402cb137cb56d205d00c
#: ../../ref/contrib/auth.txt:360
msgid "Sent when a user logs in successfully."
msgstr ""

# c9253dd8c92748bc9ce1751664175e2d
#: ../../ref/contrib/auth.txt:362
msgid "Arguments sent with this signal:"
msgstr ""

# 20e7800cd37f4db3b53c03c6679d3315
# d6c4e4f27cbd471b922105769fc86e29
# b57b33669e0a4ed0b55ff41bf880ee8e
#: ../../ref/contrib/auth.txt:365 ../../ref/contrib/auth.txt:379
#: ../../ref/contrib/auth.txt:395
msgid "``sender``"
msgstr ""

# 1c539e0ff3cf483095ac820b9cea9ca0
#: ../../ref/contrib/auth.txt:365
msgid "The class of the user that just logged in."
msgstr ""

# 8944128bd7414a4883b0e834a9ee7782
# 5d6d86c37d09464893fbf880f0b224fb
#: ../../ref/contrib/auth.txt:368 ../../ref/contrib/auth.txt:382
msgid "``request``"
msgstr ""

# dbf32231578942bb8a21d6e118470a0b
# c1a39b2c480243eab2fc1ceb222ae5bc
#: ../../ref/contrib/auth.txt:368 ../../ref/contrib/auth.txt:382
msgid "The current :class:`~django.http.HttpRequest` instance."
msgstr ""

# 1209d52f6a50499aa493973dd2414b02
# 39987bffd8644bb3a4664f9e0195526a
#: ../../ref/contrib/auth.txt:370 ../../ref/contrib/auth.txt:385
msgid "``user``"
msgstr ""

# 4dc451f24b0841df954e40120a714d8f
#: ../../ref/contrib/auth.txt:371
msgid "The user instance that just logged in."
msgstr ""

# f4b4dff357d148229be3dd4d305378d9
#: ../../ref/contrib/auth.txt:375
msgid "Sent when the logout method is called."
msgstr ""

# 3dc4b8e07b20476094555ad56dab4cb6
#: ../../ref/contrib/auth.txt:378
msgid ""
"As above: the class of the user that just logged out or ``None`` if the user "
"was not authenticated."
msgstr ""

# 0c67000c1b79490eb2ca9152e7a124d7
#: ../../ref/contrib/auth.txt:385
msgid ""
"The user instance that just logged out or ``None`` if the user was not "
"authenticated."
msgstr ""

# 04ab9f40fe344e6b8e6a7e90080f6fae
#: ../../ref/contrib/auth.txt:392
msgid "Sent when the user failed to login successfully"
msgstr ""

# 3b632ccc4da3486e839e3de88bd91f32
#: ../../ref/contrib/auth.txt:395
msgid "The name of the module used for authentication."
msgstr ""

# 3c8cc784a65b4ebb8879f45dbfb33acf
#: ../../ref/contrib/auth.txt:400
msgid "``credentials``"
msgstr ""

# fbf6cbd5df8d4224975e5c8f76fe1c34
#: ../../ref/contrib/auth.txt:398
msgid ""
"A dictionary of keyword arguments containing the user credentials that were "
"passed to :func:`~django.contrib.auth.authenticate()` or your own custom "
"authentication backend. Credentials matching a set of 'sensitive' patterns, "
"(including password) will not be sent in the clear as part of the signal."
msgstr ""

# 1d22982f44c74e5eb189a988a1e33103
#: ../../ref/contrib/auth.txt:406
msgid "Authentication backends"
msgstr ""

# 796a6c1b4a814f93bbb8ec384a1fa8ff
#: ../../ref/contrib/auth.txt:411
msgid ""
"This section details the authentication backends that come with Django. For "
"information on how to use them and how to write your own authentication "
"backends, see the :ref:`Other authentication sources section <authentication-"
"backends>` of the :doc:`User authentication guide </topics/auth/index>`."
msgstr ""

# 4ecbd452416a4151b4495fd975985484
#: ../../ref/contrib/auth.txt:419
msgid "Available authentication backends"
msgstr ""

# 824e905e5d0d4c8b9672fc954247e256
#: ../../ref/contrib/auth.txt:421
msgid ""
"The following backends are available in :mod:`django.contrib.auth.backends`:"
msgstr ""

# 798ca46f6f0a4655aa5648cd06f4c06e
#: ../../ref/contrib/auth.txt:425
msgid ""
"This is the default authentication backend used by Django.  It authenticates "
"using credentials consisting of a user identifier and password.  For "
"Django's default user model, the user identifier is the username, for custom "
"user models it is the field specified by USERNAME_FIELD (see :doc:"
"`Customizing Users and authentication </topics/auth/customizing>`)."
msgstr ""

# ec7549f098c94479ad6a8d2a98f04cc2
#: ../../ref/contrib/auth.txt:432
msgid ""
"It also handles the default permissions model as defined for :class:`~django."
"contrib.auth.models.User` and :class:`~django.contrib.auth.models."
"PermissionsMixin`."
msgstr ""

# 4e9ef4707c04434a9e006e486bb94b5e
#: ../../ref/contrib/auth.txt:438
msgid ""
"Use this backend to take advantage of external-to-Django-handled "
"authentication.  It authenticates using usernames passed in :attr:`request."
"META['REMOTE_USER'] <django.http.HttpRequest.META>`.  See the :doc:"
"`Authenticating against REMOTE_USER </howto/auth-remote-user>` documentation."
msgstr ""
