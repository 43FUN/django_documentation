# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated <>, 2012.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-02-29 18:30\n"
"PO-Revision-Date: 2012-03-23 20:21+0200\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# 469dd0d23dc44542b824fde64abe46fd
#: ../../ref/contrib/admin/index.txt:3
msgid "The Django admin site"
msgstr "Интерфейс администратора Django"

# fc70c1e5bd084a38ae98f5f615b9d303
#: ../../ref/contrib/admin/index.txt:8
msgid ""
"One of the most powerful parts of Django is the automatic admin interface. "
"It reads metadata in your model to provide a powerful and production-ready "
"interface that content producers can immediately use to start adding content "
"to the site. In this document, we discuss how to activate, use and customize "
"Django's admin interface."
msgstr ""
"Одна из сильных сторон Django -- это автоматический интерфейс "
"администратора. Он использует мета-данные модели чтобы предоставить "
"многофункциональный, готовый к использованию интерфейс для работы с "
"содержимым сайта. В этом разделе мы расскажем как установить, использовать и "
"настроить интерфейс администратора Django."

# d1c5bd27a4ab43d4af1b13dd44719e13
#: ../../ref/contrib/admin/index.txt:15
msgid "Overview"
msgstr "Обзор"

# c2525d9e3e4747449ddafa8beea62ef8
#: ../../ref/contrib/admin/index.txt:17
msgid "There are seven steps in activating the Django admin site:"
msgstr "Установка интерфейса администратора состоит из семи шагов:"

# 025cb9f54e604d7a85a3865a96533f3b
#: ../../ref/contrib/admin/index.txt:19
msgid ""
"Add ``'django.contrib.admin'`` to your :setting:`INSTALLED_APPS` setting."
msgstr ""
"Добавьте ``'django.contrib.admin'`` в настройку :setting:`INSTALLED_APPS`."

# 74042cd25843454baf1a5665a657d694
#: ../../ref/contrib/admin/index.txt:22
msgid ""
"The admin has four dependencies - :mod:`django.contrib.auth`, :mod:`django."
"contrib.contenttypes`, :mod:`django.contrib.messages` and :mod:`django."
"contrib.sessions`.  If these applications are not in your :setting:"
"`INSTALLED_APPS` list, add them."
msgstr ""
"Интерфейс администратора имеет четыре зависимости - :mod:`django.contrib."
"auth`, :mod:`django.contrib.contenttypes`, :mod:`django.contrib.messages` "
"and :mod:`django.contrib.sessions`.  Если эти приложения не входят в список :"
"setting:`INSTALLED_APPS`, добавьте их."

# 5cfcc9b06d3e430e8eba24883eebc386
#: ../../ref/contrib/admin/index.txt:28
msgid ""
"Add ``django.contrib.messages.context_processors.messages`` to :setting:"
"`TEMPLATE_CONTEXT_PROCESSORS` and :class:`~django.contrib.messages."
"middleware.MessageMiddleware` to :setting:`MIDDLEWARE_CLASSES`. (These are "
"both active by default, so you only need to do this if you've manually "
"tweaked the settings.)"
msgstr ""
"Добавьте ``django.contrib.messages.context_processors.messages`` в :setting:"
"`TEMPLATE_CONTEXT_PROCESSORS` и :class:`~django.contrib.messages.middleware."
"MessageMiddleware` в :setting:`MIDDLEWARE_CLASSES`. (Эти параметры включены "
"по умолчанию, вам необходимо добавить их только, если вы изменяли эти "
"настройки.)"

# 940f37b8014242c9ae0a0904ab7589de
#: ../../ref/contrib/admin/index.txt:34
msgid ""
"Determine which of your application's models should be editable in the admin "
"interface."
msgstr ""
"Определите какие модели будут редактироваться через интерфейс администратора."

# 30eeaa24cdd54d7f87825e4bc8b89949
#: ../../ref/contrib/admin/index.txt:37
msgid ""
"For each of those models, optionally create a ``ModelAdmin`` class that "
"encapsulates the customized admin functionality and options for that "
"particular model."
msgstr ""
"Для каждой модели вы можете создать класс ``ModelAdmin``, который "
"инкапсулирует настройки интерфейса администратора для конкретной модели."

# 79dd3ada1dd74ce0a353d685d9bcac58
#: ../../ref/contrib/admin/index.txt:41
msgid ""
"Instantiate an ``AdminSite`` and tell it about each of your models and "
"``ModelAdmin`` classes."
msgstr ""
"Создайте экземпляр ``AdminSite`` и добавьте в него ваши модели с "
"соответствующими классами ``ModelAdmin``."

# 53ebc68f9e6a402ba68fc3d856264b9e
#: ../../ref/contrib/admin/index.txt:44
msgid "Hook the ``AdminSite`` instance into your URLconf."
msgstr "Добавьте ``AdminSite`` в URLconf."

# 25b21157e70042beb7aebd823c8dc1d3
#: ../../ref/contrib/admin/index.txt:46
msgid ""
"After you've taken these steps, you'll be able to use your Django admin site "
"by visiting the URL you hooked it into (``/admin/``, by default)."
msgstr ""
"После всего это вы можете использовать интерфейс администратора Django "
"посетив соответствующий URL (``/admin/`` по умолчанию)."

# 8c62ae6628534d02bdf83eeb8600e994
#: ../../ref/contrib/admin/index.txt:50
msgid "Other topics"
msgstr "Другие разделы"

# 38e3d8c238d5475283b866cf47261b22
#: ../../ref/contrib/admin/index.txt:60
msgid ""
"For information about serving the static files (images, JavaScript, and CSS) "
"associated with the admin in production, see :ref:`serving-files`."
msgstr ""
"Информацию о настройке статических файлов (изображений, JavaScript и CSS) "
"для интерфейса администратора на \"боевом\" сервере можно найти в разделе :"
"ref:`serving-files`."

# 2c0c7755d7c14b64922c51aab3811457
#: ../../ref/contrib/admin/index.txt:64
msgid "``ModelAdmin`` objects"
msgstr "Объект ``ModelAdmin``"

# a7009ba8dd834d83aa82724750f73afd
#: ../../ref/contrib/admin/index.txt:68
msgid ""
"The ``ModelAdmin`` class is the representation of a model in the admin "
"interface. These are stored in a file named ``admin.py`` in your "
"application. Let's take a look at a very simple example of the "
"``ModelAdmin``::"
msgstr ""
"Класс ``ModelAdmin`` -- это отображение модели в интерфейсе администратора. "
"Его код добавляют в файл ``admin.py`` вашего приложения. Давайте рассмотрим "
"простой пример ``ModelAdmin``::"

# c0b96fa59972490bae730e8f7518ee7e
#: ../../ref/contrib/admin/index.txt:82
msgid ""
"In the preceding example, the ``ModelAdmin`` class doesn't define any custom "
"values (yet). As a result, the default admin interface will be provided. If "
"you are happy with the default admin interface, you don't need to define a "
"``ModelAdmin`` object at all -- you can register the model class without "
"providing a ``ModelAdmin`` description. The preceding example could be "
"simplified to::"
msgstr ""
"В этом примере, класс ``ModelAdmin`` не определяет никаких настроек (пока).В "
"результате мы получим интерфейс предоставляемый по умолчанию. Если он вас "
"устраивает, вы можете не определять ``ModelAdmin`` совсем и зарегистрировать "
"модель без ``ModelAdmin``. Пример выше может выглядеть таким образом::"

# 04d532f573ad48fb83cb3e2320f1cc19
#: ../../ref/contrib/admin/index.txt:95
msgid "``ModelAdmin`` options"
msgstr "Настройки ``ModelAdmin``"

# ce37a3143d8c4777b48e1288cdd0bfb9
#: ../../ref/contrib/admin/index.txt:97
msgid ""
"The ``ModelAdmin`` is very flexible. It has several options for dealing with "
"customizing the interface. All options are defined on the ``ModelAdmin`` "
"subclass::"
msgstr ""
"``ModelAdmin`` очень гибкий. Он содержит ряд параметров для настройки "
"интерфейса администратора. Все настройки определяются в подклассе "
"``ModelAdmin``::"

# d77e9f5bd11c48fea977c723a255e5de
#: ../../ref/contrib/admin/index.txt:106
msgid ""
"A list of actions to make available on the change list page. See :doc:`/ref/"
"contrib/admin/actions` for details."
msgstr ""
"Список действий, которые будут включены на странице списка объектов. "
"Подробности смотрите в разделе :doc:`/ref/contrib/admin/actions`."

# 2cf9345b15c14098969597ebf1ee9534
#: ../../ref/contrib/admin/index.txt:112
msgid ""
"Controls where on the page the actions bar appears. By default, the admin "
"changelist displays actions at the top of the page (``actions_on_top = True; "
"actions_on_bottom = False``)."
msgstr ""
"Определяет где на странице будет расположены панели с действиями. По "
"умолчанию эта панель расположена сверху (``actions_on_top = True; "
"actions_on_bottom = False``)."

# 6bc6135c50f84addabd1d8cfb4fc1f56
#: ../../ref/contrib/admin/index.txt:120
msgid ""
"Controls whether a selection counter is display next to the action dropdown. "
"By default, the admin changelist will display it "
"(``actions_selection_counter = True``)."
msgstr ""
"Указывает отображать ли счетчик выбранных объектов. По умолчанию он "
"отображается (``actions_selection_counter = True``)."

# 52e6934c14564f99bd6913315444bcb3
#: ../../ref/contrib/admin/index.txt:126
msgid ""
"Set ``date_hierarchy`` to the name of a ``DateField`` or ``DateTimeField`` "
"in your model, and the change list page will include a date-based drilldown "
"navigation by that field."
msgstr ""
"Укажите в ``date_hierarchy`` название ``DateField`` или ``DateTimeField`` "
"поля вашей модели, и страница списка объектов будет содержать навигацию по "
"датам из этого поля."

# d5220d676bf843d2b88ba594780327ab
# 318b244d88e44fd1ab19841a691ebac7
# f2744e6edf9c4f3c9b9a8e191dfb73ab
# df28920470914f8b9d19be23bbdc97b9
#: ../../ref/contrib/admin/index.txt:130 ../../ref/contrib/admin/index.txt:250
#: ../../ref/contrib/admin/index.txt:273 ../../ref/contrib/admin/index.txt:398
msgid "Example::"
msgstr "Например::"

# a527fd16338b46139fb8347091ddf5d2
#: ../../ref/contrib/admin/index.txt:136
msgid ""
"This will intelligently populate itself based on available data, e.g. if all "
"the dates are in one month, it'll show the day-level drill-down only."
msgstr ""
"Навигация учитывает значения поля, например, если все значения будут датами "
"из одного месяца, будут отображаться только дни этого месяца."

# fbc9ee051a6449fba81074dd2245588a
#: ../../ref/contrib/admin/index.txt:142
msgid ""
"This attribute, if given, should be a list of field names to exclude from "
"the form."
msgstr ""
"Этот атрибут должен содержать список полей, которые не будут включены в "
"форму редактирования."

# e691faaee86b4255966e54041fabc51f
#: ../../ref/contrib/admin/index.txt:145
msgid "For example, let's consider the following model::"
msgstr "Например, у нас есть следующая модель::"

# 8c4ffe5ce41a4432bbacab03d613410b
#: ../../ref/contrib/admin/index.txt:152
msgid ""
"If you want a form for the ``Author`` model that includes only the ``name`` "
"and ``title`` fields, you would specify ``fields`` or ``exclude`` like this::"
msgstr ""
"Если вам необходима форма для модели ``Author``, которая содержит только "
"поля ``name`` и ``title``, вы можете определить параметр ``fields`` или "
"``exclude`` следующим образом::"

# aa4a995142ee4af2867a5e718381f38c
#: ../../ref/contrib/admin/index.txt:162
msgid ""
"Since the Author model only has three fields, ``name``, ``title``, and "
"``birth_date``, the forms resulting from the above declarations will contain "
"exactly the same fields."
msgstr ""
"Так как модель содержит только три поля, ``name``, ``title`` и "
"``birth_date``, полученные формы будут содержать одинаковые поля."

# 92b5c9ec542844119381a826fa6ef0e1
#: ../../ref/contrib/admin/index.txt:168
msgid ""
"If you need to achieve simple changes in the layout of fields in the forms "
"of the \"add\" and \"change\" pages like only showing a subset of the "
"available fields, modifying their order or grouping them in rows you can use "
"the ``fields`` option (for more complex layout needs see the :attr:"
"`~ModelAdmin.fieldsets` option described in the next section). For example, "
"you could define a simpler version of the admin form for the ``django."
"contrib.flatpages.FlatPage`` model as follows::"
msgstr ""
"Если вам необходимо внести небольшие изменения форму на странице "
"редактирования и добавления, например, изменить список отображаемых полей, "
"их порядок или сгруппировать их, вы можете использовать настройку ``fields`` "
"(сложные изменения можно выполнить используя настройку :attr:`~ModelAdmin."
"fieldsets` описанную ниже). Например, необходимо изменить форму модели из "
"приложения ``django.contrib.flatpages.FlatPage``::"

# 49583aef2ff44789abcb92891f01f1c1
#: ../../ref/contrib/admin/index.txt:179
msgid ""
"In the above example, only the fields ``url``, ``title`` and ``content`` "
"will be displayed, sequentially, in the form."
msgstr ""
"В примере выше будут отображаться только поля ``url``, ``title`` и "
"``content``."

# 02a7c97b822e45e087caa99cd310eb4d
#: ../../ref/contrib/admin/index.txt:184
msgid ""
"``fields`` can contain values defined in :attr:`ModelAdmin.readonly_fields` "
"to be displayed as read-only."
msgstr ""
"``fields`` может содержать значения из :attr:`ModelAdmin.readonly_fields`, "
"чтобы отображать поля без возможности их редактирования."

# d0e8eeacb8794f7cb9e41b5f8ec8efb4
#: ../../ref/contrib/admin/index.txt:189
msgid ""
"To display multiple fields on the same line, wrap those fields in their own "
"tuple. In this example, the ``url`` and ``title`` fields will display on the "
"same line and the ``content`` field will be displayed below them in its own "
"line::"
msgstr ""
"Что бы поля отображались в одной строке, укажите их в кортеже вместе. В этом "
"примере, поля ``url`` и ``title`` будут отображаться в одном ряду, поле "
"``content`` будет расположено ниже::"

# fa3123238cd9410a934ad00d215678f0
#: ../../ref/contrib/admin/index.txt:199
msgid ""
"This ``fields`` option should not be confused with the ``fields`` dictionary "
"key that is within the :attr:`~ModelAdmin.fieldsets` option, as described in "
"the next section."
msgstr ""
"Настройку ``fields`` не следует путать с ключом словаря ``fields`` в "
"настройке :attr:`~ModelAdmin.fieldsets`, описанной ниже."

# 78caa1d6587b4cf0ae70c61ba5ac2071
#: ../../ref/contrib/admin/index.txt:203
msgid ""
"If neither ``fields`` nor :attr:`~ModelAdmin.fieldsets` options are present, "
"Django will default to displaying each field that isn't an ``AutoField`` and "
"has ``editable=True``, in a single fieldset, in the same order as the fields "
"are defined in the model."
msgstr ""
"Если не определен ни атрибут ``fields``, ни :attr:`~ModelAdmin.fieldsets`, "
"Django покажет все поля с ``editable=True`` кроме ``AutoField``, в одном "
"наборе полей в порядке, в котором они указанные в модели."

# 559ed617d51f47eea731acdeef39705e
#: ../../ref/contrib/admin/index.txt:210
msgid ""
"Set ``fieldsets`` to control the layout of admin \"add\" and \"change\" "
"pages."
msgstr "Позволяет изменить макет страниц добавления и редактирования объекта."

# ef3e0e0d3966437292ded775aa6eaa33
#: ../../ref/contrib/admin/index.txt:212
msgid ""
"``fieldsets`` is a list of two-tuples, in which each two-tuple represents a "
"``<fieldset>`` on the admin form page. (A ``<fieldset>`` is a \"section\" of "
"the form.)"
msgstr ""
"``fieldsets`` -- это список двух-элементных кортежей, каждый представляет "
"``<fieldset>`` в форме редактирования объекта. (``<fieldset>`` -- группа "
"полей в форме.)"

# 7c66fedc32b64caebdf3eb90fbd7cb23
#: ../../ref/contrib/admin/index.txt:216
msgid ""
"The two-tuples are in the format ``(name, field_options)``, where ``name`` "
"is a string representing the title of the fieldset and ``field_options`` is "
"a dictionary of information about the fieldset, including a list of fields "
"to be displayed in it."
msgstr ""
"Кортеж должен быть в формате ``(name, options полей)``, где ``name`` это "
"название группы полей, а ``field_options`` -- словарь с информацией о группе "
"полей, включая список полей для отображения."

# efd333c7082641b2af5d3f1fabfcdc1d
#: ../../ref/contrib/admin/index.txt:221
msgid ""
"A full example, taken from the :class:`django.contrib.flatpages.FlatPage` "
"model::"
msgstr "Полный пример для модели :class:`django.contrib.flatpages.FlatPage`::"

# 9500f7b639f64f5381181a8189a2fbf3
#: ../../ref/contrib/admin/index.txt:235
msgid "This results in an admin page that looks like:"
msgstr "Этот пример будет выглядеть следующим образом:"

# 77fd12ae0c284c18accec3cc3417e62a
#: ../../ref/contrib/admin/index.txt:239
msgid ""
"If neither ``fieldsets`` nor :attr:`~ModelAdmin.fields` options are present, "
"Django will default to displaying each field that isn't an ``AutoField`` and "
"has ``editable=True``, in a single fieldset, in the same order as the fields "
"are defined in the model."
msgstr ""
"Если не определен ни атрибут ``fields``, ни :attr:`~ModelAdmin.fieldsets`, "
"Django покажет все поля с ``editable=True`` кроме ``AutoField``, в одном "
"наборе полей в порядке, в котором они указанные в модели."

# c41afbd17a5b4847a3689f27be27511f
#: ../../ref/contrib/admin/index.txt:244
msgid "The ``field_options`` dictionary can have the following keys:"
msgstr "Словарь ``field_options`` может содержать следующие ключи:"

# 8d5f428475244f019736ca8d22b284ac
#: ../../ref/contrib/admin/index.txt:247
msgid ""
"A tuple of field names to display in this fieldset. This key is required."
msgstr "Кортеж с названиями полей. Этот ключ обязателен."

# bcad527bba3e4e5bb5700a9ee4851ee8
#: ../../ref/contrib/admin/index.txt:256
msgid ""
"Just like with the :attr:`~ModelAdmin.fields` option, to display multiple "
"fields on the same line, wrap those fields in their own tuple. In this "
"example, the ``first_name`` and ``last_name`` fields will display on the "
"same line::"
msgstr ""
"Как и в атрибуте :attr:`~ModelAdmin.fields`, что бы отобразить поля в одной "
"строке, добавьте их в один кортеж. В этом примере, поля ``first_name`` и "
"``last_name`` будут показаны в одной строке::"

# b4658952998248959cd13480b4658851
#: ../../ref/contrib/admin/index.txt:267
msgid ""
"``fields`` can contain values defined in :attr:`~ModelAdmin.readonly_fields` "
"to be displayed as read-only."
msgstr ""
"``fields`` может содержать значения из :attr:`ModelAdmin.readonly_fields`, "
"чтобы отображать поля без возможности их редактирования."

# 9955661adae745558aba9cfa2744c160
#: ../../ref/contrib/admin/index.txt:271
msgid "A list containing extra CSS classes to apply to the fieldset."
msgstr "Список содержащий CSS классы, которые будут добавлены в группу полей."

# 2a06d528ae704c6d83fb015cffc3c60f
#: ../../ref/contrib/admin/index.txt:279
msgid ""
"Two useful classes defined by the default admin site stylesheet are "
"``collapse`` and ``wide``. Fieldsets with the ``collapse`` style will be "
"initially collapsed in the admin and replaced with a small \"click to expand"
"\" link. Fieldsets with the ``wide`` style will be given extra horizontal "
"space."
msgstr ""
"Django предоставляет два класса для использования: ``collapse`` и ``wide``. "
"Группа полей с классом ``collapse`` будет показа в свернутом виде с кнопкой "
"\"развернуть\". Группа полей с классом ``wide`` будет шире по горизонтали."

# b4e46c6702924386bf7b1f50d63079f8
#: ../../ref/contrib/admin/index.txt:286
msgid ""
"A string of optional extra text to be displayed at the top of each fieldset, "
"under the heading of the fieldset."
msgstr ""
"Необязательный текст, который будет отображаться под названием группы полей."

# eb4e894a4f7d4848a0c262c8d054d180
#: ../../ref/contrib/admin/index.txt:289
msgid ""
"Note that this value is *not* HTML-escaped when it's displayed in the admin "
"interface. This lets you include HTML if you so desire. Alternatively you "
"can use plain text and ``django.utils.html.escape()`` to escape any HTML "
"special characters."
msgstr ""
"Заметим, что этот текст *не* будет экранирован. Это позволяет добавить вам "
"HTML на страницу. Вы можете использовать обычный текст экранировав его "
"функцией ``django.utils.html.escape()``."

# ea9078fca58d459bb51f0c64ff926335
#: ../../ref/contrib/admin/index.txt:297
msgid ""
"By default, a :class:`~django.db.models.ManyToManyField` is displayed in the "
"admin site with a ``<select multiple>``. However, multiple-select boxes can "
"be difficult to use when selecting many items. Adding a :class:`~django.db."
"models.ManyToManyField` to this list will instead use a nifty unobtrusive "
"JavaScript \"filter\" interface that allows searching within the options. "
"The unselected and selected options appear in two boxes side by side. See :"
"attr:`~ModelAdmin.filter_vertical` to use a vertical interface."
msgstr ""
"По умолчанию, поле :class:`~django.db.models.ManyToManyField` отображается "
"как ``<select multiple>``. Однако, это поле тяжело использовать при большом "
"количестве объектов. Добавив :class:`~django.db.models.ManyToManyField` в "
"этот атрибут, будет использоваться \"виджет\" с JavaScript фильтром для "
"поиска. Смотрите описание :attr:`~ModelAdmin.filter_vertical` про "
"использование вертикального \"виджета\"."

# 28809e524fd54b849bd1fe30483d3237
#: ../../ref/contrib/admin/index.txt:308
msgid ""
"Same as :attr:`~ModelAdmin.filter_horizontal`, but uses a vertical display "
"of the filter interface with the box of unselected options appearing above "
"the box of selected options."
msgstr ""
"Аналогичен :attr:`~ModelAdmin.filter_horizontal`, но использует вертикальный "
"\"виджет\"."

# 218fd556e1d94d71bac4b17dc97318f4
#: ../../ref/contrib/admin/index.txt:314
msgid ""
"By default a ``ModelForm`` is dynamically created for your model. It is used "
"to create the form presented on both the add/change pages. You can easily "
"provide your own ``ModelForm`` to override any default form behavior on the "
"add/change pages."
msgstr ""
"По умолчанию ``ModelForm`` создается динамически для модели. Этот атрибут "
"используется для определения формы на страницах добавления и редактирования. "
"Вы можете указать собственный подкласс ``ModelForm`` для переопределения "
"этих страниц."

# 7262249cc4774bd09f5be891a755a8dd
#: ../../ref/contrib/admin/index.txt:319
msgid ""
"For an example see the section `Adding custom validation to the admin`_."
msgstr "Пример смотрите в разделе `Adding custom validation to the admin`_."

# c6bf049c43ea4e8898940229a0785cb8
#: ../../ref/contrib/admin/index.txt:323
msgid ""
"If your ``ModelForm`` and ``ModelAdmin`` both define an ``exclude`` option "
"then ``ModelAdmin`` takes precedence::"
msgstr ""
"Если и ``ModelForm`` и ``ModelAdmin`` определяют опцию ``exclude``,  "
"``ModelAdmin`` будет иметь больший приоритет::"

# c6d8aa02a7b849a6996ea85605a102b0
#: ../../ref/contrib/admin/index.txt:336
msgid ""
"In the above example, the \"age\" field will be excluded but the \"name\" "
"field will be included in the generated form."
msgstr ""
"В этом примере, поле \"age\" не будет добавлено в форму в отличии от поля "
"\"name\"."

# 391f86f38c7d425ab95de50524df3c86
#: ../../ref/contrib/admin/index.txt:341
msgid ""
"This provides a quick-and-dirty way to override some of the :class:`~django."
"forms.Field` options for use in the admin. ``formfield_overrides`` is a "
"dictionary mapping a field class to a dict of arguments to pass to the field "
"at construction time."
msgstr ""
"Позволяет быстро изменить настройки отображения различных типов :class:"
"`~django.forms.Field` в интерфейсе администратора. ``formfield_overrides`` "
"-- словарь указывающий параметры для классов полей, которые будут "
"передаваться в конструкторы указанных полей."

# 66ad040fdfc941c285c4b0661d93a9fb
#: ../../ref/contrib/admin/index.txt:346
msgid ""
"Since that's a bit abstract, let's look at a concrete example. The most "
"common use of ``formfield_overrides`` is to add a custom widget for a "
"certain type of field. So, imagine we've written a ``RichTextEditorWidget`` "
"that we'd like to use for large text fields instead of the default "
"``<textarea>``. Here's how we'd do that::"
msgstr ""
"Все это звучит немного абстрактно, так что давайте рассмотрим пример. Самое "
"распространенное применение  ``formfield_overrides`` это переопределить "
"\"виджет\" поля формы. Предположим у нас есть ``RichTextEditorWidget``, "
"который использует расширенное поля редактирования вместо ``<textarea>``. "
"Вот как мы может использовать его::"

# 63e89bd143ae4530ab319151e4b9cab9
#: ../../ref/contrib/admin/index.txt:364
msgid ""
"Note that the key in the dictionary is the actual field class, *not* a "
"string. The value is another dictionary; these arguments will be passed to :"
"meth:`~django.forms.Field.__init__`. See :doc:`/ref/forms/api` for details."
msgstr ""
"Заметим что ключ словаря класс поля, а *не* строка. Значение это словарь с "
"аргументами. Это аргументы будут переданы в :meth:`~django.forms.Field."
"__init__`. Подробности смотрите в разделе :doc:`/ref/forms/api`."

# 9b31e0ff6d614928a274f061c8274d85
#: ../../ref/contrib/admin/index.txt:371
msgid ""
"If you want to use a custom widget with a relation field (i.e. :class:"
"`~django.db.models.ForeignKey` or :class:`~django.db.models."
"ManyToManyField`), make sure you haven't included that field's name in "
"``raw_id_fields`` or ``radio_fields``."
msgstr ""
"Если вы хотите использовать собственный \"виджет\" для полей внешних ключей "
"(например, :class:`~django.db.models.ForeignKey` или :class:`~django.db."
"models.ManyToManyField`), убедитесь что поле не добавлено в  "
"``raw_id_fields`` или ``radio_fields``."

# 556b4f1e5d5d40a4a38cfd6413f8baa6
#: ../../ref/contrib/admin/index.txt:376
msgid ""
"``formfield_overrides`` won't let you change the widget on relation fields "
"that have ``raw_id_fields`` or ``radio_fields`` set. That's because "
"``raw_id_fields`` and ``radio_fields`` imply custom widgets of their own."
msgstr ""
"``formfield_overrides`` не позволяет переопределить \"виджет\" для полей из "
"``raw_id_fields`` или ``radio_fields``, потому что ``raw_id_fields`` и "
"``radio_fields`` переопределяют виджет."

# f2997151d2a3405aabe17058729b6d6c
#: ../../ref/contrib/admin/index.txt:385
msgid ""
"Returns the Changelist class to be used for listing. By default, ``django."
"contrib.admin.views.main.ChangeList`` is used. By inheriting this class you "
"can change the behavior of the listing."
msgstr ""
"Возвращает класс ``Changelist``, который используется для отображения списка "
"объекта. По умолчанию, используется ``django.contrib.admin.views.main."
"ChangeList``. Унаследовав этот класс вы можете переопределить поведение этой "
"страницы."

# 89cae539b19f44b5a8bbaec5287a55fe
#: ../../ref/contrib/admin/index.txt:391
msgid "See :class:`InlineModelAdmin` objects below."
msgstr "Смотрите описание ниже :class:`InlineModelAdmin`."

# 3be56666954e44d5bccd01eb79c0270a
#: ../../ref/contrib/admin/index.txt:395
msgid ""
"Set ``list_display`` to control which fields are displayed on the change "
"list page of the admin."
msgstr ""
"``list_display`` указывает какие поля отображать на странице списка объектов."

# 232115e256c046e080eab08772da2f19
#: ../../ref/contrib/admin/index.txt:402
msgid ""
"If you don't set ``list_display``, the admin site will display a single "
"column that displays the ``__unicode__()`` representation of each object."
msgstr ""
"Если ``list_display`` не указан, Django отобразить только результат "
"``__unicode__()`` объекта."

# 0929f05c35284a50a7790f61c236aee4
#: ../../ref/contrib/admin/index.txt:405
msgid "You have four possible values that can be used in ``list_display``:"
msgstr "Вы можете указать четыре варианта значений в ``list_display``:"

# 9d82b68a9f0e47759c375e518f929f5c
#: ../../ref/contrib/admin/index.txt:407
msgid "A field of the model. For example::"
msgstr "Поле модели. Например::"

# 91cfba545f2241abb65349d9c3eb0a6e
#: ../../ref/contrib/admin/index.txt:412
msgid ""
"A callable that accepts one parameter for the model instance. For example::"
msgstr "Функция, которая принимает один аргумент - объект модели. Например::"

# ef8ef2a452e24add8533a515abc303d4
#: ../../ref/contrib/admin/index.txt:422
msgid ""
"A string representing an attribute on the ``ModelAdmin``. This behaves same "
"as the callable. For example::"
msgstr ""
"Название атрибута ``ModelAdmin``. Работает так же как и функция. Например::"

# acb5997c894e4de0909c335183860a73
#: ../../ref/contrib/admin/index.txt:432
msgid ""
"A string representing an attribute on the model. This behaves almost the "
"same as the callable, but ``self`` in this context is the model instance. "
"Here's a full model example::"
msgstr ""
"Название атрибута модели. Работает так же как и функция, но ``self`` в этом "
"контексте объект модели. Например::"

# 6e00fde306144b0388829d0dbd128c0f
#: ../../ref/contrib/admin/index.txt:447
msgid "A few special cases to note about ``list_display``:"
msgstr "Несколько особенностей ``list_display``:"

# e0e89baecd5e483580e1d2a3723ed4d0
#: ../../ref/contrib/admin/index.txt:449
msgid ""
"If the field is a ``ForeignKey``, Django will display the ``__unicode__()`` "
"of the related object."
msgstr ""
"Если указано поле ``ForeignKey``, Django покажет результат ``__unicode__()`` "
"связанного объекта."

# e123a7cd75f9431f8b7d93fdf94ee9c5
#: ../../ref/contrib/admin/index.txt:452
msgid ""
"``ManyToManyField`` fields aren't supported, because that would entail "
"executing a separate SQL statement for each row in the table. If you want to "
"do this nonetheless, give your model a custom method, and add that method's "
"name to ``list_display``. (See below for more on custom methods in "
"``list_display``.)"
msgstr ""
"``ManyToManyField`` не поддерживается, так как это влечет к созданию SQL "
"запроса для каждого объекта. Если вам необходимо сделать это в любом случае, "
"создайте метод модели и используйте его в ``list_display``. (Смотрите ниже "
"подробности про использование методов в ``list_display``.)"

# d5e24591e0184b428e6623392932f12e
#: ../../ref/contrib/admin/index.txt:458
msgid ""
"If the field is a ``BooleanField`` or ``NullBooleanField``, Django will "
"display a pretty \"on\" or \"off\" icon instead of ``True`` or ``False``."
msgstr ""
"Если поле ``BooleanField`` или ``NullBooleanField``, Django покажет красивую "
"\"on\" или \"off\" иконку вместо ``True`` или ``False``."

# 88a69833effb47d49eb8dd08c0a5e3cb
#: ../../ref/contrib/admin/index.txt:462
msgid ""
"If the string given is a method of the model, ``ModelAdmin`` or a callable, "
"Django will HTML-escape the output by default. If you'd rather not escape "
"the output of the method, give the method an ``allow_tags`` attribute whose "
"value is ``True``."
msgstr ""
"Если используется метод модели, ``ModelAdmin`` или функция, Django по "
"умолчанию экранирует результат. Если вам не нужно экранировать результат, "
"добавьте атрибут ``allow_tags`` методу или функции со значением ``True``."

# 5315e21f98574a8d913d6954a48b163f
# 546a271edc95488a8cbe1cae00cd61c5
#: ../../ref/contrib/admin/index.txt:467 ../../ref/contrib/admin/index.txt:486
msgid "Here's a full example model::"
msgstr "Пример::"

# d661f24b7f2541cf9aece4a581100b3e
#: ../../ref/contrib/admin/index.txt:481
msgid ""
"If the string given is a method of the model, ``ModelAdmin`` or a callable "
"that returns True or False Django will display a pretty \"on\" or \"off\" "
"icon if you give the method a ``boolean`` attribute whose value is ``True``."
msgstr ""
"Если используется метод модели, ``ModelAdmin`` или функция, которая "
"возвращает True или False, Django покажет \"on\" или \"off\" иконки, если вы "
"добавите атрибут ``boolean`` методу или функции со значением ``True``."

# 1e259732b18e415fac5fc0eb2f11ed3b
#: ../../ref/contrib/admin/index.txt:500
msgid ""
"The ``__str__()`` and ``__unicode__()`` methods are just as valid in "
"``list_display`` as any other model method, so it's perfectly OK to do this::"
msgstr "Вы можете использовать методы ``__str__()`` и ``__unicode__()`::"

# 0c9cd12c11854d099e2b26c410c15d23
#: ../../ref/contrib/admin/index.txt:506
msgid ""
"Usually, elements of ``list_display`` that aren't actual database fields "
"can't be used in sorting (because Django does all the sorting at the "
"database level)."
msgstr ""
"Обычно элементы ``list_display``, которые не являются полями модели, не могу "
"быть использованы при сортировке (так как Django выполняет сортировку на "
"уровне базы данных)."

# e0e47599fdd242b5ab0c8ee2fe7fb27b
#: ../../ref/contrib/admin/index.txt:510
msgid ""
"However, if an element of ``list_display`` represents a certain database "
"field, you can indicate this fact by setting the ``admin_order_field`` "
"attribute of the item."
msgstr ""
"Однако, если элемент ``list_display`` представляет определенное поле в базе "
"данных, вы можете указать это добавив атрибут ``admin_order_field`` к "
"элементу."

# 62ca7f73d77f437a98976cffb9f1b3a0
#: ../../ref/contrib/admin/index.txt:514
msgid "For example::"
msgstr "Например::"

# 30120993458b42f593b19845aed80e31
#: ../../ref/contrib/admin/index.txt:528
msgid ""
"The above will tell Django to order by the ``first_name`` field when trying "
"to sort by ``colored_first_name`` in the admin."
msgstr ""
"В этом примере Django будет использовать поле ``first_name`` при сортировке "
"по ``colored_first_name``."

# 82f63b9678be42138a9acba5a4e75d2e
#: ../../ref/contrib/admin/index.txt:533
msgid ""
"Set ``list_display_links`` to control which fields in ``list_display`` "
"should be linked to the \"change\" page for an object."
msgstr ""
"Используйте ``list_display_links`` что бы указать какие поля в "
"``list_display`` будут ссылками на страницу редактирования объекта."

# b224518110a649af8811bb3204bac993
#: ../../ref/contrib/admin/index.txt:536
msgid ""
"By default, the change list page will link the first column -- the first "
"field specified in ``list_display`` -- to the change page for each item. But "
"``list_display_links`` lets you change which columns are linked. Set "
"``list_display_links`` to a list or tuple of fields (in the same format as "
"``list_display``) to link."
msgstr ""
"По умолчанию, на страницу редактирования объекта будет вести ссылка в первой "
"колонке. Но ``list_display_links`` позволяет изменить это поведение. "
"Установите ``list_display_links`` в список или кортеж полей (аналогично "
"``list_display``)."

# 3c824fc136b543a8b58b7c73705b5781
#: ../../ref/contrib/admin/index.txt:542
msgid ""
"``list_display_links`` can specify one or many fields. As long as the fields "
"appear in ``list_display``, Django doesn't care how many (or how few) fields "
"are linked. The only requirement is: If you want to use "
"``list_display_links``, you must define ``list_display``."
msgstr ""
"``list_display_links`` может указывать одно или несколько полей. Пока "
"указанные поля входят в ``list_display``, Django безразлично сколько их. "
"Единственное требование: для использования ``list_display_links`` вы должны "
"указать ``list_display``."

# ff011992f61e4eac90f09584a549442c
#: ../../ref/contrib/admin/index.txt:547
msgid ""
"In this example, the ``first_name`` and ``last_name`` fields will be linked "
"on the change list page::"
msgstr ""
"В этом примере поля ``first_name`` и ``last_name`` будут отображаться как "
"ссылки на страницу редактирования объекта::"

# e139ec3809ff49aea8605564ea9477e1
#: ../../ref/contrib/admin/index.txt:558
msgid ""
"Set ``list_editable`` to a list of field names on the model which will allow "
"editing on the change list page. That is, fields listed in ``list_editable`` "
"will be displayed as form widgets on the change list page, allowing users to "
"edit and save multiple rows at once."
msgstr ""
"Укажите в ``list_editable`` список полей, которые можно будет редактировать "
"на странице списка объектов. То есть, поля из ``list_editable`` будут "
"отображаться как поля формы позволяя пользователям изменять значения и "
"сохранять изменения для всех строк сразу."

# 7f349f5a6d774a7d96e4468d21722191
#: ../../ref/contrib/admin/index.txt:565
msgid ""
"``list_editable`` interacts with a couple of other options in particular "
"ways; you should note the following rules:"
msgstr ""
"``list_editable`` взаимодействует с другими настройками следующим образом:"

# 783f4214fb7e41eaaa7db0268e98c426
#: ../../ref/contrib/admin/index.txt:568
msgid ""
"Any field in ``list_editable`` must also be in ``list_display``. You can't "
"edit a field that's not displayed!"
msgstr ""
"Поле из ``list_editable`` должно входить в ``list_display``. Вы мне можете "
"редактировать поле, которое не отображается!"

# fee1e5cd05bc4df4a75abd836628b468
#: ../../ref/contrib/admin/index.txt:571
msgid ""
"The same field can't be listed in both ``list_editable`` and "
"``list_display_links`` -- a field can't be both a form and a link."
msgstr ""
"Поле не может быть в ``list_editable`` и ``list_display_links`` вместе -- "
"поле не может быть ссылкой и полем формы."

# 3a6b53061ad445e8a680df7d0bfc4c08
#: ../../ref/contrib/admin/index.txt:575
msgid "You'll get a validation error if either of these rules are broken."
msgstr "Вы получите ошибку проверки если нарушите эти правила."

# ce2e78d8f148479eb6c7392247188aa6
#: ../../ref/contrib/admin/index.txt:581
msgid ""
"Set ``list_filter`` to activate filters in the right sidebar of the change "
"list page of the admin, as illustrated in the following screenshot:"
msgstr ""
"Укажите ``list_filter`` что бы определить фильтры данных в правой панели "
"страницы списка объектов, как показано на изображении:"

# 3fb3c13827754ee7aee795f5524de903
#: ../../ref/contrib/admin/index.txt:586
msgid ""
"``list_filter`` should be a list of elements, where each element should be "
"of one of the following types:"
msgstr "``list_filter`` - это список элементов, которые могу быть:"

# c2c5834885f447718fcb44c399915a01
#: ../../ref/contrib/admin/index.txt:589
msgid ""
"a field name, where the specified field should be either a ``BooleanField``, "
"``CharField``, ``DateField``, ``DateTimeField``, ``IntegerField``, "
"``ForeignKey`` or ``ManyToManyField``, for example::"
msgstr ""
"название поля следующего типа: ``BooleanField``, ``CharField``, "
"``DateField``, ``DateTimeField``, ``IntegerField``, ``ForeignKey`` или "
"``ManyToManyField``. Например::"

# bcfd8bc23c17485b8a1a87456146db5b
#: ../../ref/contrib/admin/index.txt:598
msgid ""
"Field names in ``list_filter`` can also span relations using the ``__`` "
"lookup, for example::"
msgstr ""
"Поле в ``list_filter`` может указывать и на связанный объект используя "
"``__``, например::"

# 227963a5af384e9cb9d2948bbfb6cf35
#: ../../ref/contrib/admin/index.txt:604
msgid ""
"a class inheriting from :mod:`django.contrib.admin.SimpleListFilter`, which "
"you need to provide the ``title`` and ``parameter_name`` attributes to and "
"override the ``lookups`` and ``queryset`` methods, e.g.::"
msgstr ""
"подкласс :mod:`django.contrib.admin.SimpleListFilter`, в котором необходимо "
"определить атрибуты ``title`` и ``parameter_name`` и переопределить методы "
"``lookups`` и ``queryset``, например::"

# 005c3267db5544c6a15e3e171df7693f
#: ../../ref/contrib/admin/index.txt:653
msgid ""
"As a convenience, the ``HttpRequest`` object is passed to the ``lookups`` "
"and ``queryset`` methods, for example::"
msgstr ""
"Для удобства объект ``HttpRequest`` передается в методы ``lookups`` и "
"``queryset``, например::"

# 8ee7a72d926f4151bba0ab76e278c134
#: ../../ref/contrib/admin/index.txt:668
msgid ""
"Also as a convenience, the ``ModelAdmin`` object is passed to the "
"``lookups`` method, for example if you want to base the lookups on the "
"available data::"
msgstr ""
"Так же объект ``ModelAdmin`` передается в метод ``lookups``. Например, вы "
"можете использовать существующие данные при создании фильтра::"

# 2171bf8ada7e453e8eb50b89df3cad48
#: ../../ref/contrib/admin/index.txt:687
msgid ""
"a tuple, where the first element is a field name and the second element is a "
"class inheriting from :mod:`django.contrib.admin.FieldListFilter`, for "
"example::"
msgstr ""
"кортеж, где первый элемент название поля, а второй - подкласс :mod:`django."
"contrib.admin.FieldListFilter`, например::"

# 67c3565a834f4e2794f98d4a11de130f
#: ../../ref/contrib/admin/index.txt:700
msgid ""
"The ``FieldListFilter`` API is considered internal and might be changed."
msgstr "API ``FieldListFilter`` считается внутренним и может быть изменено."

# 1e256cc6ee454ea1b41a6de3dd6e867c
#: ../../ref/contrib/admin/index.txt:705
msgid ""
"It is possible to specify a custom template for rendering a list filter::"
msgstr "Вы можете указать собственный шаблон для отображения фильтра::"

# 4da1ea6823c84f938cbd8a7106a89094
#: ../../ref/contrib/admin/index.txt:710
msgid ""
"See the default template provided by django (``admin/filter.html``) for a "
"concrete example."
msgstr ""
"Конкретный пример можно найти в шаблоне приложения интерфейса "
"администратора, который использует Django (``admin/filter.html``)."

# 9ff9ac3f3b3b4980be5168b9c2e44e6e
#: ../../ref/contrib/admin/index.txt:717
msgid ""
"Set ``list_max_show_all`` to control how many items can appear on a \"Show "
"all\" admin change list page. The admin will display a \"Show all\" link on "
"the change list only if the total result count is less than or equal to this "
"setting. By default, this is set to ``200``."
msgstr ""
"Используйте ``list_max_show_all`` что бы указать количество объектов на "
"странице списка объектов при выборе \"Показать все\". Интерфейс "
"администратора покажет ссылку \"Показать все\" только если общее количество "
"объектов меньше или равно этому значению. По умолчанию равно ``200``."

# 9f8ebdd8d5c547f8b33727043567a4ac
#: ../../ref/contrib/admin/index.txt:724
msgid ""
"Set ``list_per_page`` to control how many items appear on each paginated "
"admin change list page. By default, this is set to ``100``."
msgstr ""
"Используйте ``list_per_page`` что бы определить количество объектов на одной "
"странице при отображении списка объектов. По умолчанию равно ``100``."

# 51feaf568bc84515b4fcc579c8676393
#: ../../ref/contrib/admin/index.txt:729
msgid ""
"Set ``list_select_related`` to tell Django to use :meth:`~django.db.models."
"query.QuerySet.select_related` in retrieving the list of objects on the "
"admin change list page. This can save you a bunch of database queries."
msgstr ""
"Используйте ``list_select_related`` что бы указать Django использовать :meth:"
"`~django.db.models.query.QuerySet.select_related` при выборе объектов для "
"страницы отображения объектов. Это может сократить количество запросов на "
"этой странице."

# 4eb5bb6829514d7ba4e9b3d42733e51b
#: ../../ref/contrib/admin/index.txt:734
msgid "The value should be either ``True`` or ``False``. Default is ``False``."
msgstr ""
"Значение должно быть ``True`` или ``False``. По умолчанию равно ``False``."

# 960761936520499ca5a79fcf74972669
#: ../../ref/contrib/admin/index.txt:736
msgid ""
"Note that Django will use :meth:`~django.db.models.query.QuerySet."
"select_related`, regardless of this setting if one of the ``list_display`` "
"fields is a ``ForeignKey``."
msgstr ""
"Заметим, Django будет использовать :meth:`~django.db.models.query.QuerySet."
"select_related` не зависимо от этой настройки, если хотя бы одно поле в "
"``list_display`` является ``ForeignKey``."

# 5d19de131acc40eca1392c2c68de4f9c
#: ../../ref/contrib/admin/index.txt:743
msgid ""
"Set ``ordering`` to specify how lists of objects should be ordered in the "
"Django admin views. This should be a list or tuple in the same format as a "
"model's :attr:`~django.db.models.Options.ordering` parameter."
msgstr ""
"``ordering`` позволяет определить сортировку на странице списка объектов. "
"Это должен быть список или кортеж в формате аналогичном параметру :attr:"
"`~django.db.models.Options.ordering`."

# 6718dc2bc53449909a33b0589c5d68ed
#: ../../ref/contrib/admin/index.txt:747
msgid ""
"If this isn't provided, the Django admin will use the model's default "
"ordering."
msgstr ""
"Если атрибут не указана, Django будет использовать сортировку по умолчанию "
"модели."

# f30c949592e44519b7a89143e54b5c4f
#: ../../ref/contrib/admin/index.txt:752
msgid ""
"If you need to specify a dynamic order (for example depending on user or "
"language) you can implement a :meth:`~ModelAdmin.get_ordering` method."
msgstr ""
"Если вам необходима динамическая сортировка (например, в зависимости от "
"пользователя или текущего языка) вы можете определить метод :meth:"
"`~ModelAdmin.get_ordering`."

# 02bdcc8d6c5e4508a7067e267866aac9
#: ../../ref/contrib/admin/index.txt:757
msgid ""
"Django honors all elements in the list/tuple; before 1.4, only the first was "
"respected."
msgstr ""
"Django учитывает все элементы в списке/кортеже, до 1.4 использовался только "
"первый."

# 11fdfb11298f4a4d9da4ef551cafac00
#: ../../ref/contrib/admin/index.txt:764
msgid ""
"The paginator class to be used for pagination. By default, :class:`django."
"core.paginator.Paginator` is used. If the custom paginator class doesn't "
"have the same constructor interface as :class:`django.core.paginator."
"Paginator`, you will also need to provide an implementation for :meth:"
"`ModelAdmin.get_paginator`."
msgstr ""
"Класс используемый для создания постраничного отображения. По умолчанию "
"используется :class:`django.core.paginator.Paginator`. Если конструктор "
"вашего класса принимает параметры отличные от :class:`django.core.paginator."
"Paginator`, вам необходимо так же переопределить метод :meth:`ModelAdmin."
"get_paginator`."

# ac1851c9ed884393b11c174b83a31f72
#: ../../ref/contrib/admin/index.txt:772
msgid ""
"Set ``prepopulated_fields`` to a dictionary mapping field names to the "
"fields it should prepopulate from::"
msgstr ""
"``prepopulated_fields`` позволяет определить поля, которые получают значение "
"основываясь на значениях других полей::"

# f365a4b966e94bb6902f21f7b3a90cbd
#: ../../ref/contrib/admin/index.txt:778
msgid ""
"When set, the given fields will use a bit of JavaScript to populate from the "
"fields assigned. The main use for this functionality is to automatically "
"generate the value for ``SlugField`` fields from one or more other fields. "
"The generated value is produced by concatenating the values of the source "
"fields, and then by transforming that result into a valid slug (e.g. "
"substituting dashes for spaces)."
msgstr ""
"Указанные поля будут использовать код JavaScript для заполнения поля "
"значением на основе значений полей-источников. Основное применение - это "
"генерировать значение для полей ``SlugField`` из значений другого поля или "
"полей. Процесс генерирования состоит в объединении значений полей-источников "
"и преобразованию результата в правильный \"slug\" (например, заменой "
"пробелов на дефисы)."

# b870ff79451343cdb0d24d0958f442d8
#: ../../ref/contrib/admin/index.txt:785
msgid ""
"``prepopulated_fields`` doesn't accept ``DateTimeField``, ``ForeignKey``, "
"nor ``ManyToManyField`` fields."
msgstr ""
"``prepopulated_fields`` не принимает поля ``DateTimeField``, ``ForeignKey`` "
"или ``ManyToManyField``."

# 71d8333206084f21925a03679f1613ca
#: ../../ref/contrib/admin/index.txt:790
msgid ""
"By default, Django's admin uses a select-box interface (<select>) for fields "
"that are ``ForeignKey`` or have ``choices`` set. If a field is present in "
"``radio_fields``, Django will use a radio-button interface instead. Assuming "
"``group`` is a ``ForeignKey`` on the ``Person`` model::"
msgstr ""
"По умолчанию Django использует <select> для полей ``ForeignKey`` или тех, "
"которые содержат ``choices``. Ели поле указанно в ``radio_fields``, Django "
"будет использовать радио кнопки. Предположим что ``group`` поле "
"``ForeignKey`` в модели ``Person``::"

# 420f00867b68457b8b805312931f2d21
#: ../../ref/contrib/admin/index.txt:798
msgid ""
"You have the choice of using ``HORIZONTAL`` or ``VERTICAL`` from the "
"``django.contrib.admin`` module."
msgstr ""
"Вы можете использовать ``HORIZONTAL`` или ``VERTICAL`` из модуля ``django."
"contrib.admin``."

# 29fde17f54874e3e9428d9104c977d92
#: ../../ref/contrib/admin/index.txt:801
msgid ""
"Don't include a field in ``radio_fields`` unless it's a ``ForeignKey`` or "
"has ``choices`` set."
msgstr ""
"Не добавляйте в ``radio_fields`` поля, которые не являются ``ForeignKey`` "
"или не содержат ``choices``."

# e3d7ead25dfc400a9cc2b1a97fad67f7
# dc490269f5784354b693b7fd9ba33647
#: ../../ref/contrib/admin/index.txt:806
#: ../../ref/contrib/admin/index.txt:1479
msgid ""
"By default, Django's admin uses a select-box interface (<select>) for fields "
"that are ``ForeignKey``. Sometimes you don't want to incur the overhead of "
"having to select all the related instances to display in the drop-down."
msgstr ""
"По умолчанию Django использует <select> для полей ``ForeignKey``. Если "
"связанных объектов очень много, создание <select> может быть очень затратным "
"процессом."

# 12a55fe0620843c691995c080079b021
#: ../../ref/contrib/admin/index.txt:811
msgid ""
"``raw_id_fields`` is a list of fields you would like to change into an "
"``Input`` widget for either a ``ForeignKey`` or ``ManyToManyField``::"
msgstr ""
"``raw_id_fields`` содержит список полей, которые будут использовать поле "
"``Input`` для ``ForeignKey`` или ``ManyToManyField``::"

# 05c4e6d9f168447d952107941e9ffa0b
#: ../../ref/contrib/admin/index.txt:822
msgid ""
"By default the admin shows all fields as editable. Any fields in this option "
"(which should be a ``list`` or ``tuple``) will display its data as-is and "
"non-editable. This option behaves nearly identical to :attr:`ModelAdmin."
"list_display`. Usage is the same, however, when you specify :attr:"
"`ModelAdmin.fields` or :attr:`ModelAdmin.fieldsets` the read-only fields "
"must be present to be shown (they are ignored otherwise)."
msgstr ""
"По умолчанию интерфейс администратора отображает все поля как редактируемые. "
"Поля указанные в этой настройке (которая является ``list`` или ``tuple``) "
"будут отображаться значение без возможности редактировать. Эта настройка "
"работает почти аналогично :attr:`ModelAdmin.list_display`. Однако, если вы "
"определяете аргумент :attr:`ModelAdmin.fields` или :attr:`ModelAdmin."
"fieldsets` поля для чтения должны быть в них указаны (иначе они будут "
"проигнорированы)."

# 316d511e874b45c391296a3a755ae1e1
#: ../../ref/contrib/admin/index.txt:829
msgid ""
"If ``readonly_fields`` is used without defining explicit ordering through :"
"attr:`ModelAdmin.fields` or :attr:`ModelAdmin.fieldsets` they will be added "
"last after all editable fields."
msgstr ""
"Если ``readonly_fields`` используется без определения порядка полей через "
"атрибуты :attr:`ModelAdmin.fields` или :attr:`ModelAdmin.fieldsets`, поля из "
"этой настройки будут отображаться после редактируемых полей."

# 2869b96c111848dab3426d62e705a09a
#: ../../ref/contrib/admin/index.txt:835
msgid "Set ``save_as`` to enable a \"save as\" feature on admin change forms."
msgstr ""
"Укажите ``save_as`` что бы включить возможность \"сохранять как\" на "
"странице редактирования объекта."

# fc4be01514f049c8b00497ecfa5ddedd
#: ../../ref/contrib/admin/index.txt:837
msgid ""
"Normally, objects have three save options: \"Save\", \"Save and continue "
"editing\" and \"Save and add another\". If ``save_as`` is ``True``, \"Save "
"and add another\" will be replaced by a \"Save as\" button."
msgstr ""
"По умолчанию страница содержит три кнопки: \"Сохранить\", \"Сохранить и "
"продолжить редактирование\" и \"Сохранить и добавить новый\". Если "
"``save_as`` равен ``True``, \"Сохранить и добавить новый\" будет заменена "
"кнопкой \"Сохранить как\"."

# 7c91574328a34c8ca6077b3e2a376ec6
#: ../../ref/contrib/admin/index.txt:841
msgid ""
"\"Save as\" means the object will be saved as a new object (with a new ID), "
"rather than the old object."
msgstr "\"Сохранить как\" сохранит объект как новый (с новым ID)."

# 6042eee3a5e7499181b4ca22cf70ccce
#: ../../ref/contrib/admin/index.txt:844
msgid "By default, ``save_as`` is set to ``False``."
msgstr "По умолчанию ``save_as`` равен ``False``."

# 6db438e0b67b4022a5be400f7dcabb0a
#: ../../ref/contrib/admin/index.txt:848
msgid ""
"Set ``save_on_top`` to add save buttons across the top of your admin change "
"forms."
msgstr ""
"Укажите ``save_on_top`` что бы добавить кнопки сохранения в верхней части "
"страницы редактирования объекта."

# 47ef3911cf454551afb563e1fabcac63
#: ../../ref/contrib/admin/index.txt:851
msgid ""
"Normally, the save buttons appear only at the bottom of the forms. If you "
"set ``save_on_top``, the buttons will appear both on the top and the bottom."
msgstr ""
"По умолчанию кнопки сохранения отображаются под формой. Если указать "
"``save_on_top``, кнопки будут отображаться и сверху и снизу."

# 76ccee221d8d482aa915047c7c04e644
#: ../../ref/contrib/admin/index.txt:855
msgid "By default, ``save_on_top`` is set to ``False``."
msgstr "По умолчанию ``save_on_top`` равен ``False``."

# 06dea4abdbe34c1a9fc1fc0e01d4382c
#: ../../ref/contrib/admin/index.txt:859
msgid ""
"Set ``search_fields`` to enable a search box on the admin change list page. "
"This should be set to a list of field names that will be searched whenever "
"somebody submits a search query in that text box."
msgstr ""
"``search_fields`` позволяет добавить поиск на страницу списка объектов. Этот "
"атрибут должен содержать список полей, которые будут использоваться при "
"поиске."

# d040d49bab784a7fa68d42c63bce2a8f
#: ../../ref/contrib/admin/index.txt:863
msgid ""
"These fields should be some kind of text field, such as ``CharField`` or "
"``TextField``. You can also perform a related lookup on a ``ForeignKey`` or "
"``ManyToManyField`` with the lookup API \"follow\" notation::"
msgstr ""
"Эти поля должны быть текстовыми, таким как ``CharField`` или ``TextField``. "
"Вы можете указать поля из связанных объектов используя ``__``::"

# 8c834b31921f4019b155235bb0f6fd5d
#: ../../ref/contrib/admin/index.txt:869
msgid ""
"For example, if you have a blog entry with an author, the following "
"definition would enable search blog entries by the email address of the "
"author::"
msgstr ""
"Например, у нас есть модель записи в блоге с полем автора. Следующая "
"настройка позволит искать записи по email адресу автора::"

# 542809d6d2b84173a23c585daf833902
#: ../../ref/contrib/admin/index.txt:875
msgid ""
"When somebody does a search in the admin search box, Django splits the "
"search query into words and returns all objects that contain each of the "
"words, case insensitive, where each word must be in at least one of "
"``search_fields``. For example, if ``search_fields`` is set to ``"
"['first_name', 'last_name']`` and a user searches for ``john lennon``, "
"Django will do the equivalent of this SQL ``WHERE`` clause::"
msgstr ""
"При поиске Django разбивает поисковый запрос на слова и возвращает объекты, "
"которые содержат эти слова в одном из указанных в ``search_fields`` полей. "
"Поиск регистро-независимый. Например, если ``search_fields`` равен ``"
"['first_name', 'last_name']`` и пользователь выполняет поиск по ``john "
"lennon``, Django создаст такое SQL условие ``WHERE``::"

# f85233335e1140d0839cfb24c8bff579
#: ../../ref/contrib/admin/index.txt:885
msgid ""
"For faster and/or more restrictive searches, prefix the field name with an "
"operator:"
msgstr ""
"Для определения более конкретных условий поиска используйте следующие "
"префиксы:"

# 3ddc446099a64708a35d40705e2a491e
#: ../../ref/contrib/admin/index.txt:889
msgid ""
"Matches the beginning of the field. For example, if ``search_fields`` is set "
"to ``['^first_name', '^last_name']`` and a user searches for ``john "
"lennon``, Django will do the equivalent of this SQL ``WHERE`` clause::"
msgstr ""
"Указывает на начало строки. Например, если ``search_fields`` установить в ``"
"['^first_name', '^last_name']`` и пользователь ищет ``john lennon``, Django "
"создаст следующее SQL условие ``WHERE``::"

# 89188e0642eb48dc9cdac834d0109d63
#: ../../ref/contrib/admin/index.txt:897
msgid ""
"This query is more efficient than the normal ``'%john%'`` query, because the "
"database only needs to check the beginning of a column's data, rather than "
"seeking through the entire column's data. Plus, if the column has an index "
"on it, some databases may be able to use the index for this query, even "
"though it's a ``LIKE`` query."
msgstr ""
"Этот запрос более эффективный чем ``'%john%'``, так как база данных будет "
"проверять только начало значения поля. К тому же, если поле содержит индекс, "
"некоторые базы данных могут использовать его при поиске, даже для поиска "
"через ``LIKE``."

# efec6bde461e45508706a79a86ab764a
#: ../../ref/contrib/admin/index.txt:904
msgid ""
"Matches exactly, case-insensitive. For example, if ``search_fields`` is set "
"to ``['=first_name', '=last_name']`` and a user searches for ``john "
"lennon``, Django will do the equivalent of this SQL ``WHERE`` clause::"
msgstr ""
"Полное совпадение, регистро-независимое. Например, если ``search_fields`` "
"равно ``['=first_name', '=last_name']`` и пользователь ищет ``john lennon``, "
"Django создаст следующее SQL условие ``WHERE``::"

# 6cade857d4994410a19b64d345214eb2
#: ../../ref/contrib/admin/index.txt:912
msgid ""
"Note that the query input is split by spaces, so, following this example, "
"it's currently not possible to search for all records in which "
"``first_name`` is exactly ``'john winston'`` (containing a space)."
msgstr ""
"Поисковый запрос разбивается по пробелам, по этому, исходя из примера выше, "
"нельзя найти записи с полем ``first_name`` равным ``'john winston'``"
"(содержащим пробел)."

# ea83e4f3a42d4056bfa5fff1258e7b5d
#: ../../ref/contrib/admin/index.txt:917
msgid ""
"Performs a full-text match. This is like the default search method but uses "
"an index. Currently this is only available for MySQL."
msgstr ""
"Выполняет полнотекстовый поиск. Работает как и обычный поиск, но использует "
"индекс. На данный момент это работает только в MySQL."

# 51ba9c8cd4f64348bbced470447b9006
#: ../../ref/contrib/admin/index.txt:921
msgid "Custom template options"
msgstr "Настройки шаблонов"

# c12dec27993642da998b5e9e628fd661
#: ../../ref/contrib/admin/index.txt:923
msgid ""
"The `Overriding Admin Templates`_ section describes how to override or "
"extend the default admin templates.  Use the following options to override "
"the default templates used by the :class:`ModelAdmin` views:"
msgstr ""
"Раздел `Overriding Admin Templates`_ описывает как переопределить или "
"расширить шаблоны интерфейса администратора.  Используйте следующие "
"настройки что бы переопределить шаблоны, которые используются "
"представлениями :class:`ModelAdmin`:"

# b175857c7bc1431884a4c5a1588e2bc5
#: ../../ref/contrib/admin/index.txt:931
msgid "Path to a custom template, used by :meth:`add_view`."
msgstr "Путь к шаблону, который используется :meth:`add_view`."

# 1f808b101c514eceaa2576b3d4777886
#: ../../ref/contrib/admin/index.txt:935
msgid "Path to a custom template, used by :meth:`change_view`."
msgstr "Путь к шаблону, который используется :meth:`change_view`."

# 84064ef4bbbf464d894f5d1de308e2b0
#: ../../ref/contrib/admin/index.txt:939
msgid "Path to a custom template, used by :meth:`changelist_view`."
msgstr "Путь к шаблону, который используется :meth:`changelist_view`."

# c1cb2d319304433c912d0b63c62aa68a
#: ../../ref/contrib/admin/index.txt:943
msgid ""
"Path to a custom template, used by :meth:`delete_view` for displaying a "
"confirmation page when deleting one or more objects."
msgstr ""
"Путь к шаблону, который используется :meth:`delete_view` для отображения "
"страницы подтверждения удаления одного или нескольких объектов."

# d0b9dda2d3374f07b056adf56d7a311d
#: ../../ref/contrib/admin/index.txt:950
msgid ""
"Path to a custom template, used by the :meth:`delete_selected` action method "
"for displaying a confirmation page when deleting one or more objects. See "
"the :doc:`actions documentation</ref/contrib/admin/actions>`."
msgstr ""
"Путь к шаблону, который используется :meth:`delete_selected` для отображения "
"страницы подтверждения удаления одного или нескольких объектов. Подробности "
"смотрите в разделе о :doc:`действиях в интерфейсе администратора </ref/"
"contrib/admin/actions>`."

# a01b755d270442488f1c1ae7f8f65510
#: ../../ref/contrib/admin/index.txt:957
msgid "Path to a custom template, used by :meth:`history_view`."
msgstr "Путь к шаблону, который используется :meth:`history_view`."

# 5c51404f4e064efa86ad97e9fa446ca1
#: ../../ref/contrib/admin/index.txt:963
msgid "``ModelAdmin`` methods"
msgstr "Методы ``ModelAdmin``"

# e687c6dac0b740da8d98170eb85d7f39
#: ../../ref/contrib/admin/index.txt:967
msgid ""
":meth:`ModelAdmin.save_model` and :meth:`ModelAdmin.delete_model` must save/"
"delete the object, they are not for veto purposes, rather they allow you to "
"perform extra operations."
msgstr ""
"Методы :meth:`ModelAdmin.save_model` и :meth:`ModelAdmin.delete_model` "
"должны сохранять/удалять объект. Их задача выполнять дополнительные "
"операции, а не разрешать/запрещать операции удаления/сохранения."

# 124640a2d1914f549ebd677fdaa6b357
#: ../../ref/contrib/admin/index.txt:973
msgid ""
"The ``save_model`` method is given the ``HttpRequest``, a model instance, a "
"``ModelForm`` instance and a boolean value based on whether it is adding or "
"changing the object. Here you can do any pre- or post-save operations."
msgstr ""
"Метод ``save_model`` принимает объект ``HttpRequest``, экземпляр модели, "
"экземпляр ``ModelForm`` и булево значение указывающее создан объект или "
"изменяется. В этом методе вы может выполнить дополнительные операции до или "
"после сохранения."

# 64a9bf81894d40a389b7d16ba267be7b
#: ../../ref/contrib/admin/index.txt:977
msgid "For example to attach ``request.user`` to the object prior to saving::"
msgstr ""
"Например, добавление ``request.user`` к объекту перед сохранением объекта::"

# a4cdf8556b3d4e77960cb9ec3e1d81ad
#: ../../ref/contrib/admin/index.txt:988
msgid ""
"The ``delete_model`` method is given the ``HttpRequest`` and a model "
"instance. Use this method to do pre- or post-delete operations."
msgstr ""
"Метод ``delete_model`` принимает объект ``HttpRequest`` и экземпляр модели, "
"который удаляется. В этом методе вы может выполнить дополнительные операции "
"до или после удаления."

# 8ec73ef4f8464ffe900fc18a2b2d4568
#: ../../ref/contrib/admin/index.txt:993
msgid ""
"The ``save_formset`` method is given the ``HttpRequest``, the parent "
"``ModelForm`` instance and a boolean value based on whether it is adding or "
"changing the parent object."
msgstr ""
"Метод ``save_formset`` принимает объект ``HttpRequest``, ``ModelForm`` "
"родительского объекта, \"formset\" связанных объектов и булево значение "
"указывающее создан родительский объект или изменяется."

# d6aa94bfcd8249bf89d363eace0059bc
#: ../../ref/contrib/admin/index.txt:997
msgid ""
"For example to attach ``request.user`` to each changed formset model "
"instance::"
msgstr ""
"Например, добавление ``request.user`` к каждому объекту измененному в "
"\"formset\"::"

# 4c553079f4614a8a96d44bac98a5ed56
#: ../../ref/contrib/admin/index.txt:1012
msgid ""
"The ``get_ordering`` method takes a``request`` as parameter and is expected "
"to return a ``list`` or ``tuple`` for ordering similar to the :attr:"
"`ordering` attribute. For example::"
msgstr ""
"Метод ``get_ordering`` принимает объект ``request`` и должен вернуть "
"``list`` или ``tuple`` с параметрами сортировки аналогично атрибуту :attr:"
"`ordering`. Например::"

# 5854f1be047f4856abb5c98b856cfc87
#: ../../ref/contrib/admin/index.txt:1028
msgid ""
"The ``save_related`` method is given the ``HttpRequest``, the parent "
"``ModelForm`` instance, the list of inline formsets and a boolean value "
"based on whether the parent is being added or changed. Here you can do any "
"pre- or post-save operations for objects related to the parent. Note that at "
"this point the parent object and its form have already been saved."
msgstr ""
"Метод ``save_related`` принимает объект ``HttpRequest``, родительскую форму "
"``ModelForm``, список \"inline formsets\" и булево значение указывающее "
"создан родительский объект или изменяется. Вы можете выполнить "
"дополнительные операции перед и после сохранения объектов. Заметим, что к "
"этому моменту родительский объект и его формы уже будут сохранены."

# b5d8a06fcae745e38ff222bab92d819c
#: ../../ref/contrib/admin/index.txt:1038
msgid ""
"The ``get_readonly_fields`` method is given the ``HttpRequest`` and the "
"``obj`` being edited (or ``None`` on an add form) and is expected to return "
"a ``list`` or ``tuple`` of field names that will be displayed as read-only, "
"as described above in the :attr:`ModelAdmin.readonly_fields` section."
msgstr ""
"Метод ``get_readonly_fields`` принимает объект ``HttpRequest`` и "
"редактируемый объект ``obj`` (или ``None`` для формы создания нового "
"объекта) и должен вернуть ``list`` или ``tuple`` содержащий список полей, "
"которые будут отображаться только для чтения как описано в разделе :attr:"
"`ModelAdmin.readonly_fields`."

# f3a9902281de4aab83566a1acf5666f8
#: ../../ref/contrib/admin/index.txt:1047
msgid ""
"The ``get_prepopulated_fields`` method is given the ``HttpRequest`` and the "
"``obj`` being edited (or ``None`` on an add form) and is expected to return "
"a ``dictionary``, as described above in the :attr:`ModelAdmin."
"prepopulated_fields` section."
msgstr ""
"Метод ``get_prepopulated_fields`` принимает объект ``HttpRequest`` и "
"редактируемый объект ``obj`` (или ``None`` для формы создания нового "
"объекта) и должен вернуть словарь полей аналогичный :attr:`ModelAdmin."
"prepopulated_fields`."

# be2c263db18d42af819a0ecb307e3266
#: ../../ref/contrib/admin/index.txt:1056
msgid ""
"The ``get_list_display`` method is given the ``HttpRequest`` and is expected "
"to return a ``list`` or ``tuple`` of field names that will be displayed on "
"the changelist view as described above in the :attr:`ModelAdmin."
"list_display` section."
msgstr ""
"Метод ``get_list_display`` принимает объект ``HttpRequest`` и редактируемый "
"объект ``obj`` (или ``None`` для формы создания нового объекта) и должен "
"вернуть ``list`` или ``tuple`` содержащий список полей, которые будут "
"отображаться на странице списка объектов как описано в разделе  :attr:"
"`ModelAdmin.list_display`."

# b48df1b25e62452cb72826262aea856f
#: ../../ref/contrib/admin/index.txt:1065
msgid ""
"The ``get_list_display_links`` method is given the ``HttpRequest`` and the "
"``list`` or ``tuple`` returned by :meth:`ModelAdmin.get_list_display`. It is "
"expected to return a ``list`` or ``tuple`` of field names on the changelist "
"that will be linked to the change view, as described in the :attr:"
"`ModelAdmin.list_display_links` section."
msgstr ""
"Метод ``get_list_display_links`` принимает объект ``HttpRequest`` и ``list`` "
"или ``tuple`` указанный в :meth:`ModelAdmin.get_list_display`. Должен "
"вернуть ``list`` или ``tuple`` содержащий список полей, который будут "
"ссылками на странице списка объектов к странице редактирования. Смотрите "
"описание :attr:`ModelAdmin.list_display_links`."

# 87da9793240246c0b8b32a349b8d4090
#: ../../ref/contrib/admin/index.txt:1073
msgid ""
"The ``get_urls`` method on a ``ModelAdmin`` returns the URLs to be used for "
"that ModelAdmin in the same way as a URLconf.  Therefore you can extend them "
"as documented in :doc:`/topics/http/urls`::"
msgstr ""

# a08587469995450eb7d221556efc0223
#: ../../ref/contrib/admin/index.txt:1091
msgid ""
"Notice that the custom patterns are included *before* the regular admin "
"URLs: the admin URL patterns are very permissive and will match nearly "
"anything, so you'll usually want to prepend your custom URLs to the built-in "
"ones."
msgstr ""

# 211320b9659f439d912949158e53ed3b
#: ../../ref/contrib/admin/index.txt:1096
msgid ""
"In this example, ``my_view`` will be accessed at ``/admin/myapp/mymodel/"
"my_view/`` (assuming the admin URLs are included at ``/admin/``.)"
msgstr ""

# 4a04265c870c4c61a3f0e8107daf172a
#: ../../ref/contrib/admin/index.txt:1100
msgid ""
"However, the ``self.my_view`` function registered above suffers from two "
"problems:"
msgstr ""

# 6afa8a9d55a44985a81cae72c70bfd49
#: ../../ref/contrib/admin/index.txt:1103
msgid ""
"It will *not* perform any permission checks, so it will be accessible to the "
"general public."
msgstr ""

# 2113ba84535b49d5ab00ef527920dce6
#: ../../ref/contrib/admin/index.txt:1105
msgid ""
"It will *not* provide any header details to prevent caching. This means if "
"the page retrieves data from the database, and caching middleware is active, "
"the page could show outdated information."
msgstr ""

# 6e0b147ad78940319fd9a87a779b0582
#: ../../ref/contrib/admin/index.txt:1109
msgid ""
"Since this is usually not what you want, Django provides a convenience "
"wrapper to check permissions and mark the view as non-cacheable. This "
"wrapper is :meth:`AdminSite.admin_view` (i.e. ``self.admin_site.admin_view`` "
"inside a ``ModelAdmin`` instance); use it like so::"
msgstr ""

# 99ce0686e3e941709566570920083e15
#: ../../ref/contrib/admin/index.txt:1123
msgid "Notice the wrapped view in the fifth line above::"
msgstr ""

# 6f90737477c2461392bd8ecb2927a49d
#: ../../ref/contrib/admin/index.txt:1127
msgid ""
"This wrapping will protect ``self.my_view`` from unauthorized access and "
"will apply the ``django.views.decorators.cache.never_cache`` decorator to "
"make sure it is not cached if the cache middleware is active."
msgstr ""

# cca32ff60612460ab764628496a5cd69
#: ../../ref/contrib/admin/index.txt:1131
msgid ""
"If the page is cacheable, but you still want the permission check to be "
"performed, you can pass a ``cacheable=True`` argument to :meth:`AdminSite."
"admin_view`::"
msgstr ""

# e6cbe1fbbcb542f3a7bd0dc2c25ac629
#: ../../ref/contrib/admin/index.txt:1139
msgid ""
"The ``formfield_for_foreignkey`` method on a ``ModelAdmin`` allows you to "
"override the default formfield for a foreign keys field. For example, to "
"return a subset of objects for this foreign key field based on the user::"
msgstr ""

# 61e3de570bd8472c9053d09821582c5e
#: ../../ref/contrib/admin/index.txt:1149
msgid ""
"This uses the ``HttpRequest`` instance to filter the ``Car`` foreign key "
"field to only display the cars owned by the ``User`` instance."
msgstr ""

# f8b6487a15f64d53b4595dd096b9c0c1
#: ../../ref/contrib/admin/index.txt:1154
msgid ""
"Like the ``formfield_for_foreignkey`` method, the "
"``formfield_for_manytomany`` method can be overridden to change the default "
"formfield for a many to many field. For example, if an owner can own "
"multiple cars and cars can belong to multiple owners -- a many to many "
"relationship -- you could filter the ``Car`` foreign key field to only "
"display the cars owned by the ``User``::"
msgstr ""

# 8866de84b8c14409bd1d61e102cd2b9a
#: ../../ref/contrib/admin/index.txt:1169
msgid ""
"Like the ``formfield_for_foreignkey`` and ``formfield_for_manytomany`` "
"methods, the ``formfield_for_choice_field`` method can be overridden to "
"change the default formfield for a field that has declared choices. For "
"example, if the choices available to a superuser should be different than "
"those available to regular staff, you could proceed as follows::"
msgstr ""

# ffd7e91a65044e8290eff881b22dee15
#: ../../ref/contrib/admin/index.txt:1188
msgid ""
"Should return ``True`` if adding an object is permitted, ``False`` otherwise."
msgstr ""

# b6ce197c95aa4384b5bfc590ca13fc65
#: ../../ref/contrib/admin/index.txt:1193
msgid ""
"Should return ``True`` if editing obj is permitted, ``False`` otherwise. If "
"obj is ``None``, should return ``True`` or ``False`` to indicate whether "
"editing of objects of this type is permitted in general (e.g., ``False`` "
"will be interpreted as meaning that the current user is not permitted to "
"edit any object of this type)."
msgstr ""

# 8933bffb328e444f9b02122049dab84b
#: ../../ref/contrib/admin/index.txt:1201
msgid ""
"Should return ``True`` if deleting obj is permitted, ``False`` otherwise. If "
"obj is ``None``, should return ``True`` or ``False`` to indicate whether "
"deleting objects of this type is permitted in general (e.g., ``False`` will "
"be interpreted as meaning that the current user is not permitted to delete "
"any object of this type)."
msgstr ""

# 92b83983cc9b4753b0ee015c40454e68
#: ../../ref/contrib/admin/index.txt:1209
msgid ""
"The ``queryset`` method on a ``ModelAdmin`` returns a :class:`~django.db."
"models.query.QuerySet` of all model instances that can be edited by the "
"admin site. One use case for overriding this method is to show objects owned "
"by the logged-in user::"
msgstr ""

# 4298161b81b34778871105014434d376
#: ../../ref/contrib/admin/index.txt:1223
msgid ""
"Sends a message to the user. The default implementation creates a message "
"using the :mod:`django.contrib.messages` backend. See the :ref:`custom "
"ModelAdmin example <custom-admin-action>`."
msgstr ""

# 91da9cd03b164f02a8197cc6dc6f194c
#: ../../ref/contrib/admin/index.txt:1231
msgid ""
"Returns an instance of the paginator to use for this view. By default, "
"instantiates an instance of :attr:`paginator`."
msgstr ""

# 791f35b9299f482483b23a41e27a42a3
#: ../../ref/contrib/admin/index.txt:1235
msgid "Other methods"
msgstr ""

# 532a7727ef89432685858b9822038f36
#: ../../ref/contrib/admin/index.txt:1239
msgid "Django view for the model instance addition page. See note below."
msgstr ""

# 6253b6bb8ea749babe1febb29ec063f8
#: ../../ref/contrib/admin/index.txt:1243
msgid "Django view for the model instance edition page. See note below."
msgstr ""

# 1c813bf8b27e4845b443aeff813ece90
#: ../../ref/contrib/admin/index.txt:1247
msgid ""
"Django view for the model instances change list/actions page. See note below."
msgstr ""

# 138559bffa834401a4e79f7d10dd1fe8
#: ../../ref/contrib/admin/index.txt:1252
msgid ""
"Django view for the model instance(s) deletion confirmation page. See note "
"below."
msgstr ""

# 37764e4540a2400c87d84654216dc797
#: ../../ref/contrib/admin/index.txt:1257
msgid ""
"Django view for the page that shows the modification history for a given "
"model instance."
msgstr ""

# 4bb69882c4704608b4c3e37ad83efe20
#: ../../ref/contrib/admin/index.txt:1260
msgid ""
"Unlike the hook-type ``ModelAdmin`` methods detailed in the previous "
"section, these five methods are in reality designed to be invoked as Django "
"views from the admin application URL dispatching handler to render the pages "
"that deal with model instances CRUD operations. As a result, completely "
"overriding these methods will significantly change the behavior of the admin "
"application."
msgstr ""

# 3f8830dc13464970bf7cb02e882f0c0f
#: ../../ref/contrib/admin/index.txt:1266
msgid ""
"One common reason for overriding these methods is to augment the context "
"data that is provided to the template that renders the view. In the "
"following example, the change view is overridden so that the rendered "
"template is provided some extra mapping data that would not otherwise be "
"available::"
msgstr ""

# f7b3ff8d257849dbaa8a18925df2bc81
#: ../../ref/contrib/admin/index.txt:1288
msgid ""
"These views now return :class:`~django.template.response.TemplateResponse` "
"instances which allow you to easily customize the response data before "
"rendering. For more details, see the :doc:`TemplateResponse documentation </"
"ref/template-response>`."
msgstr ""

# 4b9d1747c7c348288e4888e9f0649878
#: ../../ref/contrib/admin/index.txt:1294
msgid "``ModelAdmin`` media definitions"
msgstr ""

# 80bd635b471343cd8825813ce05fa139
#: ../../ref/contrib/admin/index.txt:1296
msgid ""
"There are times where you would like add a bit of CSS and/or JavaScript to "
"the add/change views. This can be accomplished by using a Media inner class "
"on your ``ModelAdmin``::"
msgstr ""

# 44e9c1e1e28e459494100be859342779
#: ../../ref/contrib/admin/index.txt:1309
msgid ""
"The :doc:`staticfiles app </ref/contrib/staticfiles>` prepends :setting:"
"`STATIC_URL` (or :setting:`MEDIA_URL` if :setting:`STATIC_URL` is ``None``) "
"to any media paths. The same rules apply as :ref:`regular media definitions "
"on forms <form-media-paths>`."
msgstr ""

# 31970ec8c4354d0e87a268e8cff39890
#: ../../ref/contrib/admin/index.txt:1314
msgid ""
"Django admin Javascript makes use of the `jQuery`_ library. To avoid "
"conflicts with user-supplied scripts or libraries, Django's jQuery is "
"namespaced as ``django.jQuery``. If you want to use jQuery in your own admin "
"JavaScript without including a second copy, you can use the ``django."
"jQuery`` object on changelist and add/edit views."
msgstr ""

# 9a8d721798504f7db5921538c5a1dd96
#: ../../ref/contrib/admin/index.txt:1320
msgid ""
"If you require the jQuery library to be in the global namespace, for example "
"when using third-party jQuery plugins, or need a newer version of jQuery, "
"you will have to include your own copy of jQuery."
msgstr ""

# 9e170dead42b430999aaac62654099bb
#: ../../ref/contrib/admin/index.txt:1327
msgid "Adding custom validation to the admin"
msgstr ""

# c731747343b24c90bd7bd1462c0dcb07
#: ../../ref/contrib/admin/index.txt:1329
msgid ""
"Adding custom validation of data in the admin is quite easy. The automatic "
"admin interface reuses :mod:`django.forms`, and the ``ModelAdmin`` class "
"gives you the ability define your own form::"
msgstr ""

# c8ac751b97bb4f519a32dbd48164798c
#: ../../ref/contrib/admin/index.txt:1336
msgid ""
"``MyArticleAdminForm`` can be defined anywhere as long as you import where "
"needed. Now within your form you can add your own custom validation for any "
"field::"
msgstr ""

# 95422a339ffe43e78714c1a80a08af25
#: ../../ref/contrib/admin/index.txt:1348
msgid ""
"It is important you use a ``ModelForm`` here otherwise things can break. See "
"the :doc:`forms </ref/forms/index>` documentation on :doc:`custom validation "
"</ref/forms/validation>` and, more specifically, the :ref:`model form "
"validation notes <overriding-modelform-clean-method>` for more information."
msgstr ""

# 368a964fc8214107bfda18e7e5f429e5
#: ../../ref/contrib/admin/index.txt:1357
msgid "``InlineModelAdmin`` objects"
msgstr ""

# 33b6469f8f5d4817a10efecf18af07b3
#: ../../ref/contrib/admin/index.txt:1363
msgid ""
"The admin interface has the ability to edit models on the same page as a "
"parent model. These are called inlines. Suppose you have these two models::"
msgstr ""

# 52d6af64213643a39dffcc67d6c2217b
#: ../../ref/contrib/admin/index.txt:1373
msgid ""
"You can edit the books authored by an author on the author page. You add "
"inlines to a model by specifying them in a ``ModelAdmin.inlines``::"
msgstr ""

# 91532da68190474aabc61dce97ecbcd6
#: ../../ref/contrib/admin/index.txt:1384
msgid "Django provides two subclasses of ``InlineModelAdmin`` and they are:"
msgstr ""

# 5832dfe50a65459f8282cee2dc207cb5
#: ../../ref/contrib/admin/index.txt:1386
msgid ":class:`~django.contrib.admin.TabularInline`"
msgstr ""

# f7458d00b90e4cbba93ad016951f734c
#: ../../ref/contrib/admin/index.txt:1387
msgid ":class:`~django.contrib.admin.StackedInline`"
msgstr ""

# 42b69db8a6d549998f065006b7ff7506
#: ../../ref/contrib/admin/index.txt:1389
msgid ""
"The difference between these two is merely the template used to render them."
msgstr ""

# a0bc592ef4b443a392be47b51d165f5e
#: ../../ref/contrib/admin/index.txt:1393
msgid "``InlineModelAdmin`` options"
msgstr ""

# af522dfd85554595aac3b7143aa61083
#: ../../ref/contrib/admin/index.txt:1395
msgid ""
"``InlineModelAdmin`` shares many of the same features as ``ModelAdmin``, and "
"adds some of its own (the shared features are actually defined in the "
"``BaseModelAdmin`` superclass). The shared features are:"
msgstr ""

# fbfea9e991c045af9253cd4139560e1d
#: ../../ref/contrib/admin/index.txt:1399
msgid ":attr:`~InlineModelAdmin.form`"
msgstr ""

# 4b2420d1015542b0a0a9bb2b642dab28
#: ../../ref/contrib/admin/index.txt:1400
msgid ":attr:`~ModelAdmin.fieldsets`"
msgstr ""

# e254780c22cf4eed8241da3d1ba7273d
#: ../../ref/contrib/admin/index.txt:1401
msgid ":attr:`~ModelAdmin.fields`"
msgstr ""

# 4b3f8c4935164563b61b7c8d07051642
#: ../../ref/contrib/admin/index.txt:1402
msgid ":attr:`~ModelAdmin.exclude`"
msgstr ""

# fd7d21f046234895b00e96aa3d078b66
#: ../../ref/contrib/admin/index.txt:1403
msgid ":attr:`~ModelAdmin.filter_horizontal`"
msgstr ""

# a20d5064ce1242a4930b4c5cf3e2b7bd
#: ../../ref/contrib/admin/index.txt:1404
msgid ":attr:`~ModelAdmin.filter_vertical`"
msgstr ""

# 8cee604aaa5c4a31a7e9802c815a8faf
#: ../../ref/contrib/admin/index.txt:1405
msgid ":attr:`~ModelAdmin.prepopulated_fields`"
msgstr ""

# 3c0d1285fc3c421e8fe621810bcd91d8
#: ../../ref/contrib/admin/index.txt:1406
msgid ":attr:`~ModelAdmin.radio_fields`"
msgstr ""

# 19693478292b4c0b9958c2e83e6c9052
#: ../../ref/contrib/admin/index.txt:1407
msgid ":attr:`~InlineModelAdmin.raw_id_fields`"
msgstr ""

# 0c07af438628482eb83bb0afb6c0fa8a
#: ../../ref/contrib/admin/index.txt:1408
msgid ":meth:`~ModelAdmin.formfield_for_foreignkey`"
msgstr ""

# c4b9cac3b7d14548bcbe1fbe81668bd0
#: ../../ref/contrib/admin/index.txt:1409
msgid ":meth:`~ModelAdmin.formfield_for_manytomany`"
msgstr ""

# f8e583e4befb4ace9b9b06a4f6b594b0
#: ../../ref/contrib/admin/index.txt:1413
msgid ":attr:`~ModelAdmin.readonly_fields`"
msgstr ""

# 4891a659ed1a4f3eb1787ddfdf0f61a1
#: ../../ref/contrib/admin/index.txt:1414
msgid ":attr:`~ModelAdmin.formfield_overrides`"
msgstr ""

# bb832b47ee034a47bdfec260b2586631
#: ../../ref/contrib/admin/index.txt:1418
msgid ":attr:`~ModelAdmin.ordering`"
msgstr ""

# 11a113764c36494e8ffb3f5dda16468c
#: ../../ref/contrib/admin/index.txt:1419
msgid ":meth:`~ModelAdmin.queryset`"
msgstr ""

# c3a484a1e3dd4fee880048c8fb13f2e1
#: ../../ref/contrib/admin/index.txt:1423
msgid ":meth:`~ModelAdmin.has_add_permission`"
msgstr ""

# 2af67f9dbf3e473daa38bf0255401962
#: ../../ref/contrib/admin/index.txt:1424
msgid ":meth:`~ModelAdmin.has_change_permission`"
msgstr ""

# 92422a80357540b08bdd0dd229cc17de
#: ../../ref/contrib/admin/index.txt:1425
msgid ":meth:`~ModelAdmin.has_delete_permission`"
msgstr ""

# 18835f3705414ec6bf2f242bb28f4662
#: ../../ref/contrib/admin/index.txt:1427
msgid "The ``InlineModelAdmin`` class adds:"
msgstr ""

# 4499feccd1f04139a33243157e3f7d23
#: ../../ref/contrib/admin/index.txt:1431
msgid "The model which the inline is using. This is required."
msgstr ""

# 61fb4474a93741bb868aec4fb1de655c
#: ../../ref/contrib/admin/index.txt:1435
msgid ""
"The name of the foreign key on the model. In most cases this will be dealt "
"with automatically, but ``fk_name`` must be specified explicitly if there "
"are more than one foreign key to the same parent model."
msgstr ""

# fc7328439c0a499bacbf4c3672156c33
#: ../../ref/contrib/admin/index.txt:1441
msgid ""
"This defaults to ``BaseInlineFormSet``. Using your own formset can give you "
"many possibilities of customization. Inlines are built around :ref:`model "
"formsets <model-formsets>`."
msgstr ""

# 458b2abcc79d491fa8e442284f642ed9
#: ../../ref/contrib/admin/index.txt:1447
msgid ""
"The value for ``form`` defaults to ``ModelForm``. This is what is passed "
"through to ``inlineformset_factory`` when creating the formset for this "
"inline."
msgstr ""

# 1802c14c66554f4b854eed8e92dcbe94
#: ../../ref/contrib/admin/index.txt:1455
msgid ""
"This controls the number of extra forms the formset will display in addition "
"to the initial forms. See the :doc:`formsets documentation </topics/forms/"
"formsets>` for more information."
msgstr ""

# c81327308cc246039ab64b6abe9a9578
#: ../../ref/contrib/admin/index.txt:1462
msgid ""
"For users with JavaScript-enabled browsers, an \"Add another\" link is "
"provided to enable any number of additional inlines to be added in addition "
"to those provided as a result of the ``extra`` argument."
msgstr ""

# 91f15dadb44a4a4d8e214295fa7dcdd1
#: ../../ref/contrib/admin/index.txt:1466
msgid ""
"The dynamic link will not appear if the number of currently displayed forms "
"exceeds ``max_num``, or if the user does not have JavaScript enabled."
msgstr ""

# b3006ebbb68e41ee8801beb0bfcc7890
#: ../../ref/contrib/admin/index.txt:1473
msgid ""
"This controls the maximum number of forms to show in the inline. This "
"doesn't directly correlate to the number of objects, but can if the value is "
"small enough. See :ref:`model-formsets-max-num` for more information."
msgstr ""

# b03f8dfa1cfa4031b00bab51e6740644
#: ../../ref/contrib/admin/index.txt:1484
msgid ""
"``raw_id_fields`` is a list of fields you would like to change into a "
"``Input`` widget for either a ``ForeignKey`` or ``ManyToManyField``::"
msgstr ""

# 8f8e197e9ce44780ab8c4feab9c0eb17
#: ../../ref/contrib/admin/index.txt:1494
msgid "The template used to render the inline on the page."
msgstr ""

# c08331d413cf481eb5a651ea299a1a03
#: ../../ref/contrib/admin/index.txt:1498
msgid ""
"An override to the ``verbose_name`` found in the model's inner ``Meta`` "
"class."
msgstr ""

# 50eb8222d809476ba8364e39f42ef9e6
#: ../../ref/contrib/admin/index.txt:1503
msgid ""
"An override to the ``verbose_name_plural`` found in the model's inner "
"``Meta`` class."
msgstr ""

# 83fdf32aa1ff4f7d9b2e895332aad801
#: ../../ref/contrib/admin/index.txt:1508
msgid ""
"Specifies whether or not inline objects can be deleted in the inline. "
"Defaults to ``True``."
msgstr ""

# 00842b663c53452ab0401a21e32afe0c
#: ../../ref/contrib/admin/index.txt:1513
msgid ""
"Working with a model with two or more foreign keys to the same parent model"
msgstr ""

# 47aa6e08dd324484a68befd652e4169c
#: ../../ref/contrib/admin/index.txt:1515
msgid ""
"It is sometimes possible to have more than one foreign key to the same "
"model. Take this model for instance::"
msgstr ""

# b927bc00d82c47828d8a325dc39858b3
#: ../../ref/contrib/admin/index.txt:1522
msgid ""
"If you wanted to display an inline on the ``Person`` admin add/change pages "
"you need to explicitly define the foreign key since it is unable to do so "
"automatically::"
msgstr ""

# 33a84d0e7b724e529d405d39291b71c0
#: ../../ref/contrib/admin/index.txt:1536
msgid "Working with many-to-many models"
msgstr ""

# 7b9e31c8cf504f0f89cd2c8d8a0dd189
#: ../../ref/contrib/admin/index.txt:1540
msgid ""
"By default, admin widgets for many-to-many relations will be displayed on "
"whichever model contains the actual reference to the :class:`~django.db."
"models.ManyToManyField`. Depending on your ``ModelAdmin`` definition, each "
"many-to-many field in your model will be represented by a standard HTML "
"``<select multiple>``, a horizontal or vertical filter, or a "
"``raw_id_admin`` widget. However, it is also possible to replace these "
"widgets with inlines."
msgstr ""

# 09236f74df8d4f61917824a562311f49
#: ../../ref/contrib/admin/index.txt:1548
msgid "Suppose we have the following models::"
msgstr ""

# d05344ce9ed2497fa8816901d60bfa39
#: ../../ref/contrib/admin/index.txt:1557
msgid ""
"If you want to display many-to-many relations using an inline, you can do so "
"by defining an ``InlineModelAdmin`` object for the relationship::"
msgstr ""

# f9b3ebd4cd344a2fb9a0dab630859bcb
#: ../../ref/contrib/admin/index.txt:1574
msgid "There are two features worth noting in this example."
msgstr ""

# 91571059057b4f9c9cd7710ae404ca77
#: ../../ref/contrib/admin/index.txt:1576
msgid ""
"Firstly - the ``MembershipInline`` class references ``Group.members."
"through``. The ``through`` attribute is a reference to the model that "
"manages the many-to-many relation. This model is automatically created by "
"Django when you define a many-to-many field."
msgstr ""

# 41ca34c2f2684adfaec4cd1d1166144f
#: ../../ref/contrib/admin/index.txt:1581
msgid ""
"Secondly, the ``GroupAdmin`` must manually exclude the ``members`` field. "
"Django displays an admin widget for a many-to-many field on the model that "
"defines the relation (in this case, ``Group``). If you want to use an inline "
"model to represent the many-to-many relationship, you must tell Django's "
"admin to *not* display this widget - otherwise you will end up with two "
"widgets on your admin page for managing the relation."
msgstr ""

# af448172a1df46d0aa164ae921b1c5e1
#: ../../ref/contrib/admin/index.txt:1588
msgid ""
"In all other respects, the ``InlineModelAdmin`` is exactly the same as any "
"other. You can customize the appearance using any of the normal "
"``ModelAdmin`` properties."
msgstr ""

# e4df5177a6ed4893a1ae6b36344907e3
#: ../../ref/contrib/admin/index.txt:1593
msgid "Working with many-to-many intermediary models"
msgstr ""

# 1907c34e02f64806af0d8f639c80ad96
#: ../../ref/contrib/admin/index.txt:1595
msgid ""
"When you specify an intermediary model using the ``through`` argument to a :"
"class:`~django.db.models.ManyToManyField`, the admin will not display a "
"widget by default. This is because each instance of that intermediary model "
"requires more information than could be displayed in a single widget, and "
"the layout required for multiple widgets will vary depending on the "
"intermediate model."
msgstr ""

# 0b8dee900aa3473fb054f213ce56ddac
#: ../../ref/contrib/admin/index.txt:1602
msgid ""
"However, we still want to be able to edit that information inline. "
"Fortunately, this is easy to do with inline admin models. Suppose we have "
"the following models::"
msgstr ""

# 3a4a6042ac5840b1bb8b0f4a4a26717b
#: ../../ref/contrib/admin/index.txt:1619
msgid ""
"The first step in displaying this intermediate model in the admin is to "
"define an inline class for the ``Membership`` model::"
msgstr ""

# 9d5df188968441b08aaea7ae7a176481
#: ../../ref/contrib/admin/index.txt:1626
msgid ""
"This simple example uses the default ``InlineModelAdmin`` values for the "
"``Membership`` model, and limits the extra add forms to one. This could be "
"customized using any of the options available to ``InlineModelAdmin`` "
"classes."
msgstr ""

# f8545df2ff174039ad40029cf079e360
#: ../../ref/contrib/admin/index.txt:1630
msgid "Now create admin views for the ``Person`` and ``Group`` models::"
msgstr ""

# d8f183e7a2f740c0b3512fa6e3f2ba54
#: ../../ref/contrib/admin/index.txt:1638
msgid ""
"Finally, register your ``Person`` and ``Group`` models with the admin site::"
msgstr ""

# 6a452f74f6ac40ae9398a8c267900504
#: ../../ref/contrib/admin/index.txt:1643
msgid ""
"Now your admin site is set up to edit ``Membership`` objects inline from "
"either the ``Person`` or the ``Group`` detail pages."
msgstr ""

# 0ece22580d164193844468bb39ef6dda
#: ../../ref/contrib/admin/index.txt:1649
msgid "Using generic relations as an inline"
msgstr ""

# 39994070127b477eadc6a7ed8ff8fcbe
#: ../../ref/contrib/admin/index.txt:1651
msgid ""
"It is possible to use an inline with generically related objects. Let's say "
"you have the following models::"
msgstr ""

# 5a05459b866f4ce3891808ec70a1aafd
#: ../../ref/contrib/admin/index.txt:1663
msgid ""
"If you want to allow editing and creating ``Image`` instance on the "
"``Product`` add/change views you can use ``GenericTabularInline`` or "
"``GenericStackedInline`` (both subclasses of ``GenericInlineModelAdmin``) "
"provided by ``django.contrib.contenttypes.generic``, they implement tabular "
"and stacked visual layouts for the forms representing the inline objects "
"respectively just like their non-generic counterparts and behave just like "
"any other inline. In your ``admin.py`` for this example app::"
msgstr ""

# 920d69d9f33045bfbca20618f7c42405
#: ../../ref/contrib/admin/index.txt:1686
msgid ""
"See the :doc:`contenttypes documentation </ref/contrib/contenttypes>` for "
"more specific information."
msgstr ""

# 6d7af367a9b644ab9ea8a7b6c3434d9a
#: ../../ref/contrib/admin/index.txt:1690
msgid "Overriding admin templates"
msgstr ""

# fb7d3f7ed66941d7a399faaeeb1a12c3
#: ../../ref/contrib/admin/index.txt:1692
msgid ""
"It is relatively easy to override many of the templates which the admin "
"module uses to generate the various pages of an admin site. You can even "
"override a few of these templates for a specific app, or a specific model."
msgstr ""

# 88c2748e1cff4a239dcb3233d58244e4
#: ../../ref/contrib/admin/index.txt:1697
msgid "Set up your projects admin template directories"
msgstr ""

# 6942ea34f69a41ff8614573419dfa27d
#: ../../ref/contrib/admin/index.txt:1699
msgid ""
"The admin template files are located in the ``contrib/admin/templates/"
"admin`` directory."
msgstr ""

# f44048143ac94a9c984c94f04839ec22
#: ../../ref/contrib/admin/index.txt:1702
msgid ""
"In order to override one or more of them, first create an ``admin`` "
"directory in your project's ``templates`` directory. This can be any of the "
"directories you specified in :setting:`TEMPLATE_DIRS`."
msgstr ""

# a48c95c6dc0d4fe38ff8ffdab1693711
#: ../../ref/contrib/admin/index.txt:1706
msgid ""
"Within this ``admin`` directory, create sub-directories named after your "
"app. Within these app subdirectories create sub-directories named after your "
"models. Note, that the admin app will lowercase the model name when looking "
"for the directory, so make sure you name the directory in all lowercase if "
"you are going to run your app on a case-sensitive filesystem."
msgstr ""

# f3b35b4cd9794260afe64627757af581
#: ../../ref/contrib/admin/index.txt:1712
msgid ""
"To override an admin template for a specific app, copy and edit the template "
"from the ``django/contrib/admin/templates/admin`` directory, and save it to "
"one of the directories you just created."
msgstr ""

# 6279dec4d5384a949d05d9d407911c02
#: ../../ref/contrib/admin/index.txt:1716
msgid ""
"For example, if we wanted to add a tool to the change list view for all the "
"models in an app named ``my_app``, we would copy ``contrib/admin/templates/"
"admin/change_list.html`` to the ``templates/admin/my_app/`` directory of our "
"project, and make any necessary changes."
msgstr ""

# e15042412feb4e51a9942bfb9dd35373
#: ../../ref/contrib/admin/index.txt:1722
msgid ""
"If we wanted to add a tool to the change list view for only a specific model "
"named 'Page', we would copy that same file to the ``templates/admin/my_app/"
"page`` directory of our project."
msgstr ""

# d398f852a315499f911930659106c75a
#: ../../ref/contrib/admin/index.txt:1727
msgid "Overriding vs. replacing an admin template"
msgstr ""

# 631c4b454b0247d4b1df1b98ad09772a
#: ../../ref/contrib/admin/index.txt:1729
msgid ""
"Because of the modular design of the admin templates, it is usually neither "
"necessary nor advisable to replace an entire template. It is almost always "
"better to override only the section of the template which you need to change."
msgstr ""

# 2bb2402ef89b4463a9977243d1a344b5
#: ../../ref/contrib/admin/index.txt:1733
msgid ""
"To continue the example above, we want to add a new link next to the "
"``History`` tool for the ``Page`` model. After looking at ``change_form."
"html`` we determine that we only need to override the ``object-tools`` "
"block. Therefore here is our new ``change_form.html`` :"
msgstr ""

# b5aea2837da44488bb7311eaa985ef8d
#: ../../ref/contrib/admin/index.txt:1756
msgid ""
"And that's it! If we placed this file in the ``templates/admin/my_app`` "
"directory, our link would appear on every model's change form."
msgstr ""

# de3f28ce1dbd43889511584bb761c629
#: ../../ref/contrib/admin/index.txt:1760
msgid "Templates which may be overridden per app or model"
msgstr ""

# eae7ba0fdea44f849352171fbde485c3
#: ../../ref/contrib/admin/index.txt:1762
msgid ""
"Not every template in ``contrib/admin/templates/admin`` may be overridden "
"per app or per model. The following can:"
msgstr ""

# 298b598ab1b24c01be5074831980d410
#: ../../ref/contrib/admin/index.txt:1765
msgid "``app_index.html``"
msgstr ""

# e9b49dc449234c788c5adfd4fca881db
#: ../../ref/contrib/admin/index.txt:1766
msgid "``change_form.html``"
msgstr ""

# 471b3afb578b4ed0a879046eb573caf1
#: ../../ref/contrib/admin/index.txt:1767
msgid "``change_list.html``"
msgstr ""

# 2163ef04c8b5474fa1d3dd345685d285
#: ../../ref/contrib/admin/index.txt:1768
msgid "``delete_confirmation.html``"
msgstr ""

# 8a18a4d3c8d64424b9437060266fd41a
#: ../../ref/contrib/admin/index.txt:1769
msgid "``object_history.html``"
msgstr ""

# b901fa8168c74116a1eaa54c024521c6
#: ../../ref/contrib/admin/index.txt:1771
msgid ""
"For those templates that cannot be overridden in this way, you may still "
"override them for your entire project. Just place the new version in your "
"``templates/admin`` directory. This is particularly useful to create custom "
"404 and 500 pages."
msgstr ""

# 0800f50ff3db40ab8be4c921bf6981e3
#: ../../ref/contrib/admin/index.txt:1778
msgid ""
"Some of the admin templates, such as ``change_list_request.html`` are used "
"to render custom inclusion tags. These may be overridden, but in such cases "
"you are probably better off creating your own version of the tag in question "
"and giving it a different name. That way you can use it selectively."
msgstr ""

# 8c85b1724a924081986df28239ef0b20
#: ../../ref/contrib/admin/index.txt:1785
msgid "Root and login templates"
msgstr ""

# b0e661da51a147d28807f1ebfdded87a
#: ../../ref/contrib/admin/index.txt:1787
msgid ""
"If you wish to change the index, login or logout templates, you are better "
"off creating your own ``AdminSite`` instance (see below), and changing the :"
"attr:`AdminSite.index_template` , :attr:`AdminSite.login_template` or :attr:"
"`AdminSite.logout_template` properties."
msgstr ""

# e90eccbb9c98451f9a378bb2ff598d1a
#: ../../ref/contrib/admin/index.txt:1793
msgid "``AdminSite`` objects"
msgstr ""

# 68889b75e99649eb9a1352f240ca9152
#: ../../ref/contrib/admin/index.txt:1797
msgid ""
"A Django administrative site is represented by an instance of ``django."
"contrib.admin.sites.AdminSite``; by default, an instance of this class is "
"created as ``django.contrib.admin.site`` and you can register your models "
"and ``ModelAdmin`` instances with it."
msgstr ""

# 7ec99d9cb2ca468e9913181500f1b718
#: ../../ref/contrib/admin/index.txt:1802
msgid ""
"If you'd like to set up your own administrative site with custom behavior, "
"however, you're free to subclass ``AdminSite`` and override or add anything "
"you like. Then, simply create an instance of your ``AdminSite`` subclass "
"(the same way you'd instantiate any other Python class), and register your "
"models and ``ModelAdmin`` subclasses with it instead of using the default."
msgstr ""

# 112de096487b4ec99d71ac5ad93cfd1a
#: ../../ref/contrib/admin/index.txt:1809
msgid ""
"When constructing an instance of an ``AdminSite``, you are able to provide a "
"unique instance name using the ``name`` argument to the constructor. This "
"instance name is used to identify the instance, especially when :ref:"
"`reversing admin URLs <admin-reverse-urls>`. If no instance name is "
"provided, a default instance name of ``admin`` will be used."
msgstr ""

# 2453b2911ee047378c3b5f54b369b1b4
#: ../../ref/contrib/admin/index.txt:1816
msgid "``AdminSite`` attributes"
msgstr ""

# f57840ba07d9451e9906977c818f237c
#: ../../ref/contrib/admin/index.txt:1818
msgid ""
"Templates can override or extend base admin templates as described in "
"`Overriding Admin Templates`_."
msgstr ""

# 23765b58bc024d02a994d52db7474471
#: ../../ref/contrib/admin/index.txt:1823
msgid ""
"Path to a custom template that will be used by the admin site main index "
"view."
msgstr ""

# e9c23e0592d74926a249dba50d399cd0
#: ../../ref/contrib/admin/index.txt:1828
msgid ""
"Path to a custom template that will be used by the admin site login view."
msgstr ""

# a91f50c2c53d405dbd85cd85e7c9de7b
#: ../../ref/contrib/admin/index.txt:1834
msgid ""
"Subclass of :class:`~django.contrib.auth.forms.AuthenticationForm` that will "
"be used by the admin site login view."
msgstr ""

# af0b80612ae747c0a3b387da3c4787bb
#: ../../ref/contrib/admin/index.txt:1841
msgid ""
"Path to a custom template that will be used by the admin site logout view."
msgstr ""

# 733847b54e9342008b33a489f8a8a672
#: ../../ref/contrib/admin/index.txt:1847
msgid ""
"Path to a custom template that will be used by the admin site password "
"change view."
msgstr ""

# 920d551146ef4d29b5b2f5b2448a06ea
#: ../../ref/contrib/admin/index.txt:1854
msgid ""
"Path to a custom template that will be used by the admin site password "
"change done view."
msgstr ""

# 4ddaf3feb80f4602bfb7d1632deccb1c
#: ../../ref/contrib/admin/index.txt:1858
msgid "Hooking ``AdminSite`` instances into your URLconf"
msgstr ""

# cb0fbe38bae54ab982ec40ee852c4ad8
#: ../../ref/contrib/admin/index.txt:1860
msgid ""
"The last step in setting up the Django admin is to hook your ``AdminSite`` "
"instance into your URLconf. Do this by pointing a given URL at the "
"``AdminSite.urls`` method."
msgstr ""

# 6ed86d20b7934ea99b852140d28fcb6b
#: ../../ref/contrib/admin/index.txt:1864
msgid ""
"In this example, we register the default ``AdminSite`` instance ``django."
"contrib.admin.site`` at the URL ``/admin/`` ::"
msgstr ""

# 38029ee9669f470fbc01c77899908dd5
#: ../../ref/contrib/admin/index.txt:1877
msgid ""
"Above we used ``admin.autodiscover()`` to automatically load the :setting:"
"`INSTALLED_APPS` admin.py modules."
msgstr ""

# df8aa686f1ed44fd930677460ef18289
#: ../../ref/contrib/admin/index.txt:1880
msgid ""
"In this example, we register the ``AdminSite`` instance ``myproject.admin."
"admin_site`` at the URL ``/myadmin/`` ::"
msgstr ""

# e31bb8d3af614a97b1385722648af5b8
#: ../../ref/contrib/admin/index.txt:1891
msgid ""
"There is really no need to use autodiscover when using your own "
"``AdminSite`` instance since you will likely be importing all the per-app "
"admin.py modules in your ``myproject.admin`` module."
msgstr ""

# 5102be3ce9f643fa95086f33260002b5
#: ../../ref/contrib/admin/index.txt:1896
msgid "Multiple admin sites in the same URLconf"
msgstr ""

# 53fd1d51b4ce4ee9adceee103ef1331c
#: ../../ref/contrib/admin/index.txt:1898
msgid ""
"It's easy to create multiple instances of the admin site on the same Django-"
"powered Web site. Just create multiple instances of ``AdminSite`` and root "
"each one at a different URL."
msgstr ""

# 0bd22c00b8814a218ab51c793cbf1793
#: ../../ref/contrib/admin/index.txt:1902
msgid ""
"In this example, the URLs ``/basic-admin/`` and ``/advanced-admin/`` feature "
"separate versions of the admin site -- using the ``AdminSite`` instances "
"``myproject.admin.basic_site`` and ``myproject.admin.advanced_site``, "
"respectively::"
msgstr ""

# b723c3ac7bdf4503a5c8bb3f0fb93a01
#: ../../ref/contrib/admin/index.txt:1916
msgid ""
"``AdminSite`` instances take a single argument to their constructor, their "
"name, which can be anything you like. This argument becomes the prefix to "
"the URL names for the purposes of :ref:`reversing them<admin-reverse-urls>`. "
"This is only necessary if you are using more than one ``AdminSite``."
msgstr ""

# f8e0fc2d082f40a7858e9ab14492c4e3
#: ../../ref/contrib/admin/index.txt:1922
msgid "Adding views to admin sites"
msgstr ""

# ed79d0d127b949e8aaf7e95762385ef6
#: ../../ref/contrib/admin/index.txt:1924
msgid ""
"Just like :class:`ModelAdmin`, :class:`AdminSite` provides a :meth:`~django."
"contrib.admin.ModelAdmin.get_urls()` method that can be overridden to define "
"additional views for the site. To add a new view to your admin site, extend "
"the base :meth:`~django.contrib.admin.ModelAdmin.get_urls()` method to "
"include a pattern for your new view."
msgstr ""

# 8398f4c114b9407c863d845c56f82d57
#: ../../ref/contrib/admin/index.txt:1933
msgid ""
"Any view you render that uses the admin templates, or extends the base admin "
"template, should provide the ``current_app`` argument to :class:`~django."
"template.RequestContext` or :class:`~django.template.Context` when rendering "
"the template.  It should be set to either ``self.name`` if your view is on "
"an ``AdminSite`` or ``self.admin_site.name`` if your view is on a "
"``ModelAdmin``."
msgstr ""

# 4ddc68a6b09248daaded0e55eace8ad4
#: ../../ref/contrib/admin/index.txt:1943
msgid "Adding a password-reset feature"
msgstr ""

# e919a7c33d15488d887ef3b81cc23a01
#: ../../ref/contrib/admin/index.txt:1945
msgid ""
"You can add a password-reset feature to the admin site by adding a few lines "
"to your URLconf. Specifically, add these four patterns:"
msgstr ""

# 42e1cd642a2b4f1a8e49a1c1e7bedf78
#: ../../ref/contrib/admin/index.txt:1955
msgid ""
"(This assumes you've added the admin at ``admin/`` and requires that you put "
"the URLs starting with ``^admin/`` before the line that includes the admin "
"app itself)."
msgstr ""

# 8eb367eaf9ea4192a91717919df6039a
#: ../../ref/contrib/admin/index.txt:1961
msgid ""
"The presence of the ``admin_password_reset`` named URL will cause a "
"\"forgotten your password?\" link to appear on the default admin log-in page "
"under the password box."
msgstr ""

# 992abc52a7c84b83b41f2974bb713315
#: ../../ref/contrib/admin/index.txt:1968
msgid "Reversing admin URLs"
msgstr ""

# 6e74ca96e5bc4590a18cd9d943c69605
#: ../../ref/contrib/admin/index.txt:1970
msgid ""
"When an :class:`AdminSite` is deployed, the views provided by that site are "
"accessible using Django's :ref:`URL reversing system <naming-url-patterns>`."
msgstr ""

# 33ab7fa924e0455e9c2379a922574e8f
#: ../../ref/contrib/admin/index.txt:1973
msgid "The :class:`AdminSite` provides the following named URL patterns:"
msgstr ""

# 3ced1cc8c3244b32915e399346afe5f1
# 812707e2c846421b9579d72e539e9200
#: ../../ref/contrib/admin/index.txt:1976
#: ../../ref/contrib/admin/index.txt:1989
msgid "Page"
msgstr ""

# e273dfdccd624e78a24037e43cc1aabf
# 579782199c6f4f25a1d656800dda8621
#: ../../ref/contrib/admin/index.txt:1976
#: ../../ref/contrib/admin/index.txt:1989
msgid "URL name"
msgstr ""

# 4871257cd8d04f98857aaa950b4f540e
# f6a7b22d8bcf42cc9ce90c67f71553d0
#: ../../ref/contrib/admin/index.txt:1976
#: ../../ref/contrib/admin/index.txt:1989
msgid "Parameters"
msgstr ""

# c3136cee13bd4fe9bc43ebfb8b5d8c5a
#: ../../ref/contrib/admin/index.txt:1978
msgid "Index"
msgstr ""

# fc7d00fbb1d04fa3a4b906680f6a87ac
#: ../../ref/contrib/admin/index.txt:1978
msgid "``index``"
msgstr ""

# 691ae7c9c9c344fbb96a990145e61a0f
#: ../../ref/contrib/admin/index.txt:1979
msgid "Logout"
msgstr ""

# 04a6673c96364f2193151d69c527ee55
#: ../../ref/contrib/admin/index.txt:1979
msgid "``logout``"
msgstr ""

# 012a5976a543450abd363e67a70c021c
#: ../../ref/contrib/admin/index.txt:1980
msgid "Password change"
msgstr ""

# 7c053428f2b948148d0d157d3cb1e7a5
#: ../../ref/contrib/admin/index.txt:1980
msgid "``password_change``"
msgstr ""

# 4049107105b94546bc4d5c2b57e2a85d
#: ../../ref/contrib/admin/index.txt:1981
msgid "Password change done"
msgstr ""

# 22bae5794d8c47d39b9b841368c5c0ca
#: ../../ref/contrib/admin/index.txt:1981
msgid "``password_change_done``"
msgstr ""

# 7a6cedda712b4056a865cfd5699b2187
#: ../../ref/contrib/admin/index.txt:1982
msgid "i18n javascript"
msgstr ""

# d95136ee607b47d8a8fe99a165fcd1f1
#: ../../ref/contrib/admin/index.txt:1982
msgid "``jsi18n``"
msgstr ""

# 4599eabb28a54ab98d7d755887985046
#: ../../ref/contrib/admin/index.txt:1983
msgid "Application index page"
msgstr ""

# c15c338c38f245b5a76c6c71581b6f5b
#: ../../ref/contrib/admin/index.txt:1983
msgid "``app_list``"
msgstr ""

# 31c05c88f9fc420c83a8877dda132a85
#: ../../ref/contrib/admin/index.txt:1983
msgid "``app_label``"
msgstr ""

# 1e3a5db3d6a64388ac7a8e2167fd9672
#: ../../ref/contrib/admin/index.txt:1986
msgid ""
"Each :class:`ModelAdmin` instance provides an additional set of named URLs:"
msgstr ""

# 90129ced45eb42018dcab715b040df99
#: ../../ref/contrib/admin/index.txt:1991
msgid "Changelist"
msgstr ""

# fc366ed8ea254a599c81443388e2692a
#: ../../ref/contrib/admin/index.txt:1991
msgid "``{{ app_label }}_{{ model_name }}_changelist``"
msgstr ""

# 2479430b9f7f426ea0f4f9e4216d6195
#: ../../ref/contrib/admin/index.txt:1992
msgid "Add"
msgstr ""

# a7465f9b456549f3bf5e2d3451c0b477
#: ../../ref/contrib/admin/index.txt:1992
msgid "``{{ app_label }}_{{ model_name }}_add``"
msgstr ""

# 2462c0dc0c244cb08b796a0fc08ad153
#: ../../ref/contrib/admin/index.txt:1993
msgid "History"
msgstr ""

# fba1deaab92149cbae8aab88e3990a6f
#: ../../ref/contrib/admin/index.txt:1993
msgid "``{{ app_label }}_{{ model_name }}_history``"
msgstr ""

# d17822be6c044b838899e439ea154340
# 47ad3898d85048e9a3b2e7dfdcbf874f
# 7fa2c47d946e470abf52746ab37e8188
#: ../../ref/contrib/admin/index.txt:1993
#: ../../ref/contrib/admin/index.txt:1994
#: ../../ref/contrib/admin/index.txt:1995
msgid "``object_id``"
msgstr ""

# 9c0c3e0cccc246c08b558844200ca714
#: ../../ref/contrib/admin/index.txt:1994
msgid "Delete"
msgstr ""

# a1ddcdddfb8542bf928f4220f4544685
#: ../../ref/contrib/admin/index.txt:1994
msgid "``{{ app_label }}_{{ model_name }}_delete``"
msgstr ""

# be885226616b44419149f704bae1b055
#: ../../ref/contrib/admin/index.txt:1995
msgid "Change"
msgstr ""

# e599e1ae4bfd4c21a6ebebaa015533fb
#: ../../ref/contrib/admin/index.txt:1995
msgid "``{{ app_label }}_{{ model_name }}_change``"
msgstr ""

# c70c5138baf4471f894454ec971f380b
#: ../../ref/contrib/admin/index.txt:1998
msgid ""
"These named URLs are registered with the application namespace ``admin``, "
"and with an instance namespace corresponding to the name of the Site "
"instance."
msgstr ""

# 0b07c656824a40aa879514bf47133ba8
#: ../../ref/contrib/admin/index.txt:2001
msgid ""
"So - if you wanted to get a reference to the Change view for a particular "
"``Choice`` object (from the polls application) in the default admin, you "
"would call::"
msgstr ""

# 6ee0fe5f82ad4504b3c64d218b3649f1
#: ../../ref/contrib/admin/index.txt:2009
msgid ""
"This will find the first registered instance of the admin application "
"(whatever the instance name), and resolve to the view for changing ``poll."
"Choice`` instances in that instance."
msgstr ""

# a3695edcae5b465ba8235ed96a15f361
#: ../../ref/contrib/admin/index.txt:2013
msgid ""
"If you want to find a URL in a specific admin instance, provide the name of "
"that instance as a ``current_app`` hint to the reverse call. For example, if "
"you specifically wanted the admin view from the admin instance named "
"``custom``, you would need to call::"
msgstr ""

# e350c512e849410c8a367848b751cb84
#: ../../ref/contrib/admin/index.txt:2020
msgid ""
"For more details, see the documentation on :ref:`reversing namespaced URLs "
"<topics-http-reversing-url-namespaces>`."
msgstr ""

# 47bd960d1df745feb3e88d4c9e0209bc
#: ../../ref/contrib/admin/index.txt:2025
msgid ""
"To allow easier reversing of the admin urls in templates, Django provides an "
"``admin_urlname`` filter which takes an action as argument:"
msgstr ""

# 34488de17f8a4be18fb8cef50e643239
#: ../../ref/contrib/admin/index.txt:2035
msgid ""
"The action in the examples above match the last part of the URL names for :"
"class:`ModelAdmin` instances described above. The ``opts`` variable can be "
"any object which has an ``app_label`` and ``module_name`` and is usually "
"supplied by the admin views for the current model."
msgstr ""
