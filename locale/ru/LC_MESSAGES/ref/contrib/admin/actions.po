# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2012.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-02-29 18:30\n"
"PO-Revision-Date: 2012-02-15 15:13\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# daaa92296bf04e069b5afca69b908174
#: ../../ref/contrib/admin/actions.txt:3
msgid "Admin actions"
msgstr ""

# 644d377f471341b78155f74a92bfc6dc
#: ../../ref/contrib/admin/actions.txt:7
msgid ""
"The basic workflow of Django's admin is, in a nutshell, \"select an object, "
"then change it.\" This works well for a majority of use cases. However, if "
"you need to make the same change to many objects at once, this workflow can "
"be quite tedious."
msgstr ""

# 1aa9278ea2e84ae49f3d26d105deca2a
#: ../../ref/contrib/admin/actions.txt:12
msgid ""
"In these cases, Django's admin lets you write and register \"actions\" -- "
"simple functions that get called with a list of objects selected on the "
"change list page."
msgstr ""

# b3a8b5b230624e49bbb7d6e6cd7b7aa8
#: ../../ref/contrib/admin/actions.txt:16
msgid ""
"If you look at any change list in the admin, you'll see this feature in "
"action; Django ships with a \"delete selected objects\" action available to "
"all models. For example, here's the user module from Django's built-in :mod:"
"`django.contrib.auth` app:"
msgstr ""

# b32589e851354fa68ea9e07ecc1e5e06
#: ../../ref/contrib/admin/actions.txt:25
msgid ""
"The \"delete selected objects\" action uses :meth:`QuerySet.delete() <django."
"db.models.query.QuerySet.delete>` for efficiency reasons, which has an "
"important caveat: your model's ``delete()`` method will not be called."
msgstr ""

# 0082bbf0bbbd4b2f9e2b5f8b9c27a1ab
#: ../../ref/contrib/admin/actions.txt:30
msgid ""
"If you wish to override this behavior, simply write a custom action which "
"accomplishes deletion in your preferred manner -- for example, by calling "
"``Model.delete()`` for each of the selected items."
msgstr ""

# 643a65fb5f2040edb9c05d6e2fa32cca
#: ../../ref/contrib/admin/actions.txt:34
msgid ""
"For more background on bulk deletion, see the documentation on :ref:`object "
"deletion <topics-db-queries-delete>`."
msgstr ""

# 4a8b1c0a801d42afa6b373b3d97e87c0
#: ../../ref/contrib/admin/actions.txt:37
msgid "Read on to find out how to add your own actions to this list."
msgstr ""

# 5872f03dd97d4de89f5def5a2b029859
#: ../../ref/contrib/admin/actions.txt:40
msgid "Writing actions"
msgstr ""

# d20b07643fce4daab0153ca2f2bd3b83
#: ../../ref/contrib/admin/actions.txt:42
msgid "The easiest way to explain actions is by example, so let's dive in."
msgstr ""

# 0ad5314d206543e3ab11752032ff1267
#: ../../ref/contrib/admin/actions.txt:44
msgid ""
"A common use case for admin actions is the bulk updating of a model. Imagine "
"a simple news application with an ``Article`` model::"
msgstr ""

# a1c2b0695d244987983e628ea79f49bb
#: ../../ref/contrib/admin/actions.txt:63
msgid ""
"A common task we might perform with a model like this is to update an "
"article's status from \"draft\" to \"published\". We could easily do this in "
"the admin one article at a time, but if we wanted to bulk-publish a group of "
"articles, it'd be tedious. So, let's write an action that lets us change an "
"article's status to \"published.\""
msgstr ""

# 28de01ce9b73448b9d5f1f614367d757
#: ../../ref/contrib/admin/actions.txt:70
msgid "Writing action functions"
msgstr ""

# 170da40a1c7347d6b39f9f0f11e65894
#: ../../ref/contrib/admin/actions.txt:72
msgid ""
"First, we'll need to write a function that gets called when the action is "
"trigged from the admin. Action functions are just regular functions that "
"take three arguments:"
msgstr ""

# d84fc4a40710485f9e4ed3b38933389a
#: ../../ref/contrib/admin/actions.txt:76
msgid "The current :class:`ModelAdmin`"
msgstr ""

# 4bff68e754bf458fb553542e77f1b847
#: ../../ref/contrib/admin/actions.txt:77
msgid "An :class:`~django.http.HttpRequest` representing the current request,"
msgstr ""

# 5853af904cf040dfbb908100131f25ec
#: ../../ref/contrib/admin/actions.txt:78
msgid ""
"A :class:`~django.db.models.query.QuerySet` containing the set of objects "
"selected by the user."
msgstr ""

# fee58adca6034ced922a2297134bbd13
#: ../../ref/contrib/admin/actions.txt:81
msgid ""
"Our publish-these-articles function won't need the :class:`ModelAdmin` or "
"the request object, but we will use the queryset::"
msgstr ""

# 64fee58134c04fe8a02a3f37f89d0281
#: ../../ref/contrib/admin/actions.txt:89
msgid ""
"For the best performance, we're using the queryset's :ref:`update method "
"<topics-db-queries-update>`. Other types of actions might need to deal with "
"each object individually; in these cases we'd just iterate over the "
"queryset::"
msgstr ""

# 14139fe696f5486ba2201aac6accf587
#: ../../ref/contrib/admin/actions.txt:97
msgid ""
"That's actually all there is to writing an action! However, we'll take one "
"more optional-but-useful step and give the action a \"nice\" title in the "
"admin. By default, this action would appear in the action list as \"Make "
"published\" -- the function name, with underscores replaced by spaces. "
"That's fine, but we can provide a better, more human-friendly name by giving "
"the ``make_published`` function a ``short_description`` attribute::"
msgstr ""

# ade7f522fc2d4a789461f09b715e2017
#: ../../ref/contrib/admin/actions.txt:110
msgid ""
"This might look familiar; the admin's ``list_display`` option uses the same "
"technique to provide human-readable descriptions for callback functions "
"registered there, too."
msgstr ""

# 6f2c02e5114749f1b6f38aab355bcdd4
#: ../../ref/contrib/admin/actions.txt:115
msgid "Adding actions to the :class:`ModelAdmin`"
msgstr ""

# 60e3d9a89d6e47329d12dcea273e25ab
#: ../../ref/contrib/admin/actions.txt:117
msgid ""
"Next, we'll need to inform our :class:`ModelAdmin` of the action. This works "
"just like any other configuration option. So, the complete ``admin.py`` with "
"the action and its registration would look like::"
msgstr ""

# bfef643db8f44cf1990353f5aa9dc5e0
#: ../../ref/contrib/admin/actions.txt:135
msgid ""
"That code will give us an admin change list that looks something like this:"
msgstr ""

# b3f20651d7a342338acbc749d9209404
#: ../../ref/contrib/admin/actions.txt:139
msgid ""
"That's really all there is to it! If you're itching to write your own "
"actions, you now know enough to get started. The rest of this document just "
"covers more advanced techniques."
msgstr ""

# 032cac3c40524e1ab5b20e47e2a1594f
#: ../../ref/contrib/admin/actions.txt:144
msgid "Advanced action techniques"
msgstr ""

# 83ee3f873d714418bb19bb50d55ade68
#: ../../ref/contrib/admin/actions.txt:146
msgid ""
"There's a couple of extra options and possibilities you can exploit for more "
"advanced options."
msgstr ""

# 2523371bd0fb43abb58185c91a183c41
#: ../../ref/contrib/admin/actions.txt:150
msgid "Actions as :class:`ModelAdmin` methods"
msgstr ""

# 7a43946694f54eae90b4267fb42f4b47
#: ../../ref/contrib/admin/actions.txt:152
msgid ""
"The example above shows the ``make_published`` action defined as a simple "
"function. That's perfectly fine, but it's not perfect from a code design "
"point of view: since the action is tightly coupled to the ``Article`` "
"object, it makes sense to hook the action to the ``ArticleAdmin`` object "
"itself."
msgstr ""

# b4641a5318c647c6a41a8d4907e7e28e
#: ../../ref/contrib/admin/actions.txt:157
msgid "That's easy enough to do::"
msgstr ""

# 40417e57a0ad41a484638b989cdc4aa0
#: ../../ref/contrib/admin/actions.txt:168
msgid ""
"Notice first that we've moved ``make_published`` into a method and renamed "
"the `modeladmin` parameter to `self`, and second that we've now put the "
"string ``'make_published'`` in ``actions`` instead of a direct function "
"reference. This tells the :class:`ModelAdmin` to look up the action as a "
"method."
msgstr ""

# 94dbe8e8960f422da429596535eb9020
#: ../../ref/contrib/admin/actions.txt:173
msgid ""
"Defining actions as methods gives the action more straightforward, idiomatic "
"access to the :class:`ModelAdmin` itself, allowing the action to call any of "
"the methods provided by the admin."
msgstr ""

# 0c1e700935d6463c8f718d5cd428a6ca
#: ../../ref/contrib/admin/actions.txt:179
msgid ""
"For example, we can use ``self`` to flash a message to the user informing "
"her that the action was successful::"
msgstr ""

# 55042357467e45258daba033942f726d
#: ../../ref/contrib/admin/actions.txt:193
msgid ""
"This make the action match what the admin itself does after successfully "
"performing an action:"
msgstr ""

# 1d5a0267fffe4dcb9f6078a16ca5dbb3
#: ../../ref/contrib/admin/actions.txt:199
msgid "Actions that provide intermediate pages"
msgstr ""

# 154c9e5e590b49d49e23e486bab2974f
#: ../../ref/contrib/admin/actions.txt:201
msgid ""
"By default, after an action is performed the user is simply redirected back "
"to the original change list page. However, some actions, especially more "
"complex ones, will need to return intermediate pages. For example, the built-"
"in delete action asks for confirmation before deleting the selected objects."
msgstr ""

# 1bb0efa973384a15b7774f7eb4f1b435
#: ../../ref/contrib/admin/actions.txt:207
msgid ""
"To provide an intermediary page, simply return an :class:`~django.http."
"HttpResponse` (or subclass) from your action. For example, you might write a "
"simple export function that uses Django's :doc:`serialization functions </"
"topics/serialization>` to dump some selected objects as JSON::"
msgstr ""

# c6b2d08a82bc49f19cf71499bc7108a5
#: ../../ref/contrib/admin/actions.txt:221
msgid ""
"Generally, something like the above isn't considered a great idea. Most of "
"the time, the best practice will be to return an :class:`~django.http."
"HttpResponseRedirect` and redirect the user to a view you've written, "
"passing the list of selected objects in the GET query string. This allows "
"you to provide complex interaction logic on the intermediary pages. For "
"example, if you wanted to provide a more complete export function, you'd "
"want to let the user choose a format, and possibly a list of fields to "
"include in the export. The best thing to do would be to write a small action "
"that simply redirects to your custom export view::"
msgstr ""

# 593cbaa7fcf7458bbf83560cfa95a1e1
#: ../../ref/contrib/admin/actions.txt:240
msgid ""
"As you can see, the action is the simple part; all the complex logic would "
"belong in your export view. This would need to deal with objects of any "
"type, hence the business with the ``ContentType``."
msgstr ""

# 285f66c33d7247f8be0b8d838210ff79
#: ../../ref/contrib/admin/actions.txt:244
msgid "Writing this view is left as an exercise to the reader."
msgstr ""

# bbcdbdba285749588020cc2674e885d6
#: ../../ref/contrib/admin/actions.txt:249
msgid "Making actions available site-wide"
msgstr ""

# f289a481588f4a538b5f498bc74a336b
#: ../../ref/contrib/admin/actions.txt:253
msgid ""
"Some actions are best if they're made available to *any* object in the admin "
"site -- the export action defined above would be a good candidate. You can "
"make an action globally available using :meth:`AdminSite.add_action()`. For "
"example::"
msgstr ""

# 7771dea4ca7346478127fb306ae91bd0
#: ../../ref/contrib/admin/actions.txt:262
msgid ""
"This makes the `export_selected_objects` action globally available as an "
"action named `\"export_selected_objects\"`. You can explicitly give the "
"action a name -- good if you later want to programatically :ref:`remove the "
"action <disabling-admin-actions>` -- by passing a second argument to :meth:"
"`AdminSite.add_action()`::"
msgstr ""

# fa70ea5276634e6a92aa13b491de3317
#: ../../ref/contrib/admin/actions.txt:273
msgid "Disabling actions"
msgstr ""

# 99e498d84eb34b0da1e4d34e98ee383e
#: ../../ref/contrib/admin/actions.txt:275
msgid ""
"Sometimes you need to disable certain actions -- especially those :ref:"
"`registered site-wide <adminsite-actions>` -- for particular objects. "
"There's a few ways you can disable actions:"
msgstr ""

# 722baab607cb48678ef4197e8084b06a
#: ../../ref/contrib/admin/actions.txt:280
msgid "Disabling a site-wide action"
msgstr ""

# fb9a23190e2744d48c2b256f70dfc714
#: ../../ref/contrib/admin/actions.txt:284
msgid ""
"If you need to disable a :ref:`site-wide action <adminsite-actions>` you can "
"call :meth:`AdminSite.disable_action()`."
msgstr ""

# a353486eb7c44f7f8096d84288880eca
#: ../../ref/contrib/admin/actions.txt:287
msgid ""
"For example, you can use this method to remove the built-in \"delete "
"selected objects\" action::"
msgstr ""

# 37284c9f538f441aaf8efa85498c958a
#: ../../ref/contrib/admin/actions.txt:292
msgid ""
"Once you've done the above, that action will no longer be available site-"
"wide."
msgstr ""

# 37de5e86c9e5466b86d15c9161594226
#: ../../ref/contrib/admin/actions.txt:295
msgid ""
"If, however, you need to re-enable a globally-disabled action for one "
"particular model, simply list it explicitly in your ``ModelAdmin.actions`` "
"list::"
msgstr ""

# 9f9b0d3a0fb145ff8b83d47dcb8f49c8
#: ../../ref/contrib/admin/actions.txt:314
msgid "Disabling all actions for a particular :class:`ModelAdmin`"
msgstr ""

# ae50836c1eb14bed9dacaf42c6e162d2
#: ../../ref/contrib/admin/actions.txt:316
msgid ""
"If you want *no* bulk actions available for a given :class:`ModelAdmin`, "
"simply set :attr:`ModelAdmin.actions` to ``None``::"
msgstr ""

# 5800a016931e4ae8a8af6c5178440b59
#: ../../ref/contrib/admin/actions.txt:322
msgid ""
"This tells the :class:`ModelAdmin` to not display or allow any actions, "
"including any :ref:`site-wide actions <adminsite-actions>`."
msgstr ""

# 16cffbec62ec441fbf73066761aa8108
#: ../../ref/contrib/admin/actions.txt:326
msgid "Conditionally enabling or disabling actions"
msgstr ""

# eccd355bb41c434f8ed88201bc5cce18
#: ../../ref/contrib/admin/actions.txt:330
msgid ""
"Finally, you can conditionally enable or disable actions on a per-request "
"(and hence per-user basis) by overriding :meth:`ModelAdmin.get_actions`."
msgstr ""

# 966c75f46575485d9f8b88d3197aeaee
#: ../../ref/contrib/admin/actions.txt:333
msgid ""
"This returns a dictionary of actions allowed. The keys are action names, and "
"the values are ``(function, name, short_description)`` tuples."
msgstr ""

# af1bdf7b731c415a96bd20906e342483
#: ../../ref/contrib/admin/actions.txt:336
msgid ""
"Most of the time you'll use this method to conditionally remove actions from "
"the list gathered by the superclass. For example, if I only wanted users "
"whose names begin with 'J' to be able to delete objects in bulk, I could do "
"the following::"
msgstr ""
