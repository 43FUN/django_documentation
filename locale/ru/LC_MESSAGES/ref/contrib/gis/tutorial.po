# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2012.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-02-29 18:30\n"
"PO-Revision-Date: 2012-02-15 15:13\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# cdfc24d3b4684f0fbc9f9d086d45866d
#: ../../ref/contrib/gis/tutorial.txt:3
msgid "GeoDjango Tutorial"
msgstr ""

# 4fd1e5824ccf47b7899fedebe8c76b54
#: ../../ref/contrib/gis/tutorial.txt:6
msgid "Introduction"
msgstr ""

# 190e1d6c94364c07a3034b30284fd8be
#: ../../ref/contrib/gis/tutorial.txt:8
msgid ""
"GeoDjango is an add-on for Django that turns it into a world-class "
"geographic Web framework.  GeoDjango strives to make it as simple as "
"possible to create geographic Web applications, like location-based "
"services.  Some features include:"
msgstr ""

# 3d0e191109274e2b89ffde854e31eef9
#: ../../ref/contrib/gis/tutorial.txt:13
msgid "Django model fields for `OGC`_ geometries."
msgstr ""

# 410e55b2a339478d98cea1c2560c84e6
#: ../../ref/contrib/gis/tutorial.txt:14
msgid ""
"Extensions to Django's ORM for the querying and manipulation of spatial data."
msgstr ""

# 8a6a96b776ab476a8ab011aebcc161b8
#: ../../ref/contrib/gis/tutorial.txt:15
msgid ""
"Loosely-coupled, high-level Python interfaces for GIS geometry operations "
"and data formats."
msgstr ""

# 0f05c4bc74c0459da7c02161b14b29b8
#: ../../ref/contrib/gis/tutorial.txt:17
msgid "Editing of geometry fields inside the admin."
msgstr ""

# 0c49ee56c27745499d4f105825bdedbe
#: ../../ref/contrib/gis/tutorial.txt:19
msgid ""
"This tutorial assumes a familiarity with Django; thus, if you're brand new "
"to Django please read through the :doc:`regular tutorial </intro/"
"tutorial01>` to introduce yourself with basic Django concepts."
msgstr ""

# bcabff2670c14558839f233b3c39ea46
#: ../../ref/contrib/gis/tutorial.txt:25
msgid ""
"GeoDjango has special prerequisites overwhat is required by Django -- please "
"consult the :ref:`installation documentation <ref-gis-install>` for more "
"details."
msgstr ""

# 298caffcd43b4168826aa40fdc3c3f40
#: ../../ref/contrib/gis/tutorial.txt:29
msgid ""
"This tutorial will guide you through the creation of a geographic Web "
"application for viewing the `world borders`_. [#]_ Some of the code used in "
"this tutorial is taken from and/or inspired by the `GeoDjango basic apps`_ "
"project. [#]_"
msgstr ""

# 3b93b4606a0742fbab2a9894084f087e
#: ../../ref/contrib/gis/tutorial.txt:36
msgid ""
"Proceed through the tutorial sections sequentially for step-by-step "
"instructions."
msgstr ""

# 0f8dc7fdb1934c3f8fae829ac0df14b9
#: ../../ref/contrib/gis/tutorial.txt:44
msgid "Setting Up"
msgstr ""

# aa2b61463f4143f9933a37adbb3c22c6
#: ../../ref/contrib/gis/tutorial.txt:47
msgid "Create a Spatial Database"
msgstr ""

# fb61d5ffc1cc454491afdaa41c306382
#: ../../ref/contrib/gis/tutorial.txt:51
msgid ""
"MySQL and Oracle users can skip this section because spatial types are "
"already built into the database."
msgstr ""

# 29d777aa7c454cf5bec53aebbd6d6819
#: ../../ref/contrib/gis/tutorial.txt:54
msgid ""
"First, a spatial database needs to be created for our project.  If using "
"PostgreSQL and PostGIS, then the following commands will create the database "
"from a :ref:`spatial database template <spatialdb_template>`:"
msgstr ""

# ca8bcdbc04bd4442b5a57c5248c7fcd3
#: ../../ref/contrib/gis/tutorial.txt:65
msgid ""
"This command must be issued by a database user that has permissions to "
"create a database.  Here is an example set of commands to create such a user:"
msgstr ""

# 9abc199b894a47f19c3d5811a439311d
#: ../../ref/contrib/gis/tutorial.txt:75
msgid ""
"Replace ``geo`` with the system login user name that will be connecting to "
"the database.  For example, ``johndoe`` if that is the system user that will "
"be running GeoDjango."
msgstr ""

# 18c2db2976f54e73b7dd0c4328608b2e
#: ../../ref/contrib/gis/tutorial.txt:79
msgid ""
"Users of SQLite and SpatiaLite should consult the instructions on how to "
"create a :ref:`SpatiaLite database <create_spatialite_db>`."
msgstr ""

# b25745c743e34edb9c6b07a79fb7dd94
#: ../../ref/contrib/gis/tutorial.txt:83
msgid "Create GeoDjango Project"
msgstr ""

# 4b8ed522b7f5466893aba7ce3182c3c3
#: ../../ref/contrib/gis/tutorial.txt:85
msgid ""
"Use the ``django-admin.py`` script like normal to create a ``geodjango`` "
"project:"
msgstr ""

# fd29d2bfb9fc49a285f8993b153ef3b8
#: ../../ref/contrib/gis/tutorial.txt:92
msgid ""
"With the project initialized, now create a ``world`` Django application "
"within the ``geodjango`` project:"
msgstr ""

# 2b3919f1ca6f45b7b28f1bf537030edd
#: ../../ref/contrib/gis/tutorial.txt:101
msgid "Configure ``settings.py``"
msgstr ""

# fc1219e370d34c20a86869b38592b0ca
#: ../../ref/contrib/gis/tutorial.txt:103
msgid ""
"The ``geodjango`` project settings are stored in the ``settings.py`` file. "
"Edit the database connection settings appropriately::"
msgstr ""

# 29b84e875c244e26a4004b8d63f5469c
#: ../../ref/contrib/gis/tutorial.txt:116
msgid "These database settings are for Django 1.2 and above."
msgstr ""

# ef8b8d42f6f64a3d9ba1b0b6e76bf071
#: ../../ref/contrib/gis/tutorial.txt:118
msgid ""
"In addition, modify the :setting:`INSTALLED_APPS` setting to include :mod:"
"`django.contrib.admin`, :mod:`django.contrib.gis`, and ``world`` (our newly "
"created application)::"
msgstr ""

# 00dd57b924f34f26af228a9ec545d209
#: ../../ref/contrib/gis/tutorial.txt:133
msgid "Geographic Data"
msgstr ""

# 6f0baf127f67443390440cef42a8c438
#: ../../ref/contrib/gis/tutorial.txt:138
msgid "World Borders"
msgstr ""

# e674d4a4115647fd92dd22224e909535
#: ../../ref/contrib/gis/tutorial.txt:140
msgid ""
"The world borders data is available in this `zip file`__.  Create a data "
"directory in the ``world`` application, download the world borders data, and "
"unzip. On GNU/Linux platforms the following commands should do it:"
msgstr ""

# 75b14cc03f7f47618fded79d30d11592
#: ../../ref/contrib/gis/tutorial.txt:152
msgid ""
"The world borders ZIP file contains a set of data files collectively known "
"as an `ESRI Shapefile`__, one of the most popular geospatial data formats.  "
"When unzipped the world borders data set includes files with the following "
"extensions:"
msgstr ""

# d9516942fe7640a9b2d018a20eb7f83d
#: ../../ref/contrib/gis/tutorial.txt:157
msgid "``.shp``: Holds the vector data for the world borders geometries."
msgstr ""

# 71f534ee1e174b429b31e2af8d8f2f59
#: ../../ref/contrib/gis/tutorial.txt:158
msgid "``.shx``: Spatial index file for geometries stored in the ``.shp``."
msgstr ""

# 5b18a97864174807ba02d6219d108401
#: ../../ref/contrib/gis/tutorial.txt:159
msgid ""
"``.dbf``: Database file for holding non-geometric attribute data (e.g., "
"integer and character fields)."
msgstr ""

# dc127ea2874f41fab1dd572ab1d5be04
#: ../../ref/contrib/gis/tutorial.txt:161
msgid ""
"``.prj``: Contains the spatial reference information for the geographic data "
"stored in the shapefile."
msgstr ""

# 2acb6d2af8e8490ca1468d81282c2c27
#: ../../ref/contrib/gis/tutorial.txt:168
msgid "Use ``ogrinfo`` to examine spatial data"
msgstr ""

# ac3e3f4ef53f49219e983628467d808d
#: ../../ref/contrib/gis/tutorial.txt:170
msgid ""
"The GDAL ``ogrinfo`` utility is excellent for examining metadata about "
"shapefiles (or other vector data sources):"
msgstr ""

# fd2372621a0246cb947c1440cbb5a466
#: ../../ref/contrib/gis/tutorial.txt:180
msgid ""
"Here ``ogrinfo`` is telling us that the shapefile has one layer, and that "
"such layer contains polygon data.  To find out more we'll specify the layer "
"name and use the ``-so`` option to get only important summary information:"
msgstr ""

# ab684688aeef46d0a194fccce285badf
#: ../../ref/contrib/gis/tutorial.txt:212
msgid ""
"This detailed summary information tells us the number of features in the "
"layer (246), the geographical extent, the spatial reference system (\"SRS WKT"
"\"), as well as detailed information for each attribute field.  For example, "
"``FIPS: String (2.0)`` indicates that there's a ``FIPS`` character field "
"with a maximum length of 2; similarly, ``LON: Real (8.3)`` is a floating-"
"point field that holds a maximum of 8 digits up to three decimal places.  "
"Although this information may be found right on the `world borders`_ Web "
"site, this shows you how to determine this information yourself when such "
"metadata is not provided."
msgstr ""

# 258b99c3b52548c7810332436856c4f4
#: ../../ref/contrib/gis/tutorial.txt:223
msgid "Geographic Models"
msgstr ""

# 7fb1ee502a304935b5cfe487ec5eef86
#: ../../ref/contrib/gis/tutorial.txt:226
msgid "Defining a Geographic Model"
msgstr ""

# 66bead50d477486ab766f25ee109e6f6
#: ../../ref/contrib/gis/tutorial.txt:228
msgid ""
"Now that we've examined our world borders data set using ``ogrinfo``, we can "
"create a GeoDjango model to represent this data::"
msgstr ""

# c96576d0fbf049f691bd564bfeb6b87b
#: ../../ref/contrib/gis/tutorial.txt:257
msgid "Two important things to note:"
msgstr ""

# 83f512c591614d9bb4625ac44f7eb67e
#: ../../ref/contrib/gis/tutorial.txt:259
msgid "The ``models`` module is imported from :mod:`django.contrib.gis.db`."
msgstr ""

# 7e716f66dff343b5afa4350d8eaa0c9c
#: ../../ref/contrib/gis/tutorial.txt:260
msgid ""
"The model overrides its default manager with :class:`~django.contrib.gis.db."
"models.GeoManager`; this is *required* to perform spatial queries."
msgstr ""

# b06d0e9a03ff4d7ca0bb3431a8e4cb73
#: ../../ref/contrib/gis/tutorial.txt:264
msgid ""
"When declaring a geometry field on your model the default spatial reference "
"system is WGS84 (meaning the `SRID`__ is 4326) -- in other words, the field "
"coordinates are in longitude/latitude pairs in units of degrees.  If you "
"want the coordinate system to be different, then SRID of the geometry field "
"may be customized by setting the ``srid`` with an integer corresponding to "
"the coordinate system of your choice."
msgstr ""

# 4de5da1aa35c4072842bda21a752a8a4
#: ../../ref/contrib/gis/tutorial.txt:274
msgid "Run ``syncdb``"
msgstr ""

# f551944451224ffe8b992a2f990228ee
#: ../../ref/contrib/gis/tutorial.txt:276
msgid ""
"After you've defined your model, it needs to be synced with the spatial "
"database. First, let's look at the SQL that will generate the table for the "
"``WorldBorder`` model::"
msgstr ""

# 1138f64146d34240a9eb017cccf33c54
#: ../../ref/contrib/gis/tutorial.txt:282
msgid "This management command should produce the following output:"
msgstr ""

# 2702f12bc32a4b66a289311f56fec61f
#: ../../ref/contrib/gis/tutorial.txt:307
msgid ""
"If satisfied, you may then create this table in the database by running the "
"``syncdb`` management command::"
msgstr ""

# b478851ee6d843cd877fcfe16bc7cd0d
#: ../../ref/contrib/gis/tutorial.txt:314
msgid ""
"The ``syncdb`` command may also prompt you to create an admin user; go ahead "
"and do so (not required now, may be done at any point in the future using "
"the ``createsuperuser`` management command)."
msgstr ""

# b6a5c408524e49b993b5d9d58fdc41e6
#: ../../ref/contrib/gis/tutorial.txt:319
msgid "Importing Spatial Data"
msgstr ""

# d9fe9ce5c0784697991c6cfbeac38a31
#: ../../ref/contrib/gis/tutorial.txt:321
msgid ""
"This section will show you how to take the data from the world borders "
"shapefile and import it into GeoDjango models using the :ref:`ref-"
"layermapping`. There are many different ways to import data in to a spatial "
"database -- besides the tools included within GeoDjango, you may also use "
"the following to populate your spatial database:"
msgstr ""

# 10dbc34c214340b2ba0a14adeb4ca819
#: ../../ref/contrib/gis/tutorial.txt:328
msgid ""
"`ogr2ogr`_: Command-line utility, included with GDAL, that supports loading "
"a multitude of vector data formats into the PostGIS, MySQL, and Oracle "
"spatial databases."
msgstr ""

# 0abb0a870614418888051561aad0a99b
#: ../../ref/contrib/gis/tutorial.txt:331
msgid ""
"`shp2pgsql`_: This utility is included with PostGIS and only supports ESRI "
"shapefiles."
msgstr ""

# 6462861dd71a40dba25073f27bbaa776
#: ../../ref/contrib/gis/tutorial.txt:340
msgid "GDAL Interface"
msgstr ""

# 7b40b2e91edf480fba758247d44c109b
#: ../../ref/contrib/gis/tutorial.txt:342
msgid ""
"Earlier we used the ``ogrinfo`` to explore the contents of the world borders "
"shapefile.  Included within GeoDjango is an interface to GDAL's powerful OGR "
"library -- in other words, you'll be able explore all the vector data "
"sources that OGR supports via a Pythonic API."
msgstr ""

# 12e1e66c63fb409ca2e53043672955ca
#: ../../ref/contrib/gis/tutorial.txt:347
msgid "First, invoke the Django shell:"
msgstr ""

# 0615c0143b0941f9b5a09cbbd8dbde22
#: ../../ref/contrib/gis/tutorial.txt:353
msgid ""
"If the :ref:`worldborders` data was downloaded like earlier in the tutorial, "
"then we can determine the path using Python's built-in ``os`` module::"
msgstr ""

# e36b44e7d6ee40798d9b38835662536b
#: ../../ref/contrib/gis/tutorial.txt:362
msgid ""
"Now, the world borders shapefile may be opened using GeoDjango's :class:"
"`~django.contrib.gis.gdal.DataSource` interface::"
msgstr ""

# a7b923493baa46d591038ab58d33cd08
#: ../../ref/contrib/gis/tutorial.txt:370
msgid ""
"Data source objects can have different layers of geospatial features; "
"however, shapefiles are only allowed to have one layer::"
msgstr ""

# 0842e8a5991d4fd8a6f072c9c4c3e9cc
#: ../../ref/contrib/gis/tutorial.txt:379
msgid ""
"You can see what the geometry type of the layer is and how many features it "
"contains::"
msgstr ""

# 3afe18382b7f4352884fcf7d031f7251
#: ../../ref/contrib/gis/tutorial.txt:389
msgid ""
"Unfortunately the shapefile data format does not allow for greater "
"specificity with regards to geometry types.  This shapefile, like many "
"others, actually includes ``MultiPolygon`` geometries in its features.  You "
"need to watch out for this when creating your models as a GeoDjango "
"``PolygonField`` will not accept a ``MultiPolygon`` type geometry -- thus a "
"``MultiPolygonField`` is used in our model's definition instead."
msgstr ""

# abb341d6143243b28e8fcfcb8b0f5841
#: ../../ref/contrib/gis/tutorial.txt:397
msgid ""
"The :class:`~django.contrib.gis.gdal.Layer` may also have a spatial "
"reference system associated with it -- if it does, the ``srs`` attribute "
"will return a :class:`~django.contrib.gis.gdal.SpatialReference` object::"
msgstr ""

# b53d72939dfc46d6940f51cae19f969b
#: ../../ref/contrib/gis/tutorial.txt:411
msgid ""
"Here we've noticed that the shapefile is in the popular WGS84 spatial "
"reference system -- in other words, the data uses units of degrees longitude "
"and latitude."
msgstr ""

# dc322956e26249db84568de1bb71ca12
#: ../../ref/contrib/gis/tutorial.txt:415
msgid ""
"In addition, shapefiles also support attribute fields that may contain "
"additional data.  Here are the fields on the World Borders layer:"
msgstr ""

# a2af753ff8c54fa4ac67f340ecb93dd5
#: ../../ref/contrib/gis/tutorial.txt:421
msgid ""
"Here we are examining the OGR types (e.g., whether a field is an integer or "
"a string) associated with each of the fields:"
msgstr ""

# 6f4c96a340744538a424ed247c87c35e
#: ../../ref/contrib/gis/tutorial.txt:427
msgid ""
"You can iterate over each feature in the layer and extract information from "
"both the feature's geometry (accessed via the ``geom`` attribute) as well as "
"the feature's attribute fields (whose **values** are accessed via ``get()`` "
"method)::"
msgstr ""

# 685f1fc8b21243c68a563bea33162d1a
#: ../../ref/contrib/gis/tutorial.txt:440
msgid ":class:`~django.contrib.gis.gdal.Layer` objects may be sliced::"
msgstr ""

# 2ba40c0559a34611a6ae41061a8ca813
#: ../../ref/contrib/gis/tutorial.txt:445
msgid "And individual features may be retrieved by their feature ID::"
msgstr ""

# 496cf78860134662b3afd27e650a57cf
#: ../../ref/contrib/gis/tutorial.txt:451
msgid ""
"Here the boundary geometry for San Marino is extracted and looking exported "
"to WKT and GeoJSON::"
msgstr ""

# 5f12153343a642309c887a54c9dcd9e5
#: ../../ref/contrib/gis/tutorial.txt:462
msgid "``LayerMapping``"
msgstr ""

# dc87172a31b84844b7add54ed10fc3a5
#: ../../ref/contrib/gis/tutorial.txt:464
msgid ""
"We're going to dive right in -- create a file called ``load.py`` inside the "
"``world`` application, and insert the following::"
msgstr ""

# 785fbd7114b34161903067ce4e893654
#: ../../ref/contrib/gis/tutorial.txt:494
msgid "A few notes about what's going on:"
msgstr ""

# e65052bf5dff41198a39005fb75494ae
#: ../../ref/contrib/gis/tutorial.txt:496
msgid ""
"Each key in the ``world_mapping`` dictionary corresponds to a field in the "
"``WorldBorder`` model, and the value is the name of the shapefile field that "
"data will be loaded from."
msgstr ""

# 36ed7c887cda4144bf28bdd215b6db00
#: ../../ref/contrib/gis/tutorial.txt:499
msgid ""
"The key ``mpoly`` for the geometry field is ``MULTIPOLYGON``, the geometry "
"type we wish to import as.  Even if simple polygons are encountered in the "
"shapefile they will automatically be converted into collections prior to "
"insertion into the database."
msgstr ""

# d89fb807bd904461a71fbaccce36dcf5
#: ../../ref/contrib/gis/tutorial.txt:503
msgid ""
"The path to the shapefile is not absolute -- in other words, if you move the "
"``world`` application (with ``data`` subdirectory) to a different location, "
"then the script will still work."
msgstr ""

# 51e7ca58c22247d5abceb7cb6600adf9
#: ../../ref/contrib/gis/tutorial.txt:506
msgid ""
"The ``transform`` keyword is set to ``False`` because the data in the "
"shapefile does not need to be converted -- it's already in WGS84 (SRID=4326)."
msgstr ""

# a83e5609b1b147be806e096fd587056d
#: ../../ref/contrib/gis/tutorial.txt:508
msgid ""
"The ``encoding`` keyword is set to the character encoding of string values "
"in the shapefile. This ensures that string values are read and saved "
"correctly from their original encoding system."
msgstr ""

# 1f6ea2c1ec544c4ebda192e5863cb4e4
#: ../../ref/contrib/gis/tutorial.txt:512
msgid ""
"Afterwards, invoke the Django shell from the ``geodjango`` project directory:"
msgstr ""

# 26052b0b1e8d44a186c4fec6adf3f9f3
#: ../../ref/contrib/gis/tutorial.txt:518
msgid ""
"Next, import the ``load`` module, call the ``run`` routine, and watch "
"``LayerMapping`` do the work::"
msgstr ""

# 901b200edce24ebc9ad138f66e2ce81b
#: ../../ref/contrib/gis/tutorial.txt:528
msgid "Try ``ogrinspect``"
msgstr ""

# 94c8016a3c984f499910ce250fedd93f
#: ../../ref/contrib/gis/tutorial.txt:529
msgid ""
"Now that you've seen how to define geographic models and import data with "
"the :ref:`ref-layermapping`, it's possible to further automate this process "
"with use of the :djadmin:`ogrinspect` management command.  The :djadmin:"
"`ogrinspect` command  introspects a GDAL-supported vector data source (e.g., "
"a shapefile) and generates a model definition and ``LayerMapping`` "
"dictionary automatically."
msgstr ""

# bf22e0f4989e41c6ab98572918269e00
#: ../../ref/contrib/gis/tutorial.txt:535
msgid "The general usage of the command goes as follows:"
msgstr ""

# 0e5d4ad4e4334135a470ee89784a6edf
#: ../../ref/contrib/gis/tutorial.txt:541
msgid ""
"Where ``data_source`` is the path to the GDAL-supported data source and "
"``model_name`` is the name to use for the model.  Command-line options may "
"be used to further define how the model is generated."
msgstr ""

# 4aa38dd751404a69a56563e967ff48d5
#: ../../ref/contrib/gis/tutorial.txt:545
msgid ""
"For example, the following command nearly reproduces the ``WorldBorder`` "
"model and mapping dictionary created above, automatically:"
msgstr ""

# b089cdbcaecc4fccbf728bf565346422
#: ../../ref/contrib/gis/tutorial.txt:553
msgid "A few notes about the command-line options given above:"
msgstr ""

# e8951595fe6746f4bf7bd4726368e357
#: ../../ref/contrib/gis/tutorial.txt:555
msgid "The ``--srid=4326`` option sets the SRID for the geographic field."
msgstr ""

# cbe7cef042564c2abeed4b507f947cb6
#: ../../ref/contrib/gis/tutorial.txt:556
msgid ""
"The ``--mapping`` option tells ``ogrinspect`` to also generate a mapping "
"dictionary for use with :class:`~django.contrib.gis.utils.LayerMapping`."
msgstr ""

# 90efb204077b4e46b4e2400098bb1da3
#: ../../ref/contrib/gis/tutorial.txt:559
msgid ""
"The ``--multi`` option is specified so that the geographic field is a :class:"
"`~django.contrib.gis.db.models.MultiPolygonField` instead of just a :class:"
"`~django.contrib.gis.db.models.PolygonField`."
msgstr ""

# 2b3e3fc2803340b6b597860247c6dd03
#: ../../ref/contrib/gis/tutorial.txt:563
msgid ""
"The command produces the following output, which may be copied directly into "
"the ``models.py`` of a GeoDjango application::"
msgstr ""

# c1b59e2705474679b6c75f58a503574e
#: ../../ref/contrib/gis/tutorial.txt:601
msgid "Spatial Queries"
msgstr ""

# af1a7ed502134dfc982089cc4a9cb207
#: ../../ref/contrib/gis/tutorial.txt:604
msgid "Spatial Lookups"
msgstr ""

# 6ab85cc2f9834f31993f21c1e531a49a
#: ../../ref/contrib/gis/tutorial.txt:605
msgid ""
"GeoDjango extends the Django ORM and allows the use of spatial lookups. "
"Let's do an example where we find the ``WorldBorder`` model that contains a "
"point.  First, fire up the management shell:"
msgstr ""

# e5256be1d626494a980bcb1e72b27270
#: ../../ref/contrib/gis/tutorial.txt:613
msgid "Now, define a point of interest [#]_::"
msgstr ""

# 73706aa7d04d4f10a08067414e71119e
#: ../../ref/contrib/gis/tutorial.txt:617
msgid ""
"The ``pnt_wkt`` string represents the point at -95.3385 degrees longitude, "
"and 29.7245 degrees latitude.  The geometry is in a format known as Well "
"Known Text (WKT), an open standard issued by the Open Geospatial Consortium "
"(OGC). [#]_  Import the ``WorldBorder`` model, and perform a ``contains`` "
"lookup using the ``pnt_wkt`` as the parameter::"
msgstr ""

# c8f905a97f544c3c92c20497384c2236
#: ../../ref/contrib/gis/tutorial.txt:628
msgid ""
"Here we retrieved a ``GeoQuerySet`` that has only one model: the one for the "
"United States (which is what we would expect).  Similarly, a :ref:`GEOS "
"geometry object <ref-geos>` may also be used -- here the ``intersects`` "
"spatial lookup is combined with the ``get`` method to retrieve only the "
"``WorldBorder`` instance for San Marino instead of a queryset::"
msgstr ""

# 9d153ad3ab094a98a68ffe6b645bae21
#: ../../ref/contrib/gis/tutorial.txt:640
msgid ""
"The ``contains`` and ``intersects`` lookups are just a subset of what's "
"available -- the :ref:`ref-gis-db-api` documentation has more."
msgstr ""

# 5b7526dc9e3744d793b19d8953c666a7
#: ../../ref/contrib/gis/tutorial.txt:644
msgid "Automatic Spatial Transformations"
msgstr ""

# cb501bd77a5547439743808a9950637e
#: ../../ref/contrib/gis/tutorial.txt:645
msgid ""
"When querying the spatial database GeoDjango automatically transforms "
"geometries if they're in a different coordinate system.  In the following "
"example, the coordinate will be expressed in terms of `EPSG SRID 32140`__, a "
"coordinate system specific to south Texas **only** and in units of "
"**meters** and not degrees::"
msgstr ""

# 190e17e8f8ec4923b00463aa558ce58d
#: ../../ref/contrib/gis/tutorial.txt:654
msgid ""
"Note that ``pnt`` may also be constructed with EWKT, an \"extended\" form of "
"WKT that includes the SRID::"
msgstr ""

# 242645035572470d9ecc34169005eb2f
#: ../../ref/contrib/gis/tutorial.txt:659
msgid ""
"When using GeoDjango's ORM, it will automatically wrap geometry values in "
"transformation SQL, allowing the developer to work at a higher level of "
"abstraction::"
msgstr ""

# 0e6a3fca8e2e40338b1cf4ab62237ba5
#: ../../ref/contrib/gis/tutorial.txt:677
msgid "Lazy Geometries"
msgstr ""

# c5d77517a979400a81b313f40daa3788
#: ../../ref/contrib/gis/tutorial.txt:678
msgid ""
"Geometries come to GeoDjango in a standardized textual representation.  Upon "
"access of the geometry field, GeoDjango creates a `GEOS geometry object <ref-"
"geos>`, exposing powerful functionality, such as serialization properties "
"for popular geospatial formats::"
msgstr ""

# cbda856035a544aeb5f8f0337db2c449
#: ../../ref/contrib/gis/tutorial.txt:693
msgid ""
"This includes access to all of the advanced geometric operations provided by "
"the GEOS library::"
msgstr ""

# 9c0924fae4ca4870a9f614573827926d
#: ../../ref/contrib/gis/tutorial.txt:703
msgid "``GeoQuerySet`` Methods"
msgstr ""

# b995121fc4004533b9989ed2939a13cf
#: ../../ref/contrib/gis/tutorial.txt:707
msgid "Putting your data on the map"
msgstr ""

# 2e028cf705194402bc21245ab231cbf9
#: ../../ref/contrib/gis/tutorial.txt:710
msgid "Google"
msgstr ""

# 3d008998c2584de488bc743167385bbb
#: ../../ref/contrib/gis/tutorial.txt:713
msgid "Geographic Admin"
msgstr ""

# f591b9d5671846a5921824fc2fba1987
#: ../../ref/contrib/gis/tutorial.txt:715
msgid ""
"GeoDjango extends :doc:`Django's admin application </ref/contrib/admin/"
"index>` to enable support for editing geometry fields."
msgstr ""

# 5dacd129694a4a4ea2ca34e1a68334fa
#: ../../ref/contrib/gis/tutorial.txt:719
msgid "Basics"
msgstr ""

# 220a0e20542a43f484e1c87cc56181d9
#: ../../ref/contrib/gis/tutorial.txt:721
msgid ""
"GeoDjango also supplements the Django admin by allowing users to create and "
"modify geometries on a JavaScript slippy map (powered by `OpenLayers`_)."
msgstr ""

# ae0dbbde7821459d91aa568146cbd659
#: ../../ref/contrib/gis/tutorial.txt:724
msgid ""
"Let's dive in again -- create a file called ``admin.py`` inside the "
"``world`` application, and insert the following::"
msgstr ""

# ac5a70f47a2b478abaa788107b0bd74c
#: ../../ref/contrib/gis/tutorial.txt:732
msgid ""
"Next, edit your ``urls.py`` in the ``geodjango`` project folder to look as "
"follows::"
msgstr ""

# 5f1d5590cf46471496fc192fa8f766e1
#: ../../ref/contrib/gis/tutorial.txt:744
msgid "Start up the Django development server:"
msgstr ""

# 24ea65d0bf394c9ea6f97534b3bc319e
#: ../../ref/contrib/gis/tutorial.txt:750
msgid ""
"Finally, browse to ``http://localhost:8000/admin/``, and log in with the "
"admin user created after running ``syncdb``.  Browse to any of the "
"``WorldBorder`` entries -- the borders may be edited by clicking on a "
"polygon and dragging the vertexes to the desired position."
msgstr ""

# cba0ba3f078a4b598f7a5c90a86892f1
#: ../../ref/contrib/gis/tutorial.txt:763
msgid "``OSMGeoAdmin``"
msgstr ""

# 2ab97ff6cdfa4be298afdc7ff91d5db8
#: ../../ref/contrib/gis/tutorial.txt:765
msgid ""
"With the :class:`~django.contrib.gis.admin.OSMGeoAdmin`, GeoDjango uses a "
"`Open Street Map`_ layer in the admin. This provides more context (including "
"street and thoroughfare details) than available with the :class:`~django."
"contrib.gis.admin.GeoModelAdmin` (which uses the `Vector Map Level 0`_ WMS "
"data set hosted at `Metacarta`_)."
msgstr ""

# 1562d01a81bb43fe92e15d2cf9eb2036
#: ../../ref/contrib/gis/tutorial.txt:771
msgid "First, there are some important requirements and limitations:"
msgstr ""

# 2b348710e0334cd88147f527e467fa68
#: ../../ref/contrib/gis/tutorial.txt:773
msgid ""
":class:`~django.contrib.gis.admin.OSMGeoAdmin` requires that the :ref:"
"`spherical mercator projection be added <addgoogleprojection>` to the "
"``spatial_ref_sys`` table (PostGIS 1.3 and below, only)."
msgstr ""

# b6fcff60773e48548278a13c8cff8cb2
#: ../../ref/contrib/gis/tutorial.txt:776
msgid ""
"The PROJ.4 datum shifting files must be installed (see the :ref:`PROJ.4 "
"installation instructions <proj4>` for more details)."
msgstr ""

# f5e0da2b4fc749f8bf5e021b5cd9ac42
#: ../../ref/contrib/gis/tutorial.txt:779
msgid ""
"If you meet these requirements, then just substitute in the ``OSMGeoAdmin`` "
"option class in your ``admin.py`` file::"
msgstr ""

# a8de42e21fec436893e8c37229ea8395
#: ../../ref/contrib/gis/tutorial.txt:785
msgid "Footnotes"
msgstr ""

# 8c244f79e29144d68c2999fccc726735
#: ../../ref/contrib/gis/tutorial.txt:786
msgid ""
"Special thanks to Bjørn Sandvik of `thematicmapping.org <http://"
"thematicmapping.org>`_ for providing and maintaining this data set."
msgstr ""

# 4b69b429330846799e3e6630dbc9ac2a
#: ../../ref/contrib/gis/tutorial.txt:787
msgid ""
"GeoDjango basic apps was written by Dane Springmeyer, Josh Livni, and "
"Christopher Schmidt."
msgstr ""

# 8ebaa5a9df6d489a9dae67c7f751fcf0
#: ../../ref/contrib/gis/tutorial.txt:788
msgid ""
"Here the point is for the `University of Houston Law Center <http://www.law."
"uh.edu/>`_."
msgstr ""

# c536246ffda84fce90bb617f8704fd5e
#: ../../ref/contrib/gis/tutorial.txt:789
msgid ""
"Open Geospatial Consortium, Inc., `OpenGIS Simple Feature Specification For "
"SQL <http://www.opengis.org/docs/99-049.pdf>`_, Document 99-049."
msgstr ""
