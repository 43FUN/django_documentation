# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2012.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-02-27 00:21\n"
"PO-Revision-Date: 2012-02-15 15:13\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# 0c0612d66dfa45dd98ff9f185af77cbe
#: ../../ref/contrib/sites.txt:3
msgid "The \"sites\" framework"
msgstr ""

# 55deab3a094a4a9fb7bc4be666c6a937
#: ../../ref/contrib/sites.txt:11
msgid ""
"Django comes with an optional \"sites\" framework. It's a hook for "
"associating objects and functionality to particular Web sites, and it's a "
"holding place for the domain names and \"verbose\" names of your Django-"
"powered sites."
msgstr ""

# 085dc434e09a4392889436a8becf0127
#: ../../ref/contrib/sites.txt:15
msgid ""
"Use it if your single Django installation powers more than one site and you "
"need to differentiate between those sites in some way."
msgstr ""

# 4caf41279d4048bf9811b8beca382bef
#: ../../ref/contrib/sites.txt:18
msgid "The whole sites framework is based on a simple model:"
msgstr ""

# 62e67ae7314649359dfffc293e3c159c
#: ../../ref/contrib/sites.txt:22
msgid ""
"A model for storing the ``domain`` and ``name`` attributes of a Web site. "
"The :setting:`SITE_ID` setting specifies the database ID of the :class:"
"`~django.contrib.sites.models.Site` object associated with that particular "
"settings file."
msgstr ""

# cd846d47b6b34bdb8d715114d6e0f488
#: ../../ref/contrib/sites.txt:29
msgid "The domain name associated with the Web site."
msgstr ""

# dd2cd2d001204b5da24092efcc43dfa9
#: ../../ref/contrib/sites.txt:33
msgid "A human-readable \"verbose\" name for the Web site."
msgstr ""

# c996bea52406404a978e5d9b1a58a634
#: ../../ref/contrib/sites.txt:36
msgid ""
"How you use this is up to you, but Django uses it in a couple of ways "
"automatically via simple conventions."
msgstr ""

# 4e1b7db1e77249abbe8aa69fcc9c7af1
#: ../../ref/contrib/sites.txt:40
msgid "Example usage"
msgstr ""

# b168e72d4cd243f3a3e6132056997a8d
#: ../../ref/contrib/sites.txt:42
msgid "Why would you use sites? It's best explained through examples."
msgstr ""

# 3c5491d672f34816ab3012e133597e33
#: ../../ref/contrib/sites.txt:45
msgid "Associating content with multiple sites"
msgstr ""

# 4fc5742b85ce4cf9a177367c44ecf655
#: ../../ref/contrib/sites.txt:47
msgid ""
"The Django-powered sites LJWorld.com_ and Lawrence.com_ are operated by the "
"same news organization -- the Lawrence Journal-World newspaper in Lawrence, "
"Kansas. LJWorld.com focuses on news, while Lawrence.com focuses on local "
"entertainment. But sometimes editors want to publish an article on *both* "
"sites."
msgstr ""

# d01541d5b4a4454195bc39628eec1cdb
#: ../../ref/contrib/sites.txt:53
msgid ""
"The brain-dead way of solving the problem would be to require site producers "
"to publish the same story twice: once for LJWorld.com and again for Lawrence."
"com. But that's inefficient for site producers, and it's redundant to store "
"multiple copies of the same story in the database."
msgstr ""

# 36932193774a4be6831904a60c195110
#: ../../ref/contrib/sites.txt:58
msgid ""
"The better solution is simple: Both sites use the same article database, and "
"an article is associated with one or more sites. In Django model "
"terminology, that's represented by a :class:`~django.db.models."
"ManyToManyField` in the ``Article`` model::"
msgstr ""

# c13822faf3e047959594ee45eafccc2f
#: ../../ref/contrib/sites.txt:71
msgid "This accomplishes several things quite nicely:"
msgstr ""

# 0ae62f9a5f1a4ebe95d5c8c0f8fe237e
#: ../../ref/contrib/sites.txt:73
msgid ""
"It lets the site producers edit all content -- on both sites -- in a single "
"interface (the Django admin)."
msgstr ""

# 1d409704b50d429a9f93130e0bc780f0
#: ../../ref/contrib/sites.txt:76
msgid ""
"It means the same story doesn't have to be published twice in the database; "
"it only has a single record in the database."
msgstr ""

# 5770f27dcf0b4578bbb3316d6c873908
#: ../../ref/contrib/sites.txt:79
msgid ""
"It lets the site developers use the same Django view code for both sites. "
"The view code that displays a given story just checks to make sure the "
"requested story is on the current site. It looks something like this::"
msgstr ""

# a332766c1f7d41989e734cd7395ebe74
#: ../../ref/contrib/sites.txt:96
msgid "Associating content with a single site"
msgstr ""

# 29db2f054ed74bd69b4591ff7d042cea
#: ../../ref/contrib/sites.txt:98
msgid ""
"Similarly, you can associate a model to the :class:`~django.contrib.sites."
"models.Site` model in a many-to-one relationship, using :class:`~django.db."
"models.ForeignKey`."
msgstr ""

# fe7382ec336e4e959eb38ae5a5a0d3dd
#: ../../ref/contrib/sites.txt:103
msgid ""
"For example, if an article is only allowed on a single site, you'd use a "
"model like this::"
msgstr ""

# db89c0d667c4406bbff3a8a19e89d0a1
#: ../../ref/contrib/sites.txt:114
msgid "This has the same benefits as described in the last section."
msgstr ""

# b3b0c4e402fd41bf88f19abd95b99efd
#: ../../ref/contrib/sites.txt:119
msgid "Hooking into the current site from views"
msgstr ""

# 3172488a05964883b22c75865dac6d0d
#: ../../ref/contrib/sites.txt:121
msgid ""
"You can use the sites framework in your Django views to do particular things "
"based on the site in which the view is being called. For example::"
msgstr ""

# e7b014b7bf41468c9789e782fec5a217
#: ../../ref/contrib/sites.txt:135
msgid ""
"Of course, it's ugly to hard-code the site IDs like that. This sort of hard-"
"coding is best for hackish fixes that you need done quickly. The cleaner way "
"of accomplishing the same thing is to check the current site's domain::"
msgstr ""

# 7dc547b0bf4b449aa30536ecd764a712
#: ../../ref/contrib/sites.txt:151
msgid ""
"This has also the advantage of checking if the sites framework is installed, "
"and return a :class:`RequestSite` instance if it is not."
msgstr ""

# 980d603b8a5f4de9b3cc1c244b29e0bf
#: ../../ref/contrib/sites.txt:154
msgid ""
"If you don't have access to the request object, you can use the ``get_current"
"()`` method of the :class:`~django.contrib.sites.models.Site` model's "
"manager. You should then ensure that your settings file does contain the :"
"setting:`SITE_ID` setting. This example is equivalent to the previous one::"
msgstr ""

# 4c3f29785c9f4564b03adb9130435122
#: ../../ref/contrib/sites.txt:171
msgid "Getting the current domain for display"
msgstr ""

# 2cfc6cbde0d1488fb9f020d2ebefe49b
#: ../../ref/contrib/sites.txt:173
msgid ""
"LJWorld.com and Lawrence.com both have email alert functionality, which lets "
"readers sign up to get notifications when news happens. It's pretty basic: A "
"reader signs up on a Web form, and he immediately gets an email saying, "
"\"Thanks for your subscription.\""
msgstr ""

# c632e3034bf04bc1999004ac3774db4a
#: ../../ref/contrib/sites.txt:178
msgid ""
"It'd be inefficient and redundant to implement this signup-processing code "
"twice, so the sites use the same code behind the scenes. But the \"thank you "
"for signing up\" notice needs to be different for each site. By using :class:"
"`~django.contrib.sites.models.Site` objects, we can abstract the \"thank you"
"\" notice to use the values of the current site's :attr:`~django.contrib."
"sites.models.Site.name` and :attr:`~django.contrib.sites.models.Site.domain`."
msgstr ""

# 1c3414014da64556a43132d70d49ec94
#: ../../ref/contrib/sites.txt:186
msgid "Here's an example of what the form-handling view looks like::"
msgstr ""

# d0e1f6683a9e413984999a379e5b185b
#: ../../ref/contrib/sites.txt:203
msgid ""
"On Lawrence.com, this email has the subject line \"Thanks for subscribing to "
"lawrence.com alerts.\" On LJWorld.com, the email has the subject \"Thanks "
"for subscribing to LJWorld.com alerts.\" Same goes for the email's message "
"body."
msgstr ""

# f3176b6b449d4082a7f38bba2478639c
#: ../../ref/contrib/sites.txt:207
msgid ""
"Note that an even more flexible (but more heavyweight) way of doing this "
"would be to use Django's template system. Assuming Lawrence.com and LJWorld."
"com have different template directories (:setting:`TEMPLATE_DIRS`), you "
"could simply farm out to the template system like so::"
msgstr ""

# 5a93f0cb013148dda6d0973deeeea07c
#: ../../ref/contrib/sites.txt:225
msgid ""
"In this case, you'd have to create :file:`subject.txt` and :file:`message."
"txt` template files for both the LJWorld.com and Lawrence.com template "
"directories. That gives you more flexibility, but it's also more complex."
msgstr ""

# 3754f0d4c34247dba57d84d455e48d8e
#: ../../ref/contrib/sites.txt:229
msgid ""
"It's a good idea to exploit the :class:`~django.contrib.sites.models.Site` "
"objects as much as possible, to remove unneeded complexity and redundancy."
msgstr ""

# 317f154e88d44ce1b32f9e0e8b5da0dc
#: ../../ref/contrib/sites.txt:233
msgid "Getting the current domain for full URLs"
msgstr ""

# d5f055b5963d49c0921f07df47f755a3
#: ../../ref/contrib/sites.txt:235
msgid ""
"Django's ``get_absolute_url()`` convention is nice for getting your objects' "
"URL without the domain name, but in some cases you might want to display the "
"full URL -- with ``http://`` and the domain and everything -- for an object. "
"To do this, you can use the sites framework. A simple example::"
msgstr ""

# 82727bcda0e4499cacaa2591c00a64fa
#: ../../ref/contrib/sites.txt:252
msgid "Enabling the sites framework"
msgstr ""

# 4211854d75bb4c2cabe4222f888abd1f
#: ../../ref/contrib/sites.txt:257
msgid "To enable the sites framework, follow these steps:"
msgstr ""

# d60fa69e291c4b10b427115263db989d
#: ../../ref/contrib/sites.txt:259
msgid ""
"Add ``'django.contrib.sites'`` to your :setting:`INSTALLED_APPS` setting."
msgstr ""

# 8898205a03474746b42be2d3003c0b3c
#: ../../ref/contrib/sites.txt:262
msgid "Define a :setting:`SITE_ID` setting::"
msgstr ""

# 0a3ae14567c9462b93ba8dc78efac2b1
#: ../../ref/contrib/sites.txt:266
msgid "Run :djadmin:`syncdb`."
msgstr ""

# 30dab74a58184b26ac61a74cde05fada
#: ../../ref/contrib/sites.txt:268
msgid ""
"``django.contrib.sites`` registers a :data:`~django.db.models.signals."
"post_syncdb` signal handler which creates a default site named ``example."
"com`` with the domain ``example.com``. This site will also be created after "
"Django creates the test database. To set the correct name and domain for "
"your project, you can use an :doc:`initial data fixture </howto/initial-"
"data>`."
msgstr ""

# 56ba9480beaf4449b9ef8b88b6f32cb9
#: ../../ref/contrib/sites.txt:276
msgid "Caching the current ``Site`` object"
msgstr ""

# b3213c310b7e40bfb65199f81c21b60d
#: ../../ref/contrib/sites.txt:278
msgid ""
"As the current site is stored in the database, each call to ``Site.objects."
"get_current()`` could result in a database query. But Django is a little "
"cleverer than that: on the first request, the current site is cached, and "
"any subsequent call returns the cached data instead of hitting the database."
msgstr ""

# d0ec45dd091b4389a8a135dd81c2e5f6
#: ../../ref/contrib/sites.txt:283
msgid ""
"If for any reason you want to force a database query, you can tell Django to "
"clear the cache using ``Site.objects.clear_cache()``::"
msgstr ""

# d088a683522445bdb9114ed42840d057
#: ../../ref/contrib/sites.txt:301
msgid "The ``CurrentSiteManager``"
msgstr ""

# 35bac8fc352e4fedbde56f662c3b854c
#: ../../ref/contrib/sites.txt:305
msgid ""
"If :class:`~django.contrib.sites.models.Site` plays a key role in your "
"application, consider using the helpful :class:`~django.contrib.sites."
"managers.CurrentSiteManager` in your model(s). It's a model :doc:`manager </"
"topics/db/managers>` that automatically filters its queries to include only "
"objects associated with the current :class:`~django.contrib.sites.models."
"Site`."
msgstr ""

# ad492f5378224f1bbd71785f539240c9
#: ../../ref/contrib/sites.txt:312
msgid ""
"Use :class:`~django.contrib.sites.managers.CurrentSiteManager` by adding it "
"to your model explicitly. For example::"
msgstr ""

# 8fcf70d0aaa740d08cc1791e65b944d5
#: ../../ref/contrib/sites.txt:327
msgid ""
"With this model, ``Photo.objects.all()`` will return all ``Photo`` objects "
"in the database, but ``Photo.on_site.all()`` will return only the ``Photo`` "
"objects associated with the current site, according to the :setting:"
"`SITE_ID` setting."
msgstr ""

# 9f80b91a04c64c04bb8172f9021bff02
#: ../../ref/contrib/sites.txt:331
msgid "Put another way, these two statements are equivalent::"
msgstr ""

# 64d9f83bc7ab4b078d4776361d6e1ad5
#: ../../ref/contrib/sites.txt:336
msgid ""
"How did :class:`~django.contrib.sites.managers.CurrentSiteManager` know "
"which field of ``Photo`` was the :class:`~django.contrib.sites.models.Site`? "
"By default, :class:`~django.contrib.sites.managers.CurrentSiteManager` looks "
"for a either a :class:`~django.db.models.ForeignKey` called ``site`` or a :"
"class:`~django.db.models.ManyToManyField` called ``sites`` to filter on. If "
"you use a field named something other than ``site`` or ``sites`` to identify "
"which :class:`~django.contrib.sites.models.Site` objects your object is "
"related to, then you need to explicitly pass the custom field name as a "
"parameter to :class:`~django.contrib.sites.managers.CurrentSiteManager` on "
"your model. The following model, which has a field called ``publish_on``, "
"demonstrates this::"
msgstr ""

# 11f49134f92f4b13bd695d59e3cb396f
#: ../../ref/contrib/sites.txt:364
msgid ""
"If you attempt to use :class:`~django.contrib.sites.managers."
"CurrentSiteManager` and pass a field name that doesn't exist, Django will "
"raise a ``ValueError``."
msgstr ""

# 50d14bcbf68845b480f1f2880ebe659e
#: ../../ref/contrib/sites.txt:367
msgid ""
"Finally, note that you'll probably want to keep a normal (non-site-specific) "
"``Manager`` on your model, even if you use :class:`~django.contrib.sites."
"managers.CurrentSiteManager`. As explained in the :doc:`manager "
"documentation </topics/db/managers>`, if you define a manager manually, then "
"Django won't create the automatic ``objects = models.Manager()`` manager for "
"you. Also note that certain parts of Django -- namely, the Django admin site "
"and generic views -- use whichever manager is defined *first* in the model, "
"so if you want your admin site to have access to all objects (not just site-"
"specific ones), put ``objects = models.Manager()`` in your model, before you "
"define :class:`~django.contrib.sites.managers.CurrentSiteManager`."
msgstr ""

# 448b2eded383406f8f4d810c34dd5b24
#: ../../ref/contrib/sites.txt:380
msgid "How Django uses the sites framework"
msgstr ""

# 33bac26368394c63bad04f8f99623c31
#: ../../ref/contrib/sites.txt:382
msgid ""
"Although it's not required that you use the sites framework, it's strongly "
"encouraged, because Django takes advantage of it in a few places. Even if "
"your Django installation is powering only a single site, you should take the "
"two seconds to create the site object with your ``domain`` and ``name``, and "
"point to its ID in your :setting:`SITE_ID` setting."
msgstr ""

# 5c526c51a40245e991023617821af28a
#: ../../ref/contrib/sites.txt:388
msgid "Here's how Django uses the sites framework:"
msgstr ""

# e84fb8c363084a53b143157b741a6e6a
#: ../../ref/contrib/sites.txt:390
msgid ""
"In the :mod:`redirects framework <django.contrib.redirects>`, each redirect "
"object is associated with a particular site. When Django searches for a "
"redirect, it takes into account the current site."
msgstr ""

# 9f1b5a46dc234345b35edb1503a65668
#: ../../ref/contrib/sites.txt:394
msgid ""
"In the comments framework, each comment is associated with a particular "
"site. When a comment is posted, its :class:`~django.contrib.sites.models."
"Site` is set to the current site, and when comments are listed via the "
"appropriate template tag, only the comments for the current site are "
"displayed."
msgstr ""

# 899fba552ee541bd8ce541c497c36c20
#: ../../ref/contrib/sites.txt:400
msgid ""
"In the :mod:`flatpages framework <django.contrib.flatpages>`, each flatpage "
"is associated with a particular site. When a flatpage is created, you "
"specify its :class:`~django.contrib.sites.models.Site`, and the :class:"
"`~django.contrib.flatpages.middleware.FlatpageFallbackMiddleware` checks the "
"current site in retrieving flatpages to display."
msgstr ""

# ba70d6e3549448d9a82874210b17e092
#: ../../ref/contrib/sites.txt:406
msgid ""
"In the :mod:`syndication framework <django.contrib.syndication>`, the "
"templates for ``title`` and ``description`` automatically have access to a "
"variable ``{{ site }}``, which is the :class:`~django.contrib.sites.models."
"Site` object representing the current site. Also, the hook for providing "
"item URLs will use the ``domain`` from the current :class:`~django.contrib."
"sites.models.Site` object if you don't specify a fully-qualified domain."
msgstr ""

# 07d7b7e8d4274fdf82a5a791bf0155ba
#: ../../ref/contrib/sites.txt:414
msgid ""
"In the :mod:`authentication framework <django.contrib.auth>`, the :func:"
"`django.contrib.auth.views.login` view passes the current :class:`~django."
"contrib.sites.models.Site` name to the template as ``{{ site_name }}``."
msgstr ""

# 3b46e0e896a24145bc0ae2322b81102a
#: ../../ref/contrib/sites.txt:419
msgid ""
"The shortcut view (``django.views.defaults.shortcut``) uses the domain of "
"the current :class:`~django.contrib.sites.models.Site` object when "
"calculating an object's URL."
msgstr ""

# 3a5d3f6899594a3fb39ea02127d62ffa
#: ../../ref/contrib/sites.txt:423
msgid ""
"In the admin framework, the \"view on site\" link uses the current :class:"
"`~django.contrib.sites.models.Site` to work out the domain for the site that "
"it will redirect to."
msgstr ""

# 16aa8f12a96846debf883cf940b8448c
#: ../../ref/contrib/sites.txt:430
msgid "``RequestSite`` objects"
msgstr ""

# 42390bb66c6942a4870c97e6bc40b318
#: ../../ref/contrib/sites.txt:434
msgid ""
"Some :doc:`django.contrib </ref/contrib/index>` applications take advantage "
"of the sites framework but are architected in a way that doesn't *require* "
"the sites framework to be installed in your database. (Some people don't "
"want to, or just aren't *able* to install the extra database table that the "
"sites framework requires.) For those cases, the framework provides a :class:"
"`~django.contrib.sites.models.RequestSite` class, which can be used as a "
"fallback when the database-backed sites framework is not available."
msgstr ""

# 2353c59e1e86465eaaed2ad033483e80
#: ../../ref/contrib/sites.txt:444
msgid ""
"A class that shares the primary interface of :class:`~django.contrib.sites."
"models.Site` (i.e., it has ``domain`` and ``name`` attributes) but gets its "
"data from a Django :class:`~django.http.HttpRequest` object rather than from "
"a database."
msgstr ""

# b83372a08c4d49838f0d8a05945e73fb
#: ../../ref/contrib/sites.txt:449
msgid "The ``save()`` and ``delete()`` methods raise ``NotImplementedError``."
msgstr ""

# 87078f042f85465986f2ac99990a6dde
#: ../../ref/contrib/sites.txt:453
msgid ""
"Sets the ``name`` and ``domain`` attributes to the value of :meth:`~django."
"http.HttpRequest.get_host`."
msgstr ""

# 891ff5eafd1442feab35e227b3e423c9
#: ../../ref/contrib/sites.txt:457
msgid ""
"A :class:`~django.contrib.sites.models.RequestSite` object has a similar "
"interface to a normal :class:`~django.contrib.sites.models.Site` object, "
"except its :meth:`~django.contrib.sites.models.RequestSite.__init__()` "
"method takes an :class:`~django.http.HttpRequest` object. It's able to "
"deduce the ``domain`` and ``name`` by looking at the request's domain. It "
"has ``save()`` and ``delete()`` methods to match the interface of :class:"
"`~django.contrib.sites.models.Site`, but the methods raise "
"``NotImplementedError``."
msgstr ""
