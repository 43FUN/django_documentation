# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2012.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-02-29 18:30\n"
"PO-Revision-Date: 2012-02-15 15:13\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# fd8b8500c5174516804388c593e16a5f
#: ../../ref/contrib/csrf.txt:3
msgid "Cross Site Request Forgery protection"
msgstr ""

# 0b84eb3669d246b2a7e84f67a6406213
#: ../../ref/contrib/csrf.txt:8
msgid ""
"The CSRF middleware and template tag provides easy-to-use protection against "
"`Cross Site Request Forgeries`_.  This type of attack occurs when a "
"malicious Web site contains a link, a form button or some javascript that is "
"intended to perform some action on your Web site, using the credentials of a "
"logged-in user who visits the malicious site in their browser.  A related "
"type of attack, 'login CSRF', where an attacking site tricks a user's "
"browser into logging into a site with someone else's credentials, is also "
"covered."
msgstr ""

# 7195fbc9e1ea42aea6ee65874631e463
#: ../../ref/contrib/csrf.txt:16
msgid ""
"The first defense against CSRF attacks is to ensure that GET requests (and "
"other 'safe' methods, as defined by 9.1.1 Safe Methods, HTTP 1.1, :rfc:"
"`2616#section-9.1.1`) are side-effect free. Requests via 'unsafe' methods, "
"such as POST, PUT and DELETE, can then be protected by following the steps "
"below."
msgstr ""

# f17f70c68a424cc98b1d1dd5b196a02f
#: ../../ref/contrib/csrf.txt:27
msgid "How to use it"
msgstr ""

# 5aa1bd70cfdb49acac1e51309e84fd80
#: ../../ref/contrib/csrf.txt:29
msgid "To enable CSRF protection for your views, follow these steps:"
msgstr ""

# 838375db5f364490a35fd1623759cdcf
#: ../../ref/contrib/csrf.txt:31
msgid ""
"Add the middleware ``'django.middleware.csrf.CsrfViewMiddleware'`` to your "
"list of middleware classes, :setting:`MIDDLEWARE_CLASSES`.  (It should come "
"before any view middleware that assume that CSRF attacks have been dealt "
"with.)"
msgstr ""

# d0ad7b6c4fca4fe2baa4f9190840fd35
#: ../../ref/contrib/csrf.txt:37
msgid ""
"Alternatively, you can use the decorator :func:`~django.views.decorators."
"csrf.csrf_protect` on particular views you want to protect (see below)."
msgstr ""

# 013967a850fa4c5d825039ac03834d8d
#: ../../ref/contrib/csrf.txt:41
msgid ""
"In any template that uses a POST form, use the :ttag:`csrf_token` tag inside "
"the ``<form>`` element if the form is for an internal URL, e.g.::"
msgstr ""

# b7532e4f38eb4a669a58125f5ef93c83
#: ../../ref/contrib/csrf.txt:46
msgid ""
"This should not be done for POST forms that target external URLs, since that "
"would cause the CSRF token to be leaked, leading to a vulnerability."
msgstr ""

# f05da7ee205447c1869071b625dca66d
#: ../../ref/contrib/csrf.txt:49
msgid ""
"In the corresponding view functions, ensure that the ``'django.core."
"context_processors.csrf'`` context processor is being used. Usually, this "
"can be done in one of two ways:"
msgstr ""

# ca7b13d5ce224a5091beea7501abf488
#: ../../ref/contrib/csrf.txt:53
msgid ""
"Use RequestContext, which always uses ``'django.core.context_processors."
"csrf'`` (no matter what your TEMPLATE_CONTEXT_PROCESSORS setting).  If you "
"are using generic views or contrib apps, you are covered already, since "
"these apps use RequestContext throughout."
msgstr ""

# ee5e3e0e9ae746f2bb3c1d108df7e763
#: ../../ref/contrib/csrf.txt:59
msgid ""
"Manually import and use the processor to generate the CSRF token and add it "
"to the template context. e.g.::"
msgstr ""

# 57240f53491f42bd8a3ab2b8b552b934
#: ../../ref/contrib/csrf.txt:71
msgid ""
"You may want to write your own :func:`~django.shortcuts.render_to_response()"
"` wrapper that takes care of this step for you."
msgstr ""

# 2f29a48b8d2c47efa390c53bc4d189a5
#: ../../ref/contrib/csrf.txt:75
msgid ""
"The utility script ``extras/csrf_migration_helper.py`` can help to automate "
"the finding of code and templates that may need these steps. It contains "
"full help on how to use it."
msgstr ""

# f232c03ab8d142149269de986ef665d2
#: ../../ref/contrib/csrf.txt:82
msgid "AJAX"
msgstr ""

# 5901f5126af2454fa12e1925a2d59764
#: ../../ref/contrib/csrf.txt:84
msgid ""
"While the above method can be used for AJAX POST requests, it has some "
"inconveniences: you have to remember to pass the CSRF token in as POST data "
"with every POST request. For this reason, there is an alternative method: on "
"each XMLHttpRequest, set a custom `X-CSRFToken` header to the value of the "
"CSRF token. This is often easier, because many javascript frameworks provide "
"hooks that allow headers to be set on every request. In jQuery, you can use "
"the ``ajaxSend`` event as follows:"
msgstr ""

# 726f8f47366e4c628238722ef5da3604
#: ../../ref/contrib/csrf.txt:133
msgid ""
"Due to a bug introduced in jQuery 1.5, the example above will not work "
"correctly on that version. Make sure you are running at least jQuery 1.5.1."
msgstr ""

# bd94dc6b222b46bea37f8992f0d9e0eb
#: ../../ref/contrib/csrf.txt:136
msgid ""
"Adding this to a javascript file that is included on your site will ensure "
"that AJAX POST requests that are made via jQuery will not be caught by the "
"CSRF protection."
msgstr ""

# f82ea77996ff429aa0f5810043642fea
#: ../../ref/contrib/csrf.txt:140
msgid ""
"The above code could be simplified by using the `jQuery cookie plugin "
"<http://plugins.jquery.com/project/Cookie>`_ to replace ``getCookie``, and "
"`settings.crossDomain <http://api.jquery.com/jQuery.ajax>`_ in jQuery 1.5 "
"and later to replace ``sameOrigin``."
msgstr ""

# c050e566bc7d4b4784b834afc5218cb2
#: ../../ref/contrib/csrf.txt:145
msgid ""
"In addition, if the CSRF cookie has not been sent to the client by use of :"
"ttag:`csrf_token`, you may need to ensure the client receives the cookie by "
"using :func:`~django.views.decorators.csrf.ensure_csrf_cookie`."
msgstr ""

# 33feaa5541d34b8e985072f4bf8eedff
#: ../../ref/contrib/csrf.txt:150
msgid "Other template engines"
msgstr ""

# 419cc2fb09e240b182b82e17e0d5f6ca
#: ../../ref/contrib/csrf.txt:152
msgid ""
"When using a different template engine than Django's built-in engine, you "
"can set the token in your forms manually after making sure it's available in "
"the template context."
msgstr ""

# 6ac7add28af74d1f9213e8a298522b07
#: ../../ref/contrib/csrf.txt:156
msgid ""
"For example, in the Cheetah template language, your form could contain the "
"following:"
msgstr ""

# 50ba62e67cc242d9aae7beab1dbe4ab2
#: ../../ref/contrib/csrf.txt:165
msgid ""
"You can use JavaScript similar to the :ref:`AJAX code <csrf-ajax>` above to "
"get the value of the CSRF token."
msgstr ""

# 14fcbcd062da4c1d8d5dc130bdc4aa8b
#: ../../ref/contrib/csrf.txt:169
msgid "The decorator method"
msgstr ""

# f654a08ec53d4d8eac92c26099e7300b
#: ../../ref/contrib/csrf.txt:173
msgid ""
"Rather than adding ``CsrfViewMiddleware`` as a blanket protection, you can "
"use the ``csrf_protect`` decorator, which has exactly the same "
"functionality, on particular views that need the protection. It must be used "
"**both** on views that insert the CSRF token in the output, and on those "
"that accept the POST form data. (These are often the same view function, but "
"not always)."
msgstr ""

# 41c96d72eabe4e5abc49956e2189e508
#: ../../ref/contrib/csrf.txt:179
msgid ""
"Use of the decorator by itself is **not recommended**, since if you forget "
"to use it, you will have a security hole. The 'belt and braces' strategy of "
"using both is fine, and will incur minimal overhead."
msgstr ""

# 5f5d800bae5443b59cc286cd503d4b1e
#: ../../ref/contrib/csrf.txt:185
msgid ""
"Decorator that provides the protection of ``CsrfViewMiddleware`` to a view."
msgstr ""

# 9582490c50fa4db28fb4b3a7fd07b9f1
#: ../../ref/contrib/csrf.txt:187
msgid "Usage::"
msgstr ""

# cbaca5259db14d6c811779d9e4c094ae
#: ../../ref/contrib/csrf.txt:199
msgid "Rejected requests"
msgstr ""

# 508d0aa1e6ad4bbaa4f53e3e0292bef0
#: ../../ref/contrib/csrf.txt:201
msgid ""
"By default, a '403 Forbidden' response is sent to the user if an incoming "
"request fails the checks performed by ``CsrfViewMiddleware``.  This should "
"usually only be seen when there is a genuine Cross Site Request Forgery, or "
"when, due to a programming error, the CSRF token has not been included with "
"a POST form."
msgstr ""

# 8fe7a0254a1f4c94b4df40a05367fa35
#: ../../ref/contrib/csrf.txt:207
msgid ""
"The error page, however, is not very friendly, so you may want to provide "
"your own view for handling this condition.  To do this, simply set the :"
"setting:`CSRF_FAILURE_VIEW` setting."
msgstr ""

# ee4c5339f02a48f1bf0ae892c70ce713
#: ../../ref/contrib/csrf.txt:214
msgid "How it works"
msgstr ""

# 0c5c08b90cfc41fc8e0180f6a9c23800
#: ../../ref/contrib/csrf.txt:216
msgid "The CSRF protection is based on the following things:"
msgstr ""

# 34e89bef123443d796964bb1534d3c3c
#: ../../ref/contrib/csrf.txt:218
msgid ""
"A CSRF cookie that is set to a random value (a session independent nonce, as "
"it is called), which other sites will not have access to."
msgstr ""

# c3edc4e970854af1958b33d9b0c013e5
#: ../../ref/contrib/csrf.txt:221
msgid ""
"This cookie is set by ``CsrfViewMiddleware``.  It is meant to be permanent, "
"but since there is no way to set a cookie that never expires, it is sent "
"with every response that has called ``django.middleware.csrf.get_token()`` "
"(the function used internally to retrieve the CSRF token)."
msgstr ""

# 15d288d929bb463097d2ce68b18ec204
#: ../../ref/contrib/csrf.txt:226
msgid ""
"A hidden form field with the name 'csrfmiddlewaretoken' present in all "
"outgoing POST forms.  The value of this field is the value of the CSRF "
"cookie."
msgstr ""

# 54c5e0af63d64022bd56d460aaca6278
#: ../../ref/contrib/csrf.txt:230
msgid "This part is done by the template tag."
msgstr ""

# 184d8fb00b784dcbb49626b7bcb740bc
#: ../../ref/contrib/csrf.txt:232
msgid ""
"For all incoming requests that are not using HTTP GET, HEAD, OPTIONS or "
"TRACE, a CSRF cookie must be present, and the 'csrfmiddlewaretoken' field "
"must be present and correct. If it isn't, the user will get a 403 error."
msgstr ""

# e02df7c1aa394501b51875a63e531cf1
#: ../../ref/contrib/csrf.txt:236
msgid "This check is done by ``CsrfViewMiddleware``."
msgstr ""

# d5750bc06dc74cd2afa2b992dbab76e1
#: ../../ref/contrib/csrf.txt:238
msgid ""
"In addition, for HTTPS requests, strict referer checking is done by "
"``CsrfViewMiddleware``.  This is necessary to address a Man-In-The-Middle "
"attack that is possible under HTTPS when using a session independent nonce, "
"due to the fact that HTTP 'Set-Cookie' headers are (unfortunately) accepted "
"by clients that are talking to a site under HTTPS.  (Referer checking is not "
"done for HTTP requests because the presence of the Referer header is not "
"reliable enough under HTTP.)"
msgstr ""

# 549b4fc53ea34b33b4fc73cda7b6880d
#: ../../ref/contrib/csrf.txt:246
msgid ""
"This ensures that only forms that have originated from your Web site can be "
"used to POST data back."
msgstr ""

# 423f53098e664e3d844befacf0a9469b
#: ../../ref/contrib/csrf.txt:249
msgid ""
"It deliberately ignores GET requests (and other requests that are defined as "
"'safe' by :rfc:`2616`). These requests ought never to have any potentially "
"dangerous side effects , and so a CSRF attack with a GET request ought to be "
"harmless. :rfc:`2616` defines POST, PUT and DELETE as 'unsafe', and all "
"other methods are assumed to be unsafe, for maximum protection."
msgstr ""

# 9d4a61f1ef8e4f1aa5218b5271b54a51
#: ../../ref/contrib/csrf.txt:256
msgid "Caching"
msgstr ""

# 9565bab3964f421aa72d336649ba1521
#: ../../ref/contrib/csrf.txt:258
msgid ""
"If the :ttag:`csrf_token` template tag is used by a template (or the "
"``get_token`` function is called some other way), ``CsrfViewMiddleware`` "
"will add a cookie and a ``Vary: Cookie`` header to the response. This means "
"that the middleware will play well with the cache middleware if it is used "
"as instructed (``UpdateCacheMiddleware`` goes before all other middleware)."
msgstr ""

# b969dde627974ce69b9813d8d88135d6
#: ../../ref/contrib/csrf.txt:264
msgid ""
"However, if you use cache decorators on individual views, the CSRF "
"middleware will not yet have been able to set the Vary header or the CSRF "
"cookie, and the response will be cached without either one. In this case, on "
"any views that will require a CSRF token to be inserted you should use the :"
"func:`django.views.decorators.csrf.csrf_protect` decorator first::"
msgstr ""

# 87373caa67ec4f60b0cc30a06c96b0dd
#: ../../ref/contrib/csrf.txt:280
msgid "Testing"
msgstr ""

# 5fa9d1da3268495ba9e9a8e693e6e232
#: ../../ref/contrib/csrf.txt:282
msgid ""
"The ``CsrfViewMiddleware`` will usually be a big hindrance to testing view "
"functions, due to the need for the CSRF token which must be sent with every "
"POST request.  For this reason, Django's HTTP client for tests has been "
"modified to set a flag on requests which relaxes the middleware and the "
"``csrf_protect`` decorator so that they no longer rejects requests.  In "
"every other respect (e.g. sending cookies etc.), they behave the same."
msgstr ""

# 5a38a4c8d4d14333a51a30d87f1f23f9
#: ../../ref/contrib/csrf.txt:289
msgid ""
"If, for some reason, you *want* the test client to perform CSRF checks, you "
"can create an instance of the test client that enforces CSRF checks::"
msgstr ""

# 5a7c5df138de446e93db27bc3404d3bc
#: ../../ref/contrib/csrf.txt:299
msgid "Limitations"
msgstr ""

# 5231722850d74a31af2d4f75269fe237
#: ../../ref/contrib/csrf.txt:301
msgid ""
"Subdomains within a site will be able to set cookies on the client for the "
"whole domain.  By setting the cookie and using a corresponding token, "
"subdomains will be able to circumvent the CSRF protection.  The only way to "
"avoid this is to ensure that subdomains are controlled by trusted users (or, "
"are at least unable to set cookies).  Note that even without CSRF, there are "
"other vulnerabilities, such as session fixation, that make giving subdomains "
"to untrusted parties a bad idea, and these vulnerabilities cannot easily be "
"fixed with current browsers."
msgstr ""

# 573b3d1d4bcf43328cebf630780f80db
#: ../../ref/contrib/csrf.txt:310
msgid "Edge cases"
msgstr ""

# 304195a4ecc2448bb775168e2cd7c77d
#: ../../ref/contrib/csrf.txt:312
msgid ""
"Certain views can have unusual requirements that mean they don't fit the "
"normal pattern envisaged here. A number of utilities can be useful in these "
"situations. The scenarios they might be needed in are described in the "
"following section."
msgstr ""

# 408270a3d74546d3b253cb965062cb0f
#: ../../ref/contrib/csrf.txt:318
msgid "Utilities"
msgstr ""

# 9be623bdb5594ad5b775e095421830bc
#: ../../ref/contrib/csrf.txt:322
msgid ""
"This decorator marks a view as being exempt from the protection ensured by "
"the middleware. Example::"
msgstr ""

# c2f6da3fac7b4aa6914d4354111af8cc
#: ../../ref/contrib/csrf.txt:333
msgid ""
"Normally the :ttag:`csrf_token` template tag will not work if "
"``CsrfViewMiddleware.process_view`` or an equivalent like ``csrf_protect`` "
"has not run. The view decorator ``requires_csrf_token`` can be used to "
"ensure the template tag does work. This decorator works similarly to "
"``csrf_protect``, but never rejects an incoming request."
msgstr ""

# 62e23e60ec01408a9da1ba5831aa9fb9
#: ../../ref/contrib/csrf.txt:339
msgid "Example::"
msgstr ""

# 6e2204eae6604c0f80bfc3175c2f2ef0
#: ../../ref/contrib/csrf.txt:354
msgid "This decorator forces a view to send the CSRF cookie."
msgstr ""

# 0cadc87fef8a46c59634d538501bc558
#: ../../ref/contrib/csrf.txt:357
msgid "Scenarios"
msgstr ""

# 7104be2cb3364c9fa94f7d937f3a6c0c
#: ../../ref/contrib/csrf.txt:360
msgid "CSRF protection should be disabled for just a few views"
msgstr ""

# faf6e15047594d7e8bc0443e7d784229
#: ../../ref/contrib/csrf.txt:362
msgid "Most views requires CSRF protection, but a few do not."
msgstr ""

# bbceaa9494cb40fdb0a469c0eabc072c
#: ../../ref/contrib/csrf.txt:364
msgid ""
"Solution: rather than disabling the middleware and applying ``csrf_protect`` "
"to all the views that need it, enable the middleware and use :func:`~django."
"views.decorators.csrf.csrf_exempt`."
msgstr ""

# 7339face7df240a9ad584eff88321ed5
#: ../../ref/contrib/csrf.txt:369
msgid "CsrfViewMiddleware.process_view not used"
msgstr ""

# e406f8402a894616b07bb8b4b61f6b8c
#: ../../ref/contrib/csrf.txt:371
msgid ""
"There are cases when ``CsrfViewMiddleware.process_view`` may not have run "
"before your view is run - 404 and 500 handlers, for example - but you still "
"need the CSRF token in a form."
msgstr ""

# 3a76d88675c541b6bec0215f58d91da1
#: ../../ref/contrib/csrf.txt:375
msgid "Solution: use :func:`~django.views.decorators.csrf.requires_csrf_token`"
msgstr ""

# f21d9f721a3544c782a5f0755aa8e24f
#: ../../ref/contrib/csrf.txt:378
msgid "Unprotected view needs the CSRF token"
msgstr ""

# 4f7ef41329a24befb38ed9f1845e363f
#: ../../ref/contrib/csrf.txt:380
msgid ""
"There may be some views that are unprotected and have been exempted by "
"``csrf_exempt``, but still need to include the CSRF token."
msgstr ""

# 0c231c1d7fa548929a432a73011c656d
#: ../../ref/contrib/csrf.txt:383
msgid ""
"Solution: use :func:`~django.views.decorators.csrf.csrf_exempt` followed by :"
"func:`~django.views.decorators.csrf.requires_csrf_token`. (i.e. "
"``requires_csrf_token`` should be the innermost decorator)."
msgstr ""

# 332d32bb12a347d3ab100736ae3b5167
#: ../../ref/contrib/csrf.txt:388
msgid "View needs protection for one path"
msgstr ""

# 195639cb725648029b8d0176714d10f5
#: ../../ref/contrib/csrf.txt:390
msgid ""
"A view needs CRSF protection under one set of conditions only, and mustn't "
"have it for the rest of the time."
msgstr ""

# 2e3242c86cd24439b552cc0fa42792d8
#: ../../ref/contrib/csrf.txt:393
msgid ""
"Solution: use :func:`~django.views.decorators.csrf.csrf_exempt` for the "
"whole view function, and :func:`~django.views.decorators.csrf.csrf_protect` "
"for the path within it that needs protection. Example::"
msgstr ""

# 17ea45a7afd646968eaac9c7562983ea
#: ../../ref/contrib/csrf.txt:412
msgid "Page uses AJAX without any HTML form"
msgstr ""

# c5adda6301d94e36a3dd8a037007be6b
#: ../../ref/contrib/csrf.txt:414
msgid ""
"A page makes a POST request via AJAX, and the page does not have an HTML "
"form with a :ttag:`csrf_token` that would cause the required CSRF cookie to "
"be sent."
msgstr ""

# 3ecbdb7a7faa4cf28b58eef2bdfefd14
#: ../../ref/contrib/csrf.txt:417
msgid ""
"Solution: use :func:`~django.views.decorators.csrf.ensure_csrf_cookie` on "
"the view that sends the page."
msgstr ""

# 4ee2420d0c06436fb249ee3e47a6fc5e
#: ../../ref/contrib/csrf.txt:421
msgid "Contrib and reusable apps"
msgstr ""

# 7d50932d0a6f4917b541700a2c8756c4
#: ../../ref/contrib/csrf.txt:423
msgid ""
"Because it is possible for the developer to turn off the "
"``CsrfViewMiddleware``, all relevant views in contrib apps use the "
"``csrf_protect`` decorator to ensure the security of these applications "
"against CSRF.  It is recommended that the developers of other reusable apps "
"that want the same guarantees also use the ``csrf_protect`` decorator on "
"their views."
msgstr ""

# 68343fb2ad7a434093855e38e4a271d8
#: ../../ref/contrib/csrf.txt:430
msgid "Settings"
msgstr ""

# ec95d192b5784d3390bd60c6242c3101
#: ../../ref/contrib/csrf.txt:432
msgid "A number of settings can be used to control Django's CSRF behavior."
msgstr ""

# 8803cfbe141d47ddaec03421dd98a201
#: ../../ref/contrib/csrf.txt:435
msgid "CSRF_COOKIE_DOMAIN"
msgstr ""

# 242577b5010b4b2a9a3ae794dd00bfc3
#: ../../ref/contrib/csrf.txt:439
msgid "Default: ``None``"
msgstr ""

# 3e6e7eff98414ed6a59331b674d5c7f2
#: ../../ref/contrib/csrf.txt:441
msgid ""
"The domain to be used when setting the CSRF cookie.  This can be useful for "
"easily allowing cross-subdomain requests to be excluded from the normal "
"cross site request forgery protection.  It should be set to a string such as "
"``\".lawrence.com\"`` to allow a POST request from a form on one subdomain "
"to be accepted by a view served from another subdomain."
msgstr ""

# 8ff17232f73940e6a92e4d559d719ba4
#: ../../ref/contrib/csrf.txt:447
msgid ""
"Please note that, with or without use of this setting, this CSRF protection "
"mechanism is not safe against cross-subdomain attacks -- see `Limitations`_."
msgstr ""

# f1d6bdddcdbe4a768be85df8ee219d82
#: ../../ref/contrib/csrf.txt:451
msgid "CSRF_COOKIE_NAME"
msgstr ""

# e8de36dac4844b63babb4387320323f9
#: ../../ref/contrib/csrf.txt:455
msgid "Default: ``'csrftoken'``"
msgstr ""

# a6fe7d501f6e44b0b76f1bf1eb24e201
#: ../../ref/contrib/csrf.txt:457
msgid ""
"The name of the cookie to use for the CSRF authentication token. This can be "
"whatever you want."
msgstr ""

# 8d9b32e139c341ec90bf5b14e2f43655
#: ../../ref/contrib/csrf.txt:461
msgid "CSRF_COOKIE_PATH"
msgstr ""

# 4f654036960f4b0186deb03465ac3376
#: ../../ref/contrib/csrf.txt:465
msgid "Default: ``'/'``"
msgstr ""

# 04b1c040b0574243b4f3be93dc8da5cc
#: ../../ref/contrib/csrf.txt:467
msgid ""
"The path set on the CSRF cookie. This should either match the URL path of "
"your Django installation or be a parent of that path."
msgstr ""

# 3c7d735591cf479f984a2502e7250066
#: ../../ref/contrib/csrf.txt:470
msgid ""
"This is useful if you have multiple Django instances running under the same "
"hostname. They can use different cookie paths, and each instance will only "
"see its own CSRF cookie."
msgstr ""

# 8b4c06f5deed4a308b48d7f0579a63fa
#: ../../ref/contrib/csrf.txt:475
msgid "CSRF_COOKIE_SECURE"
msgstr ""

# be237d01bd6a4f278af7fffe3987f813
#: ../../ref/contrib/csrf.txt:479
msgid "Default: ``False``"
msgstr ""

# 89e16d191d0a40bba7db6a06ef38de7c
#: ../../ref/contrib/csrf.txt:481
msgid ""
"Whether to use a secure cookie for the CSRF cookie. If this is set to "
"``True``, the cookie will be marked as \"secure,\" which means browsers may "
"ensure that the cookie is only sent under an HTTPS connection."
msgstr ""

# e8318d7393ff4b9a9dfa2909827d1c11
#: ../../ref/contrib/csrf.txt:486
msgid "CSRF_FAILURE_VIEW"
msgstr ""

# 06f58ff2f4344108bf1d33dac2725676
#: ../../ref/contrib/csrf.txt:490
msgid "Default: ``'django.views.csrf.csrf_failure'``"
msgstr ""

# e2c880712ef349e1bd0b5ee05552125e
#: ../../ref/contrib/csrf.txt:492
msgid ""
"A dotted path to the view function to be used when an incoming request is "
"rejected by the CSRF protection.  The function should have this signature::"
msgstr ""

# 10250581b42643a5a602638234fc5b5f
#: ../../ref/contrib/csrf.txt:497
msgid ""
"where ``reason`` is a short message (intended for developers or logging, not "
"for end users) indicating the reason the request was rejected."
msgstr ""
