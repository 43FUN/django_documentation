# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2012.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-02-15 15:13\n"
"PO-Revision-Date: 2012-02-15 15:13\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# f4796157ec63430680be01b0edbdbcba
#: ../../ref/contrib/comments/example.txt:5
msgid "Example of using the in-built comments app"
msgstr ""

# e9be7b86f26b4665bc9a4cc72454a48e
#: ../../ref/contrib/comments/example.txt:7
msgid ""
"Follow the first three steps of the quick start guide in the :doc:"
"`documentation </ref/contrib/comments/index>`."
msgstr ""

# cdbcd87e8d1f45b396f67fde0e6539fb
#: ../../ref/contrib/comments/example.txt:10
msgid ""
"Now suppose, you have an app (``blog``) with a model (``Post``) to which you "
"want to attach comments. Let us also suppose that you have a template called "
"``blog_detail.html`` where you want to display the comments list and comment "
"form."
msgstr ""

# dd05aed5fddc4fb28bab180cf4cfbf30
#: ../../ref/contrib/comments/example.txt:16
msgid "Template"
msgstr ""

# 4101336be9004d1c8dede85913654a11
#: ../../ref/contrib/comments/example.txt:18
msgid ""
"First, we should load the ``comment`` template tags in the ``blog_detail."
"html`` so that we can use it's functionality. So just like all other custom "
"template tag libraries::"
msgstr ""

# a9ca5dc2dc0e4c03a0bbc22071b9a5ff
#: ../../ref/contrib/comments/example.txt:24
msgid ""
"Next, let us add the number of comments attached to the particular model "
"instance of ``Post``. For this we assume that a context variable "
"``object_pk`` is present which gives the ``id`` of the instance of ``Post``."
msgstr ""

# 85a271b6a56546479e93398dea68d984
#: ../../ref/contrib/comments/example.txt:29
msgid "The usage of the :ttag:`get_comment_count` tag is like below::"
msgstr ""

# 7d5e28a3fc274f4b992e7a3d7e446ef7
#: ../../ref/contrib/comments/example.txt:34
msgid ""
"If you have the instance (say ``entry``) of the model (``Post``) available "
"in the context, then you can refer to it directly::"
msgstr ""

# 477fe8945e214e01bc88066702518217
#: ../../ref/contrib/comments/example.txt:42
msgid ""
"Next, we can use the :ttag:`render_comment_list` tag, to render all comments "
"to the given instance (``entry``) by using the ``comments/list.html`` "
"template::"
msgstr ""

# 3d23f0f0afb04e0e83b645fcf3fc7664
#: ../../ref/contrib/comments/example.txt:47
msgid ""
"Django will will look for the ``list.html`` under the following directories "
"(for our example)::"
msgstr ""

# 7eb5fca987134eba9066ea2122f49366
#: ../../ref/contrib/comments/example.txt:54
msgid ""
"To get a list of comments, we make use of the :ttag:`get_comment_list` tag. "
"This tag's usage is very similar to the :ttag:`get_comment_count` tag. We "
"need to remember that the :ttag:`get_comment_list` returns a list of "
"comments and hence we will have to iterate through them to display them::"
msgstr ""

# 63d37c1f3c4e4a6980b5bda5d02fa15e
#: ../../ref/contrib/comments/example.txt:67
msgid ""
"Finally, we display the comment form, enabling users to enter their "
"comments. There are two ways of doing so. The first is when you want to "
"display the comments template available under your ``comments/form.html``. "
"The other method gives you a chance to customize the form."
msgstr ""

# c535bd47ce3b4a578338722f1d3f08d6
#: ../../ref/contrib/comments/example.txt:72
msgid ""
"The first method makes use of the :ttag:`render_comment_form` tag. It's "
"usage too is similar to the other three tags we have discussed above::"
msgstr ""

# bbdeab1797334dde9174e341f605f784
#: ../../ref/contrib/comments/example.txt:77
msgid ""
"It looks for the ``form.html`` under the following directories (for our "
"example)::"
msgstr ""

# c3ee46e3d9344772bfdd019827f37308
#: ../../ref/contrib/comments/example.txt:84
msgid ""
"Since we customize the form in the second method, we make use of another tag "
"called :ttag:`comment_form_target`. This tag on rendering gives the URL "
"where the comment form is posted. Without any :doc:`customization </ref/"
"contrib/comments/custom>`, :ttag:`comment_form_target` evaluates to ``/"
"comments/post/``. We use this tag in the form's ``action`` attribute."
msgstr ""

# bc66b6a668eb41348516e330e8eb4b1c
#: ../../ref/contrib/comments/example.txt:90
msgid ""
"The :ttag:`get_comment_form` tag renders a ``form`` for a model instance by "
"creating a context variable. One can iterate over the ``form`` object to get "
"individual fields. This gives you fine-grain control over the form::"
msgstr ""

# f6325729ae0b43bc928e25524b365a21
#: ../../ref/contrib/comments/example.txt:100
msgid "But let's look at a simple example::"
msgstr ""

# 5e12f1f5a54649d5be6259e3e1c31ea3
#: ../../ref/contrib/comments/example.txt:119
msgid "Flagging"
msgstr ""

# 384c1cb218fe46c3a363b839e49bcc7c
#: ../../ref/contrib/comments/example.txt:121
msgid ""
"If you want your users to be able to flag comments (say for profanity), you "
"can just direct them (by placing a link in your comment list) to ``/flag/"
"{{ comment.id }}/``. Similarly, a user with requisite permissions (``\"Can "
"moderate comments\"``) can approve and delete comments. This can also be "
"done through the ``admin`` as you'll see later. You might also want to "
"customize the following templates:"
msgstr ""

# bf2b40ec27d24881aa49ca219c8b6bd2
#: ../../ref/contrib/comments/example.txt:128
msgid "``flag.html``"
msgstr ""

# 7844e19bd2324eaf9dece798ab594f59
#: ../../ref/contrib/comments/example.txt:129
msgid "``flagged.html``"
msgstr ""

# ac51a3373f64417bb0b78fc84436dc51
#: ../../ref/contrib/comments/example.txt:130
msgid "``approve.html``"
msgstr ""

# 4d84c14207154be8b3e1a10a49553b56
#: ../../ref/contrib/comments/example.txt:131
msgid "``approved.html``"
msgstr ""

# dfcaed3a60f948d98a4b7b55825f1613
#: ../../ref/contrib/comments/example.txt:132
msgid "``delete.html``"
msgstr ""

# c4e5fe98c4284394a840d4b726c728f6
#: ../../ref/contrib/comments/example.txt:133
msgid "``deleted.html``"
msgstr ""

# d1269517c38a4aa181773dffb852438a
#: ../../ref/contrib/comments/example.txt:135
msgid "found under the directory structure we saw for ``form.html``."
msgstr ""

# 7d1f8e8c9e9048c78e2233fca7d4963d
#: ../../ref/contrib/comments/example.txt:138
msgid "Feeds"
msgstr ""

# 1269ae9232a84aa0ab1245d65f2f7f34
#: ../../ref/contrib/comments/example.txt:140
msgid ""
"Suppose you want to export a :doc:`feed </ref/contrib/syndication>` of the "
"latest comments, you can use the in-built :class:`LatestCommentFeed`. Just "
"enable it in your project's ``urls.py``:"
msgstr ""

# a2ff3670fe5043e687f58b89ac16c5b8
#: ../../ref/contrib/comments/example.txt:155
msgid ""
"Now you should have the latest comment feeds being served off ``/feeds/"
"latest/``."
msgstr ""

# 0febc35a6a2048c39ae918f81b82cbe9
#: ../../ref/contrib/comments/example.txt:159
msgid ""
"Prior to Django 1.3, the LatestCommentFeed was deployed using the "
"syndication feed view:"
msgstr ""

# 5bde4b658098425899a622c459654a0f
#: ../../ref/contrib/comments/example.txt:180
msgid "Moderation"
msgstr ""

# b9ef2f3715cb4dc399d245c2be79793e
#: ../../ref/contrib/comments/example.txt:182
msgid ""
"Now that we have the comments framework working, we might want to have some "
"moderation setup to administer the comments. The comments framework comes in-"
"built with :doc:`generic comment moderation </ref/contrib/comments/"
"moderation>`. The comment moderation has the following features (all of "
"which or only certain can be enabled):"
msgstr ""

# 27e439aac16c468ca6c1b7c25dee038e
#: ../../ref/contrib/comments/example.txt:188
msgid "Enable comments for a particular model instance."
msgstr ""

# c0b102377ca54b18b5535b8c890d3e21
#: ../../ref/contrib/comments/example.txt:189
msgid "Close comments after a particular (user-defined) number of days."
msgstr ""

# 175e0e84a8574e139d02c604459868a7
#: ../../ref/contrib/comments/example.txt:190
msgid "Email new comments to the site-staff."
msgstr ""

# 966487562ed8429fb98ab970a236ed8c
#: ../../ref/contrib/comments/example.txt:192
msgid ""
"To enable comment moderation, we subclass the :class:`CommentModerator` and "
"register it with the moderation features we want. Let us suppose we want to "
"close comments after 7 days of posting and also send out an email to the "
"site staff. In ``blog/models.py``, we register a comment moderator in the "
"following way:"
msgstr ""

# 696f83659494483586b3bb0c5187f36a
#: ../../ref/contrib/comments/example.txt:216
msgid ""
"The generic comment moderation also has the facility to remove comments. "
"These comments can then be moderated by any user who has access to the "
"``admin`` site and the ``Can moderate comments`` permission (can be set "
"under the ``Users`` page in the ``admin``)."
msgstr ""

# 759948ee8bd64890ab0ba9c3e4d0522a
#: ../../ref/contrib/comments/example.txt:221
msgid ""
"The moderator can ``Flag``, ``Approve`` or ``Remove`` comments using the "
"``Action`` drop-down in the ``admin`` under the ``Comments`` page."
msgstr ""

# e0d8dcc9ef07462193004d28e46fdfd9
#: ../../ref/contrib/comments/example.txt:226
msgid ""
"Only a super-user will be able to delete comments from the database. "
"``Remove Comments`` only sets the ``is_public`` attribute to ``False``."
msgstr ""
