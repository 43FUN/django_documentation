# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2012.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-02-27 00:21\n"
"PO-Revision-Date: 2012-02-15 15:13\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# 91f2c09c5e7440cc85073e9ef26d9e64
#: ../../ref/contrib/contenttypes.txt:3
msgid "The contenttypes framework"
msgstr ""

# 2c14abe9b02d45a6b2a668317ff8ebd0
#: ../../ref/contrib/contenttypes.txt:8
msgid ""
"Django includes a :mod:`~django.contrib.contenttypes` application that can "
"track all of the models installed in your Django-powered project, providing "
"a high-level, generic interface for working with your models."
msgstr ""

# 599140c6a2224d1ab24fec29de4854e5
#: ../../ref/contrib/contenttypes.txt:13
msgid "Overview"
msgstr ""

# 079da12b7f38479eae83474716e7a835
#: ../../ref/contrib/contenttypes.txt:15
msgid ""
"At the heart of the contenttypes application is the :class:`~django.contrib."
"contenttypes.models.ContentType` model, which lives at ``django.contrib."
"contenttypes.models.ContentType``. Instances of :class:`~django.contrib."
"contenttypes.models.ContentType` represent and store information about the "
"models installed in your project, and new instances of :class:`~django."
"contrib.contenttypes.models.ContentType` are automatically created whenever "
"new models are installed."
msgstr ""

# bd6aca470da845718d9f60dd2392ca0c
#: ../../ref/contrib/contenttypes.txt:23
msgid ""
"Instances of :class:`~django.contrib.contenttypes.models.ContentType` have "
"methods for returning the model classes they represent and for querying "
"objects from those models. :class:`~django.contrib.contenttypes.models."
"ContentType` also has a :ref:`custom manager <custom-managers>` that adds "
"methods for working with :class:`~django.contrib.contenttypes.models."
"ContentType` and for obtaining instances of :class:`~django.contrib."
"contenttypes.models.ContentType` for a particular model."
msgstr ""

# 006ba2fd5e6c42609c889239ee1259cd
#: ../../ref/contrib/contenttypes.txt:31
msgid ""
"Relations between your models and :class:`~django.contrib.contenttypes."
"models.ContentType` can also be used to enable \"generic\" relationships "
"between an instance of one of your models and instances of any model you "
"have installed."
msgstr ""

# dc22997ca6214f129e790192841e7794
#: ../../ref/contrib/contenttypes.txt:37
msgid "Installing the contenttypes framework"
msgstr ""

# f8eaffa7adf44545b65069aba64ed1a3
#: ../../ref/contrib/contenttypes.txt:39
msgid ""
"The contenttypes framework is included in the default :setting:"
"`INSTALLED_APPS` list created by ``django-admin.py startproject``, but if "
"you've removed it or if you manually set up your :setting:`INSTALLED_APPS` "
"list, you can enable it by adding ``'django.contrib.contenttypes'`` to your :"
"setting:`INSTALLED_APPS` setting."
msgstr ""

# 0492e79a4c0548f09089b28f79454500
#: ../../ref/contrib/contenttypes.txt:45
msgid ""
"It's generally a good idea to have the contenttypes framework installed; "
"several of Django's other bundled applications require it:"
msgstr ""

# af475b30542e43c18b34797870eec172
#: ../../ref/contrib/contenttypes.txt:48
msgid ""
"The admin application uses it to log the history of each object added or "
"changed through the admin interface."
msgstr ""

# f6e766cb603e4fcf8e8773ce07de1910
#: ../../ref/contrib/contenttypes.txt:51
msgid ""
"Django's :mod:`authentication framework <django.contrib.auth>` uses it to "
"tie user permissions to specific models."
msgstr ""

# 4b64f0c90ee547b4bf51f8fff4e85e3f
#: ../../ref/contrib/contenttypes.txt:54
msgid ""
"Django's comments system (:mod:`django.contrib.comments`) uses it to \"attach"
"\" comments to any installed model."
msgstr ""

# 534a223aaa0a452396077f118dafeeb9
#: ../../ref/contrib/contenttypes.txt:60
msgid "The ``ContentType`` model"
msgstr ""

# 3e9a90daea75445e9776b4d8e0a9546e
#: ../../ref/contrib/contenttypes.txt:64
msgid ""
"Each instance of :class:`~django.contrib.contenttypes.models.ContentType` "
"has three fields which, taken together, uniquely describe an installed model:"
msgstr ""

# bfa1107e8c9245b999fb3c6ee24e01ff
#: ../../ref/contrib/contenttypes.txt:70
msgid ""
"The name of the application the model is part of. This is taken from the :"
"attr:`app_label` attribute of the model, and includes only the *last* part "
"of the application's Python import path; \"django.contrib.contenttypes\", "
"for example, becomes an :attr:`app_label` of \"contenttypes\"."
msgstr ""

# f3e6e5847c1f4cc68af529012ba1a1f7
#: ../../ref/contrib/contenttypes.txt:78
msgid "The name of the model class."
msgstr ""

# 6dadd49c1f3d441d84fa1f19ef928d5b
#: ../../ref/contrib/contenttypes.txt:82
msgid ""
"The human-readable name of the model. This is taken from the :attr:"
"`verbose_name <django.db.models.Field.verbose_name>` attribute of the model."
msgstr ""

# 800682d5ed77467f9a8895724b775f5c
#: ../../ref/contrib/contenttypes.txt:86
msgid ""
"Let's look at an example to see how this works. If you already have the :mod:"
"`~django.contrib.contenttypes` application installed, and then add :mod:`the "
"sites application <django.contrib.sites>` to your :setting:`INSTALLED_APPS` "
"setting and run ``manage.py syncdb`` to install it, the model :class:`django."
"contrib.sites.models.Site` will be installed into your database. Along with "
"it a new instance of :class:`~django.contrib.contenttypes.models."
"ContentType` will be created with the following values:"
msgstr ""

# dea5917c959c45599e35c5bba5b2e9ae
#: ../../ref/contrib/contenttypes.txt:95
msgid ""
":attr:`~django.contrib.contenttypes.models.ContentType.app_label` will be "
"set to ``'sites'`` (the last part of the Python path \"django.contrib.sites"
"\")."
msgstr ""

# 87838eb06f0041d6af795d5f9ed1d3c0
#: ../../ref/contrib/contenttypes.txt:99
msgid ""
":attr:`~django.contrib.contenttypes.models.ContentType.model` will be set to "
"``'site'``."
msgstr ""

# 085c84d77be547b3b637821d7bb18581
#: ../../ref/contrib/contenttypes.txt:102
msgid ""
":attr:`~django.contrib.contenttypes.models.ContentType.name` will be set to "
"``'site'``."
msgstr ""

# 97f9a6a2535e415c949a4a7e8c68495d
#: ../../ref/contrib/contenttypes.txt:108
msgid "Methods on ``ContentType`` instances"
msgstr ""

# d1e2bed065724885918ddc8fa4a7f144
#: ../../ref/contrib/contenttypes.txt:110
msgid ""
"Each :class:`~django.contrib.contenttypes.models.ContentType` instance has "
"methods that allow you to get from a :class:`~django.contrib.contenttypes."
"models.ContentType` instance to the model it represents, or to retrieve "
"objects from that model:"
msgstr ""

# 5ad40ab99b424e13b8b432bcfa605a8d
#: ../../ref/contrib/contenttypes.txt:117
msgid ""
"Takes a set of valid :ref:`lookup arguments <field-lookups-intro>` for the "
"model the :class:`~django.contrib.contenttypes.models.ContentType` "
"represents, and does :meth:`a get() lookup <django.db.models.query.QuerySet."
"get>` on that model, returning the corresponding object."
msgstr ""

# 13a283caa71a4463a827301d123d535f
#: ../../ref/contrib/contenttypes.txt:125
msgid ""
"Returns the model class represented by this :class:`~django.contrib."
"contenttypes.models.ContentType` instance."
msgstr ""

# 8b1b323d94254eb8a37c28b39b953adf
#: ../../ref/contrib/contenttypes.txt:128
msgid ""
"For example, we could look up the :class:`~django.contrib.contenttypes."
"models.ContentType` for the :class:`~django.contrib.auth.models.User` model::"
msgstr ""

# a2f3e51c42984ed099a81717f9963b15
#: ../../ref/contrib/contenttypes.txt:137
msgid ""
"And then use it to query for a particular :class:`~django.contrib.auth."
"models.User`, or to get access to the ``User`` model class::"
msgstr ""

# 02ae6b09e72447879317680472e085be
#: ../../ref/contrib/contenttypes.txt:146
msgid ""
"Together, :meth:`~django.contrib.contenttypes.models.ContentType."
"get_object_for_this_type` and :meth:`~django.contrib.contenttypes.models."
"ContentType.model_class` enable two extremely important use cases:"
msgstr ""

# 94fcf19115e843f8b9cd5b074dc3d836
#: ../../ref/contrib/contenttypes.txt:151
msgid ""
"Using these methods, you can write high-level generic code that performs "
"queries on any installed model -- instead of importing and using a single "
"specific model class, you can pass an ``app_label`` and ``model`` into a :"
"class:`~django.contrib.contenttypes.models.ContentType` lookup at runtime, "
"and then work with the model class or retrieve objects from it."
msgstr ""

# 71656c76f0934b85be10ad0caf60d22b
#: ../../ref/contrib/contenttypes.txt:158
msgid ""
"You can relate another model to :class:`~django.contrib.contenttypes.models."
"ContentType` as a way of tying instances of it to particular model classes, "
"and use these methods to get access to those model classes."
msgstr ""

# 14bcd38241c344a39cbf5ff6ad24551c
#: ../../ref/contrib/contenttypes.txt:163
msgid ""
"Several of Django's bundled applications make use of the latter technique. "
"For example, :class:`the permissions system <django.contrib.auth.models."
"Permission>` in Django's authentication framework uses a :class:`~django."
"contrib.auth.models.Permission` model with a foreign key to :class:`~django."
"contrib.contenttypes.models.ContentType`; this lets :class:`~django.contrib."
"auth.models.Permission` represent concepts like \"can add blog entry\" or "
"\"can delete news story\"."
msgstr ""

# 0a77d8ee31e6477f854e404a83266b2a
#: ../../ref/contrib/contenttypes.txt:173
msgid "The ``ContentTypeManager``"
msgstr ""

# 03039e6e43344154ace1e0883575accb
#: ../../ref/contrib/contenttypes.txt:177
msgid ""
":class:`~django.contrib.contenttypes.models.ContentType` also has a custom "
"manager, :class:`~django.contrib.contenttypes.models.ContentTypeManager`, "
"which adds the following methods:"
msgstr ""

# f44e085a36bd4bdf9954ccb6086f5d08
#: ../../ref/contrib/contenttypes.txt:183
msgid ""
"Clears an internal cache used by :class:`~django.contrib.contenttypes.models."
"ContentType` to keep track of models for which it has created :class:"
"`~django.contrib.contenttypes.models.ContentType` instances. You probably "
"won't ever need to call this method yourself; Django will call it "
"automatically when it's needed."
msgstr ""

# 7f6994c5b78c4d1c83dfd628c7900e22
#: ../../ref/contrib/contenttypes.txt:192
msgid ""
"Lookup a :class:`~django.contrib.contenttypes.models.ContentType` by ID. "
"Since this method uses the same shared cache as :meth:`~django.contrib."
"contenttypes.models.ContentTypeManager.get_for_model`, it's preferred to use "
"this method over the usual ``ContentType.objects.get(pk=id)``"
msgstr ""

# b3846d5c1b1945c1806163a8eae6ca72
#: ../../ref/contrib/contenttypes.txt:200
msgid ""
"Takes either a model class or an instance of a model, and returns the :class:"
"`~django.contrib.contenttypes.models.ContentType` instance representing that "
"model."
msgstr ""

# 746fd992b5174587b81d0c9d793d0bda
#: ../../ref/contrib/contenttypes.txt:206
msgid ""
"Takes a variadic number of model classes, and returns a dictionary mapping "
"the model classes to the :class:`~django.contrib.contenttypes.models."
"ContentType` instances representing them."
msgstr ""

# 1cec42baac0b4352bbb804489d2dbaaa
#: ../../ref/contrib/contenttypes.txt:213
msgid ""
"Returns the :class:`~django.contrib.contenttypes.models.ContentType` "
"instance uniquely identified by the given application label and model name. "
"The primary purpose of this method is to allow :class:`~django.contrib."
"contenttypes.models.ContentType` objects to be referenced via a :ref:"
"`natural key<topics-serialization-natural-keys>` during deserialization."
msgstr ""

# c76b1a724db744c58d5a42f458c8e4c2
#: ../../ref/contrib/contenttypes.txt:220
msgid ""
"The :meth:`~ContentTypeManager.get_for_model()` method is especially useful "
"when you know you need to work with a :class:`ContentType <django.contrib."
"contenttypes.models.ContentType>` but don't want to go to the trouble of "
"obtaining the model's metadata to perform a manual lookup::"
msgstr ""

# d68684b8f9b04461acbbe1d241e7444f
#: ../../ref/contrib/contenttypes.txt:237
msgid ""
"Prior to Django 1.5, :meth:`~django.contrib.contenttypes.models."
"ContentTypeManager.get_for_model` and :meth:`~django.contrib.contenttypes."
"models.ContentTypeManager.get_for_models` always returned the :class:"
"`~django.contrib.contenttypes.models.ContentType` associated with the "
"concrete model of the specified one(s). That means there was no way to "
"retrieve the :class:`~django.contrib.contenttypes.models.ContentType` of a "
"proxy model using those methods. As of Django 1.5 you can now pass a boolean "
"flag – ``for_concrete_model`` and ``for_concrete_models`` respectively – to "
"specify wether or not you want to retrieve the :class:`~django.contrib."
"contenttypes.models.ContentType` for the concrete or direct model."
msgstr ""

# 412196fce96143ba9bb7d99b53b127a4
#: ../../ref/contrib/contenttypes.txt:251
msgid "Generic relations"
msgstr ""

# 53a3a3133ef3443fb0c097f71b9b1341
#: ../../ref/contrib/contenttypes.txt:253
msgid ""
"Adding a foreign key from one of your own models to :class:`~django.contrib."
"contenttypes.models.ContentType` allows your model to effectively tie itself "
"to another model class, as in the example of the :class:`~django.contrib."
"auth.models.Permission` model above. But it's possible to go one step "
"further and use :class:`~django.contrib.contenttypes.models.ContentType` to "
"enable truly generic (sometimes called \"polymorphic\") relationships "
"between models."
msgstr ""

# 1788c3c02ac2491686f0db33450f8bc8
#: ../../ref/contrib/contenttypes.txt:261
msgid "A simple example is a tagging system, which might look like this::"
msgstr ""

# df84598472a0406f8911f0ec0dcdd84f
#: ../../ref/contrib/contenttypes.txt:276
msgid ""
"A normal :class:`~django.db.models.ForeignKey` can only \"point to\" one "
"other model, which means that if the ``TaggedItem`` model used a :class:"
"`~django.db.models.ForeignKey` it would have to choose one and only one "
"model to store tags for. The contenttypes application provides a special "
"field type (``GenericForeignKey``) which works around this and allows the "
"relationship to be with any model:"
msgstr ""

# 2cef3b75b18a47779340663c6a3cd0a0
#: ../../ref/contrib/contenttypes.txt:286
msgid ""
"There are three parts to setting up a :class:`~django.contrib.contenttypes."
"generic.GenericForeignKey`:"
msgstr ""

# d20dd6083d6f47f9be98d85b46b47b13
#: ../../ref/contrib/contenttypes.txt:289
msgid ""
"Give your model a :class:`~django.db.models.ForeignKey` to :class:`~django."
"contrib.contenttypes.models.ContentType`. The usual name for this field is "
"\"content_type\"."
msgstr ""

# b27f2459683b4c9ca10e24b869b3c84b
#: ../../ref/contrib/contenttypes.txt:293
msgid ""
"Give your model a field that can store primary key values from the models "
"you'll be relating to. For most models, this means a :class:`~django.db."
"models.PositiveIntegerField`. The usual name for this field is \"object_id\"."
msgstr ""

# df4263a031fe4a7e9137db231f98c103
#: ../../ref/contrib/contenttypes.txt:298
msgid ""
"Give your model a :class:`~django.contrib.contenttypes.generic."
"GenericForeignKey`, and pass it the names of the two fields described above. "
"If these fields are named \"content_type\" and \"object_id\", you can omit "
"this -- those are the default field names :class:`~django.contrib."
"contenttypes.generic.GenericForeignKey` will look for."
msgstr ""

# 1b2af1f608734cb088e1baba68ad168b
#: ../../ref/contrib/contenttypes.txt:308
msgid ""
"The \"object_id\" field doesn't have to be the same type as the primary key "
"fields on the related models, but their primary key values must be coercible "
"to the same type as the \"object_id\" field by its :meth:`~django.db.models."
"Field.get_db_prep_value` method."
msgstr ""

# 2c31082624a84c93bc7940020fd66ad9
#: ../../ref/contrib/contenttypes.txt:313
msgid ""
"For example, if you want to allow generic relations to models with either :"
"class:`~django.db.models.IntegerField` or :class:`~django.db.models."
"CharField` primary key fields, you can use :class:`~django.db.models."
"CharField` for the \"object_id\" field on your model since integers can be "
"coerced to strings by :meth:`~django.db.models.Field.get_db_prep_value`."
msgstr ""

# f6f1493e1187427f85f967d66651f038
#: ../../ref/contrib/contenttypes.txt:320
msgid ""
"For maximum flexibility you can use a :class:`~django.db.models.TextField` "
"which doesn't have a maximum length defined, however this may incur "
"significant performance penalties depending on your database backend."
msgstr ""

# 33b84b4ebc664521b03f3cae6ccfb001
#: ../../ref/contrib/contenttypes.txt:325
msgid ""
"There is no one-size-fits-all solution for which field type is best. You "
"should evaluate the models you expect to be pointing to and determine which "
"solution will be most effective for your use case."
msgstr ""

# 70fc4a6975e74ccf90ffec2156fb46bc
#: ../../ref/contrib/contenttypes.txt:331
msgid ""
"If you're serializing data (for example, when generating :class:`~django."
"test.TestCase.fixtures`) from a model that implements generic relations, you "
"should probably be using a natural key to uniquely identify related :class:"
"`~django.contrib.contenttypes.models.ContentType` objects. See :ref:`natural "
"keys<topics-serialization-natural-keys>` and :djadminopt:`dumpdata --natural "
"<--natural>` for more information."
msgstr ""

# 69f4abbb26c34545b3ef1bd6d3db6638
#: ../../ref/contrib/contenttypes.txt:338
msgid ""
"This will enable an API similar to the one used for a normal :class:`~django."
"db.models.ForeignKey`; each ``TaggedItem`` will have a ``content_object`` "
"field that returns the object it's related to, and you can also assign to "
"that field or use it when creating a ``TaggedItem``::"
msgstr ""

# b78caf773d994e5abf15e368f48d7b9a
#: ../../ref/contrib/contenttypes.txt:351
msgid ""
"Due to the way :class:`~django.contrib.contenttypes.generic."
"GenericForeignKey` is implemented, you cannot use such fields directly with "
"filters (``filter()`` and ``exclude()``, for example) via the database API. "
"Because a :class:`~django.contrib.contenttypes.generic.GenericForeignKey` "
"isn't a normal field object, these examples will *not* work::"
msgstr ""

# 4681d81cdc714fe5a13cfc63fdf52463
#: ../../ref/contrib/contenttypes.txt:363
msgid "Reverse generic relations"
msgstr ""

# e2f739f4d56b43dcaba71eebd060443d
#: ../../ref/contrib/contenttypes.txt:367
msgid ""
"If you know which models you'll be using most often, you can also add a "
"\"reverse\" generic relationship to enable an additional API. For example::"
msgstr ""

# 052a8835037244cd94ff61232ef32707
#: ../../ref/contrib/contenttypes.txt:374
msgid ""
"``Bookmark`` instances will each have a ``tags`` attribute, which can be "
"used to retrieve their associated ``TaggedItems``::"
msgstr ""

# 972e3b39cb0b4e6596ff185d0e39eac5
#: ../../ref/contrib/contenttypes.txt:386
msgid ""
"Just as :class:`~django.contrib.contenttypes.generic.GenericForeignKey` "
"accepts the names of the content-type and object-ID fields as arguments, so "
"too does :class:`~django.contrib.contenttypes.generic.GenericRelation`; if "
"the model which has the generic foreign key is using non-default names for "
"those fields, you must pass the names of the fields when setting up a :class:"
"`.GenericRelation` to it. For example, if the ``TaggedItem`` model referred "
"to above used fields named ``content_type_fk`` and ``object_primary_key`` to "
"create its generic foreign key, then a :class:`.GenericRelation` back to it "
"would need to be defined like so::"
msgstr ""

# fbb28a284f304a5a8ab5b5ce6b9bccc3
#: ../../ref/contrib/contenttypes.txt:401
msgid ""
"Of course, if you don't add the reverse relationship, you can do the same "
"types of lookups manually::"
msgstr ""

# 8d569027a05042ec891357b5cdf7dfda
#: ../../ref/contrib/contenttypes.txt:410
msgid ""
"Note that if the model in a :class:`~django.contrib.contenttypes.generic."
"GenericRelation` uses a non-default value for ``ct_field`` or ``fk_field`` "
"in its :class:`~django.contrib.contenttypes.generic.GenericForeignKey` (e.g. "
"the :mod:`django.contrib.comments` app uses ``ct_field=\"object_pk\"``), "
"you'll need to set ``content_type_field`` and/or ``object_id_field`` in the :"
"class:`~django.contrib.contenttypes.generic.GenericRelation` to match the "
"``ct_field`` and ``fk_field``, respectively, in the :class:`~django.contrib."
"contenttypes.generic.GenericForeignKey`::"
msgstr ""

# d08f2da79a6f436bab2ddce6c9e80fcd
#: ../../ref/contrib/contenttypes.txt:422
msgid ""
"Note also, that if you delete an object that has a :class:`~django.contrib."
"contenttypes.generic.GenericRelation`, any objects which have a :class:"
"`~django.contrib.contenttypes.generic.GenericForeignKey` pointing at it will "
"be deleted as well. In the example above, this means that if a ``Bookmark`` "
"object were deleted, any ``TaggedItem`` objects pointing at it would be "
"deleted at the same time."
msgstr ""

# acf377f93f2a462c8c7604514fdd3897
#: ../../ref/contrib/contenttypes.txt:429
msgid ""
"Unlike :class:`~django.db.models.ForeignKey`, :class:`~django.contrib."
"contenttypes.generic.GenericForeignKey` does not accept an :attr:`~django.db."
"models.ForeignKey.on_delete` argument to customize this behavior; if "
"desired, you can avoid the cascade-deletion simply by not using :class:"
"`~django.contrib.contenttypes.generic.GenericRelation`, and alternate "
"behavior can be provided via the :data:`~django.db.models.signals."
"pre_delete` signal."
msgstr ""

# eef5bbe015824a048689cb9114c55b4f
#: ../../ref/contrib/contenttypes.txt:438
msgid "Generic relations and aggregation"
msgstr ""

# 1ba53a312b0d4d0e8f0df34e1185fa61
#: ../../ref/contrib/contenttypes.txt:440
msgid ""
":doc:`Django's database aggregation API </topics/db/aggregation>` doesn't "
"work with a :class:`~django.contrib.contenttypes.generic.GenericRelation`. "
"For example, you might be tempted to try something like::"
msgstr ""

# d81ec2c1b1024ae88387c6f571bc2f66
#: ../../ref/contrib/contenttypes.txt:447
msgid ""
"This will not work correctly, however. The generic relation adds extra "
"filters to the queryset to ensure the correct content type, but the :meth:"
"`~django.db.models.query.QuerySet.aggregate` method doesn't take them into "
"account. For now, if you need aggregates on generic relations, you'll need "
"to calculate them without using the aggregation API."
msgstr ""

# 328c1d1a58814a7ba03e57b28efaa225
#: ../../ref/contrib/contenttypes.txt:454
msgid "Generic relations in forms and admin"
msgstr ""

# ac3cbbcf9fbe4bc0a32c9357407a8fd9
#: ../../ref/contrib/contenttypes.txt:456
msgid "The :mod:`django.contrib.contenttypes.generic` module provides:"
msgstr ""

# 2489514b9b3845079c975c111ee870ce
#: ../../ref/contrib/contenttypes.txt:458
msgid "``BaseGenericInlineFormSet``"
msgstr ""

# dcb91af1e319456b9eac1f2a0bc55aa2
#: ../../ref/contrib/contenttypes.txt:459
msgid ""
":class:`~django.contrib.contenttypes.generic.GenericTabularInline` and :"
"class:`~django.contrib.contenttypes.generic.GenericStackedInline` "
"(subclasses of :class:`~django.contrib.contenttypes.generic."
"GenericInlineModelAdmin`)"
msgstr ""

# 07c4b940aa564ec38441ba867366d44c
#: ../../ref/contrib/contenttypes.txt:463
msgid ""
"A formset factory, :func:`generic_inlineformset_factory`, for use with :"
"class:`GenericForeignKey`"
msgstr ""

# df340e0f994b4004902b05aedc152128
#: ../../ref/contrib/contenttypes.txt:466
msgid ""
"These classes and functions enable the use of generic relations in forms and "
"the admin. See the :doc:`model formset </topics/forms/modelforms>` and :ref:"
"`admin <using-generic-relations-as-an-inline>` documentation for more "
"information."
msgstr ""

# 1afefc476ad34f268ba7d1dbed48e4ba
#: ../../ref/contrib/contenttypes.txt:473
msgid ""
"The :class:`~django.contrib.contenttypes.generic.GenericInlineModelAdmin` "
"class inherits all properties from an :class:`~django.contrib.admin."
"InlineModelAdmin` class. However, it adds a couple of its own for working "
"with the generic relation:"
msgstr ""

# 77542e530d1e4d59829b55f58410cd41
#: ../../ref/contrib/contenttypes.txt:480
msgid ""
"The name of the :class:`~django.contrib.contenttypes.models.ContentType` "
"foreign key field on the model. Defaults to ``content_type``."
msgstr ""

# 9135be9a61844c9b99d5d3b772d3bbf8
#: ../../ref/contrib/contenttypes.txt:486
msgid ""
"The name of the integer field that represents the ID of the related object. "
"Defaults to ``object_id``."
msgstr ""

# 72c63dad6bae424f819ed3972c22c1dc
#: ../../ref/contrib/contenttypes.txt:492
msgid ""
"Subclasses of :class:`GenericInlineModelAdmin` with stacked and tabular "
"layouts, respectively."
msgstr ""

# 5a8f6401216b4a7887bb98050e582790
#: ../../ref/contrib/contenttypes.txt:497
msgid ""
"Returns a ``GenericInlineFormSet`` using :func:`~django.forms.models."
"modelformset_factory`."
msgstr ""

# 5242e05ea32f470fad100c82c4f1bd99
#: ../../ref/contrib/contenttypes.txt:500
msgid ""
"You must provide ``ct_field`` and ``object_id`` if they different from the "
"defaults, ``content_type`` and ``object_id`` respectively. Other parameters "
"are similar to those documented in :func:`~django.forms.models."
"modelformset_factory` and :func:`~django.forms.models.inlineformset_factory`."
msgstr ""
