# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2012.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-03-12 13:35\n"
"PO-Revision-Date: 2012-03-12 13:35\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# 7eea550d626b4fb8bafe235bd10dca21
#: ../../howto/apache-auth.txt:3
msgid "Authenticating against Django's user database from Apache"
msgstr ""

# 32be67417b3f4bce881aa7d2d153d1e0
#: ../../howto/apache-auth.txt:7
msgid ""
"Support for mod_python has been deprecated within Django. At that time, this "
"method of authentication will no longer be provided by Django. The community "
"is welcome to offer its own alternate solutions using WSGI middleware or "
"other approaches."
msgstr ""

# ca3333c1f7964f5c809f28561a2e110e
#: ../../howto/apache-auth.txt:12
msgid ""
"Since keeping multiple authentication databases in sync is a common problem "
"when dealing with Apache, you can configuring Apache to authenticate against "
"Django's :doc:`authentication system </topics/auth>` directly. For example, "
"you could:"
msgstr ""

# 4c9757f039f84abaa18fa05f8fed1f34
#: ../../howto/apache-auth.txt:17
msgid ""
"Serve static/media files directly from Apache only to authenticated users."
msgstr ""

# 39280372efc246be8fff1be0c7e8e597
#: ../../howto/apache-auth.txt:19
msgid ""
"Authenticate access to a Subversion_ repository against Django users with a "
"certain permission."
msgstr ""

# de68890bc5084113a4387f96fcf38695
#: ../../howto/apache-auth.txt:22
msgid "Allow certain users to connect to a WebDAV share created with mod_dav_."
msgstr ""

# 221f7e7a6f0347d0ad9c207f90d3fc95
#: ../../howto/apache-auth.txt:28
msgid "Configuring Apache"
msgstr ""

# 8b3f4924815f4c0e965ed8e8b03550a7
#: ../../howto/apache-auth.txt:30
msgid ""
"To check against Django's authorization database from a Apache configuration "
"file, you'll need to use mod_python's ``PythonAuthenHandler`` directive "
"along with the standard ``Auth*`` and ``Require`` directives:"
msgstr ""

# 7ed9ba5531504b1b8127fdee3b8d97f5
#: ../../howto/apache-auth.txt:47
msgid "If you're using Apache 2.2, you'll need to take a couple extra steps."
msgstr ""

# 099e669ec63d40729980ebb8c3b4a072
#: ../../howto/apache-auth.txt:49
msgid ""
"You'll need to ensure that ``mod_auth_basic`` and ``mod_authz_user`` are "
"loaded. These might be compiled statically into Apache, or you might need to "
"use ``LoadModule`` to load them dynamically (as shown in the example at the "
"bottom of this note)."
msgstr ""

# df7795b853044308b68eea94ee8b69ab
#: ../../howto/apache-auth.txt:54
msgid ""
"You'll also need to insert configuration directives that prevent Apache from "
"trying to use other authentication modules, as well as specifying the "
"``AuthUserFile`` directive and pointing it to ``/dev/null``. Depending on "
"which other authentication modules you have loaded, you might need one or "
"more of the following directives:"
msgstr ""

# 7c810ce0c1284a1eae954a185b657767
#: ../../howto/apache-auth.txt:71
msgid ""
"A complete configuration, with differences between Apache 2.0 and Apache 2.2 "
"marked in bold, would look something like:"
msgstr ""

# 00d060cbb73b44f298562cdfb5712757
#: ../../howto/apache-auth.txt:92
msgid ""
"By default, the authentication handler will limit access to the ``/example/"
"`` location to users marked as staff members.  You can use a set of "
"``PythonOption`` directives to modify this behavior:"
msgstr ""

# 3afca57775c84218a48a0918ea26a595
#: ../../howto/apache-auth.txt:97
msgid "``PythonOption``"
msgstr ""

# 8148cddf4b2745f6a10e2f5389870f60
#: ../../howto/apache-auth.txt:97
msgid "Explanation"
msgstr ""

# ccc7711813be49cd9a3d237d88719dc2
#: ../../howto/apache-auth.txt:99
msgid "``DjangoRequireStaffStatus``"
msgstr ""

# c964f113827d436eb8948da95f969f31
#: ../../howto/apache-auth.txt:99
msgid ""
"If set to ``on`` only \"staff\" users (i.e. those with the ``is_staff`` flag "
"set) will be allowed."
msgstr ""

# 6f16fc46966b478c9734d87a04481df6
#: ../../howto/apache-auth.txt:103
msgid "Defaults to ``on``."
msgstr ""

# d9a943a2eef843c2ab86fd9bfeea2e38
#: ../../howto/apache-auth.txt:105
msgid "``DjangoRequireSuperuserStatus``"
msgstr ""

# 8a9fd4ebd8064b81aca73859457fecb0
#: ../../howto/apache-auth.txt:105
msgid ""
"If set to ``on`` only superusers (i.e. those with the ``is_superuser`` flag "
"set) will be allowed."
msgstr ""

# f5ef7e4b6eb4436cb62a76cc5301af88
#: ../../howto/apache-auth.txt:109
msgid "Defaults to ``off``."
msgstr ""

# 500845a070df4cd8b5cad57f19d3e5d6
#: ../../howto/apache-auth.txt:111
msgid "``DjangoPermissionName``"
msgstr ""

# 19bc1688e9fa490891068f99ddfe0fca
#: ../../howto/apache-auth.txt:111
msgid ""
"The name of a permission to require for access. See :ref:`custom permissions "
"<custom-permissions>` for more information."
msgstr ""

# b11aead38572414fa3afd8b8b6df90ca
#: ../../howto/apache-auth.txt:116
msgid "By default no specific permission will be required."
msgstr ""

# d4923a4748da4a79b1ecfe7e19d647ea
#: ../../howto/apache-auth.txt:120
msgid ""
"Note that sometimes ``SetEnv`` doesn't play well in this mod_python "
"configuration, for reasons unknown. If you're having problems getting "
"mod_python to recognize your ``DJANGO_SETTINGS_MODULE``, you can set it "
"using ``PythonOption`` instead of ``SetEnv``. Therefore, these two Apache "
"directives are equivalent::"
msgstr ""

# 8920a8cff8ba446db5590bc91ea4d70c
#: ../../howto/auth-remote-user.txt:3
msgid "Authentication using ``REMOTE_USER``"
msgstr ""

# 3cb0c1c70a1e4a59ad5105dea55b3b0f
#: ../../howto/auth-remote-user.txt:7
msgid ""
"This document describes how to make use of external authentication sources "
"(where the Web server sets the ``REMOTE_USER`` environment variable) in your "
"Django applications.  This type of authentication solution is typically seen "
"on intranet sites, with single sign-on solutions such as IIS and Integrated "
"Windows Authentication or Apache and `mod_authnz_ldap`_, `CAS`_, `Cosign`_, "
"`WebAuth`_, `mod_auth_sspi`_, etc."
msgstr ""

# 441d7e4ffe704baa8ef27ccfeb4135c8
#: ../../howto/auth-remote-user.txt:20
msgid ""
"When the Web server takes care of authentication it typically sets the "
"``REMOTE_USER`` environment variable for use in the underlying application.  "
"In Django, ``REMOTE_USER`` is made available in the :attr:`request.META "
"<django.http.HttpRequest.META>` attribute.  Django can be configured to make "
"use of the ``REMOTE_USER`` value using the ``RemoteUserMiddleware`` and "
"``RemoteUserBackend`` classes found in :mod:`django.contrib.auth`."
msgstr ""

# eef7c72ff0ad47debe38304b60e6cc08
#: ../../howto/auth-remote-user.txt:28
msgid "Configuration"
msgstr ""

# dd1f93be3b5a4fffb81e235cf7cba272
#: ../../howto/auth-remote-user.txt:30
msgid ""
"First, you must add the :class:`django.contrib.auth.middleware."
"RemoteUserMiddleware` to the :setting:`MIDDLEWARE_CLASSES` setting **after** "
"the :class:`django.contrib.auth.middleware.AuthenticationMiddleware`::"
msgstr ""

# 041e5a97970e4a7c9c19e7b6f0833640
#: ../../howto/auth-remote-user.txt:42
msgid ""
"Next, you must replace the :class:`~django.contrib.auth.backends."
"ModelBackend` with ``RemoteUserBackend`` in the :setting:"
"`AUTHENTICATION_BACKENDS` setting::"
msgstr ""

# 194f50c2f97d43748583e540e7e2d6c7
#: ../../howto/auth-remote-user.txt:49
msgid ""
"With this setup, ``RemoteUserMiddleware`` will detect the username in "
"``request.META['REMOTE_USER']`` and will authenticate and auto-login that "
"user using the ``RemoteUserBackend``."
msgstr ""

# 3e095e584d7640208db3f086af130b5e
#: ../../howto/auth-remote-user.txt:54
msgid ""
"Since the ``RemoteUserBackend`` inherits from ``ModelBackend``, you will "
"still have all of the same permissions checking that is implemented in "
"``ModelBackend``."
msgstr ""

# 91e7ca2fea1a42e797fd617541de9cb7
#: ../../howto/auth-remote-user.txt:58
msgid ""
"If your authentication mechanism uses a custom HTTP header and not "
"``REMOTE_USER``, you can subclass ``RemoteUserMiddleware`` and set the "
"``header`` attribute to the desired ``request.META`` key.  For example::"
msgstr ""

# 6fa5457627b140ca8ce0230201cffb4d
#: ../../howto/auth-remote-user.txt:69
msgid "``RemoteUserBackend``"
msgstr ""

# dcfbca88748e4778bf5a19c1f5160da0
#: ../../howto/auth-remote-user.txt:73
msgid ""
"If you need more control, you can create your own authentication backend "
"that inherits from ``RemoteUserBackend`` and overrides certain parts:"
msgstr ""

# cdda7f72216641d591bef104fa4c6481
# 996cc7bc59054d8cacedcbe54e7534a1
#: ../../howto/auth-remote-user.txt:77
#: ../../howto/custom-management-commands.txt:169
msgid "Attributes"
msgstr ""

# 8a86272dbc3b4554af2c20c5339aafaa
#: ../../howto/auth-remote-user.txt:81
msgid ""
"``True`` or ``False``.  Determines whether or not a :class:`~django.contrib."
"auth.models.User` object is created if not already in the database.  "
"Defaults to ``True``."
msgstr ""

# c0ca977d0d6648a4ae399bbf677cea85
# f16cb78259444b058810ebb3686df067
#: ../../howto/auth-remote-user.txt:86
#: ../../howto/custom-management-commands.txt:215
msgid "Methods"
msgstr ""

# 96ad6b9d8be7408f880d3faa5a05563f
#: ../../howto/auth-remote-user.txt:90
msgid ""
"Performs any cleaning on the ``username`` (e.g. stripping LDAP DN "
"information) prior to using it to get or create a :class:`~django.contrib."
"auth.models.User` object.  Returns the cleaned username."
msgstr ""

# f0c6f9ee878e40d7b2fe0288adc5d371
#: ../../howto/auth-remote-user.txt:97
msgid ""
"Configures a newly created user.  This method is called immediately after a "
"new user is created, and can be used to perform custom setup actions, such "
"as setting the user's groups based on attributes in an LDAP directory. "
"Returns the user object."
msgstr ""

# 839d5e6a202549e59cb2347441b17cf3
#: ../../howto/custom-file-storage.txt:2
msgid "Writing a custom storage system"
msgstr ""

# 345e75f8526c43c2830aca05b4258ee8
#: ../../howto/custom-file-storage.txt:6
msgid ""
"If you need to provide custom file storage -- a common example is storing "
"files on some remote system -- you can do so by defining a custom storage "
"class. You'll need to follow these steps:"
msgstr ""

# 5c29a3faa35542299877c15bdb535f25
#: ../../howto/custom-file-storage.txt:10
msgid ""
"Your custom storage system must be a subclass of ``django.core.files.storage."
"Storage``::"
msgstr ""

# daf77b38e33b4af5970672c047f787f1
#: ../../howto/custom-file-storage.txt:18
msgid ""
"Django must be able to instantiate your storage system without any "
"arguments. This means that any settings should be taken from ``django.conf."
"settings``::"
msgstr ""

# 9c304082155248f396623622c773b1e7
#: ../../howto/custom-file-storage.txt:30
msgid ""
"Your storage class must implement the ``_open()`` and ``_save()`` methods, "
"along with any other methods appropriate to your storage class. See below "
"for more on these methods."
msgstr ""

# a801599083934a62bb31f6f85805d917
#: ../../howto/custom-file-storage.txt:34
msgid ""
"In addition, if your class provides local file storage, it must override the "
"``path()`` method."
msgstr ""

# d0d04125ce15466f986c3a48dfd6f6d5
#: ../../howto/custom-file-storage.txt:37
msgid ""
"Your custom storage system may override any of the storage methods explained "
"in :doc:`/ref/files/storage`, but you **must** implement the following "
"methods:"
msgstr ""

# ddc9b20c5c4f42c6b04941231e1d9e49
#: ../../howto/custom-file-storage.txt:40
msgid ":meth:`Storage.delete`"
msgstr ""

# 4a27be574bcc45a18e2102d16e0ffe3a
#: ../../howto/custom-file-storage.txt:41
msgid ":meth:`Storage.exists`"
msgstr ""

# b47885b465324fa9960570866ed386c8
#: ../../howto/custom-file-storage.txt:42
msgid ":meth:`Storage.listdir`"
msgstr ""

# ab66aec94c184bb4a1db8b057983d8fd
#: ../../howto/custom-file-storage.txt:43
msgid ":meth:`Storage.size`"
msgstr ""

# ba8369c2e7ce436e9f3f01efbc83c941
#: ../../howto/custom-file-storage.txt:44
msgid ":meth:`Storage.url`"
msgstr ""

# cd12b0a43df146eeb032214dce7507bd
#: ../../howto/custom-file-storage.txt:46
msgid ""
"You'll also usually want to use hooks specifically designed for custom "
"storage objects. These are:"
msgstr ""

# 372a45fbcfc64e9e91f779a24d50c867
#: ../../howto/custom-file-storage.txt:50
msgid "``_open(name, mode='rb')``"
msgstr ""

# 77f7e78d0d5a49f69135c359195798f8
#: ../../howto/custom-file-storage.txt:52
msgid "**Required**."
msgstr ""

# baaf07ba19804118ae563552f006dce0
#: ../../howto/custom-file-storage.txt:54
msgid ""
"Called by ``Storage.open()``, this is the actual mechanism the storage class "
"uses to open the file. This must return a ``File`` object, though in most "
"cases, you'll want to return some subclass here that implements logic "
"specific to the backend storage system."
msgstr ""

# b9680b1677834218868842db71804fd8
#: ../../howto/custom-file-storage.txt:60
msgid "``_save(name, content)``"
msgstr ""

# cfc9877a8d644cd582c76123ce54008a
#: ../../howto/custom-file-storage.txt:62
msgid ""
"Called by ``Storage.save()``. The ``name`` will already have gone through "
"``get_valid_name()`` and ``get_available_name()``, and the ``content`` will "
"be a ``File`` object itself."
msgstr ""

# 5f218139a4aa49ec9e06d1f6fcf4a999
#: ../../howto/custom-file-storage.txt:66
msgid ""
"Should return the actual name of name of the file saved (usually the "
"``name`` passed in, but if the storage needs to change the file name return "
"the new name instead)."
msgstr ""

# 9995aaccc619426fb257ca41497a98ac
#: ../../howto/custom-file-storage.txt:71
msgid "``get_valid_name(name)``"
msgstr ""

# 5cdbb353900347528fd1869fc9ce12e9
#: ../../howto/custom-file-storage.txt:73
msgid ""
"Returns a filename suitable for use with the underlying storage system. The "
"``name`` argument passed to this method is the original filename sent to the "
"server, after having any path information removed. Override this to "
"customize how non-standard characters are converted to safe filenames."
msgstr ""

# da054c6423de4d43958f529055d63980
#: ../../howto/custom-file-storage.txt:78
msgid ""
"The code provided on ``Storage`` retains only alpha-numeric characters, "
"periods and underscores from the original filename, removing everything else."
msgstr ""

# c3e9465437ab4ff49889232023d678c4
#: ../../howto/custom-file-storage.txt:82
msgid "``get_available_name(name)``"
msgstr ""

# 287bf8f569a5475eb3ca04c8b6b47c99
#: ../../howto/custom-file-storage.txt:84
msgid ""
"Returns a filename that is available in the storage mechanism, possibly "
"taking the provided filename into account. The ``name`` argument passed to "
"this method will have already cleaned to a filename valid for the storage "
"system, according to the ``get_valid_name()`` method described above."
msgstr ""

# 00f5ee7a47ad43bca30eedb04da35638
#: ../../howto/custom-file-storage.txt:89
msgid ""
"The code provided on ``Storage`` simply appends ``\"_1\"``, ``\"_2\"``, etc. "
"to the filename until it finds one that's available in the destination "
"directory."
msgstr ""

# 6da953a7cced43ecb3cadafde83df82f
#: ../../howto/custom-management-commands.txt:3
msgid "Writing custom django-admin commands"
msgstr ""

# ecd98f64387d4390822db04fff791e48
#: ../../howto/custom-management-commands.txt:5
msgid ""
"Applications can register their own actions with ``manage.py``. For example, "
"you might want to add a ``manage.py`` action for a Django app that you're "
"distributing. In this document, we will be building a custom ``closepoll`` "
"command for the ``polls`` application from the :doc:`tutorial</intro/"
"tutorial01>`."
msgstr ""

# ebcd2385e50c498d9083e74917ac48af
#: ../../howto/custom-management-commands.txt:11
msgid ""
"To do this, just add a ``management/commands`` directory to the application. "
"Django will register a ``manage.py`` command for each Python module in that "
"directory whose name doesn't begin with an underscore. For example::"
msgstr ""

# 896692190d834ad3884abb968b760de0
#: ../../howto/custom-management-commands.txt:27
msgid ""
"In this example, the ``closepoll`` command will be made available to any "
"project that includes the ``polls`` application in :setting:`INSTALLED_APPS`."
msgstr ""

# a0be83814d4b466daa90fb68aa740e84
#: ../../howto/custom-management-commands.txt:30
msgid ""
"The ``_private.py`` module will not be available as a management command."
msgstr ""

# baaa7c00714d42eda4110c87b99c41b1
#: ../../howto/custom-management-commands.txt:32
msgid ""
"The ``closepoll.py`` module has only one requirement -- it must define a "
"class ``Command`` that extends :class:`BaseCommand` or one of its :ref:"
"`subclasses<ref-basecommand-subclasses>`."
msgstr ""

# 4275ba43970c4f75bf9a63b5e239c892
#: ../../howto/custom-management-commands.txt:38
msgid ""
"Custom management commands are especially useful for running standalone "
"scripts or for scripts that are periodically executed from the UNIX crontab "
"or from Windows scheduled tasks control panel."
msgstr ""

# 7890a85415074185aea369842af26a55
#: ../../howto/custom-management-commands.txt:42
msgid ""
"To implement the command, edit ``polls/management/commands/closepoll.py`` to "
"look like this:"
msgstr ""

# 10100e2523cf4c37a1230a6c56c1124b
#: ../../howto/custom-management-commands.txt:67
msgid ""
"When you are using management commands and wish to provide console output, "
"you should write to ``self.stdout`` and ``self.stderr``, instead of printing "
"to ``stdout`` and ``stderr`` directly. By using these proxies, it becomes "
"much easier to test your custom command."
msgstr ""

# aae544757db84fb38abb156f0654a119
#: ../../howto/custom-management-commands.txt:73
msgid ""
"The new custom command can be called using ``python manage.py closepoll "
"<poll_id>``."
msgstr ""

# 019a0569f5734b56881bb71423ebec9f
#: ../../howto/custom-management-commands.txt:76
msgid ""
"The ``handle()`` method takes zero or more ``poll_ids`` and sets ``poll."
"opened`` to ``False`` for each one. If the user referenced any nonexistent "
"polls, a :class:`CommandError` is raised. The ``poll.opened`` attribute does "
"not exist in the :doc:`tutorial</intro/tutorial01>` and was added to ``polls."
"models.Poll`` for this example."
msgstr ""

# c5d93b78e43247709f529676adc312c7
#: ../../howto/custom-management-commands.txt:82
msgid ""
"The same ``closepoll`` could be easily modified to delete a given poll "
"instead of closing it by accepting additional command line options. These "
"custom options must be added to :attr:`~BaseCommand.option_list` like this:"
msgstr ""

# b565de24f7d74aa19c385ec4665a66cb
#: ../../howto/custom-management-commands.txt:100
msgid ""
"In addition to being able to add custom command line options, all :doc:"
"`management commands</ref/django-admin>` can accept some default options "
"such as :djadminopt:`--verbosity` and :djadminopt:`--traceback`."
msgstr ""

# 9068f66bb1db49f9aaffe09dc6fd5d2d
#: ../../howto/custom-management-commands.txt:106
msgid ""
"The :meth:`BaseCommand.execute` method sets the hardcoded ``en-us`` locale "
"because the commands shipped with Django perform several tasks (for example, "
"user-facing content rendering and database population) that require a system-"
"neutral string language (for which we use ``en-us``)."
msgstr ""

# a15071762a0043de8ebdc3c61e771cf6
#: ../../howto/custom-management-commands.txt:111
msgid ""
"If your custom management command uses another locale, you should manually "
"activate and deactivate it in your :meth:`~BaseCommand.handle` or :meth:"
"`~NoArgsCommand.handle_noargs` method using the functions provided by the "
"I18N support code:"
msgstr ""

# 1586b9424deb4712b7d571657237d47a
#: ../../howto/custom-management-commands.txt:141
msgid ""
"Take into account though, that system management commands typically have to "
"be very careful about running in non-uniform locales, so:"
msgstr ""

# 4d946627ce30467985cb2232af2ea904
#: ../../howto/custom-management-commands.txt:144
msgid ""
"Make sure the :setting:`USE_I18N` setting is always ``True`` when running "
"the command (this is one good example of the potential problems stemming "
"from a dynamic runtime environment that Django commands avoid offhand by "
"always using a fixed locale)."
msgstr ""

# 17ac00c1e2f54908b4720fec4b9a6a29
#: ../../howto/custom-management-commands.txt:149
msgid ""
"Review the code of your command and the code it calls for behavioral "
"differences when locales are changed and evaluate its impact on predictable "
"behavior of your command."
msgstr ""

# aac79d82792b43debe266d9000652d1f
#: ../../howto/custom-management-commands.txt:154
msgid "Command objects"
msgstr ""

# c283810b91cc471eaf408235638799bb
#: ../../howto/custom-management-commands.txt:158
msgid "The base class from which all management commands ultimately derive."
msgstr ""

# 4426be17fcd54427a7c73e2b28395a26
#: ../../howto/custom-management-commands.txt:160
msgid ""
"Use this class if you want access to all of the mechanisms which parse the "
"command-line arguments and work out what code to call in response; if you "
"don't need to change any of that behavior, consider using one of its :ref:"
"`subclasses<ref-basecommand-subclasses>`."
msgstr ""

# 5498f825f7b942a282c356f52a50f2fc
#: ../../howto/custom-management-commands.txt:165
msgid ""
"Subclassing the :class:`BaseCommand` class requires that you implement the :"
"meth:`~BaseCommand.handle` method."
msgstr ""

# 5acd99b5f694457fa362be8f2db1c865
#: ../../howto/custom-management-commands.txt:171
msgid ""
"All attributes can be set in your derived class and can be used in :class:"
"`BaseCommand`'s :ref:`subclasses<ref-basecommand-subclasses>`."
msgstr ""

# 235fb0751ad04773a314835c2841cfea
#: ../../howto/custom-management-commands.txt:176
msgid ""
"A string listing the arguments accepted by the command, suitable for use in "
"help messages; e.g., a command which takes a list of application names might "
"set this to '<appname appname ...>'."
msgstr ""

# 24ee8902f2684a669649820ed94b30c6
#: ../../howto/custom-management-commands.txt:183
msgid ""
"A boolean indicating whether the command needs to be able to import Django "
"settings; if ``True``, ``execute()`` will verify that this is possible "
"before proceeding. Default value is ``True``."
msgstr ""

# 0d9e0eed23134955a38de4749bb1bbfe
#: ../../howto/custom-management-commands.txt:190
msgid ""
"A short description of the command, which will be printed in the help "
"message when the user runs the command ``python manage.py help <command>``."
msgstr ""

# 4c507f48a61546af92707214a2f83ae6
#: ../../howto/custom-management-commands.txt:196
msgid ""
"This is the list of ``optparse`` options which will be fed into the "
"command's ``OptionParser`` for parsing arguments."
msgstr ""

# 67c457a8a2f94e0ca9fa62f2f7a3b96c
#: ../../howto/custom-management-commands.txt:201
msgid ""
"A boolean indicating whether the command outputs SQL statements; if "
"``True``, the output will automatically be wrapped with ``BEGIN;`` and "
"``COMMIT;``. Default value is ``False``."
msgstr ""

# 2c5001b3f27746fd96de9947272da5a0
#: ../../howto/custom-management-commands.txt:208
msgid ""
"A boolean; if ``True``, validation of installed models will be performed "
"prior to executing the command. Default value is ``True``. To validate an "
"individual application's models rather than all applications' models, call :"
"meth:`~BaseCommand.validate` from :meth:`~BaseCommand.handle`."
msgstr ""

# 5d947fb45b3a479dbd80023d7c1273e3
#: ../../howto/custom-management-commands.txt:217
msgid ""
":class:`BaseCommand` has a few methods that can be overridden but only the :"
"meth:`~BaseCommand.handle` method must be implemented."
msgstr ""

# ab369a3e3d124e0a9753b7bce2aefb61
#: ../../howto/custom-management-commands.txt:222
msgid ""
"If you implement ``__init__`` in your subclass of :class:`BaseCommand`, you "
"must call :class:`BaseCommand`'s ``__init__``."
msgstr ""

# ce6878a78467411b9e218e758df17eba
#: ../../howto/custom-management-commands.txt:234
msgid ""
"Return the Django version, which should be correct for all built-in Django "
"commands. User-supplied commands can override this method to return their "
"own version."
msgstr ""

# eed14e4730114fbca52f846a61d114db
#: ../../howto/custom-management-commands.txt:240
msgid ""
"Try to execute this command, performing model validation if needed (as "
"controlled by the attribute :attr:`requires_model_validation`). If the "
"command raises a :class:`CommandError`, intercept it and print it sensibly "
"to stderr."
msgstr ""

# fd4f30ab663345489a4fc0a34ec8c51d
#: ../../howto/custom-management-commands.txt:248
msgid ""
"``execute()`` should not be called directly from your code to execute a "
"command. Use :ref:`call_command <call-command>` instead."
msgstr ""

# 1cc954d6058d4da18582443c7004563d
#: ../../howto/custom-management-commands.txt:253
msgid "The actual logic of the command. Subclasses must implement this method."
msgstr ""

# 2f13b3bbca7c4d06bc5553d6eda05e27
#: ../../howto/custom-management-commands.txt:258
msgid "BaseCommand subclasses"
msgstr ""

# dc51e4123f014798b1eea9c9a7b4e1d2
#: ../../howto/custom-management-commands.txt:262
msgid ""
"A management command which takes one or more installed application names as "
"arguments, and does something with each of them."
msgstr ""

# 3108bd650e9f45129b81e3545731c54b
#: ../../howto/custom-management-commands.txt:265
msgid ""
"Rather than implementing :meth:`~BaseCommand.handle`, subclasses must "
"implement :meth:`~AppCommand.handle_app`, which will be called once for each "
"application."
msgstr ""

# 6472503f29ca402fb835653d89e58dff
#: ../../howto/custom-management-commands.txt:270
msgid ""
"Perform the command's actions for ``app``, which will be the Python module "
"corresponding to an application name given on the command line."
msgstr ""

# 957cebf93c804ce1aa3dfd92f6dbd6e9
#: ../../howto/custom-management-commands.txt:276
msgid ""
"A management command which takes one or more arbitrary arguments (labels) on "
"the command line, and does something with each of them."
msgstr ""

# 0c52526c5304420fb5faa6837a6cc632
#: ../../howto/custom-management-commands.txt:280
msgid ""
"Rather than implementing :meth:`~BaseCommand.handle`, subclasses must "
"implement :meth:`~LabelCommand.handle_label`, which will be called once for "
"each label."
msgstr ""

# 86ab071d9a764873a26ad2e9c239186b
#: ../../howto/custom-management-commands.txt:285
msgid ""
"Perform the command's actions for ``label``, which will be the string as "
"given on the command line."
msgstr ""

# f1c1e41b62b74268b4b24f6e7a55802e
#: ../../howto/custom-management-commands.txt:290
msgid "A command which takes no arguments on the command line."
msgstr ""

# 3f71fec8f96b4ba781fc134c630dce19
#: ../../howto/custom-management-commands.txt:292
msgid ""
"Rather than implementing :meth:`~BaseCommand.handle`, subclasses must "
"implement :meth:`~NoArgsCommand.handle_noargs`; :meth:`~BaseCommand.handle` "
"itself is overridden to ensure no arguments are passed to the command."
msgstr ""

# c9ec84098f5d4b75a6c1ab2378d4f5d4
#: ../../howto/custom-management-commands.txt:298
msgid "Perform this command's actions"
msgstr ""

# 57d6f19e6c6e42ca8e721340be2302ff
#: ../../howto/custom-management-commands.txt:303
msgid "Command exceptions"
msgstr ""

# c2b470dad01c44078f11b5b50038632c
#: ../../howto/custom-management-commands.txt:307
msgid ""
"Exception class indicating a problem while executing a management command."
msgstr ""

# fb6f46a7f0d24334a236e978ffebf21e
#: ../../howto/custom-management-commands.txt:310
msgid ""
"If this exception is raised during the execution of a management command, it "
"will be caught and turned into a nicely-printed error message to the "
"appropriate output stream (i.e., stderr); as a result, raising this "
"exception (with a sensible description of the error) is the preferred way to "
"indicate that something has gone wrong in the execution of a command."
msgstr ""

# 14875deff99c4912bc8604204b605423
#: ../../howto/custom-model-fields.txt:3
msgid "Writing custom model fields"
msgstr ""

# 5232901b78e0434399647a65a4c5682a
#: ../../howto/custom-model-fields.txt:8
msgid "Introduction"
msgstr ""

# 5b5c25f6b2234443a0b7ca4873dcc671
#: ../../howto/custom-model-fields.txt:10
msgid ""
"The :doc:`model reference </topics/db/models>` documentation explains how to "
"use Django's standard field classes -- :class:`~django.db.models."
"CharField`, :class:`~django.db.models.DateField`, etc. For many purposes, "
"those classes are all you'll need. Sometimes, though, the Django version "
"won't meet your precise requirements, or you'll want to use a field that is "
"entirely different from those shipped with Django."
msgstr ""

# 09e532b6a7eb43f8b5d1d1b2bc7fea2d
#: ../../howto/custom-model-fields.txt:17
msgid ""
"Django's built-in field types don't cover every possible database column "
"type -- only the common types, such as ``VARCHAR`` and ``INTEGER``. For more "
"obscure column types, such as geographic polygons or even user-created types "
"such as `PostgreSQL custom types`_, you can define your own Django ``Field`` "
"subclasses."
msgstr ""

# d3515f5b292e4718a596cffbb4f1f0a8
#: ../../howto/custom-model-fields.txt:24
msgid ""
"Alternatively, you may have a complex Python object that can somehow be "
"serialized to fit into a standard database column type. This is another case "
"where a ``Field`` subclass will help you use your object with your models."
msgstr ""

# d2b7b187d85d448094d38e5762a3f7db
#: ../../howto/custom-model-fields.txt:29
msgid "Our example object"
msgstr ""

# c9a01db22f934940963525ab2c44a23c
#: ../../howto/custom-model-fields.txt:31
msgid ""
"Creating custom fields requires a bit of attention to detail. To make things "
"easier to follow, we'll use a consistent example throughout this document: "
"wrapping a Python object representing the deal of cards in a hand of "
"Bridge_. Don't worry, you don't have know how to play Bridge to follow this "
"example. You only need to know that 52 cards are dealt out equally to four "
"players, who are traditionally called *north*, *east*, *south* and *west*.  "
"Our class looks something like this::"
msgstr ""

# f66765a31a5a4559b9c8749516fa5818
#: ../../howto/custom-model-fields.txt:53
msgid ""
"This is just an ordinary Python class, with nothing Django-specific about "
"it. We'd like to be able to do things like this in our models (we assume the "
"``hand`` attribute on the model is an instance of ``Hand``)::"
msgstr ""

# a7fc1bdc475f4c54abb5daa5b831c1eb
#: ../../howto/custom-model-fields.txt:64
msgid ""
"We assign to and retrieve from the ``hand`` attribute in our model just like "
"any other Python class. The trick is to tell Django how to handle saving and "
"loading such an object."
msgstr ""

# 2ebc924ceca04ac2b5f1301f0f573544
#: ../../howto/custom-model-fields.txt:68
msgid ""
"In order to use the ``Hand`` class in our models, we **do not** have to "
"change this class at all. This is ideal, because it means you can easily "
"write model support for existing classes where you cannot change the source "
"code."
msgstr ""

# f9a447a59876459cba88ac737698b329
#: ../../howto/custom-model-fields.txt:73
msgid ""
"You might only be wanting to take advantage of custom database column types "
"and deal with the data as standard Python types in your models; strings, or "
"floats, for example. This case is similar to our ``Hand`` example and we'll "
"note any differences as we go along."
msgstr ""

# 66fbc92601f645d59ad5cc09eb3c083f
#: ../../howto/custom-model-fields.txt:79
msgid "Background theory"
msgstr ""

# 29a3a67e7abc4b9b8434747967381ffd
#: ../../howto/custom-model-fields.txt:82
msgid "Database storage"
msgstr ""

# 73d964688cec4206b2dfb49a6d02d53c
#: ../../howto/custom-model-fields.txt:84
msgid ""
"The simplest way to think of a model field is that it provides a way to take "
"a normal Python object -- string, boolean, ``datetime``, or something more "
"complex like ``Hand`` -- and convert it to and from a format that is useful "
"when dealing with the database (and serialization, but, as we'll see later, "
"that falls out fairly naturally once you have the database side under "
"control)."
msgstr ""

# cbf3f47ede6d4ea79a7d3d1002f21518
#: ../../howto/custom-model-fields.txt:90
msgid ""
"Fields in a model must somehow be converted to fit into an existing database "
"column type. Different databases provide different sets of valid column "
"types, but the rule is still the same: those are the only types you have to "
"work with. Anything you want to store in the database must fit into one of "
"those types."
msgstr ""

# 7875c30940ab46dcb291a9796f06e4a8
#: ../../howto/custom-model-fields.txt:96
msgid ""
"Normally, you're either writing a Django field to match a particular "
"database column type, or there's a fairly straightforward way to convert "
"your data to, say, a string."
msgstr ""

# 2144e1c6becd437f9f6a534c7e593c4b
#: ../../howto/custom-model-fields.txt:100
msgid ""
"For our ``Hand`` example, we could convert the card data to a string of 104 "
"characters by concatenating all the cards together in a pre-determined order "
"-- say, all the *north* cards first, then the *east*, *south* and *west* "
"cards. So ``Hand`` objects can be saved to text or character columns in the "
"database."
msgstr ""

# c0b7fae715ec42e3be808925741af325
#: ../../howto/custom-model-fields.txt:106
msgid "What does a field class do?"
msgstr ""

# 36cbe1c3bab543e7bc4d415ae2375d50
#: ../../howto/custom-model-fields.txt:110
msgid ""
"All of Django's fields (and when we say *fields* in this document, we always "
"mean model fields and not :doc:`form fields </ref/forms/fields>`) are "
"subclasses of :class:`django.db.models.Field`. Most of the information that "
"Django records about a field is common to all fields -- name, help text, "
"uniqueness and so forth. Storing all that information is handled by "
"``Field``. We'll get into the precise details of what ``Field`` can do later "
"on; for now, suffice it to say that everything descends from ``Field`` and "
"then customizes key pieces of the class behavior."
msgstr ""

# 48b437def8804e41b2de470bcbbf7ccf
#: ../../howto/custom-model-fields.txt:119
msgid ""
"It's important to realize that a Django field class is not what is stored in "
"your model attributes. The model attributes contain normal Python objects. "
"The field classes you define in a model are actually stored in the ``Meta`` "
"class when the model class is created (the precise details of how this is "
"done are unimportant here). This is because the field classes aren't "
"necessary when you're just creating and modifying attributes. Instead, they "
"provide the machinery for converting between the attribute value and what is "
"stored in the database or sent to the :doc:`serializer </topics/"
"serialization>`."
msgstr ""

# 7a5c3352c4924633b6ff7f45655beeb7
#: ../../howto/custom-model-fields.txt:128
msgid ""
"Keep this in mind when creating your own custom fields. The Django ``Field`` "
"subclass you write provides the machinery for converting between your Python "
"instances and the database/serializer values in various ways (there are "
"differences between storing a value and using a value for lookups, for "
"example). If this sounds a bit tricky, don't worry -- it will become clearer "
"in the examples below. Just remember that you will often end up creating two "
"classes when you want a custom field:"
msgstr ""

# 061dfa51275b4a37b0ab0ff64d1cf1bb
#: ../../howto/custom-model-fields.txt:136
msgid ""
"The first class is the Python object that your users will manipulate. They "
"will assign it to the model attribute, they will read from it for displaying "
"purposes, things like that. This is the ``Hand`` class in our example."
msgstr ""

# b85e5bbbab1549f3add42676723ce8f6
#: ../../howto/custom-model-fields.txt:141
msgid ""
"The second class is the ``Field`` subclass. This is the class that knows how "
"to convert your first class back and forth between its permanent storage "
"form and the Python form."
msgstr ""

# 612c918df57840b0ab24f2b145320ba5
#: ../../howto/custom-model-fields.txt:146
msgid "Writing a field subclass"
msgstr ""

# f501f8f9405a4fca9c8215b3d38c4cab
#: ../../howto/custom-model-fields.txt:148
msgid ""
"When planning your :class:`~django.db.models.Field` subclass, first give "
"some thought to which existing :class:`~django.db.models.Field` class your "
"new field is most similar to. Can you subclass an existing Django field and "
"save yourself some work? If not, you should subclass the :class:`~django.db."
"models.Field` class, from which everything is descended."
msgstr ""

# 6ecaedeaae8947bd845bdbc3fe554f02
#: ../../howto/custom-model-fields.txt:154
msgid ""
"Initializing your new field is a matter of separating out any arguments that "
"are specific to your case from the common arguments and passing the latter "
"to the :meth:`~django.db.models.Field.__init__` method of :class:`~django.db."
"models.Field` (or your parent class)."
msgstr ""

# e1d081bbdff940e088a0e890000ed651
#: ../../howto/custom-model-fields.txt:159
msgid ""
"In our example, we'll call our field ``HandField``. (It's a good idea to "
"call your :class:`~django.db.models.Field` subclass ``<Something>Field``, so "
"it's easily identifiable as a :class:`~django.db.models.Field` subclass.) It "
"doesn't behave like any existing field, so we'll subclass directly from :"
"class:`~django.db.models.Field`::"
msgstr ""

# e65919c07fc84f95990d688c6a219f60
#: ../../howto/custom-model-fields.txt:175
msgid ""
"Our ``HandField`` accepts most of the standard field options (see the list "
"below), but we ensure it has a fixed length, since it only needs to hold 52 "
"card values plus their suits; 104 characters in total."
msgstr ""

# 17ac9bbbd4da4343b30f657c2ca525c5
#: ../../howto/custom-model-fields.txt:181
msgid ""
"Many of Django's model fields accept options that they don't do anything "
"with. For example, you can pass both :attr:`~django.db.models.Field."
"editable` and :attr:`~django.db.models.Field.auto_now` to a :class:`django."
"db.models.DateField` and it will simply ignore the :attr:`~django.db.models."
"Field.editable` parameter (:attr:`~django.db.models.Field.auto_now` being "
"set implies ``editable=False``). No error is raised in this case."
msgstr ""

# 8d8cd640df9947cbb4f869ebee177f40
#: ../../howto/custom-model-fields.txt:190
msgid ""
"This behavior simplifies the field classes, because they don't need to check "
"for options that aren't necessary. They just pass all the options to the "
"parent class and then don't use them later on. It's up to you whether you "
"want your fields to be more strict about the options they select, or to use "
"the simpler, more permissive behavior of the current fields."
msgstr ""

# 6041a055e59f480a94b35e9643c678c9
#: ../../howto/custom-model-fields.txt:198
msgid ""
"The :meth:`~django.db.models.Field.__init__` method takes the following "
"parameters:"
msgstr ""

# e5482732235d46c1b85b5e0b1af75916
#: ../../howto/custom-model-fields.txt:201
msgid ":attr:`~django.db.models.Field.verbose_name`"
msgstr ""

# a6117f09774e4208bd4d8f67fca3d4d7
#: ../../howto/custom-model-fields.txt:202
msgid ":attr:`~django.db.models.Field.name`"
msgstr ""

# c6b64b708b9b4803a8aad962b09a3eea
#: ../../howto/custom-model-fields.txt:203
msgid ":attr:`~django.db.models.Field.primary_key`"
msgstr ""

# 54b0ecfca71649b2a11531b87f155553
#: ../../howto/custom-model-fields.txt:204
msgid ":attr:`~django.db.models.Field.max_length`"
msgstr ""

# 4d5079e94cc641bfa971e259ce2bb8ef
#: ../../howto/custom-model-fields.txt:205
msgid ":attr:`~django.db.models.Field.unique`"
msgstr ""

# 7b2a3357cd3d4cc39d1fd65491f547ad
#: ../../howto/custom-model-fields.txt:206
msgid ":attr:`~django.db.models.Field.blank`"
msgstr ""

# 43bce1cfa765406c9c251ac8e582ed51
#: ../../howto/custom-model-fields.txt:207
msgid ":attr:`~django.db.models.Field.null`"
msgstr ""

# c6f9adb4db864dafb9ebdfd3d5e5402d
#: ../../howto/custom-model-fields.txt:208
msgid ":attr:`~django.db.models.Field.db_index`"
msgstr ""

# 1ccbb31622f245aab4b0abca1bedec08
#: ../../howto/custom-model-fields.txt:209
msgid ""
":attr:`~django.db.models.Field.rel`: Used for related fields (like :class:"
"`ForeignKey`). For advanced use only."
msgstr ""

# 20611143d0d9462a87b26b2444a0b3a1
#: ../../howto/custom-model-fields.txt:211
msgid ":attr:`~django.db.models.Field.default`"
msgstr ""

# 57e83d53f6b441a79d77356d452112f7
#: ../../howto/custom-model-fields.txt:212
msgid ":attr:`~django.db.models.Field.editable`"
msgstr ""

# 4a44fa1977b1479e98b7ce9475e6ccca
#: ../../howto/custom-model-fields.txt:213
msgid ""
":attr:`~django.db.models.Field.serialize`: If ``False``, the field will not "
"be serialized when the model is passed to Django's :doc:`serializers </"
"topics/serialization>`. Defaults to ``True``."
msgstr ""

# b6812b3e833842848496576d09d260db
#: ../../howto/custom-model-fields.txt:216
msgid ":attr:`~django.db.models.Field.unique_for_date`"
msgstr ""

# da29f686d9264150827e76109ee1ebe4
#: ../../howto/custom-model-fields.txt:217
msgid ":attr:`~django.db.models.Field.unique_for_month`"
msgstr ""

# ac7a66d1319b49e0a24578e866b2b606
#: ../../howto/custom-model-fields.txt:218
msgid ":attr:`~django.db.models.Field.unique_for_year`"
msgstr ""

# 770750e2d3d549e2b5a6f8aa8c8d01c9
#: ../../howto/custom-model-fields.txt:219
msgid ":attr:`~django.db.models.Field.choices`"
msgstr ""

# fe8444e5598b463484d102de9ee2e2d3
#: ../../howto/custom-model-fields.txt:220
msgid ":attr:`~django.db.models.Field.help_text`"
msgstr ""

# c1cacfa6f4db44a98312a870be9b6b27
#: ../../howto/custom-model-fields.txt:221
msgid ":attr:`~django.db.models.Field.db_column`"
msgstr ""

# b4cc9288805a4f23b5359da6b7ae6c6e
#: ../../howto/custom-model-fields.txt:222
msgid ""
":attr:`~django.db.models.Field.db_tablespace`: Only for index creation, if "
"the backend supports :doc:`tablespaces </topics/db/tablespaces>`. You can "
"usually ignore this option."
msgstr ""

# 79096c3c6a834aa48372f748ed08d355
#: ../../howto/custom-model-fields.txt:225
msgid ""
":attr:`~django.db.models.Field.auto_created`: True if the field was "
"automatically created, as for the `OneToOneField` used by model inheritance. "
"For advanced use only."
msgstr ""

# 006e2cb8475144598f3d40ed124657b4
#: ../../howto/custom-model-fields.txt:229
msgid ""
"All of the options without an explanation in the above list have the same "
"meaning they do for normal Django fields. See the :doc:`field documentation "
"</ref/models/fields>` for examples and details."
msgstr ""

# 837d562c07e640b5b6cdb213e3868d4b
#: ../../howto/custom-model-fields.txt:234
msgid "The ``SubfieldBase`` metaclass"
msgstr ""

# 0a48cbf7bc3f4902a1923317e5536d86
#: ../../howto/custom-model-fields.txt:238
msgid ""
"As we indicated in the introduction_, field subclasses are often needed for "
"two reasons: either to take advantage of a custom database column type, or "
"to handle complex Python types. Obviously, a combination of the two is also "
"possible. If you're only working with custom database column types and your "
"model fields appear in Python as standard Python types direct from the "
"database backend, you don't need to worry about this section."
msgstr ""

# 73cc303b10e44969908f10192f16bbc9
#: ../../howto/custom-model-fields.txt:245
msgid ""
"If you're handling custom Python types, such as our ``Hand`` class, we need "
"to make sure that when Django initializes an instance of our model and "
"assigns a database value to our custom field attribute, we convert that "
"value into the appropriate Python object. The details of how this happens "
"internally are a little complex, but the code you need to write in your "
"``Field`` class is simple: make sure your field subclass uses a special "
"metaclass:"
msgstr ""

# 72dbf343afa94368bc3f17e7b5101f37
# 4a7657c551b94ca6bd1a860fcab5e763
# 07e6bf10b12b4341966c2c99c7093566
# e429f5df97ee4062bb55fc17b25aa92c
#: ../../howto/custom-model-fields.txt:252
#: ../../howto/custom-model-fields.txt:346
#: ../../howto/custom-model-fields.txt:470
#: ../../howto/custom-model-fields.txt:653
msgid "For example::"
msgstr ""

# 4e9790da96904580a1e3e2ccd38449f1
#: ../../howto/custom-model-fields.txt:263
msgid ""
"This ensures that the :meth:`.to_python` method, documented below, will "
"always be called when the attribute is initialized."
msgstr ""

# 6a9ac126203e4a93bc6b4a05c3b75fc2
#: ../../howto/custom-model-fields.txt:267
msgid "ModelForms and custom fields"
msgstr ""

# 091168ca29184579b401d3b4efab0b18
#: ../../howto/custom-model-fields.txt:269
msgid ""
"If you use :class:`~django.db.models.SubfieldBase`, :meth:`.to_python` will "
"be called every time an instance of the field is assigned a value. This "
"means that whenever a value may be assigned to the field, you need to ensure "
"that it will be of the correct datatype, or that you handle any exceptions."
msgstr ""

# 7639b7eed7c64263b4be45085b5d2a58
#: ../../howto/custom-model-fields.txt:275
msgid ""
"This is especially important if you use :doc:`ModelForms </topics/forms/"
"modelforms>`. When saving a ModelForm, Django will use form values to "
"instantiate model instances. However, if the cleaned form data can't be used "
"as valid input to the field, the normal form validation process will break."
msgstr ""

# 70196fe2bdb347b2b6f60361d3f7f7b5
#: ../../howto/custom-model-fields.txt:281
msgid ""
"Therefore, you must ensure that the form field used to represent your custom "
"field performs whatever input validation and data cleaning is necessary to "
"convert user-provided form input into a `to_python()`-compatible model field "
"value. This may require writing a custom form field, and/or implementing "
"the :meth:`.formfield` method on your field to return a form field class "
"whose `to_python()` returns the correct datatype."
msgstr ""

# c698e25885444b20b900e41c6ad17055
#: ../../howto/custom-model-fields.txt:290
msgid "Documenting your custom field"
msgstr ""

# ff79d71fdb4d4823806d1b40bb78fd26
#: ../../howto/custom-model-fields.txt:294
msgid ""
"As always, you should document your field type, so users will know what it "
"is. In addition to providing a docstring for it, which is useful for "
"developers, you can also allow users of the admin app to see a short "
"description of the field type via the :doc:`django.contrib.admindocs </ref/"
"contrib/admin/admindocs>` application. To do this simply provide descriptive "
"text in a ``description`` class attribute of your custom field. In the above "
"example, the description displayed by the ``admindocs`` application for a "
"``HandField`` will be 'A hand of cards (bridge style)'."
msgstr ""

# cdfd84e9a2884719b3eb01a234fbba0e
#: ../../howto/custom-model-fields.txt:304
msgid "Useful methods"
msgstr ""

# 4dd8d9ba755646ffb27197828216b921
#: ../../howto/custom-model-fields.txt:306
msgid ""
"Once you've created your :class:`~django.db.models.Field` subclass and set "
"up the ``__metaclass__``, you might consider overriding a few standard "
"methods, depending on your field's behavior. The list of methods below is in "
"approximately decreasing order of importance, so start from the top."
msgstr ""

# 80adaa592cea4df99b3cf65d26850be5
#: ../../howto/custom-model-fields.txt:312
msgid "Custom database types"
msgstr ""

# 16fe7e4becad4aa7855b28260534a863
#: ../../howto/custom-model-fields.txt:319
msgid ""
"Returns the database column data type for the :class:`~django.db.models."
"Field`, taking into account the connection object, and the settings "
"associated with it."
msgstr ""

# 4748713ca00b4b1d8896d8a56eac5d99
#: ../../howto/custom-model-fields.txt:322
msgid ""
"Say you've created a PostgreSQL custom type called ``mytype``. You can use "
"this field with Django by subclassing ``Field`` and implementing the :meth:`."
"db_type` method, like so::"
msgstr ""

# 2d8880aaa5b6482091dd263503843ba6
#: ../../howto/custom-model-fields.txt:332
msgid ""
"Once you have ``MytypeField``, you can use it in any model, just like any "
"other ``Field`` type::"
msgstr ""

# d5311c38c32b437ba3d4d78e30a8d2f9
#: ../../howto/custom-model-fields.txt:340
msgid ""
"If you aim to build a database-agnostic application, you should account for "
"differences in database column types. For example, the date/time column type "
"in PostgreSQL is called ``timestamp``, while the same column in MySQL is "
"called ``datetime``. The simplest way to handle this in a :meth:`.db_type` "
"method is to check the ``connection.settings_dict['ENGINE']`` attribute."
msgstr ""

# 08d35ad93a1d4072b6308ccae51543cf
#: ../../howto/custom-model-fields.txt:355
msgid ""
"The :meth:`.db_type` method is only called by Django when the framework "
"constructs the ``CREATE TABLE`` statements for your application -- that is, "
"when you first create your tables. It's not called at any other time, so it "
"can afford to execute slightly complex code, such as the ``connection."
"settings_dict`` check in the above example."
msgstr ""

# 6ca66a77ea2a4d5c9cca5b48ae4ae608
#: ../../howto/custom-model-fields.txt:361
msgid ""
"Some database column types accept parameters, such as ``CHAR(25)``, where "
"the parameter ``25`` represents the maximum column length. In cases like "
"these, it's more flexible if the parameter is specified in the model rather "
"than being hard-coded in the ``db_type()`` method. For example, it wouldn't "
"make much sense to have a ``CharMaxlength25Field``, shown here::"
msgstr ""

# 6a0a946db1064596966c5a338c323803
#: ../../howto/custom-model-fields.txt:377
msgid ""
"The better way of doing this would be to make the parameter specifiable at "
"run time -- i.e., when the class is instantiated. To do that, just "
"implement :meth:`django.db.models.Field.__init__`, like so::"
msgstr ""

# 7a4515bc30424d00a469d1c90ee436e5
#: ../../howto/custom-model-fields.txt:395
msgid ""
"Finally, if your column requires truly complex SQL setup, return ``None`` "
"from :meth:`.db_type`. This will cause Django's SQL creation code to skip "
"over this field. You are then responsible for creating the column in the "
"right table in some other way, of course, but this gives you a way to tell "
"Django to get out of the way."
msgstr ""

# 697c1157421d4af7b2231d136845a1f0
#: ../../howto/custom-model-fields.txt:402
msgid "Converting database values to Python objects"
msgstr ""

# cc6da164bd39493ca998daa1f4fa9495
#: ../../howto/custom-model-fields.txt:406
msgid ""
"Converts a value as returned by your database (or a serializer) to a Python "
"object."
msgstr ""

# fc34f50933524ea8a5ccc2b46e18466e
#: ../../howto/custom-model-fields.txt:409
msgid ""
"The default implementation simply returns ``value``, for the common case in "
"which the database backend already returns data in the correct format (as a "
"Python string, for example)."
msgstr ""

# 40e52eec697f42a7b556e4b913353ce6
#: ../../howto/custom-model-fields.txt:413
msgid ""
"If your custom :class:`~django.db.models.Field` class deals with data "
"structures that are more complex than strings, dates, integers or floats, "
"then you'll need to override this method. As a general rule, the method "
"should deal gracefully with any of the following arguments:"
msgstr ""

# b9e1abdf41c64a87a6250f86146a8926
#: ../../howto/custom-model-fields.txt:418
msgid ""
"An instance of the correct type (e.g., ``Hand`` in our ongoing example)."
msgstr ""

# 944690e58c1f41f1a1cb9942382f263f
#: ../../howto/custom-model-fields.txt:420
msgid "A string (e.g., from a deserializer)."
msgstr ""

# 2a2662c91cd24e419b637faa6108fedf
#: ../../howto/custom-model-fields.txt:422
msgid "Whatever the database returns for the column type you're using."
msgstr ""

# c23e45607f614709913b51e8f0662d86
#: ../../howto/custom-model-fields.txt:424
msgid ""
"In our ``HandField`` class, we're storing the data as a VARCHAR field in the "
"database, so we need to be able to process strings and ``Hand`` instances "
"in :meth:`.to_python`::"
msgstr ""

# b890b797b051406b879e221f219784fc
#: ../../howto/custom-model-fields.txt:443
msgid ""
"Notice that we always return a ``Hand`` instance from this method. That's "
"the Python object type we want to store in the model's attribute."
msgstr ""

# a0f4e313b7bb4422a0dea74c2f70c064
#: ../../howto/custom-model-fields.txt:446
msgid ""
"**Remember:** If your custom field needs the :meth:`to_python` method to be "
"called when it is created, you should be using `The SubfieldBase metaclass`_ "
"mentioned earlier. Otherwise :meth:`.to_python` won't be called "
"automatically."
msgstr ""

# 200331e73478413e88cfbb77c737e209
#: ../../howto/custom-model-fields.txt:452
msgid "Converting Python objects to query values"
msgstr ""

# dc91287be0b447f99d91249d162edcf4
#: ../../howto/custom-model-fields.txt:459
msgid ""
"This is the reverse of :meth:`.to_python` when working with the database "
"backends (as opposed to serialization). The ``value`` parameter is the "
"current value of the model's attribute (a field has no reference to its "
"containing model, so it cannot retrieve the value itself), and the method "
"should return data in a format that has been prepared for use as a parameter "
"in a query."
msgstr ""

# ff7d28206b4f4727baba5cf9a564e259
#: ../../howto/custom-model-fields.txt:466
msgid ""
"This conversion should *not* include any database-specific conversions. If "
"database-specific conversions are required, they should be made in the call "
"to :meth:`.get_db_prep_value`."
msgstr ""

# f75d6903482a4796ac5b353da6eba153
#: ../../howto/custom-model-fields.txt:480
msgid "Converting query values to database values"
msgstr ""

# 3139e6376d734926b890785125f1f66e
#: ../../howto/custom-model-fields.txt:487
msgid ""
"Some data types (for example, dates) need to be in a specific format before "
"they can be used by a database backend. :meth:`.get_db_prep_value` is the "
"method where those conversions should be made. The specific connection that "
"will be used for the query is passed as the ``connection`` parameter. This "
"allows you to use backend-specific conversion logic if it is required."
msgstr ""

# 5044d691ee674d3da4ead9a5c9194597
#: ../../howto/custom-model-fields.txt:494
msgid ""
"The ``prepared`` argument describes whether or not the value has already "
"been passed through :meth:`.get_prep_value` conversions. When ``prepared`` "
"is False, the default implementation of :meth:`.get_db_prep_value` will "
"call :meth:`.get_prep_value` to do initial data conversions before "
"performing any database-specific processing."
msgstr ""

# e111bb74140c4d2185157f5ba65d2477
#: ../../howto/custom-model-fields.txt:506
msgid ""
"Same as the above, but called when the Field value must be *saved* to the "
"database. As the default implementation just calls :meth:`."
"get_db_prep_value`, you shouldn't need to implement this method unless your "
"custom field needs a special conversion when being saved that is not the "
"same as the conversion used for normal query parameters (which is "
"implemented by :meth:`.get_db_prep_value`)."
msgstr ""

# 219d34adf8a74004ad7ae27d6089a302
#: ../../howto/custom-model-fields.txt:514
msgid "Preprocessing values before saving"
msgstr ""

# 3d558ab548b4408e9f5d20ce53de94a6
#: ../../howto/custom-model-fields.txt:518
msgid ""
"This method is called just prior to :meth:`.get_db_prep_save` and should "
"return the value of the appropriate attribute from ``model_instance`` for "
"this field. The attribute name is in ``self.attname`` (this is set up by :"
"class:`~django.db.models.Field`). If the model is being saved to the "
"database for the first time, the ``add`` parameter will be ``True``, "
"otherwise it will be ``False``."
msgstr ""

# 99bcf727ea6048db870b9d75ea460666
#: ../../howto/custom-model-fields.txt:525
msgid ""
"You only need to override this method if you want to preprocess the value "
"somehow, just before saving. For example, Django's :class:`~django.db.models."
"DateTimeField` uses this method to set the attribute correctly in the case "
"of :attr:`~django.db.models.Field.auto_now` or :attr:`~django.db.models."
"Field.auto_now_add`."
msgstr ""

# 88e25b9df5c14c0ba2aca129da2d823b
#: ../../howto/custom-model-fields.txt:531
msgid ""
"If you do override this method, you must return the value of the attribute "
"at the end. You should also update the model's attribute if you make any "
"changes to the value so that code holding references to the model will "
"always see the correct value."
msgstr ""

# 4e591e0b60e141629b184d7106660e0f
#: ../../howto/custom-model-fields.txt:537
msgid "Preparing values for use in database lookups"
msgstr ""

# 3067dead971740e88943af8417eb4e51
#: ../../howto/custom-model-fields.txt:539
msgid ""
"As with value conversions, preparing a value for database lookups is a two "
"phase process."
msgstr ""

# ff69ae53590a4dc2996638162cf93455
#: ../../howto/custom-model-fields.txt:547
msgid ""
":meth:`.get_prep_lookup` performs the first phase of lookup preparation, "
"performing generic data validity checks"
msgstr ""

# e92c95b2c87d47baa116b17cb5da6cba
#: ../../howto/custom-model-fields.txt:550
msgid ""
"Prepares the ``value`` for passing to the database when used in a lookup (a "
"``WHERE`` constraint in SQL). The ``lookup_type`` will be one of the valid "
"Django filter lookups: ``exact``, ``iexact``, ``contains``, ``icontains``, "
"``gt``, ``gte``, ``lt``, ``lte``, ``in``, ``startswith``, ``istartswith``, "
"``endswith``, ``iendswith``, ``range``, ``year``, ``month``, ``day``, "
"``isnull``, ``search``, ``regex``, and ``iregex``."
msgstr ""

# b0f94ee3dd0648c2a00f353e785bad0c
#: ../../howto/custom-model-fields.txt:557
msgid ""
"Your method must be prepared to handle all of these ``lookup_type`` values "
"and should raise either a ``ValueError`` if the ``value`` is of the wrong "
"sort (a list when you were expecting an object, for example) or a "
"``TypeError`` if your field does not support that type of lookup. For many "
"fields, you can get by with handling the lookup types that need special "
"handling for your field and pass the rest to the :meth:`.get_db_prep_lookup` "
"method of the parent class."
msgstr ""

# f530444333814a93aa478347755ffc81
#: ../../howto/custom-model-fields.txt:564
msgid ""
"If you needed to implement ``get_db_prep_save()``, you will usually need to "
"implement ``get_prep_lookup()``. If you don't, ``get_prep_value`` will be "
"called by the default implementation, to manage ``exact``, ``gt``, ``gte``, "
"``lt``, ``lte``, ``in`` and ``range`` lookups."
msgstr ""

# 64797d6aa9044e92afb0a00b6cf3e1f7
#: ../../howto/custom-model-fields.txt:569
msgid ""
"You may also want to implement this method to limit the lookup types that "
"could be used with your custom field type."
msgstr ""

# a355b75aa9994d7f9c9e3d0116fbdd59
#: ../../howto/custom-model-fields.txt:572
msgid ""
"Note that, for ``range`` and ``in`` lookups, ``get_prep_lookup`` will "
"receive a list of objects (presumably of the right type) and will need to "
"convert them to a list of things of the right type for passing to the "
"database. Most of the time, you can reuse ``get_prep_value()``, or at least "
"factor out some common pieces."
msgstr ""

# 843ac77442e54ca0908c197b819f4757
#: ../../howto/custom-model-fields.txt:578
msgid ""
"For example, the following code implements ``get_prep_lookup`` to limit the "
"accepted lookup types to ``exact`` and ``in``::"
msgstr ""

# a95f0ffca5bf42b1ab5211eec3415ff0
#: ../../howto/custom-model-fields.txt:598
msgid ""
"Performs any database-specific data conversions required by a lookup. As "
"with :meth:`.get_db_prep_value`, the specific connection that will be used "
"for the query is passed as the ``connection`` parameter. The ``prepared`` "
"argument describes whether the value has already been prepared with :meth:`."
"get_prep_lookup`."
msgstr ""

# 5071cdd6adae4d5187ca3068bae37e34
#: ../../howto/custom-model-fields.txt:605
msgid "Specifying the form field for a model field"
msgstr ""

# 7efe7cb111724265832fa5a312cf3d31
#: ../../howto/custom-model-fields.txt:609
msgid ""
"Returns the default form field to use when this field is displayed in a "
"model. This method is called by the :class:`~django.forms.ModelForm` helper."
msgstr ""

# da22139b4a95478a80731c91aa35f6db
#: ../../howto/custom-model-fields.txt:612
msgid ""
"All of the ``kwargs`` dictionary is passed directly to the form field's :"
"meth:`~django.forms.Field__init__` method. Normally, all you need to do is "
"set up a good default for the ``form_class`` argument and then delegate "
"further handling to the parent class. This might require you to write a "
"custom form field (and even a form widget). See the :doc:`forms "
"documentation </topics/forms/index>` for information about this, and take a "
"look at the code in :mod:`django.contrib.localflavor` for some examples of "
"custom widgets."
msgstr ""

# 5a36246de61b47bc8b0efc46eb9f0dcd
#: ../../howto/custom-model-fields.txt:620
msgid ""
"Continuing our ongoing example, we can write the :meth:`.formfield` method "
"as::"
msgstr ""

# 358d98ef62904163a79eb5358ec18e8c
#: ../../howto/custom-model-fields.txt:632
msgid ""
"This assumes we've imported a ``MyFormField`` field class (which has its own "
"default widget). This document doesn't cover the details of writing custom "
"form fields."
msgstr ""

# cf17691b5c8440feb694962913072c69
#: ../../howto/custom-model-fields.txt:640
msgid "Emulating built-in field types"
msgstr ""

# 17dd859a9773425b808127faf49b4c0b
#: ../../howto/custom-model-fields.txt:644
msgid ""
"Returns a string giving the name of the :class:`~django.db.models.Field` "
"subclass we are emulating at the database level. This is used to determine "
"the type of database column for simple cases."
msgstr ""

# 34b718563c1241c0bca9e7900d458a7e
#: ../../howto/custom-model-fields.txt:648
msgid ""
"If you have created a :meth:`.db_type` method, you don't need to worry "
"about :meth:`.get_internal_type` -- it won't be used much. Sometimes, "
"though, your database storage is similar in type to some other field, so you "
"can use that other field's logic to create the right column."
msgstr ""

# 77dc092c8b2246bda3cf595e1d701ecc
#: ../../howto/custom-model-fields.txt:661
msgid ""
"No matter which database backend we are using, this will mean that "
"``syncdb`` and other SQL commands create the right column type for storing a "
"string."
msgstr ""

# 0ec31bbba45240818a1e5443a72b719a
#: ../../howto/custom-model-fields.txt:664
msgid ""
"If :meth:`.get_internal_type` returns a string that is not known to Django "
"for the database backend you are using -- that is, it doesn't appear in "
"``django.db.backends.<db_name>.creation.DATA_TYPES`` -- the string will "
"still be used by the serializer, but the default :meth:`.db_type` method "
"will return ``None``. See the documentation of :meth:`.db_type` for reasons "
"why this might be useful. Putting a descriptive string in as the type of the "
"field for the serializer is a useful idea if you're ever going to be using "
"the serializer output in some other place, outside of Django."
msgstr ""

# 4cdf8d4cffc54b77b5dc599ca6fd5aeb
#: ../../howto/custom-model-fields.txt:674
msgid "Converting field data for serialization"
msgstr ""

# e14157b6a3d1495e92065cc70299e11c
#: ../../howto/custom-model-fields.txt:678
msgid ""
"This method is used by the serializers to convert the field into a string "
"for output. Calling :meth:`Field._get_val_from_obj(obj)` is the best way to "
"get the value to serialize. For example, since our ``HandField`` uses "
"strings for its data storage anyway, we can reuse some existing conversion "
"code::"
msgstr ""

# dcdbe0379293443793b66309175d07cf
#: ../../howto/custom-model-fields.txt:691
msgid "Some general advice"
msgstr ""

# 11181a558c8a4fe7a3bbb02159abe5dc
#: ../../howto/custom-model-fields.txt:693
msgid ""
"Writing a custom field can be a tricky process, particularly if you're doing "
"complex conversions between your Python types and your database and "
"serialization formats. Here are a couple of tips to make things go more "
"smoothly:"
msgstr ""

# d19a64d316944b2aaf85c1a52bfee0f0
#: ../../howto/custom-model-fields.txt:698
msgid ""
"Look at the existing Django fields (in :file:`django/db/models/fields/"
"__init__.py`) for inspiration. Try to find a field that's similar to what "
"you want and extend it a little bit, instead of creating an entirely new "
"field from scratch."
msgstr ""

# ef8cc897e1eb49958c61762186806877
#: ../../howto/custom-model-fields.txt:703
msgid ""
"Put a :meth:`__str__` or :meth:`__unicode__` method on the class you're "
"wrapping up as a field. There are a lot of places where the default behavior "
"of the field code is to call :func:`~django.utils.encoding.force_unicode` on "
"the value. (In our examples in this document, ``value`` would be a ``Hand`` "
"instance, not a ``HandField``). So if your :meth:`__unicode__` method "
"automatically converts to the string form of your Python object, you can "
"save yourself a lot of work."
msgstr ""

# ac27415e99f54f269e5fce60749f0842
#: ../../howto/custom-model-fields.txt:714
msgid "Writing a ``FileField`` subclass"
msgstr ""

# 71f33bee0f29476e8dd7320f04b133f1
#: ../../howto/custom-model-fields.txt:716
msgid ""
"In addition to the above methods, fields that deal with files have a few "
"other special requirements which must be taken into account. The majority of "
"the mechanics provided by ``FileField``, such as controlling database "
"storage and retrieval, can remain unchanged, leaving subclasses to deal with "
"the challenge of supporting a particular type of file."
msgstr ""

# c37e32cf27d546fa81856e6a1bda9785
#: ../../howto/custom-model-fields.txt:722
msgid ""
"Django provides a ``File`` class, which is used as a proxy to the file's "
"contents and operations. This can be subclassed to customize how the file is "
"accessed, and what methods are available. It lives at ``django.db.models."
"fields.files``, and its default behavior is explained in the :doc:`file "
"documentation </ref/files/file>`."
msgstr ""

# cc15b9c562144b7c8350a99ce87e33eb
#: ../../howto/custom-model-fields.txt:728
msgid ""
"Once a subclass of ``File`` is created, the new ``FileField`` subclass must "
"be told to use it. To do so, simply assign the new ``File`` subclass to the "
"special ``attr_class`` attribute of the ``FileField`` subclass."
msgstr ""

# b09e9b39834349b19f2ada5a5708d463
#: ../../howto/custom-model-fields.txt:733
msgid "A few suggestions"
msgstr ""

# b49b75a1355c44699607147fce570f19
#: ../../howto/custom-model-fields.txt:735
msgid ""
"In addition to the above details, there are a few guidelines which can "
"greatly improve the efficiency and readability of the field's code."
msgstr ""

# f78ae92552d344bf8661464261741a0e
#: ../../howto/custom-model-fields.txt:738
msgid ""
"The source for Django's own ``ImageField`` (in ``django/db/models/fields/"
"files.py``) is a great example of how to subclass ``FileField`` to support a "
"particular type of file, as it incorporates all of the techniques described "
"above."
msgstr ""

# 8de67d294673470fa65fd371dbf45896
#: ../../howto/custom-model-fields.txt:743
msgid ""
"Cache file attributes wherever possible. Since files may be stored in remote "
"storage systems, retrieving them may cost extra time, or even money, that "
"isn't always necessary. Once a file is retrieved to obtain some data about "
"its content, cache as much of that data as possible to reduce the number of "
"times the file must be retrieved on subsequent calls for that information."
msgstr ""

# df680229b99244a6b0bf18bdd3179242
#: ../../howto/custom-template-tags.txt:3
msgid "Custom template tags and filters"
msgstr ""

# c48334265c8e4149a4c9057970da0ba4
#: ../../howto/custom-template-tags.txt:5
msgid ""
"Django's template system comes with a wide variety of :doc:`built-in tags "
"and filters </ref/templates/builtins>` designed to address the presentation "
"logic needs of your application. Nevertheless, you may find yourself needing "
"functionality that is not covered by the core set of template primitives. "
"You can extend the template engine by defining custom tags and filters using "
"Python, and then make them available to your templates using the :ttag:`{% "
"load %}<load>` tag."
msgstr ""

# 8eb3fd7c837045e7955045d62845054c
#: ../../howto/custom-template-tags.txt:14
msgid "Code layout"
msgstr ""

# f36f5afc639f45a189025710eae93a8f
#: ../../howto/custom-template-tags.txt:16
msgid ""
"Custom template tags and filters must live inside a Django app. If they "
"relate to an existing app it makes sense to bundle them there; otherwise, "
"you should create a new app to hold them."
msgstr ""

# 88d0b54ce0414c37bd8ce0f1df377369
#: ../../howto/custom-template-tags.txt:20
msgid ""
"The app should contain a ``templatetags`` directory, at the same level as "
"``models.py``, ``views.py``, etc. If this doesn't already exist, create it - "
"don't forget the ``__init__.py`` file to ensure the directory is treated as "
"a Python package."
msgstr ""

# 34604f958a7443e6aedb28c4687f5dac
#: ../../howto/custom-template-tags.txt:25
msgid ""
"Your custom tags and filters will live in a module inside the "
"``templatetags`` directory. The name of the module file is the name you'll "
"use to load the tags later, so be careful to pick a name that won't clash "
"with custom tags and filters in another app."
msgstr ""

# 237b8e26634e4af79eb9fe7f1487a398
#: ../../howto/custom-template-tags.txt:30
msgid ""
"For example, if your custom tags/filters are in a file called ``poll_extras."
"py``, your app layout might look like this::"
msgstr ""

# 495041f8ea1a489ba6ee49a821437b75
#: ../../howto/custom-template-tags.txt:40
msgid "And in your template you would use the following:"
msgstr ""

# d0b89d9619194fa1b36f7a468a4a585f
#: ../../howto/custom-template-tags.txt:46
msgid ""
"The app that contains the custom tags must be in :setting:`INSTALLED_APPS` "
"in order for the :ttag:`{% load %}<load>` tag to work. This is a security "
"feature: It allows you to host Python code for many template libraries on a "
"single host machine without enabling access to all of them for every Django "
"installation."
msgstr ""

# 1b0868a6538342a796916ee36289789e
#: ../../howto/custom-template-tags.txt:51
msgid ""
"There's no limit on how many modules you put in the ``templatetags`` "
"package. Just keep in mind that a :ttag:`{% load %}<load>` statement will "
"load tags/filters for the given Python module name, not the name of the app."
msgstr ""

# acac89c65ebe40489477ecae516a58fa
#: ../../howto/custom-template-tags.txt:55
msgid ""
"To be a valid tag library, the module must contain a module-level variable "
"named ``register`` that is a ``template.Library`` instance, in which all the "
"tags and filters are registered. So, near the top of your module, put the "
"following:"
msgstr ""

# 875c563d37ed476f948655af869b80d2
#: ../../howto/custom-template-tags.txt:69
msgid ""
"For a ton of examples, read the source code for Django's default filters and "
"tags. They're in ``django/template/defaultfilters.py`` and ``django/template/"
"defaulttags.py``, respectively."
msgstr ""

# d7b158db352746cfabedec9b6b1ca81b
#: ../../howto/custom-template-tags.txt:73
msgid "For more information on the :ttag:`load` tag, read its documentation."
msgstr ""

# 375fbe8c891e450a8ce9bab30c9d26a1
#: ../../howto/custom-template-tags.txt:76
msgid "Writing custom template filters"
msgstr ""

# 35fc6953a3fc456cbbc61e21897b3ad4
#: ../../howto/custom-template-tags.txt:78
msgid ""
"Custom filters are just Python functions that take one or two arguments:"
msgstr ""

# 478f31e4d8dd459388be9f29c6548012
#: ../../howto/custom-template-tags.txt:80
msgid "The value of the variable (input) -- not necessarily a string."
msgstr ""

# 22f099d4cc1f4dc0814271eec46380bf
#: ../../howto/custom-template-tags.txt:81
msgid ""
"The value of the argument -- this can have a default value, or be left out "
"altogether."
msgstr ""

# dc1e9b06d5a34af3a1119a71cc853727
#: ../../howto/custom-template-tags.txt:84
msgid ""
"For example, in the filter ``{{ var|foo:\"bar\" }}``, the filter ``foo`` "
"would be passed the variable ``var`` and the argument ``\"bar\"``."
msgstr ""

# 1ba1a763997641688d4537d87cfaba83
#: ../../howto/custom-template-tags.txt:87
msgid ""
"Filter functions should always return something. They shouldn't raise "
"exceptions. They should fail silently. In case of error, they should return "
"either the original input or an empty string -- whichever makes more sense."
msgstr ""

# b174c02ae09448d0a931a06fb2b5d607
#: ../../howto/custom-template-tags.txt:91
msgid "Here's an example filter definition:"
msgstr ""

# 7eec163845c64d13a0a530d39c839236
#: ../../howto/custom-template-tags.txt:99
msgid "And here's an example of how that filter would be used:"
msgstr ""

# 0cab4bc8f7094d2bb66ba5acbc567fae
#: ../../howto/custom-template-tags.txt:105
msgid ""
"Most filters don't take arguments. In this case, just leave the argument out "
"of your function. Example:"
msgstr ""

# f311d2f0729e4f4b8d38af061798c7fc
#: ../../howto/custom-template-tags.txt:115
msgid "Registering custom filters"
msgstr ""

# d15acb310af54f749c1be7151c719054
#: ../../howto/custom-template-tags.txt:117
msgid ""
"Once you've written your filter definition, you need to register it with "
"your ``Library`` instance, to make it available to Django's template "
"language:"
msgstr ""

# 40f92aa0301b465c8a1d414f2cb46812
#: ../../howto/custom-template-tags.txt:125
msgid "The ``Library.filter()`` method takes two arguments:"
msgstr ""

# 139783c2169e4c0f927cf62d4254d24c
#: ../../howto/custom-template-tags.txt:127
msgid "The name of the filter -- a string."
msgstr ""

# 3abbc68d0817446d80886080c0d565e4
# 494b8f9fef224419bc1d6b66f27520ff
#: ../../howto/custom-template-tags.txt:128
#: ../../howto/custom-template-tags.txt:637
msgid ""
"The compilation function -- a Python function (not the name of the function "
"as a string)."
msgstr ""

# 2f0a081bf67142a7a3840211d23dfa1a
#: ../../howto/custom-template-tags.txt:131
msgid "You can use ``register.filter()`` as a decorator instead:"
msgstr ""

# af4f684bc4bf408b9a25c1cdf2c4c8ad
#: ../../howto/custom-template-tags.txt:143
msgid ""
"If you leave off the ``name`` argument, as in the second example above, "
"Django will use the function's name as the filter name."
msgstr ""

# 047f5a6a342f468d97bb88958d847078
#: ../../howto/custom-template-tags.txt:146
msgid ""
"Finally, ``register.filter()`` also accepts two keyword arguments, "
"``is_safe`` and ``needs_autoescape``, described in :ref:`filters and auto-"
"escaping <filters-auto-escaping>` below."
msgstr ""

# ae45046e40534ad59c0dad2e23676fa6
#: ../../howto/custom-template-tags.txt:151
msgid "Template filters that expect strings"
msgstr ""

# af73cef15d884e78950acd4f390e0b8b
#: ../../howto/custom-template-tags.txt:153
msgid ""
"If you're writing a template filter that only expects a string as the first "
"argument, you should use the decorator ``stringfilter``. This will convert "
"an object to its string value before being passed to your function:"
msgstr ""

# 1afef8797ecc4653a960a2efe8b41404
#: ../../howto/custom-template-tags.txt:169
msgid ""
"This way, you'll be able to pass, say, an integer to this filter, and it "
"won't cause an ``AttributeError`` (because integers don't have ``lower()`` "
"methods)."
msgstr ""

# 84bcb9ea547040a186775dbbe0deb9c7
#: ../../howto/custom-template-tags.txt:176
msgid "Filters and auto-escaping"
msgstr ""

# 9e1a580bb1b84ad0a95c15dff5897ab3
#: ../../howto/custom-template-tags.txt:178
msgid ""
"When writing a custom filter, give some thought to how the filter will "
"interact with Django's auto-escaping behavior. Note that three types of "
"strings can be passed around inside the template code:"
msgstr ""

# 2fb49269e0c340ac84f46a7da6f5a75e
#: ../../howto/custom-template-tags.txt:182
msgid ""
"**Raw strings** are the native Python ``str`` or ``unicode`` types. On "
"output, they're escaped if auto-escaping is in effect and presented "
"unchanged, otherwise."
msgstr ""

# 74edfe3eba604e9f92ff839ecd0eab87
#: ../../howto/custom-template-tags.txt:186
msgid ""
"**Safe strings** are strings that have been marked safe from further "
"escaping at output time. Any necessary escaping has already been done. "
"They're commonly used for output that contains raw HTML that is intended to "
"be interpreted as-is on the client side."
msgstr ""

# 0d62b05571f84fd2af7e758fb8c2fb7a
#: ../../howto/custom-template-tags.txt:191
msgid ""
"Internally, these strings are of type ``SafeString`` or ``SafeUnicode``. "
"They share a common base class of ``SafeData``, so you can test for them "
"using code like:"
msgstr ""

# 311f83cb2c284a469cf9a929f5583838
#: ../../howto/custom-template-tags.txt:201
msgid ""
"**Strings marked as \"needing escaping\"** are *always* escaped on output, "
"regardless of whether they are in an :ttag:`autoescape` block or not. These "
"strings are only escaped once, however, even if auto-escaping applies."
msgstr ""

# 1e6de457efd64cabaecaa415c3455031
#: ../../howto/custom-template-tags.txt:206
msgid ""
"Internally, these strings are of type ``EscapeString`` or ``EscapeUnicode``. "
"Generally you don't have to worry about these; they exist for the "
"implementation of the :tfilter:`escape` filter."
msgstr ""

# 76f66071ac6d46f8bdc585aaece6ad2e
#: ../../howto/custom-template-tags.txt:210
msgid "Template filter code falls into one of two situations:"
msgstr ""

# 0ddfb3ada69e4950875172208332b6e7
#: ../../howto/custom-template-tags.txt:212
msgid ""
"Your filter does not introduce any HTML-unsafe characters (``<``, ``>``, "
"``'``, ``\"`` or ``&``) into the result that were not already present. In "
"this case, you can let Django take care of all the auto-escaping handling "
"for you. All you need to do is set the ``is_safe`` flag to ``True`` when you "
"register your filter function, like so:"
msgstr ""

# 29452d7132744098b5e44b994b3185ed
#: ../../howto/custom-template-tags.txt:224
msgid ""
"This flag tells Django that if a \"safe\" string is passed into your filter, "
"the result will still be \"safe\" and if a non-safe string is passed in, "
"Django will automatically escape it, if necessary."
msgstr ""

# 5e3ed47562254b38b24c9da355f24471
#: ../../howto/custom-template-tags.txt:228
msgid ""
"You can think of this as meaning \"this filter is safe -- it doesn't "
"introduce any possibility of unsafe HTML.\""
msgstr ""

# 1987d89e507046d39f1b3b683ff29708
#: ../../howto/custom-template-tags.txt:231
msgid ""
"The reason ``is_safe`` is necessary is because there are plenty of normal "
"string operations that will turn a ``SafeData`` object back into a normal "
"``str`` or ``unicode`` object and, rather than try to catch them all, which "
"would be very difficult, Django repairs the damage after the filter has "
"completed."
msgstr ""

# f7fc6388e2944fa6948cf06f37596dcd
#: ../../howto/custom-template-tags.txt:237
msgid ""
"For example, suppose you have a filter that adds the string ``xx`` to the "
"end of any input. Since this introduces no dangerous HTML characters to the "
"result (aside from any that were already present), you should mark your "
"filter with ``is_safe``:"
msgstr ""

# 74ea0e5268b04c05abed2a99dc95006d
#: ../../howto/custom-template-tags.txt:248
msgid ""
"When this filter is used in a template where auto-escaping is enabled, "
"Django will escape the output whenever the input is not already marked as "
"\"safe\"."
msgstr ""

# f20ed05450a84a2ba5e8d45c9d143a34
#: ../../howto/custom-template-tags.txt:252
msgid ""
"By default, ``is_safe`` is ``False``, and you can omit it from any filters "
"where it isn't required."
msgstr ""

# 817082c85f4b43c2b65d0be7c55fcaa6
#: ../../howto/custom-template-tags.txt:255
msgid ""
"Be careful when deciding if your filter really does leave safe strings as "
"safe. If you're *removing* characters, you might inadvertently leave "
"unbalanced HTML tags or entities in the result. For example, removing a "
"``>`` from the input might turn ``<a>`` into ``<a``, which would need to be "
"escaped on output to avoid causing problems. Similarly, removing a semicolon "
"(``;``) can turn ``&amp;`` into ``&amp``, which is no longer a valid entity "
"and thus needs further escaping. Most cases won't be nearly this tricky, but "
"keep an eye out for any problems like that when reviewing your code."
msgstr ""

# 175d298247894f96af86a22d1f2b9edb
#: ../../howto/custom-template-tags.txt:265
msgid ""
"Marking a filter ``is_safe`` will coerce the filter's return value to a "
"string.  If your filter should return a boolean or other non-string value, "
"marking it ``is_safe`` will probably have unintended consequences (such as "
"converting a boolean False to the string 'False')."
msgstr ""

# 090f6f41333748b6a8184f60d737ab28
#: ../../howto/custom-template-tags.txt:271
msgid ""
"Alternatively, your filter code can manually take care of any necessary "
"escaping. This is necessary when you're introducing new HTML markup into the "
"result. You want to mark the output as safe from further escaping so that "
"your HTML markup isn't escaped further, so you'll need to handle the input "
"yourself."
msgstr ""

# 5e0afd3452034ca59adc867f34589949
#: ../../howto/custom-template-tags.txt:277
msgid ""
"To mark the output as a safe string, use :func:`django.utils.safestring."
"mark_safe`."
msgstr ""

# 5cfc75a03a694a9fa2b05391f0a07767
#: ../../howto/custom-template-tags.txt:280
msgid ""
"Be careful, though. You need to do more than just mark the output as safe. "
"You need to ensure it really *is* safe, and what you do depends on whether "
"auto-escaping is in effect. The idea is to write filters than can operate in "
"templates where auto-escaping is either on or off in order to make things "
"easier for your template authors."
msgstr ""

# 7024f70d066e4757a9a784706864c3c1
#: ../../howto/custom-template-tags.txt:286
msgid ""
"In order for your filter to know the current auto-escaping state, set the "
"``needs_autoescape`` flag to ``True`` when you register your filter "
"function. (If you don't specify this flag, it defaults to ``False``). This "
"flag tells Django that your filter function wants to be passed an extra "
"keyword argument, called ``autoescape``, that is ``True`` if auto-escaping "
"is in effect and ``False`` otherwise."
msgstr ""

# ac59d191972e46499eb30be081e88c47
#: ../../howto/custom-template-tags.txt:293
msgid ""
"For example, let's write a filter that emphasizes the first character of a "
"string:"
msgstr ""

# d5a248d728b14315bea56378514dddcb
#: ../../howto/custom-template-tags.txt:311
msgid ""
"The ``needs_autoescape`` flag and the ``autoescape`` keyword argument mean "
"that our function will know whether automatic escaping is in effect when the "
"filter is called. We use ``autoescape`` to decide whether the input data "
"needs to be passed through ``django.utils.html.conditional_escape`` or not. "
"(In the latter case, we just use the identity function as the \"escape\" "
"function.) The ``conditional_escape()`` function is like ``escape()`` except "
"it only escapes input that is **not** a ``SafeData`` instance. If a "
"``SafeData`` instance is passed to ``conditional_escape()``, the data is "
"returned unchanged."
msgstr ""

# 2d92f0a01d504df5a007ed4bcf712744
#: ../../howto/custom-template-tags.txt:321
msgid ""
"Finally, in the above example, we remember to mark the result as safe so "
"that our HTML is inserted directly into the template without further "
"escaping."
msgstr ""

# fb00afecba6e4ad88d88ad182a403516
#: ../../howto/custom-template-tags.txt:325
msgid ""
"There's no need to worry about the ``is_safe`` flag in this case (although "
"including it wouldn't hurt anything). Whenever you manually handle the auto-"
"escaping issues and return a safe string, the ``is_safe`` flag won't change "
"anything either way."
msgstr ""

# ac070e8846314fbeb4484545f9bda6ce
#: ../../howto/custom-template-tags.txt:332
msgid ""
"``is_safe`` and ``needs_autoescape`` used to be attributes of the filter "
"function; this syntax is deprecated."
msgstr ""

# c5af21e64c7f45a8844ae143a8178ab0
#: ../../howto/custom-template-tags.txt:353
msgid "Filters and time zones"
msgstr ""

# e0396d9aa9b944bf8513cb4b6b84f7b0
#: ../../howto/custom-template-tags.txt:357
msgid ""
"If you write a custom filter that operates on :class:`~datetime.datetime` "
"objects, you'll usually register it with the ``expects_localtime`` flag set "
"to ``True``:"
msgstr ""

# e398f12b31f4474c9c72e86a032cfd02
#: ../../howto/custom-template-tags.txt:370
msgid ""
"When this flag is set, if the first argument to your filter is a time zone "
"aware datetime, Django will convert it to the current time zone before "
"passing to your filter when appropriate, according to :ref:`rules for time "
"zones conversions in templates <time-zones-in-templates>`."
msgstr ""

# c2b8bc083eb541e8badf4f67b82df58b
#: ../../howto/custom-template-tags.txt:376
msgid "Writing custom template tags"
msgstr ""

# 087babc7f3424afc968ab50bb14dc9c9
#: ../../howto/custom-template-tags.txt:378
msgid "Tags are more complex than filters, because tags can do anything."
msgstr ""

# 7392013246484c1da59919a3156125a4
#: ../../howto/custom-template-tags.txt:381
msgid "A quick overview"
msgstr ""

# c3fef0dbe02c4f568383662fa9e03c44
#: ../../howto/custom-template-tags.txt:383
msgid ""
"Above, this document explained that the template system works in a two-step "
"process: compiling and rendering. To define a custom template tag, you "
"specify how the compilation works and how the rendering works."
msgstr ""

# 3d9b2f96c1804404a9e666d3e4c78dbf
#: ../../howto/custom-template-tags.txt:387
msgid ""
"When Django compiles a template, it splits the raw template text into "
"''nodes''. Each node is an instance of ``django.template.Node`` and has a "
"``render()`` method. A compiled template is, simply, a list of ``Node`` "
"objects. When you call ``render()`` on a compiled template object, the "
"template calls ``render()`` on each ``Node`` in its node list, with the "
"given context. The results are all concatenated together to form the output "
"of the template."
msgstr ""

# 6e9ce2c48c254c13aa60cc7ebf76dae6
#: ../../howto/custom-template-tags.txt:394
msgid ""
"Thus, to define a custom template tag, you specify how the raw template tag "
"is converted into a ``Node`` (the compilation function), and what the node's "
"``render()`` method does."
msgstr ""

# fbf736e994594e108a38d21813b4014c
#: ../../howto/custom-template-tags.txt:399
msgid "Writing the compilation function"
msgstr ""

# 352cad1ada4f4bdca77c39e1d5439cd5
#: ../../howto/custom-template-tags.txt:401
msgid ""
"For each template tag the template parser encounters, it calls a Python "
"function with the tag contents and the parser object itself. This function "
"is responsible for returning a ``Node`` instance based on the contents of "
"the tag."
msgstr ""

# 2e542a7e0b204f8995a482657dfd6c8b
#: ../../howto/custom-template-tags.txt:405
msgid ""
"For example, let's write a template tag, ``{% current_time %}``, that "
"displays the current date/time, formatted according to a parameter given in "
"the tag, in :func:`~time.strftime` syntax. It's a good idea to decide the "
"tag syntax before anything else. In our case, let's say the tag should be "
"used like this:"
msgstr ""

# be67230b4eb846279836b5f4f9c746ee
#: ../../howto/custom-template-tags.txt:414
msgid ""
"The parser for this function should grab the parameter and create a ``Node`` "
"object:"
msgstr ""

# 3b6bf0da165d40cfbf19c218b5524375
# b51c6f7e58184c20a76e67cdddb867ee
#: ../../howto/custom-template-tags.txt:430
#: ../../howto/custom-template-tags.txt:482
msgid "Notes:"
msgstr ""

# 2e097a8efd16403281173ba470d60c4e
#: ../../howto/custom-template-tags.txt:432
msgid ""
"``parser`` is the template parser object. We don't need it in this example."
msgstr ""

# 7341df88498f45938981df192332ed06
#: ../../howto/custom-template-tags.txt:435
msgid ""
"``token.contents`` is a string of the raw contents of the tag. In our "
"example, it's ``'current_time \"%Y-%m-%d %I:%M %p\"'``."
msgstr ""

# 294a98af908148e6b2416e7cb9019a1e
#: ../../howto/custom-template-tags.txt:438
msgid ""
"The ``token.split_contents()`` method separates the arguments on spaces "
"while keeping quoted strings together. The more straightforward ``token."
"contents.split()`` wouldn't be as robust, as it would naively split on *all* "
"spaces, including those within quoted strings. It's a good idea to always "
"use ``token.split_contents()``."
msgstr ""

# 5b4ea9ac4bcd44a597db7d1ca1d7ca8c
#: ../../howto/custom-template-tags.txt:444
msgid ""
"This function is responsible for raising ``django.template."
"TemplateSyntaxError``, with helpful messages, for any syntax error."
msgstr ""

# 2059e0907f7e495ab02a1388c2392104
#: ../../howto/custom-template-tags.txt:448
msgid ""
"The ``TemplateSyntaxError`` exceptions use the ``tag_name`` variable. Don't "
"hard-code the tag's name in your error messages, because that couples the "
"tag's name to your function. ``token.contents.split()[0]`` will ''always'' "
"be the name of your tag -- even when the tag has no arguments."
msgstr ""

# a0d074de089c4a39b46b0426960995db
#: ../../howto/custom-template-tags.txt:454
msgid ""
"The function returns a ``CurrentTimeNode`` with everything the node needs to "
"know about this tag. In this case, it just passes the argument -- ``\"%Y-%m-"
"%d %I:%M %p\"``. The leading and trailing quotes from the template tag are "
"removed in ``format_string[1:-1]``."
msgstr ""

# 21d7766aff6340069f5b82d5784bea2b
#: ../../howto/custom-template-tags.txt:459
msgid ""
"The parsing is very low-level. The Django developers have experimented with "
"writing small frameworks on top of this parsing system, using techniques "
"such as EBNF grammars, but those experiments made the template engine too "
"slow. It's low-level because that's fastest."
msgstr ""

# a76dbcba24a54e00bc96be29a340dc13
#: ../../howto/custom-template-tags.txt:465
msgid "Writing the renderer"
msgstr ""

# 23ed358545b04e1097044ce277f2cfc0
#: ../../howto/custom-template-tags.txt:467
msgid ""
"The second step in writing custom tags is to define a ``Node`` subclass that "
"has a ``render()`` method."
msgstr ""

# ab639aa9fad944a084f2b92fac96f710
#: ../../howto/custom-template-tags.txt:470
msgid "Continuing the above example, we need to define ``CurrentTimeNode``:"
msgstr ""

# 36070c041bd84e1abc170313cab11de7
#: ../../howto/custom-template-tags.txt:484
msgid ""
"``__init__()`` gets the ``format_string`` from ``do_current_time()``. Always "
"pass any options/parameters/arguments to a ``Node`` via its ``__init__()``."
msgstr ""

# f05da50c72df4296936e961fd3da57f6
#: ../../howto/custom-template-tags.txt:488
msgid "The ``render()`` method is where the work actually happens."
msgstr ""

# e7dc2ca945f5405b8a202689b063b923
#: ../../howto/custom-template-tags.txt:490
msgid ""
"``render()`` should never raise ``TemplateSyntaxError`` or any other "
"exception. It should fail silently, just as template filters should."
msgstr ""

# 7ef096ea488d49c5bdd2ba63b3c8ff8c
#: ../../howto/custom-template-tags.txt:493
msgid ""
"Ultimately, this decoupling of compilation and rendering results in an "
"efficient template system, because a template can render multiple contexts "
"without having to be parsed multiple times."
msgstr ""

# 303594e1095840dcb5fa40423aab52ce
#: ../../howto/custom-template-tags.txt:498
msgid "Auto-escaping considerations"
msgstr ""

# d03f96d10ee34c478ff8e4ec4ba30a7c
#: ../../howto/custom-template-tags.txt:500
msgid ""
"The output from template tags is **not** automatically run through the auto-"
"escaping filters. However, there are still a couple of things you should "
"keep in mind when writing a template tag."
msgstr ""

# 76183169c2374749b938f2e37e114e68
#: ../../howto/custom-template-tags.txt:504
msgid ""
"If the ``render()`` function of your template stores the result in a context "
"variable (rather than returning the result in a string), it should take care "
"to call ``mark_safe()`` if appropriate. When the variable is ultimately "
"rendered, it will be affected by the auto-escape setting in effect at the "
"time, so content that should be safe from further escaping needs to be "
"marked as such."
msgstr ""

# 973722aab3ef4e0ebc2874aec7f9cbdb
#: ../../howto/custom-template-tags.txt:511
msgid ""
"Also, if your template tag creates a new context for performing some sub-"
"rendering, set the auto-escape attribute to the current context's value. The "
"``__init__`` method for the ``Context`` class takes a parameter called "
"``autoescape`` that you can use for this purpose. For example:"
msgstr ""

# 4d9423153e264edb82b1895bbfae2fbd
#: ../../howto/custom-template-tags.txt:523
msgid ""
"This is not a very common situation, but it's useful if you're rendering a "
"template yourself. For example:"
msgstr ""

# e8785e862f66486cb51ccc1dc0b03307
#: ../../howto/custom-template-tags.txt:532
msgid ""
"If we had neglected to pass in the current ``context.autoescape`` value to "
"our new ``Context`` in this example, the results would have *always* been "
"automatically escaped, which may not be the desired behavior if the template "
"tag is used inside a :ttag:`{% autoescape off %}<autoescape>` block."
msgstr ""

# f4e543b1ea10424582cb1a570b7d2685
#: ../../howto/custom-template-tags.txt:540
msgid "Thread-safety considerations"
msgstr ""

# 5dd851edf506450e901ca0957c155877
#: ../../howto/custom-template-tags.txt:544
msgid ""
"Once a node is parsed, its ``render`` method may be called any number of "
"times. Since Django is sometimes run in multi-threaded environments, a "
"single node may be simultaneously rendering with different contexts in "
"response to two separate requests. Therefore, it's important to make sure "
"your template tags are thread safe."
msgstr ""

# 9d98bc0a10c747f4879024accef8a32e
#: ../../howto/custom-template-tags.txt:550
msgid ""
"To make sure your template tags are thread safe, you should never store "
"state information on the node itself. For example, Django provides a "
"builtin :ttag:`cycle` template tag that cycles among a list of given strings "
"each time it's rendered:"
msgstr ""

# 3c02c1dcf62941a3823cdc066e2d35c0
#: ../../howto/custom-template-tags.txt:563
msgid "A naive implementation of ``CycleNode`` might look something like this:"
msgstr ""

# af9718eea58446038ec23a70037ff6d7
#: ../../howto/custom-template-tags.txt:573
msgid ""
"But, suppose we have two templates rendering the template snippet from above "
"at the same time:"
msgstr ""

# c24b90db13714390887eee1899fa6abb
#: ../../howto/custom-template-tags.txt:576
msgid ""
"Thread 1 performs its first loop iteration, ``CycleNode.render()`` returns "
"'row1'"
msgstr ""

# a1187bfe018748aa9d4ba9e5050271d0
#: ../../howto/custom-template-tags.txt:578
msgid ""
"Thread 2 performs its first loop iteration, ``CycleNode.render()`` returns "
"'row2'"
msgstr ""

# fc08d6e15bc04da0a192f27205487640
#: ../../howto/custom-template-tags.txt:580
msgid ""
"Thread 1 performs its second loop iteration, ``CycleNode.render()`` returns "
"'row1'"
msgstr ""

# b7e38d52e81744eea9047245e1e96881
#: ../../howto/custom-template-tags.txt:582
msgid ""
"Thread 2 performs its second loop iteration, ``CycleNode.render()`` returns "
"'row2'"
msgstr ""

# 2c92130291044169b2279cdb2b73d195
#: ../../howto/custom-template-tags.txt:585
msgid ""
"The CycleNode is iterating, but it's iterating globally. As far as Thread 1 "
"and Thread 2 are concerned, it's always returning the same value. This is "
"obviously not what we want!"
msgstr ""

# 72a5bde25ccf49b5a54299313ecc545b
#: ../../howto/custom-template-tags.txt:589
msgid ""
"To address this problem, Django provides a ``render_context`` that's "
"associated with the ``context`` of the template that is currently being "
"rendered. The ``render_context`` behaves like a Python dictionary, and "
"should be used to store ``Node`` state between invocations of the ``render`` "
"method."
msgstr ""

# 248080c912b04071ab85db60eec47613
#: ../../howto/custom-template-tags.txt:594
msgid ""
"Let's refactor our ``CycleNode`` implementation to use the "
"``render_context``:"
msgstr ""

# 16ef6f97aa5a457d8010afa5e7c6fffc
#: ../../howto/custom-template-tags.txt:607
msgid ""
"Note that it's perfectly safe to store global information that will not "
"change throughout the life of the ``Node`` as an attribute. In the case of "
"``CycleNode``, the ``cyclevars`` argument doesn't change after the ``Node`` "
"is instantiated, so we don't need to put it in the ``render_context``. But "
"state information that is specific to the template that is currently being "
"rendered, like the current iteration of the ``CycleNode``, should be stored "
"in the ``render_context``."
msgstr ""

# 7c9d4e1f75794ca5a7114d61b5a33ea0
#: ../../howto/custom-template-tags.txt:616
msgid ""
"Notice how we used ``self`` to scope the ``CycleNode`` specific information "
"within the ``render_context``. There may be multiple ``CycleNodes`` in a "
"given template, so we need to be careful not to clobber another node's state "
"information. The easiest way to do this is to always use ``self`` as the key "
"into ``render_context``. If you're keeping track of several state variables, "
"make ``render_context[self]`` a dictionary."
msgstr ""

# b79c201b263843678ecf7ee78c08ba5d
#: ../../howto/custom-template-tags.txt:624
msgid "Registering the tag"
msgstr ""

# 4f5edb71f1ef4fb68c787ab0b44de17b
#: ../../howto/custom-template-tags.txt:626
msgid ""
"Finally, register the tag with your module's ``Library`` instance, as "
"explained in \"Writing custom template filters\" above. Example:"
msgstr ""

# 563b29edd9094068b6dabbc315025bb7
#: ../../howto/custom-template-tags.txt:633
msgid "The ``tag()`` method takes two arguments:"
msgstr ""

# de1de6012a964af99e5dcff6fe77f4dc
#: ../../howto/custom-template-tags.txt:635
msgid ""
"The name of the template tag -- a string. If this is left out, the name of "
"the compilation function will be used."
msgstr ""

# 637fc7f382204271998ffa53b0798fe4
#: ../../howto/custom-template-tags.txt:640
msgid ""
"As with filter registration, it is also possible to use this as a decorator:"
msgstr ""

# f9dcdc61b4194cb1be8f4925e712786b
#: ../../howto/custom-template-tags.txt:652
msgid ""
"If you leave off the ``name`` argument, as in the second example above, "
"Django will use the function's name as the tag name."
msgstr ""

# 40d353269d244090b8bd86b2877d0deb
#: ../../howto/custom-template-tags.txt:656
msgid "Passing template variables to the tag"
msgstr ""

# 396daf697570404a8c2c2720eed7a5a5
#: ../../howto/custom-template-tags.txt:658
msgid ""
"Although you can pass any number of arguments to a template tag using "
"``token.split_contents()``, the arguments are all unpacked as string "
"literals. A little more work is required in order to pass dynamic content (a "
"template variable) to a template tag as an argument."
msgstr ""

# e7c8c2d7eb754f79b9acd7aee03a0e63
#: ../../howto/custom-template-tags.txt:663
msgid ""
"While the previous examples have formatted the current time into a string "
"and returned the string, suppose you wanted to pass in a :class:`~django.db."
"models.DateTimeField` from an object and have the template tag format that "
"date-time:"
msgstr ""

# 2ab8fe98204d4f97a0c96d59a9940218
#: ../../howto/custom-template-tags.txt:672
msgid "Initially, ``token.split_contents()`` will return three values:"
msgstr ""

# 51511aec5e4846538cf33a86e797c6f1
#: ../../howto/custom-template-tags.txt:674
msgid "The tag name ``format_time``."
msgstr ""

# 6cdc5084cc964d4c9f53737b16e1b035
#: ../../howto/custom-template-tags.txt:675
msgid ""
"The string ``\"blog_entry.date_updated\"`` (without the surrounding quotes)."
msgstr ""

# 9964045dfe164827b8ae910d8921b6e5
#: ../../howto/custom-template-tags.txt:677
msgid ""
"The formatting string ``\"%Y-%m-%d %I:%M %p\"``. The return value from "
"``split_contents()`` will include the leading and trailing quotes for string "
"literals like this."
msgstr ""

# bb4edc693ca241e29084517c58e1a8b5
#: ../../howto/custom-template-tags.txt:681
msgid "Now your tag should begin to look like this:"
msgstr ""

# c52b052c95c648b58df1219e46c60d48
#: ../../howto/custom-template-tags.txt:696
msgid ""
"You also have to change the renderer to retrieve the actual contents of the "
"``date_updated`` property of the ``blog_entry`` object.  This can be "
"accomplished by using the ``Variable()`` class in ``django.template``."
msgstr ""

# 99dc665ee1e348ed8dc8345411bcea80
#: ../../howto/custom-template-tags.txt:700
msgid ""
"To use the ``Variable`` class, simply instantiate it with the name of the "
"variable to be resolved, and then call ``variable.resolve(context)``. So, "
"for example:"
msgstr ""

# 0b6a6c936f4b4bdfbeaa5ba936a45eb8
#: ../../howto/custom-template-tags.txt:718
msgid ""
"Variable resolution will throw a ``VariableDoesNotExist`` exception if it "
"cannot resolve the string passed to it in the current context of the page."
msgstr ""

# 84d1bfd7e4d44c93bcf6532415508302
#: ../../howto/custom-template-tags.txt:724
msgid "Simple tags"
msgstr ""

# 272482ccfae04d25bc7960ffae35a082
#: ../../howto/custom-template-tags.txt:726
msgid ""
"Many template tags take a number of arguments -- strings or template "
"variables -- and return a string after doing some processing based solely on "
"the input arguments and some external information. For example, the "
"``current_time`` tag we wrote above is of this variety: we give it a format "
"string, it returns the time as a string."
msgstr ""

# 1cbb1c7b4c4d4998bd0c08edf767c8a7
#: ../../howto/custom-template-tags.txt:732
msgid ""
"To ease the creation of these types of tags, Django provides a helper "
"function, ``simple_tag``. This function, which is a method of ``django."
"template.Library``, takes a function that accepts any number of arguments, "
"wraps it in a ``render`` function and the other necessary bits mentioned "
"above and registers it with the template system."
msgstr ""

# bd36536202b048339728004ef56bff56
# 261f45238e324086a56300da904534cb
#: ../../howto/custom-template-tags.txt:738
#: ../../howto/custom-template-tags.txt:1080
msgid "Our earlier ``current_time`` function could thus be written like this:"
msgstr ""

# 1a7cae38d8da47da8067ca4a63c39c4e
# d7de0dc15a5c4525974f1331784f5041
#: ../../howto/custom-template-tags.txt:747
#: ../../howto/custom-template-tags.txt:1089
msgid "The decorator syntax also works:"
msgstr ""

# 9c642a8ef47841889ea0667e4fc054d5
#: ../../howto/custom-template-tags.txt:755
msgid "A few things to note about the ``simple_tag`` helper function:"
msgstr ""

# fc1db2e89fd14295b1634f73e68a1066
#: ../../howto/custom-template-tags.txt:757
msgid ""
"Checking for the required number of arguments, etc., has already been done "
"by the time our function is called, so we don't need to do that."
msgstr ""

# 76d19c6bc5c44733921e215924b6af44
#: ../../howto/custom-template-tags.txt:759
msgid ""
"The quotes around the argument (if any) have already been stripped away, so "
"we just receive a plain string."
msgstr ""

# fcc6801308d248e98ec0331a03e70f8c
#: ../../howto/custom-template-tags.txt:761
msgid ""
"If the argument was a template variable, our function is passed the current "
"value of the variable, not the variable itself."
msgstr ""

# f6b11ca4ae374b88b850711ea35095c7
# 35a0b692102a4891859e29238d4628cf
#: ../../howto/custom-template-tags.txt:766
#: ../../howto/custom-template-tags.txt:1105
msgid ""
"If your template tag needs to access the current context, you can use the "
"``takes_context`` argument when registering your tag:"
msgstr ""

# cc08c39f869e4bf5b085b63a78db40d7
# da8162b426f84ea5b236c2c73b1b13ce
#: ../../howto/custom-template-tags.txt:778
#: ../../howto/custom-template-tags.txt:1117
msgid "Or, using decorator syntax:"
msgstr ""

# 1a913cdfd04848178543250b8bbb1609
# 5d011e3f7d014deb93954d39adb4ffc4
#: ../../howto/custom-template-tags.txt:787
#: ../../howto/custom-template-tags.txt:1126
msgid ""
"For more information on how the ``takes_context`` option works, see the "
"section on :ref:`inclusion tags<howto-custom-template-tags-inclusion-tags>`."
msgstr ""

# 7d52fd9177ce497c9cf3f6ff6cafdc57
#: ../../howto/custom-template-tags.txt:792
msgid "If you need to rename your tag, you can provide a custom name for it:"
msgstr ""

# d4e5ea8a1d184dc6865c942ae6507325
#: ../../howto/custom-template-tags.txt:804
msgid ""
"``simple_tag`` functions may accept any number of positional or keyword "
"arguments. For example:"
msgstr ""

# 500fcb413df142a2952d0bfa339571c1
# 03b9a59f68fd43378198d4aa399d2fce
# c182ad99280f43c484bdc568f3511cdf
#: ../../howto/custom-template-tags.txt:816
#: ../../howto/custom-template-tags.txt:972
#: ../../howto/custom-template-tags.txt:1141
msgid ""
"Then in the template any number of arguments, separated by spaces, may be "
"passed to the template tag. Like in Python, the values for keyword arguments "
"are set using the equal sign (\"``=``\") and must be provided after the "
"positional arguments. For example:"
msgstr ""

# 945175dd89774d59a66f5c1a2688c02e
#: ../../howto/custom-template-tags.txt:828
msgid "Inclusion tags"
msgstr ""

# 18a36f82222347299f773bf2c0cdfb63
#: ../../howto/custom-template-tags.txt:830
msgid ""
"Another common type of template tag is the type that displays some data by "
"rendering *another* template. For example, Django's admin interface uses "
"custom template tags to display the buttons along the bottom of the \"add/"
"change\" form pages. Those buttons always look the same, but the link "
"targets change depending on the object being edited -- so they're a perfect "
"case for using a small template that is filled with details from the current "
"object. (In the admin's case, this is the ``submit_row`` tag.)"
msgstr ""

# 29ad539721424b9fa7d490dfac7bef63
#: ../../howto/custom-template-tags.txt:838
msgid "These sorts of tags are called \"inclusion tags\"."
msgstr ""

# 1655a2dbda8b4b16914db673b53615a1
#: ../../howto/custom-template-tags.txt:840
msgid ""
"Writing inclusion tags is probably best demonstrated by example. Let's write "
"a tag that outputs a list of choices for a given ``Poll`` object, such as "
"was created in the :ref:`tutorials <creating-models>`. We'll use the tag "
"like this:"
msgstr ""

# 683412b647ab4bcc83651118072773d0
#: ../../howto/custom-template-tags.txt:848
msgid "...and the output will be something like this:"
msgstr ""

# f92569db73f14be3b8c8667d2d844690
#: ../../howto/custom-template-tags.txt:858
msgid ""
"First, define the function that takes the argument and produces a dictionary "
"of data for the result. The important point here is we only need to return a "
"dictionary, not anything more complex. This will be used as a template "
"context for the template fragment. Example:"
msgstr ""

# 6e8f760d57ea4f3c8fb91a7f735ce011
#: ../../howto/custom-template-tags.txt:869
msgid ""
"Next, create the template used to render the tag's output. This template is "
"a fixed feature of the tag: the tag writer specifies it, not the template "
"designer. Following our example, the template is very simple:"
msgstr ""

# 03906e0017ae4dd4960cd9fc9fff5a50
#: ../../howto/custom-template-tags.txt:881
msgid ""
"Now, create and register the inclusion tag by calling the ``inclusion_tag()"
"`` method on a ``Library`` object. Following our example, if the above "
"template is in a file called ``results.html`` in a directory that's searched "
"by the template loader, we'd register the tag like this:"
msgstr ""

# b8328a2cd6ca4ddd9eaab0bea120db72
#: ../../howto/custom-template-tags.txt:902
msgid "As always, decorator syntax works as well, so we could have written:"
msgstr ""

# a0db0b1bae114a9ea9abab67485ed7b7
#: ../../howto/custom-template-tags.txt:910
msgid "...when first creating the function."
msgstr ""

# b461fd0e3bad4cc0a98fde07b3bd8900
#: ../../howto/custom-template-tags.txt:912
msgid ""
"Sometimes, your inclusion tags might require a large number of arguments, "
"making it a pain for template authors to pass in all the arguments and "
"remember their order. To solve this, Django provides a ``takes_context`` "
"option for inclusion tags. If you specify ``takes_context`` in creating a "
"template tag, the tag will have no required arguments, and the underlying "
"Python function will have one argument -- the template context as of when "
"the tag was called."
msgstr ""

# cca5426001134c5d91a9237ca9290ec4
#: ../../howto/custom-template-tags.txt:919
msgid ""
"For example, say you're writing an inclusion tag that will always be used in "
"a context that contains ``home_link`` and ``home_title`` variables that "
"point back to the main page. Here's what the Python function would look like:"
msgstr ""

# c481dd757b8749c99617c5e3829c033a
#: ../../howto/custom-template-tags.txt:934
msgid ""
"(Note that the first parameter to the function *must* be called ``context``.)"
msgstr ""

# 5b8e3c2fd63641579aacc84c9177b7af
#: ../../howto/custom-template-tags.txt:936
msgid ""
"In that ``register.inclusion_tag()`` line, we specified "
"``takes_context=True`` and the name of the template. Here's what the "
"template ``link.html`` might look like:"
msgstr ""

# dded5c5dbab54e228f7bfe78f41952fa
#: ../../howto/custom-template-tags.txt:944
msgid ""
"Then, any time you want to use that custom tag, load its library and call it "
"without any arguments, like so:"
msgstr ""

# 968dfab2e631455e9a2381dd321dfa31
#: ../../howto/custom-template-tags.txt:951
msgid ""
"Note that when you're using ``takes_context=True``, there's no need to pass "
"arguments to the template tag. It automatically gets access to the context."
msgstr ""

# 47fd85174af94ec1bbf64ed22335e711
#: ../../howto/custom-template-tags.txt:954
msgid ""
"The ``takes_context`` parameter defaults to ``False``. When it's set to "
"``True``, the tag is passed the context object, as in this example. That's "
"the only difference between this case and the previous ``inclusion_tag`` "
"example."
msgstr ""

# 8476b159f3c14f2abd59f96efcc23ba5
#: ../../howto/custom-template-tags.txt:960
msgid ""
"``inclusion_tag`` functions may accept any number of positional or keyword "
"arguments. For example:"
msgstr ""

# c4795661e33e4ecc82725f8cc1859e6f
#: ../../howto/custom-template-tags.txt:982
msgid "Setting a variable in the context"
msgstr ""

# e4394f61afb843b5991bba96097a057f
#: ../../howto/custom-template-tags.txt:984
msgid ""
"The above examples simply output a value. Generally, it's more flexible if "
"your template tags set template variables instead of outputting values. That "
"way, template authors can reuse the values that your template tags create."
msgstr ""

# 1a84ca35f1a84b8da8eef596f26be4f1
#: ../../howto/custom-template-tags.txt:988
msgid ""
"To set a variable in the context, just use dictionary assignment on the "
"context object in the ``render()`` method. Here's an updated version of "
"``CurrentTimeNode`` that sets a template variable ``current_time`` instead "
"of outputting it:"
msgstr ""

# d194b503b7af44a08ee66561f116c45f
#: ../../howto/custom-template-tags.txt:1002
msgid ""
"Note that ``render()`` returns the empty string. ``render()`` should always "
"return string output. If all the template tag does is set a variable, "
"``render()`` should return the empty string."
msgstr ""

# 3e13e5e2a0324e5eafc16de21dcfa073
#: ../../howto/custom-template-tags.txt:1006
msgid "Here's how you'd use this new version of the tag:"
msgstr ""

# 08ab1632a92d46e4b2aae4541eb440bc
#: ../../howto/custom-template-tags.txt:1014
msgid ""
"Any variable set in the context will only be available in the same ``block`` "
"of the template in which it was assigned. This behavior is intentional; it "
"provides a scope for variables so that they don't conflict with context in "
"other blocks."
msgstr ""

# ba7bc6cf97564320bf70ef5e1858a01b
#: ../../howto/custom-template-tags.txt:1019
msgid ""
"But, there's a problem with ``CurrentTimeNode2``: The variable name "
"``current_time`` is hard-coded. This means you'll need to make sure your "
"template doesn't use ``{{ current_time }}`` anywhere else, because the ``{% "
"current_time %}`` will blindly overwrite that variable's value. A cleaner "
"solution is to make the template tag specify the name of the output "
"variable, like so:"
msgstr ""

# 8db126ec7d244c25a04f7c9a03262bba
#: ../../howto/custom-template-tags.txt:1031
msgid ""
"To do that, you'll need to refactor both the compilation function and "
"``Node`` class, like so:"
msgstr ""

# 10d3c7b7345f4a8f9663933ab1ac2f50
#: ../../howto/custom-template-tags.txt:1060
msgid ""
"The difference here is that ``do_current_time()`` grabs the format string "
"and the variable name, passing both to ``CurrentTimeNode3``."
msgstr ""

# bc0a0c77da644df29e78328c57f8f23d
#: ../../howto/custom-template-tags.txt:1063
msgid ""
"Finally, if you only need to have a simple syntax for your custom context-"
"updating template tag, you might want to consider using an :ref:`assignment "
"tag <howto-custom-template-tags-assignment-tags>`."
msgstr ""

# 564166dd25704a1089f7b950a0921021
#: ../../howto/custom-template-tags.txt:1070
msgid "Assignment tags"
msgstr ""

# 08f0b254d1a04bab9729440925441718
#: ../../howto/custom-template-tags.txt:1074
msgid ""
"To ease the creation of tags setting a variable in the context, Django "
"provides a helper function, ``assignment_tag``. This function works the same "
"way as :ref:`simple_tag<howto-custom-template-tags-simple-tags>`, except "
"that it stores the tag's result in a specified context variable instead of "
"directly outputting it."
msgstr ""

# e3fa2e37a455457fa29e9bcbdd1fe8b7
#: ../../howto/custom-template-tags.txt:1097
msgid ""
"You may then store the result in a template variable using the ``as`` "
"argument followed by the variable name, and output it yourself where you see "
"fit:"
msgstr ""

# 485c66ab691c494291bfe13b6fcedc2c
#: ../../howto/custom-template-tags.txt:1129
msgid ""
"``assignment_tag`` functions may accept any number of positional or keyword "
"arguments. For example:"
msgstr ""

# a07d2d73f0fd4c75ad6b77bdfbbba152
#: ../../howto/custom-template-tags.txt:1151
msgid "Parsing until another block tag"
msgstr ""

# d5d4dcf8424d444f969b585448f05e93
#: ../../howto/custom-template-tags.txt:1153
msgid ""
"Template tags can work in tandem. For instance, the standard :ttag:`{% "
"comment %}<comment>` tag hides everything until ``{% endcomment %}``. To "
"create a template tag such as this, use ``parser.parse()`` in your "
"compilation function."
msgstr ""

# 2968cda6b77b4bac847d76387f62b25d
#: ../../howto/custom-template-tags.txt:1158
msgid "Here's how a simplified ``{% comment %}`` tag might be implemented:"
msgstr ""

# 9593fb8b53ab418d9c6fc98b834495f0
#: ../../howto/custom-template-tags.txt:1172
msgid ""
"The actual implementation of :ttag:`{% comment %}<comment>` is slightly "
"different in that it allows broken template tags to appear between ``{% "
"comment %}`` and ``{% endcomment %}``. It does so by calling ``parser."
"skip_past('endcomment')`` instead of ``parser.parse(('endcomment',))`` "
"followed by ``parser.delete_first_token()``, thus avoiding the generation of "
"a node list."
msgstr ""

# d7c6806ca9e64715b549dfd4ac7940a8
#: ../../howto/custom-template-tags.txt:1179
msgid ""
"``parser.parse()`` takes a tuple of names of block tags ''to parse until''. "
"It returns an instance of ``django.template.NodeList``, which is a list of "
"all ``Node`` objects that the parser encountered ''before'' it encountered "
"any of the tags named in the tuple."
msgstr ""

# d3569be2318a402ca17bf7f47b3f6619
#: ../../howto/custom-template-tags.txt:1184
msgid ""
"In ``\"nodelist = parser.parse(('endcomment',))\"`` in the above example, "
"``nodelist`` is a list of all nodes between the ``{% comment %}`` and ``{% "
"endcomment %}``, not counting ``{% comment %}`` and ``{% endcomment %}`` "
"themselves."
msgstr ""

# d7a601bdaec14e329a58be02426bb221
#: ../../howto/custom-template-tags.txt:1189
msgid ""
"After ``parser.parse()`` is called, the parser hasn't yet \"consumed\" the ``"
"{% endcomment %}`` tag, so the code needs to explicitly call ``parser."
"delete_first_token()``."
msgstr ""

# 6afa293278cf4c5fa4c3acb9c5b4cb5b
#: ../../howto/custom-template-tags.txt:1193
msgid ""
"``CommentNode.render()`` simply returns an empty string. Anything between ``"
"{% comment %}`` and ``{% endcomment %}`` is ignored."
msgstr ""

# ba2284cc46ec4fdfaa7000f61fb563d2
#: ../../howto/custom-template-tags.txt:1197
msgid "Parsing until another block tag, and saving contents"
msgstr ""

# 66dacd20b50d41a988642ce0ffd75f02
#: ../../howto/custom-template-tags.txt:1199
msgid ""
"In the previous example, ``do_comment()`` discarded everything between ``{% "
"comment %}`` and ``{% endcomment %}``. Instead of doing that, it's possible "
"to do something with the code between block tags."
msgstr ""

# 7d806ffcae97426eb234493f5198c4c1
#: ../../howto/custom-template-tags.txt:1203
msgid ""
"For example, here's a custom template tag, ``{% upper %}``, that capitalizes "
"everything between itself and ``{% endupper %}``."
msgstr ""

# dd3d0c36387b4ae19771c06863b9ab76
#: ../../howto/custom-template-tags.txt:1206
msgid "Usage:"
msgstr ""

# 2d44c0d9d35546b9832015993b279713
#: ../../howto/custom-template-tags.txt:1212
msgid ""
"As in the previous example, we'll use ``parser.parse()``. But this time, we "
"pass the resulting ``nodelist`` to the ``Node``:"
msgstr ""

# e209a506c32f440e9c9ffb0fb562c031
#: ../../howto/custom-template-tags.txt:1229
msgid ""
"The only new concept here is the ``self.nodelist.render(context)`` in "
"``UpperNode.render()``."
msgstr ""

# 3d30b4f2f3eb400284f4def004ec7b2c
#: ../../howto/custom-template-tags.txt:1232
msgid ""
"For more examples of complex rendering, see the source code for :ttag:`{% if "
"%}<if>`, :ttag:`{% for %}<for>`, :ttag:`{% ifequal %}<ifequal>` or :ttag:`{% "
"ifchanged %}<ifchanged>`. They live in ``django/template/defaulttags.py``."
msgstr ""

# 8b34cbb1065a4d088fdfd9a6e7f89eec
#: ../../howto/deployment/fastcgi.txt:3
msgid "How to use Django with FastCGI, SCGI, or AJP"
msgstr ""

# b7a5320fe4e1453e8f974083e4f8e660
#: ../../howto/deployment/fastcgi.txt:7
msgid ""
"Although :doc:`WSGI</howto/deployment/wsgi/index>` is the preferred "
"deployment platform for Django, many people use shared hosting, on which "
"protocols such as FastCGI, SCGI or AJP are the only viable options."
msgstr ""

# afbf3e7f6488433d8cea204c1899ec3a
#: ../../howto/deployment/fastcgi.txt:13
msgid ""
"This document primarily focuses on FastCGI. Other protocols, such as SCGI "
"and AJP, are also supported, through the ``flup`` Python package. See the "
"Protocols_ section below for specifics about SCGI and AJP."
msgstr ""

# f6a66c597b3a49e0aa21969b7c2b3f79
#: ../../howto/deployment/fastcgi.txt:17
msgid ""
"Essentially, FastCGI is an efficient way of letting an external application "
"serve pages to a Web server. The Web server delegates the incoming Web "
"requests (via a socket) to FastCGI, which executes the code and passes the "
"response back to the Web server, which, in turn, passes it back to the "
"client's Web browser."
msgstr ""

# b9b1edbfd2a24e06a3dd20d91c063fd1
#: ../../howto/deployment/fastcgi.txt:22
msgid ""
"Like WSGI, FastCGI allows code to stay in memory, allowing requests to be "
"served with no startup time. While e.g. :doc:`mod_wsgi</howto/deployment/"
"wsgi/modwsgi>` can either be configured embedded in the Apache Web server "
"process or as a separate daemon process, a FastCGI process never runs inside "
"the Web server process, always in a separate, persistent process."
msgstr ""

# 1c2dc038293b4868847a4dcfeb271c27
#: ../../howto/deployment/fastcgi.txt:33
msgid ""
"The traditional ``mod_*`` arrangements in Apache embed various scripting "
"languages (most notably PHP, Python and Perl) inside the process space of "
"your Web server. Although this lowers startup time -- because code doesn't "
"have to be read off disk for every request -- it comes at the cost of memory "
"use."
msgstr ""

# 2d233ce9639a4e3d93f80e7d4d1655a0
#: ../../howto/deployment/fastcgi.txt:39
msgid ""
"Due to the nature of FastCGI, it's even possible to have processes that run "
"under a different user account than the Web server process. That's a nice "
"security benefit on shared systems, because it means you can secure your "
"code from other users."
msgstr ""

# daebedf1007e4f23836efac123b52bdb
#: ../../howto/deployment/fastcgi.txt:45
msgid "Prerequisite: flup"
msgstr ""

# 2ae2cd1a347942f2917bb892f1f4a9ca
#: ../../howto/deployment/fastcgi.txt:47
msgid ""
"Before you can start using FastCGI with Django, you'll need to install "
"flup_, a Python library for dealing with FastCGI. Version 0.5 or newer "
"should work fine."
msgstr ""

# e0ef7513ccfe465aa14333c2f68dc4c8
#: ../../howto/deployment/fastcgi.txt:53
msgid "Starting your FastCGI server"
msgstr ""

# 225f5bb3aa11482ba32e950073988948
#: ../../howto/deployment/fastcgi.txt:55
msgid ""
"FastCGI operates on a client-server model, and in most cases you'll be "
"starting the FastCGI process on your own. Your Web server (be it Apache, "
"lighttpd, or otherwise) only contacts your Django-FastCGI process when the "
"server needs a dynamic page to be loaded. Because the daemon is already "
"running with the code in memory, it's able to serve the response very "
"quickly."
msgstr ""

# 47deefdddf7f4136b9baca34e66aa808
#: ../../howto/deployment/fastcgi.txt:63
msgid ""
"If you're on a shared hosting system, you'll probably be forced to use Web "
"server-managed FastCGI processes. See the section below on running Django "
"with Web server-managed processes for more information."
msgstr ""

# 8a9624387f1544c689d86d0914944fc2
#: ../../howto/deployment/fastcgi.txt:67
msgid ""
"A Web server can connect to a FastCGI server in one of two ways: It can use "
"either a Unix domain socket (a \"named pipe\" on Win32 systems), or it can "
"use a TCP socket. What you choose is a manner of preference; a TCP socket is "
"usually easier due to permissions issues."
msgstr ""

# bb5477562c74477db729c324bbdb2889
#: ../../howto/deployment/fastcgi.txt:72
msgid ""
"To start your server, first change into the directory of your project "
"(wherever your :doc:`manage.py </ref/django-admin>` is), and then run the :"
"djadmin:`runfcgi` command::"
msgstr ""

# 40e40575bd47485e86b126a441552edc
#: ../../howto/deployment/fastcgi.txt:78
msgid ""
"If you specify ``help`` as the only option after :djadmin:`runfcgi`, it'll "
"display a list of all the available options."
msgstr ""

# 8625611893a343c7a2871c53c187f3f3
#: ../../howto/deployment/fastcgi.txt:81
msgid ""
"You'll need to specify either a :djadminopt:`socket`, a :djadminopt:"
"`protocol` or both :djadminopt:`host` and :djadminopt:`port`. Then, when you "
"set up your Web server, you'll just need to point it at the host/port or "
"socket you specified when starting the FastCGI server. See the examples_, "
"below."
msgstr ""

# c3c3e47c338744d79eb4e7dbac70f7f6
#: ../../howto/deployment/fastcgi.txt:87
msgid "Protocols"
msgstr ""

# d6e3e34ea8274051972b221f556eb279
#: ../../howto/deployment/fastcgi.txt:89
msgid ""
"Django supports all the protocols that flup_ does, namely fastcgi_, `SCGI`_ "
"and `AJP1.3`_ (the Apache JServ Protocol, version 1.3). Select your "
"preferred protocol by using the :djadminopt:`protocol=\\<protocol_name\\> "
"<protocol>` option with ``./manage.py runfcgi`` -- where ``<protocol_name>`` "
"may be one of: ``fcgi`` (the default), ``scgi`` or ``ajp``. For example::"
msgstr ""

# 3cf80ce509e44cef955ac9994ccc7672
#: ../../howto/deployment/fastcgi.txt:103
msgid "Examples"
msgstr ""

# 397f181535a841ef8e9c88cd2c47c5c3
#: ../../howto/deployment/fastcgi.txt:105
msgid "Running a threaded server on a TCP port::"
msgstr ""

# 7f30ee1598944623bba55da911fdb0c6
#: ../../howto/deployment/fastcgi.txt:109
msgid "Running a preforked server on a Unix domain socket::"
msgstr ""

# 82cf751f0e73496fb98513343ad8328a
#: ../../howto/deployment/fastcgi.txt:115
msgid ""
"Django's default umask requires that the webserver and the Django fastcgi "
"process be run with the same group **and** user. For increased security, you "
"can run them under the same group but as different users. If you do this, "
"you will need to set the umask to 0002 using the ``umask`` argument to "
"``runfcgi``."
msgstr ""

# d7c370ee336f46498c63f2ecb2f70540
#: ../../howto/deployment/fastcgi.txt:121
msgid ""
"Run without daemonizing (backgrounding) the process (good for debugging)::"
msgstr ""

# 9ba7bfe41c434f2aa3b6bf91e52689c1
#: ../../howto/deployment/fastcgi.txt:126
msgid "Stopping the FastCGI daemon"
msgstr ""

# aa7afd4e2ef04feeb83ef59216572667
#: ../../howto/deployment/fastcgi.txt:128
msgid ""
"If you have the process running in the foreground, it's easy enough to stop "
"it: Simply hitting ``Ctrl-C`` will stop and quit the FastCGI server. "
"However, when you're dealing with background processes, you'll need to "
"resort to the Unix ``kill`` command."
msgstr ""

# c68327f38c4246ccbe5067901390bf0e
#: ../../howto/deployment/fastcgi.txt:133
msgid ""
"If you specify the :djadminopt:`pidfile` option to :djadmin:`runfcgi`, you "
"can kill the running FastCGI daemon like this::"
msgstr ""

# 5d8474f5c9a245d79eca083abaf6a860
#: ../../howto/deployment/fastcgi.txt:138
msgid "...where ``$PIDFILE`` is the ``pidfile`` you specified."
msgstr ""

# 32011011d32a4ff5a00215579e84b427
#: ../../howto/deployment/fastcgi.txt:140
msgid ""
"To easily restart your FastCGI daemon on Unix, try this small shell script::"
msgstr ""

# ab9ef8d6651f40a78742497601550c01
#: ../../howto/deployment/fastcgi.txt:160
msgid "Apache setup"
msgstr ""

# 186b766b1be74db3ab56da57f5b5dd88
#: ../../howto/deployment/fastcgi.txt:162
msgid ""
"To use Django with Apache and FastCGI, you'll need Apache installed and "
"configured, with `mod_fastcgi`_ installed and enabled. Consult the Apache "
"documentation for instructions."
msgstr ""

# 3b5e4ea9757c4d64b414d39ce269bb35
#: ../../howto/deployment/fastcgi.txt:166
msgid ""
"Once you've got that set up, point Apache at your Django FastCGI instance by "
"editing the ``httpd.conf`` (Apache configuration) file. You'll need to do "
"two things:"
msgstr ""

# 4b6c43515d8f40b69b9009b027c19223
#: ../../howto/deployment/fastcgi.txt:170
msgid ""
"Use the ``FastCGIExternalServer`` directive to specify the location of your "
"FastCGI server."
msgstr ""

# e490aeb2ea4b48999724ba1735071874
#: ../../howto/deployment/fastcgi.txt:172
msgid "Use ``mod_rewrite`` to point URLs at FastCGI as appropriate."
msgstr ""

# b836e12727174f1a9a57af5271881f82
#: ../../howto/deployment/fastcgi.txt:177
msgid "Specifying the location of the FastCGI server"
msgstr ""

# 371e116f6458449691ec84a106fc6e1c
#: ../../howto/deployment/fastcgi.txt:179
msgid ""
"The ``FastCGIExternalServer`` directive tells Apache how to find your "
"FastCGI server. As the `FastCGIExternalServer docs`_ explain, you can "
"specify either a ``socket`` or a ``host``. Here are examples of both:"
msgstr ""

# f597a493532b49abb29dc83da6e4c6fa
#: ../../howto/deployment/fastcgi.txt:191
msgid ""
"In either case, the file ``/home/user/public_html/mysite.fcgi`` doesn't "
"actually have to exist. It's just a URL used by the Web server internally -- "
"a hook for signifying which requests at a URL should be handled by FastCGI. "
"(More on this in the next section.)"
msgstr ""

# a346204722cf43ab8457ece00ebaaaa3
#: ../../howto/deployment/fastcgi.txt:199
msgid "Using mod_rewrite to point URLs at FastCGI"
msgstr ""

# 2a1616b702a34066a181c519babb95da
#: ../../howto/deployment/fastcgi.txt:201
msgid ""
"The second step is telling Apache to use FastCGI for URLs that match a "
"certain pattern. To do this, use the `mod_rewrite`_ module and rewrite URLs "
"to ``mysite.fcgi`` (or whatever you specified in the "
"``FastCGIExternalServer`` directive, as explained in the previous section)."
msgstr ""

# 716ac5a385d64308b768e43ce3148f76
#: ../../howto/deployment/fastcgi.txt:206
msgid ""
"In this example, we tell Apache to use FastCGI to handle any request that "
"doesn't represent a file on the filesystem and doesn't start with ``/media/"
"``. This is probably the most common case, if you're using Django's admin "
"site:"
msgstr ""

# a1d1bb237ccc49e5be42455e7afdb7c4
#: ../../howto/deployment/fastcgi.txt:224
msgid ""
"Django will automatically use the pre-rewrite version of the URL when "
"constructing URLs with the :ttag:`{% url %}<url>` template tag (and similar "
"methods)."
msgstr ""

# 8aec4e29609b4ae9a24bc0a767dc12e8
#: ../../howto/deployment/fastcgi.txt:229
msgid "Using mod_fcgid as alternative to mod_fastcgi"
msgstr ""

# 01913bb39e6d41cba2a39ab78e08f0eb
#: ../../howto/deployment/fastcgi.txt:231
msgid ""
"Another way to serve applications through FastCGI is by using Apache's "
"`mod_fcgid`_ module. Compared to mod_fastcgi mod_fcgid handles FastCGI "
"applications differently in that it manages the spawning of worker processes "
"by itself and doesn't offer something like ``FastCGIExternalServer``. This "
"means that the configuration looks slightly different."
msgstr ""

# 562116a9e8434041b7f17b711b5dccfb
#: ../../howto/deployment/fastcgi.txt:237
msgid ""
"In effect, you have to go the way of adding a script handler similar to what "
"is described later on regarding running Django in a :ref:`shared-hosting "
"environment <apache_shared_hosting>`. For further details please refer to "
"the `mod_fcgid reference`_"
msgstr ""

# 896e086577fa49b690c3431f85666b87
#: ../../howto/deployment/fastcgi.txt:246
msgid "lighttpd setup"
msgstr ""

# 4afa5e0fc16e462b8162d94e06e08619
#: ../../howto/deployment/fastcgi.txt:248
msgid ""
"lighttpd_ is a lightweight Web server commonly used for serving static "
"files. It supports FastCGI natively and, thus, is a good choice for serving "
"both static and dynamic pages, if your site doesn't have any Apache-specific "
"needs."
msgstr ""

# 18bc63456c0f41ceaab84ba9533ac8a7
#: ../../howto/deployment/fastcgi.txt:254
msgid ""
"Make sure ``mod_fastcgi`` is in your modules list, somewhere after "
"``mod_rewrite`` and ``mod_access``, but not after ``mod_accesslog``. You'll "
"probably want ``mod_alias`` as well, for serving admin media."
msgstr ""

# bf5eaa2a816043eeb18be2b5500ad817
#: ../../howto/deployment/fastcgi.txt:258
msgid "Add the following to your lighttpd config file:"
msgstr ""

# 8df22088b76c4f988400332c3df18139
#: ../../howto/deployment/fastcgi.txt:285
msgid "Running multiple Django sites on one lighttpd"
msgstr ""

# ece6b67711e447369562c9a174defc7c
#: ../../howto/deployment/fastcgi.txt:287
msgid ""
"lighttpd lets you use \"conditional configuration\" to allow configuration "
"to be customized per host. To specify multiple FastCGI sites, just add a "
"conditional block around your FastCGI config for each site::"
msgstr ""

# a83a1ae62f344f6783d90548040e1ccf
#: ../../howto/deployment/fastcgi.txt:309
msgid ""
"You can also run multiple Django installations on the same site simply by "
"specifying multiple entries in the ``fastcgi.server`` directive. Add one "
"FastCGI host for each."
msgstr ""

# 2dfff7f75ba94a5b810db80a43c42969
#: ../../howto/deployment/fastcgi.txt:314
msgid "Cherokee setup"
msgstr ""

# df0818d5ac534078b4e03acff686cdb5
#: ../../howto/deployment/fastcgi.txt:316
msgid ""
"Cherokee is a very fast, flexible and easy to configure Web Server. It "
"supports the widespread technologies nowadays: FastCGI, SCGI, PHP, CGI, SSI, "
"TLS and SSL encrypted connections, Virtual hosts, Authentication, on the fly "
"encoding, Load Balancing, Apache compatible log files, Data Base Balancer, "
"Reverse HTTP Proxy and much more."
msgstr ""

# f9994c57079d456ca7c863033fd0bac0
#: ../../howto/deployment/fastcgi.txt:322
msgid ""
"The Cherokee project provides a documentation to `setting up Django`_ with "
"Cherokee."
msgstr ""

# 559d831c84e14575aa02efa045c52572
#: ../../howto/deployment/fastcgi.txt:329
msgid "Running Django on a shared-hosting provider with Apache"
msgstr ""

# d61aa93ee4d447f7a2c2b599ff4eb435
#: ../../howto/deployment/fastcgi.txt:331
msgid ""
"Many shared-hosting providers don't allow you to run your own server daemons "
"or edit the ``httpd.conf`` file. In these cases, it's still possible to run "
"Django using Web server-spawned processes."
msgstr ""

# d7267f8d5f4745728b38addd15ce07e3
#: ../../howto/deployment/fastcgi.txt:337
msgid ""
"If you're using Web server-spawned processes, as explained in this section, "
"there's no need for you to start the FastCGI server on your own. Apache will "
"spawn a number of processes, scaling as it needs to."
msgstr ""

# 2a7e12d1ccdb48e79239f2b8f0b13e98
#: ../../howto/deployment/fastcgi.txt:341
msgid "In your Web root directory, add this to a file named ``.htaccess``:"
msgstr ""

# 24fd13f690d045ff91580a1d15f62b29
#: ../../howto/deployment/fastcgi.txt:350
msgid ""
"Then, create a small script that tells Apache how to spawn your FastCGI "
"program. Create a file ``mysite.fcgi`` and place it in your Web directory, "
"and be sure to make it executable:"
msgstr ""

# 328e73b736ec4ac8a51903f8a3231883
#: ../../howto/deployment/fastcgi.txt:371
msgid ""
"This works if your server uses mod_fastcgi. If, on the other hand, you are "
"using mod_fcgid the setup is mostly the same except for a slight change in "
"the ``.htaccess`` file. Instead of adding a fastcgi-script handler, you have "
"to add a fcgid-handler:"
msgstr ""

# 33aa76f4fb1f45b799883b7f6d21ef58
#: ../../howto/deployment/fastcgi.txt:384
msgid "Restarting the spawned server"
msgstr ""

# fdeb9ad7ea954ee2b1f994b361ef78ad
#: ../../howto/deployment/fastcgi.txt:386
msgid ""
"If you change any Python code on your site, you'll need to tell FastCGI the "
"code has changed. But there's no need to restart Apache in this case. "
"Rather, just reupload ``mysite.fcgi``, or edit the file, so that the "
"timestamp on the file will change. When Apache sees the file has been "
"updated, it will restart your Django application for you."
msgstr ""

# 92843d54839c4a06b78a5844ef829aa9
#: ../../howto/deployment/fastcgi.txt:392
msgid ""
"If you have access to a command shell on a Unix system, you can accomplish "
"this easily by using the ``touch`` command::"
msgstr ""

# 816d763fe0fa4905b56149b8bcd7dd7c
#: ../../howto/deployment/fastcgi.txt:398
msgid "Serving admin media files"
msgstr ""

# ffa6de19918f47e180b01f746dddb42e
#: ../../howto/deployment/fastcgi.txt:400
msgid ""
"Regardless of the server and configuration you eventually decide to use, you "
"will also need to give some thought to how to serve the admin media files. "
"The advice given in the :ref:`mod_wsgi <serving-the-admin-files>` "
"documentation is also applicable in the setups detailed above."
msgstr ""

# d2b76fadeb1647b79c81cace5e09065e
#: ../../howto/deployment/fastcgi.txt:406
msgid "Forcing the URL prefix to a particular value"
msgstr ""

# 77e7ae5d458c415590c1ce1c91c52e9e
#: ../../howto/deployment/fastcgi.txt:408
msgid ""
"Because many of these fastcgi-based solutions require rewriting the URL at "
"some point inside the Web server, the path information that Django sees may "
"not resemble the original URL that was passed in. This is a problem if the "
"Django application is being served from under a particular prefix and you "
"want your URLs from the :ttag:`{% url %}<url>` tag to look like the prefix, "
"rather than the rewritten version, which might contain, for example, "
"``mysite.fcgi``."
msgstr ""

# 6602cdf584c34c5a93d7116ee5771fa9
#: ../../howto/deployment/fastcgi.txt:415
msgid ""
"Django makes a good attempt to work out what the real script name prefix "
"should be. In particular, if the Web server sets the ``SCRIPT_URL`` "
"(specific to Apache's mod_rewrite), or ``REDIRECT_URL`` (set by a few "
"servers, including Apache + mod_rewrite in some situations), Django will "
"work out the original prefix automatically."
msgstr ""

# e214f0299b1d457697a8bfee3a446495
#: ../../howto/deployment/fastcgi.txt:421
msgid ""
"In the cases where Django cannot work out the prefix correctly and where you "
"want the original value to be used in URLs, you can set the :setting:"
"`FORCE_SCRIPT_NAME` setting in your main ``settings`` file. This sets the "
"script name uniformly for every URL served via that settings file. Thus "
"you'll need to use different settings files if you want different sets of "
"URLs to have different script names in this case, but that is a rare "
"situation."
msgstr ""

# 8ebf4173ac1549d98f162aec43abbee6
#: ../../howto/deployment/fastcgi.txt:428
msgid ""
"As an example of how to use it, if your Django configuration is serving all "
"of the URLs under ``'/'`` and you wanted to use this setting, you would set "
"``FORCE_SCRIPT_NAME = ''`` in your settings file."
msgstr ""

# f14bd000f5184f9a951bc79dacaf26ba
#: ../../howto/deployment/index.txt:2
msgid "Deploying Django"
msgstr ""

# f221e15bf4634967ad24ac19ade8f888
#: ../../howto/deployment/index.txt:4
msgid ""
"Django's chock-full of shortcuts to make Web developer's lives easier, but "
"all those tools are of no use if you can't easily deploy your sites. Since "
"Django's inception, ease of deployment has been a major goal. There's a "
"number of good ways to easily deploy Django:"
msgstr ""

# efa7b364781b4af589ac4f4f030f089f
#: ../../howto/deployment/index.txt:16
msgid ""
"If you're new to deploying Django and/or Python, we'd recommend you try :doc:"
"`mod_wsgi </howto/deployment/wsgi/modwsgi>` first. In most cases it'll be "
"the easiest, fastest, and most stable deployment choice."
msgstr ""

# 706dfe23557f40f79f47976340fef2ee
#: ../../howto/deployment/index.txt:22
msgid ""
"`Chapter 12 of the Django Book (second edition)`_ discusses deployment and "
"especially scaling in more detail. However, note that this edition was "
"written against Django version 1.1 and has not been updated since :doc:"
"`mod_python </howto/deployment/modpython>` was deprecated."
msgstr ""

# 0611e070abf74c74b2ac57ad18f4e8aa
#: ../../howto/deployment/modpython.txt:3
msgid "How to use Django with Apache and mod_python"
msgstr ""

# b983cc2300e54709a43f60dcd318983e
#: ../../howto/deployment/modpython.txt:7
msgid ""
"Support for mod_python has been deprecated, and will be removed in Django "
"1.5. If you are configuring a new deployment, you are strongly encouraged to "
"consider using :doc:`mod_wsgi </howto/deployment/wsgi/modwsgi>` or any of "
"the other :doc:`supported servers </howto/deployment/index>`."
msgstr ""

# 1b8700514045413689141333cd237ebe
#: ../../howto/deployment/modpython.txt:15
msgid ""
"The `mod_python`_ module for Apache_ can be used to deploy Django to a "
"production server, although it has been mostly superseded by the simpler :"
"doc:`mod_wsgi deployment option </howto/deployment/wsgi/modwsgi>`."
msgstr ""

# 5943f6ea1afc45ee9f2290e1a1f34b02
#: ../../howto/deployment/modpython.txt:19
msgid ""
"mod_python is similar to (and inspired by) `mod_perl`_ : It embeds Python "
"within Apache and loads Python code into memory when the server starts. Code "
"stays in memory throughout the life of an Apache process, which leads to "
"significant performance gains over other server arrangements."
msgstr ""

# c51464f6fb4d40d18d3377ef119a497b
#: ../../howto/deployment/modpython.txt:24
msgid ""
"Django requires Apache 2.x and mod_python 3.x, and you should use Apache's "
"`prefork MPM`_, as opposed to the `worker MPM`_."
msgstr ""

# 7529ea8eff5e4a1e8a7379aec48ce1cc
#: ../../howto/deployment/modpython.txt:29
msgid ""
"Apache is a big, complex animal, and this document only scratches the "
"surface of what Apache can do. If you need more advanced information about "
"Apache, there's no better source than `Apache's own official documentation`_"
msgstr ""

# 1329fc3552a24565b5121c4c27fe2d64
#: ../../howto/deployment/modpython.txt:34
msgid ""
"You may also be interested in :doc:`How to use Django with FastCGI, SCGI, or "
"AJP </howto/deployment/fastcgi>`."
msgstr ""

# 564271ed28ec4fcfa730a0f5e122a719
# 4ab638a9d8cc4f53a636f1a21078dc37
#: ../../howto/deployment/modpython.txt:45
#: ../../howto/deployment/wsgi/modwsgi.txt:25
msgid "Basic configuration"
msgstr ""

# 6401801b7df44edfb6062c669ef193c6
#: ../../howto/deployment/modpython.txt:47
msgid ""
"To configure Django with mod_python, first make sure you have Apache "
"installed, with the mod_python module activated."
msgstr ""

# 68bfb236cd6141b586effff8b99b93a1
#: ../../howto/deployment/modpython.txt:50
msgid "Then edit your ``httpd.conf`` file and add the following::"
msgstr ""

# 3b6445ccba104a329b18dbeda8c44a36
#: ../../howto/deployment/modpython.txt:60
msgid ""
"...and replace ``mysite.settings`` with the Python import path to your "
"Django project's settings file."
msgstr ""

# 3016790f82394487a871557c735fa4ea
#: ../../howto/deployment/modpython.txt:63
msgid ""
"This tells Apache: \"Use mod_python for any URL at or under '/mysite/', "
"using the Django mod_python handler.\" It passes the value of :ref:"
"`DJANGO_SETTINGS_MODULE <django-settings-module>` so mod_python knows which "
"settings to use."
msgstr ""

# 51b293674fbf4e88b19354d6646e9bd8
#: ../../howto/deployment/modpython.txt:67
msgid ""
"Because mod_python does not know we are serving this site from underneath "
"the ``/mysite/`` prefix, this value needs to be passed through to the "
"mod_python handler in Django, via the ``PythonOption django.root ...`` line. "
"The value set on that line (the last item) should match the string given in "
"the ``<Location ...>`` directive. The effect of this is that Django will "
"automatically strip the ``/mysite`` string from the front of any URLs before "
"matching them against your URLconf patterns. If you later move your site to "
"live under ``/mysite2``, you will not have to change anything except the "
"``django.root`` option in the config file."
msgstr ""

# 255f60bf8ce94b63817c08fabd20f898
#: ../../howto/deployment/modpython.txt:77
msgid ""
"When using ``django.root`` you should make sure that what's left, after the "
"prefix has been removed, begins with a slash. Your URLconf patterns that are "
"expecting an initial slash will then work correctly. In the above example, "
"since we want to send things like ``/mysite/admin/`` to ``/admin/``, we need "
"to remove the string ``/mysite`` from the beginning, so that is the ``django."
"root`` value. It would be an error to use ``/mysite/`` (with a trailing "
"slash) in this case."
msgstr ""

# aaea458395b24fcf81fba2b96cea36fe
#: ../../howto/deployment/modpython.txt:85
msgid ""
"Note that we're using the ``<Location>`` directive, not the ``<Directory>`` "
"directive. The latter is used for pointing at places on your filesystem, "
"whereas ``<Location>`` points at places in the URL structure of a Web site. "
"``<Directory>`` would be meaningless here."
msgstr ""

# 250901457ebb431e882d7bdc0f698790
#: ../../howto/deployment/modpython.txt:90
msgid ""
"Also, if your Django project is not on the default ``PYTHONPATH`` for your "
"computer, you'll have to tell mod_python where your project can be found:"
msgstr ""

# 3eeafd8ec2774228a3117cf8df5ec821
#: ../../howto/deployment/modpython.txt:104
msgid ""
"The value you use for ``PythonPath`` should include the parent directories "
"of all the modules you are going to import in your application. It should "
"also include the parent directory of the :ref:`DJANGO_SETTINGS_MODULE "
"<django-settings-module>` location. This is exactly the same situation as "
"setting the Python path for interactive usage. Whenever you try to import "
"something, Python will run through all the directories in ``sys.path`` in "
"turn, from first to last, and try to import from each directory until one "
"succeeds."
msgstr ""

# e13070ef53404815acf8a93105b0e16e
#: ../../howto/deployment/modpython.txt:112
msgid ""
"Make sure that your Python source files' permissions are set such that the "
"Apache user (usually named ``apache`` or ``httpd`` on most systems) will "
"have read access to the files."
msgstr ""

# 29a42d39a28c4340836431932724cdcb
#: ../../howto/deployment/modpython.txt:116
msgid ""
"An example might make this clearer. Suppose you have some applications under "
"``/usr/local/django-apps/`` (for example, ``/usr/local/django-apps/weblog/`` "
"and so forth), your settings file is at ``/var/www/mysite/settings.py`` and "
"you have specified :ref:`DJANGO_SETTINGS_MODULE <django-settings-module>` as "
"in the above example. In this case, you would need to write your "
"``PythonPath`` directive as::"
msgstr ""

# a627ab59610346a1bada5cbb775519ce
#: ../../howto/deployment/modpython.txt:125
msgid ""
"With this path, ``import weblog`` and ``import mysite.settings`` will both "
"work. If you had ``import blogroll`` in your code somewhere and ``blogroll`` "
"lived under the ``weblog/`` directory, you would *also* need to add ``/usr/"
"local/django-apps/weblog/`` to your ``PythonPath``. Remember: the **parent "
"directories** of anything you import directly must be on the Python path."
msgstr ""

# d5feba296ba342bd9153e90a5127bd4b
#: ../../howto/deployment/modpython.txt:134
msgid ""
"If you're using Windows, we still recommended that you use forward slashes "
"in the pathnames, even though Windows normally uses the backslash character "
"as its native separator. Apache knows how to convert from the forward slash "
"format to the native format, so this approach is portable and easier to "
"read. (It avoids tricky problems with having to double-escape backslashes.)"
msgstr ""

# 2eb048e7d2b749ea90d4ce1ece2f8c7e
#: ../../howto/deployment/modpython.txt:141
msgid "This is valid even on a Windows system::"
msgstr ""

# 989081daebd4431280f926d3d530c16a
#: ../../howto/deployment/modpython.txt:145
msgid ""
"You can also add directives such as ``PythonAutoReload Off`` for "
"performance. See the `mod_python documentation`_ for a full list of options."
msgstr ""

# 32261f6af2514364a3011beee601ba33
#: ../../howto/deployment/modpython.txt:148
msgid ""
"Note that you should set ``PythonDebug Off`` on a production server. If you "
"leave ``PythonDebug On``, your users would see ugly (and revealing) Python "
"tracebacks if something goes wrong within mod_python."
msgstr ""

# 4852a3478f3d4d94a30f2f17c4ecc0c2
#: ../../howto/deployment/modpython.txt:152
msgid ""
"Restart Apache, and any request to ``/mysite/`` or below will be served by "
"Django. Note that Django's URLconfs won't trim the \"/mysite/\" -- they get "
"passed the full URL."
msgstr ""

# 28148fc6747f4f578e42c22885b0b505
#: ../../howto/deployment/modpython.txt:156
msgid ""
"When deploying Django sites on mod_python, you'll need to restart Apache "
"each time you make changes to your Python code."
msgstr ""

# ce50f912115d42c6ac3c5c38e720ee1a
#: ../../howto/deployment/modpython.txt:162
msgid "Multiple Django installations on the same Apache"
msgstr ""

# 43471d71e1564b74b8dde21cbf464e1f
#: ../../howto/deployment/modpython.txt:164
msgid ""
"It's entirely possible to run multiple Django installations on the same "
"Apache instance. Just use ``VirtualHost`` for that, like so::"
msgstr ""

# 02c56c9690244e4091f30cf5ae72aa1b
#: ../../howto/deployment/modpython.txt:181
msgid ""
"If you need to put two Django installations within the same ``VirtualHost`` "
"(or in different ``VirtualHost`` blocks that share the same server name), "
"you'll need to take a special precaution to ensure mod_python's cache "
"doesn't mess things up. Use the ``PythonInterpreter`` directive to give "
"different ``<Location>`` directives separate interpreters::"
msgstr ""

# 9e56f2edf721457383cbcb65092d8c40
#: ../../howto/deployment/modpython.txt:201
msgid ""
"The values of ``PythonInterpreter`` don't really matter, as long as they're "
"different between the two ``Location`` blocks."
msgstr ""

# 411459374e7841898fbfe27e5f8ab5f4
#: ../../howto/deployment/modpython.txt:205
msgid "Running a development server with mod_python"
msgstr ""

# 8677ad588e7843cc92c6db21c46db608
#: ../../howto/deployment/modpython.txt:207
msgid ""
"If you use mod_python for your development server, you can avoid the hassle "
"of having to restart the server each time you make code changes. Just set "
"``MaxRequestsPerChild 1`` in your ``httpd.conf`` file to force Apache to "
"reload everything for each request. But don't do that on a production "
"server, or we'll revoke your Django privileges."
msgstr ""

# e99bd0d812fc474e8fe212067700930b
#: ../../howto/deployment/modpython.txt:213
msgid ""
"If you're the type of programmer who debugs using scattered ``print`` "
"statements, note that output to ``stdout`` will not appear in the Apache log "
"and can even `cause response errors`_."
msgstr ""

# ec7981d21693493897dfe2e797a168db
#: ../../howto/deployment/modpython.txt:219
msgid ""
"If you have the need to print debugging information in a mod_python setup, "
"you have a few options. You can print to ``stderr`` explicitly, like so::"
msgstr ""

# 7aa24a40869243859faf107f121081ba
#: ../../howto/deployment/modpython.txt:225
msgid ""
"(note that ``stderr`` is buffered, so calling ``flush`` is necessary if you "
"wish debugging information to be displayed promptly.)"
msgstr ""

# 66bc4f7f4d4c4b8d8ead9ace1ae35509
#: ../../howto/deployment/modpython.txt:228
msgid "A more compact approach is to use an assertion::"
msgstr ""

# 37595791f61840829a3fe0a9cf17b6c5
#: ../../howto/deployment/modpython.txt:232
msgid ""
"Another alternative is to add debugging information to the template of your "
"page."
msgstr ""

# f3c5099bc5e944bbb336b65f1e465129
#: ../../howto/deployment/modpython.txt:235
msgid "Serving media files"
msgstr ""

# b6a864fcb9ff408b82ccccaf4d13a465
#: ../../howto/deployment/modpython.txt:237
msgid ""
"Django doesn't serve media files itself; it leaves that job to whichever Web "
"server you choose."
msgstr ""

# eedb895034d84b209856faa08037e903
# 10b484316866487495b1ead248215d24
#: ../../howto/deployment/modpython.txt:240
#: ../../howto/deployment/wsgi/modwsgi.txt:93
msgid ""
"We recommend using a separate Web server -- i.e., one that's not also "
"running Django -- for serving media. Here are some good choices:"
msgstr ""

# 10d9192a68f249a4a0899b340d2f91c9
# 810af3590c2e4233a10a12bf78801e57
# 458c2ef9637044b4a6748faf5f93493f
#: ../../howto/deployment/modpython.txt:243
#: ../../howto/deployment/wsgi/modwsgi.txt:96 ../../howto/static-files.txt:389
msgid "lighttpd_"
msgstr ""

# 09319ea3bce645a297d599aff791ad7f
# d29fc1ca7db842719c90524be16dda6c
# 8f80f11bc3cc4768b78659782f30f49f
#: ../../howto/deployment/modpython.txt:244
#: ../../howto/deployment/wsgi/modwsgi.txt:97 ../../howto/static-files.txt:390
msgid "Nginx_"
msgstr ""

# 49e0f1bf7c19429ca9e5e0a86db00bb1
# 5a12621027ba40988daaa51a6f3489e1
# 424adfbfd8704f08928aa127a6703923
#: ../../howto/deployment/modpython.txt:245
#: ../../howto/deployment/wsgi/modwsgi.txt:98 ../../howto/static-files.txt:391
msgid "TUX_"
msgstr ""

# 70e7450b51d2409783e707edf7f2e13f
# f51ae8e70a7b4a46ae26b3f64949fcf3
# 2a77ef54a7fb480a9fdfa953173df440
#: ../../howto/deployment/modpython.txt:246
#: ../../howto/deployment/wsgi/modwsgi.txt:99 ../../howto/static-files.txt:393
msgid "A stripped-down version of Apache_"
msgstr ""

# dcebabc12afe424cb51060f51fff1fa2
# c0a7d0b44b8c4aad950403bac91e2c76
# df965cae56174fc7be109b4e1e440042
#: ../../howto/deployment/modpython.txt:247
#: ../../howto/deployment/wsgi/modwsgi.txt:100
#: ../../howto/static-files.txt:392
msgid "Cherokee_"
msgstr ""

# c3aee962b0b94b118bdf919961953497
#: ../../howto/deployment/modpython.txt:249
msgid ""
"If, however, you have no option but to serve media or static files on the "
"same Apache ``VirtualHost`` as Django, here's how you can turn off "
"mod_python for a particular part of the site::"
msgstr ""

# 259b90f6b7374fd1adf036efdb786bd8
#: ../../howto/deployment/modpython.txt:257
msgid ""
"Just change ``Location`` to the root URL of your media files. You can also "
"use ``<LocationMatch>`` to match a regular expression."
msgstr ""

# 3149cc3573d14a87b929c3f0e22c539d
#: ../../howto/deployment/modpython.txt:260
msgid ""
"This example sets up Django at the site root but explicitly disables Django "
"for the ``media`` and ``static`` subdirectories and any URL that ends with "
"``.jpg``, ``.gif`` or ``.png``::"
msgstr ""

# 6be61dcd88ae42499535163499331d40
# fac0095b88834b34a9dfe67c87ba09f2
#: ../../howto/deployment/modpython.txt:289
#: ../../howto/deployment/wsgi/modwsgi.txt:152
msgid "Serving the admin files"
msgstr ""

# 1a865b0d31884716b388adb0e5699c71
#: ../../howto/deployment/modpython.txt:291
msgid ""
"Note that the Django development server automagically serves the static "
"files of the admin app, but this is not the case when you use any other "
"server arrangement. You're responsible for setting up Apache, or whichever "
"media server you're using, to serve the admin files."
msgstr ""

# 2fd2207b630c4fff83390b4a626f1ac1
# b56f3566e2de46c699e992c059f56cba
#: ../../howto/deployment/modpython.txt:296
#: ../../howto/deployment/wsgi/modwsgi.txt:159
msgid ""
"The admin files live in (:file:`django/contrib/admin/static/admin`) of the "
"Django distribution."
msgstr ""

# 55ee2b23f7764bc395cd6cb84bc64e3d
#: ../../howto/deployment/modpython.txt:299
msgid ""
"We **strongly** recommend using :mod:`django.contrib.staticfiles` to handle "
"the admin files (this means using the :djadmin:`collectstatic` management "
"command to collect the static files in :setting:`STATIC_ROOT`, and then "
"configuring your Web server to serve :setting:`STATIC_ROOT` at :setting:"
"`STATIC_URL`), but here are two other approaches:"
msgstr ""

# eade84ac20804f3782ea06392c478957
#: ../../howto/deployment/modpython.txt:305
msgid ""
"Create a symbolic link to the admin static files from within your document "
"root."
msgstr ""

# fc16349a1f5b4a098529df3503fa246a
#: ../../howto/deployment/modpython.txt:308
msgid ""
"Or, copy the admin static files so that they live within your Apache "
"document root."
msgstr ""

# 8d97ae8362b44ff2a35bc9c77e976a83
#: ../../howto/deployment/modpython.txt:312
msgid "Using \"eggs\" with mod_python"
msgstr ""

# a63922db712449f39167a968799fb557
#: ../../howto/deployment/modpython.txt:314
msgid ""
"If you installed Django from a Python egg_ or are using eggs in your Django "
"project, some extra configuration is required. Create an extra file in your "
"project (or somewhere else) that contains something like the following:"
msgstr ""

# d09470ce6174421da886043efbffd453
#: ../../howto/deployment/modpython.txt:323
msgid ""
"Here, ``/some/directory`` is a directory that the Apache Web server process "
"can write to. It will be used as the location for any unpacking of code the "
"eggs need to do."
msgstr ""

# 1dcd1acf61b94a15ac60856ba3f74e3e
#: ../../howto/deployment/modpython.txt:327
msgid ""
"Then you have to tell mod_python to import this file before doing anything "
"else. This is done using the PythonImport_ directive to mod_python. You need "
"to ensure that you have specified the ``PythonInterpreter`` directive to "
"mod_python as described above__ (you need to do this even if you aren't "
"serving multiple installations in this case). Then add the ``PythonImport`` "
"line in the main server configuration (i.e., outside the ``Location`` or "
"``VirtualHost`` sections). For example::"
msgstr ""

# 202a0a2e5e0742f2945a73af0ba37071
#: ../../howto/deployment/modpython.txt:338
msgid ""
"Note that you can use an absolute path here (or a normal dotted import "
"path), as described in the `mod_python manual`_. We use an absolute path in "
"the above example because if any Python path modifications are required to "
"access your project, they will not have been done at the time the "
"``PythonImport`` line is processed."
msgstr ""

# 9d69c217197540dc82112677301ecda6
#: ../../howto/deployment/modpython.txt:350
msgid "Error handling"
msgstr ""

# 8b91b9704b8646c8ab207221e0ef60eb
#: ../../howto/deployment/modpython.txt:352
msgid ""
"When you use Apache/mod_python, errors will be caught by Django -- in other "
"words, they won't propagate to the Apache level and won't appear in the "
"Apache ``error_log``."
msgstr ""

# 65f128e01be846fbb776bf18751ae127
#: ../../howto/deployment/modpython.txt:356
msgid ""
"The exception for this is if something is really wonky in your Django setup. "
"In that case, you'll see an \"Internal Server Error\" page in your browser "
"and the full Python traceback in your Apache ``error_log`` file. The "
"``error_log`` traceback is spread over multiple lines. (Yes, this is ugly "
"and rather hard to read, but it's how mod_python does things.)"
msgstr ""

# 998a2d83dce4490bb345d1809c68687c
#: ../../howto/deployment/modpython.txt:363
msgid "If you get a segmentation fault"
msgstr ""

# f8c9e7631bee486e9a25572fe6ec9ba8
#: ../../howto/deployment/modpython.txt:365
msgid ""
"If Apache causes a segmentation fault, there are two probable causes, "
"neither of which has to do with Django itself."
msgstr ""

# 0af405333ef348f8b4e373bc642011a5
#: ../../howto/deployment/modpython.txt:368
msgid ""
"It may be because your Python code is importing the \"pyexpat\" module, "
"which may conflict with the version embedded in Apache. For full "
"information, see `Expat Causing Apache Crash`_."
msgstr ""

# fdd3442764ee4aedb3b7d2310801863f
#: ../../howto/deployment/modpython.txt:372
msgid ""
"It may be because you're running mod_python and mod_php in the same Apache "
"instance, with MySQL as your database backend. In some cases, this causes a "
"known mod_python issue due to version conflicts in PHP and the Python MySQL "
"backend. There's full information in the `mod_python FAQ entry`_."
msgstr ""

# 11dfdfdd41d143a6a51e8684fad89d30
#: ../../howto/deployment/modpython.txt:378
msgid ""
"If you continue to have problems setting up mod_python, a good thing to do "
"is get a barebones mod_python site working, without the Django framework. "
"This is an easy way to isolate mod_python-specific problems. `Getting "
"mod_python Working`_ details this procedure."
msgstr ""

# d3f3e8f36d204956b4d2de43cfafdf70
#: ../../howto/deployment/modpython.txt:383
msgid ""
"The next step should be to edit your test code and add an import of any "
"Django-specific code you're using -- your views, your models, your URLconf, "
"your RSS configuration, etc. Put these imports in your test handler function "
"and access your test URL in a browser. If this causes a crash, you've "
"confirmed it's the importing of Django code that causes the problem. "
"Gradually reduce the set of imports until it stops crashing, so as to find "
"the specific module that causes the problem. Drop down further into modules "
"and look into their imports, as necessary."
msgstr ""

# 8c33fac0549d4ef4842f5b56cb4c5d3b
#: ../../howto/deployment/modpython.txt:397
msgid "If you get a UnicodeEncodeError"
msgstr ""

# 3f3d89eea6f14433ab9c91fb8f725918
#: ../../howto/deployment/modpython.txt:399
msgid ""
"If you're taking advantage of the internationalization features of Django "
"(see :doc:`/topics/i18n/index`) and you intend to allow users to upload "
"files, you must ensure that the environment used to start Apache is "
"configured to accept non-ASCII file names. If your environment is not "
"correctly configured, you will trigger ``UnicodeEncodeError`` exceptions "
"when calling functions like ``os.path()`` on filenames that contain non-"
"ASCII characters."
msgstr ""

# ffb23a057d9f4f23af7cc25f1f6c689b
#: ../../howto/deployment/modpython.txt:406
msgid ""
"To avoid these problems, the environment used to start Apache should contain "
"settings analogous to the following::"
msgstr ""

# 72d2145fae5f440f8c173577061b4a33
#: ../../howto/deployment/modpython.txt:412
msgid ""
"Consult the documentation for your operating system for the appropriate "
"syntax and location to put these configuration items; ``/etc/apache2/"
"envvars`` is a common location on Unix platforms. Once you have added these "
"statements to your environment, restart Apache."
msgstr ""

# d3d31c1c69a34f2c806b267892bb3763
#: ../../howto/deployment/wsgi/gunicorn.txt:3
msgid "How to use Django with Gunicorn"
msgstr ""

# 2a7a0c3d2dcc40e698a576ce3a96da09
#: ../../howto/deployment/wsgi/gunicorn.txt:7
msgid ""
"Gunicorn_ ('Green Unicorn') is a pure-Python WSGI server for UNIX. It has no "
"dependencies and is easy to install and use."
msgstr ""

# d4470fd2869f4dab9802f2e360f0becb
#: ../../howto/deployment/wsgi/gunicorn.txt:12
msgid ""
"There are two ways to use Gunicorn with Django. One is to have Gunicorn "
"treat Django as just another WSGI application. The second is to use "
"Gunicorn's special `integration with Django`_."
msgstr ""

# 6d752fb520ee41aa9efad10910e3350b
#: ../../howto/deployment/wsgi/gunicorn.txt:19
msgid "Installing Gunicorn"
msgstr ""

# 62d477830b474c3a9e8fd771d963447d
#: ../../howto/deployment/wsgi/gunicorn.txt:21
msgid ""
"Installing gunicorn is as easy as ``sudo pip install gunicorn``. For more "
"details, see the `gunicorn documentation`_."
msgstr ""

# a4ee8a50f0714a9aa45f17aab570e6d3
#: ../../howto/deployment/wsgi/gunicorn.txt:27
msgid "Running Django in Gunicorn as a generic WSGI application"
msgstr ""

# 440758c257c546f482f6758f016ff360
#: ../../howto/deployment/wsgi/gunicorn.txt:29
msgid ""
"When Gunicorn is installed, a ``gunicorn`` command is available which starts "
"the Gunicorn server process. At its simplest, gunicorn just needs to be "
"called with a the location of a WSGI application object.::"
msgstr ""

# bdbad6b2027948bfbb1c4c81a73cba7d
#: ../../howto/deployment/wsgi/gunicorn.txt:35
msgid ""
"Where ``APP_MODULE`` is of the pattern ``MODULE_NAME:VARIABLE_NAME``. The "
"module name should be a full dotted path. The variable name refers to a WSGI "
"callable that should be found in the specified module."
msgstr ""

# 684e24f0766844b3a291cfc4d61debd7
#: ../../howto/deployment/wsgi/gunicorn.txt:39
msgid "So for a typical Django project, invoking gunicorn would look like::"
msgstr ""

# 8b90e5ab83fd4017a97a4f8564d8ce01
#: ../../howto/deployment/wsgi/gunicorn.txt:43
msgid ""
"(This requires that your project be on the Python path; the simplest way to "
"ensure that is to run this command from the same directory as your ``manage."
"py`` file.)"
msgstr ""

# d0a652920b1145efb385879df299c6b0
#: ../../howto/deployment/wsgi/gunicorn.txt:49
msgid "Using Gunicorn's Django integration"
msgstr ""

# 6639177a5f0c4ec7baa4371d76659e18
#: ../../howto/deployment/wsgi/gunicorn.txt:51
msgid ""
"To use Gunicorn's built-in Django integration, first add ``\"gunicorn\"`` "
"to :setting:`INSTALLED_APPS`. Then run ``python manage.py run_gunicorn``."
msgstr ""

# 23d3a86f666a4deb9aa7e85bcb7a06c4
#: ../../howto/deployment/wsgi/gunicorn.txt:54
msgid "This provides a few Django-specific niceties:"
msgstr ""

# e4ae7507da2943df91349b2cdec7a9b9
#: ../../howto/deployment/wsgi/gunicorn.txt:56
msgid "sets the gunicorn process name to be that of the project"
msgstr ""

# 35dc3198f7e246eaba18263f196f1b7a
#: ../../howto/deployment/wsgi/gunicorn.txt:58
msgid "validates installed models"
msgstr ""

# 87d920c7072f41bc883fb055d921508b
#: ../../howto/deployment/wsgi/gunicorn.txt:60
msgid ""
"allows an ``--adminmedia`` option for passing in the location of the admin "
"media files, mimicing the behavior of runserver."
msgstr ""

# c6e05badca37448ea8e2adc008384f54
#: ../../howto/deployment/wsgi/gunicorn.txt:63
msgid ""
"See Gunicorn's `deployment documentation`_ for additional tips on starting "
"and maintaining the Gunicorn server."
msgstr ""

# b170b0e74c794f7bbf81ec85fad24bf5
#: ../../howto/deployment/wsgi/index.txt:3
msgid "How to deploy with WSGI"
msgstr ""

# 39b7974098964cb9b696c189c270d014
#: ../../howto/deployment/wsgi/index.txt:5
msgid ""
"Django's primary deployment platform is WSGI_, the Python standard for web "
"servers and applications."
msgstr ""

# c5f65bf664834c73aee7415d8b1562f7
#: ../../howto/deployment/wsgi/index.txt:10
msgid ""
"Django's :djadmin:`startproject` management command sets up a simple default "
"WSGI configuration for you, which you can tweak as needed for your project, "
"and direct any WSGI-compliant webserver to use. Django includes getting-"
"started documentation for the following WSGI servers:"
msgstr ""

# 3fe638c6d0234579ace0074675993a5a
#: ../../howto/deployment/wsgi/index.txt:23
msgid "The ``application`` object"
msgstr ""

# 7f577eab282147cf81c06bb67767fe85
#: ../../howto/deployment/wsgi/index.txt:25
msgid ""
"One key concept of deploying with WSGI is to specify a central "
"``application`` callable object which the webserver uses to communicate with "
"your code. This is commonly specified as an object named ``application`` in "
"a Python module accessible to the server."
msgstr ""

# e120dfa4052d42f5a0682fd36323e02d
#: ../../howto/deployment/wsgi/index.txt:32
msgid ""
"The :djadmin:`startproject` command creates a :file:`projectname/wsgi.py` "
"that contains such an application callable."
msgstr ""

# 4ff323846c7446f58fe86f6ca0af20a8
#: ../../howto/deployment/wsgi/index.txt:37
msgid ""
"Upgrading from a previous release of Django and don't have a :file:`wsgi.py` "
"file in your project? You can simply add one to your project's top-level "
"Python package (probably next to :file:`settings.py` and :file:`urls.py`) "
"with the contents below. If you want :djadmin:`runserver` to also make use "
"of this WSGI file, you can also add ``WSGI_APPLICATION = \"mysite.wsgi."
"application\"`` in your settings (replacing ``mysite`` with the name of your "
"project)."
msgstr ""

# bdb90934b763403d817dadf52a311c8f
#: ../../howto/deployment/wsgi/index.txt:45
msgid "Initially this file contains::"
msgstr ""

# 949ed401d7c34319acb5b8784feab42b
#: ../../howto/deployment/wsgi/index.txt:56
msgid ""
"The ``os.environ.setdefault`` line just sets the default settings module to "
"use, if you haven't explicitly set the :envvar:`DJANGO_SETTINGS_MODULE` "
"environment variable. You'll need to edit this line to replace ``mysite`` "
"with the name of your project package, so the path to your settings module "
"is correct."
msgstr ""

# 06ff4fe46655443eb7c4ba69573045b9
#: ../../howto/deployment/wsgi/index.txt:62
msgid ""
"To apply `WSGI middleware`_ you can simply wrap the application object in "
"the same file::"
msgstr ""

# aa7411b71532465694f738fecd0deff2
#: ../../howto/deployment/wsgi/index.txt:68
msgid ""
"You could also replace the Django WSGI application with a custom WSGI "
"application that later delegates to the Django WSGI application, if you want "
"to combine a Django application with a WSGI application of another framework."
msgstr ""

# 1574ec92cf9f4ace89c0667ca31deeb7
#: ../../howto/deployment/wsgi/modwsgi.txt:3
msgid "How to use Django with Apache and mod_wsgi"
msgstr ""

# e79f8f9d3a5e49809ba2116f1c765c10
#: ../../howto/deployment/wsgi/modwsgi.txt:5
msgid ""
"Deploying Django with Apache_ and `mod_wsgi`_ is a tried and tested way to "
"get Django into production."
msgstr ""

# 09f2793a61bb42e986eae9404ea79910
#: ../../howto/deployment/wsgi/modwsgi.txt:11
msgid ""
"mod_wsgi is an Apache module which can host any Python WSGI_ application, "
"including Django. Django will work with any version of Apache which supports "
"mod_wsgi."
msgstr ""

# 0cec79a7bfd748c69b163071974cb471
#: ../../howto/deployment/wsgi/modwsgi.txt:17
msgid ""
"The `official mod_wsgi documentation`_ is fantastic; it's your source for "
"all the details about how to use mod_wsgi. You'll probably want to start "
"with the `installation and configuration documentation`_."
msgstr ""

# aa196ec0b6d5442893d0c9f658c0665e
#: ../../howto/deployment/wsgi/modwsgi.txt:27
msgid ""
"Once you've got mod_wsgi installed and activated, edit your Apache server's "
"``httpd.conf`` file and add::"
msgstr ""

# d0d1502283894093bf12128954d36457
#: ../../howto/deployment/wsgi/modwsgi.txt:40
msgid ""
"The first bit in the ``WSGIScriptAlias`` line is the base URL path you want "
"to serve your application at (``/`` indicates the root url), and the second "
"is the location of a \"WSGI file\" -- see below -- on your system, usually "
"inside of your project package (``mysite`` in this example). This tells "
"Apache to serve any request below the given URL using the WSGI application "
"defined in that file."
msgstr ""

# 4a321d6133074182aed7162b96b2b7a4
#: ../../howto/deployment/wsgi/modwsgi.txt:47
msgid ""
"The ``WSGIPythonPath`` line ensures that your project package is available "
"for import on the Python path; in other words, that ``import mysite`` works."
msgstr ""

# 22effd25c8da4a9c96d7a6a774bad986
#: ../../howto/deployment/wsgi/modwsgi.txt:50
msgid ""
"The ``<Directory>`` piece just ensures that Apache can access your :file:"
"`wsgi.py` file."
msgstr ""

# 2fe0cb6c5e5d4454a1374ffced93fe70
#: ../../howto/deployment/wsgi/modwsgi.txt:53
msgid ""
"Next we'll need to ensure this :file:`wsgi.py` with a WSGI application "
"object exists. As of Django version 1.4, :djadmin:`startproject` will have "
"created one for you; otherwise, you'll need to create it. See the :doc:`WSGI "
"overview documentation</howto/deployment/wsgi/index>` for the default "
"contents you should put in this file, and what else you can add to it."
msgstr ""

# 6f63ffc8db7f4315b9c58fc22f9ba826
#: ../../howto/deployment/wsgi/modwsgi.txt:60
msgid "Using a virtualenv"
msgstr ""

# 951cfd3247c74607a94d5b442ce44f95
#: ../../howto/deployment/wsgi/modwsgi.txt:62
msgid ""
"If you install your project's Python dependencies inside a `virtualenv`_, "
"you'll need to add the path to this virtualenv's ``site-packages`` directory "
"to your Python path as well. To do this, you can add another line to your "
"Apache configuration::"
msgstr ""

# 941b6dc919e44ead8c9f3dd40d3de180
#: ../../howto/deployment/wsgi/modwsgi.txt:69
msgid ""
"Make sure you give the correct path to your virtualenv, and replace "
"``python2.X`` with the correct Python version (e.g. ``python2.7``)."
msgstr ""

# b7f7bade7afc4d75ae0b8e221812cb7d
#: ../../howto/deployment/wsgi/modwsgi.txt:75
msgid "Using mod_wsgi daemon mode"
msgstr ""

# f6c05ea1e45a4c608609efe7537be9a7
#: ../../howto/deployment/wsgi/modwsgi.txt:77
msgid ""
"\"Daemon mode\" is the recommended mode for running mod_wsgi (on non-Windows "
"platforms). See the `official mod_wsgi documentation`_ for details on "
"setting up daemon mode. The only change required to the above configuration "
"if you use daemon mode is that you can't use ``WSGIPythonPath``; instead you "
"should use the ``python-path`` option to ``WSGIDaemonProcess``, for example::"
msgstr ""

# 9f6e01a18a3442838b0e149a21ecf16f
#: ../../howto/deployment/wsgi/modwsgi.txt:88
msgid "Serving files"
msgstr ""

# cc7c08731f5948b8aa1ec9427b27bf0b
#: ../../howto/deployment/wsgi/modwsgi.txt:90
msgid ""
"Django doesn't serve files itself; it leaves that job to whichever Web "
"server you choose."
msgstr ""

# 0e21ef8be2fa44d692459bca0f409387
#: ../../howto/deployment/wsgi/modwsgi.txt:102
msgid ""
"If, however, you have no option but to serve media files on the same Apache "
"``VirtualHost`` as Django, you can set up Apache to serve some URLs as "
"static media, and others using the mod_wsgi interface to Django."
msgstr ""

# 37b66f7d499243279c4facd9995da92c
#: ../../howto/deployment/wsgi/modwsgi.txt:106
msgid ""
"This example sets up Django at the site root, but explicitly serves ``robots."
"txt``, ``favicon.ico``, any CSS file, and anything in the ``/static/`` and "
"``/media/`` URL space as a static file. All other URLs will be served using "
"mod_wsgi::"
msgstr ""

# aae4d485fe664aa39108318703da58c7
#: ../../howto/deployment/wsgi/modwsgi.txt:154
msgid ""
"Note that the Django development server automatically serves the static "
"files of the admin app (and any other installed apps), but this is not the "
"case when you use any other server arrangement. You're responsible for "
"setting up Apache, or whichever media server you're using, to serve the "
"admin files."
msgstr ""

# 91ba3cdcf63f4419b246a14e781f4e82
#: ../../howto/deployment/wsgi/modwsgi.txt:162
msgid ""
"We **strongly** recommend using :mod:`django.contrib.staticfiles` to handle "
"the admin files (along with a Web server as outlined in the previous "
"section; this means using the :djadmin:`collectstatic` management command to "
"collect the static files in :setting:`STATIC_ROOT`, and then configuring "
"your Web server to serve :setting:`STATIC_ROOT` at :setting:`STATIC_URL`), "
"but here are three other approaches:"
msgstr ""

# c13dd6b1184c4a6c9ab793cc81d6a65a
#: ../../howto/deployment/wsgi/modwsgi.txt:169
msgid ""
"Create a symbolic link to the admin static files from within your document "
"root (this may require ``+FollowSymLinks`` in your Apache configuration)."
msgstr ""

# 4bfd3c728a904348b4a6ab5d9c4b79de
#: ../../howto/deployment/wsgi/modwsgi.txt:173
msgid ""
"Use an ``Alias`` directive, as demonstrated above, to alias the appropriate "
"URL (probably :setting:`STATIC_URL` + `admin/`) to the actual location of "
"the admin files."
msgstr ""

# 71352ecb5a4d40638b303ac1f60cb16b
#: ../../howto/deployment/wsgi/modwsgi.txt:177
msgid ""
"Copy the admin static files so that they live within your Apache document "
"root."
msgstr ""

# 72875a8b3c38444fbea9d8081e098552
#: ../../howto/deployment/wsgi/uwsgi.txt:3
msgid "How to use Django with uWSGI"
msgstr ""

# 007fccdb015041d38aed5de973171dba
#: ../../howto/deployment/wsgi/uwsgi.txt:7
msgid ""
"uWSGI_ is a fast, self-healing and developer/sysadmin-friendly application "
"container server coded in pure C."
msgstr ""

# de1c7fff0a9a45188516054f48c43403
#: ../../howto/deployment/wsgi/uwsgi.txt:13
msgid "Prerequisite: uWSGI"
msgstr ""

# 4cc652b3ee8049febe6c76b0c098f909
#: ../../howto/deployment/wsgi/uwsgi.txt:15
msgid ""
"The uWSGI wiki describes several `installation procedures`_. Using pip, the "
"Python package manager, you can install any uWSGI version with a single "
"command. For example:"
msgstr ""

# af67e47fcd794f3e8725a17be6c18176
#: ../../howto/deployment/wsgi/uwsgi.txt:30
msgid "uWSGI model"
msgstr ""

# 94edc8417fd748869a67801699e1495c
#: ../../howto/deployment/wsgi/uwsgi.txt:32
msgid ""
"uWSGI operates on a client-server model. Your Web server (e.g., nginx, "
"Apache) communicates with a django-uwsgi \"worker\" process to serve dynamic "
"content. See uWSGI's `background documentation`_ for more detail."
msgstr ""

# eedc204f4c4c496e8d1daa4c224b78c5
#: ../../howto/deployment/wsgi/uwsgi.txt:39
msgid "Configuring and starting the uWSGI server for Django"
msgstr ""

# d35a4fd576384c1da465c099af1cd911
#: ../../howto/deployment/wsgi/uwsgi.txt:41
msgid ""
"uWSGI supports multiple ways to configure the process. See uWSGI's "
"`configuration documentation`_ and `examples`_"
msgstr ""

# a965dfaf2c064167bf9f7a8d7e526749
#: ../../howto/deployment/wsgi/uwsgi.txt:47
msgid "Here's an example command to start a uWSGI server::"
msgstr ""

# 7415174c417b4359ab1cf32a60ccc52e
#: ../../howto/deployment/wsgi/uwsgi.txt:63
msgid ""
"This assumes you have a top-level project package named ``mysite``, and "
"within it a module :file:`mysite/wsgi.py` that contains a WSGI "
"``application`` object. This is the layout you'll have if you ran ``django-"
"admin.py startproject mysite`` (using your own project name in place of "
"``mysite``) with a recent version of Django. If this file doesn't exist, "
"you'll need to create it. See the :doc:`/howto/deployment/wsgi/index` "
"documentation for the default contents you should put in this file and what "
"else you can add to it."
msgstr ""

# 83956d643b9f402a8a2e83f193c9e2bf
#: ../../howto/deployment/wsgi/uwsgi.txt:71
msgid "The Django-specific options here are:"
msgstr ""

# d1ba354c6efb4e70ac81a9dbd4ee438a
#: ../../howto/deployment/wsgi/uwsgi.txt:73
msgid ""
"``chdir``: The path to the directory that needs to be on Python's import "
"path -- i.e., the directory containing the ``mysite`` package."
msgstr ""

# c8fce6011b3c4004b547b499f89f33ba
#: ../../howto/deployment/wsgi/uwsgi.txt:75
msgid ""
"``module``: The WSGI module to use -- probably the ``mysite.wsgi`` module "
"that :djadmin:`startproject` creates."
msgstr ""

# 87390f3e6bb9478ba5220d9718fae557
#: ../../howto/deployment/wsgi/uwsgi.txt:77
msgid "``env``: Should probably contain at least ``DJANGO_SETTINGS_MODULE``."
msgstr ""

# f6e9fca51dc243728ca365d43d163f03
#: ../../howto/deployment/wsgi/uwsgi.txt:78
msgid "``home``: Optional path to your project virtualenv."
msgstr ""

# 15771a89678b439abf12e50eccbc39ab
#: ../../howto/deployment/wsgi/uwsgi.txt:80
msgid "Example ini configuration file::"
msgstr ""

# af1d34fecd644aa39fe0cc2063fcd89d
#: ../../howto/deployment/wsgi/uwsgi.txt:91
msgid "Example ini configuration file usage::"
msgstr ""

# 1c41214ecdbf4acbafdd3234c59cc62b
#: ../../howto/deployment/wsgi/uwsgi.txt:95
msgid ""
"See the uWSGI docs on `managing the uWSGI process`_ for information on "
"starting, stoping and reloading the uWSGI workers."
msgstr ""

# 12f827552fac442bbe382ae2c2977c9f
#: ../../howto/error-reporting.txt:2
msgid "Error reporting"
msgstr ""

# 14cd43c95f47431fb808b8cacef48f8f
#: ../../howto/error-reporting.txt:4
msgid ""
"When you're running a public site you should always turn off the :setting:"
"`DEBUG` setting. That will make your server run much faster, and will also "
"prevent malicious users from seeing details of your application that can be "
"revealed by the error pages."
msgstr ""

# dd9d060ce100487885ca91a30c50ab4f
#: ../../howto/error-reporting.txt:9
msgid ""
"However, running with :setting:`DEBUG` set to ``False`` means you'll never "
"see errors generated by your site -- everyone will just see your public "
"error pages. You need to keep track of errors that occur in deployed sites, "
"so Django can be configured to create reports with details about those "
"errors."
msgstr ""

# df3af85a722b46178e47aa3ab6759d9a
#: ../../howto/error-reporting.txt:15
msgid "Email reports"
msgstr ""

# 34cca51a754c4fe684d94aa923623b6a
#: ../../howto/error-reporting.txt:18
msgid "Server errors"
msgstr ""

# 3ab9903be8f246bdb49ae3bb1fef96a1
#: ../../howto/error-reporting.txt:20
msgid ""
"When :setting:`DEBUG` is ``False``, Django will email the users listed in "
"the :setting:`ADMINS` setting whenever your code raises an unhandled "
"exception and results in an internal server error (HTTP status code 500). "
"This gives the administrators immediate notification of any errors. The :"
"setting:`ADMINS` will get a description of the error, a complete Python "
"traceback, and details about the HTTP request that caused the error."
msgstr ""

# 4bce8f03aa7e47979e719d78e7be7d7a
#: ../../howto/error-reporting.txt:29
msgid ""
"In order to send email, Django requires a few settings telling it how to "
"connect to your mail server. At the very least, you'll need to specify :"
"setting:`EMAIL_HOST` and possibly :setting:`EMAIL_HOST_USER` and :setting:"
"`EMAIL_HOST_PASSWORD`, though other settings may be also required depending "
"on your mail server's configuration. Consult :doc:`the Django settings "
"documentation </ref/settings>` for a full list of email-related settings."
msgstr ""

# ca1693a40854435c996f8523cf8348b0
#: ../../howto/error-reporting.txt:38
msgid ""
"By default, Django will send email from root@localhost. However, some mail "
"providers reject all email from this address. To use a different sender "
"address, modify the :setting:`SERVER_EMAIL` setting."
msgstr ""

# c95c9b66b2934669b79adcc573181f7a
#: ../../howto/error-reporting.txt:42
msgid ""
"To disable this behavior, just remove all entries from the :setting:`ADMINS` "
"setting."
msgstr ""

# 40c8b03db4824477acc5ec2d67cee961
#: ../../howto/error-reporting.txt:49
msgid ""
"Server error emails are sent using the logging framework, so you can "
"customize this behavior by :doc:`customizing your logging configuration </"
"topics/logging>`."
msgstr ""

# 43513755ecf648debf1a3c72c274f264
#: ../../howto/error-reporting.txt:54
msgid "404 errors"
msgstr ""

# 92b64715901d4d9a8fce627bea4fe1ab
#: ../../howto/error-reporting.txt:56
msgid ""
"Django can also be configured to email errors about broken links (404 \"page "
"not found\" errors). Django sends emails about 404 errors when:"
msgstr ""

# bf684028f650413cba1913df18feb3cc
#: ../../howto/error-reporting.txt:59
msgid ":setting:`DEBUG` is ``False``"
msgstr ""

# 2efccc076b844305bc040a25634f7dca
#: ../../howto/error-reporting.txt:61
msgid ":setting:`SEND_BROKEN_LINK_EMAILS` is ``True``"
msgstr ""

# e9d9fef7c6c5462e83eda0dcd7b8894f
#: ../../howto/error-reporting.txt:63
msgid ""
"Your :setting:`MIDDLEWARE_CLASSES` setting includes ``CommonMiddleware`` "
"(which it does by default)."
msgstr ""

# 4f30bcc7923f4e5fb10ddb7d04afaff4
#: ../../howto/error-reporting.txt:66
msgid ""
"If those conditions are met, Django will email the users listed in the :"
"setting:`MANAGERS` setting whenever your code raises a 404 and the request "
"has a referer. (It doesn't bother to email for 404s that don't have a "
"referer -- those are usually just people typing in broken URLs or broken Web "
"'bots)."
msgstr ""

# c25eff5eee89463a9560428fc10d1813
#: ../../howto/error-reporting.txt:71
msgid ""
"You can tell Django to stop reporting particular 404s by tweaking the :"
"setting:`IGNORABLE_404_URLS` setting. It should be a tuple of compiled "
"regular expression objects. For example::"
msgstr ""

# 4d3bc2d4dd9b4482b6b9237e1c7b083d
#: ../../howto/error-reporting.txt:81
msgid ""
"In this example, a 404 to any URL ending with ``.php`` or ``.cgi`` will "
"*not* be reported. Neither will any URL starting with ``/phpmyadmin/``."
msgstr ""

# d7ed2fffc32f41ae8841e3e1a97cfab8
#: ../../howto/error-reporting.txt:84
msgid ""
"The following example shows how to exclude some conventional URLs that "
"browsers and crawlers often request::"
msgstr ""

# cbc1f750219d44d9beab6e52d0e89a9a
#: ../../howto/error-reporting.txt:94
msgid ""
"(Note that these are regular expressions, so we put a backslash in front of "
"periods to escape them.)"
msgstr ""

# ced332dfccc64a6391aab600520c5321
#: ../../howto/error-reporting.txt:97
msgid ""
"The best way to disable this behavior is to set :setting:"
"`SEND_BROKEN_LINK_EMAILS` to ``False``."
msgstr ""

# dd6eb7b37e7346b7abe61f4639d9030c
#: ../../howto/error-reporting.txt:104
msgid ""
"404 errors are logged using the logging framework. By default, these log "
"records are ignored, but you can use them for error reporting by writing a "
"handler and :doc:`configuring logging </topics/logging>` appropriately."
msgstr ""

# f786793143354998bc37344b37c991b7
#: ../../howto/error-reporting.txt:112
msgid ""
"Previously, two settings were used to control which URLs not to report: :"
"setting:`IGNORABLE_404_STARTS` and :setting:`IGNORABLE_404_ENDS`. They were "
"replaced by :setting:`IGNORABLE_404_URLS`."
msgstr ""

# 6273a76cce56484dbf708798ef10b907
#: ../../howto/error-reporting.txt:119
msgid "Filtering error reports"
msgstr ""

# 7d41622f0e544b71a90fe39ab7dce6a8
#: ../../howto/error-reporting.txt:124
msgid "Filtering sensitive information"
msgstr ""

# 6821fb4c42304abc84e4d4ac345c86db
#: ../../howto/error-reporting.txt:126
msgid ""
"Error reports are really helpful for debugging errors, so it is generally "
"useful to record as much relevant information about those errors as "
"possible. For example, by default Django records the `full traceback`_ for "
"the exception raised, each `traceback frame`_'s local variables, and the :"
"class:`HttpRequest`'s :ref:`attributes<httprequest-attributes>`."
msgstr ""

# 98f1221b47b147c0839e0c3941853ba2
#: ../../howto/error-reporting.txt:132
msgid ""
"However, sometimes certain types of information may be too sensitive and "
"thus may not be appropriate to be kept track of, for example a user's "
"password or credit card number. So Django offers a set of function "
"decorators to help you control which information should be filtered out of "
"error reports in a production environment (that is, where :setting:`DEBUG` "
"is set to ``False``): :func:`sensitive_variables` and :func:"
"`sensitive_post_parameters`."
msgstr ""

# fbd76004a63d45d0bdfb50509aba46aa
#: ../../howto/error-reporting.txt:144
msgid ""
"If a function (either a view or any regular callback) in your code uses "
"local variables susceptible to contain sensitive information, you may "
"prevent the values of those variables from being included in error reports "
"using the ``sensitive_variables`` decorator::"
msgstr ""

# 5ee4dc74ec584e95a1317a1624856004
#: ../../howto/error-reporting.txt:158
msgid ""
"In the above example, the values for the ``user``, ``pw`` and ``cc`` "
"variables will be hidden and replaced with stars (`**********`) in the error "
"reports, whereas the value of the ``name`` variable will be disclosed."
msgstr ""

# 05e2e8c4eb364896a0aa42477eb6dc24
#: ../../howto/error-reporting.txt:163
msgid ""
"To systematically hide all local variables of a function from error logs, do "
"not provide any argument to the ``sensitive_variables`` decorator::"
msgstr ""

# 50ad6002cc944ecf88b8340e4530e12b
#: ../../howto/error-reporting.txt:172
msgid ""
"If one of your views receives an :class:`HttpRequest` object with :attr:"
"`POST parameters<HttpRequest.POST>` susceptible to contain sensitive "
"information, you may prevent the values of those parameters from being "
"included in the error reports using the ``sensitive_post_parameters`` "
"decorator::"
msgstr ""

# da81583976874077ba99b28932f2bed6
#: ../../howto/error-reporting.txt:188
msgid ""
"In the above example, the values for the ``pass_word`` and "
"``credit_card_number`` POST parameters will be hidden and replaced with "
"stars (`**********`) in the request's representation inside the error "
"reports, whereas the value of the ``name`` parameter will be disclosed."
msgstr ""

# 75a9474e2c0c46ec88f35fb89474a017
#: ../../howto/error-reporting.txt:193
msgid ""
"To systematically hide all POST parameters of a request in error reports, do "
"not provide any argument to the ``sensitive_post_parameters`` decorator::"
msgstr ""

# 15c0946a1bc948908bb2f7a624208fc5
#: ../../howto/error-reporting.txt:204
msgid ""
"Since version 1.4, all POST parameters are systematically filtered out of "
"error reports for certain :mod:`contrib.views.auth` views (``login``, "
"``password_reset_confirm``, ``password_change``, and ``add_view`` and "
"``user_change_password`` in the ``auth`` admin) to prevent the leaking of "
"sensitive information such as user passwords."
msgstr ""

# 7a11cfd2c52044d690273ae682102afd
#: ../../howto/error-reporting.txt:213
msgid "Custom error reports"
msgstr ""

# 70f6ecf6291c4a4899fbaccfbdca5c94
#: ../../howto/error-reporting.txt:215
msgid ""
"All :func:`sensitive_variables` and :func:`sensitive_post_parameters` do is, "
"respectively, annotate the decorated function with the names of sensitive "
"variables and annotate the ``HttpRequest`` object with the names of "
"sensitive POST parameters, so that this sensitive information can later be "
"filtered out of reports when an error occurs. The actual filtering is done "
"by Django's default error reporter filter: :class:`django.views.debug."
"SafeExceptionReporterFilter`. This filter uses the decorators' annotations "
"to replace the corresponding values with stars (`**********`) when the error "
"reports are produced. If you wish to override or customize this default "
"behavior for your entire site, you need to define your own filter class and "
"tell Django to use it via the :setting:`DEFAULT_EXCEPTION_REPORTER_FILTER` "
"setting::"
msgstr ""

# c8ef1a4088d145c2bff0b9127a362465
#: ../../howto/error-reporting.txt:230
msgid ""
"You may also control in a more granular way which filter to use within any "
"given view by setting the ``HttpRequest``'s ``exception_reporter_filter`` "
"attribute::"
msgstr ""

# 50d6776cc39b402f84dba3ad8365ae36
#: ../../howto/error-reporting.txt:239
msgid ""
"Your custom filter class needs to inherit from :class:`django.views.debug."
"SafeExceptionReporterFilter` and may override the following methods:"
msgstr ""

# 34c97266806d477db79ae64bfe88a5a6
#: ../../howto/error-reporting.txt:247
msgid ""
"Returns ``True`` to activate the filtering operated in the other methods. By "
"default the filter is active if :setting:`DEBUG` is ``False``."
msgstr ""

# 2e3797cfc140433da087e4caa2362832
#: ../../howto/error-reporting.txt:252
msgid ""
"Returns the representation string of the request object, that is, the value "
"that would be returned by ``repr(request)``, except it uses the filtered "
"dictionary of POST parameters as determined by :meth:"
"`SafeExceptionReporterFilter.get_post_parameters`."
msgstr ""

# 3267cc20b7284687a981af75acc82ca6
#: ../../howto/error-reporting.txt:259
msgid ""
"Returns the filtered dictionary of POST parameters. By default it replaces "
"the values of sensitive parameters with stars (`**********`)."
msgstr ""

# 8d23b5753ebe42e6a08960b88d77d585
#: ../../howto/error-reporting.txt:264
msgid ""
"Returns the filtered dictionary of local variables for the given traceback "
"frame. By default it replaces the values of sensitive variables with stars "
"(`**********`)."
msgstr ""

# 6ea4a987972b4c908c5bd0a6c84d367c
#: ../../howto/error-reporting.txt:270
msgid ""
"You can also set up custom error reporting by writing a custom piece of :ref:"
"`exception middleware <exception-middleware>`. If you do write custom error "
"handling, it's a good idea to emulate Django's built-in error handling and "
"only report/log errors if :setting:`DEBUG` is ``False``."
msgstr ""

# d887a749e87440d7834066f097e73282
#: ../../howto/index.txt:2
msgid "\"How-to\" guides"
msgstr ""

# 8eceaa74416c455db3ea22acae1bf269
#: ../../howto/index.txt:4
msgid ""
"Here you'll find short answers to \"How do I....?\" types of questions. "
"These how-to guides don't cover topics in depth -- you'll find that material "
"in the :doc:`/topics/index` and the :doc:`/ref/index`. However, these guides "
"will help you quickly accomplish common tasks."
msgstr ""

# 97967a179ea74928b5c7889b47ec3170
#: ../../howto/index.txt:29
msgid ""
"The `Django community aggregator`_, where we aggregate content from the "
"global Django community. Many writers in the aggregator write this sort of "
"how-to material."
msgstr ""

# 97017609cbe54edaa22d7a697ebf6045
#: ../../howto/initial-data.txt:3
msgid "Providing initial data for models"
msgstr ""

# 454c2297fd934293a4ebfb98671ea839
#: ../../howto/initial-data.txt:5
msgid ""
"It's sometimes useful to pre-populate your database with hard-coded data "
"when you're first setting up an app. There's a couple of ways you can have "
"Django automatically create this data: you can provide `initial data via "
"fixtures`_, or you can provide `initial data as SQL`_."
msgstr ""

# e371f583ea244ae3a197ebb0407248b4
#: ../../howto/initial-data.txt:10
msgid ""
"In general, using a fixture is a cleaner method since it's database-"
"agnostic, but initial SQL is also quite a bit more flexible."
msgstr ""

# de5538fc3626402fbc877fbdffcb477f
#: ../../howto/initial-data.txt:19
msgid "Providing initial data with fixtures"
msgstr ""

# 64df56c0b0e343d8a22f90103610918a
#: ../../howto/initial-data.txt:21
msgid ""
"A fixture is a collection of data that Django knows how to import into a "
"database. The most straightforward way of creating a fixture if you've "
"already got some data is to use the :djadmin:`manage.py dumpdata <dumpdata>` "
"command. Or, you can write fixtures by hand; fixtures can be written as XML, "
"YAML, or JSON documents. The :doc:`serialization documentation </topics/"
"serialization>` has more details about each of these supported :ref:"
"`serialization formats <serialization-formats>`."
msgstr ""

# 8d3aae99d099483799ecc81cda7aa34b
#: ../../howto/initial-data.txt:29
msgid ""
"As an example, though, here's what a fixture for a simple ``Person`` model "
"might look like in JSON:"
msgstr ""

# 97b93dbad4524af4adf0bfb40d34c112
#: ../../howto/initial-data.txt:53
msgid "And here's that same fixture as YAML:"
msgstr ""

# 9f032b7e3b5c40ffa3507c0b2a116817
#: ../../howto/initial-data.txt:68
msgid "You'll store this data in a ``fixtures`` directory inside your app."
msgstr ""

# 873283907fb3499f8a539be9568f01cc
#: ../../howto/initial-data.txt:70
msgid ""
"Loading data is easy: just call :djadmin:`manage.py loaddata <fixturename> "
"<loaddata>`, where ``<fixturename>`` is the name of the fixture file you've "
"created. Each time you run :djadmin:`loaddata`, the data will be read from "
"the fixture and re-loaded into the database. Note this means that if you "
"change one of the rows created by a fixture and then run :djadmin:`loaddata` "
"again, you'll wipe out any changes you've made."
msgstr ""

# e12f178648a04a059a4e2a5e03060040
#: ../../howto/initial-data.txt:78
msgid "Automatically loading initial data fixtures"
msgstr ""

# 4e7586017c3d47bfbce109e44522f131
#: ../../howto/initial-data.txt:80
msgid ""
"If you create a fixture named ``initial_data.[xml/yaml/json]``, that fixture "
"will be loaded every time you run :djadmin:`syncdb`. This is extremely "
"convenient, but be careful: remember that the data will be refreshed *every "
"time* you run :djadmin:`syncdb`. So don't use ``initial_data`` for data "
"you'll want to edit."
msgstr ""

# c2652cb60c834d24a1ab2545134069db
#: ../../howto/initial-data.txt:86
msgid "Where Django finds fixture files"
msgstr ""

# 793d9086116a4178ba2468842b45a995
#: ../../howto/initial-data.txt:88
msgid ""
"By default, Django looks in the ``fixtures`` directory inside each app for "
"fixtures. You can set the :setting:`FIXTURE_DIRS` setting to a list of "
"additional directories where Django should look."
msgstr ""

# 4ecac7b88fdb46c7b394458922e9da79
#: ../../howto/initial-data.txt:92
msgid ""
"When running :djadmin:`manage.py loaddata <loaddata>`, you can also specify "
"an absolute path to a fixture file, which overrides searching the usual "
"directories."
msgstr ""

# 98f592b09c3e4968a1fa560bdbd82847
#: ../../howto/initial-data.txt:98
msgid ""
"Fixtures are also used by the :ref:`testing framework <topics-testing-"
"fixtures>` to help set up a consistent test environment."
msgstr ""

# 00a5124b3f9d4456b65414d69d13da8c
#: ../../howto/initial-data.txt:104
msgid "Providing initial SQL data"
msgstr ""

# 747fd296be104dccad99827c9596c905
#: ../../howto/initial-data.txt:106
msgid ""
"Django provides a hook for passing the database arbitrary SQL that's "
"executed just after the CREATE TABLE statements when you run :djadmin:"
"`syncdb`. You can use this hook to populate default records, or you could "
"also create SQL functions, views, triggers, etc."
msgstr ""

# 2a7c661c04564aaf846ae82afe3b42da
#: ../../howto/initial-data.txt:111
msgid ""
"The hook is simple: Django just looks for a file called ``sql/<modelname>."
"sql``, in your app directory, where ``<modelname>`` is the model's name in "
"lowercase."
msgstr ""

# e0d74743076b4845814210b739893581
#: ../../howto/initial-data.txt:114
msgid ""
"So, if you had a ``Person`` model in an app called ``myapp``, you could add "
"arbitrary SQL to the file ``sql/person.sql`` inside your ``myapp`` "
"directory. Here's an example of what the file might contain:"
msgstr ""

# 27a28c378a1a4bf4894836114b75d22d
#: ../../howto/initial-data.txt:123
msgid ""
"Each SQL file, if given, is expected to contain valid SQL statements which "
"will insert the desired data (e.g., properly-formatted ``INSERT`` statements "
"separated by semicolons)."
msgstr ""

# 9328330da4034136af92cf22f9ab2076
#: ../../howto/initial-data.txt:127
msgid ""
"The SQL files are read by the :djadmin:`sqlcustom`, :djadmin:`sqlreset`, :"
"djadmin:`sqlall` and :djadmin:`reset` commands in :doc:`manage.py </ref/"
"django-admin>`. Refer to the :doc:`manage.py documentation </ref/django-"
"admin>` for more information."
msgstr ""

# 5aad311bb19d48e9bc067381563fbdf1
#: ../../howto/initial-data.txt:132
msgid ""
"Note that if you have multiple SQL data files, there's no guarantee of the "
"order in which they're executed. The only thing you can assume is that, by "
"the time your custom data files are executed, all the database tables "
"already will have been created."
msgstr ""

# 3117c2b55b8849b98d0623c65fd2ed5a
#: ../../howto/initial-data.txt:139
msgid ""
"This technique *cannot* be used to provide initial data for testing "
"purposes. Django's test framework flushes the contents of the test database "
"after each test; as a result, any data added using the custom SQL hook will "
"be lost."
msgstr ""

# 1ca7188f1bda4a899003c8d4f2d90380
#: ../../howto/initial-data.txt:144
msgid ""
"If you require data for a test case, you should add it using either a :ref:"
"`test fixture <topics-testing-fixtures>`, or programatically add it during "
"the ``setUp()`` of your test case."
msgstr ""

# d6da11ecc13b4ccdb5288f6380d27e80
#: ../../howto/initial-data.txt:149
msgid "Database-backend-specific SQL data"
msgstr ""

# 7111b34b4f6149299d454d346cfa5c9f
#: ../../howto/initial-data.txt:151
msgid ""
"There's also a hook for backend-specific SQL data. For example, you can have "
"separate initial-data files for PostgreSQL and SQLite. For each app, Django "
"looks for a file called ``<appname>/sql/<modelname>.<backend>.sql``, where "
"``<appname>`` is your app directory, ``<modelname>`` is the model's name in "
"lowercase and ``<backend>`` is the last part of the module name provided for "
"the :setting:`ENGINE` in your settings file (e.g., if you have defined a "
"database with an :setting:`ENGINE` value of ``django.db.backends.sqlite3``, "
"Django will look for ``<appname>/sql/<modelname>.sqlite3.sql``)."
msgstr ""

# 46d20ff8d90046d9be453ed7e5a3b90d
#: ../../howto/initial-data.txt:162
msgid ""
"Backend-specific SQL data is executed before non-backend-specific SQL data. "
"For example, if your app contains the files ``sql/person.sql`` and ``sql/"
"person.sqlite3.sql`` and you're installing the app on SQLite, Django will "
"execute the contents of ``sql/person.sqlite.sql`` first, then ``sql/person."
"sql``."
msgstr ""

# 7f6cc27f81904387be08ac313018310b
#: ../../howto/jython.txt:3
msgid "Running Django on Jython"
msgstr ""

# 4ce1621481604669bd24118cb72ba9cd
#: ../../howto/jython.txt:7
msgid ""
"Jython_ is an implementation of Python that runs on the Java platform (JVM). "
"Django runs cleanly on Jython version 2.5 or later, which means you can "
"deploy Django on any Java platform."
msgstr ""

# a01fd03012784b8cbfc4ca29eea93455
#: ../../howto/jython.txt:11
msgid "This document will get you up and running with Django on top of Jython."
msgstr ""

# bee7e165af04404fa26a23a325ce0bba
#: ../../howto/jython.txt:16
msgid "Installing Jython"
msgstr ""

# 29f74d299a6844de97872efbc79d1678
#: ../../howto/jython.txt:18
msgid ""
"Django works with Jython versions 2.5b3 and higher. Download Jython at "
"http://www.jython.org/."
msgstr ""

# ebb77ccef0fd47ecab844abb0b659356
#: ../../howto/jython.txt:22
msgid "Creating a servlet container"
msgstr ""

# 0e1f1e30af194f4c980f5ebd081cb18d
#: ../../howto/jython.txt:24
msgid ""
"If you just want to experiment with Django, skip ahead to the next section; "
"Django includes a lightweight Web server you can use for testing, so you "
"won't need to set up anything else until you're ready to deploy Django in "
"production."
msgstr ""

# 183618e969974e19a8ed988a80a2ae7d
#: ../../howto/jython.txt:28
msgid ""
"If you want to use Django on a production site, use a Java servlet "
"container, such as `Apache Tomcat`_. Full JavaEE applications servers such "
"as `GlassFish`_ or `JBoss`_ are also OK, if you need the extra features they "
"include."
msgstr ""

# 38eb3457333b4e0081f07fa8c6454d4e
#: ../../howto/jython.txt:37
msgid "Installing Django"
msgstr ""

# f638c758d53e407a90615c81a58d7c41
#: ../../howto/jython.txt:39
msgid ""
"The next step is to install Django itself. This is exactly the same as "
"installing Django on standard Python, so see :ref:`removing-old-versions-of-"
"django` and :ref:`install-django-code` for instructions."
msgstr ""

# 5596c21a0c2c498583b01f7dc2d6588d
#: ../../howto/jython.txt:45
msgid "Installing Jython platform support libraries"
msgstr ""

# 69e7111e299d4b57b9f1ab0156086d8c
#: ../../howto/jython.txt:47
msgid ""
"The `django-jython`_ project contains database backends and management "
"commands for Django/Jython development. Note that the builtin Django "
"backends won't work on top of Jython."
msgstr ""

# 9449be303f3e414397fdf8b859bf4952
#: ../../howto/jython.txt:53
msgid ""
"To install it, follow the `installation instructions`_ detailed on the "
"project Web site. Also, read the `database backends`_ documentation there."
msgstr ""

# bbcf95c99c244dd498a5ddb6b4322bbc
#: ../../howto/jython.txt:60
msgid "Differences with Django on Jython"
msgstr ""

# df7491a51e2b4639a6a8a919352dc960
#: ../../howto/jython.txt:64
msgid ""
"At this point, Django on Jython should behave nearly identically to Django "
"running on standard Python. However, are a few differences to keep in mind:"
msgstr ""

# 2c61cf93f9964464ab70493dd35da4f3
#: ../../howto/jython.txt:67
msgid ""
"Remember to use the ``jython`` command instead of ``python``. The "
"documentation uses ``python`` for consistency, but if you're using Jython "
"you'll want to mentally replace ``python`` with ``jython`` every time it "
"occurs."
msgstr ""

# b8f24b5c60754c1daae07c049fe8197e
#: ../../howto/jython.txt:72
msgid ""
"Similarly, you'll need to use the ``JYTHONPATH`` environment variable "
"instead of ``PYTHONPATH``."
msgstr ""

# a8a2cbaf107243b88ab2b1029f32ee18
#: ../../howto/legacy-databases.txt:3
msgid "Integrating Django with a legacy database"
msgstr ""

# 2bad26244e94442981777e0d1b8908a5
#: ../../howto/legacy-databases.txt:5
msgid ""
"While Django is best suited for developing new applications, it's quite "
"possible to integrate it into legacy databases. Django includes a couple of "
"utilities to automate as much of this process as possible."
msgstr ""

# 62a0e39db6f54ba7864fe244d031942a
#: ../../howto/legacy-databases.txt:9
msgid ""
"This document assumes you know the Django basics, as covered in the :doc:"
"`tutorial </intro/tutorial01>`."
msgstr ""

# e3bb9e7ccf404e0faf0c90a3bb9fee8e
#: ../../howto/legacy-databases.txt:12
msgid ""
"Once you've got Django set up, you'll follow this general process to "
"integrate with an existing database."
msgstr ""

# 15054afdd3e84692abd1b65bc61f84b9
#: ../../howto/legacy-databases.txt:16
msgid "Give Django your database parameters"
msgstr ""

# 992b3a506e13451e8f62f80c2e1944e9
#: ../../howto/legacy-databases.txt:18
msgid ""
"You'll need to tell Django what your database connection parameters are, and "
"what the name of the database is. Do that by editing the :setting:"
"`DATABASES` setting and assigning values to the following keys for the "
"``'default'`` connection:"
msgstr ""

# f7f6e37edb1c4e1a864fd72304248a39
#: ../../howto/legacy-databases.txt:23
msgid ":setting:`NAME`"
msgstr ""

# db22d456754745febe46087e3ba0fee7
#: ../../howto/legacy-databases.txt:24
msgid ":setting:`ENGINE`"
msgstr ""

# 3308e4d5980f4bb7b8e024bbe7eece2e
#: ../../howto/legacy-databases.txt:25
msgid ":setting:`USER`"
msgstr ""

# 7f8032615d63440d96bf0304faf32d8c
#: ../../howto/legacy-databases.txt:26
msgid ":setting:`PASSWORD`"
msgstr ""

# ec24bebd5c2a4b2dafa7d613d0a22142
#: ../../howto/legacy-databases.txt:27
msgid ":setting:`HOST`"
msgstr ""

# 7d5fc019f57b4921987187aa87b6855d
#: ../../howto/legacy-databases.txt:28
msgid ":setting:`PORT`"
msgstr ""

# b4ee4126c28b4de992b4037782a7da3a
#: ../../howto/legacy-databases.txt:31
msgid "Auto-generate the models"
msgstr ""

# 9207d34223694746866c110615786bf5
#: ../../howto/legacy-databases.txt:35
msgid ""
"Django comes with a utility called :djadmin:`inspectdb` that can create "
"models by introspecting an existing database. You can view the output by "
"running this command::"
msgstr ""

# 8c5a6cf9bcac48aaa124a6eb1c3885ec
#: ../../howto/legacy-databases.txt:41
msgid "Save this as a file by using standard Unix output redirection::"
msgstr ""

# 182e59046dfb4fa0af4230bb8f3ff0ad
#: ../../howto/legacy-databases.txt:45
msgid ""
"This feature is meant as a shortcut, not as definitive model generation. See "
"the :djadmin:`documentation of inspectdb <inspectdb>` for more information."
msgstr ""

# f26d085932214ed1a4369c05b438eb6e
#: ../../howto/legacy-databases.txt:48
msgid ""
"Once you've cleaned up your models, name the file ``models.py`` and put it "
"in the Python package that holds your app. Then add the app to your :setting:"
"`INSTALLED_APPS` setting."
msgstr ""

# 6f06e57631bc444e86ef23e292af963c
#: ../../howto/legacy-databases.txt:53
msgid "Install the core Django tables"
msgstr ""

# ae6c33d9313b467384c84317794f899e
#: ../../howto/legacy-databases.txt:55
msgid ""
"Next, run the :djadmin:`syncdb` command to install any extra needed database "
"records such as admin permissions and content types::"
msgstr ""

# 62a10c0fed1c4a82a2ab25f6f8766a96
#: ../../howto/legacy-databases.txt:61
msgid "Test and tweak"
msgstr ""

# 82d834fc764f4fe184888d88ed5ee6bf
#: ../../howto/legacy-databases.txt:63
msgid ""
"Those are the basic steps -- from here you'll want to tweak the models "
"Django generated until they work the way you'd like. Try accessing your data "
"via the Django database API, and try editing objects via Django's admin "
"site, and edit the models file accordingly."
msgstr ""

# 54ef6bedb1bd4fc28674475f9ae34e93
#: ../../howto/outputting-csv.txt:3
msgid "Outputting CSV with Django"
msgstr ""

# 9089f69688784de98feb3121374c7c54
#: ../../howto/outputting-csv.txt:5
msgid ""
"This document explains how to output CSV (Comma Separated Values) "
"dynamically using Django views. To do this, you can either use the Python "
"CSV library or the Django template system."
msgstr ""

# 189c9874d1bd40adac922c92cb7d2d7a
#: ../../howto/outputting-csv.txt:10
msgid "Using the Python CSV library"
msgstr ""

# 5f623bfaae8e42388909ceb44ea0b106
#: ../../howto/outputting-csv.txt:12
msgid ""
"Python comes with a CSV library, :mod:`csv`. The key to using it with Django "
"is that the :mod:`csv` module's CSV-creation capability acts on file-like "
"objects, and Django's :class:`~django.http.HttpResponse` objects are file-"
"like objects."
msgstr ""

# e947d2268af04ceab1520835fce9af6a
#: ../../howto/outputting-csv.txt:16
msgid "Here's an example::"
msgstr ""

# 192340bc8cb948ed88e9ba7771883b6e
# 2fefd66e5e814e97a274d337d32647ab
#: ../../howto/outputting-csv.txt:32 ../../howto/outputting-pdf.txt:63
msgid ""
"The code and comments should be self-explanatory, but a few things deserve a "
"mention:"
msgstr ""

# 01d32f1f666d494da428de9c06cfc905
#: ../../howto/outputting-csv.txt:35
msgid ""
"The response gets a special MIME type, :mimetype:`text/csv`. This tells "
"browsers that the document is a CSV file, rather than an HTML file. If you "
"leave this off, browsers will probably interpret the output as HTML, which "
"will result in ugly, scary gobbledygook in the browser window."
msgstr ""

# 67c5f0c206b1404aaf7d06136e2d92d2
#: ../../howto/outputting-csv.txt:40
msgid ""
"The response gets an additional ``Content-Disposition`` header, which "
"contains the name of the CSV file. This filename is arbitrary; call it "
"whatever you want. It'll be used by browsers in the \"Save as...\" dialogue, "
"etc."
msgstr ""

# cd1b286ac3d4464d8f7e3de80e5b16f1
#: ../../howto/outputting-csv.txt:45
msgid ""
"Hooking into the CSV-generation API is easy: Just pass ``response`` as the "
"first argument to ``csv.writer``. The ``csv.writer`` function expects a file-"
"like object, and :class:`~django.http.HttpResponse` objects fit the bill."
msgstr ""

# 9b58acfc949048c1a37d5a290a06f03c
#: ../../howto/outputting-csv.txt:50
msgid ""
"For each row in your CSV file, call ``writer.writerow``, passing it an "
"iterable object such as a list or tuple."
msgstr ""

# 429254f2292b443aad7699838039c9e4
#: ../../howto/outputting-csv.txt:53
msgid ""
"The CSV module takes care of quoting for you, so you don't have to worry "
"about escaping strings with quotes or commas in them. Just pass ``writerow()"
"`` your raw strings, and it'll do the right thing."
msgstr ""

# ae543c549aaa4c0a85a923148e0871db
#: ../../howto/outputting-csv.txt:58
msgid "Handling Unicode"
msgstr ""

# 1290d5777e474e75b7d6befd35c0a164
#: ../../howto/outputting-csv.txt:60
msgid ""
"Python's :mod:`csv` module does not support Unicode input. Since Django uses "
"Unicode internally this means strings read from sources such as :class:"
"`~django.http.HttpRequest` are potentially problematic. There are a few "
"options for handling this:"
msgstr ""

# 27a77f6c68d541c1a76ae2d5f80dcd50
#: ../../howto/outputting-csv.txt:65
msgid "Manually encode all Unicode objects to a compatible encoding."
msgstr ""

# 423132458d5e4a868c07573738ef0dab
#: ../../howto/outputting-csv.txt:67
msgid ""
"Use the ``UnicodeWriter`` class provided in the `csv module's examples "
"section`_."
msgstr ""

# 13215b2e807e4f51a7905e1a57ad99a8
#: ../../howto/outputting-csv.txt:70
msgid ""
"Use the `python-unicodecsv module`_, which aims to be a drop-in replacement "
"for :mod:`csv` that gracefully handles Unicode."
msgstr ""

# 5f82ae45a0ec4843b678f41d58814429
#: ../../howto/outputting-csv.txt:73
msgid ""
"For more information, see the Python documentation of the :mod:`csv` module."
msgstr ""

# d75e9bbc6ef040939b2b96d88bc2d694
#: ../../howto/outputting-csv.txt:79
msgid "Using the template system"
msgstr ""

# 97ac7392cae44ebf833c7622a11e9127
#: ../../howto/outputting-csv.txt:81
msgid ""
"Alternatively, you can use the :doc:`Django template system </topics/"
"templates>` to generate CSV. This is lower-level than using the convenient "
"Python :mod:`csv` module, but the solution is presented here for "
"completeness."
msgstr ""

# bb394af0314445f09929177cc49e35c8
#: ../../howto/outputting-csv.txt:85
msgid ""
"The idea here is to pass a list of items to your template, and have the "
"template output the commas in a :ttag:`for` loop."
msgstr ""

# 745ccbf1ca2744cbb22d04af51e214d8
#: ../../howto/outputting-csv.txt:88
msgid "Here's an example, which generates the same CSV file as above::"
msgstr ""

# 5fe04d7b30684c34867cc411eaf48830
#: ../../howto/outputting-csv.txt:112
msgid ""
"The only difference between this example and the previous example is that "
"this one uses template loading instead of the CSV module. The rest of the "
"code -- such as the ``mimetype='text/csv'`` -- is the same."
msgstr ""

# e5054a717422420a8a580dc25706c67d
#: ../../howto/outputting-csv.txt:116
msgid ""
"Then, create the template ``my_template_name.txt``, with this template code:"
msgstr ""

# c92683c01f924b77832ce18b90c0ff91
#: ../../howto/outputting-csv.txt:123
msgid ""
"This template is quite basic. It just iterates over the given data and "
"displays a line of CSV for each row. It uses the :tfilter:`addslashes` "
"template filter to ensure there aren't any problems with quotes."
msgstr ""

# b96170bda27940c3bacd1650a44ed40b
#: ../../howto/outputting-csv.txt:128
msgid "Other text-based formats"
msgstr ""

# 39e4fd28039e4d46bcd53acf308a2468
#: ../../howto/outputting-csv.txt:130
msgid ""
"Notice that there isn't very much specific to CSV here -- just the specific "
"output format. You can use either of these techniques to output any text-"
"based format you can dream of. You can also use a similar technique to "
"generate arbitrary binary data; see :doc:`/howto/outputting-pdf` for an "
"example."
msgstr ""

# 1d12085dba734aaaa46e60b0989f7b8e
#: ../../howto/outputting-pdf.txt:3
msgid "Outputting PDFs with Django"
msgstr ""

# 86c980e1dd484238b6c7dbac038abc29
#: ../../howto/outputting-pdf.txt:5
msgid ""
"This document explains how to output PDF files dynamically using Django "
"views. This is made possible by the excellent, open-source ReportLab_ Python "
"PDF library."
msgstr ""

# c57c478f4b72406dafc10ae890deeda6
#: ../../howto/outputting-pdf.txt:9
msgid ""
"The advantage of generating PDF files dynamically is that you can create "
"customized PDFs for different purposes -- say, for different users or "
"different pieces of content."
msgstr ""

# e485f47356b4444f8b531a5aa2a28cf9
#: ../../howto/outputting-pdf.txt:13
msgid ""
"For example, Django was used at kusports.com_ to generate customized, "
"printer-friendly NCAA tournament brackets, as PDF files, for people "
"participating in a March Madness contest."
msgstr ""

# 4c6cbee686d24f1e85a32e83ef9a5787
#: ../../howto/outputting-pdf.txt:21
msgid "Install ReportLab"
msgstr ""

# c68361210d994016adb3b45c231d1314
#: ../../howto/outputting-pdf.txt:23
msgid ""
"Download and install the ReportLab library from http://www.reportlab.org/oss/"
"rl-toolkit/download/. The `user guide`_ (not coincidentally, a PDF file) "
"explains how to install it."
msgstr ""

# ad873928f25044cfb685afd1f1efdb27
#: ../../howto/outputting-pdf.txt:26
msgid ""
"Test your installation by importing it in the Python interactive "
"interpreter::"
msgstr ""

# 31e09336e1864c7c8089a3939259a7dc
#: ../../howto/outputting-pdf.txt:30
msgid "If that command doesn't raise any errors, the installation worked."
msgstr ""

# c6a7b076d91e46b7a564a4aa88b41fc5
#: ../../howto/outputting-pdf.txt:35
msgid "Write your view"
msgstr ""

# 84561ca0a3b04b5790af27056fc67876
#: ../../howto/outputting-pdf.txt:37
msgid ""
"The key to generating PDFs dynamically with Django is that the ReportLab API "
"acts on file-like objects, and Django's :class:`~django.http.HttpResponse` "
"objects are file-like objects."
msgstr ""

# c303c299b4444b3192e362c44396e0c0
#: ../../howto/outputting-pdf.txt:41
msgid "Here's a \"Hello World\" example::"
msgstr ""

# 11298041a9ed4303bec249d1330a0663
#: ../../howto/outputting-pdf.txt:66
msgid ""
"The response gets a special MIME type, :mimetype:`application/pdf`. This "
"tells browsers that the document is a PDF file, rather than an HTML file. If "
"you leave this off, browsers will probably interpret the output as HTML, "
"which would result in ugly, scary gobbledygook in the browser window."
msgstr ""

# 1ef9ca241cdb44e69c18ae3b7cfc7421
#: ../../howto/outputting-pdf.txt:72
msgid ""
"The response gets an additional ``Content-Disposition`` header, which "
"contains the name of the PDF file. This filename is arbitrary: Call it "
"whatever you want. It'll be used by browsers in the \"Save as...\" dialogue, "
"etc."
msgstr ""

# 7ae92527433749e78335c137feb4f357
#: ../../howto/outputting-pdf.txt:77
msgid ""
"The ``Content-Disposition`` header starts with ``'attachment; '`` in this "
"example. This forces Web browsers to pop-up a dialog box prompting/"
"confirming how to handle the document even if a default is set on the "
"machine. If you leave off ``'attachment;'``, browsers will handle the PDF "
"using whatever program/plugin they've been configured to use for PDFs. "
"Here's what that code would look like::"
msgstr ""

# dde45c9de17c4b79b1756c46ed1c841c
#: ../../howto/outputting-pdf.txt:86
msgid ""
"Hooking into the ReportLab API is easy: Just pass ``response`` as the first "
"argument to ``canvas.Canvas``. The ``Canvas`` class expects a file-like "
"object, and :class:`~django.http.HttpResponse` objects fit the bill."
msgstr ""

# 0b1edae7c53d42c9bec4711574e29719
#: ../../howto/outputting-pdf.txt:91
msgid ""
"Note that all subsequent PDF-generation methods are called on the PDF object "
"(in this case, ``p``) -- not on ``response``."
msgstr ""

# e50c8498aded4928ac028a28bd6c73b4
#: ../../howto/outputting-pdf.txt:94
msgid ""
"Finally, it's important to call ``showPage()`` and ``save()`` on the PDF "
"file."
msgstr ""

# 2b6549aab2364cf381d5e05a1047cb2d
#: ../../howto/outputting-pdf.txt:98
msgid "Complex PDFs"
msgstr ""

# c3926a34f98248988a0a65274188b35e
#: ../../howto/outputting-pdf.txt:100
msgid ""
"If you're creating a complex PDF document with ReportLab, consider using "
"the :mod:`cStringIO` library as a temporary holding place for your PDF file. "
"This library provides a file-like object interface that is particularly "
"efficient. Here's the above \"Hello World\" example rewritten to use :mod:"
"`cStringIO`::"
msgstr ""

# bdb564c60c924854aeec3be070772c8c
#: ../../howto/outputting-pdf.txt:138
msgid "Further resources"
msgstr ""

# 114b50a76b134eb784f3a1ae06bab53a
#: ../../howto/outputting-pdf.txt:140
msgid ""
"PDFlib_ is another PDF-generation library that has Python bindings. To use "
"it with Django, just use the same concepts explained in this article."
msgstr ""

# 71f9955ae0714c0fbc1c266c8b768049
#: ../../howto/outputting-pdf.txt:142
msgid ""
"`Pisa XHTML2PDF`_ is yet another PDF-generation library. Pisa ships with an "
"example of how to integrate Pisa with Django."
msgstr ""

# 9188de18e3354d31b09cb54bd65bcfa3
#: ../../howto/outputting-pdf.txt:144
msgid ""
"HTMLdoc_ is a command-line script that can convert HTML to PDF. It doesn't "
"have a Python interface, but you can escape out to the shell using "
"``system`` or ``popen`` and retrieve the output in Python."
msgstr ""

# c0aa76f9212447b99ddc0bc1087fa9fd
#: ../../howto/outputting-pdf.txt:153
msgid "Other formats"
msgstr ""

# 504cfb63b04e49088408f14930999e1a
#: ../../howto/outputting-pdf.txt:155
msgid ""
"Notice that there isn't a lot in these examples that's PDF-specific -- just "
"the bits using ``reportlab``. You can use a similar technique to generate "
"any arbitrary format that you can find a Python library for. Also see :doc:`/"
"howto/outputting-csv` for another example and some techniques you can use "
"when generated text-based formats."
msgstr ""

# fcb590fcceb94fd48c077acb620eb056
#: ../../howto/static-files.txt:3
msgid "Managing static files"
msgstr ""

# cbbb57a988d540f29d132ffb3c9d40eb
#: ../../howto/static-files.txt:7
msgid ""
"Django developers mostly concern themselves with the dynamic parts of web "
"applications -- the views and templates that render anew for each request. "
"But web applications have other parts: the static files (images, CSS, "
"Javascript, etc.) that are needed to render a complete web page."
msgstr ""

# 32d9113ee65f4db6be2482f50ee338f0
#: ../../howto/static-files.txt:12
msgid ""
"For small projects, this isn't a big deal, because you can just keep the "
"static files somewhere your web server can find it. However, in bigger "
"projects -- especially those comprised of multiple apps -- dealing with the "
"multiple sets of static files provided by each application starts to get "
"tricky."
msgstr ""

# 210aa84cbec844a68d91824ea5afb2a6
#: ../../howto/static-files.txt:18
msgid ""
"That's what ``django.contrib.staticfiles`` is for: it collects static files "
"from each of your applications (and any other places you specify) into a "
"single location that can easily be served in production."
msgstr ""

# e26d0df177914e819aaaa95434c827db
#: ../../howto/static-files.txt:24
msgid ""
"If you've used the `django-staticfiles`_ third-party app before, then "
"``django.contrib.staticfiles`` will look very familiar. That's because "
"they're essentially the same code: ``django.contrib.staticfiles`` started "
"its life as `django-staticfiles`_ and was merged into Django 1.3."
msgstr ""

# 611a24402ccd440e8d3564c066961e1d
#: ../../howto/static-files.txt:29
msgid ""
"If you're upgrading from ``django-staticfiles``, please see `Upgrading from "
"django-staticfiles`_, below, for a few minor changes you'll need to make."
msgstr ""

# 9745fa4e16d64327a5aa7cb3507bd166
#: ../../howto/static-files.txt:35
msgid "Using ``django.contrib.staticfiles``"
msgstr ""

# 6f012e2e8b874769b4682567c3a54a79
#: ../../howto/static-files.txt:38
msgid "Basic usage"
msgstr ""

# d52d8e513ca44a07928d8961ee0b1910
#: ../../howto/static-files.txt:40
msgid "Put your static files somewhere that ``staticfiles`` will find them."
msgstr ""

# cad2a9fc1494440d8760e085a9c2e575
#: ../../howto/static-files.txt:42
msgid ""
"By default, this means within ``static/`` subdirectories of apps in your :"
"setting:`INSTALLED_APPS`."
msgstr ""

# 279c3b4195d54dc9941b7d579425c852
#: ../../howto/static-files.txt:45
msgid ""
"Your project will probably also have static assets that aren't tied to a "
"particular app. The :setting:`STATICFILES_DIRS` setting is a tuple of "
"filesystem directories to check when loading static files. It's a search "
"path that is by default empty. See the :setting:`STATICFILES_DIRS` docs how "
"to extend this list of additional paths."
msgstr ""

# d08632adebdd478ea3985d33696cda76
#: ../../howto/static-files.txt:51
msgid ""
"Additionally, see the documentation for the :setting:`STATICFILES_FINDERS` "
"setting for details on how ``staticfiles`` finds your files."
msgstr ""

# 24c3908eca2a44aea7468e395cad32d7
#: ../../howto/static-files.txt:54
msgid ""
"Make sure that ``django.contrib.staticfiles`` is included in your :setting:"
"`INSTALLED_APPS`."
msgstr ""

# 3a1a4fca939d410a8947745b445f5f10
#: ../../howto/static-files.txt:57
msgid ""
"For :ref:`local development<staticfiles-development>`, if you are using :ref:"
"`runserver<staticfiles-runserver>` or adding :ref:"
"`staticfiles_urlpatterns<staticfiles-development>` to your URLconf, you're "
"done with the setup -- your static files will automatically be served at the "
"default (for :djadmin:`newly created<startproject>` projects) :setting:"
"`STATIC_URL` of ``/static/``."
msgstr ""

# d31246cb22c14c29982a2547ed333d01
#: ../../howto/static-files.txt:65
msgid ""
"You'll probably need to refer to these files in your templates. The easiest "
"method is to use the included context processor which allows template code "
"like:"
msgstr ""

# b7e4e8a9b74a49e9b918be4e7281c4fd
#: ../../howto/static-files.txt:73
msgid ""
"See :ref:`staticfiles-in-templates` for more details, **including** an "
"alternate method using a template tag."
msgstr ""

# 1fb0e22f226a449cb553386a0d992a19
#: ../../howto/static-files.txt:77
msgid "Deploying static files in a nutshell"
msgstr ""

# 14cbc93998ad454bbe9a031414608251
#: ../../howto/static-files.txt:79
msgid ""
"When you're ready to move out of local development and deploy your project:"
msgstr ""

# e24f20a3f2ea4ea0a4633b2d7f42e991
#: ../../howto/static-files.txt:81
msgid ""
"Set the :setting:`STATIC_URL` setting to the public URL for your static "
"files (in most cases, the default value of ``/static/`` is just fine)."
msgstr ""

# ad99f9cfae84430a8cd8e7b97a01dd57
#: ../../howto/static-files.txt:84
msgid ""
"Set the :setting:`STATIC_ROOT` setting to point to the filesystem path you'd "
"like your static files collected to when you use the :djadmin:"
"`collectstatic` management command. For example::"
msgstr ""

# e8e59a73470c4677aaa23be0d2cbfd2b
#: ../../howto/static-files.txt:90
msgid "Run the :djadmin:`collectstatic` management command::"
msgstr ""

# d0e0086f1b2b4e399f210f93a9de1f0a
#: ../../howto/static-files.txt:94
msgid ""
"This'll churn through your static file storage and copy them into the "
"directory given by :setting:`STATIC_ROOT`."
msgstr ""

# fdb2889632014f1e97990a7205b2198c
#: ../../howto/static-files.txt:97
msgid ""
"Deploy those files by configuring your webserver of choice to serve the "
"files in :setting:`STATIC_ROOT` at :setting:`STATIC_URL`."
msgstr ""

# 79aa828eb4cb4e849a2890a2cbf10e78
#: ../../howto/static-files.txt:100
msgid ""
":ref:`staticfiles-production` covers some common deployment strategies for "
"static files."
msgstr ""

# 20eb56f653294e17b43a8bf26788f639
#: ../../howto/static-files.txt:103
msgid ""
"Those are the **basics**. For more details on common configuration options, "
"read on; for a detailed reference of the settings, commands, and other bits "
"included with the framework see :doc:`the staticfiles reference </ref/"
"contrib/staticfiles>`."
msgstr ""

# 9db226a18e6a4556b216a96ec6013735
#: ../../howto/static-files.txt:110
msgid ""
"In previous versions of Django, it was common to place static assets in :"
"setting:`MEDIA_ROOT` along with user-uploaded files, and serve them both at :"
"setting:`MEDIA_URL`. Part of the purpose of introducing the ``staticfiles`` "
"app is to make it easier to keep static files separate from user-uploaded "
"files."
msgstr ""

# cab0bb1e30b340a7b1e7cc08af17058d
#: ../../howto/static-files.txt:116
msgid ""
"For this reason, you need to make your :setting:`MEDIA_ROOT` and :setting:"
"`MEDIA_URL` different from your :setting:`STATIC_ROOT` and :setting:"
"`STATIC_URL`. You will need to arrange for serving of files in :setting:"
"`MEDIA_ROOT` yourself; ``staticfiles`` does not deal with user-uploaded "
"files at all. You can, however, use :func:`django.views.static.serve` view "
"for serving :setting:`MEDIA_ROOT` in development; see :ref:`staticfiles-"
"other-directories`."
msgstr ""

# d2351cfa638142458abbf15671b35380
#: ../../howto/static-files.txt:127
msgid "Referring to static files in templates"
msgstr ""

# 855a714882714a7daee433afdd6592df
#: ../../howto/static-files.txt:129
msgid ""
"At some point, you'll probably need to link to static files in your "
"templates. You could, of course, simply hardcode the path to you assets in "
"the templates:"
msgstr ""

# d63eb6c2192540879e974e435f4af8f9
#: ../../howto/static-files.txt:136
msgid ""
"Of course, there are some serious problems with this: it doesn't work well "
"in development, and it makes it *very* hard to change where you've deployed "
"your static files. If, for example, you wanted to switch to using a content "
"delivery network (CDN), then you'd need to change more or less every single "
"template."
msgstr ""

# ec75f43709e547729bef865911ca793b
#: ../../howto/static-files.txt:142
msgid ""
"A far better way is to use the value of the :setting:`STATIC_URL` setting "
"directly in your templates. This means that a switch of static files servers "
"only requires changing that single value. Much better!"
msgstr ""

# 2bc56b17798e4ec0a022699393dac860
#: ../../howto/static-files.txt:146
msgid ""
"Django includes multiple built-in ways of using this setting in your "
"templates: a context processor and a template tag."
msgstr ""

# 3e4c754f77b0481e85dbffbc555a3fca
#: ../../howto/static-files.txt:150
msgid "With a context processor"
msgstr ""

# 739a01b37c8146cb94197d3394f16dd3
#: ../../howto/static-files.txt:152
msgid ""
"The included context processor is the easy way. Simply make sure ``'django."
"core.context_processors.static'`` is in your :setting:"
"`TEMPLATE_CONTEXT_PROCESSORS`. It's there by default, and if you're editing "
"that setting by hand it should look something like::"
msgstr ""

# ece26ab0bf824500af59a5620265b674
#: ../../howto/static-files.txt:166
msgid ""
"Once that's done, you can refer to :setting:`STATIC_URL` in your templates:"
msgstr ""

# 2551ee13517a42deb4dab0ffcf2f4eb7
#: ../../howto/static-files.txt:172
msgid ""
"If ``{{ STATIC_URL }}`` isn't working in your template, you're probably not "
"using :class:`~django.template.RequestContext` when rendering the template."
msgstr ""

# 4ae385c46bb944f89183c889563eb0be
#: ../../howto/static-files.txt:175
msgid ""
"As a brief refresher, context processors add variables into the contexts of "
"every template. However, context processors require that you use :class:"
"`~django.template.RequestContext` when rendering templates. This happens "
"automatically if you're using a :doc:`generic view </ref/class-based-"
"views>`, but in views written by hand you'll need to explicitly use "
"``RequestContext`` To see how that works, and to read more details, check "
"out :ref:`subclassing-context-requestcontext`."
msgstr ""

# 46a99955e17342b48be7fd53fc3356fc
#: ../../howto/static-files.txt:183
msgid ""
"Another option is the :ttag:`get_static_prefix` template tag that is part of "
"Django's core."
msgstr ""

# d968d8a591ed46c8b68f261c6567253a
#: ../../howto/static-files.txt:187
msgid "With a template tag"
msgstr ""

# 7a67720eb1664944b4c31b5ca84ba923
#: ../../howto/static-files.txt:189
msgid ""
"The more powerful tool is the :ttag:`static<staticfiles-static>` template "
"tag. It builds the URL for the given relative path by using the configured :"
"setting:`STATICFILES_STORAGE` storage."
msgstr ""

# 356cabfec8f84f368e290bc998efa428
#: ../../howto/static-files.txt:198
msgid ""
"It is also able to consume standard context variables, e.g. assuming a "
"``user_stylesheet`` variable is passed to the template:"
msgstr ""

# 15458ecb233e4d458c0d050b6f56a7b9
#: ../../howto/static-files.txt:208
msgid ""
"There is also a template tag named :ttag:`static` in Django's core set of :"
"ref:`built in template tags<ref-templates-builtins-tags>` which has the same "
"argument signature but only uses `urlparse.urljoin()`_ with the :setting:"
"`STATIC_URL` setting and the given path. This has the disadvantage of not "
"being able to easily switch the storage backend without changing the "
"templates, so in doubt use the ``staticfiles`` :ttag:`static<staticfiles-"
"static>` template tag."
msgstr ""

# 16b8098699b849e09b0d780e85999a7b
#: ../../howto/static-files.txt:222
msgid "Serving static files in development"
msgstr ""

# 8b62a14932b049478aa7323aefa4b758
#: ../../howto/static-files.txt:224
msgid ""
"The static files tools are mostly designed to help with getting static files "
"successfully deployed into production. This usually means a separate, "
"dedicated static file server, which is a lot of overhead to mess with when "
"developing locally. Thus, the ``staticfiles`` app ships with a **quick and "
"dirty helper view** that you can use to serve files locally in development."
msgstr ""

# 374d70d79c324134a93357df5accc10e
#: ../../howto/static-files.txt:231
msgid ""
"This view is automatically enabled and will serve your static files at :"
"setting:`STATIC_URL` when you use the built-in :ref:`runserver<staticfiles-"
"runserver>` management command."
msgstr ""

# f12cd2cc20d14b43a957b3ec65a3b264
#: ../../howto/static-files.txt:235
msgid ""
"To enable this view if you are using some other server for local "
"development, you'll add a couple of lines to your URLconf. The first line "
"goes at the top of the file, and the last line at the bottom::"
msgstr ""

# 76d3510dc290405c860398d7120b22d1
#: ../../howto/static-files.txt:245
msgid ""
"This will inspect your :setting:`STATIC_URL` setting and wire up the view to "
"serve static files accordingly. Don't forget to set the :setting:"
"`STATICFILES_DIRS` setting appropriately to let ``django.contrib."
"staticfiles`` know where to look for files additionally to files in app "
"directories."
msgstr ""

# a6717c8caaac4b6c8b200fe7acd9be2c
#: ../../howto/static-files.txt:253
msgid "This will only work if :setting:`DEBUG` is ``True``."
msgstr ""

# 4ad9232035a842b0b0d3e3227fa5f3a7
#: ../../howto/static-files.txt:255
msgid ""
"That's because this view is **grossly inefficient** and probably "
"**insecure**. This is only intended for local development, and should "
"**never be used in production**."
msgstr ""

# fd1b88f2721a401990a4440210111f63
#: ../../howto/static-files.txt:259
msgid ""
"Additionally, when using ``staticfiles_urlpatterns`` your :setting:"
"`STATIC_URL` setting can't be empty or a full URL, such as ``http://static."
"example.com/``."
msgstr ""

# f02debba19f74b61bb8309a321ab0738
#: ../../howto/static-files.txt:263
msgid ""
"For a few more details on how the ``staticfiles`` can be used during "
"development, see :ref:`staticfiles-development-view`."
msgstr ""

# e1d2ef2d89da4aca8bd1f1980acf1de4
#: ../../howto/static-files.txt:269
msgid "Serving other directories"
msgstr ""

# 4b69db79afd54f4d818bc143cf54a3fe
#: ../../howto/static-files.txt:274
msgid ""
"There may be files other than your project's static assets that, for "
"convenience, you'd like to have Django serve for you in local development. "
"The :func:`~django.views.static.serve` view can be used to serve any "
"directory you give it. (Again, this view is **not** hardened for production "
"use, and should be used only as a development aid; you should serve these "
"files in production using a real front-end webserver)."
msgstr ""

# eb95b5e9b34c4f21b11f23582c1c5cf4
#: ../../howto/static-files.txt:281
msgid ""
"The most likely example is user-uploaded content in :setting:`MEDIA_ROOT`. "
"``staticfiles`` is intended for static assets and has no built-in handling "
"for user-uploaded files, but you can have Django serve your :setting:"
"`MEDIA_ROOT` by appending something like this to your URLconf::"
msgstr ""

# 7accc8c5929c4e6eb3ebca6f815debb7
#: ../../howto/static-files.txt:297
msgid ""
"Note, the snippet assumes your :setting:`MEDIA_URL` has a value of ``'/"
"media/'``. This will call the :func:`~django.views.static.serve` view, "
"passing in the path from the URLconf and the (required) ``document_root`` "
"parameter."
msgstr ""

# 765e4316a14f492f883d828cbaf4dde5
#: ../../howto/static-files.txt:305
msgid ""
"Since it can become a bit cumbersome to define this URL pattern, Django "
"ships with a small URL helper function :func:`~django.conf.urls.static."
"static` that takes as parameters the prefix such as :setting:`MEDIA_URL` and "
"a dotted path to a view, such as ``'django.views.static.serve'``. Any other "
"function parameter will be transparently passed to the view."
msgstr ""

# f5791ca2af0b42d58279ed2f0a7688d9
#: ../../howto/static-files.txt:312
msgid ""
"An example for serving :setting:`MEDIA_URL` (``'/media/'``) during "
"development::"
msgstr ""

# b4c6b2a179f54568a3a1e833052f8e59
#: ../../howto/static-files.txt:324
msgid ""
"This helper function will only be operational in debug mode and if the given "
"prefix is local (e.g. ``/static/``) and not a URL (e.g. ``http://static."
"example.com/``)."
msgstr ""

# 44e92ead852b4f52befdb5e640be5a12
#: ../../howto/static-files.txt:331
msgid "Serving static files in production"
msgstr ""

# 86c85b5b98844619b86b03fe1858c781
#: ../../howto/static-files.txt:333
msgid ""
"The basic outline of putting static files into production is simple: run "
"the :djadmin:`collectstatic` command when static files change, then arrange "
"for the collected static files directory (:setting:`STATIC_ROOT`) to be "
"moved to the static file server and served."
msgstr ""

# 9ea46d84a536430fb1c5b7231e55964e
#: ../../howto/static-files.txt:338
msgid ""
"Of course, as with all deployment tasks, the devil's in the details. Every "
"production setup will be a bit different, so you'll need to adapt the basic "
"outline to fit your needs. Below are a few common patterns that might help."
msgstr ""

# ffe6feb6a53e406da6c9ea7419d92f49
#: ../../howto/static-files.txt:343
msgid "Serving the app and your static files from the same server"
msgstr ""

# 508515816c234961a8cb4e1446b1d40c
#: ../../howto/static-files.txt:345
msgid ""
"If you want to serve your static files from the same server that's already "
"serving your site, the basic outline gets modified to look something like:"
msgstr ""

# 76898feef06e4432949f994a0218d224
#: ../../howto/static-files.txt:348
msgid "Push your code up to the deployment server."
msgstr ""

# 47776cfbfcc943e29f975c72be830df8
#: ../../howto/static-files.txt:349
msgid ""
"On the server, run :djadmin:`collectstatic` to copy all the static files "
"into :setting:`STATIC_ROOT`."
msgstr ""

# 192536dba19349e0974145af392e1614
#: ../../howto/static-files.txt:351
msgid ""
"Point your web server at :setting:`STATIC_ROOT`. For example, here's :ref:"
"`how to do this under Apache and mod_wsgi <serving-files>`."
msgstr ""

# b258fd49a46e417c938d7aad5ef9cccc
#: ../../howto/static-files.txt:354
msgid ""
"You'll probably want to automate this process, especially if you've got "
"multiple web servers. There's any number of ways to do this automation, but "
"one option that many Django developers enjoy is `Fabric`__."
msgstr ""

# 18bbde6138da499abda7a846dd2538a6
#: ../../howto/static-files.txt:360
msgid ""
"Below, and in the following sections, we'll show off a few example fabfiles "
"(i.e. Fabric scripts) that automate these file deployment options. The "
"syntax of a fabfile is fairly straightforward but won't be covered here; "
"consult `Fabric's documentation`__, for a complete explanation of the "
"syntax.."
msgstr ""

# 01b4f96aeea54f41bccc648793b0754a
#: ../../howto/static-files.txt:367
msgid ""
"So, a fabfile to deploy static files to a couple of web servers might look "
"something like::"
msgstr ""

# 702174a57db647648f043bb769602cbf
#: ../../howto/static-files.txt:383
msgid "Serving static files from a dedicated server"
msgstr ""

# 69881b73321e40488d9db620580f74f3
#: ../../howto/static-files.txt:385
msgid ""
"Most larger Django apps use a separate Web server -- i.e., one that's not "
"also running Django -- for serving static files. This server often runs a "
"different type of web server -- faster but less full-featured. Some good "
"choices are:"
msgstr ""

# ac29ecf8660e4d7e9b7256e5c6c09245
#: ../../howto/static-files.txt:401
msgid ""
"Configuring these servers is out of scope of this document; check each "
"server's respective documentation for instructions."
msgstr ""

# fa8e900d4af642c7be1239679ce66eb2
#: ../../howto/static-files.txt:404
msgid ""
"Since your static file server won't be running Django, you'll need to modify "
"the deployment strategy to look something like:"
msgstr ""

# e1792c853ec94324a47ae545b53666c8
#: ../../howto/static-files.txt:407
msgid "When your static files change, run :djadmin:`collectstatic` locally."
msgstr ""

# b52249f8918646beba40109538152024
#: ../../howto/static-files.txt:408
msgid ""
"Push your local :setting:`STATIC_ROOT` up to the static file server into the "
"directory that's being served. ``rsync`` is a good choice for this step "
"since it only needs to transfer the bits of static files that have changed."
msgstr ""

# f5ef08822b3c449b88ef200d301d72c3
#: ../../howto/static-files.txt:413
msgid "Here's how this might look in a fabfile::"
msgstr ""

# b7b1ae68aa4043768d9fe1d5f1c294ad
#: ../../howto/static-files.txt:436
msgid "Serving static files from a cloud service or CDN"
msgstr ""

# d2c72952d32d4debbae5f8e16b22a5d0
#: ../../howto/static-files.txt:438
msgid ""
"Another common tactic is to serve static files from a cloud storage provider "
"like Amazon's S3__ and/or a CDN (content delivery network). This lets you "
"ignore the problems of serving static files, and can often make for faster-"
"loading webpages (especially when using a CDN)."
msgstr ""

# 8f4ae6741da44fc1b50c31d7a8802a4a
#: ../../howto/static-files.txt:443
msgid ""
"When using these services, the basic workflow would look a bit like the "
"above, except that instead of using ``rsync`` to transfer your static files "
"to the server you'd need to transfer the static files to the storage "
"provider or CDN."
msgstr ""

# bfe7f85f0d4c444fb6bf355ae95f3d04
#: ../../howto/static-files.txt:447
msgid ""
"There's any number of ways you might do this, but if the provider has an API "
"a :doc:`custom file storage backend </howto/custom-file-storage>` will make "
"the process incredibly simple. If you've written or are using a 3rd party "
"custom storage backend, you can tell :djadmin:`collectstatic` to use it by "
"setting :setting:`STATICFILES_STORAGE` to the storage engine."
msgstr ""

# 6003d90d7217437885e7ada782022d1b
#: ../../howto/static-files.txt:453
msgid ""
"For example, if you've written an S3 storage backend in ``myproject.storage."
"S3Storage`` you could use it with::"
msgstr ""

# ece32c4b9c214107b3c1af4d7731d9e9
#: ../../howto/static-files.txt:458
msgid ""
"Once that's done, all you have to do is run :djadmin:`collectstatic` and "
"your static files would be pushed through your storage package up to S3. If "
"you later needed to switch to a different storage provider, it could be as "
"simple as changing your :setting:`STATICFILES_STORAGE` setting."
msgstr ""

# b2feca17c58642ba836483f38a33be64
#: ../../howto/static-files.txt:463
msgid ""
"For details on how you'd write one of these backends, :doc:`/howto/custom-"
"file-storage`."
msgstr ""

# 726c92bb18b54e69918adc560f6b64f8
#: ../../howto/static-files.txt:468
msgid ""
"The `django-storages`__ project is a 3rd party app that provides many "
"storage backends for many common file storage APIs (including `S3`__)."
msgstr ""

# 04082e9827b54217a2a2569f4333f888
#: ../../howto/static-files.txt:476
msgid "Upgrading from ``django-staticfiles``"
msgstr ""

# 91aab73096b6444f9d19d4dee3ceb0fa
#: ../../howto/static-files.txt:478
msgid ""
"``django.contrib.staticfiles`` began its life as `django-staticfiles`_. If "
"you're upgrading from `django-staticfiles`_ older than 1.0 (e.g. 0.3.4) to "
"``django.contrib.staticfiles``, you'll need to make a few changes:"
msgstr ""

# e696ca6052b548c4a325a5c1e0cb91c9
#: ../../howto/static-files.txt:482
msgid ""
"Application files should now live in a ``static`` directory in each app "
"(`django-staticfiles`_ used the name ``media``, which was slightly "
"confusing)."
msgstr ""

# a7269a02b2e54cbd82ddc6ee40acd2b7
#: ../../howto/static-files.txt:486
msgid ""
"The management commands ``build_static`` and ``resolve_static`` are now "
"called :djadmin:`collectstatic` and :djadmin:`findstatic`."
msgstr ""

# 5f6c4d649e1e4bb1be4de5d391d8995d
#: ../../howto/static-files.txt:489
msgid ""
"The settings ``STATICFILES_PREPEND_LABEL_APPS``, "
"``STATICFILES_MEDIA_DIRNAMES`` and ``STATICFILES_EXCLUDED_APPS`` were "
"removed."
msgstr ""

# 600b17a0bcbb4087898ba51ec2518d61
#: ../../howto/static-files.txt:493
msgid ""
"The setting ``STATICFILES_RESOLVERS`` was removed, and replaced by the new :"
"setting:`STATICFILES_FINDERS`."
msgstr ""

# 8d75b9525e3c445c91b3283b8424c8a1
#: ../../howto/static-files.txt:496
msgid ""
"The default for :setting:`STATICFILES_STORAGE` was renamed from "
"``staticfiles.storage.StaticFileStorage`` to ``staticfiles.storage."
"StaticFilesStorage``"
msgstr ""

# 29c34af90cf4450f8fc12098aef93a52
#: ../../howto/static-files.txt:500
msgid ""
"If using :ref:`runserver<staticfiles-runserver>` for local development (and "
"the :setting:`DEBUG` setting is ``True``), you no longer need to add "
"anything to your URLconf for serving static files in development."
msgstr ""

# 368f0ad4f4be4b8295b2f60fe8fb66fd
#: ../../howto/static-files.txt:505
msgid "Learn more"
msgstr ""

# 69f6cc99f54f4dffb9ad9986d2122e95
#: ../../howto/static-files.txt:507
msgid ""
"This document has covered the basics and some common usage patterns. For "
"complete details on all the settings, commands, template tags, and other "
"pieces include in ``django.contrib.staticfiles``, see :doc:`the staticfiles "
"reference </ref/contrib/staticfiles>`."
msgstr ""
