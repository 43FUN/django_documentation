# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2012.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-03-12 13:35\n"
"PO-Revision-Date: 2012-03-12 13:35\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# f385392ad786466d903aa03af0bd16d3
#: ../../misc/api-stability.txt:3
msgid "API stability"
msgstr ""

# 4b11583437b74d4ba00b695aa168830f
#: ../../misc/api-stability.txt:5
msgid ""
":doc:`The release of Django 1.0 </releases/1.0>` comes with a promise of API "
"stability and forwards-compatibility. In a nutshell, this means that code "
"you develop against Django 1.0 will continue to work against 1.1 unchanged, "
"and you should need to make only minor changes for any 1.X release."
msgstr ""

# 3f28604158844c7a8f9c1a904a9d2451
#: ../../misc/api-stability.txt:11
msgid "What \"stable\" means"
msgstr ""

# 10bbef9984644168bd3cce2c78e18754
#: ../../misc/api-stability.txt:13
msgid "In this context, stable means:"
msgstr ""

# f56d7a5a6fd14f6692e3331bebe356e6
#: ../../misc/api-stability.txt:15
msgid ""
"All the public APIs -- everything documented in the linked documents below, "
"and all methods that don't begin with an underscore -- will not be moved or "
"renamed without providing backwards-compatible aliases."
msgstr ""

# 6e9e1652c0134fa2bcc1b937a6e572c6
#: ../../misc/api-stability.txt:19
msgid ""
"If new features are added to these APIs -- which is quite possible -- they "
"will not break or change the meaning of existing methods. In other words, "
"\"stable\" does not (necessarily) mean \"complete.\""
msgstr ""

# b28125ff339e4beba49b3175daa812d6
#: ../../misc/api-stability.txt:23
msgid ""
"If, for some reason, an API declared stable must be removed or replaced, it "
"will be declared deprecated but will remain in the API for at least two "
"minor version releases. Warnings will be issued when the deprecated method "
"is called."
msgstr ""

# 681aa129c8f441ed9ec81ac3612cdad2
#: ../../misc/api-stability.txt:28
msgid ""
"See :ref:`official-releases` for more details on how Django's version "
"numbering scheme works, and how features will be deprecated."
msgstr ""

# e4b636152f2449068558156c624a5e6b
#: ../../misc/api-stability.txt:31
msgid ""
"We'll only break backwards compatibility of these APIs if a bug or security "
"hole makes it completely unavoidable."
msgstr ""

# 22cb5aa3612941c68b5e359bcedb51da
#: ../../misc/api-stability.txt:35
msgid "Stable APIs"
msgstr ""

# 1c19661a5ee446cfa47b3428b4cd3208
#: ../../misc/api-stability.txt:37
msgid ""
"In general, everything covered in the documentation -- with the exception of "
"anything in the :doc:`internals area </internals/index>` is considered "
"stable as of 1.0. This includes these APIs:"
msgstr ""

# 146428947387483db2d70864b14bb5dc
#: ../../misc/api-stability.txt:41
msgid ":doc:`Authorization </topics/auth>`"
msgstr ""

# 059623cc08e24c4e9008ef03d3dcf277
#: ../../misc/api-stability.txt:43
msgid ":doc:`Caching </topics/cache>`."
msgstr ""

# f3052c08bcd949bf88ad846edc6f036c
#: ../../misc/api-stability.txt:45
msgid ""
":doc:`Model definition, managers, querying and transactions </topics/db/"
"index>`"
msgstr ""

# 62ea3f7976b6472492e50917e09b9564
#: ../../misc/api-stability.txt:48
msgid ":doc:`Sending email </topics/email>`."
msgstr ""

# e805f6b479504620aa0b56132138d039
#: ../../misc/api-stability.txt:50
msgid ":doc:`File handling and storage </topics/files>`"
msgstr ""

# 1359733c78104f54b925073b15c54bce
#: ../../misc/api-stability.txt:52
msgid ":doc:`Forms </topics/forms/index>`"
msgstr ""

# a640c6f993654f979c80c3a51e881434
#: ../../misc/api-stability.txt:54
msgid ""
":doc:`HTTP request/response handling </topics/http/index>`, including file "
"uploads, middleware, sessions, URL resolution, view, and shortcut APIs."
msgstr ""

# dabbdfca77f34a7499a7ed6191f02b10
#: ../../misc/api-stability.txt:57
msgid ":doc:`Generic views </topics/http/generic-views>`."
msgstr ""

# 6421efcd7dcb47ef94c32bc5cc94ca93
#: ../../misc/api-stability.txt:59
msgid ":doc:`Internationalization </topics/i18n/index>`."
msgstr ""

# bfbe8b12d9274ff4ba708f705a90238e
#: ../../misc/api-stability.txt:61
msgid ":doc:`Pagination </topics/pagination>`"
msgstr ""

# cade5292ad694009875a317893283fb7
#: ../../misc/api-stability.txt:63
msgid ":doc:`Serialization </topics/serialization>`"
msgstr ""

# 70b806fa4d7a4fd49dee8937bc8cf907
#: ../../misc/api-stability.txt:65
msgid ":doc:`Signals </topics/signals>`"
msgstr ""

# 5d029cfbba8144e5bb4c194927fc62bf
#: ../../misc/api-stability.txt:67
msgid ""
":doc:`Templates </topics/templates>`, including the language, Python-level :"
"doc:`template APIs </ref/templates/index>`, and :doc:`custom template tags "
"and libraries </howto/custom-template-tags>`. We may add new template tags "
"in the future and the names may inadvertently clash with external template "
"tags. Before adding any such tags, we'll ensure that Django raises an error "
"if it tries to load tags with duplicate names."
msgstr ""

# a8f411e121ac4ffba058500fb2d8c3cb
#: ../../misc/api-stability.txt:74
msgid ":doc:`Testing </topics/testing>`"
msgstr ""

# 2a3d538db3a5446e8ed19e87b5add87c
#: ../../misc/api-stability.txt:76
msgid ":doc:`django-admin utility </ref/django-admin>`."
msgstr ""

# 1765996914664908a3bf0b53ff3658d2
#: ../../misc/api-stability.txt:78
msgid ":doc:`Built-in middleware </ref/middleware>`"
msgstr ""

# 165af820e566463fb9d61c28138ece19
#: ../../misc/api-stability.txt:80
msgid ":doc:`Request/response objects </ref/request-response>`."
msgstr ""

# 5b4021d197c742b4b19b8dc52ba1196b
#: ../../misc/api-stability.txt:82
msgid ""
":doc:`Settings </ref/settings>`. Note, though that while the :doc:`list of "
"built-in settings </ref/settings>` can be considered complete we may -- and "
"probably will -- add new settings in future versions. This is one of those "
"places where \"'stable' does not mean 'complete.'\""
msgstr ""

# 5fd857888a524cada57a02d834920d59
#: ../../misc/api-stability.txt:87
msgid ""
":doc:`Built-in signals </ref/signals>`. Like settings, we'll probably add "
"new signals in the future, but the existing ones won't break."
msgstr ""

# bad8c443880348caac1753a4a2d002a6
#: ../../misc/api-stability.txt:90
msgid ":doc:`Unicode handling </ref/unicode>`."
msgstr ""

# c645f05ccbc04b9b97a701f32a53da2c
#: ../../misc/api-stability.txt:92
msgid "Everything covered by the :doc:`HOWTO guides </howto/index>`."
msgstr ""

# 0dd5bf0abe3149b0b96f131b7fa53b42
#: ../../misc/api-stability.txt:95
msgid "``django.utils``"
msgstr ""

# b5e42b7e55b94ce88fc08cd71bb8405d
#: ../../misc/api-stability.txt:97
msgid ""
"Most of the modules in ``django.utils`` are designed for internal use. Only "
"the following parts of :doc:`django.utils </ref/utils>` can be considered "
"stable:"
msgstr ""

# 45a9b733a57143789b6b3436b8398877
#: ../../misc/api-stability.txt:100
msgid "``django.utils.cache``"
msgstr ""

# 3d3f95ba00f944cd9bf5aff786a8be4f
#: ../../misc/api-stability.txt:101
msgid ""
"``django.utils.datastructures.SortedDict`` -- only this single class; the "
"rest of the module is for internal use."
msgstr ""

# c1022d56a2d042b1a15e55598ac9fba2
#: ../../misc/api-stability.txt:103
msgid "``django.utils.encoding``"
msgstr ""

# 52eb87e2cbff413992afeaca635ae749
#: ../../misc/api-stability.txt:104
msgid "``django.utils.feedgenerator``"
msgstr ""

# 9291260177d4457db5dd2c6a03bb8ccb
#: ../../misc/api-stability.txt:105
msgid "``django.utils.http``"
msgstr ""

# 364ae3bb51d74e46b312c67d442a6930
#: ../../misc/api-stability.txt:106
msgid "``django.utils.safestring``"
msgstr ""

# feaf834658064d438bdf282697b3a309
#: ../../misc/api-stability.txt:107
msgid "``django.utils.translation``"
msgstr ""

# 1beeb63f377844d7995373c45b2485f7
#: ../../misc/api-stability.txt:108
msgid "``django.utils.tzinfo``"
msgstr ""

# acc57fad7273460b9ec91ba01e4d85ff
#: ../../misc/api-stability.txt:111
msgid "Exceptions"
msgstr ""

# 06e6585dd45c44c984d4dc755e3fcbe0
#: ../../misc/api-stability.txt:113
msgid ""
"There are a few exceptions to this stability and backwards-compatibility "
"promise."
msgstr ""

# f626e4233c8b425d9a3fad5678525d90
#: ../../misc/api-stability.txt:117
msgid "Security fixes"
msgstr ""

# 4cd8175ee28448bb8f2d81ecab995b68
#: ../../misc/api-stability.txt:119
msgid ""
"If we become aware of a security problem -- hopefully by someone following "
"our :ref:`security reporting policy <reporting-security-issues>` -- we'll do "
"everything necessary to fix it. This might mean breaking backwards "
"compatibility; security trumps the compatibility guarantee."
msgstr ""

# 0e6e996f3cc7437abb746ad552521f80
#: ../../misc/api-stability.txt:124
msgid "Contributed applications (``django.contrib``)"
msgstr ""

# db920313be744b7da56b435572f82a55
#: ../../misc/api-stability.txt:126
msgid ""
"While we'll make every effort to keep these APIs stable -- and have no plans "
"to break any contrib apps -- this is an area that will have more flux "
"between releases. As the Web evolves, Django must evolve with it."
msgstr ""

# a308b9db372c4cb2a09035c1778d6846
#: ../../misc/api-stability.txt:130
msgid ""
"However, any changes to contrib apps will come with an important guarantee: "
"we'll make sure it's always possible to use an older version of a contrib "
"app if we need to make changes. Thus, if Django 1.5 ships with a backwards-"
"incompatible ``django.contrib.flatpages``, we'll make sure you can still use "
"the Django 1.4 version alongside Django 1.5. This will continue to allow for "
"easy upgrades."
msgstr ""

# a8c7135cf6fc427e8ceaac5a8bcbb518
#: ../../misc/api-stability.txt:136
msgid ""
"Historically, apps in ``django.contrib`` have been more stable than the "
"core, so in practice we probably won't have to ever make this exception. "
"However, it's worth noting if you're building apps that depend on ``django."
"contrib``."
msgstr ""

# 4eede824ccf543adb5ca43673406989f
#: ../../misc/api-stability.txt:141
msgid "APIs marked as internal"
msgstr ""

# 12236f7cfa424e57bcd69761bda9a0b8
#: ../../misc/api-stability.txt:143
msgid "Certain APIs are explicitly marked as \"internal\" in a couple of ways:"
msgstr ""

# 0fe2981cfa1949a4a69724026e237fd6
#: ../../misc/api-stability.txt:145
msgid ""
"Some documentation refers to internals and mentions them as such. If the "
"documentation says that something is internal, we reserve the right to "
"change it."
msgstr ""

# c8ddfbc7d9b242d493c46c06a226f647
#: ../../misc/api-stability.txt:149
msgid ""
"Functions, methods, and other objects prefixed by a leading underscore "
"(``_``). This is the standard Python way of indicating that something is "
"private; if any method starts with a single ``_``, it's an internal API."
msgstr ""

# 095fbf1d69de4d86b28a02b72f4858ee
#: ../../misc/api-stability.txt:156
msgid "Local flavors"
msgstr ""

# 03d67eba90044474932f767d1ac07242
#: ../../misc/api-stability.txt:160
msgid ""
":mod:`django.contrib.localflavor` contains assorted pieces of code that are "
"useful for particular countries or cultures. This data is local in nature, "
"and is subject to change on timelines that will almost never correlate with "
"Django's own release schedules. For example, a common change is to split a "
"province into two new provinces, or to rename an existing province."
msgstr ""

# 3f9e51b472324fa694e7dd86950b87c3
#: ../../misc/api-stability.txt:167
msgid ""
"These changes present two competing compatibility issues. Moving forward, "
"displaying the names of deprecated, renamed and dissolved provinces in a "
"selection widget is bad from a user interface perspective. However, "
"maintaining full backwards compatibility requires that we support historical "
"values that may be stored in a database -- including values that may no "
"longer be valid."
msgstr ""

# 9ad1c6b5f7224df5acb51861a2ec0dd5
#: ../../misc/api-stability.txt:174
msgid ""
"Therefore, Django has the following policy with respect to changes in local "
"flavor:"
msgstr ""

# a328ad1361054e1e85f31e377c60783e
#: ../../misc/api-stability.txt:177
msgid ""
"At the time of a Django release, the data and algorithms contained in :mod:"
"`django.contrib.localflavor` will, to the best of our ability, reflect the "
"officially gazetted policies of the appropriate local government authority. "
"If a province has been added, altered, or removed, that change will be "
"reflected in Django's localflavor."
msgstr ""

# d6bca5f6817b4eb5bab2c9d8595b59a4
#: ../../misc/api-stability.txt:184
msgid ""
"These changes will *not* be backported to the previous stable release. "
"Upgrading a minor version of Django should not require any data migration or "
"audits for UI changes; therefore, if you want to get the latest province "
"list, you will either need to upgrade your Django install, or backport the "
"province list you need."
msgstr ""

# 0f8ea1296a384eeb97aa1ea60e70bc65
#: ../../misc/api-stability.txt:191
msgid ""
"For one release, the affected localflavor module will raise a "
"``RuntimeWarning`` when it is imported."
msgstr ""

# e41aa03a590144acaaf34fcc97178ac9
#: ../../misc/api-stability.txt:194
msgid ""
"The change will be announced in the release notes as a backwards "
"incompatible change requiring attention. The change will also be annotated "
"in the documentation for the localflavor module."
msgstr ""

# fd1839d420974f7281be429cc1d6932a
#: ../../misc/api-stability.txt:198
msgid ""
"Where necessary and feasible, a migration script will be provided to aid the "
"migration process."
msgstr ""

# 0f3929e747bc48cc8714a13db87a2eb7
#: ../../misc/api-stability.txt:201
msgid ""
"For example, Django 1.2 contains an Indonesian localflavor. It has a "
"province list that includes \"Nanggroe Aceh Darussalam (NAD)\" as a "
"province. The Indonesian government has changed the official name of the "
"province to \"Aceh (ACE)\". As a result, Django 1.3 does *not* contain "
"\"Nanggroe Aceh Darussalam (NAD)\" in the province list, but *does* contain "
"\"Aceh (ACE)\"."
msgstr ""

# df342e423df1443a9ff75e412bc970a1
#: ../../misc/design-philosophies.txt:3
msgid "Design philosophies"
msgstr ""

# 40a69a32f2c547e7a60fac5408ce100f
#: ../../misc/design-philosophies.txt:5
msgid ""
"This document explains some of the fundamental philosophies Django's "
"developers have used in creating the framework. Its goal is to explain the "
"past and guide the future."
msgstr ""

# 44141a79217146eeb9a0d707920564df
#: ../../misc/design-philosophies.txt:10
msgid "Overall"
msgstr ""

# 196106688c984640aecdbb9a7e1cc9a4
# aac9ede162bf48648b401b6292531d5f
# a7bface64005464c9bcc9f5670ab77cd
#: ../../misc/design-philosophies.txt:15
#: ../../misc/design-philosophies.txt:155
#: ../../misc/design-philosophies.txt:303
msgid "Loose coupling"
msgstr ""

# 6a43695c7b8e4cc5b2e65b4beb546bfb
#: ../../misc/design-philosophies.txt:19
msgid ""
"A fundamental goal of Django's stack is `loose coupling and tight "
"cohesion`_. The various layers of the framework shouldn't \"know\" about "
"each other unless absolutely necessary."
msgstr ""

# 39b935d8a1e84a5c865c2f5fbb2d88cf
#: ../../misc/design-philosophies.txt:23
msgid ""
"For example, the template system knows nothing about Web requests, the "
"database layer knows nothing about data display and the view system doesn't "
"care which template system a programmer uses."
msgstr ""

# 939ac3599898499ebb8aa415f49f0fa6
#: ../../misc/design-philosophies.txt:27
msgid ""
"Although Django comes with a full stack for convenience, the pieces of the "
"stack are independent of another wherever possible."
msgstr ""

# 370827f186434b3484f310c264e231bc
#: ../../misc/design-philosophies.txt:35
msgid "Less code"
msgstr ""

# b7bd3a7b8b8b4dde9dbd26794b785a4e
#: ../../misc/design-philosophies.txt:37
msgid ""
"Django apps should use as little code as possible; they should lack "
"boilerplate. Django should take full advantage of Python's dynamic "
"capabilities, such as introspection."
msgstr ""

# 665c50d545004a3f8e3bd731bb53e87d
#: ../../misc/design-philosophies.txt:44
msgid "Quick development"
msgstr ""

# 5512aee66e3141a580e3f2cd4f07bb90
#: ../../misc/design-philosophies.txt:46
msgid ""
"The point of a Web framework in the 21st century is to make the tedious "
"aspects of Web development fast. Django should allow for incredibly quick "
"Web development."
msgstr ""

# fda6b7a559af448ba8ed2ce8e0f183c4
#: ../../misc/design-philosophies.txt:53
msgid "Don't repeat yourself (DRY)"
msgstr ""

# e0dae08893c54a6eb331f5f4c22e44dc
#: ../../misc/design-philosophies.txt:59
msgid ""
"Every distinct concept and/or piece of data should live in one, and only "
"one, place. Redundancy is bad. Normalization is good."
msgstr ""

# 9e5b44b769994296b6971ff28d01a2eb
#: ../../misc/design-philosophies.txt:62
msgid ""
"The framework, within reason, should deduce as much as possible from as "
"little as possible."
msgstr ""

# 4726eadc6c5d469d8ace28557411eaa7
#: ../../misc/design-philosophies.txt:67
msgid "The `discussion of DRY on the Portland Pattern Repository`__"
msgstr ""

# 36f78d89dcbf4152942030b2055764b6
# 84dbe8231016498abdabae2607f80978
#: ../../misc/design-philosophies.txt:74 ../../misc/design-philosophies.txt:95
msgid "Explicit is better than implicit"
msgstr ""

# 871447741ad0467486113af3d261d64e
#: ../../misc/design-philosophies.txt:76
msgid ""
"This is a core Python principle listed in :pep:`20`, and it means Django "
"shouldn't do too much \"magic.\" Magic shouldn't happen unless there's a "
"really good reason for it. Magic is worth using only if it creates a huge "
"convenience unattainable in other ways, and it isn't implemented in a way "
"that confuses developers who are trying to learn how to use the feature."
msgstr ""

# 0f423c36ac1f4bbea835509926cbabb1
#: ../../misc/design-philosophies.txt:85
msgid "Consistency"
msgstr ""

# d0104fbad7604763bad05104e45b6149
#: ../../misc/design-philosophies.txt:87
msgid ""
"The framework should be consistent at all levels. Consistency applies to "
"everything from low-level (the Python coding style used) to high-level (the "
"\"experience\" of using Django)."
msgstr ""

# 80f7a2a0a4a844b295493d7dc7943738
#: ../../misc/design-philosophies.txt:92
msgid "Models"
msgstr ""

# fefb45e0793a40f8bece2c417d26487e
#: ../../misc/design-philosophies.txt:97
msgid ""
"Fields shouldn't assume certain behaviors based solely on the name of the "
"field. This requires too much knowledge of the system and is prone to "
"errors. Instead, behaviors should be based on keyword arguments and, in some "
"cases, on the type of the field."
msgstr ""

# 35f5bd3857364d2bb21c451ed925992d
#: ../../misc/design-philosophies.txt:103
msgid "Include all relevant domain logic"
msgstr ""

# 1451915a6bcf40e4b053b263471866c4
#: ../../misc/design-philosophies.txt:105
msgid ""
"Models should encapsulate every aspect of an \"object,\" following Martin "
"Fowler's `Active Record`_ design pattern."
msgstr ""

# 7d84609af4e34d3da787c5d1e893be81
#: ../../misc/design-philosophies.txt:108
msgid ""
"This is why both the data represented by a model and information about it "
"(its human-readable name, options like default ordering, etc.) are defined "
"in the model class; all the information needed to understand a given model "
"should be stored *in* the model."
msgstr ""

# bfa8c8c4a6694e34baf4fcfd7b94e6c8
#: ../../misc/design-philosophies.txt:116
msgid "Database API"
msgstr ""

# d704717f38284988b858b629f7945502
#: ../../misc/design-philosophies.txt:118
msgid "The core goals of the database API are:"
msgstr ""

# 309a212fa15e4a118022e1ae536db62e
#: ../../misc/design-philosophies.txt:121
msgid "SQL efficiency"
msgstr ""

# 2c5e303c860d4a07b9c15477fdf79f7f
#: ../../misc/design-philosophies.txt:123
msgid ""
"It should execute SQL statements as few times as possible, and it should "
"optimize statements internally."
msgstr ""

# af3a166df1a44f979abd105e2d9547a8
#: ../../misc/design-philosophies.txt:126
msgid ""
"This is why developers need to call ``save()`` explicitly, rather than the "
"framework saving things behind the scenes silently."
msgstr ""

# f0d6aca9d3fc47a88b8edbcfea8f47dd
#: ../../misc/design-philosophies.txt:129
msgid ""
"This is also why the ``select_related()`` ``QuerySet`` method exists. It's "
"an optional performance booster for the common case of selecting \"every "
"related object.\""
msgstr ""

# 0266acc1ec7847bd9fe785ae666334c6
#: ../../misc/design-philosophies.txt:134
msgid "Terse, powerful syntax"
msgstr ""

# d147aca1b9cc4060b083ba40a5054f96
#: ../../misc/design-philosophies.txt:136
msgid ""
"The database API should allow rich, expressive statements in as little "
"syntax as possible. It should not rely on importing other modules or helper "
"objects."
msgstr ""

# 821c2344d9e44b208fc4d7365427b406
#: ../../misc/design-philosophies.txt:139
msgid ""
"Joins should be performed automatically, behind the scenes, when necessary."
msgstr ""

# 0882c7c44641432c8f9d928a0ba3e430
#: ../../misc/design-philosophies.txt:141
msgid ""
"Every object should be able to access every related object, systemwide. This "
"access should work both ways."
msgstr ""

# 74ecc30e65424d05b6e3c1b8426c3ccc
#: ../../misc/design-philosophies.txt:145
msgid "Option to drop into raw SQL easily, when needed"
msgstr ""

# e627f4bee70c49d599c3a8704f454beb
#: ../../misc/design-philosophies.txt:147
msgid ""
"The database API should realize it's a shortcut but not necessarily an end-"
"all-be-all. The framework should make it easy to write custom SQL -- entire "
"statements, or just custom ``WHERE`` clauses as custom parameters to API "
"calls."
msgstr ""

# bb5d5454a5f7490ea432799d8f968b77
#: ../../misc/design-philosophies.txt:152
msgid "URL design"
msgstr ""

# f1726d2dda2248b4b94d71515def782b
#: ../../misc/design-philosophies.txt:157
msgid ""
"URLs in a Django app should not be coupled to the underlying Python code. "
"Tying URLs to Python function names is a Bad And Ugly Thing."
msgstr ""

# c7597d43b2e7430eb7379c870f6f9d52
#: ../../misc/design-philosophies.txt:160
msgid ""
"Along these lines, the Django URL system should allow URLs for the same app "
"to be different in different contexts. For example, one site may put stories "
"at ``/stories/``, while another may use ``/news/``."
msgstr ""

# bbf2c9fe25c8478d9d933e2cba4ff878
#: ../../misc/design-philosophies.txt:165
msgid "Infinite flexibility"
msgstr ""

# db10f43030fc4d5e92b40c4e5b820ea8
#: ../../misc/design-philosophies.txt:167
msgid ""
"URLs should be as flexible as possible. Any conceivable URL design should be "
"allowed."
msgstr ""

# 67efc5965ca14f70ad668f63b542e699
#: ../../misc/design-philosophies.txt:171
msgid "Encourage best practices"
msgstr ""

# 6f657ba5ae3a44419b42877ebdc6aa12
#: ../../misc/design-philosophies.txt:173
msgid ""
"The framework should make it just as easy (or even easier) for a developer "
"to design pretty URLs than ugly ones."
msgstr ""

# 7ecf79be7ad740f38d9d91126bb8832c
#: ../../misc/design-philosophies.txt:176
msgid "File extensions in Web-page URLs should be avoided."
msgstr ""

# 15a66f7200bc4d2d8a76f4d4483d44f8
#: ../../misc/design-philosophies.txt:178
msgid "Vignette-style commas in URLs deserve severe punishment."
msgstr ""

# 32f8143caecb444182dca9965d41640d
#: ../../misc/design-philosophies.txt:183
msgid "Definitive URLs"
msgstr ""

# be43792f5ea54974ad77a8e9497b90cc
#: ../../misc/design-philosophies.txt:187
msgid ""
"Technically, ``foo.com/bar`` and ``foo.com/bar/`` are two different URLs, "
"and search-engine robots (and some Web traffic-analyzing tools) would treat "
"them as separate pages. Django should make an effort to \"normalize\" URLs "
"so that search-engine robots don't get confused."
msgstr ""

# 8770a5a3b73442fe824c21bd9f787dd5
#: ../../misc/design-philosophies.txt:192
msgid "This is the reasoning behind the :setting:`APPEND_SLASH` setting."
msgstr ""

# 64098b9764684014a00cc71a790b8688
#: ../../misc/design-philosophies.txt:195
msgid "Template system"
msgstr ""

# 22b1573df6464ff3b2fd00f15d1d07ce
#: ../../misc/design-philosophies.txt:200
msgid "Separate logic from presentation"
msgstr ""

# 94aa28706dac4125a9a1d23c83eb003f
#: ../../misc/design-philosophies.txt:202
msgid ""
"We see a template system as a tool that controls presentation and "
"presentation-related logic -- and that's it. The template system shouldn't "
"support functionality that goes beyond this basic goal."
msgstr ""

# c498e6020fb14d9a805fc6523f6c144d
#: ../../misc/design-philosophies.txt:206
msgid ""
"If we wanted to put everything in templates, we'd be using PHP. Been there, "
"done that, wised up."
msgstr ""

# c94a35fdaeb644f0835ef453215f7aff
#: ../../misc/design-philosophies.txt:210
msgid "Discourage redundancy"
msgstr ""

# 368c4182316341139fb17f93ff59104f
#: ../../misc/design-philosophies.txt:212
msgid ""
"The majority of dynamic Web sites use some sort of common sitewide design -- "
"a common header, footer, navigation bar, etc. The Django template system "
"should make it easy to store those elements in a single place, eliminating "
"duplicate code."
msgstr ""

# 7c114038b99b4445b26c7f1041648e83
#: ../../misc/design-philosophies.txt:217
msgid ""
"This is the philosophy behind :ref:`template inheritance <template-"
"inheritance>`."
msgstr ""

# 66e974b3bda4479cafc537383f44c89c
#: ../../misc/design-philosophies.txt:221
msgid "Be decoupled from HTML"
msgstr ""

# 889153c698e443b2a3904fdea3d89d6e
#: ../../misc/design-philosophies.txt:223
msgid ""
"The template system shouldn't be designed so that it only outputs HTML. It "
"should be equally good at generating other text-based formats, or just plain "
"text."
msgstr ""

# 7314b93bccd34bb8ad23a7d3476279f0
#: ../../misc/design-philosophies.txt:228
msgid "XML should not be used for template languages"
msgstr ""

# b7933dff85174e748e26c2a0095752de
#: ../../misc/design-philosophies.txt:232
msgid ""
"Using an XML engine to parse templates introduces a whole new world of human "
"error in editing templates -- and incurs an unacceptable level of overhead "
"in template processing."
msgstr ""

# 1860e14e4000484dbc4796601c468048
#: ../../misc/design-philosophies.txt:237
msgid "Assume designer competence"
msgstr ""

# 51195bcd99d74af586ecfd01bcd79003
#: ../../misc/design-philosophies.txt:239
msgid ""
"The template system shouldn't be designed so that templates necessarily are "
"displayed nicely in WYSIWYG editors such as Dreamweaver. That is too severe "
"of a limitation and wouldn't allow the syntax to be as nice as it is. Django "
"expects template authors are comfortable editing HTML directly."
msgstr ""

# a05a6c030f114b969d62e5dda409e185
#: ../../misc/design-philosophies.txt:245
msgid "Treat whitespace obviously"
msgstr ""

# 3952187b94744e0d8c22bf62585c35ec
#: ../../misc/design-philosophies.txt:247
msgid ""
"The template system shouldn't do magic things with whitespace. If a template "
"includes whitespace, the system should treat the whitespace as it treats "
"text -- just display it. Any whitespace that's not in a template tag should "
"be displayed."
msgstr ""

# 6f2537b6e53e43d5ab6945655bb75fd8
#: ../../misc/design-philosophies.txt:253
msgid "Don't invent a programming language"
msgstr ""

# 434e0c5e14b846d289c53524291da57b
#: ../../misc/design-philosophies.txt:255
msgid "The template system intentionally doesn't allow the following:"
msgstr ""

# 2f163ae6a2324cc7bf9801f772d58579
#: ../../misc/design-philosophies.txt:257
msgid "Assignment to variables"
msgstr ""

# 281250dc993c4622b023f56654ad4046
#: ../../misc/design-philosophies.txt:258
msgid "Advanced logic"
msgstr ""

# c044cde4ffc64fe8b50c322fdcad3bda
#: ../../misc/design-philosophies.txt:260
msgid ""
"The goal is not to invent a programming language. The goal is to offer just "
"enough programming-esque functionality, such as branching and looping, that "
"is essential for making presentation-related decisions."
msgstr ""

# 657e7adab6214b0e83fc1a02f0182f11
#: ../../misc/design-philosophies.txt:264
msgid ""
"The Django template system recognizes that templates are most often written "
"by *designers*, not *programmers*, and therefore should not assume Python "
"knowledge."
msgstr ""

# 524762d472584eb5b6a4193f7b694af6
#: ../../misc/design-philosophies.txt:269
msgid "Safety and security"
msgstr ""

# 23cbbf2f36f94a64ac6131a940f63f8e
#: ../../misc/design-philosophies.txt:271
msgid ""
"The template system, out of the box, should forbid the inclusion of "
"malicious code -- such as commands that delete database records."
msgstr ""

# 248b93576c9842aa9e6dd9f118bc531e
#: ../../misc/design-philosophies.txt:274
msgid ""
"This is another reason the template system doesn't allow arbitrary Python "
"code."
msgstr ""

# 4d542f5464564ef2b2ae28fd30fe4517
#: ../../misc/design-philosophies.txt:277
msgid "Extensibility"
msgstr ""

# 2bb1f2c986294bc8a5d6399c52fa8547
#: ../../misc/design-philosophies.txt:279
msgid ""
"The template system should recognize that advanced template authors may want "
"to extend its technology."
msgstr ""

# 2460551d9d294de4989c93131bc6069c
#: ../../misc/design-philosophies.txt:282
msgid "This is the philosophy behind custom template tags and filters."
msgstr ""

# 4893fbf70d864d3fa6204f1c5b50a1f7
#: ../../misc/design-philosophies.txt:285
msgid "Views"
msgstr ""

# 89df1f159f684b0f939330df1e842a13
#: ../../misc/design-philosophies.txt:288
msgid "Simplicity"
msgstr ""

# 1496fe2817304b0a85d349634c97b3f5
#: ../../misc/design-philosophies.txt:290
msgid ""
"Writing a view should be as simple as writing a Python function. Developers "
"shouldn't have to instantiate a class when a function will do."
msgstr ""

# ff0015d3d04e4106af5309526c9c218f
#: ../../misc/design-philosophies.txt:294
msgid "Use request objects"
msgstr ""

# 006c88776d214301a1b825b22c6bb1f3
#: ../../misc/design-philosophies.txt:296
msgid ""
"Views should have access to a request object -- an object that stores "
"metadata about the current request. The object should be passed directly to "
"a view function, rather than the view function having to access the request "
"data from a global variable. This makes it light, clean and easy to test "
"views by passing in \"fake\" request objects."
msgstr ""

# 20d36f05a6254c889347083789b1689d
#: ../../misc/design-philosophies.txt:305
msgid ""
"A view shouldn't care about which template system the developer uses -- or "
"even whether a template system is used at all."
msgstr ""

# 1b5e0a7e67a74390a319943b8e54509a
#: ../../misc/design-philosophies.txt:309
msgid "Differentiate between GET and POST"
msgstr ""

# 15c5d72858b04db9b8f79af0909a57db
#: ../../misc/design-philosophies.txt:311
msgid ""
"GET and POST are distinct; developers should explicitly use one or the "
"other. The framework should make it easy to distinguish between GET and POST "
"data."
msgstr ""

# ffea2c37cc894d70b972a5c1a5f90c45
#: ../../misc/distributions.txt:3
msgid "Third-party distributions of Django"
msgstr ""

# 1615a70d021446ecbc23e3933f02ef8b
#: ../../misc/distributions.txt:5
msgid ""
"Many third-party distributors are now providing versions of Django "
"integrated with their package-management systems. These can make "
"installation and upgrading much easier for users of Django since the "
"integration includes the ability to automatically install dependencies (like "
"database adapters) that Django requires."
msgstr ""

# 1f323b3705c242f988ec2193d236bc2d
#: ../../misc/distributions.txt:11
msgid ""
"Typically, these packages are based on the latest stable release of Django, "
"so if you want to use the development version of Django you'll need to "
"follow the instructions for :ref:`installing the development version "
"<installing-development-version>` from our Subversion repository."
msgstr ""

# 5148caa8c11d4850a9499e011c8664e5
#: ../../misc/distributions.txt:16
msgid ""
"If you're using Linux or a Unix installation, such as OpenSolaris, check "
"with your distributor to see if they already package Django. If you're using "
"a Linux distro and don't know how to find out if a package is available, "
"then now is a good time to learn.  The Django Wiki contains a list of `Third "
"Party Distributions`_ to help you out."
msgstr ""

# 2e5d4fb7ed9a4fa38636e38232cbc7f0
#: ../../misc/distributions.txt:26
msgid "For distributors"
msgstr ""

# 6ef1f485570348ecb864a238b0ac8e21
#: ../../misc/distributions.txt:28
msgid ""
"If you'd like to package Django for distribution, we'd be happy to help out! "
"Please join the `django-developers mailing list`_ and introduce yourself."
msgstr ""

# 2baccf0e5dc8405ea73d91a67a84d301
#: ../../misc/distributions.txt:31
msgid ""
"We also encourage all distributors to subscribe to the `django-announce "
"mailing list`_, which is a (very) low-traffic list for announcing new "
"releases of Django and important bugfixes."
msgstr ""

# a03ba20b14374c78a4dae5764e663b6d
#: ../../misc/index.txt:2
msgid "Meta-documentation and miscellany"
msgstr ""

# a620a13e50e94e4ab4740639a54a2716
#: ../../misc/index.txt:4
msgid ""
"Documentation that we can't find a more organized place for. Like that "
"drawer in your kitchen with the scissors, batteries, duct tape, and other "
"junk."
msgstr ""
