# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2012.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-02-15 15:13\n"
"PO-Revision-Date: 2012-02-15 15:13\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# d85d0bbc398948fb9183549b78f0fccf
#: ../../topics/cache.txt:3
msgid "Django's cache framework"
msgstr ""

# d40faf515ad24fcfa8cfd704b92ef773
#: ../../topics/cache.txt:5
msgid ""
"A fundamental trade-off in dynamic Web sites is, well, they're dynamic. Each "
"time a user requests a page, the Web server makes all sorts of calculations "
"-- from database queries to template rendering to business logic -- to "
"create the page that your site's visitor sees. This is a lot more expensive, "
"from a processing-overhead perspective, than your standard read-a-file-off-"
"the-filesystem server arrangement."
msgstr ""

# fb3a876b87624a4198fbad6450a44741
#: ../../topics/cache.txt:12
msgid ""
"For most Web applications, this overhead isn't a big deal. Most Web "
"applications aren't washingtonpost.com or slashdot.org; they're simply "
"small- to medium-sized sites with so-so traffic. But for medium- to high-"
"traffic sites, it's essential to cut as much overhead as possible."
msgstr ""

# 222573fa56c6474ebfcc256f3c4a4c4a
#: ../../topics/cache.txt:17
msgid "That's where caching comes in."
msgstr ""

# 055f13dcaa3c4de19584122b81bf457d
#: ../../topics/cache.txt:19
msgid ""
"To cache something is to save the result of an expensive calculation so that "
"you don't have to perform the calculation next time. Here's some pseudocode "
"explaining how this would work for a dynamically generated Web page::"
msgstr ""

# 86ed56ca7b334fec8ac2dcce7f80705c
#: ../../topics/cache.txt:31
msgid ""
"Django comes with a robust cache system that lets you save dynamic pages so "
"they don't have to be calculated for each request. For convenience, Django "
"offers different levels of cache granularity: You can cache the output of "
"specific views, you can cache only the pieces that are difficult to produce, "
"or you can cache your entire site."
msgstr ""

# b3fa6a2b4a4746eea325f896042cec78
#: ../../topics/cache.txt:37
msgid ""
"Django also works well with \"upstream\" caches, such as `Squid <http://www."
"squid-cache.org>`_ and browser-based caches. These are the types of caches "
"that you don't directly control but to which you can provide hints (via HTTP "
"headers) about which parts of your site should be cached, and how."
msgstr ""

# 127a66b2ab5a484ab3ece23ce4f3ca5d
#: ../../topics/cache.txt:43
msgid "Setting up the cache"
msgstr ""

# 980679b95fca4a99b163b395a2e7a997
#: ../../topics/cache.txt:45
msgid ""
"The cache system requires a small amount of setup. Namely, you have to tell "
"it where your cached data should live -- whether in a database, on the "
"filesystem or directly in memory. This is an important decision that affects "
"your cache's performance; yes, some cache types are faster than others."
msgstr ""

# 5db7b1742ff04a208df9910d0df1a6aa
#: ../../topics/cache.txt:50
msgid ""
"Your cache preference goes in the :setting:`CACHES` setting in your settings "
"file. Here's an explanation of all available values for :setting:`CACHES`."
msgstr ""

# 7fcb7b112c6d4e018f52fa73ed5e4c6d
#: ../../topics/cache.txt:64
msgid "Memcached"
msgstr ""

# f76ec94c2f8747ca8afd60bb3207b139
#: ../../topics/cache.txt:66
msgid ""
"By far the fastest, most efficient type of cache available to Django, "
"Memcached__ is an entirely memory-based cache framework originally developed "
"to handle high loads at LiveJournal.com and subsequently open-sourced by "
"Danga Interactive.  It is used by sites such as Facebook and Wikipedia to "
"reduce database access and dramatically increase site performance."
msgstr ""

# ec1d2a9aa8524a7586857316ee30b52e
#: ../../topics/cache.txt:74
msgid ""
"Memcached runs as a daemon and is allotted a specified amount of RAM. All it "
"does is provide a fast interface for adding, retrieving and deleting "
"arbitrary data in the cache.  All data is stored directly in memory, so "
"there's no overhead of database or filesystem usage."
msgstr ""

# adc51684bb6841b38d143e8215362dde
#: ../../topics/cache.txt:79
msgid ""
"After installing Memcached itself, you'll need to install a memcached "
"binding. There are several python memcached bindings available; the two most "
"common are `python-memcached`_ and `pylibmc`_."
msgstr ""

# 46690fd2af6f4614a28c021c92cd9708
#: ../../topics/cache.txt:95
msgid "To use Memcached with Django:"
msgstr ""

# fc9007e9bef64e80a30bae46012770e3
#: ../../topics/cache.txt:97
msgid ""
"Set :setting:`BACKEND <CACHES-BACKEND>` to ``django.core.cache.backends."
"memcached.MemcachedCache`` or ``django.core.cache.backends.memcached."
"PyLibMCCache`` (depending on your chosen memcached binding)"
msgstr ""

# 2610a28e2c2b483bbce4ee39eb776743
#: ../../topics/cache.txt:102
msgid ""
"Set :setting:`LOCATION <CACHES-LOCATION>` to ``ip:port`` values, where "
"``ip`` is the IP address of the Memcached daemon and ``port`` is the port on "
"which Memcached is running, or to a ``unix:path`` value, where ``path`` is "
"the path to a Memcached Unix socket file."
msgstr ""

# a02f2d21f0f1457297087fb7fa6a3faf
#: ../../topics/cache.txt:107
msgid ""
"In this example, Memcached is running on localhost (127.0.0.1) port 11211, "
"using the ``python-memcached`` binding::"
msgstr ""

# fd27466417074291b3b90c7880cc42c3
#: ../../topics/cache.txt:117
msgid ""
"In this example, Memcached is available through a local Unix socket file :"
"file:`/tmp/memcached.sock` using the ``python-memcached`` binding::"
msgstr ""

# 6832b93062504db6a4c040060a6d327c
#: ../../topics/cache.txt:127
msgid ""
"One excellent feature of Memcached is its ability to share cache over "
"multiple servers. This means you can run Memcached daemons on multiple "
"machines, and the program will treat the group of machines as a *single* "
"cache, without the need to duplicate cache values on each machine. To take "
"advantage of this feature, include all server addresses in :setting:"
"`LOCATION <CACHES-LOCATION>`, either separated by semicolons or as a list."
msgstr ""

# 28b40cf349e64433aacfdfbd1d25c740
#: ../../topics/cache.txt:134
msgid ""
"In this example, the cache is shared over Memcached instances running on IP "
"address 172.19.26.240 and 172.19.26.242, both on port 11211::"
msgstr ""

# b02876576e12496bb412054a79fc16bd
#: ../../topics/cache.txt:147
msgid ""
"In the following example, the cache is shared over Memcached instances "
"running on the IP addresses 172.19.26.240 (port 11211), 172.19.26.242 (port "
"11212), and 172.19.26.244 (port 11213)::"
msgstr ""

# 516a96ca514942b4b69efa4210f2527e
#: ../../topics/cache.txt:162
msgid ""
"A final point about Memcached is that memory-based caching has one "
"disadvantage: Because the cached data is stored in memory, the data will be "
"lost if your server crashes. Clearly, memory isn't intended for permanent "
"data storage, so don't rely on memory-based caching as your only data "
"storage. Without a doubt, *none* of the Django caching backends should be "
"used for permanent storage -- they're all intended to be solutions for "
"caching, not storage -- but we point this out here because memory-based "
"caching is particularly temporary."
msgstr ""

# 35423dabc59744c1ae7dfb24a0dedcc5
#: ../../topics/cache.txt:172
msgid "Database caching"
msgstr ""

# f75593e9515b4029b11505cb39ed777c
#: ../../topics/cache.txt:174
msgid ""
"To use a database table as your cache backend, first create a cache table in "
"your database by running this command::"
msgstr ""

# 12b60a03c83a4d019b46248e0645f245
#: ../../topics/cache.txt:179
msgid ""
"...where ``[cache_table_name]`` is the name of the database table to create. "
"(This name can be whatever you want, as long as it's a valid table name "
"that's not already being used in your database.) This command creates a "
"single table in your database that is in the proper format that Django's "
"database-cache system expects."
msgstr ""

# 144f23af0d5148ae9b1ab9fd8de32758
#: ../../topics/cache.txt:185
msgid ""
"Once you've created that database table, set your :setting:`BACKEND <CACHES-"
"BACKEND>` setting to ``\"django.core.cache.backends.db.DatabaseCache\"``, "
"and :setting:`LOCATION <CACHES-LOCATION>` to ``tablename`` -- the name of "
"the database table. In this example, the cache table's name is "
"``my_cache_table``::"
msgstr ""

# 5101deee3e49467e8dea4c139b9c276f
#: ../../topics/cache.txt:199
msgid ""
"The database caching backend uses the same database as specified in your "
"settings file. You can't use a different database backend for your cache "
"table."
msgstr ""

# 01fea39baa8f42b78d2eaf6c7101cf9d
#: ../../topics/cache.txt:202
msgid ""
"Database caching works best if you've got a fast, well-indexed database "
"server."
msgstr ""

# 5358ed1ca73748a7bc20bac76d46137b
#: ../../topics/cache.txt:205
msgid "Database caching and multiple databases"
msgstr ""

# 8ecc69f25aa0424f87f217344ad5f73b
#: ../../topics/cache.txt:207
msgid ""
"If you use database caching with multiple databases, you'll also need to set "
"up routing instructions for your database cache table. For the purposes of "
"routing, the database cache table appears as a model named ``CacheEntry``, "
"in an application named ``django_cache``. This model won't appear in the "
"models cache, but the model details can be used for routing purposes."
msgstr ""

# dad7ad27c2524988871e70c01b3808ab
#: ../../topics/cache.txt:214
msgid ""
"For example, the following router would direct all cache read operations to "
"``cache_slave``, and all write operations to ``cache_master``. The cache "
"table will only be synchronized onto ``cache_master``::"
msgstr ""

# 56c49618fa8e4b73b9f055a98ae61c71
#: ../../topics/cache.txt:240
msgid ""
"If you don't specify routing directions for the database cache model, the "
"cache backend will use the ``default`` database."
msgstr ""

# 4835ce4ac29f48958de1f26d2f9c2579
#: ../../topics/cache.txt:243
msgid ""
"Of course, if you don't use the database cache backend, you don't need to "
"worry about providing routing instructions for the database cache model."
msgstr ""

# b8b624ae6228452ab0e97c806c33a1cb
#: ../../topics/cache.txt:248
msgid "Filesystem caching"
msgstr ""

# c2fb6cf652324bcd962e98ffd9dfcdf6
#: ../../topics/cache.txt:250
msgid ""
"To store cached items on a filesystem, use ``\"django.core.cache.backends."
"filebased.FileBasedCache\"`` for :setting:`BACKEND <CACHES-BACKEND>`. For "
"example, to store cached data in ``/var/tmp/django_cache``, use this "
"setting::"
msgstr ""

# 7ed82b37873a4abfaadcd6eab1e79b23
#: ../../topics/cache.txt:263
msgid ""
"If you're on Windows, put the drive letter at the beginning of the path, "
"like this::"
msgstr ""

# 96996adb9583415086a927844138a542
#: ../../topics/cache.txt:273
msgid ""
"The directory path should be absolute -- that is, it should start at the "
"root of your filesystem. It doesn't matter whether you put a slash at the "
"end of the setting."
msgstr ""

# 95142726f70a49e6b88b7d8ba359bfaf
#: ../../topics/cache.txt:277
msgid ""
"Make sure the directory pointed-to by this setting exists and is readable "
"and writable by the system user under which your Web server runs. Continuing "
"the above example, if your server runs as the user ``apache``, make sure the "
"directory ``/var/tmp/django_cache`` exists and is readable and writable by "
"the user ``apache``."
msgstr ""

# 5126b27fab4f46e683bba162b4864d03
#: ../../topics/cache.txt:283
msgid ""
"Each cache value will be stored as a separate file whose contents are the "
"cache data saved in a serialized (\"pickled\") format, using Python's "
"``pickle`` module. Each file's name is the cache key, escaped for safe "
"filesystem use."
msgstr ""

# daae325452f547e8909485bb9bd82c8b
#: ../../topics/cache.txt:288
msgid "Local-memory caching"
msgstr ""

# b748754e6f474f17aca313fc8c17dcc6
#: ../../topics/cache.txt:290
msgid ""
"If you want the speed advantages of in-memory caching but don't have the "
"capability of running Memcached, consider the local-memory cache backend. "
"This cache is multi-process and thread-safe. To use it, set :setting:"
"`BACKEND <CACHES-BACKEND>` to ``\"django.core.cache.backends.locmem."
"LocMemCache\"``. For example::"
msgstr ""

# 4112477d99164d8d8136a8d98311bd32
#: ../../topics/cache.txt:303
msgid ""
"The cache :setting:`LOCATION <CACHES-LOCATION>` is used to identify "
"individual memory stores. If you only have one locmem cache, you can omit "
"the :setting:`LOCATION <CACHES-LOCATION>`; however, if you have more that "
"one local memory cache, you will need to assign a name to at least one of "
"them in order to keep them separate."
msgstr ""

# afb7683767574ed3aa4bf3c634b841c5
#: ../../topics/cache.txt:309
msgid ""
"Note that each process will have its own private cache instance, which means "
"no cross-process caching is possible. This obviously also means the local "
"memory cache isn't particularly memory-efficient, so it's probably not a "
"good choice for production environments. It's nice for development."
msgstr ""

# 0fe9e3a9c40e478ba8762a4b100f49b5
#: ../../topics/cache.txt:315
msgid "Dummy caching (for development)"
msgstr ""

# 74492aa2765e477a932cb1c9410f04f4
#: ../../topics/cache.txt:317
msgid ""
"Finally, Django comes with a \"dummy\" cache that doesn't actually cache -- "
"it just implements the cache interface without doing anything."
msgstr ""

# df00eebee07a4285a0404f96a1e77a7e
#: ../../topics/cache.txt:320
msgid ""
"This is useful if you have a production site that uses heavy-duty caching in "
"various places but a development/test environment where you don't want to "
"cache and don't want to have to change your code to special-case the latter. "
"To activate dummy caching, set :setting:`BACKEND <CACHES-BACKEND>` like so::"
msgstr ""

# 8a92843c7e2c402caf97c2f3afa1837f
#: ../../topics/cache.txt:332
msgid "Using a custom cache backend"
msgstr ""

# 69e2d99daa99418197fcf39cf51e895b
#: ../../topics/cache.txt:334
msgid ""
"While Django includes support for a number of cache backends out-of-the-box, "
"sometimes you might want to use a customized cache backend. To use an "
"external cache backend with Django, use the Python import path as the :"
"setting:`BACKEND <CACHES-BACKEND>` of the :setting:`CACHES` setting, like "
"so::"
msgstr ""

# 54d2ee731f974423b0e8c63153deed54
#: ../../topics/cache.txt:345
msgid ""
"If you're building your own backend, you can use the standard cache backends "
"as reference implementations. You'll find the code in the ``django/core/"
"cache/backends/`` directory of the Django source."
msgstr ""

# 61361e4e3bfe4f42a30fc0f79881fba1
#: ../../topics/cache.txt:349
msgid ""
"Note: Without a really compelling reason, such as a host that doesn't "
"support them, you should stick to the cache backends included with Django. "
"They've been well-tested and are easy to use."
msgstr ""

# 95bfe707b6784ae2a82cc27935b61eb6
#: ../../topics/cache.txt:354
msgid "Cache arguments"
msgstr ""

# 7642d91d62404e8382403a02f7115261
#: ../../topics/cache.txt:356
msgid ""
"In addition to the defining the engine and name of the each cache backend, "
"each cache backend can be given additional arguments to control caching "
"behavior. These arguments are provided as additional keys in the :setting:"
"`CACHES` setting. Valid arguments are as follows:"
msgstr ""

# ed29ac2f02a74e0da10a5ffecbe2e1e0
#: ../../topics/cache.txt:361
msgid ""
":setting:`TIMEOUT <CACHES-TIMEOUT>`: The default timeout, in seconds, to use "
"for the cache. This argument defaults to 300 seconds (5 minutes)."
msgstr ""

# cd98577671fb4b50bbc831d7fecd3cb5
#: ../../topics/cache.txt:365
msgid ""
":setting:`OPTIONS <CACHES-OPTIONS>`: Any options that should be passed to "
"cache backend. The list options understood by each backend vary with each "
"backend."
msgstr ""

# ee21c295969f48cd827adcc5aac9372f
#: ../../topics/cache.txt:369
msgid ""
"Cache backends that implement their own culling strategy (i.e., the "
"``locmem``, ``filesystem`` and ``database`` backends) will honor the "
"following options:"
msgstr ""

# b7bbecd452f34daab21bf4dc8594acda
#: ../../topics/cache.txt:373
msgid ""
"``MAX_ENTRIES``: the maximum number of entries allowed in the cache before "
"old values are deleted. This argument defaults to ``300``."
msgstr ""

# 440c4f8018f9413eacda97ccaee8bd38
#: ../../topics/cache.txt:377
msgid ""
"``CULL_FREQUENCY``: The fraction of entries that are culled when "
"``MAX_ENTRIES`` is reached. The actual ratio is ``1/CULL_FREQUENCY``, so set "
"``CULL_FREQUENCY``: to ``2`` to cull half of the entries when "
"``MAX_ENTRIES`` is reached."
msgstr ""

# 59258d4194024c019cf8cbb067e32919
#: ../../topics/cache.txt:382
msgid ""
"A value of ``0`` for ``CULL_FREQUENCY`` means that the entire cache will be "
"dumped when ``MAX_ENTRIES`` is reached. This makes culling *much* faster at "
"the expense of more cache misses."
msgstr ""

# 472f4ad4a96d448a9bafac2887ac5a7d
#: ../../topics/cache.txt:387
msgid ""
"Cache backends backed by a third-party library will pass their options "
"directly to the underlying cache library. As a result, the list of valid "
"options depends on the library in use."
msgstr ""

# 978e9dbc456442fb9d145a4eb32a19ee
#: ../../topics/cache.txt:391
msgid ""
":setting:`KEY_PREFIX <CACHES-KEY_PREFIX>`: A string that will be "
"automatically included (prepended by default) to all cache keys used by the "
"Django server."
msgstr ""

# f4ab48a98d3c40c49f744a6ee31e64e0
#: ../../topics/cache.txt:395
msgid ""
"See the :ref:`cache documentation <cache_key_prefixing>` for more "
"information."
msgstr ""

# ad9796083fb64dfd901e0863b8cfdd50
#: ../../topics/cache.txt:398
msgid ""
":setting:`VERSION <CACHES-VERSION>`: The default version number for cache "
"keys generated by the Django server."
msgstr ""

# ad0ef1030c1c4189b17801b4e58b3916
#: ../../topics/cache.txt:401
msgid ""
"See the :ref:`cache documentation <cache_versioning>` for more information."
msgstr ""

# fdd591ea93484bc1ab23764b8a19a1a5
#: ../../topics/cache.txt:404
msgid ""
":setting:`KEY_FUNCTION <CACHES-KEY_FUNCTION>` A string containing a dotted "
"path to a function that defines how to compose a prefix, version and key "
"into a final cache key."
msgstr ""

# d98a637e0b23454c8ae69ea1458f1fe0
#: ../../topics/cache.txt:408
msgid ""
"See the :ref:`cache documentation <cache_key_transformation>` for more "
"information."
msgstr ""

# 84318c43d9214ca188f044a97e59bc51
#: ../../topics/cache.txt:411
msgid ""
"In this example, a filesystem backend is being configured with a timeout of "
"60 seconds, and a maximum capacity of 1000 items::"
msgstr ""

# 20e9f738f144400eb797d81596e0634a
#: ../../topics/cache.txt:425
msgid ""
"Invalid arguments are silently ignored, as are invalid values of known "
"arguments."
msgstr ""

# 3932284ccf6747e79c7f0b1d8c70a155
#: ../../topics/cache.txt:429
msgid "The per-site cache"
msgstr ""

# d30004f128d3439fb8c25d6d7a865106
#: ../../topics/cache.txt:431
msgid ""
"Once the cache is set up, the simplest way to use caching is to cache your "
"entire site. You'll need to add ``'django.middleware.cache."
"UpdateCacheMiddleware'`` and ``'django.middleware.cache."
"FetchFromCacheMiddleware'`` to your :setting:`MIDDLEWARE_CLASSES` setting, "
"as in this example::"
msgstr ""

# bcc6e2136b294876a4f3de52ceb7ae8a
#: ../../topics/cache.txt:445
msgid ""
"No, that's not a typo: the \"update\" middleware must be first in the list, "
"and the \"fetch\" middleware must be last. The details are a bit obscure, "
"but see `Order of MIDDLEWARE_CLASSES`_ below if you'd like the full story."
msgstr ""

# 18a655b59eb542899c0d60678f368811
#: ../../topics/cache.txt:449
msgid "Then, add the following required settings to your Django settings file:"
msgstr ""

# fa4a24d0e08d48809cb1a69fe7b61c58
#: ../../topics/cache.txt:451
msgid ""
":setting:`CACHE_MIDDLEWARE_ALIAS` -- The cache alias to use for storage."
msgstr ""

# 9c54378e02cc42caac75ce4c92cc2a4d
#: ../../topics/cache.txt:452
msgid ""
":setting:`CACHE_MIDDLEWARE_SECONDS` -- The number of seconds each page "
"should be cached."
msgstr ""

# ca1e970db99640cfbd270b51a3c24ea0
#: ../../topics/cache.txt:454
msgid ""
":setting:`CACHE_MIDDLEWARE_KEY_PREFIX` -- If the cache is shared across "
"multiple sites using the same Django installation, set this to the name of "
"the site, or some other string that is unique to this Django instance, to "
"prevent key collisions. Use an empty string if you don't care."
msgstr ""

# 2e6c7ef3a7bb4d77b37fd9712a16f163
#: ../../topics/cache.txt:459
msgid ""
"The cache middleware caches GET and HEAD responses with status 200, where "
"the request and response headers allow. Responses to requests for the same "
"URL with different query parameters are considered to be unique pages and "
"are cached separately. Optionally, if the :setting:"
"`CACHE_MIDDLEWARE_ANONYMOUS_ONLY` setting is ``True``, only anonymous "
"requests (i.e., not those made by a logged-in user) will be cached. This is "
"a simple and effective way of disabling caching for any user-specific pages "
"(including Django's admin interface). Note that if you use :setting:"
"`CACHE_MIDDLEWARE_ANONYMOUS_ONLY`, you should make sure you've activated "
"``AuthenticationMiddleware``. The cache middleware expects that a HEAD "
"request is answered with the same response headers as the corresponding GET "
"request; in which case it can return a cached GET response for HEAD request."
msgstr ""

# 7e280eb36872431c9be00cd1ff3c6021
#: ../../topics/cache.txt:472
msgid ""
"Additionally, the cache middleware automatically sets a few headers in each :"
"class:`~django.http.HttpResponse`:"
msgstr ""

# 1245b45080d8466ebb8a2ff2eecfdeb5
#: ../../topics/cache.txt:475
msgid ""
"Sets the ``Last-Modified`` header to the current date/time when a fresh "
"(uncached) version of the page is requested."
msgstr ""

# f5e8c15f582344349d2620ffc8373da8
#: ../../topics/cache.txt:478
msgid ""
"Sets the ``Expires`` header to the current date/time plus the defined :"
"setting:`CACHE_MIDDLEWARE_SECONDS`."
msgstr ""

# 6fe8920707af42998bbadf05b5af4e70
#: ../../topics/cache.txt:481
msgid ""
"Sets the ``Cache-Control`` header to give a max age for the page -- again, "
"from the :setting:`CACHE_MIDDLEWARE_SECONDS` setting."
msgstr ""

# 2901aaecec6c47e6843c19b877603cbd
#: ../../topics/cache.txt:484
msgid "See :doc:`/topics/http/middleware` for more on middleware."
msgstr ""

# 602a54512da348edb56601e0713bd623
#: ../../topics/cache.txt:486
msgid ""
"If a view sets its own cache expiry time (i.e. it has a ``max-age`` section "
"in its ``Cache-Control`` header) then the page will be cached until the "
"expiry time, rather than :setting:`CACHE_MIDDLEWARE_SECONDS`. Using the "
"decorators in ``django.views.decorators.cache`` you can easily set a view's "
"expiry time (using the ``cache_control`` decorator) or disable caching for a "
"view (using the ``never_cache`` decorator). See the `using other headers`__ "
"section for more on these decorators."
msgstr ""

# a108c7c0d3c5494a8218e6202693c584
#: ../../topics/cache.txt:498
msgid ""
"If :setting:`USE_I18N` is set to ``True`` then the generated cache key will "
"include the name of the active :term:`language<language code>` -- see also :"
"ref:`how-django-discovers-language-preference`). This allows you to easily "
"cache multilingual sites without having to create the cache key yourself."
msgstr ""

# 453ea9c236c24006a1da325969416242
#: ../../topics/cache.txt:505
msgid ""
"Cache keys also include the active :term:`language <language code>` when :"
"setting:`USE_L10N` is set to ``True`` and the :ref:`current time zone "
"<default-current-time-zone>` when :setting:`USE_TZ` is set to ``True``."
msgstr ""

# 1ff41aca7750497b857fe3472718ae1a
#: ../../topics/cache.txt:512
msgid "The per-view cache"
msgstr ""

# e59c55a8b945483cb5ec88c7dd608ba7
#: ../../topics/cache.txt:516
msgid ""
"A more granular way to use the caching framework is by caching the output of "
"individual views. ``django.views.decorators.cache`` defines a ``cache_page`` "
"decorator that will automatically cache the view's response for you. It's "
"easy to use::"
msgstr ""

# 9fc1e4dd2d5f486d8064130dee513363
#: ../../topics/cache.txt:527
msgid ""
"``cache_page`` takes a single argument: the cache timeout, in seconds. In "
"the above example, the result of the ``my_view()`` view will be cached for "
"15 minutes. (Note that we've written it as ``60 * 15`` for the purpose of "
"readability. ``60 * 15`` will be evaluated to ``900`` -- that is, 15 minutes "
"multiplied by 60 seconds per minute.)"
msgstr ""

# bfe46b9edde944569e21c3497e3c06ac
#: ../../topics/cache.txt:533
msgid ""
"The per-view cache, like the per-site cache, is keyed off of the URL. If "
"multiple URLs point at the same view, each URL will be cached separately. "
"Continuing the ``my_view`` example, if your URLconf looks like this::"
msgstr ""

# 034177cc381a487391c6e667bf5985d3
#: ../../topics/cache.txt:541
msgid ""
"then requests to ``/foo/1/`` and ``/foo/23/`` will be cached separately, as "
"you may expect. But once a particular URL (e.g., ``/foo/23/``) has been "
"requested, subsequent requests to that URL will use the cache."
msgstr ""

# ab60b2178b4e428d9e7998db5a0e940e
#: ../../topics/cache.txt:545
msgid ""
"``cache_page`` can also take an optional keyword argument, ``cache``, which "
"directs the decorator to use a specific cache (from your :setting:`CACHES` "
"setting) when caching view results. By default, the ``default`` cache will "
"be used, but you can specify any cache you want::"
msgstr ""

# 3623fd1f0f3b4a07b577bb0f89c89729
#: ../../topics/cache.txt:555
msgid ""
"You can also override the cache prefix on a per-view basis. ``cache_page`` "
"takes an optional keyword argument, ``key_prefix``, which works in the same "
"way as the :setting:`CACHE_MIDDLEWARE_KEY_PREFIX` setting for the "
"middleware.  It can be used like this::"
msgstr ""

# e6b19c871827422cba7d681148286ddf
#: ../../topics/cache.txt:564
msgid ""
"The two settings can also be combined. If you specify a ``cache`` *and* a "
"``key_prefix``, you will get all the settings of the requested cache alias, "
"but with the key_prefix overridden."
msgstr ""

# 61c6a341520942539be8d7a59d748bc6
#: ../../topics/cache.txt:569
msgid "Specifying per-view cache in the URLconf"
msgstr ""

# 84888a6c35e74e139cdfc3f2dece3eca
#: ../../topics/cache.txt:571
msgid ""
"The examples in the previous section have hard-coded the fact that the view "
"is cached, because ``cache_page`` alters the ``my_view`` function in place. "
"This approach couples your view to the cache system, which is not ideal for "
"several reasons. For instance, you might want to reuse the view functions on "
"another, cache-less site, or you might want to distribute the views to "
"people who might want to use them without being cached. The solution to "
"these problems is to specify the per-view cache in the URLconf rather than "
"next to the view functions themselves."
msgstr ""

# 8a454ae0abd148e8b98311167e3c340e
#: ../../topics/cache.txt:580
msgid ""
"Doing so is easy: simply wrap the view function with ``cache_page`` when you "
"refer to it in the URLconf. Here's the old URLconf from earlier::"
msgstr ""

# 9acd2f37a1bd445280b3dacd19d3781e
#: ../../topics/cache.txt:587
msgid "Here's the same thing, with ``my_view`` wrapped in ``cache_page``::"
msgstr ""

# 48d16e8184014bfb95414e7750d8b7dc
#: ../../topics/cache.txt:598
msgid "Template fragment caching"
msgstr ""

# 956cc3117f6d41fb9dafeda8793c2029
#: ../../topics/cache.txt:600
msgid ""
"If you're after even more control, you can also cache template fragments "
"using the ``cache`` template tag. To give your template access to this tag, "
"put ``{% load cache %}`` near the top of your template."
msgstr ""

# d7a631d9b3ba4f12944d6ab788374266
#: ../../topics/cache.txt:604
msgid ""
"The ``{% cache %}`` template tag caches the contents of the block for a "
"given amount of time. It takes at least two arguments: the cache timeout, in "
"seconds, and the name to give the cache fragment. For example:"
msgstr ""

# b37b743b1c1b4c509d4476c98005b71b
#: ../../topics/cache.txt:615
msgid ""
"Sometimes you might want to cache multiple copies of a fragment depending on "
"some dynamic data that appears inside the fragment. For example, you might "
"want a separate cached copy of the sidebar used in the previous example for "
"every user of your site. Do this by passing additional arguments to the ``{% "
"cache %}`` template tag to uniquely identify the cache fragment:"
msgstr ""

# 8e29c0aa2872497386ac37673ca9aecc
#: ../../topics/cache.txt:628
msgid ""
"It's perfectly fine to specify more than one argument to identify the "
"fragment. Simply pass as many arguments to ``{% cache %}`` as you need."
msgstr ""

# a04311ac09f74f6c977acdd445fff573
#: ../../topics/cache.txt:631
msgid ""
"If :setting:`USE_I18N` is set to ``True`` the per-site middleware cache "
"will :ref:`respect the active language<i18n-cache-key>`. For the ``cache`` "
"template tag you could use one of the :ref:`translation-specific "
"variables<template-translation-vars>` available in templates to achieve the "
"same result:"
msgstr ""

# 9056ae4ade8b46a2860b759d6764afb3
#: ../../topics/cache.txt:648
msgid ""
"The cache timeout can be a template variable, as long as the template "
"variable resolves to an integer value. For example, if the template variable "
"``my_timeout`` is set to the value ``600``, then the following two examples "
"are equivalent:"
msgstr ""

# 349269b6e5b54c59a29b44981cdfcad1
#: ../../topics/cache.txt:658
msgid ""
"This feature is useful in avoiding repetition in templates. You can set the "
"timeout in a variable, in one place, and just reuse that value."
msgstr ""

# bdde1d324fc941479c1d86d7b898bebd
#: ../../topics/cache.txt:662
msgid "The low-level cache API"
msgstr ""

# 3868bc207fb342499cf0c8a35627cfa1
#: ../../topics/cache.txt:666
msgid ""
"Sometimes, caching an entire rendered page doesn't gain you very much and "
"is, in fact, inconvenient overkill."
msgstr ""

# 0203cbc5a30445349b9dc4824fb7c4f4
#: ../../topics/cache.txt:669
msgid ""
"Perhaps, for instance, your site includes a view whose results depend on "
"several expensive queries, the results of which change at different "
"intervals. In this case, it would not be ideal to use the full-page caching "
"that the per-site or per-view cache strategies offer, because you wouldn't "
"want to cache the entire result (since some of the data changes often), but "
"you'd still want to cache the results that rarely change."
msgstr ""

# b85226131dc642b0b211838f4dc43db6
#: ../../topics/cache.txt:676
msgid ""
"For cases like this, Django exposes a simple, low-level cache API. You can "
"use this API to store objects in the cache with any level of granularity you "
"like. You can cache any Python object that can be pickled safely: strings, "
"dictionaries, lists of model objects, and so forth. (Most common Python "
"objects can be pickled; refer to the Python documentation for more "
"information about pickling.)"
msgstr ""

# 5fd4daa2f11240808d7cb56e7c5b99c1
#: ../../topics/cache.txt:683
msgid ""
"The cache module, ``django.core.cache``, has a ``cache`` object that's "
"automatically created from the ``'default'`` entry in the :setting:`CACHES` "
"setting::"
msgstr ""

# 2d709edc9f8149f6907b96027423b6c8
#: ../../topics/cache.txt:689
msgid "The basic interface is ``set(key, value, timeout)`` and ``get(key)``::"
msgstr ""

# ad84ddaffe4446898751fc4a361a0102
#: ../../topics/cache.txt:695
msgid ""
"The ``timeout`` argument is optional and defaults to the ``timeout`` "
"argument of the ``'default'`` backend in :setting:`CACHES` setting "
"(explained above). It's the number of seconds the value should be stored in "
"the cache."
msgstr ""

# e2ac6c0f0ffc47c48e59b270c7f2432a
#: ../../topics/cache.txt:700
msgid ""
"If the object doesn't exist in the cache, ``cache.get()`` returns ``None``::"
msgstr ""

# f6ef2a1eb1294361b93d4758d9dfcc86
#: ../../topics/cache.txt:707
msgid ""
"We advise against storing the literal value ``None`` in the cache, because "
"you won't be able to distinguish between your stored ``None`` value and a "
"cache miss signified by a return value of ``None``."
msgstr ""

# ae0a4031fb5d4df0861efb615e0c498a
#: ../../topics/cache.txt:711
msgid ""
"``cache.get()`` can take a ``default`` argument. This specifies which value "
"to return if the object doesn't exist in the cache::"
msgstr ""

# c48b3839887b45b988e19d8b543f5880
#: ../../topics/cache.txt:717
msgid ""
"To add a key only if it doesn't already exist, use the ``add()`` method. It "
"takes the same parameters as ``set()``, but it will not attempt to update "
"the cache if the key specified is already present::"
msgstr ""

# 3b19b90df27a431fb776fd3146a97c5b
#: ../../topics/cache.txt:726
msgid ""
"If you need to know whether ``add()`` stored a value in the cache, you can "
"check the return value. It will return ``True`` if the value was stored, "
"``False`` otherwise."
msgstr ""

# 87ddeb757d844041b8b4377415531f27
#: ../../topics/cache.txt:730
msgid ""
"There's also a ``get_many()`` interface that only hits the cache once. "
"``get_many()`` returns a dictionary with all the keys you asked for that "
"actually exist in the cache (and haven't expired)::"
msgstr ""

# 04d054ef61e8474f8da1c3f9adf10fff
#: ../../topics/cache.txt:742
msgid ""
"To set multiple values more efficiently, use ``set_many()`` to pass a "
"dictionary of key-value pairs::"
msgstr ""

# 4c3d7f2b1b5d47ac8be387fd084ae3c3
#: ../../topics/cache.txt:749
msgid ""
"Like ``cache.set()``, ``set_many()`` takes an optional ``timeout`` parameter."
msgstr ""

# 79accce07d424550959d1a6100d25fcb
#: ../../topics/cache.txt:751
msgid ""
"You can delete keys explicitly with ``delete()``. This is an easy way of "
"clearing the cache for a particular object::"
msgstr ""

# f827e4ff97cf41d9b377d65bba2b1b7c
#: ../../topics/cache.txt:758
msgid ""
"If you want to clear a bunch of keys at once, ``delete_many()`` can take a "
"list of keys to be cleared::"
msgstr ""

# b00267e3792f45f596f2c95add055168
#: ../../topics/cache.txt:765
msgid ""
"Finally, if you want to delete all the keys in the cache, use ``cache.clear()"
"``.  Be careful with this; ``clear()`` will remove *everything* from the "
"cache, not just the keys set by your application. ::"
msgstr ""

# 6eaebd140f81434780aeb8133dd7d6e5
#: ../../topics/cache.txt:771
msgid ""
"You can also increment or decrement a key that already exists using the "
"``incr()`` or ``decr()`` methods, respectively. By default, the existing "
"cache value will incremented or decremented by 1. Other increment/decrement "
"values can be specified by providing an argument to the increment/decrement "
"call. A ValueError will be raised if you attempt to increment or decrement a "
"nonexistent cache key.::"
msgstr ""

# 30d4d17957704c22b2c98342c32bbf5a
#: ../../topics/cache.txt:790
msgid ""
"``incr()``/``decr()`` methods are not guaranteed to be atomic. On those "
"backends that support atomic increment/decrement (most notably, the "
"memcached backend), increment and decrement operations will be atomic. "
"However, if the backend doesn't natively provide an increment/decrement "
"operation, it will be implemented using a two-step retrieve/update."
msgstr ""

# a36cf47d87e14522986c7671150061ca
#: ../../topics/cache.txt:799
msgid "Cache key prefixing"
msgstr ""

# c196c71a71c24f458f64c053978c4046
#: ../../topics/cache.txt:803
msgid ""
"If you are sharing a cache instance between servers, or between your "
"production and development environments, it's possible for data cached by "
"one server to be used by another server. If the format of cached data is "
"different between servers, this can lead to some very hard to diagnose "
"problems."
msgstr ""

# 022f7eace0eb4e81b5632415cdc39c68
#: ../../topics/cache.txt:809
msgid ""
"To prevent this, Django provides the ability to prefix all cache keys used "
"by a server. When a particular cache key is saved or retrieved, Django will "
"automatically prefix the cache key with the value of the :setting:"
"`KEY_PREFIX <CACHES-KEY_PREFIX>` cache setting."
msgstr ""

# d3acfa876b61422c8af9258e72883d53
#: ../../topics/cache.txt:814
msgid ""
"By ensuring each Django instance has a different :setting:`KEY_PREFIX "
"<CACHES-KEY_PREFIX>`, you can ensure that there will be no collisions in "
"cache values."
msgstr ""

# a2d5e7476e2c44c682d499c058760c96
#: ../../topics/cache.txt:821
msgid "Cache versioning"
msgstr ""

# 55e277e0a1ad40e9880c44e67ad2096b
#: ../../topics/cache.txt:825
msgid ""
"When you change running code that uses cached values, you may need to purge "
"any existing cached values. The easiest way to do this is to flush the "
"entire cache, but this can lead to the loss of cache values that are still "
"valid and useful."
msgstr ""

# ce62385b7fc1406fa20fc0811eb5049f
#: ../../topics/cache.txt:830
msgid ""
"Django provides a better way to target individual cache values. Django's "
"cache framework has a system-wide version identifier, specified using the :"
"setting:`VERSION <CACHES-VERSION>` cache setting. The value of this setting "
"is automatically combined with the cache prefix and the user-provided cache "
"key to obtain the final cache key."
msgstr ""

# acb31bfad6f5427d94a3941584b9b90c
#: ../../topics/cache.txt:836
msgid ""
"By default, any key request will automatically include the site default "
"cache key version. However, the primitive cache functions all include a "
"``version`` argument, so you can specify a particular cache key version to "
"set or get. For example::"
msgstr ""

# 4e5fe7d7ce5846d587e1d96938dd438f
#: ../../topics/cache.txt:850
msgid ""
"The version of a specific key can be incremented and decremented using the :"
"func:`incr_version()` and :func:`decr_version()` methods. This enables "
"specific keys to be bumped to a new version, leaving other keys unaffected. "
"Continuing our previous example::"
msgstr ""

# 73ee41bcca6f42609f3d456e3c1cc905
#: ../../topics/cache.txt:870
msgid "Cache key transformation"
msgstr ""

# aad07f725cc74f6ba6d129cb703fcd18
#: ../../topics/cache.txt:874
msgid ""
"As described in the previous two sections, the cache key provided by a user "
"is not used verbatim -- it is combined with the cache prefix and key version "
"to provide a final cache key. By default, the three parts are joined using "
"colons to produce a final string::"
msgstr ""

# d36a7fcc85894bf5be82ef03e882fd15
#: ../../topics/cache.txt:882
msgid ""
"If you want to combine the parts in different ways, or apply other "
"processing to the final key (e.g., taking a hash digest of the key parts), "
"you can provide a custom key function."
msgstr ""

# 17a9aad4e16f4d8ca2e867ce21bd7196
#: ../../topics/cache.txt:886
msgid ""
"The :setting:`KEY_FUNCTION <CACHES-KEY_FUNCTION>` cache setting specifies a "
"dotted-path to a function matching the prototype of :func:`make_key()` "
"above. If provided, this custom key function will be used instead of the "
"default key combining function."
msgstr ""

# ac1ef3c7eb7643628e40cee0a8e17232
#: ../../topics/cache.txt:892
msgid "Cache key warnings"
msgstr ""

# 0ac881dd53d547618aa04af5795ce683
#: ../../topics/cache.txt:896
msgid ""
"Memcached, the most commonly-used production cache backend, does not allow "
"cache keys longer than 250 characters or containing whitespace or control "
"characters, and using such keys will cause an exception. To encourage cache-"
"portable code and minimize unpleasant surprises, the other built-in cache "
"backends issue a warning (``django.core.cache.backends.base."
"CacheKeyWarning``) if a key is used that would cause an error on memcached."
msgstr ""

# ad956ce1710548d48dc6511d2578afd1
#: ../../topics/cache.txt:903
msgid ""
"If you are using a production backend that can accept a wider range of keys "
"(a custom backend, or one of the non-memcached built-in backends), and want "
"to use this wider range without warnings, you can silence "
"``CacheKeyWarning`` with this code in the ``management`` module of one of "
"your :setting:`INSTALLED_APPS`::"
msgstr ""

# 7f94f2f026954777bdc15eb937e2bc0c
#: ../../topics/cache.txt:915
msgid ""
"If you want to instead provide custom key validation logic for one of the "
"built-in backends, you can subclass it, override just the ``validate_key`` "
"method, and follow the instructions for `using a custom cache backend`_. For "
"instance, to do this for the ``locmem`` backend, put this code in a module::"
msgstr ""

# 028c628ae918405e9e107c17be958f38
#: ../../topics/cache.txt:927
msgid ""
"...and use the dotted Python path to this class in the :setting:`BACKEND "
"<CACHES-BACKEND>` portion of your :setting:`CACHES` setting."
msgstr ""

# 6dca884f44514eb8a0e05957ea58f1e4
#: ../../topics/cache.txt:931
msgid "Upstream caches"
msgstr ""

# c4c54ad682454628817315485d03ba8f
#: ../../topics/cache.txt:933
msgid ""
"So far, this document has focused on caching your *own* data. But another "
"type of caching is relevant to Web development, too: caching performed by "
"\"upstream\" caches. These are systems that cache pages for users even "
"before the request reaches your Web site."
msgstr ""

# 4e5c1ceb9ab24c7c93a3d35024b283a0
#: ../../topics/cache.txt:938
msgid "Here are a few examples of upstream caches:"
msgstr ""

# 58fe4f8b243c482686737a363b348490
#: ../../topics/cache.txt:940
msgid ""
"Your ISP may cache certain pages, so if you requested a page from http://"
"example.com/, your ISP would send you the page without having to access "
"example.com directly. The maintainers of example.com have no knowledge of "
"this caching; the ISP sits between example.com and your Web browser, "
"handling all of the caching transparently."
msgstr ""

# 44704ea8542b4d39b1e9830e0b5a1a0a
#: ../../topics/cache.txt:946
msgid ""
"Your Django Web site may sit behind a *proxy cache*, such as Squid Web Proxy "
"Cache (http://www.squid-cache.org/), that caches pages for performance. In "
"this case, each request first would be handled by the proxy, and it would be "
"passed to your application only if needed."
msgstr ""

# c899e17aa9684a6ab71381aa49ee9ac4
#: ../../topics/cache.txt:951
msgid ""
"Your Web browser caches pages, too. If a Web page sends out the appropriate "
"headers, your browser will use the local cached copy for subsequent requests "
"to that page, without even contacting the Web page again to see whether it "
"has changed."
msgstr ""

# 573d9bfa5ccb4dd5a5271178cd858751
#: ../../topics/cache.txt:956
msgid ""
"Upstream caching is a nice efficiency boost, but there's a danger to it: "
"Many Web pages' contents differ based on authentication and a host of other "
"variables, and cache systems that blindly save pages based purely on URLs "
"could expose incorrect or sensitive data to subsequent visitors to those "
"pages."
msgstr ""

# 820f10087b44457ba6cef5ac455ddbaf
#: ../../topics/cache.txt:961
msgid ""
"For example, say you operate a Web email system, and the contents of the "
"\"inbox\" page obviously depend on which user is logged in. If an ISP "
"blindly cached your site, then the first user who logged in through that ISP "
"would have his user-specific inbox page cached for subsequent visitors to "
"the site. That's not cool."
msgstr ""

# 5b03993c13f64d9782f8258c2e97b5a7
#: ../../topics/cache.txt:967
msgid ""
"Fortunately, HTTP provides a solution to this problem. A number of HTTP "
"headers exist to instruct upstream caches to differ their cache contents "
"depending on designated variables, and to tell caching mechanisms not to "
"cache particular pages. We'll look at some of these headers in the sections "
"that follow."
msgstr ""

# 3d6f5cfd15a84e35858a68e3779eeb79
#: ../../topics/cache.txt:975
msgid "Using Vary headers"
msgstr ""

# 10b66dd115c64d45b0d9dc7bead0b0a2
#: ../../topics/cache.txt:977
msgid ""
"The ``Vary`` header defines which request headers a cache mechanism should "
"take into account when building its cache key. For example, if the contents "
"of a Web page depend on a user's language preference, the page is said to "
"\"vary on language.\""
msgstr ""

# 348aa8c4176f48a38e36d43dff988b14
#: ../../topics/cache.txt:986
msgid ""
"By default, Django's cache system creates its cache keys using the requested "
"path and query -- e.g., ``\"/stories/2005/?order_by=author\"``. This means "
"every request to that URL will use the same cached version, regardless of "
"user-agent differences such as cookies or language preferences. However, if "
"this page produces different content based on some difference in request "
"headers -- such as a cookie, or a language, or a user-agent -- you'll need "
"to use the ``Vary`` header to tell caching mechanisms that the page output "
"depends on those things."
msgstr ""

# 7c87e76915bf48d080a6589927271097
#: ../../topics/cache.txt:994
msgid ""
"To do this in Django, use the convenient ``vary_on_headers`` view decorator, "
"like so::"
msgstr ""

# f073734815ab42188095e705f199d1dc
#: ../../topics/cache.txt:1003
msgid ""
"In this case, a caching mechanism (such as Django's own cache middleware) "
"will cache a separate version of the page for each unique user-agent."
msgstr ""

# c75dc1a8ed504fdaba5ac8419ff9de54
#: ../../topics/cache.txt:1006
msgid ""
"The advantage to using the ``vary_on_headers`` decorator rather than "
"manually setting the ``Vary`` header (using something like ``response"
"['Vary'] = 'user-agent'``) is that the decorator *adds* to the ``Vary`` "
"header (which may already exist), rather than setting it from scratch and "
"potentially overriding anything that was already in there."
msgstr ""

# 31c35d83573a441c9383c6d0e521bda9
#: ../../topics/cache.txt:1012
msgid "You can pass multiple headers to ``vary_on_headers()``::"
msgstr ""

# 89cad02c5bc54d2a8b7d3a0eddbfde9a
#: ../../topics/cache.txt:1018
msgid ""
"This tells upstream caches to vary on *both*, which means each combination "
"of user-agent and cookie will get its own cache value. For example, a "
"request with the user-agent ``Mozilla`` and the cookie value ``foo=bar`` "
"will be considered different from a request with the user-agent ``Mozilla`` "
"and the cookie value ``foo=ham``."
msgstr ""

# 94ba731b0e47402387733fe4924c9c6e
#: ../../topics/cache.txt:1024
msgid ""
"Because varying on cookie is so common, there's a ``vary_on_cookie`` "
"decorator. These two views are equivalent::"
msgstr ""

# 839bcfe2ea8842aa96634f7b88a1919a
#: ../../topics/cache.txt:1035
msgid ""
"The headers you pass to ``vary_on_headers`` are not case sensitive; ``\"User-"
"Agent\"`` is the same thing as ``\"user-agent\"``."
msgstr ""

# 4c7ff54c10ac43fc9477e6dd0ff707f7
#: ../../topics/cache.txt:1038
msgid ""
"You can also use a helper function, ``django.utils.cache."
"patch_vary_headers``, directly. This function sets, or adds to, the ``Vary "
"header``. For example::"
msgstr ""

# 8d4a2d0f7c0d46bd88a43a5b368d2524
#: ../../topics/cache.txt:1049
msgid ""
"``patch_vary_headers`` takes an :class:`~django.http.HttpResponse` instance "
"as its first argument and a list/tuple of case-insensitive header names as "
"its second argument."
msgstr ""

# ede94fbbc8cf4d6cbcf8aae493879bd3
#: ../../topics/cache.txt:1053
msgid "For more on Vary headers, see the `official Vary spec`_."
msgstr ""

# f10272f014324c8aae44786f2c313fd1
#: ../../topics/cache.txt:1058
msgid "Controlling cache: Using other headers"
msgstr ""

# bbec76a818cb4ee7a03e3f5e71c517f8
#: ../../topics/cache.txt:1060
msgid ""
"Other problems with caching are the privacy of data and the question of "
"where data should be stored in a cascade of caches."
msgstr ""

# 07240cefc7e042bdbd74a6cccf748233
#: ../../topics/cache.txt:1063
msgid ""
"A user usually faces two kinds of caches: his or her own browser cache (a "
"private cache) and his or her provider's cache (a public cache). A public "
"cache is used by multiple users and controlled by someone else. This poses "
"problems with sensitive data--you don't want, say, your bank account number "
"stored in a public cache. So Web applications need a way to tell caches "
"which data is private and which is public."
msgstr ""

# 06cc2ef82df34d0786460bc1afd3a192
#: ../../topics/cache.txt:1070
msgid ""
"The solution is to indicate a page's cache should be \"private.\" To do this "
"in Django, use the ``cache_control`` view decorator. Example::"
msgstr ""

# d4a5ff64f6e8434fac7c48674171db77
#: ../../topics/cache.txt:1079
msgid ""
"This decorator takes care of sending out the appropriate HTTP header behind "
"the scenes."
msgstr ""

# b069d24c0f4d4e1caa9f377640e53124
#: ../../topics/cache.txt:1082
msgid ""
"Note that the cache control settings \"private\" and \"public\" are mutually "
"exclusive. The decorator ensures that the \"public\" directive is removed if "
"\"private\" should be set (and vice versa). An example use of the two "
"directives would be a blog site that offers both private and public entries. "
"Public entries may be cached on any shared cache. The following code uses "
"``patch_cache_control``, the manual way to modify the cache control header "
"(it is internally called by the ``cache_control`` decorator)::"
msgstr ""

# 69a4d8ef11d943aa899edf9d020011bc
#: ../../topics/cache.txt:1104
msgid ""
"There are a few other ways to control cache parameters. For example, HTTP "
"allows applications to do the following:"
msgstr ""

# 4b07691de08e451caeaba47080c112a7
#: ../../topics/cache.txt:1107
msgid "Define the maximum time a page should be cached."
msgstr ""

# 1948fc6622cd49699481af05cc1393fa
#: ../../topics/cache.txt:1109
msgid ""
"Specify whether a cache should always check for newer versions, only "
"delivering the cached content when there are no changes. (Some caches might "
"deliver cached content even if the server page changed, simply because the "
"cache copy isn't yet expired.)"
msgstr ""

# 5b06c6ff4fb64d28bfd9145203c1a82f
#: ../../topics/cache.txt:1114
msgid ""
"In Django, use the ``cache_control`` view decorator to specify these cache "
"parameters. In this example, ``cache_control`` tells caches to revalidate "
"the cache on every access and to store cached versions for, at most, 3,600 "
"seconds::"
msgstr ""

# 20ff20874ffa4c8fa01479aa72781c60
#: ../../topics/cache.txt:1124
msgid ""
"Any valid ``Cache-Control`` HTTP directive is valid in ``cache_control()``. "
"Here's a full list:"
msgstr ""

# 559e8c501dfb48b18a471173705ce673
#: ../../topics/cache.txt:1127
msgid "``public=True``"
msgstr ""

# 917147fe7531414daa46ccd29b4f43b2
#: ../../topics/cache.txt:1128
msgid "``private=True``"
msgstr ""

# b2ba489ff66d4c46a98886feb8628e0c
#: ../../topics/cache.txt:1129
msgid "``no_cache=True``"
msgstr ""

# 66dbb1eac677445b9cbb85951e2050a9
#: ../../topics/cache.txt:1130
msgid "``no_transform=True``"
msgstr ""

# a126d3b885e148bfa6206dcd09514dbc
#: ../../topics/cache.txt:1131
msgid "``must_revalidate=True``"
msgstr ""

# 0037ebf2b1394d3199dbe50cea4391dc
#: ../../topics/cache.txt:1132
msgid "``proxy_revalidate=True``"
msgstr ""

# e5087513511b46459ce62c17e6b7a8ce
#: ../../topics/cache.txt:1133
msgid "``max_age=num_seconds``"
msgstr ""

# 4cafe7169b2b42bb850f96bfab37e140
#: ../../topics/cache.txt:1134
msgid "``s_maxage=num_seconds``"
msgstr ""

# 37628c26987e4cb7bb5a18ff7e6763ef
#: ../../topics/cache.txt:1136
msgid ""
"For explanation of Cache-Control HTTP directives, see the `Cache-Control "
"spec`_."
msgstr ""

# a637a35aed8c473fa0b78600362a62b9
#: ../../topics/cache.txt:1138
msgid ""
"(Note that the caching middleware already sets the cache header's max-age "
"with the value of the :setting:`CACHE_MIDDLEWARE_SECONDS` setting. If you "
"use a custom ``max_age`` in a ``cache_control`` decorator, the decorator "
"will take precedence, and the header values will be merged correctly.)"
msgstr ""

# 3b105497127c4bc6948e7b25884dffaa
#: ../../topics/cache.txt:1143
msgid ""
"If you want to use headers to disable caching altogether, ``django.views."
"decorators.cache.never_cache`` is a view decorator that adds headers to "
"ensure the response won't be cached by browsers or other caches. Example::"
msgstr ""

# 09f1408c473249f485352b4e582ba9ac
#: ../../topics/cache.txt:1157
msgid "Other optimizations"
msgstr ""

# f8138fb936ed4dfabbe94af8d875474d
#: ../../topics/cache.txt:1159
msgid ""
"Django comes with a few other pieces of middleware that can help optimize "
"your site's performance:"
msgstr ""

# 324fa41b3c1640d0983e6b0007fbda10
#: ../../topics/cache.txt:1162
msgid ""
"``django.middleware.http.ConditionalGetMiddleware`` adds support for modern "
"browsers to conditionally GET responses based on the ``ETag`` and ``Last-"
"Modified`` headers."
msgstr ""

# 00f4e0cfe59a4e16baf72d4823bbd399
#: ../../topics/cache.txt:1166
msgid ""
":class:`django.middleware.gzip.GZipMiddleware` compresses responses for all "
"modern browsers, saving bandwidth and transfer time."
msgstr ""

# 1467320a2d9f4a4e9860767b9778b146
#: ../../topics/cache.txt:1170
msgid "Order of MIDDLEWARE_CLASSES"
msgstr ""

# b0806ea5ee6a4ec8a7ab469067fdc1f4
#: ../../topics/cache.txt:1172
msgid ""
"If you use caching middleware, it's important to put each half in the right "
"place within the :setting:`MIDDLEWARE_CLASSES` setting. That's because the "
"cache middleware needs to know which headers by which to vary the cache "
"storage. Middleware always adds something to the ``Vary`` response header "
"when it can."
msgstr ""

# 76b328f3800e4bd291788b9d6840f551
#: ../../topics/cache.txt:1177
msgid ""
"``UpdateCacheMiddleware`` runs during the response phase, where middleware "
"is run in reverse order, so an item at the top of the list runs *last* "
"during the response phase. Thus, you need to make sure that "
"``UpdateCacheMiddleware`` appears *before* any other middleware that might "
"add something to the ``Vary`` header. The following middleware modules do so:"
msgstr ""

# 273ca439d3c448dc9d0c7dc1a7b47337
#: ../../topics/cache.txt:1183
msgid "``SessionMiddleware`` adds ``Cookie``"
msgstr ""

# a3af5ef3ad2b48889952f4434c6352ab
#: ../../topics/cache.txt:1184
msgid "``GZipMiddleware`` adds ``Accept-Encoding``"
msgstr ""

# 7bc81dbc436847c5ba739540c8a96bc8
#: ../../topics/cache.txt:1185
msgid "``LocaleMiddleware`` adds ``Accept-Language``"
msgstr ""

# 01f70c262ee34121855751d89cc5bdb3
#: ../../topics/cache.txt:1187
msgid ""
"``FetchFromCacheMiddleware``, on the other hand, runs during the request "
"phase, where middleware is applied first-to-last, so an item at the top of "
"the list runs *first* during the request phase. The "
"``FetchFromCacheMiddleware`` also needs to run after other middleware "
"updates the ``Vary`` header, so ``FetchFromCacheMiddleware`` must be *after* "
"any item that does so."
msgstr ""
