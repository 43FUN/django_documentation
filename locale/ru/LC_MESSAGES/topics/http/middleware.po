# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2012.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-07-11 11:43+0300\n"
"PO-Revision-Date: 2012-02-15 15:13\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# 417115376353433eb0d09692b1e0c5e0
#: ../../topics/http/middleware.txt:3
msgid "Middleware"
msgstr ""

# 4a27a8d770ed43b7a4df994a590fd6e2
#: ../../topics/http/middleware.txt:5
msgid ""
"Middleware is a framework of hooks into Django's request/response "
"processing. It's a light, low-level \"plugin\" system for globally altering "
"Django's input or output."
msgstr ""

# 5d13896c83b340fa91e4996e17a8d9dd
#: ../../topics/http/middleware.txt:9
msgid ""
"Each middleware component is responsible for doing some specific function. "
"For example, Django includes a middleware component, :class:`~django."
"middleware.transaction.TransactionMiddleware`, that wraps the processing of "
"each HTTP request in a database transaction."
msgstr ""

# 5e8b98e961b24934a7fe7d105101aadc
#: ../../topics/http/middleware.txt:14
msgid ""
"This document explains how middleware works, how you activate middleware, "
"and how to write your own middleware. Django ships with some built-in "
"middleware you can use right out of the box. They're documented in the :doc:"
"`built-in middleware reference </ref/middleware>`."
msgstr ""

# a3d4917dd30a40898417f88e7a4c7137
#: ../../topics/http/middleware.txt:20
msgid "Activating middleware"
msgstr ""

# 4e0960bd92554a6d92e85f9113a44a02
#: ../../topics/http/middleware.txt:22
msgid ""
"To activate a middleware component, add it to the :setting:"
"`MIDDLEWARE_CLASSES` tuple in your Django settings."
msgstr ""

# ff702c496c8547539bdb8da35260497e
#: ../../topics/http/middleware.txt:25
msgid ""
"In :setting:`MIDDLEWARE_CLASSES`, each middleware component is represented "
"by a string: the full Python path to the middleware's class name. For "
"example, here's the default value created by :djadmin:`django-admin.py "
"startproject <startproject>`::"
msgstr ""

# 4d1e962758b14a32b948f4fa03a6ecc0
#: ../../topics/http/middleware.txt:39
msgid ""
"A Django installation doesn't require any middleware — :setting:"
"`MIDDLEWARE_CLASSES` can be empty, if you'd like — but it's strongly "
"suggested that you at least use :class:`~django.middleware.common."
"CommonMiddleware`."
msgstr ""

# 119b053851984d52bdc2246961a9e7da
#: ../../topics/http/middleware.txt:44
msgid ""
"The order in :setting:`MIDDLEWARE_CLASSES` matters because a middleware can "
"depend on other middleware. For instance, :class:`~django.contrib.auth."
"middleware.AuthenticationMiddleware` stores the authenticated user in the "
"session; therefore, it must run after :class:`~django.contrib.sessions."
"middleware.SessionMiddleware`. See :ref:`middleware-ordering` for some "
"common hints about ordering of Django middleware classes."
msgstr ""

# 5cbc54358bf044cbbeebfb64a1fa4198
#: ../../topics/http/middleware.txt:53
msgid "Hooks and application order"
msgstr ""

# f99add29d5cf4c6f98dcebb0a572d5b9
#: ../../topics/http/middleware.txt:55
msgid ""
"During the request phase, before calling the view, Django applies middleware "
"in the order it's defined in :setting:`MIDDLEWARE_CLASSES`, top-down. Two "
"hooks are available:"
msgstr ""

# 880ba98ddb1848fead77fc34143e5069
#: ../../topics/http/middleware.txt:59
msgid ":meth:`process_request`"
msgstr ""

# 21b4d3a7e2d846baa8f35448ffb0c2ef
#: ../../topics/http/middleware.txt:60
msgid ":meth:`process_view`"
msgstr ""

# b131a3fcec9e4ec5bfa20e3dabfc9ebc
#: ../../topics/http/middleware.txt:62
msgid ""
"During the response phase, after calling the view, middleware are applied in "
"reverse order, from the bottom up. Three hooks are available:"
msgstr ""

# 1c4ed4afe46a43279dd5030d947fd2ec
#: ../../topics/http/middleware.txt:65
msgid ":meth:`process_exception` (only if the view raised an exception)"
msgstr ""

# 1a1b3cdb81a541639d656a3d34107a77
#: ../../topics/http/middleware.txt:66
msgid ":meth:`process_template_response` (only for template responses)"
msgstr ""

# 4a9f3567893f49389a4e23033878f834
#: ../../topics/http/middleware.txt:67
msgid ":meth:`process_response`"
msgstr ""

# a2e56d2611b24a8388f56171cbaa9e99
#: ../../topics/http/middleware.txt:74
msgid ""
"If you prefer, you can also think of it like an onion: each middleware class "
"is a \"layer\" that wraps the view."
msgstr ""

# 701b67bbff604970b3884769778fbe0b
#: ../../topics/http/middleware.txt:77
msgid "The behavior of each hook is described below."
msgstr ""

# 4103ae15c4df4e579f0b56cfbc38613b
#: ../../topics/http/middleware.txt:80
msgid "Writing your own middleware"
msgstr ""

# 0a668593921e4ab5b2b70b29bb6bc5de
#: ../../topics/http/middleware.txt:82
msgid ""
"Writing your own middleware is easy. Each middleware component is a single "
"Python class that defines one or more of the following methods:"
msgstr ""

# a4b71a34535c4134b7007005b28ded88
#: ../../topics/http/middleware.txt:88
msgid "``process_request``"
msgstr ""

# 571bf4c2ebdc4bb686a5cb889de96f7f
#: ../../topics/http/middleware.txt:92
msgid "``request`` is an :class:`~django.http.HttpRequest` object."
msgstr ""

# 398a6b7bda154d639f43f9c9f08240a2
#: ../../topics/http/middleware.txt:94
msgid ""
"``process_request()`` is called on each request, before Django decides which "
"view to execute."
msgstr ""

# 6cd3db7186f041af846d342f015b15a3
#: ../../topics/http/middleware.txt:97
msgid ""
"It should return either ``None`` or an :class:`~django.http.HttpResponse` "
"object. If it returns ``None``, Django will continue processing this "
"request, executing any other ``process_request()`` middleware, then, "
"``process_view()`` middleware, and finally, the appropriate view. If it "
"returns an :class:`~django.http.HttpResponse` object, Django won't bother "
"calling any other request, view or exception middleware, or the appropriate "
"view; it'll apply response middleware to that :class:`~django.http."
"HttpResponse`, and return the result."
msgstr ""

# f61cc5c1a2104797a18a8efcd1a96723
#: ../../topics/http/middleware.txt:109
msgid "``process_view``"
msgstr ""

# 475cd1b6909d48f9a507d6fc5b696566
#: ../../topics/http/middleware.txt:113
msgid ""
"``request`` is an :class:`~django.http.HttpRequest` object. ``view_func`` is "
"the Python function that Django is about to use. (It's the actual function "
"object, not the name of the function as a string.) ``view_args`` is a list "
"of positional arguments that will be passed to the view, and ``view_kwargs`` "
"is a dictionary of keyword arguments that will be passed to the view. "
"Neither ``view_args`` nor ``view_kwargs`` include the first view argument "
"(``request``)."
msgstr ""

# 5b64a357145d45a0a8314e4910f66464
#: ../../topics/http/middleware.txt:121
msgid "``process_view()`` is called just before Django calls the view."
msgstr ""

# 1c7c872a3c67466c951a3191d8cee89b
#: ../../topics/http/middleware.txt:123
msgid ""
"It should return either ``None`` or an :class:`~django.http.HttpResponse` "
"object. If it returns ``None``, Django will continue processing this "
"request, executing any other ``process_view()`` middleware and, then, the "
"appropriate view. If it returns an :class:`~django.http.HttpResponse` "
"object, Django won't bother calling any other view or exception middleware, "
"or the appropriate view; it'll apply response middleware to that :class:"
"`~django.http.HttpResponse`, and return the result."
msgstr ""

# a0d78985134941b1a3612a92bfe9f317
#: ../../topics/http/middleware.txt:133
msgid ""
"Accessing :attr:`request.POST <django.http.HttpRequest.POST>` or :attr:"
"`request.REQUEST <django.http.HttpRequest.REQUEST>` inside middleware from "
"``process_request`` or ``process_view`` will prevent any view running after "
"the middleware from being able to :ref:`modify the upload handlers for the "
"request <modifying_upload_handlers_on_the_fly>`, and should normally be "
"avoided."
msgstr ""

# 11bb5a5222894158b83f63a0f8b22440
#: ../../topics/http/middleware.txt:140
msgid ""
"The :class:`~django.middleware.csrf.CsrfViewMiddleware` class can be "
"considered an exception, as it provides the :func:`~django.views.decorators."
"csrf.csrf_exempt` and :func:`~django.views.decorators.csrf.csrf_protect` "
"decorators which allow views to explicitly control at what point the CSRF "
"validation should occur."
msgstr ""

# 8b8cae5546f7425badc2700185f17f0e
#: ../../topics/http/middleware.txt:149
msgid "``process_template_response``"
msgstr ""

# a59093f9028945eda5948790286161ba
#: ../../topics/http/middleware.txt:153
msgid ""
"``request`` is an :class:`~django.http.HttpRequest` object. ``response`` is "
"the :class:`~django.template.response.TemplateResponse` object (or "
"equivalent) returned by a Django view or by a middleware."
msgstr ""

# 28f0d68e59f84c3aae510249c0e9f427
#: ../../topics/http/middleware.txt:157
msgid ""
"``process_template_response()`` is called just after the view has finished "
"executing, if the response instance has a ``render()`` method, indicating "
"that it is a :class:`~django.template.response.TemplateResponse` or "
"equivalent."
msgstr ""

# b62486fd3d8d48d4a3a6e539f14b7a75
#: ../../topics/http/middleware.txt:161
msgid ""
"It must return a response object that implements a ``render`` method. It "
"could alter the given ``response`` by changing ``response.template_name`` "
"and ``response.context_data``, or it could create and return a brand-new :"
"class:`~django.template.response.TemplateResponse` or equivalent."
msgstr ""

# fe08a4cc9cf649638d1a70ba90436f42
#: ../../topics/http/middleware.txt:166
msgid ""
"You don't need to explicitly render responses -- responses will be "
"automatically rendered once all template response middleware has been called."
msgstr ""

# 5841a4e9fb3644bfb86754aea7dbef79
#: ../../topics/http/middleware.txt:170
msgid ""
"Middleware are run in reverse order during the response phase, which "
"includes ``process_template_response()``."
msgstr ""

# e0b0cfa902b24e57be40f2f876702552
#: ../../topics/http/middleware.txt:176
msgid "``process_response``"
msgstr ""

# 46033949974b4bc6b7fc72446d4e57d4
#: ../../topics/http/middleware.txt:180
msgid ""
"``request`` is an :class:`~django.http.HttpRequest` object. ``response`` is "
"the :class:`~django.http.HttpResponse` or :class:`~django.http."
"StreamingHttpResponse` object returned by a Django view or by a middleware."
msgstr ""

# e42c457e0516472cb11eeb76e467e5a2
#: ../../topics/http/middleware.txt:185
msgid ""
"``process_response()`` is called on all responses before they're returned to "
"the browser."
msgstr ""

# e19e3fa65eca422e986d722f3e8fbde8
#: ../../topics/http/middleware.txt:188
msgid ""
"It must return an :class:`~django.http.HttpResponse` or :class:`~django.http."
"StreamingHttpResponse` object. It could alter the given ``response``, or it "
"could create and return a brand-new :class:`~django.http.HttpResponse` or :"
"class:`~django.http.StreamingHttpResponse`."
msgstr ""

# e46bf4fa509d4c6ea0bea80acc7d39d5
#: ../../topics/http/middleware.txt:194
msgid ""
"Unlike the ``process_request()`` and ``process_view()`` methods, the "
"``process_response()`` method is always called, even if the "
"``process_request()`` and ``process_view()`` methods of the same middleware "
"class were skipped (because an earlier middleware method returned an :class:"
"`~django.http.HttpResponse`). In particular, this means that your "
"``process_response()`` method cannot rely on setup done in "
"``process_request()``."
msgstr ""

# dd5f061962d8464b8a84a00c8ee6c099
#: ../../topics/http/middleware.txt:202
msgid ""
"Finally, remember that during the response phase, middleware are applied in "
"reverse order, from the bottom up. This means classes defined at the end of :"
"setting:`MIDDLEWARE_CLASSES` will be run first."
msgstr ""

# 334243e70cbc4f458ee50cbb3e3d4798
#: ../../topics/http/middleware.txt:207
msgid "Dealing with streaming responses"
msgstr ""

# 79205467a94e484a9e33de5b9ffe5497
#: ../../topics/http/middleware.txt:209
msgid ""
"Unlike :class:`~django.http.HttpResponse`, :class:`~django.http."
"StreamingHttpResponse` does not have a ``content`` attribute. As a result, "
"middleware can no longer assume that all responses will have a ``content`` "
"attribute. If they need access to the content, they must test for streaming "
"responses and adjust their behavior accordingly::"
msgstr ""

# da146a7f1e3e444d939237c57e9fee36
#: ../../topics/http/middleware.txt:222
msgid ""
"``streaming_content`` should be assumed to be too large to hold in memory. "
"Response middleware may wrap it in a new generator, but must not consume it. "
"Wrapping is typically implemented as follows::"
msgstr ""

# 40fa93b90d5d45faa019d5b954e44a8f
#: ../../topics/http/middleware.txt:233
msgid "``process_exception``"
msgstr ""

# ce62b3c3172946bfbcb4250d33663230
#: ../../topics/http/middleware.txt:237
msgid ""
"``request`` is an :class:`~django.http.HttpRequest` object. ``exception`` is "
"an ``Exception`` object raised by the view function."
msgstr ""

# e668d0901692409b9df9c9058801267f
#: ../../topics/http/middleware.txt:240
msgid ""
"Django calls ``process_exception()`` when a view raises an exception. "
"``process_exception()`` should return either ``None`` or an :class:`~django."
"http.HttpResponse` object. If it returns an :class:`~django.http."
"HttpResponse` object, the template response and response middleware will be "
"applied, and the resulting response returned to the browser. Otherwise, "
"default exception handling kicks in."
msgstr ""

# 1e291cb311d44047919954af42128bf0
#: ../../topics/http/middleware.txt:247
msgid ""
"Again, middleware are run in reverse order during the response phase, which "
"includes ``process_exception``. If an exception middleware returns a "
"response, the middleware classes above that middleware will not be called at "
"all."
msgstr ""

# 4ab431f1159e4453b51ef2c3b635ee6a
#: ../../topics/http/middleware.txt:252
msgid "``__init__``"
msgstr ""

# 2aea601c51d146afb739b9130e161b1b
#: ../../topics/http/middleware.txt:254
msgid ""
"Most middleware classes won't need an initializer since middleware classes "
"are essentially placeholders for the ``process_*`` methods. If you do need "
"some global state you may use ``__init__`` to set up. However, keep in mind "
"a couple of caveats:"
msgstr ""

# 275eb6f469f34bc1a52589963edc28d5
#: ../../topics/http/middleware.txt:259
msgid ""
"Django initializes your middleware without any arguments, so you can't "
"define ``__init__`` as requiring any arguments."
msgstr ""

# ab80e1bdf7af4ad19af38aaca25afe9b
#: ../../topics/http/middleware.txt:262
msgid ""
"Unlike the ``process_*`` methods which get called once per request, "
"``__init__`` gets called only *once*, when the Web server responds to the "
"first request."
msgstr ""

# 5d4b468fa68e4ab9b4f7d016f6a5e6bf
#: ../../topics/http/middleware.txt:267
msgid "Marking middleware as unused"
msgstr ""

# 77683dd6ec98441d8c4007d3f18810c8
#: ../../topics/http/middleware.txt:269
msgid ""
"It's sometimes useful to determine at run-time whether a piece of middleware "
"should be used. In these cases, your middleware's ``__init__`` method may "
"raise :exc:`django.core.exceptions.MiddlewareNotUsed`. Django will then "
"remove that piece of middleware from the middleware process."
msgstr ""

# fd06570ca7074d8cb336176101cd8e0b
#: ../../topics/http/middleware.txt:275
msgid "Guidelines"
msgstr ""

# 887504fc929d431e9ce737124c2c2012
#: ../../topics/http/middleware.txt:277
msgid "Middleware classes don't have to subclass anything."
msgstr ""

# 823ac78eb8ea4cd9a43a2dd86d9cf735
#: ../../topics/http/middleware.txt:279
msgid ""
"The middleware class can live anywhere on your Python path. All Django cares "
"about is that the :setting:`MIDDLEWARE_CLASSES` setting includes the path to "
"it."
msgstr ""

# edc413f69b2e40fb80b878dcf877dc30
#: ../../topics/http/middleware.txt:283
msgid ""
"Feel free to look at :doc:`Django's available middleware </ref/middleware>` "
"for examples."
msgstr ""

# 19d38223e5ce43a4873087b7d591b808
#: ../../topics/http/middleware.txt:286
msgid ""
"If you write a middleware component that you think would be useful to other "
"people, contribute to the community! :doc:`Let us know </internals/"
"contributing/index>`, and we'll consider adding it to Django."
msgstr ""
