# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2012.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-02-27 00:21\n"
"PO-Revision-Date: 2012-02-15 15:13\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# 417115376353433eb0d09692b1e0c5e0
#: ../../topics/http/middleware.txt:3
msgid "Middleware"
msgstr ""

# 7b11d7bef575465d973abf99a09782c3
#: ../../topics/http/middleware.txt:5
msgid ""
"Middleware is a framework of hooks into Django's request/response "
"processing. It's a light, low-level \"plugin\" system for globally altering "
"Django's input or output."
msgstr ""

# a17e566fa4d24de7ad6d6b344a79e96b
#: ../../topics/http/middleware.txt:9
msgid ""
"Each middleware component is responsible for doing some specific function. "
"For example, Django includes a middleware component, :class:`~django."
"middleware.transaction.TransactionMiddleware`, that wraps the processing of "
"each HTTP request in a database transaction."
msgstr ""

# b1c7554d94fa4825bb401d89e149fbbe
#: ../../topics/http/middleware.txt:14
msgid ""
"This document explains how middleware works, how you activate middleware, "
"and how to write your own middleware. Django ships with some built-in "
"middleware you can use right out of the box. They're documented in the :doc:"
"`built-in middleware reference </ref/middleware>`."
msgstr ""

# a3d4917dd30a40898417f88e7a4c7137
#: ../../topics/http/middleware.txt:20
msgid "Activating middleware"
msgstr ""

# 326246ee51064a92b9b237d196c1e24b
#: ../../topics/http/middleware.txt:22
msgid ""
"To activate a middleware component, add it to the :setting:"
"`MIDDLEWARE_CLASSES` tuple in your Django settings."
msgstr ""

# 7e5784d93188415fbcace9f93ffdcdb1
#: ../../topics/http/middleware.txt:25
msgid ""
"In :setting:`MIDDLEWARE_CLASSES`, each middleware component is represented "
"by a string: the full Python path to the middleware's class name. For "
"example, here's the default value created by :djadmin:`django-admin.py "
"startproject <startproject>`::"
msgstr ""

# b0bcbcf556484c4db1f6f4e0222889a6
#: ../../topics/http/middleware.txt:38
msgid ""
"A Django installation doesn't require any middleware — :setting:"
"`MIDDLEWARE_CLASSES` can be empty, if you'd like — but it's strongly "
"suggested that you at least use :class:`~django.middleware.common."
"CommonMiddleware`."
msgstr ""

# 1f225fc6b93045679d5a3dba0a420464
#: ../../topics/http/middleware.txt:43
msgid ""
"The order in :setting:`MIDDLEWARE_CLASSES` matters because a middleware can "
"depend on other middleware. For instance, :class:`~django.contrib.auth."
"middleware.AuthenticationMiddleware` stores the authenticated user in the "
"session; therefore, it must run after :class:`~django.contrib.sessions."
"middleware.SessionMiddleware`."
msgstr ""

# 3241884bf9e14ae593ba65f7d1a817c1
#: ../../topics/http/middleware.txt:50
msgid "Hooks and application order"
msgstr ""

# 653ee826949b47429d1dc8e9c9caba44
#: ../../topics/http/middleware.txt:52
msgid ""
"During the request phase, before calling the view, Django applies middleware "
"in the order it's defined in :setting:`MIDDLEWARE_CLASSES`, top-down. Two "
"hooks are available:"
msgstr ""

# f6334c227d0e462d8eb6f53228a42f6f
#: ../../topics/http/middleware.txt:56
msgid ":meth:`process_request`"
msgstr ""

# 88537b1fb14f4753a0f2887cbf8d0558
#: ../../topics/http/middleware.txt:57
msgid ":meth:`process_view`"
msgstr ""

# 14e735682f1d4be1b9e0eed335c7c4f3
#: ../../topics/http/middleware.txt:59
msgid ""
"During the response phase, after calling the view, middleware are applied in "
"reverse order, from the bottom up. Three hooks are available:"
msgstr ""

# d8d75abe9a634ddb9a21281ca370951d
#: ../../topics/http/middleware.txt:62
msgid ":meth:`process_exception` (only if the view raised an exception)"
msgstr ""

# 3351a194993e43a3bc2c41acf46a2b20
#: ../../topics/http/middleware.txt:63
msgid ":meth:`process_template_response` (only for template responses)"
msgstr ""

# e6481c991e5b4fe6866929dfe6afad68
#: ../../topics/http/middleware.txt:64
msgid ":meth:`process_response`"
msgstr ""

# 6f90eb7e6eb146428a616f929ede16d1
#: ../../topics/http/middleware.txt:71
msgid ""
"If you prefer, you can also think of it like an onion: each middleware class "
"is a \"layer\" that wraps the view."
msgstr ""

# ee8939487be240a6ae9c1a6bc44188f5
#: ../../topics/http/middleware.txt:74
msgid "The behavior of each hook is described below."
msgstr ""

# 4103ae15c4df4e579f0b56cfbc38613b
#: ../../topics/http/middleware.txt:77
msgid "Writing your own middleware"
msgstr ""

# 0a668593921e4ab5b2b70b29bb6bc5de
#: ../../topics/http/middleware.txt:79
msgid ""
"Writing your own middleware is easy. Each middleware component is a single "
"Python class that defines one or more of the following methods:"
msgstr ""

# a4b71a34535c4134b7007005b28ded88
#: ../../topics/http/middleware.txt:85
msgid "``process_request``"
msgstr ""

# 8a12d5ff933048d79fa0bc406de213a3
#: ../../topics/http/middleware.txt:89
msgid "``request`` is an :class:`~django.http.HttpRequest` object."
msgstr ""

# 1385f0dbbd90408b8aa0592f8f454c87
#: ../../topics/http/middleware.txt:91
msgid ""
"``process_request()`` is called on each request, before Django decides which "
"view to execute."
msgstr ""

# e1c762ca810f4ed3a8c15a7eacc59519
#: ../../topics/http/middleware.txt:94
msgid ""
"It should return either ``None`` or an :class:`~django.http.HttpResponse` "
"object. If it returns ``None``, Django will continue processing this "
"request, executing any other ``process_request()`` middleware, then, "
"``process_view()`` middleware, and finally, the appropriate view. If it "
"returns an :class:`~django.http.HttpResponse` object, Django won't bother "
"calling any other request, view or exception middleware, or the appropriate "
"view; it'll apply response middleware to that :class:`~django.http."
"HttpResponse`, and return the result."
msgstr ""

# f61cc5c1a2104797a18a8efcd1a96723
#: ../../topics/http/middleware.txt:106
msgid "``process_view``"
msgstr ""

# 475cd1b6909d48f9a507d6fc5b696566
#: ../../topics/http/middleware.txt:110
msgid ""
"``request`` is an :class:`~django.http.HttpRequest` object. ``view_func`` is "
"the Python function that Django is about to use. (It's the actual function "
"object, not the name of the function as a string.) ``view_args`` is a list "
"of positional arguments that will be passed to the view, and ``view_kwargs`` "
"is a dictionary of keyword arguments that will be passed to the view. "
"Neither ``view_args`` nor ``view_kwargs`` include the first view argument "
"(``request``)."
msgstr ""

# a30aeb4cd6454d759a4d61fe18f5e560
#: ../../topics/http/middleware.txt:118
msgid "``process_view()`` is called just before Django calls the view."
msgstr ""

# 34b9db1431fc495d93186952cd773ff9
#: ../../topics/http/middleware.txt:120
msgid ""
"It should return either ``None`` or an :class:`~django.http.HttpResponse` "
"object. If it returns ``None``, Django will continue processing this "
"request, executing any other ``process_view()`` middleware and, then, the "
"appropriate view. If it returns an :class:`~django.http.HttpResponse` "
"object, Django won't bother calling any other view or exception middleware, "
"or the appropriate view; it'll apply response middleware to that :class:"
"`~django.http.HttpResponse`, and return the result."
msgstr ""

# a0d78985134941b1a3612a92bfe9f317
#: ../../topics/http/middleware.txt:130
msgid ""
"Accessing :attr:`request.POST <django.http.HttpRequest.POST>` or :attr:"
"`request.REQUEST <django.http.HttpRequest.REQUEST>` inside middleware from "
"``process_request`` or ``process_view`` will prevent any view running after "
"the middleware from being able to :ref:`modify the upload handlers for the "
"request <modifying_upload_handlers_on_the_fly>`, and should normally be "
"avoided."
msgstr ""

# 11bb5a5222894158b83f63a0f8b22440
#: ../../topics/http/middleware.txt:137
msgid ""
"The :class:`~django.middleware.csrf.CsrfViewMiddleware` class can be "
"considered an exception, as it provides the :func:`~django.views.decorators."
"csrf.csrf_exempt` and :func:`~django.views.decorators.csrf.csrf_protect` "
"decorators which allow views to explicitly control at what point the CSRF "
"validation should occur."
msgstr ""

# 8b8cae5546f7425badc2700185f17f0e
#: ../../topics/http/middleware.txt:146
msgid "``process_template_response``"
msgstr ""

# 07d7ab07940d4ef7816136cdee920af4
#: ../../topics/http/middleware.txt:150
msgid ""
"``request`` is an :class:`~django.http.HttpRequest` object. ``response`` is "
"the :class:`~django.template.response.TemplateResponse` object (or "
"equivalent) returned by a Django view or by a middleware."
msgstr ""

# bd11512cf0a2447aac677bfcb496bc5c
#: ../../topics/http/middleware.txt:154
msgid ""
"``process_template_response()`` is called just after the view has finished "
"executing, if the response instance has a ``render()`` method, indicating "
"that it is a :class:`~django.template.response.TemplateResponse` or "
"equivalent."
msgstr ""

# 5367671e728d4805af94f8e871015a8e
#: ../../topics/http/middleware.txt:158
msgid ""
"It must return a response object that implements a ``render`` method. It "
"could alter the given ``response`` by changing ``response.template_name`` "
"and ``response.context_data``, or it could create and return a brand-new :"
"class:`~django.template.response.TemplateResponse` or equivalent."
msgstr ""

# fe08a4cc9cf649638d1a70ba90436f42
#: ../../topics/http/middleware.txt:163
msgid ""
"You don't need to explicitly render responses -- responses will be "
"automatically rendered once all template response middleware has been called."
msgstr ""

# e0b0b3b63f3c4756bd3af820f3472739
#: ../../topics/http/middleware.txt:167
msgid ""
"Middleware are run in reverse order during the response phase, which "
"includes ``process_template_response()``."
msgstr ""

# e0b0cfa902b24e57be40f2f876702552
#: ../../topics/http/middleware.txt:173
msgid "``process_response``"
msgstr ""

# fb50d19e7d38406ea25580ee2ac8e3cd
#: ../../topics/http/middleware.txt:177
msgid ""
"``request`` is an :class:`~django.http.HttpRequest` object. ``response`` is "
"the :class:`~django.http.HttpResponse` or :class:`~django.http."
"StreamingHttpResponse` object returned by a Django view or by a middleware."
msgstr ""

# 9b0df8775698431bbd2ce7a02007b7e9
#: ../../topics/http/middleware.txt:182
msgid ""
"``process_response()`` is called on all responses before they're returned to "
"the browser."
msgstr ""

# e9fa9656e3e846be925fc7943d76f2da
#: ../../topics/http/middleware.txt:185
msgid ""
"It must return an :class:`~django.http.HttpResponse` or :class:`~django.http."
"StreamingHttpResponse` object. It could alter the given ``response``, or it "
"could create and return a brand-new :class:`~django.http.HttpResponse` or :"
"class:`~django.http.StreamingHttpResponse`."
msgstr ""

# abc800023fb047c68b86c3c1e406b3f7
#: ../../topics/http/middleware.txt:191
msgid ""
"Unlike the ``process_request()`` and ``process_view()`` methods, the "
"``process_response()`` method is always called, even if the ``process_request"
"()`` and ``process_view()`` methods of the same middleware class were "
"skipped (because an earlier middleware method returned an :class:`~django."
"http.HttpResponse`). In particular, this means that your ``process_response()"
"`` method cannot rely on setup done in ``process_request()``."
msgstr ""

# 9d5b74aa87dd43159e84e8c143943f6e
#: ../../topics/http/middleware.txt:199
msgid ""
"Finally, remember that during the response phase, middleware are applied in "
"reverse order, from the bottom up. This means classes defined at the end of :"
"setting:`MIDDLEWARE_CLASSES` will be run first."
msgstr ""

# eef0e10b9f954bd4b567a4426478f7c0
#: ../../topics/http/middleware.txt:204
msgid "Dealing with streaming responses"
msgstr ""

# 79205467a94e484a9e33de5b9ffe5497
#: ../../topics/http/middleware.txt:210
msgid ""
"Unlike :class:`~django.http.HttpResponse`, :class:`~django.http."
"StreamingHttpResponse` does not have a ``content`` attribute. As a result, "
"middleware can no longer assume that all responses will have a ``content`` "
"attribute. If they need access to the content, they must test for streaming "
"responses and adjust their behavior accordingly::"
msgstr ""

# 9ce1a20123ef486799d32a981b190577
#: ../../topics/http/middleware.txt:223
msgid ""
"``streaming_content`` should be assumed to be too large to hold in memory. "
"Response middleware may wrap it in a new generator, but must not consume it. "
"Wrapping is typically implemented as follows::"
msgstr ""

# 40fa93b90d5d45faa019d5b954e44a8f
#: ../../topics/http/middleware.txt:234
msgid "``process_exception``"
msgstr ""

# ce62b3c3172946bfbcb4250d33663230
#: ../../topics/http/middleware.txt:238
msgid ""
"``request`` is an :class:`~django.http.HttpRequest` object. ``exception`` is "
"an ``Exception`` object raised by the view function."
msgstr ""

# 9cfa75a8bcff4e1e8427048bd9781d2a
#: ../../topics/http/middleware.txt:241
msgid ""
"Django calls ``process_exception()`` when a view raises an exception. "
"``process_exception()`` should return either ``None`` or an :class:`~django."
"http.HttpResponse` object. If it returns an :class:`~django.http."
"HttpResponse` object, the template response and response middleware will be "
"applied, and the resulting response returned to the browser. Otherwise, "
"default exception handling kicks in."
msgstr ""

# 1e291cb311d44047919954af42128bf0
#: ../../topics/http/middleware.txt:248
msgid ""
"Again, middleware are run in reverse order during the response phase, which "
"includes ``process_exception``. If an exception middleware returns a "
"response, the middleware classes above that middleware will not be called at "
"all."
msgstr ""

# 4ab431f1159e4453b51ef2c3b635ee6a
#: ../../topics/http/middleware.txt:253
msgid "``__init__``"
msgstr ""

# 2aea601c51d146afb739b9130e161b1b
#: ../../topics/http/middleware.txt:255
msgid ""
"Most middleware classes won't need an initializer since middleware classes "
"are essentially placeholders for the ``process_*`` methods. If you do need "
"some global state you may use ``__init__`` to set up. However, keep in mind "
"a couple of caveats:"
msgstr ""

# 275eb6f469f34bc1a52589963edc28d5
#: ../../topics/http/middleware.txt:260
msgid ""
"Django initializes your middleware without any arguments, so you can't "
"define ``__init__`` as requiring any arguments."
msgstr ""

# ab80e1bdf7af4ad19af38aaca25afe9b
#: ../../topics/http/middleware.txt:263
msgid ""
"Unlike the ``process_*`` methods which get called once per request, "
"``__init__`` gets called only *once*, when the Web server responds to the "
"first request."
msgstr ""

# 5d4b468fa68e4ab9b4f7d016f6a5e6bf
#: ../../topics/http/middleware.txt:268
msgid "Marking middleware as unused"
msgstr ""

# 95a921180017456c8dfce0876672b286
#: ../../topics/http/middleware.txt:270
msgid ""
"It's sometimes useful to determine at run-time whether a piece of middleware "
"should be used. In these cases, your middleware's ``__init__`` method may "
"raise :exc:`django.core.exceptions.MiddlewareNotUsed`. Django will then "
"remove that piece of middleware from the middleware process."
msgstr ""

# fd06570ca7074d8cb336176101cd8e0b
#: ../../topics/http/middleware.txt:276
msgid "Guidelines"
msgstr ""

# 887504fc929d431e9ce737124c2c2012
#: ../../topics/http/middleware.txt:278
msgid "Middleware classes don't have to subclass anything."
msgstr ""

# 823ac78eb8ea4cd9a43a2dd86d9cf735
#: ../../topics/http/middleware.txt:280
msgid ""
"The middleware class can live anywhere on your Python path. All Django cares "
"about is that the :setting:`MIDDLEWARE_CLASSES` setting includes the path to "
"it."
msgstr ""

# edc413f69b2e40fb80b878dcf877dc30
#: ../../topics/http/middleware.txt:284
msgid ""
"Feel free to look at :doc:`Django's available middleware </ref/middleware>` "
"for examples."
msgstr ""

# 19d38223e5ce43a4873087b7d591b808
#: ../../topics/http/middleware.txt:287
msgid ""
"If you write a middleware component that you think would be useful to other "
"people, contribute to the community! :doc:`Let us know </internals/"
"contributing/index>`, and we'll consider adding it to Django."
msgstr ""
