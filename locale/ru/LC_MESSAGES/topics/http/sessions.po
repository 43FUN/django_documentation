# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated <>, 2012, 2015.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-11-17 10:48+0200\n"
"PO-Revision-Date: 2015-06-24 13:20+0300\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"
"X-Generator: Gtranslator 2.91.6\n"

# 970577d3b33a4885b26865ad0cd95b0f
#: ../../topics/http/sessions.txt:3
msgid "How to use sessions"
msgstr "Как использовать сессию"

# d2170c5c9c9048219edf81b56a9dfe43
#: ../../topics/http/sessions.txt:8
msgid ""
"Django provides full support for anonymous sessions. The session framework "
"lets you store and retrieve arbitrary data on a per-site-visitor basis. It "
"stores data on the server side and abstracts the sending and receiving of "
"cookies. Cookies contain a session ID -- not the data itself (unless you're "
"using the :ref:`cookie based backend<cookie-session-backend>`)."
msgstr ""
"Django полностью поддерживает сессии для анонимных пользователей, позволяет "
"сохранять и получать данные для каждой посетителя сайта. Механизм сессии "
"сохраняет данные на сервере и самостоятельно управляет сессионными куками. "
"Куки содержат ID сессии,а  не сами данные (если только вы не используете :"
"ref:`бэкенд на основе кук<cookie-session-backend>`)."

# 864d301689cd4266961ab37ff7335890
#: ../../topics/http/sessions.txt:15
msgid "Enabling sessions"
msgstr "Активируем сессии"

# 8da6f17455fe47619c60406ab4d54669
#: ../../topics/http/sessions.txt:17
msgid ""
"Sessions are implemented via a piece of :doc:`middleware </ref/middleware>`."
msgstr "Сессии реализованы через :doc:`промежуточный слой </ref/middleware>`."

# e3eb16a3ab8341a59b856887f5d1d64d
#: ../../topics/http/sessions.txt:19
msgid "To enable session functionality, do the following:"
msgstr "Чтобы активировать сессии, выполните следующие действия:"

#: ../../topics/http/sessions.txt:21
msgid ""
"Edit the :setting:`MIDDLEWARE_CLASSES` setting and make sure it contains "
"``'django.contrib.sessions.middleware.SessionMiddleware'``. The default "
"``settings.py`` created by ``django-admin startproject`` has "
"``SessionMiddleware`` activated."
msgstr ""
"Убедитесь что :setting:`MIDDLEWARE_CLASSES` содержит ``'django.contrib."
"sessions.middleware.SessionMiddleware'``. ``settings.py`` по умолчанию, "
"созданный ``django-admin startproject``, уже содержит ``SessionMiddleware``."

# a381ed4eafd74619a3c88e86117772f5
#: ../../topics/http/sessions.txt:26
msgid ""
"If you don't want to use sessions, you might as well remove the "
"``SessionMiddleware`` line from :setting:`MIDDLEWARE_CLASSES` and ``'django."
"contrib.sessions'`` from your :setting:`INSTALLED_APPS`. It'll save you a "
"small bit of overhead."
msgstr ""
"Есди вы не собираетесь использовать сессии, вы можете удалить "
"``SessionMiddleware`` из :setting:`MIDDLEWARE_CLASSES` и ``'django.contrib."
"sessions'`` из :setting:`INSTALLED_APPS`. Это немного повысит "
"производительность."

# 2face02c589243f59adf8a6abb827b32
#: ../../topics/http/sessions.txt:34
msgid "Configuring the session engine"
msgstr "Настройка сессий"

# 6d79db27156f4537a9cf874ec893c2cc
#: ../../topics/http/sessions.txt:36
msgid ""
"By default, Django stores sessions in your database (using the model "
"``django.contrib.sessions.models.Session``). Though this is convenient, in "
"some setups it's faster to store session data elsewhere, so Django can be "
"configured to store session data on your filesystem or in your cache."
msgstr ""
"По умолчанию Django хранит сессии в базе данных (используя модель ``django."
"contrib.sessions.models.Session``). В некоторых случаях лучше хранить данные "
"сессии в других хранилищах, по этому Django позволяет использовать файловую "
"систему или кэш."

# 28aed2b421144c62b2f3af3e5dee6687
#: ../../topics/http/sessions.txt:42
msgid "Using database-backed sessions"
msgstr "Использование базы данных для хранения сессии"

# b2c28646cddc471394931a452c2dfcda
#: ../../topics/http/sessions.txt:44
msgid ""
"If you want to use a database-backed session, you need to add ``'django."
"contrib.sessions'`` to your :setting:`INSTALLED_APPS` setting."
msgstr ""
"Если вы хотите использовать базу данных для хранения сесиии, укажите "
"``'django.contrib.sessions'`` в настройке :setting:`INSTALLED_APPS`."

# 07de45a68a7a49c5b2626fcf6933cbcb
#: ../../topics/http/sessions.txt:47
msgid ""
"Once you have configured your installation, run ``manage.py migrate`` to "
"install the single database table that stores session data."
msgstr ""
"После настройки выполните ``manage.py migrate``, чтобы добавить таблицу в "
"базу данных."

# fcb85f9525fd4ef5b47c4b2b71262d83
#: ../../topics/http/sessions.txt:53
msgid "Using cached sessions"
msgstr "Использование кэша для хранения сессии"

# 5c02889903164c68bb1defb9bd570b73
#: ../../topics/http/sessions.txt:55
msgid ""
"For better performance, you may want to use a cache-based session backend."
msgstr ""
"Для улучшения производительности вы можете использовать кэш для хранения "
"сессии."

# 21bb88f18ea14e68a1b42fbd522729ca
#: ../../topics/http/sessions.txt:57
msgid ""
"To store session data using Django's cache system, you'll first need to make "
"sure you've configured your cache; see the :doc:`cache documentation </"
"topics/cache>` for details."
msgstr ""
"Для этого вы должны настроить кэш, смотрите :doc:`раздел о кэше </topics/"
"cache>`."

# 981c222235274afab8b1e28c1f3f1887
#: ../../topics/http/sessions.txt:63
msgid ""
"You should only use cache-based sessions if you're using the Memcached cache "
"backend. The local-memory cache backend doesn't retain data long enough to "
"be a good choice, and it'll be faster to use file or database sessions "
"directly instead of sending everything through the file or database cache "
"backends. Additionally, the local-memory cache backend is NOT multi-process "
"safe, therefore probably not a good choice for production environments."
msgstr ""
"Вам следует использовать кэш только при использовании Memcached. Кэш в "
"памяти не хранит данные достаточно долго, и лучше использовать файлы или "
"базу данных для сессии, чем каждый раз обращаться к кэшу в файловой системе "
"или базе данных. Также кэш в памяти использует различные экземпляры кэша для "
"разных процессов."

# 75ea202f4c7a4f358e3a3532626ed05c
#: ../../topics/http/sessions.txt:71
msgid ""
"If you have multiple caches defined in :setting:`CACHES`, Django will use "
"the default cache. To use another cache, set :setting:`SESSION_CACHE_ALIAS` "
"to the name of that cache."
msgstr ""
"Если вы указали несколько кэшей в :setting:`CACHES`, Django будет "
"использовать кэш по умолчанию. Чтобы использовать другой кэш, укажите его "
"название в :setting:`SESSION_CACHE_ALIAS`."

# 655b26ea72fa4cfda4f52c0335ed214a
#: ../../topics/http/sessions.txt:75
msgid ""
"Once your cache is configured, you've got two choices for how to store data "
"in the cache:"
msgstr "После настройки кэша у вас есть две опции, как хранить данные в кэше:"

# 17ba7e52e38b486e899d6c39db6a7097
#: ../../topics/http/sessions.txt:78
msgid ""
"Set :setting:`SESSION_ENGINE` to ``\"django.contrib.sessions.backends.cache"
"\"`` for a simple caching session store. Session data will be stored "
"directly in your cache. However, session data may not be persistent: cached "
"data can be evicted if the cache fills up or if the cache server is "
"restarted."
msgstr ""
"Указать ``\"django.contrib.sessions.backends.cache\"`` в :setting:"
"`SESSION_ENGINE`. Данные сессии будут храниться непосредственно в кэше. "
"Однако, данные могут быть удалены при переполнении кэша или перезагрузке "
"сервера кэша."

# 822f6552dda74ff0bfdb77a9db85561b
#: ../../topics/http/sessions.txt:84
msgid ""
"For persistent, cached data, set :setting:`SESSION_ENGINE` to ``\"django."
"contrib.sessions.backends.cached_db\"``. This uses a write-through cache -- "
"every write to the cache will also be written to the database. Session reads "
"only use the database if the data is not already in the cache."
msgstr ""
"Для постоянно хранения закэшированных данных укажите ``\"django.contrib."
"sessions.backends.cached_db\"`` в :setting:`SESSION_ENGINE`. Все записи в "
"кэш будут продублированы в базу данных. База данных будет использоваться, "
"если данные не найдены в кэше."

# 5c73c90dd20e4d12a8c5bf3da1c87266
#: ../../topics/http/sessions.txt:90
msgid ""
"Both session stores are quite fast, but the simple cache is faster because "
"it disregards persistence. In most cases, the ``cached_db`` backend will be "
"fast enough, but if you need that last bit of performance, and are willing "
"to let session data be expunged from time to time, the ``cache`` backend is "
"for you."
msgstr ""
"Оба варианта работают достаточно быстро, но первый немного быстрее. Для "
"большинства случаев ``cached_db`` будет достаточно быстрым, но если "
"производительность для вас важнее, чем надежное хранение сессии, используйте "
"бэкенд ``cache``."

# a5ed9f6bad8d41e4836505d62b3192aa
#: ../../topics/http/sessions.txt:95
msgid ""
"If you use the ``cached_db`` session backend, you also need to follow the "
"configuration instructions for the `using database-backed sessions`_."
msgstr ""
"Если вы используете ``cached_db``, вам необходимо настроить и бэкенд  базы "
"данных."

# 0a83cd55b376440288b92f22d6ca04ed
#: ../../topics/http/sessions.txt:99
msgid "Using file-based sessions"
msgstr "Использование файловой системы для хранения сессии"

# 805b288106af435aad2b171fb3f18870
#: ../../topics/http/sessions.txt:101
msgid ""
"To use file-based sessions, set the :setting:`SESSION_ENGINE` setting to ``"
"\"django.contrib.sessions.backends.file\"``."
msgstr ""
"Чтобы использовать файловую систему, укажите ``\"django.contrib.sessions."
"backends.file\"`` в :setting:`SESSION_ENGINE`."

# 387d7995473249bfaa8dd1d6b622c1f9
#: ../../topics/http/sessions.txt:104
msgid ""
"You might also want to set the :setting:`SESSION_FILE_PATH` setting (which "
"defaults to output from ``tempfile.gettempdir()``, most likely ``/tmp``) to "
"control where Django stores session files. Be sure to check that your Web "
"server has permissions to read and write to this location."
msgstr ""
"Вы также можете указать :setting:`SESSION_FILE_PATH` (по умолчанию "
"``tempfile.gettempdir()``, обычно это ``/tmp``), чтобы указать Django, где "
"сохранять сессионные файлы. Убедитесь, что ваш сервер имеет права на чтение "
"и запись указанного каталога."

# ec6d49c050d14dab948b1e5a2006f153
#: ../../topics/http/sessions.txt:112
msgid "Using cookie-based sessions"
msgstr "Хранение сессии в куках"

# a71aee354b404ba78c0085841f93336f
#: ../../topics/http/sessions.txt:114
msgid ""
"To use cookies-based sessions, set the :setting:`SESSION_ENGINE` setting to "
"``\"django.contrib.sessions.backends.signed_cookies\"``. The session data "
"will be stored using Django's tools for :doc:`cryptographic signing </topics/"
"signing>` and the :setting:`SECRET_KEY` setting."
msgstr ""
"Чтобы хранить сессию в куках, укажите ``\"django.contrib.sessions.backends."
"signed_cookies\"`` в :setting:`SESSION_ENGINE`. Данные сессии будут "
"сохранены в куках, используя :doc:`криптографическую подпись </topics/"
"signing>` и значение :setting:`SECRET_KEY`."

# e4e33c4a7d394892951f30b90445c176
#: ../../topics/http/sessions.txt:121
msgid ""
"It's recommended to leave the :setting:`SESSION_COOKIE_HTTPONLY` setting on "
"``True`` to prevent access to the stored data from JavaScript."
msgstr ""
"Рекомендуем указать ``True`` в :setting:`SESSION_COOKIE_HTTPONLY`, чтобы "
"запретить доступ JavaScript к кукам."

# dc29c0b2da724a54b8a5e6da1293ed86
#: ../../topics/http/sessions.txt:126
msgid ""
"**If the SECRET_KEY is not kept secret and you are using the** :class:"
"`~django.contrib.sessions.serializers.PickleSerializer`, **this can lead to "
"arbitrary remote code execution.**"
msgstr ""
"**Если SECRET_KEY не хранить в безопасности при использовании** :class:"
"`~django.contrib.sessions.serializers.PickleSerializer`, **можно пострадать "
"от атаки удаленного выполнения кода.**"

# d1def1eeef864f1ba07714b6b4d2ca01
#: ../../topics/http/sessions.txt:130
msgid ""
"An attacker in possession of the :setting:`SECRET_KEY` can not only generate "
"falsified session data, which your site will trust, but also remotely "
"execute arbitrary code, as the data is serialized using pickle."
msgstr ""
"Злоумышленник, узнав :setting:`SECRET_KEY`, может не только подделать данные "
"сессии, но и выполнить удаленный код т.к. данные сессии используют "
"``pickle``."

# 963d45f876e541759b9405b6d9e5e86a
#: ../../topics/http/sessions.txt:134
msgid ""
"If you use cookie-based sessions, pay extra care that your secret key is "
"always kept completely secret, for any system which might be remotely "
"accessible."
msgstr ""
"Если вы храните сессию в куках, храните ваш секретный ключ максимально "
"надежно для всех систем, которые используются пользователем."

# 765d44ef14c845b8bec8f40d40222af8
#: ../../topics/http/sessions.txt:138
msgid "**The session data is signed but not encrypted**"
msgstr "**Сессионные данные подписаны, но не закодированы**"

# ac3c5ffc3099406e806349f7c0306e95
#: ../../topics/http/sessions.txt:140
msgid ""
"When using the cookies backend the session data can be read by the client."
msgstr "Клиент может прочитать данные сессии, если вы храните их в куках."

# 88580d3985de4e8ebafcf77e91a2e152
#: ../../topics/http/sessions.txt:142
msgid ""
"A MAC (Message Authentication Code) is used to protect the data against "
"changes by the client, so that the session data will be invalidated when "
"being tampered with. The same invalidation happens if the client storing the "
"cookie (e.g. your user's browser) can't store all of the session cookie and "
"drops data. Even though Django compresses the data, it's still entirely "
"possible to exceed the `common limit of 4096 bytes`_ per cookie."
msgstr ""
"MAC (Message Authentication Code) используется для защиты данных от подделки "
"пользователем. Данные будут недействительными, если пользователь попытается "
"их поменять. Аналогичное происходит, если клиент, который хранит коки "
"(например, браузер пользователя), не может сохранить сессионную куку и "
"удаляет её. Несмотря на то , что Django сжимает данные, вполне возможно "
"превысить `принятый лимит 4096 байтов <http://tools.ietf.org/html/"
"rfc2965#section-5.3>`_ на куку."

# 8babd9d0353d441b9de97e0ffdb67643
#: ../../topics/http/sessions.txt:149
msgid "**No freshness guarantee**"
msgstr "**Актуальность не гарантируется**"

# b5ff074bb3854c1dbaaf7e4de2a0402e
#: ../../topics/http/sessions.txt:151
msgid ""
"Note also that while the MAC can guarantee the authenticity of the data "
"(that it was generated by your site, and not someone else), and the "
"integrity of the data (that it is all there and correct), it cannot "
"guarantee freshness i.e. that you are being sent back the last thing you "
"sent to the client. This means that for some uses of session data, the "
"cookie backend might open you up to `replay attacks`_. Unlike other session "
"backends which keep a server-side record of each session and invalidate it "
"when a user logs out, cookie-based sessions are not invalidated when a user "
"logs out. Thus if an attacker steals a user's cookie, they can use that "
"cookie to login as that user even if the user logs out. Cookies will only be "
"detected as 'stale' if they are older than your :setting:"
"`SESSION_COOKIE_AGE`."
msgstr ""
"Обратите внимание, хотя MAC может гарантировать авторизацию данных (что они "
"были созданы вашим сайтом, а не кем-то другим), и целостность данных (данные "
"не менялись и правильны), он не может гарантировать актуальность, то есть, "
"что полученные данные последние, которые вы отсылали клиенту. Это означает, "
"что при определенном использовании кук для сессии, ваш сайт может быть "
"подвержен `replay атакам <https://en.wikipedia.org/wiki/Replay_attack>`_. В "
"отличии от других бэкендов сессии, которые хранят данные на сервере и "
"очищают их при выходе пользователя(log out), сессия в куках не очищается, "
"когда пользователь выходит. По этому, если атакующий украдет куки "
"пользователя, он может использовать их для входа даже после того, как "
"пользователь вышел с сайта. Куки будут определены как устаревшие, если "
"только они старее чем :setting:`SESSION_COOKIE_AGE`."

# 877067e332ba49499ed9886106965f07
#: ../../topics/http/sessions.txt:164
msgid "**Performance**"
msgstr "**Производительность**"

# 66e767b8fc8e4ab6b19270da57d0b20d
#: ../../topics/http/sessions.txt:166
msgid ""
"Finally, the size of a cookie can have an impact on the `speed of your "
"site`_."
msgstr ""
"Наконец, размер кук может повлиять на `производительность вашего сайта "
"<http://yuiblog.com/blog/2007/03/01/performance-research-part-3/>`_."

# 13ab0d8b75c44e1b9784ebe9712b04fe
#: ../../topics/http/sessions.txt:173
msgid "Using sessions in views"
msgstr "Использование сессии в представлениях"

# ef8b221dd11c4c6190ded0c867b57e7c
#: ../../topics/http/sessions.txt:175
msgid ""
"When ``SessionMiddleware`` is activated, each :class:`~django.http."
"HttpRequest` object -- the first argument to any Django view function -- "
"will have a ``session`` attribute, which is a dictionary-like object."
msgstr ""
"Когда ``SessionMiddleware`` активный, каждый объект :class:`~django.http."
"HttpRequest` -- первый аргумент представления в Django -- будет содержать "
"атрибут ``session``, который является объектом с интерфейсом словаря."

# e4c121c3c3f24fb3b13826454803afbd
#: ../../topics/http/sessions.txt:179
msgid ""
"You can read it and write to ``request.session`` at any point in your view. "
"You can edit it multiple times."
msgstr ""
"Вы можете читать и менять ``request.session`` в любом месте вашего "
"представления множество раз."

# 67a9e8d90959478a929deae5617ead30
#: ../../topics/http/sessions.txt:184
msgid ""
"This is the base class for all session objects. It has the following "
"standard dictionary methods:"
msgstr ""
"Это базовый класс для всех объектов сессии. Он предоставляет набор "
"стандартных методов словаря:"

# 3bfee16658294a44bcab35d7f5815b1f
#: ../../topics/http/sessions.txt:189
msgid "Example: ``fav_color = request.session['fav_color']``"
msgstr "Например: ``fav_color = request.session['fav_color']``"

# d0c9eda3986b45ca8c72f746fcc39f3a
#: ../../topics/http/sessions.txt:193
msgid "Example: ``request.session['fav_color'] = 'blue'``"
msgstr "Например: ``request.session['fav_color'] = 'blue'``"

# 36f35854ef5e4137a412901815b1a6c9
#: ../../topics/http/sessions.txt:197
msgid ""
"Example: ``del request.session['fav_color']``. This raises ``KeyError`` if "
"the given ``key`` isn't already in the session."
msgstr ""
"Например: ``del request.session['fav_color']``. Вызовет ``KeyError``, если "
"``key`` еще не в сессии."

# 535d1742591c46d2aa9097f7bdd173b6
#: ../../topics/http/sessions.txt:202
msgid "Example: ``'fav_color' in request.session``"
msgstr "Например: ``'fav_color' in request.session``"

# ac83c967b4dd4918b7e50785e53ec27e
#: ../../topics/http/sessions.txt:206
msgid "Example: ``fav_color = request.session.get('fav_color', 'red')``"
msgstr "Например: ``fav_color = request.session.get('fav_color', 'red')``"

# b7477f9200f7482798479175e49e824e
#: ../../topics/http/sessions.txt:210
#, fuzzy
msgid "Example: ``fav_color = request.session.pop('fav_color', 'blue')``"
msgstr "Например: ``fav_color = request.session.pop('fav_color')``"

# c5c489a63e4d4ff79c8e8691acb1d969
#: ../../topics/http/sessions.txt:220
msgid "It also has these methods:"
msgstr "Также содержит следующие методы:"

#: ../../topics/http/sessions.txt:224
#, fuzzy
msgid ""
"Deletes the current session data from the session and deletes the session "
"cookie. This is used if you want to ensure that the previous session data "
"can't be accessed again from the user's browser (for example, the :func:"
"`django.contrib.auth.logout()` function calls it)."
msgstr ""
"Удаляет данные текущей сессии и сессионную куку. Можно использовать, если "
"необходимо убедиться, что старые данные не доступны с браузера пользователя "
"(например, функция :func:`django.contrib.auth.logout()` вызывает этот метод)."

#: ../../topics/http/sessions.txt:231
msgid ""
"Deletion of the session cookie is a behavior new in Django 1.8. Previously, "
"the behavior was to regenerate the session key value that was sent back to "
"the user in the cookie."
msgstr ""
"Удаление сессионной куки было добавлено в Django 1.8. Ранее значение "
"сессионной куки менялось и отправлялось пользователю в куках."

# 2cf57ca83d7d4f98bafaefaff401d13c
#: ../../topics/http/sessions.txt:237
msgid ""
"Sets a test cookie to determine whether the user's browser supports cookies. "
"Due to the way cookies work, you won't be able to test this until the user's "
"next page request. See `Setting test cookies`_ below for more information."
msgstr ""
"Устанавливает тестовую куку, чтобы проверить, что браузер пользователя "
"поддерживает куки. Из-за особенностей работы кук вы не сможете проверить "
"тестовую куку, пока пользователь не запросит следующую страницу. Подробности "
"смотрите ниже(FIXME)."

# ef3c3d4e97ea41338773ff3678db7e97
#: ../../topics/http/sessions.txt:244
msgid ""
"Returns either ``True`` or ``False``, depending on whether the user's "
"browser accepted the test cookie. Due to the way cookies work, you'll have "
"to call ``set_test_cookie()`` on a previous, separate page request. See "
"`Setting test cookies`_ below for more information."
msgstr ""
"Возвращает ``True`` или ``False``, в зависимости от того, принял ли бразуер "
"пользователя тестовую куку. Из-за особенностей работы кук вам необходимо "
"вызывать в предыдущем запросе ``set_test_cookie()``. Подробности смотрите "
"ниже(FIXME)."

# 4f4f255474d0466f920b2396ad778cbd
#: ../../topics/http/sessions.txt:251
msgid "Deletes the test cookie. Use this to clean up after yourself."
msgstr "Удаляет тестовую куку. Используйте, чтобы убрать за собой."

# 18ff3eca427c4999bbc8d417a510ae00
#: ../../topics/http/sessions.txt:255
msgid ""
"Sets the expiration time for the session. You can pass a number of different "
"values:"
msgstr "Указывает время жизни сессии. Вы можете передать различные значения:"

# 5bddd8dfd29642e099c89010c31138a7
#: ../../topics/http/sessions.txt:258
msgid ""
"If ``value`` is an integer, the session will expire after that many seconds "
"of inactivity. For example, calling ``request.session.set_expiry(300)`` "
"would make the session expire in 5 minutes."
msgstr ""
"Если ``value`` целое число, сессия истечет после указанного количества "
"секунд не активности пользователя. Например, ``request.session."
"set_expiry(300)`` установит время жизни равное 5 минутам."

# 289711772e69447594698c9285542fec
#: ../../topics/http/sessions.txt:263
msgid ""
"If ``value`` is a ``datetime`` or ``timedelta`` object, the session will "
"expire at that specific date/time. Note that ``datetime`` and ``timedelta`` "
"values are only serializable if you are using the :class:`~django.contrib."
"sessions.serializers.PickleSerializer`."
msgstr ""
"Если ``value`` это ``datetime`` или ``timedelta``, сессия истечет в "
"указанное время. Обратите внимание, ``datetime`` и ``timedelta`` "
"сериализуются только при использовании :class:`~django.contrib.sessions."
"serializers.PickleSerializer`."

# a8d961d5c5c8457c8283966a42a36588
#: ../../topics/http/sessions.txt:268
msgid ""
"If ``value`` is ``0``, the user's session cookie will expire when the user's "
"Web browser is closed."
msgstr ""
"Если ``value`` равно ``0``, сессионная кука удалится при закрытии браузера."

# 50041f5020554eceb66f958e57cd4335
#: ../../topics/http/sessions.txt:271
msgid ""
"If ``value`` is ``None``, the session reverts to using the global session "
"expiry policy."
msgstr ""
"Если ``value`` равно ``None``, сессия будет использовать глобальное "
"поведение."

# 4a084cb058b34a79bbd68a26d724a14e
#: ../../topics/http/sessions.txt:274
msgid ""
"Reading a session is not considered activity for expiration purposes. "
"Session expiration is computed from the last time the session was *modified*."
msgstr ""
"Чтение сессии не обновляет время жизни сессии. Время жизни просчитывается с "
"момента последнего *изменения*."

# 318c8824c8d543cb871777899b55ded3
#: ../../topics/http/sessions.txt:280
msgid ""
"Returns the number of seconds until this session expires. For sessions with "
"no custom expiration (or those set to expire at browser close), this will "
"equal :setting:`SESSION_COOKIE_AGE`."
msgstr ""

# 153ee72ee51c41418a2dc264bb8d2745
#: ../../topics/http/sessions.txt:284
msgid "This function accepts two optional keyword arguments:"
msgstr ""

# 29c2a0fbd0344c01ab0f709c02fb344e
#: ../../topics/http/sessions.txt:286
msgid ""
"``modification``: last modification of the session, as a :class:`~datetime."
"datetime` object. Defaults to the current time."
msgstr ""

#: ../../topics/http/sessions.txt:288
msgid ""
"``expiry``: expiry information for the session, as a :class:`~datetime."
"datetime` object, an :class:`int` (in seconds), or ``None``. Defaults to the "
"value stored in the session by :meth:`set_expiry`, if there is one, or "
"``None``."
msgstr ""

# 9c1eace9bc2b46179514a9ad6fe83cbc
#: ../../topics/http/sessions.txt:295
msgid ""
"Returns the date this session will expire. For sessions with no custom "
"expiration (or those set to expire at browser close), this will equal the "
"date :setting:`SESSION_COOKIE_AGE` seconds from now."
msgstr ""

# 0af93191a7834776ad7df18a7747be44
#: ../../topics/http/sessions.txt:299
msgid ""
"This function accepts the same keyword arguments as :meth:`get_expiry_age`."
msgstr ""

# ae3f5ede16f84f77ac9b53663ac70242
#: ../../topics/http/sessions.txt:303
msgid ""
"Returns either ``True`` or ``False``, depending on whether the user's "
"session cookie will expire when the user's Web browser is closed."
msgstr ""

# 3e9b4077f87448aa89642d64880f12e7
#: ../../topics/http/sessions.txt:308
msgid ""
"Removes expired sessions from the session store. This class method is called "
"by :djadmin:`clearsessions`."
msgstr ""

# 591b8f4d2a694dada94d4c5029187da0
#: ../../topics/http/sessions.txt:313
msgid ""
"Creates a new session key while retaining the current session data. :func:"
"`django.contrib.auth.login()` calls this method to mitigate against session "
"fixation."
msgstr ""

# d14c1de80d764101bde47c5dd849cff1
#: ../../topics/http/sessions.txt:320
msgid "Session serialization"
msgstr ""

#: ../../topics/http/sessions.txt:322
msgid ""
"By default, Django serializes session data using JSON. You can use the :"
"setting:`SESSION_SERIALIZER` setting to customize the session serialization "
"format. Even with the caveats described in :ref:`custom-serializers`, we "
"highly recommend sticking with JSON serialization *especially if you are "
"using the cookie backend*."
msgstr ""

#: ../../topics/http/sessions.txt:328
msgid ""
"For example, here's an attack scenario if you use :mod:`pickle` to serialize "
"session data. If you're using the :ref:`signed cookie session backend "
"<cookie-session-backend>` and :setting:`SECRET_KEY` is known by an attacker "
"(there isn't an inherent vulnerability in Django that would cause it to "
"leak), the attacker could insert a string into their session which, when "
"unpickled, executes arbitrary code on the server. The technique for doing so "
"is simple and easily available on the internet. Although the cookie session "
"storage signs the cookie-stored data to prevent tampering, a :setting:"
"`SECRET_KEY` leak immediately escalates to a remote code execution "
"vulnerability."
msgstr ""

# 6ec0920865e54b818a7c4d195ecec9bf
#: ../../topics/http/sessions.txt:339
msgid "Bundled Serializers"
msgstr ""

# 3308002f8ec8457a81d795d2323c128a
#: ../../topics/http/sessions.txt:343
msgid ""
"A wrapper around the JSON serializer from :mod:`django.core.signing`. Can "
"only serialize basic data types."
msgstr ""

# 63f335d9472c46f7979402aee9afda64
#: ../../topics/http/sessions.txt:346
msgid ""
"In addition, as JSON supports only string keys, note that using non-string "
"keys in ``request.session`` won't work as expected::"
msgstr ""

# f6d1953c006346e2aa5f3d3cf0dafe5c
#: ../../topics/http/sessions.txt:357
msgid ""
"See the :ref:`custom-serializers` section for more details on limitations of "
"JSON serialization."
msgstr ""

# 76cc03aaf4574c519f800e2d5345e6a2
#: ../../topics/http/sessions.txt:362
msgid ""
"Supports arbitrary Python objects, but, as described above, can lead to a "
"remote code execution vulnerability if :setting:`SECRET_KEY` becomes known "
"by an attacker."
msgstr ""

# c8e5518efd404bb4aa2ea7c3f4eafcbc
#: ../../topics/http/sessions.txt:369
msgid "Write Your Own Serializer"
msgstr ""

# 907c5d6b5f6040cda392a79d17bd1520
#: ../../topics/http/sessions.txt:371
msgid ""
"Note that unlike :class:`~django.contrib.sessions.serializers."
"PickleSerializer`, the :class:`~django.contrib.sessions.serializers."
"JSONSerializer` cannot handle arbitrary Python data types. As is often the "
"case, there is a trade-off between convenience and security. If you wish to "
"store more advanced data types including ``datetime`` and ``Decimal`` in "
"JSON backed sessions, you will need to write a custom serializer (or convert "
"such values to a JSON serializable object before storing them in ``request."
"session``). While serializing these values is fairly straightforward "
"(``django.core.serializers.json.DateTimeAwareJSONEncoder`` may be helpful), "
"writing a decoder that can reliably get back the same thing that you put in "
"is more fragile. For example, you run the risk of returning a ``datetime`` "
"that was actually a string that just happened to be in the same format "
"chosen for ``datetime``\\s)."
msgstr ""

# e382a7f1f3804f23b276f5b91d7377ed
#: ../../topics/http/sessions.txt:385
msgid ""
"Your serializer class must implement two methods, ``dumps(self, obj)`` and "
"``loads(self, data)``, to serialize and deserialize the dictionary of "
"session data, respectively."
msgstr ""

# 9a8fbf43699d46c1b79d1dc1074d62c3
#: ../../topics/http/sessions.txt:390
msgid "Session object guidelines"
msgstr ""

# d53886db6cbb4f98a973680b0cc421e2
#: ../../topics/http/sessions.txt:392
msgid ""
"Use normal Python strings as dictionary keys on ``request.session``. This is "
"more of a convention than a hard-and-fast rule."
msgstr ""

# a51d51d5b6d142199593101c000c7c6b
#: ../../topics/http/sessions.txt:395
msgid ""
"Session dictionary keys that begin with an underscore are reserved for "
"internal use by Django."
msgstr ""

# 2b84864ed97d40d8b3b437823375407a
#: ../../topics/http/sessions.txt:398
msgid ""
"Don't override ``request.session`` with a new object, and don't access or "
"set its attributes. Use it like a Python dictionary."
msgstr ""

# d287dd103f22477f8890d9aca366eb06
#: ../../topics/http/sessions.txt:402
msgid "Examples"
msgstr ""

# d0751018e2034c6898cec3c9ddb0b8f0
#: ../../topics/http/sessions.txt:404
msgid ""
"This simplistic view sets a ``has_commented`` variable to ``True`` after a "
"user posts a comment. It doesn't let a user post a comment more than once::"
msgstr ""

# 974adac0345d4d719515f09abb1289e8
#: ../../topics/http/sessions.txt:415
msgid "This simplistic view logs in a \"member\" of the site::"
msgstr ""

# abd16d06259e4dd19736aa0c2491df4c
#: ../../topics/http/sessions.txt:425
msgid "...And this one logs a member out, according to ``login()`` above::"
msgstr ""

# 70ed177e8dbd4553a47974596eda577c
#: ../../topics/http/sessions.txt:434
msgid ""
"The standard :meth:`django.contrib.auth.logout` function actually does a bit "
"more than this to prevent inadvertent data leakage. It calls the :meth:"
"`~backends.base.SessionBase.flush` method of ``request.session``. We are "
"using this example as a demonstration of how to work with session objects, "
"not as a full ``logout()`` implementation."
msgstr ""

# 8ce6c2859de5483e862a85c6fd442992
#: ../../topics/http/sessions.txt:441
msgid "Setting test cookies"
msgstr ""

# 574f4925eec14b7f9b29897a3617fe70
#: ../../topics/http/sessions.txt:443
msgid ""
"As a convenience, Django provides an easy way to test whether the user's "
"browser accepts cookies. Just call the :meth:`~backends.base.SessionBase."
"set_test_cookie` method of ``request.session`` in a view, and call :meth:"
"`~backends.base.SessionBase.test_cookie_worked` in a subsequent view -- not "
"in the same view call."
msgstr ""

# c6b1d624cb964e7ba9cb5949ca8f8d8e
#: ../../topics/http/sessions.txt:450
msgid ""
"This awkward split between ``set_test_cookie()`` and "
"``test_cookie_worked()`` is necessary due to the way cookies work. When you "
"set a cookie, you can't actually tell whether a browser accepted it until "
"the browser's next request."
msgstr ""

# 8f4639c3c1a849a58b47266f76adf039
#: ../../topics/http/sessions.txt:454
msgid ""
"It's good practice to use :meth:`~backends.base.SessionBase."
"delete_test_cookie()` to clean up after yourself. Do this after you've "
"verified that the test cookie worked."
msgstr ""

# 57e395ee9aaa41f0a2fa499b8102c2be
#: ../../topics/http/sessions.txt:458
msgid "Here's a typical usage example::"
msgstr ""

# be0b70b133594ec3ad0495abdb3059be
#: ../../topics/http/sessions.txt:471
msgid "Using sessions out of views"
msgstr ""

# 456e151f86fa46a28af94071d1f8d85d
#: ../../topics/http/sessions.txt:475
msgid ""
"The examples in this section import the ``SessionStore`` object directly "
"from the ``django.contrib.sessions.backends.db`` backend. In your own code, "
"you should consider importing ``SessionStore`` from the session engine "
"designated by :setting:`SESSION_ENGINE`, as below:"
msgstr ""

# dbe8075d1bc543c2988b7fa0e8622156
#: ../../topics/http/sessions.txt:484
msgid "An API is available to manipulate session data outside of a view::"
msgstr ""

# ac507e2006a7479a802f2a2362203200
#: ../../topics/http/sessions.txt:498
msgid ""
"In order to mitigate session fixation attacks, sessions keys that don't "
"exist are regenerated::"
msgstr ""

# 08c723e20b904bd2ad7edc47c99c9f57
#: ../../topics/http/sessions.txt:507
msgid ""
"If you're using the ``django.contrib.sessions.backends.db`` backend, each "
"session is just a normal Django model. The ``Session`` model is defined in "
"``django/contrib/sessions/models.py``. Because it's a normal model, you can "
"access sessions using the normal Django database API::"
msgstr ""

#: ../../topics/http/sessions.txt:517
msgid ""
"Note that you'll need to call :meth:`~base_session.AbstractBaseSession."
"get_decoded()` to get the session dictionary. This is necessary because the "
"dictionary is stored in an encoded format::"
msgstr ""

# d67666fa24b84efab64a7e4406a60511
#: ../../topics/http/sessions.txt:528
msgid "When sessions are saved"
msgstr ""

# 1ac177b0af1d4a53a80f2545bfcfa7b5
#: ../../topics/http/sessions.txt:530
msgid ""
"By default, Django only saves to the session database when the session has "
"been modified -- that is if any of its dictionary values have been assigned "
"or deleted::"
msgstr ""

# 56916ab8dfda4593bbc793f729d1acd4
#: ../../topics/http/sessions.txt:547
msgid ""
"In the last case of the above example, we can tell the session object "
"explicitly that it has been modified by setting the ``modified`` attribute "
"on the session object::"
msgstr ""

# 39358e71dc9b4c54b1ac17606bdfa81d
#: ../../topics/http/sessions.txt:553
msgid ""
"To change this default behavior, set the :setting:"
"`SESSION_SAVE_EVERY_REQUEST` setting to ``True``. When set to ``True``, "
"Django will save the session to the database on every single request."
msgstr ""

# 63db6f3df22b4fa3b797e0f178ff23c7
#: ../../topics/http/sessions.txt:557
msgid ""
"Note that the session cookie is only sent when a session has been created or "
"modified. If :setting:`SESSION_SAVE_EVERY_REQUEST` is ``True``, the session "
"cookie will be sent on every request."
msgstr ""

# 4f97425549f54d1780201bc522a79976
#: ../../topics/http/sessions.txt:561
msgid ""
"Similarly, the ``expires`` part of a session cookie is updated each time the "
"session cookie is sent."
msgstr ""

# 0fcf4fd1e3e94a26a8565b71496c614d
#: ../../topics/http/sessions.txt:564
msgid "The session is not saved if the response's status code is 500."
msgstr ""

# b375fb8c80e542079b6b9382dadfe85d
#: ../../topics/http/sessions.txt:569
msgid "Browser-length sessions vs. persistent sessions"
msgstr ""

# 2ff72b8566594596992b87ab89735d99
#: ../../topics/http/sessions.txt:571
msgid ""
"You can control whether the session framework uses browser-length sessions "
"vs. persistent sessions with the :setting:`SESSION_EXPIRE_AT_BROWSER_CLOSE` "
"setting."
msgstr ""

# cbc4ab99a2b346ac92071768ccda98ea
#: ../../topics/http/sessions.txt:575
msgid ""
"By default, :setting:`SESSION_EXPIRE_AT_BROWSER_CLOSE` is set to ``False``, "
"which means session cookies will be stored in users' browsers for as long "
"as :setting:`SESSION_COOKIE_AGE`. Use this if you don't want people to have "
"to log in every time they open a browser."
msgstr ""

# 41071942145943c2b637754e87151807
#: ../../topics/http/sessions.txt:580
msgid ""
"If :setting:`SESSION_EXPIRE_AT_BROWSER_CLOSE` is set to ``True``, Django "
"will use browser-length cookies -- cookies that expire as soon as the user "
"closes their browser. Use this if you want people to have to log in every "
"time they open a browser."
msgstr ""

# bba61e4a5f0d470ea0c28eaae067708c
#: ../../topics/http/sessions.txt:585
msgid ""
"This setting is a global default and can be overwritten at a per-session "
"level by explicitly calling the :meth:`~backends.base.SessionBase."
"set_expiry` method of ``request.session`` as described above in `using "
"sessions in views`_."
msgstr ""

# c12c37c788ab41af8c0464c012a2aff4
#: ../../topics/http/sessions.txt:591
msgid ""
"Some browsers (Chrome, for example) provide settings that allow users to "
"continue browsing sessions after closing and re-opening the browser. In some "
"cases, this can interfere with the :setting:"
"`SESSION_EXPIRE_AT_BROWSER_CLOSE` setting and prevent sessions from expiring "
"on browser close. Please be aware of this while testing Django applications "
"which have the :setting:`SESSION_EXPIRE_AT_BROWSER_CLOSE` setting enabled."
msgstr ""

# e0b5543bfc26409787c042f085ca214f
#: ../../topics/http/sessions.txt:600
msgid "Clearing the session store"
msgstr ""

# 7f5aa2f9031e44f2aa949d4d263f60f1
#: ../../topics/http/sessions.txt:602
msgid ""
"As users create new sessions on your website, session data can accumulate in "
"your session store. If you're using the database backend, the "
"``django_session`` database table will grow. If you're using the file "
"backend, your temporary directory will contain an increasing number of files."
msgstr ""

# 4637fe7f175d4e0c89b79905298b9889
#: ../../topics/http/sessions.txt:607
msgid ""
"To understand this problem, consider what happens with the database backend. "
"When a user logs in, Django adds a row to the ``django_session`` database "
"table. Django updates this row each time the session data changes. If the "
"user logs out manually, Django deletes the row. But if the user does *not* "
"log out, the row never gets deleted. A similar process happens with the file "
"backend."
msgstr ""

# 926c9f275beb4d7e862947f418cbd3c2
#: ../../topics/http/sessions.txt:613
msgid ""
"Django does *not* provide automatic purging of expired sessions. Therefore, "
"it's your job to purge expired sessions on a regular basis. Django provides "
"a clean-up management command for this purpose: :djadmin:`clearsessions`. "
"It's recommended to call this command on a regular basis, for example as a "
"daily cron job."
msgstr ""

# fb9d866428434d32b0302faabb0bf954
#: ../../topics/http/sessions.txt:619
msgid ""
"Note that the cache backend isn't vulnerable to this problem, because caches "
"automatically delete stale data. Neither is the cookie backend, because the "
"session data is stored by the users' browsers."
msgstr ""

# 5f2c39778bf742dfb28fbd32bec23016
#: ../../topics/http/sessions.txt:624
msgid "Settings"
msgstr ""

# c0506a9aa59d4df5a45a9696a45c6fd6
#: ../../topics/http/sessions.txt:626
msgid ""
"A few :ref:`Django settings <settings-sessions>` give you control over "
"session behavior:"
msgstr ""

# a7bb8b29295a4eb98ad967c3b2542064
#: ../../topics/http/sessions.txt:629
msgid ":setting:`SESSION_CACHE_ALIAS`"
msgstr ""

# 06ed2c62bb3b4b6489e6a91547068751
#: ../../topics/http/sessions.txt:630
msgid ":setting:`SESSION_COOKIE_AGE`"
msgstr ""

# de3cd07a8e614d5ab0c0c20b9575d08f
#: ../../topics/http/sessions.txt:631
msgid ":setting:`SESSION_COOKIE_DOMAIN`"
msgstr ""

# fa2a14fb13b04037af24638f7de53ea2
#: ../../topics/http/sessions.txt:632
msgid ":setting:`SESSION_COOKIE_HTTPONLY`"
msgstr ""

# 1050733d63d444f09a4b0edce0f96bce
#: ../../topics/http/sessions.txt:633
msgid ":setting:`SESSION_COOKIE_NAME`"
msgstr ""

# 762e7583a412475da53778acb53fb3a3
#: ../../topics/http/sessions.txt:634
msgid ":setting:`SESSION_COOKIE_PATH`"
msgstr ""

# 6cf94f93576c4bdcb0c45c25106ad23c
#: ../../topics/http/sessions.txt:635
msgid ":setting:`SESSION_COOKIE_SECURE`"
msgstr ""

# da8ce7e03a7a4303abafc67189c2b595
#: ../../topics/http/sessions.txt:636
msgid ":setting:`SESSION_ENGINE`"
msgstr ""

# 9e0edc72f4a84866a6a13c77cb7b15eb
#: ../../topics/http/sessions.txt:637
msgid ":setting:`SESSION_EXPIRE_AT_BROWSER_CLOSE`"
msgstr ""

# efc6ee1eaf8e47cb967a5b390ad5e38d
#: ../../topics/http/sessions.txt:638
msgid ":setting:`SESSION_FILE_PATH`"
msgstr ""

# a24198f7f47f4729be04922bfc52c1c9
#: ../../topics/http/sessions.txt:639
msgid ":setting:`SESSION_SAVE_EVERY_REQUEST`"
msgstr ""

# a8da690e83434fda967e6f6304703065
#: ../../topics/http/sessions.txt:644
msgid "Session security"
msgstr ""

# f1a161e204364bda9f03a48bc8e7f8c8
#: ../../topics/http/sessions.txt:646
msgid ""
"Subdomains within a site are able to set cookies on the client for the whole "
"domain. This makes session fixation possible if cookies are permitted from "
"subdomains not controlled by trusted users."
msgstr ""

# 937528d4ac4a416c943ae6a2b971e20d
#: ../../topics/http/sessions.txt:650
msgid ""
"For example, an attacker could log into ``good.example.com`` and get a valid "
"session for their account. If the attacker has control over ``bad.example."
"com``, they can use it to send their session key to you since a subdomain is "
"permitted to set cookies on ``*.example.com``. When you visit ``good.example."
"com``, you'll be logged in as the attacker and might inadvertently enter "
"your sensitive personal data (e.g. credit card info) into the attackers "
"account."
msgstr ""

# 3364843efb9a4cee9f6f64f90ca1a23b
#: ../../topics/http/sessions.txt:657
msgid ""
"Another possible attack would be if ``good.example.com`` sets its :setting:"
"`SESSION_COOKIE_DOMAIN` to ``\".example.com\"`` which would cause session "
"cookies from that site to be sent to ``bad.example.com``."
msgstr ""

# 06acf9fb3ca04f8f9e3afd5debd810cb
#: ../../topics/http/sessions.txt:662
msgid "Technical details"
msgstr ""

# 8f3a1e69ea034dbc87a6eee595cdbca8
#: ../../topics/http/sessions.txt:664
msgid ""
"The session dictionary accepts any :mod:`json` serializable value when "
"using :class:`~django.contrib.sessions.serializers.JSONSerializer` or any "
"pickleable Python object when using :class:`~django.contrib.sessions."
"serializers.PickleSerializer`. See the :mod:`pickle` module for more "
"information."
msgstr ""

# 3bc8ccbe40fc4ac0b314197e3cd63afd
#: ../../topics/http/sessions.txt:670
msgid "Session data is stored in a database table named ``django_session`` ."
msgstr ""

# 3e1a0af0f5a4499db6bfccc1e557692d
#: ../../topics/http/sessions.txt:672
msgid ""
"Django only sends a cookie if it needs to. If you don't set any session "
"data, it won't send a session cookie."
msgstr ""

#: ../../topics/http/sessions.txt:676
msgid "The ``SessionStore`` object"
msgstr ""

#: ../../topics/http/sessions.txt:678
msgid ""
"When working with sessions internally, Django uses a session store object "
"from the corresponding session engine. By convention, the session store "
"object class is named ``SessionStore`` and is located in the module "
"designated by :setting:`SESSION_ENGINE`."
msgstr ""

#: ../../topics/http/sessions.txt:683
msgid ""
"All ``SessionStore`` classes available in Django inherit from :class:"
"`~backends.base.SessionBase` and implement data manipulation methods, namely:"
msgstr ""

#: ../../topics/http/sessions.txt:687
msgid "``exists()``"
msgstr ""

#: ../../topics/http/sessions.txt:688
msgid "``create()``"
msgstr ""

#: ../../topics/http/sessions.txt:689
msgid "``save()``"
msgstr ""

#: ../../topics/http/sessions.txt:690
msgid "``delete()``"
msgstr ""

#: ../../topics/http/sessions.txt:691
msgid "``load()``"
msgstr ""

#: ../../topics/http/sessions.txt:692
msgid ":meth:`~backends.base.SessionBase.clear_expired`"
msgstr ""

#: ../../topics/http/sessions.txt:694
msgid ""
"In order to build a custom session engine or to customize an existing one, "
"you may create a new class inheriting from :class:`~backends.base."
"SessionBase` or any other existing ``SessionStore`` class."
msgstr ""

#: ../../topics/http/sessions.txt:698
msgid ""
"Extending most of the session engines is quite straightforward, but doing so "
"with database-backed session engines generally requires some extra effort "
"(see the next section for details)."
msgstr ""

# 28aed2b421144c62b2f3af3e5dee6687
#: ../../topics/http/sessions.txt:705
#, fuzzy
msgid "Extending database-backed session engines"
msgstr "Использование базы данных для хранения сессии"

#: ../../topics/http/sessions.txt:709
msgid ""
"Creating a custom database-backed session engine built upon those included "
"in Django (namely ``db`` and ``cached_db``) may be done by inheriting :class:"
"`~base_session.AbstractBaseSession` and either ``SessionStore`` class."
msgstr ""

#: ../../topics/http/sessions.txt:713
msgid ""
"``AbstractBaseSession`` and ``BaseSessionManager`` are importable from "
"``django.contrib.sessions.base_session`` so that they can be imported "
"without including ``django.contrib.sessions`` in :setting:`INSTALLED_APPS`."
msgstr ""

#: ../../topics/http/sessions.txt:721
msgid "The abstract base session model."
msgstr ""

#: ../../topics/http/sessions.txt:725
msgid ""
"Primary key. The field itself may contain up to 40 characters. The current "
"implementation generates a 32-character string (a random sequence of digits "
"and lowercase ASCII letters)."
msgstr ""

#: ../../topics/http/sessions.txt:731
msgid "A string containing an encoded and serialized session dictionary."
msgstr ""

#: ../../topics/http/sessions.txt:735
msgid "A datetime designating when the session expires."
msgstr ""

#: ../../topics/http/sessions.txt:737
msgid ""
"Expired sessions are not available to a user, however, they may still be "
"stored in the database until the :djadmin:`clearsessions` management command "
"is run."
msgstr ""

#: ../../topics/http/sessions.txt:743
msgid "Returns a session store class to be used with this session model."
msgstr ""

#: ../../topics/http/sessions.txt:747
msgid "Returns decoded session data."
msgstr ""

#: ../../topics/http/sessions.txt:749
msgid "Decoding is performed by the session store class."
msgstr ""

#: ../../topics/http/sessions.txt:751
msgid ""
"You can also customize the model manager by subclassing :class:`~django."
"contrib.sessions.base_session.BaseSessionManager`:"
msgstr ""

#: ../../topics/http/sessions.txt:760
msgid ""
"Returns the given session dictionary serialized and encoded as a string."
msgstr ""

#: ../../topics/http/sessions.txt:762
msgid "Encoding is performed by the session store class tied to a model class."
msgstr ""

#: ../../topics/http/sessions.txt:766
msgid ""
"Saves session data for a provided session key, or deletes the session in "
"case the data is empty."
msgstr ""

#: ../../topics/http/sessions.txt:769
msgid ""
"Customization of ``SessionStore`` classes is achieved by overriding methods "
"and properties described below:"
msgstr ""

# 28aed2b421144c62b2f3af3e5dee6687
#: ../../topics/http/sessions.txt:774
#, fuzzy
msgid "Implements database-backed session store."
msgstr "Использование базы данных для хранения сессии"

#: ../../topics/http/sessions.txt:780
msgid "Override this method to return a custom session model if you need one."
msgstr ""

#: ../../topics/http/sessions.txt:786
msgid ""
"Returns a new instance of the session model object, which represents the "
"current session state."
msgstr ""

#: ../../topics/http/sessions.txt:789
msgid ""
"Overriding this method provides the ability to modify session model data "
"before it's saved to database."
msgstr ""

# 28aed2b421144c62b2f3af3e5dee6687
#: ../../topics/http/sessions.txt:794
#, fuzzy
msgid "Implements cached database-backed session store."
msgstr "Использование базы данных для хранения сессии"

#: ../../topics/http/sessions.txt:800
msgid "A prefix added to a session key to build a cache key string."
msgstr ""

#: ../../topics/http/sessions.txt:803
msgid "Example"
msgstr ""

#: ../../topics/http/sessions.txt:805
msgid ""
"The example below shows a custom database-backed session engine that "
"includes an additional database column to store an account ID (thus "
"providing an option to query the database for all active sessions for an "
"account)::"
msgstr ""

#: ../../topics/http/sessions.txt:837
msgid ""
"If you are migrating from the Django's built-in ``cached_db`` session store "
"to a custom one based on ``cached_db``, you should override the cache key "
"prefix in order to prevent a namespace clash::"
msgstr ""

# e90cee40c02c41dfac171a1ffe55f01f
#: ../../topics/http/sessions.txt:847
msgid "Session IDs in URLs"
msgstr ""

# 13ba4d9eab264fcea1af764c6d14c4ab
#: ../../topics/http/sessions.txt:849
msgid ""
"The Django sessions framework is entirely, and solely, cookie-based. It does "
"not fall back to putting session IDs in URLs as a last resort, as PHP does. "
"This is an intentional design decision. Not only does that behavior make "
"URLs ugly, it makes your site vulnerable to session-ID theft via the "
"\"Referer\" header."
msgstr ""

# 1b3c943afdd6452db54a20b9fd1e3820
#~ msgid ""
#~ "Before version 1.7, the ``cached_db`` backend always used the ``default`` "
#~ "cache rather than the :setting:`SESSION_CACHE_ALIAS`."
#~ msgstr ""
#~ "До Django 1.7 бэкенд ``cached_db`` всегда использовал кэш ``default``,а "
#~ "не :setting:`SESSION_CACHE_ALIAS`."
