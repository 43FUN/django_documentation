# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2012.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-02-27 00:21\n"
"PO-Revision-Date: 2012-02-15 15:13\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# 970577d3b33a4885b26865ad0cd95b0f
#: ../../topics/http/sessions.txt:3
msgid "How to use sessions"
msgstr ""

# d2170c5c9c9048219edf81b56a9dfe43
#: ../../topics/http/sessions.txt:8
msgid ""
"Django provides full support for anonymous sessions. The session framework "
"lets you store and retrieve arbitrary data on a per-site-visitor basis. It "
"stores data on the server side and abstracts the sending and receiving of "
"cookies. Cookies contain a session ID -- not the data itself (unless you're "
"using the :ref:`cookie based backend<cookie-session-backend>`)."
msgstr ""

# 864d301689cd4266961ab37ff7335890
#: ../../topics/http/sessions.txt:15
msgid "Enabling sessions"
msgstr ""

# 8da6f17455fe47619c60406ab4d54669
#: ../../topics/http/sessions.txt:17
msgid ""
"Sessions are implemented via a piece of :doc:`middleware </ref/middleware>`."
msgstr ""

# e3eb16a3ab8341a59b856887f5d1d64d
#: ../../topics/http/sessions.txt:19
msgid "To enable session functionality, do the following:"
msgstr ""

# 00e0cf172edc456eac5fd643d73f8a9f
#: ../../topics/http/sessions.txt:21
msgid ""
"Edit the :setting:`MIDDLEWARE_CLASSES` setting and make sure it contains "
"``'django.contrib.sessions.middleware.SessionMiddleware'``. The default "
"``settings.py`` created by ``django-admin.py startproject`` has "
"``SessionMiddleware`` activated."
msgstr ""

# a381ed4eafd74619a3c88e86117772f5
#: ../../topics/http/sessions.txt:26
msgid ""
"If you don't want to use sessions, you might as well remove the "
"``SessionMiddleware`` line from :setting:`MIDDLEWARE_CLASSES` and ``'django."
"contrib.sessions'`` from your :setting:`INSTALLED_APPS`. It'll save you a "
"small bit of overhead."
msgstr ""

# 2face02c589243f59adf8a6abb827b32
#: ../../topics/http/sessions.txt:34
msgid "Configuring the session engine"
msgstr ""

# 6d79db27156f4537a9cf874ec893c2cc
#: ../../topics/http/sessions.txt:36
msgid ""
"By default, Django stores sessions in your database (using the model "
"``django.contrib.sessions.models.Session``). Though this is convenient, in "
"some setups it's faster to store session data elsewhere, so Django can be "
"configured to store session data on your filesystem or in your cache."
msgstr ""

# 28aed2b421144c62b2f3af3e5dee6687
#: ../../topics/http/sessions.txt:42
msgid "Using database-backed sessions"
msgstr ""

# b2c28646cddc471394931a452c2dfcda
#: ../../topics/http/sessions.txt:44
msgid ""
"If you want to use a database-backed session, you need to add ``'django."
"contrib.sessions'`` to your :setting:`INSTALLED_APPS` setting."
msgstr ""

# a5e59bd2e3af418b97f43d9a64c35f48
#: ../../topics/http/sessions.txt:47
msgid ""
"Once you have configured your installation, run ``manage.py syncdb`` to "
"install the single database table that stores session data."
msgstr ""

# fcb85f9525fd4ef5b47c4b2b71262d83
#: ../../topics/http/sessions.txt:53
msgid "Using cached sessions"
msgstr ""

# 5c02889903164c68bb1defb9bd570b73
#: ../../topics/http/sessions.txt:55
msgid ""
"For better performance, you may want to use a cache-based session backend."
msgstr ""

# 21bb88f18ea14e68a1b42fbd522729ca
#: ../../topics/http/sessions.txt:57
msgid ""
"To store session data using Django's cache system, you'll first need to make "
"sure you've configured your cache; see the :doc:`cache documentation </"
"topics/cache>` for details."
msgstr ""

# abfd2a82ab7e49a39139d94510a2b1d0
#: ../../topics/http/sessions.txt:63
msgid ""
"You should only use cache-based sessions if you're using the Memcached cache "
"backend. The local-memory cache backend doesn't retain data long enough to "
"be a good choice, and it'll be faster to use file or database sessions "
"directly instead of sending everything through the file or database cache "
"backends."
msgstr ""

# 75ea202f4c7a4f358e3a3532626ed05c
#: ../../topics/http/sessions.txt:69
msgid ""
"If you have multiple caches defined in :setting:`CACHES`, Django will use "
"the default cache. To use another cache, set :setting:`SESSION_CACHE_ALIAS` "
"to the name of that cache."
msgstr ""

# 655b26ea72fa4cfda4f52c0335ed214a
#: ../../topics/http/sessions.txt:76
msgid ""
"Once your cache is configured, you've got two choices for how to store data "
"in the cache:"
msgstr ""

# 863c22595de94f9b804c0c54034974e5
#: ../../topics/http/sessions.txt:79
msgid ""
"Set :setting:`SESSION_ENGINE` to ``\"django.contrib.sessions.backends.cache"
"\"`` for a simple caching session store. Session data will be stored "
"directly your cache. However, session data may not be persistent: cached "
"data can be evicted if the cache fills up or if the cache server is "
"restarted."
msgstr ""

# 822f6552dda74ff0bfdb77a9db85561b
#: ../../topics/http/sessions.txt:85
msgid ""
"For persistent, cached data, set :setting:`SESSION_ENGINE` to ``\"django."
"contrib.sessions.backends.cached_db\"``. This uses a write-through cache -- "
"every write to the cache will also be written to the database. Session reads "
"only use the database if the data is not already in the cache."
msgstr ""

# 5c73c90dd20e4d12a8c5bf3da1c87266
#: ../../topics/http/sessions.txt:91
msgid ""
"Both session stores are quite fast, but the simple cache is faster because "
"it disregards persistence. In most cases, the ``cached_db`` backend will be "
"fast enough, but if you need that last bit of performance, and are willing "
"to let session data be expunged from time to time, the ``cache`` backend is "
"for you."
msgstr ""

# a5ed9f6bad8d41e4836505d62b3192aa
#: ../../topics/http/sessions.txt:96
msgid ""
"If you use the ``cached_db`` session backend, you also need to follow the "
"configuration instructions for the `using database-backed sessions`_."
msgstr ""

# 0a83cd55b376440288b92f22d6ca04ed
#: ../../topics/http/sessions.txt:100
msgid "Using file-based sessions"
msgstr ""

# 805b288106af435aad2b171fb3f18870
#: ../../topics/http/sessions.txt:102
msgid ""
"To use file-based sessions, set the :setting:`SESSION_ENGINE` setting to ``"
"\"django.contrib.sessions.backends.file\"``."
msgstr ""

# 387d7995473249bfaa8dd1d6b622c1f9
#: ../../topics/http/sessions.txt:105
msgid ""
"You might also want to set the :setting:`SESSION_FILE_PATH` setting (which "
"defaults to output from ``tempfile.gettempdir()``, most likely ``/tmp``) to "
"control where Django stores session files. Be sure to check that your Web "
"server has permissions to read and write to this location."
msgstr ""

# ec6d49c050d14dab948b1e5a2006f153
#: ../../topics/http/sessions.txt:113
msgid "Using cookie-based sessions"
msgstr ""

# a71aee354b404ba78c0085841f93336f
#: ../../topics/http/sessions.txt:115
msgid ""
"To use cookies-based sessions, set the :setting:`SESSION_ENGINE` setting to "
"``\"django.contrib.sessions.backends.signed_cookies\"``. The session data "
"will be stored using Django's tools for :doc:`cryptographic signing </topics/"
"signing>` and the :setting:`SECRET_KEY` setting."
msgstr ""

# e20694fd758548e0b0f9c0617b4a1ccb
#: ../../topics/http/sessions.txt:122
msgid ""
"It's recommended to leave the :setting:`SESSION_COOKIE_HTTPONLY` setting "
"``True`` to prevent tampering of the stored data from JavaScript."
msgstr ""

# 765d44ef14c845b8bec8f40d40222af8
#: ../../topics/http/sessions.txt:127
msgid "**The session data is signed but not encrypted**"
msgstr ""

# ac3c5ffc3099406e806349f7c0306e95
#: ../../topics/http/sessions.txt:129
msgid ""
"When using the cookies backend the session data can be read by the client."
msgstr ""

# 88580d3985de4e8ebafcf77e91a2e152
#: ../../topics/http/sessions.txt:131
msgid ""
"A MAC (Message Authentication Code) is used to protect the data against "
"changes by the client, so that the session data will be invalidated when "
"being tampered with. The same invalidation happens if the client storing the "
"cookie (e.g. your user's browser) can't store all of the session cookie and "
"drops data. Even though Django compresses the data, it's still entirely "
"possible to exceed the `common limit of 4096 bytes`_ per cookie."
msgstr ""

# 8babd9d0353d441b9de97e0ffdb67643
#: ../../topics/http/sessions.txt:138
msgid "**No freshness guarantee**"
msgstr ""

# ce99c72af10c450f926335d9d1cfb7ac
#: ../../topics/http/sessions.txt:140
msgid ""
"Note also that while the MAC can guarantee the authenticity of the data "
"(that it was generated by your site, and not someone else), and the "
"integrity of the data (that it is all there and correct), it cannot "
"guarantee freshness i.e. that you are being sent back the last thing you "
"sent to the client. This means that for some uses of session data, the "
"cookie backend might open you up to `replay attacks`_. Cookies will only be "
"detected as 'stale' if they are older than your :setting:"
"`SESSION_COOKIE_AGE`."
msgstr ""

# 877067e332ba49499ed9886106965f07
#: ../../topics/http/sessions.txt:149
msgid "**Performance**"
msgstr ""

# 66e767b8fc8e4ab6b19270da57d0b20d
#: ../../topics/http/sessions.txt:151
msgid ""
"Finally, the size of a cookie can have an impact on the `speed of your "
"site`_."
msgstr ""

# 13ab0d8b75c44e1b9784ebe9712b04fe
#: ../../topics/http/sessions.txt:158
msgid "Using sessions in views"
msgstr ""

# ef8b221dd11c4c6190ded0c867b57e7c
#: ../../topics/http/sessions.txt:160
msgid ""
"When ``SessionMiddleware`` is activated, each :class:`~django.http."
"HttpRequest` object -- the first argument to any Django view function -- "
"will have a ``session`` attribute, which is a dictionary-like object."
msgstr ""

# e4c121c3c3f24fb3b13826454803afbd
#: ../../topics/http/sessions.txt:164
msgid ""
"You can read it and write to ``request.session`` at any point in your view. "
"You can edit it multiple times."
msgstr ""

# 67a9e8d90959478a929deae5617ead30
#: ../../topics/http/sessions.txt:169
msgid ""
"This is the base class for all session objects. It has the following "
"standard dictionary methods:"
msgstr ""

# 3bfee16658294a44bcab35d7f5815b1f
#: ../../topics/http/sessions.txt:174
msgid "Example: ``fav_color = request.session['fav_color']``"
msgstr ""

# d0c9eda3986b45ca8c72f746fcc39f3a
#: ../../topics/http/sessions.txt:178
msgid "Example: ``request.session['fav_color'] = 'blue'``"
msgstr ""

# 36f35854ef5e4137a412901815b1a6c9
#: ../../topics/http/sessions.txt:182
msgid ""
"Example: ``del request.session['fav_color']``. This raises ``KeyError`` if "
"the given ``key`` isn't already in the session."
msgstr ""

# 535d1742591c46d2aa9097f7bdd173b6
#: ../../topics/http/sessions.txt:187
msgid "Example: ``'fav_color' in request.session``"
msgstr ""

# ac83c967b4dd4918b7e50785e53ec27e
#: ../../topics/http/sessions.txt:191
msgid "Example: ``fav_color = request.session.get('fav_color', 'red')``"
msgstr ""

# b7477f9200f7482798479175e49e824e
#: ../../topics/http/sessions.txt:195
msgid "Example: ``fav_color = request.session.pop('fav_color')``"
msgstr ""

# c5c489a63e4d4ff79c8e8691acb1d969
#: ../../topics/http/sessions.txt:205
msgid "It also has these methods:"
msgstr ""

# d1fff35719044a22bfdd46f2e18d2865
#: ../../topics/http/sessions.txt:209
msgid ""
"Delete the current session data from the session and regenerate the session "
"key value that is sent back to the user in the cookie. This is used if you "
"want to ensure that the previous session data can't be accessed again from "
"the user's browser (for example, the :func:`django.contrib.auth.logout()` "
"function calls it)."
msgstr ""

# 2cf57ca83d7d4f98bafaefaff401d13c
#: ../../topics/http/sessions.txt:217
msgid ""
"Sets a test cookie to determine whether the user's browser supports cookies. "
"Due to the way cookies work, you won't be able to test this until the user's "
"next page request. See `Setting test cookies`_ below for more information."
msgstr ""

# ef3c3d4e97ea41338773ff3678db7e97
#: ../../topics/http/sessions.txt:224
msgid ""
"Returns either ``True`` or ``False``, depending on whether the user's "
"browser accepted the test cookie. Due to the way cookies work, you'll have "
"to call ``set_test_cookie()`` on a previous, separate page request. See "
"`Setting test cookies`_ below for more information."
msgstr ""

# 4f4f255474d0466f920b2396ad778cbd
#: ../../topics/http/sessions.txt:231
msgid "Deletes the test cookie. Use this to clean up after yourself."
msgstr ""

# 18ff3eca427c4999bbc8d417a510ae00
#: ../../topics/http/sessions.txt:235
msgid ""
"Sets the expiration time for the session. You can pass a number of different "
"values:"
msgstr ""

# 5bddd8dfd29642e099c89010c31138a7
#: ../../topics/http/sessions.txt:238
msgid ""
"If ``value`` is an integer, the session will expire after that many seconds "
"of inactivity. For example, calling ``request.session.set_expiry(300)`` "
"would make the session expire in 5 minutes."
msgstr ""

# 84c64405affa4dc699658211ecd3167b
#: ../../topics/http/sessions.txt:243
msgid ""
"If ``value`` is a ``datetime`` or ``timedelta`` object, the session will "
"expire at that specific date/time."
msgstr ""

# a8d961d5c5c8457c8283966a42a36588
#: ../../topics/http/sessions.txt:246
msgid ""
"If ``value`` is ``0``, the user's session cookie will expire when the user's "
"Web browser is closed."
msgstr ""

# 50041f5020554eceb66f958e57cd4335
#: ../../topics/http/sessions.txt:249
msgid ""
"If ``value`` is ``None``, the session reverts to using the global session "
"expiry policy."
msgstr ""

# 4a084cb058b34a79bbd68a26d724a14e
#: ../../topics/http/sessions.txt:252
msgid ""
"Reading a session is not considered activity for expiration purposes. "
"Session expiration is computed from the last time the session was *modified*."
msgstr ""

# 318c8824c8d543cb871777899b55ded3
#: ../../topics/http/sessions.txt:258
msgid ""
"Returns the number of seconds until this session expires. For sessions with "
"no custom expiration (or those set to expire at browser close), this will "
"equal :setting:`SESSION_COOKIE_AGE`."
msgstr ""

# 153ee72ee51c41418a2dc264bb8d2745
#: ../../topics/http/sessions.txt:262
msgid "This function accepts two optional keyword arguments:"
msgstr ""

# 29c2a0fbd0344c01ab0f709c02fb344e
#: ../../topics/http/sessions.txt:264
msgid ""
"``modification``: last modification of the session, as a :class:`~datetime."
"datetime` object. Defaults to the current time."
msgstr ""

# 3c70d07e2d164d7ba2295b678c078b2a
#: ../../topics/http/sessions.txt:266
msgid ""
"``expiry``: expiry information for the session, as a :class:`~datetime."
"datetime` object, an :func:`int` (in seconds), or ``None``. Defaults to the "
"value stored in the session by :meth:`set_expiry`, if there is one, or "
"``None``."
msgstr ""

# 9c1eace9bc2b46179514a9ad6fe83cbc
#: ../../topics/http/sessions.txt:273
msgid ""
"Returns the date this session will expire. For sessions with no custom "
"expiration (or those set to expire at browser close), this will equal the "
"date :setting:`SESSION_COOKIE_AGE` seconds from now."
msgstr ""

# ea465afe71ec4a5c83c624f63edb2ef5
#: ../../topics/http/sessions.txt:277
msgid ""
"This function accepts the same keyword argumets as :meth:`get_expiry_age`."
msgstr ""

# ae3f5ede16f84f77ac9b53663ac70242
#: ../../topics/http/sessions.txt:281
msgid ""
"Returns either ``True`` or ``False``, depending on whether the user's "
"session cookie will expire when the user's Web browser is closed."
msgstr ""

# 3e9b4077f87448aa89642d64880f12e7
#: ../../topics/http/sessions.txt:288
msgid ""
"Removes expired sessions from the session store. This class method is called "
"by :djadmin:`clearsessions`."
msgstr ""

# 9a8fbf43699d46c1b79d1dc1074d62c3
#: ../../topics/http/sessions.txt:292
msgid "Session object guidelines"
msgstr ""

# d53886db6cbb4f98a973680b0cc421e2
#: ../../topics/http/sessions.txt:294
msgid ""
"Use normal Python strings as dictionary keys on ``request.session``. This is "
"more of a convention than a hard-and-fast rule."
msgstr ""

# a51d51d5b6d142199593101c000c7c6b
#: ../../topics/http/sessions.txt:297
msgid ""
"Session dictionary keys that begin with an underscore are reserved for "
"internal use by Django."
msgstr ""

# 2b84864ed97d40d8b3b437823375407a
#: ../../topics/http/sessions.txt:300
msgid ""
"Don't override ``request.session`` with a new object, and don't access or "
"set its attributes. Use it like a Python dictionary."
msgstr ""

# d287dd103f22477f8890d9aca366eb06
#: ../../topics/http/sessions.txt:304
msgid "Examples"
msgstr ""

# d0751018e2034c6898cec3c9ddb0b8f0
#: ../../topics/http/sessions.txt:306
msgid ""
"This simplistic view sets a ``has_commented`` variable to ``True`` after a "
"user posts a comment. It doesn't let a user post a comment more than once::"
msgstr ""

# 974adac0345d4d719515f09abb1289e8
#: ../../topics/http/sessions.txt:317
msgid "This simplistic view logs in a \"member\" of the site::"
msgstr ""

# abd16d06259e4dd19736aa0c2491df4c
#: ../../topics/http/sessions.txt:327
msgid "...And this one logs a member out, according to ``login()`` above::"
msgstr ""

# 70ed177e8dbd4553a47974596eda577c
#: ../../topics/http/sessions.txt:336
msgid ""
"The standard :meth:`django.contrib.auth.logout` function actually does a bit "
"more than this to prevent inadvertent data leakage. It calls the :meth:"
"`~backends.base.SessionBase.flush` method of ``request.session``. We are "
"using this example as a demonstration of how to work with session objects, "
"not as a full ``logout()`` implementation."
msgstr ""

# 8ce6c2859de5483e862a85c6fd442992
#: ../../topics/http/sessions.txt:343
msgid "Setting test cookies"
msgstr ""

# 574f4925eec14b7f9b29897a3617fe70
#: ../../topics/http/sessions.txt:345
msgid ""
"As a convenience, Django provides an easy way to test whether the user's "
"browser accepts cookies. Just call the :meth:`~backends.base.SessionBase."
"set_test_cookie` method of ``request.session`` in a view, and call :meth:"
"`~backends.base.SessionBase.test_cookie_worked` in a subsequent view -- not "
"in the same view call."
msgstr ""

# c6b1d624cb964e7ba9cb5949ca8f8d8e
#: ../../topics/http/sessions.txt:352
msgid ""
"This awkward split between ``set_test_cookie()`` and ``test_cookie_worked()"
"`` is necessary due to the way cookies work. When you set a cookie, you "
"can't actually tell whether a browser accepted it until the browser's next "
"request."
msgstr ""

# 8f4639c3c1a849a58b47266f76adf039
#: ../../topics/http/sessions.txt:356
msgid ""
"It's good practice to use :meth:`~backends.base.SessionBase."
"delete_test_cookie()` to clean up after yourself. Do this after you've "
"verified that the test cookie worked."
msgstr ""

# 57e395ee9aaa41f0a2fa499b8102c2be
#: ../../topics/http/sessions.txt:360
msgid "Here's a typical usage example::"
msgstr ""

# be0b70b133594ec3ad0495abdb3059be
#: ../../topics/http/sessions.txt:373
msgid "Using sessions out of views"
msgstr ""

# dbe8075d1bc543c2988b7fa0e8622156
#: ../../topics/http/sessions.txt:375
msgid "An API is available to manipulate session data outside of a view::"
msgstr ""

# ce26526d279d40bc902ce955a3845af9
#: ../../topics/http/sessions.txt:389
msgid ""
"In order to prevent session fixation attacks, sessions keys that don't exist "
"are regenerated::"
msgstr ""

# 08c723e20b904bd2ad7edc47c99c9f57
#: ../../topics/http/sessions.txt:398
msgid ""
"If you're using the ``django.contrib.sessions.backends.db`` backend, each "
"session is just a normal Django model. The ``Session`` model is defined in "
"``django/contrib/sessions/models.py``. Because it's a normal model, you can "
"access sessions using the normal Django database API::"
msgstr ""

# dacd4f0df7e24bc48dbd59434af3e530
#: ../../topics/http/sessions.txt:408
msgid ""
"Note that you'll need to call ``get_decoded()`` to get the session "
"dictionary. This is necessary because the dictionary is stored in an encoded "
"format::"
msgstr ""

# d67666fa24b84efab64a7e4406a60511
#: ../../topics/http/sessions.txt:417
msgid "When sessions are saved"
msgstr ""

# 1ac177b0af1d4a53a80f2545bfcfa7b5
#: ../../topics/http/sessions.txt:419
msgid ""
"By default, Django only saves to the session database when the session has "
"been modified -- that is if any of its dictionary values have been assigned "
"or deleted::"
msgstr ""

# 56916ab8dfda4593bbc793f729d1acd4
#: ../../topics/http/sessions.txt:436
msgid ""
"In the last case of the above example, we can tell the session object "
"explicitly that it has been modified by setting the ``modified`` attribute "
"on the session object::"
msgstr ""

# 39358e71dc9b4c54b1ac17606bdfa81d
#: ../../topics/http/sessions.txt:442
msgid ""
"To change this default behavior, set the :setting:"
"`SESSION_SAVE_EVERY_REQUEST` setting to ``True``. When set to ``True``, "
"Django will save the session to the database on every single request."
msgstr ""

# 63db6f3df22b4fa3b797e0f178ff23c7
#: ../../topics/http/sessions.txt:446
msgid ""
"Note that the session cookie is only sent when a session has been created or "
"modified. If :setting:`SESSION_SAVE_EVERY_REQUEST` is ``True``, the session "
"cookie will be sent on every request."
msgstr ""

# 4f97425549f54d1780201bc522a79976
#: ../../topics/http/sessions.txt:450
msgid ""
"Similarly, the ``expires`` part of a session cookie is updated each time the "
"session cookie is sent."
msgstr ""

# b375fb8c80e542079b6b9382dadfe85d
#: ../../topics/http/sessions.txt:457
msgid "Browser-length sessions vs. persistent sessions"
msgstr ""

# 2ff72b8566594596992b87ab89735d99
#: ../../topics/http/sessions.txt:459
msgid ""
"You can control whether the session framework uses browser-length sessions "
"vs. persistent sessions with the :setting:`SESSION_EXPIRE_AT_BROWSER_CLOSE` "
"setting."
msgstr ""

# cbc4ab99a2b346ac92071768ccda98ea
#: ../../topics/http/sessions.txt:463
msgid ""
"By default, :setting:`SESSION_EXPIRE_AT_BROWSER_CLOSE` is set to ``False``, "
"which means session cookies will be stored in users' browsers for as long "
"as :setting:`SESSION_COOKIE_AGE`. Use this if you don't want people to have "
"to log in every time they open a browser."
msgstr ""

# a0bf04fa6d61447184f039a74b4ca833
#: ../../topics/http/sessions.txt:468
msgid ""
"If :setting:`SESSION_EXPIRE_AT_BROWSER_CLOSE` is set to ``True``, Django "
"will use browser-length cookies -- cookies that expire as soon as the user "
"closes his or her browser. Use this if you want people to have to log in "
"every time they open a browser."
msgstr ""

# bba61e4a5f0d470ea0c28eaae067708c
#: ../../topics/http/sessions.txt:473
msgid ""
"This setting is a global default and can be overwritten at a per-session "
"level by explicitly calling the :meth:`~backends.base.SessionBase."
"set_expiry` method of ``request.session`` as described above in `using "
"sessions in views`_."
msgstr ""

# e0b5543bfc26409787c042f085ca214f
#: ../../topics/http/sessions.txt:478
msgid "Clearing the session store"
msgstr ""

# 7f5aa2f9031e44f2aa949d4d263f60f1
#: ../../topics/http/sessions.txt:480
msgid ""
"As users create new sessions on your website, session data can accumulate in "
"your session store. If you're using the database backend, the "
"``django_session`` database table will grow. If you're using the file "
"backend, your temporary directory will contain an increasing number of files."
msgstr ""

# 4637fe7f175d4e0c89b79905298b9889
#: ../../topics/http/sessions.txt:485
msgid ""
"To understand this problem, consider what happens with the database backend. "
"When a user logs in, Django adds a row to the ``django_session`` database "
"table. Django updates this row each time the session data changes. If the "
"user logs out manually, Django deletes the row. But if the user does *not* "
"log out, the row never gets deleted. A similar process happens with the file "
"backend."
msgstr ""

# 926c9f275beb4d7e862947f418cbd3c2
#: ../../topics/http/sessions.txt:491
msgid ""
"Django does *not* provide automatic purging of expired sessions. Therefore, "
"it's your job to purge expired sessions on a regular basis. Django provides "
"a clean-up management command for this purpose: :djadmin:`clearsessions`. "
"It's recommended to call this command on a regular basis, for example as a "
"daily cron job."
msgstr ""

# fb9d866428434d32b0302faabb0bf954
#: ../../topics/http/sessions.txt:497
msgid ""
"Note that the cache backend isn't vulnerable to this problem, because caches "
"automatically delete stale data. Neither is the cookie backend, because the "
"session data is stored by the users' browsers."
msgstr ""

# 5f2c39778bf742dfb28fbd32bec23016
#: ../../topics/http/sessions.txt:502
msgid "Settings"
msgstr ""

# 4317a72369714d1f892d6b52b55a43a2
#: ../../topics/http/sessions.txt:504
msgid ""
"A few :ref:`Django settings <settings-sessions>` give you control over "
"session behavior:"
msgstr ""

# 34643aa6d1844fb29bf9f2060f271183
#: ../../topics/http/sessions.txt:507
msgid ":setting:`SESSION_CACHE_ALIAS`"
msgstr ""

# 131185c740724bd091c3fd3ea90b5a90
#: ../../topics/http/sessions.txt:508
msgid ":setting:`SESSION_COOKIE_AGE`"
msgstr ""

# 83cbae3245414238b44a11c30a786983
#: ../../topics/http/sessions.txt:509
msgid ":setting:`SESSION_COOKIE_DOMAIN`"
msgstr ""

# 796d4ca0aace406c95f125f82d9f3815
#: ../../topics/http/sessions.txt:510
msgid ":setting:`SESSION_COOKIE_HTTPONLY`"
msgstr ""

# 6e9195632e5a49b6bac17c6fc714c82f
#: ../../topics/http/sessions.txt:511
msgid ":setting:`SESSION_COOKIE_NAME`"
msgstr ""

# 1ce2bf91ad444928bdfe179110153821
#: ../../topics/http/sessions.txt:512
msgid ":setting:`SESSION_COOKIE_PATH`"
msgstr ""

# 8975a7e26e8748fc8e40aa7d1c20e7da
#: ../../topics/http/sessions.txt:513
msgid ":setting:`SESSION_COOKIE_SECURE`"
msgstr ""

# 3b3153dec7024d198db3430f80e0fd61
#: ../../topics/http/sessions.txt:514
msgid ":setting:`SESSION_ENGINE`"
msgstr ""

# 34b60b4be13448e6a3a071f60b03d302
#: ../../topics/http/sessions.txt:515
msgid ":setting:`SESSION_EXPIRE_AT_BROWSER_CLOSE`"
msgstr ""

# 43a82ae42f0b4010b7f078ede3b9f955
#: ../../topics/http/sessions.txt:516
msgid ":setting:`SESSION_FILE_PATH`"
msgstr ""

# e22732d67b6445a09bed3af6bdfd8546
#: ../../topics/http/sessions.txt:517
msgid ":setting:`SESSION_SAVE_EVERY_REQUEST`"
msgstr ""

# 06acf9fb3ca04f8f9e3afd5debd810cb
#: ../../topics/http/sessions.txt:520
msgid "Technical details"
msgstr ""

# 6fa2fd15b2ae4357856ea955f1f6ddc7
#: ../../topics/http/sessions.txt:522
msgid ""
"The session dictionary should accept any pickleable Python object. See the :"
"mod:`pickle` module for more information."
msgstr ""

# 3bc8ccbe40fc4ac0b314197e3cd63afd
#: ../../topics/http/sessions.txt:525
msgid "Session data is stored in a database table named ``django_session`` ."
msgstr ""

# 3e1a0af0f5a4499db6bfccc1e557692d
#: ../../topics/http/sessions.txt:527
msgid ""
"Django only sends a cookie if it needs to. If you don't set any session "
"data, it won't send a session cookie."
msgstr ""

# e90cee40c02c41dfac171a1ffe55f01f
#: ../../topics/http/sessions.txt:531
msgid "Session IDs in URLs"
msgstr ""

# 13ba4d9eab264fcea1af764c6d14c4ab
#: ../../topics/http/sessions.txt:533
msgid ""
"The Django sessions framework is entirely, and solely, cookie-based. It does "
"not fall back to putting session IDs in URLs as a last resort, as PHP does. "
"This is an intentional design decision. Not only does that behavior make "
"URLs ugly, it makes your site vulnerable to session-ID theft via the "
"\"Referer\" header."
msgstr ""
