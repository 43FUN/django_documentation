# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2012.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-02-27 00:21\n"
"PO-Revision-Date: 2012-02-15 15:13\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# 52e2a0e346c342469293abd85f0d353e
#: ../../topics/files.txt:3
msgid "Managing files"
msgstr ""

# 85c6fbbbc1164cb1a51d4ca4b7d3e6d6
#: ../../topics/files.txt:5
msgid "This document describes Django's file access APIs."
msgstr ""

# d6a03d9136524258bb1194e2fd173be8
#: ../../topics/files.txt:7
msgid ""
"By default, Django stores files locally, using the :setting:`MEDIA_ROOT` "
"and :setting:`MEDIA_URL` settings. The examples below assume that you're "
"using these defaults."
msgstr ""

# 321068fe25a449bca212439c5fa8ca9b
#: ../../topics/files.txt:11
msgid ""
"However, Django provides ways to write custom `file storage systems`_ that "
"allow you to completely customize where and how Django stores files. The "
"second half of this document describes how these storage systems work."
msgstr ""

# 0acf589a271444afbc26ab29966ea351
#: ../../topics/files.txt:18
msgid "Using files in models"
msgstr ""

# f91f5c0b0e83476b8d42469c2d3d0f44
#: ../../topics/files.txt:20
msgid ""
"When you use a :class:`~django.db.models.FileField` or :class:`~django.db."
"models.ImageField`, Django provides a set of APIs you can use to deal with "
"that file."
msgstr ""

# a9c1bf90dfcb405ab807f96c33ea59ec
#: ../../topics/files.txt:24
msgid ""
"Consider the following model, using an :class:`~django.db.models.ImageField` "
"to store a photo::"
msgstr ""

# c096a1a683e64194be01219a398f40c6
#: ../../topics/files.txt:32
msgid ""
"Any ``Car`` instance will have a ``photo`` attribute that you can use to get "
"at the details of the attached photo::"
msgstr ""

# 058b2eb81839430382ed2edc9748fc6f
#: ../../topics/files.txt:45
msgid ""
"This object -- ``car.photo`` in the example -- is a ``File`` object, which "
"means it has all the methods and attributes described below."
msgstr ""

# 1d481723dc924ed39167ee96186dc140
#: ../../topics/files.txt:49
msgid ""
"The file is saved as part of saving the model in the database, so the actual "
"file name used on disk cannot be relied on until after the model has been "
"saved."
msgstr ""

# c553f751982b44a9b14049ad8950c291
#: ../../topics/files.txt:55
msgid "The ``File`` object"
msgstr ""

# eec770eda4c9417cb6269ec70c11ba87
#: ../../topics/files.txt:57
msgid ""
"Internally, Django uses a :class:`django.core.files.File` instance any time "
"it needs to represent a file. This object is a thin wrapper around Python's "
"`built-in file object`_ with some Django-specific additions."
msgstr ""

# e4df4109e67841dba6de46945147548d
#: ../../topics/files.txt:63
msgid ""
"Most of the time you'll simply use a ``File`` that Django's given you (i.e. "
"a file attached to a model as above, or perhaps an uploaded file)."
msgstr ""

# 9ee3d9934a2344b5b1f79d2478be98d8
#: ../../topics/files.txt:66
msgid ""
"If you need to construct a ``File`` yourself, the easiest way is to create "
"one using a Python built-in ``file`` object::"
msgstr ""

# 6e17fdadb730442196d52035ddf94800
#: ../../topics/files.txt:75
msgid ""
"Now you can use any of the documented attributes and methods of the :class:"
"`~django.core.files.File` class."
msgstr ""

# cb91fd015a6a4597b157f6319f7e605d
#: ../../topics/files.txt:78
msgid ""
"Be aware that files created in this way are not automatically closed. The "
"following approach may be used to close files automatically::"
msgstr ""

# 63ad9b6c2e0d43de9978bd7b802ffd4d
#: ../../topics/files.txt:93
msgid ""
"Closing files is especially important when accessing file fields in a loop "
"over a large number of objects:: If files are not manually closed after "
"accessing them, the risk of running out of file descriptors may arise. This "
"may lead to the following error::"
msgstr ""

# c74655deb8ae44d8b5be9f8ad7830ff1
#: ../../topics/files.txt:102
msgid "File storage"
msgstr ""

# aae257f538304a73a6c029583864b89c
#: ../../topics/files.txt:104
msgid ""
"Behind the scenes, Django delegates decisions about how and where to store "
"files to a file storage system. This is the object that actually understands "
"things like file systems, opening and reading files, etc."
msgstr ""

# 74644c01f9e34ff19af3183fc690075e
#: ../../topics/files.txt:108
msgid ""
"Django's default file storage is given by the :setting:"
"`DEFAULT_FILE_STORAGE` setting; if you don't explicitly provide a storage "
"system, this is the one that will be used."
msgstr ""

# c88e9fef527f4d0381a00093acfe4a32
#: ../../topics/files.txt:112
msgid ""
"See below for details of the built-in default file storage system, and see :"
"doc:`/howto/custom-file-storage` for information on writing your own file "
"storage system."
msgstr ""

# 909639882a76491c891c91e3c9ea5f78
#: ../../topics/files.txt:117
msgid "Storage objects"
msgstr ""

# 79f733a199894c5898f72bc4ebef3ff9
#: ../../topics/files.txt:119
msgid ""
"Though most of the time you'll want to use a ``File`` object (which "
"delegates to the proper storage for that file), you can use file storage "
"systems directly. You can create an instance of some custom file storage "
"class, or -- often more useful -- you can use the global default storage "
"system::"
msgstr ""

# 4632d9757c65490a84a132ee82d987e8
#: ../../topics/files.txt:140
msgid "See :doc:`/ref/files/storage` for the file storage API."
msgstr ""

# 84412a187e6c44999a3c14ad9f7c58da
#: ../../topics/files.txt:145
msgid "The built-in filesystem storage class"
msgstr ""

# 79f91e00ae274343b871877ef876c04d
#: ../../topics/files.txt:147
msgid ""
"Django ships with a built-in ``FileSystemStorage`` class (defined in "
"``django.core.files.storage``) which implements basic local filesystem file "
"storage. Its initializer takes two arguments:"
msgstr ""

# 76f363b528e949af9add71e9a55c1bac
#: ../../topics/files.txt:152
msgid "Argument"
msgstr ""

# e20de756c93a486c8bb7f2407f849784
#: ../../topics/files.txt:152
msgid "Description"
msgstr ""

# bd796e94099e49d1ba92e711a0562441
#: ../../topics/files.txt:154
msgid "``location``"
msgstr ""

# 54f8760ab5e54db4b0852dd2361aa5a8
#: ../../topics/files.txt:154
msgid ""
"Optional. Absolute path to the directory that will hold the files. If "
"omitted, it will be set to the value of your :setting:`MEDIA_ROOT` setting."
msgstr ""

# a3a7c874c8384e5d84968611a759ef87
#: ../../topics/files.txt:157
msgid "``base_url``"
msgstr ""

# 0dc719af71444a238e39dbc3fe42cab8
#: ../../topics/files.txt:157
msgid ""
"Optional. URL that serves the files stored at this location. If omitted, it "
"will default to the value of your :setting:`MEDIA_URL` setting."
msgstr ""

# 7ff4ad72b11e47729fd2c5d9dad18b34
#: ../../topics/files.txt:162
msgid ""
"For example, the following code will store uploaded files under ``/media/"
"photos`` regardless of what your :setting:`MEDIA_ROOT` setting is::"
msgstr ""

# a5edecd768234a49aa33a22087ae2f14
#: ../../topics/files.txt:174
msgid ""
":doc:`Custom storage systems </howto/custom-file-storage>` work the same "
"way: you can pass them in as the ``storage`` argument to a :class:`~django."
"db.models.FileField`."
msgstr ""
