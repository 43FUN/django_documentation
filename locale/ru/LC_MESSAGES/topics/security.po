# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2012.
# 
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-02-29 18:30\n"
"PO-Revision-Date: 2012-02-15 15:13\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# 450e6efcb3bc430db307f8c4c1770dbd
#: ../../topics/security.txt:3
msgid "Security in Django"
msgstr "Безопасность в Django"

# 3ced7b1411754d1ea5c65646602bc260
#: ../../topics/security.txt:5
msgid ""
"This document is an overview of Django's security features. It includes "
"advice on securing a Django-powered site."
msgstr ""
"Этот документ рассматривает возможности Django с точки зрения безопасности. "
"В документе приведены советы по защите сайтов, созданных с помощью Django."

# ff8008a6e1f84fc4990b2a7a5f3cd194
#: ../../topics/security.txt:11
msgid "Cross site scripting (XSS) protection"
msgstr "Защита от межсайтового скриптинга (XSS)"

# 2579951fa8f744149c2f36692fe5f10a
#: ../../topics/security.txt:15
msgid ""
"XSS attacks allow a user to inject client side scripts into the browsers of "
"other users. This is usually achieved by storing the malicious scripts in "
"the database where it will be retrieved and displayed to other users, or by "
"getting users to click a link which will cause the attacker's JavaScript to "
"be executed by the user's browser. However, XSS attacks can originate from "
"any untrusted source of data, such as cookies or Web services, whenever the "
"data is not sufficiently sanitized before including in a page."
msgstr ""
"XSS атаки позволяют пользователю вставить собственные JS скрипты в браузеры "
"других пользователей. Это достигается с помощью сохранения вредоносных "
"скриптов в базе данных, которые затем запрашиваются и отображаются "
"браузерами других пользователей, или принуждением пользователя нажать на "
"ссылку, которая позволит вредоносному скрипту выполниться в браузере "
"пользователя. Однако, XSS атаки могут происходить из любого недоверенного "
"источника данных, такого как куки или веб сервисы, в случае когда данные "
"были недостаточно очищены перед их размещением на странице."

# 8e03c004720d40d185592a8d1997b91a
#: ../../topics/security.txt:23
msgid ""
"Using Django templates protects you against the majority of XSS attacks. "
"However, it is important to understand what protections it provides and its "
"limitations."
msgstr ""
"Использование шаблонов Django защищает вас от большинства XSS атак. Тем не "
"менее, важно понимать, какую именно защиту они обеспечивают и где находится "
"граница их возможностей."

# 58305516562c48fe800cc69603690f11
#: ../../topics/security.txt:27
msgid ""
"Django templates :ref:`escape specific characters <automatic-html-escaping>` "
"which are particularly dangerous to HTML. While this protects users from "
"most malicious input, it is not entirely foolproof. For example, it will not "
"protect the following:"
msgstr ""
"Шаблоны Django :ref:`экранируют специальные символы <automatic-html-"
"escaping>`, которые обычно создают проблемы для HTML. И хотя экранирование "
"защищает пользователя от большинства видов вредоносного ввода, оно не "
"является панацеей. Например, оно не защитит от такого:"

# ecc1dbdf9f2549d28a189ce525cdf515
#: ../../topics/security.txt:36
msgid ""
"If ``var`` is set to ``'class1 onmouseover=javascript:func()'``, this can "
"result in unauthorized JavaScript execution, depending on how the browser "
"renders imperfect HTML."
msgstr ""
"Если ``var`` содержит ``'class1 onmouseover=javascript:func()'``, то это "
"может вылиться в неавторизованный запуск JavaScript. Здесь всё зависит от "
"того, как браузер интерпретирует несовершенный HTML."

# 48009e527cb1418fa069eabf46fb8f72
#: ../../topics/security.txt:40
msgid ""
"It is also important to be particularly careful when using ``is_safe`` with "
"custom template tags, the :ttag:`safe` template tag, :mod:`mark_safe <django."
"utils.safestring>`, and when autoescape is turned off."
msgstr ""
"Важно обратить особое внимание на использование ``is_safe`` совместно с "
"сторонними шаблонными тагами, с шаблонным тагом :ttag:`safe`, с :mod:"
"`mark_safe <django.utils.safestring>` и когда автоматическое экранирование "
"отключено."

# 7f7f5e62c32f42f19dc8702cd3510537
#: ../../topics/security.txt:44
msgid ""
"In addition, if you are using the template system to output something other "
"than HTML, there may be entirely separate characters and words which require "
"escaping."
msgstr ""
"Дополнительно, если вы используйте шаблонную систему для вывода контента, "
"отличного от HTML, то там могут быть отдельные символы и слова, которые "
"требуют экранирования."

# 6f8ce6840d6844c48b6a974b2fc3e28b
#: ../../topics/security.txt:48
msgid ""
"You should also be very careful when storing HTML in the database, "
"especially when that HTML is retrieved and displayed."
msgstr ""
"Вы также должны быть очень осторожны при сохранении HTML в базе данных, "
"особенно в случае, когда этот HTML будет отображаться впоследствии."

# 7c18b51d014841368720c8162ba2d892
#: ../../topics/security.txt:52
msgid "Cross site request forgery (CSRF) protection"
msgstr "Защита от подделки межсайтового запроса (CSRF)"

# 4ba54a2e538e49bfbd1e60b2a81dc6a0
#: ../../topics/security.txt:54
msgid ""
"CSRF attacks allow a malicious user to execute actions using the credentials "
"of another user without that user's knowledge or consent."
msgstr ""
"CSRF атаки позволяют недобросовестному пользователю выполнять действия от "
"имени другого пользователя, без ведома последнего или его согласия."

# dabde4b25c544a4ba0b8e8e971f09dab
#: ../../topics/security.txt:57
msgid ""
"Django has built-in protection against most types of CSRF attacks, providing "
"you have :ref:`enabled and used it <using-csrf>` where appropriate. However, "
"as with any mitigation technique, there are limitations. For example, it is "
"possible to disable the CSRF module globally or for particular views. You "
"should only do this if you know what you are doing. There are other :ref:"
"`limitations <csrf-limitations>` if your site has subdomains that are "
"outside of your control."
msgstr ""
"Django обладает встроенной защитой против большинства типов CSRF атак, если "
"вы :ref:`активировали и использовали её <using-csrf>` там, где это "
"необходимо.  Однако, как это обычно бывает, существуют ограничения. "
"Например, есть возможность отключить защиту CSRF глобально или на уровне "
"отдельного представления. Такое можно делать, только если вы точно уверены в "
"своих действиях. Существуют другие :ref:`ограничения <csrf-limitations>`, "
"если у вашего сайта есть поддомены, не находящиеся под вашим управлением."

# 3edd9a105bab4bdebbf29a13dfc118b6
#: ../../topics/security.txt:65
msgid ""
":ref:`CSRF protection works <how-csrf-works>` by checking for a nonce in "
"each POST request. This ensures that a malicious user cannot simply "
"\"replay\" a form POST to your Web site and have another logged in user "
"unwittingly submit that form. The malicious user would have to know the "
"nonce, which is user specific (using a cookie)."
msgstr ""
":ref:`CSRF защита работает <how-csrf-works>`, проверяя метку с текущим "
"временем в каждом POST запросе. Она не позволяет злоумышленнику просто "
"сформировать POST запрос формы к вашему сайту и создать возможность другому "
"авторизованному пользователю нечаянно отправить эту форму. Злоумышленнику "
"потребуется знать содержимое метки, которое сильно зависит от пользователя "
"(используются куки).\n"
"\n"
"to your Web site and have another logged in user unwittingly submit that "
"form. The malicious user would have to know the nonce, which is user "
"specific (using a cookie)."

# 7b6fa66f0059442e97ef545950dd92a4
#: ../../topics/security.txt:71
msgid ""
"Be very careful with marking views with the ``csrf_exempt`` decorator unless "
"it is absolutely necessary."
msgstr ""
"Будьте очень внимательны, декорируя представления с помощью ``csrf_exempt``, "
"когда в этом нет явной необходимости."

# 930b664e2d2b4655beecbe8c0e4baf52
#: ../../topics/security.txt:75
msgid "SQL injection protection"
msgstr "Защита от внедрения SQL"

# 52be30f499864f6c915547a92261066a
#: ../../topics/security.txt:77
msgid ""
"SQL injection is a type of attack where a malicious user is able to execute "
"arbitrary SQL code on a database. This can result in records being deleted "
"or data leakage."
msgstr ""
"Внедрение SQL — это тип атаки, когда недобросовестный пользователь имеет "
"возможность выполнить в базе данных определённый SQL запрос. Результатом "
"выполнения такого запроса может быть удаление или даже утечка данных."

# 2dd6df27ec224b1ca473109377fd4978
#: ../../topics/security.txt:81
msgid ""
"By using Django's querysets, the resulting SQL will be properly escaped by "
"the underlying database driver. However, Django also gives developers power "
"to write :ref:`raw queries <executing-raw-queries>` or execute :ref:`custom "
"sql <executing-custom-sql>`. These capabilities should be used sparingly and "
"you should always be careful to properly escape any parameters that the user "
"can control. In addition, you should exercise caution when using :meth:"
"`extra() <django.db.models.query.QuerySet.extra>`."
msgstr ""
"При использовании Django ORM созданный SQL запрос будет правильно "
"экранирован соответствующим драйвером базы данных. Однако, Django "
"предоставляет разработчикам возможность писать :ref:`запросы напрямую "
"<executing-raw-queries>` или выполнять :ref:`собственные запросы <executing-"
"custom-sql>`. Эти возможности следует использовать умеренно и всегда "
"обращать пристальное внимание на экранирование всех параметров, которые "
"предоставлены пользователем. Такое следует проявлять осторожность при "
"использовании :meth:`extra() <django.db.models.query.QuerySet.extra>`."

# d5387e5907b94c07a09c0cbcb2e118e9
#: ../../topics/security.txt:90
msgid "Clickjacking protection"
msgstr "Защита от скликивания"

# f421de120c924fc1a339f3763f7170ff
#: ../../topics/security.txt:92
msgid ""
"Clickjacking is a type of attack where a malicious site wraps another site "
"in a frame. This attack can result in an unsuspecting user being tricked "
"into performing unintended actions on the target site."
msgstr ""
" Скликивание — это атака, при которой вредоносный сайт подменяет другой сайт "
"используя <iframe>.  В результате этой атаки ничего не подозревающий "
"пользователь принуждается к выполнению определённых действий на целевом "
"сайте."

# 7ad760b278ae4002a38746d241a7ae47
#: ../../topics/security.txt:96
msgid ""
"Django contains :ref:`clickjacking protection <clickjacking-prevention>` in "
"the form of the :mod:`X-Frame-Options middleware <django.middleware."
"clickjacking.XFrameOptionsMiddleware>` which in a supporting browser can "
"prevent a site from being rendered inside a frame. It is possible to disable "
"the protection on a per view basis or to configure the exact header value "
"sent."
msgstr ""
"Django предоставляет :ref:`защиту от этой атаки <clickjacking-prevention>` в "
"виде модуля :mod:`X-Frame-Options <django.middleware.clickjacking."
"XFrameOptionsMiddleware>`, который, при использовании соответствующего "
"браузера, может предотвратить отображение сайта внутри фрейма. Есть "
"возможность отключить данную защиту для выбранных представлений или "
"настроить значение отправляемого заголовка."

# b4751e045054492ca0df3a342f431786
#: ../../topics/security.txt:103
msgid ""
"The middleware is strongly recommended for any site that does not need to "
"have its pages wrapped in a frame by third party sites, or only needs to "
"allow that for a small section of the site."
msgstr ""
"Этот функциональный слой настоятельно рекомендуется использовать на любом "
"сайте, страницы которого не должны отображаться внутри другого сайта. Можно "
"позволить такое отображение для простых страниц."

# 12b46a70479840a9b3133fd2ccd2a7c3
#: ../../topics/security.txt:108
msgid "SSL/HTTPS"
msgstr "SSL/HTTPS"

# 3c89d32871294676a6d1c654d1620afc
#: ../../topics/security.txt:110
msgid ""
"It is always better for security, though not always practical in all cases, "
"to deploy your site behind HTTPS. Without this, it is possible for malicious "
"network users to sniff authentication credentials or any other information "
"transferred between client and server, and in some cases -- **active** "
"network attackers -- to alter data that is sent in either direction."
msgstr ""
"Применение этой защиты хорошо отражается на безопасности, хотя и не всегда "
"уместно с практической точки зрения. При отсутствии HTTPS злоумышленник "
"имеет возможность перехватывать аутентификационные данные или любую другую "
"информацию, передаваемую между клиентом и сервером. А в случае **активной** "
"атаки — может даже изменять данные, передаваемые в любом направлении."

# 29f6d898a5d64b9295cf2e8237d3416a
#: ../../topics/security.txt:116
msgid ""
"If you want the protection that HTTPS provides, and have enabled it on your "
"server, there are some additional steps to consider to ensure that sensitive "
"information is not leaked:"
msgstr ""
"Если вам нужна защита, предоставляемая HTTPS, и на сервере произведена "
"соответствующая настройка ПО,  то надо выполнить ещё несколько шагов, чтобы "
"быть уверенным в защите своей информации:"

# 56c1fedc6e434e5c84e9f884db899584
#: ../../topics/security.txt:120
msgid "Set up redirection so that requests over HTTP are redirected to HTTPS."
msgstr "Настройте перенаправление HTTP запросов на HTTPS."

# 1339cf6edcdb4600b30826797af83a0b
#: ../../topics/security.txt:122
msgid ""
"It is possible to do this with a piece of Django middleware. However, this "
"has problems for the common case of a Django app running behind a reverse "
"proxy. Often, reverse proxies are configured to set the ``X-Forwarded-SSL`` "
"header (or equivalent) if the incoming connection was HTTPS, and the absence "
"of this header could be used to detect a request that was not HTTPS. "
"However, this method usually cannot be relied on, as a client, or a "
"malicious active network attacker, could also set this header."
msgstr ""
"Это можно сделать с помощью функционального слоя Django. Тем не менее, "
"проблема проявляется  когда приложение работает за обратным прокси. Часто, "
"обратный прокси настроен на установку заголовка ``X-Forwarded-SSL`` (или "
"аналогичного), если входящее соединение шло через HTTPS. Отсутствие такого "
"заголовка может использоваться для определения того, что запрос пришёл через "
"HTTP. Однако, не следует доверять этому заголовку, так как клиент или "
"злоумышленник могут установить этот заголовок самостоятельно."

# fe7e13e7c7554a92bd4d59ad6914be8d
#: ../../topics/security.txt:130
msgid ""
"So, for the case of a reverse proxy, it is recommended that the main Web "
"server should be configured to do the redirect to HTTPS, or configured to "
"send HTTP requests to an app that unconditionally redirects to HTTPS."
msgstr ""
"Таким образом, для обратного прокси рекомендуется настроить перенаправление "
"на HTTPS на главном веб сервере или перенаправление HTTP запросов на "
"приложение, которое будет безусловно отправлять их на HTTPS."

# 247d2dbbc5e04fe6b095c75f579ca71a
#: ../../topics/security.txt:134
msgid "Use 'secure' cookies."
msgstr "Использование 'безопасных' куки."

# 6ee97d8f690a4921939062ac0362a5f1
#: ../../topics/security.txt:136
msgid ""
"If a browser connects initially via HTTP, which is the default for most "
"browsers, it is possible for existing cookies to be leaked. For this reason, "
"you should set your :setting:`SESSION_COOKIE_SECURE` and :setting:"
"`CSRF_COOKIE_SECURE` settings to ``True``. This instructs the browser to "
"only send these cookies over HTTPS connections. Note that this will mean "
"that sessions will not work over HTTP, and the CSRF protection will prevent "
"any POST data being accepted over HTTP (which will be fine if you are "
"redirecting all HTTP traffic to HTTPS)."
msgstr ""
"Если браузер изначально подключается через HTTP, что характерно для "
"большинства браузеров, есть возможность утечки существующих кук. По этой "
"причине вам сделать установить параметры :setting:`SESSION_COOKIE_SECURE` и :"
"setting:`CSRF_COOKIE_SECURE` в ``True``. Это заставить браузер отправлять "
"такие куки только через HTTPS. Следует отметить, это сделает невозможным "
"работу сессий через HTTP, а CSRF защита не будет принимать POST данные, "
"полученные через HTTP (это решается с помощью перенаправления HTTP трафика "
"через HTTPS)."

# 18e68e9c25e64111a99118d65cb1b2e3
#: ../../topics/security.txt:148
msgid "Host headers and virtual hosting"
msgstr "Заголовки хоста и виртуальный хостинг"

# 9db85548f445459c97273708b1f9f5df
#: ../../topics/security.txt:150
msgid ""
"Django uses the ``Host`` header provided by the client to construct URLs in "
"certain cases. While these values are sanitized to prevent Cross Site "
"Scripting attacks, they can be used for Cross-Site Request Forgery and cache "
"poisoning attacks in some circumstances. We recommend you ensure your Web "
"server is configured such that:"
msgstr ""
"Django использует заголовок ``Host``, предоставляемый клиентом, для создания "
"URL в определённых случаях. Несмотря на то, что эти данные безопасны с точки "
"зрения Cross Site Scripting атак, они могут быть использованы атак CSRF  и "
"кэша при определённых условиях. Мы рекомендуем удостовериться, что ваш веб "
"сервер настроен следующим образом:"

# 99602bb5724f42799eddfb02cbb765c1
#: ../../topics/security.txt:156
msgid ""
"It always validates incoming HTTP ``Host`` headers against the expected host "
"name."
msgstr ""
"Он всегда проверяет присылаемые заголовки ``Host`` относительно ожидаемого "
"имени хоста."

# 7c2beab1af8c4784aa510cd67b202ccc
#: ../../topics/security.txt:158
msgid "Disallows requests with no ``Host`` header."
msgstr "Не позволяет запросы без установленного заголовка ``Host``."

# 3247171707de4e5ca6f3a0e1a63a1c8d
#: ../../topics/security.txt:159
msgid ""
"Is *not* configured with a catch-all virtual host that forwards requests to "
"a Django application."
msgstr ""
"*Не* настроено перенаправление всех запросов к виртуальным хостам на "
"приложение Django."

# e29bd8a87c184967bf95e925fe38dee8
#: ../../topics/security.txt:162
msgid ""
"Additionally, as of 1.3.1, Django requires you to explicitly enable support "
"for the ``X-Forwarded-Host`` header if your configuration requires it."
msgstr ""
"Дополнительно, начиная с 1.3.1, Django требует явную активацию поддержки "
"заголовка ``X-Forwarded-Host``, если ваша конфигурация в нём нуждается."

# 4b86731ffeb045a8b9e9fbff35703764
#: ../../topics/security.txt:166
msgid "Additional security topics"
msgstr "Дополнительные вопросы безопасности"

# c7d617a71f98424c9fdea729d970d12d
#: ../../topics/security.txt:168
msgid ""
"While Django provides good security protection out of the box, it is still "
"important to properly deploy your application and take advantage of the "
"security protection of the Web server, operating system and other components."
""
msgstr ""
"Несмотря на то, что Django предоставляет защиту прямо из коробки, правильная "
"установка вашего приложения всё ещё имеет значение. Также важно иметь "
"правильно настроенный веб сервер, операционную систему и другие компоненты."

# 36167d243dc042a5b6eeaaa9c246c3ed
#: ../../topics/security.txt:172
msgid ""
"Make sure that your Python code is outside of the Web server's root. This "
"will ensure that your Python code is not accidentally served as plain text "
"(or accidentally executed)."
msgstr ""
"Код вашего приложения должен находиться вне корня веб сервера. Это не "
"позволит случайно отобразить его в виде текста или выполнить его."

# aae5bf9cdd424f7b940d02a36639c208
#: ../../topics/security.txt:175
msgid "Take care with any :ref:`user uploaded files <file-upload-security>`."
msgstr ""
"Будьте осторожны с любыми файлами, которые :ref:`загружены пользователями "
"<file-upload-security>`."

# 31412de1cb9943d2bb101dc5dddd2d2e
#: ../../topics/security.txt:176
msgid ""
"Django does not throttle requests to authenticate users. To protect against "
"brute-force attacks against the authentication system, you may consider "
"deploying a Django plugin or Web server module to throttle these requests."
msgstr ""
"Django не ограничивает количество запросов при аутентификации пользователей. "
"Для того, чтобы защититься от перебора логина/пароля, вы можете поставить "
"дополнительное приложение для Django или модуль для веб сервера, чтобы "
"ограничивать такие запросы."

# 271807741fae4ffe97fc0a3f4658bddf
#: ../../topics/security.txt:179
msgid ""
"If your site accepts file uploads, it is strongly advised that you limit "
"these uploads in your Web server configuration to a reasonable size in order "
"to prevent denial of service (DOS) attacks. In Apache, this can be easily "
"set using the LimitRequestBody_ directive."
msgstr ""
"Если ваш сайт принимает файлы, настоятельно советуем ограничить размер таких "
"загрузок в конфигурации веб сервера для предотвращения атак на отказ сервиса "
"(DOS). В случае Apache это легко можно сделать с помощью директивы "
"LimitRequestBody_."

# 949ca73bcfbf450fa649d489aef1fec0
#: ../../topics/security.txt:183
msgid "Keep your :setting:`SECRET_KEY` a secret."
msgstr "Храните содержимое параметра :setting:`SECRET_KEY` в секрете."

# 6a22091ac28548af8e2f40e3ff29ac91
#: ../../topics/security.txt:184
msgid ""
"It is a good idea to limit the accessibility of your caching system and "
"database using a firewall."
msgstr ""
"Хорошей идеей будет ограничить доступ к вашей системе кэширования и к базе "
"данных с помощью фаервола."
