# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated <>, 2012.
# 
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-03-24 01:58\n"
"PO-Revision-Date: 2012-06-06 01:00+0400\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# 4a2211a3526d4d7aaec49ae9293bba70
#: ../../topics/i18n/timezones.txt:5
msgid "Time zones"
msgstr "Временные зоны"

# 7e46df56d21640148849f7fef584075c
#: ../../topics/i18n/timezones.txt:12
msgid "Overview"
msgstr "Введение"

# 7bc5cf218e0d4667970bc110202ab41a
#: ../../topics/i18n/timezones.txt:14
msgid ""
"When support for time zones is enabled, Django stores date and time "
"information in UTC in the database, uses time-zone-aware datetime objects "
"internally, and translates them to the end user's time zone in templates and "
"forms."
msgstr ""
"При включенной поддержке часовых поясов, Django сохраняет в базе данных "
"информацию о дате и времени в формате UTC, использует специальные datetime "
"объекты и переводит значения ко временной зоне конечного пользователя в "
"шаблонах и формах."

# 1a2e15fc10ac4e6a99955486d5532193
#: ../../topics/i18n/timezones.txt:19
msgid ""
"This is handy if your users live in more than one time zone and you want to "
"display date and time information according to each user's wall clock."
msgstr ""
"Такая поддержка становится актуальной, если ваши пользователи живут в разных "
"часовых поясах и требуется отображать информацию о дате и времени в "
"соответствии с настенными часами каждого пользователя."

# 0550a89f7f0f4c7a9c064fc2270ab2b6
#: ../../topics/i18n/timezones.txt:22
msgid ""
"Even if your Web site is available in only one time zone, it's still good "
"practice to store data in UTC in your database. One main reason is Daylight "
"Saving Time (DST). Many countries have a system of DST, where clocks are "
"moved forward in spring and backward in autumn. If you're working in local "
"time, you're likely to encounter errors twice a year, when the transitions "
"happen. (The pytz_ documentation discusses `these issues`_ in greater detail."
") This probably doesn't matter for your blog, but it's a problem if you over-"
"bill or under-bill your customers by one hour, twice a year, every year. The "
"solution to this problem is to use UTC in the code and use local time only "
"when interacting with end users."
msgstr ""
"Даже если ваш сайт используется в пределах одного часового пояса, хорошей "
"привычкой будет хранение данных о времени в формате UTC. Основной причиной "
"этой рекомендации является летнее время (Daylight Saving Time, DST). Во "
"многих странах используется летнее время, когда часы переводятся весной на "
"час вперёд, а осенью назад. При работе с локальным временем, у вас "
"проявляется вероятность получения ошибок из-за времени дважды в год, в "
"момент перевода часов. (Документация на пакет pytz_ рассматривает `эти "
"вопросы <these issues>`_ очень подробно.) Это может не иметь значения для "
"вашего блога, но это становится проблемой, когда вы обсчитываетесь в "
"расчётах с клиентами дважды в год, каждый год. Решением этой проблемы "
"является использование UTC в коде и преобразование времени к локальному при "
"взаимодействии с конечным пользователем."

# 53ec815ea5ca4d00aa374f24b0ced888
#: ../../topics/i18n/timezones.txt:33
msgid ""
"Time zone support is disabled by default. To enable it, set :setting:`USE_TZ "
"= True <USE_TZ>` in your settings file. Installing pytz_ is highly "
"recommended, but not mandatory. It's as simple as:"
msgstr ""
"По умолчанию, поддержка часовых поясов отключена. Для её активации "
"установите :setting:`USE_TZ = True <USE_TZ>` в файле конфигурации проекта. "
"Установка пакета pytz_ крайне рекомендована, но не является обязательной. "
"Это просто как:"

# cc27128b2dd4455a8e56e4292a2fa1e7
#: ../../topics/i18n/timezones.txt:43
msgid ""
"The default :file:`settings.py` file created by :djadmin:`django-admin.py "
"startproject <startproject>` includes :setting:`USE_TZ = True <USE_TZ>` for "
"convenience."
msgstr ""
"Файл конфигурации :file:`settings.py`, созданный с помощью :djadmin:`django-"
"admin.py startproject <startproject>` для удобства включает в себя :setting:"
"`USE_TZ = True <USE_TZ>`."

# 9180277705624444a876f9ddbc990921
#: ../../topics/i18n/timezones.txt:49
msgid ""
"There is also an independent but related :setting:`USE_L10N` setting that "
"controls whether Django should activate format localization. See :doc:`/"
"topics/i18n/formatting` for more details."
msgstr ""
"Существует также независимый, но связанный параметр конфигурации :setting:"
"`USE_L10N`, который управляет активацией форматов локализации. Обратитесь к :"
"doc:`/topics/i18n/formatting` для получения подробностей."

# c6acaad1028548208c234e1578c66319
#: ../../topics/i18n/timezones.txt:53
msgid ""
"If you're wrestling with a particular problem, start with the :ref:`time "
"zone FAQ <time-zones-faq>`."
msgstr ""
"Если вы бьётесь над определённой проблемой, начните с  :ref:`ЧаВо по часовым "
"поясам <time-zones-faq>`."

# 467f7430a3134b1c9b5974e862386b90
#: ../../topics/i18n/timezones.txt:57
msgid "Concepts"
msgstr "Концепция"

# 6b5f270ba13048beabfe3dc4c1901095
#: ../../topics/i18n/timezones.txt:60
msgid "Naive and aware datetime objects"
msgstr "Объекты относительного и абсолютного времени"

# 5c1b1a6021874613b56c8950382dee19
#: ../../topics/i18n/timezones.txt:62
msgid ""
"Python's :class:`datetime.datetime` objects have a ``tzinfo`` attribute that "
"can be used to store time zone information, represented as an instance of a "
"subclass of :class:`datetime.tzinfo`. When this attribute is set and "
"describes an offset, a datetime object is **aware**. Otherwise, it's "
"**naive**."
msgstr ""
"Объекты класса :class:`datetime.datetime` обладают атрибутом ``tzinfo``, "
"который может быть использован для хранения информации о часовом поясе и "
"представлен потомком класса :class:`datetime.tzinfo`. Если этот атрибут "
"установлен и описывает смещение, то объект описывает **абсолютное** время. "
"Иначе речь идёт об **относительном** времени."

# a3ecabe6ea744d4b8af4bfb543cf0ccd
#: ../../topics/i18n/timezones.txt:67
msgid ""
"You can use :func:`~django.utils.timezone.is_aware` and :func:`~django.utils."
"timezone.is_naive` to determine whether datetimes are aware or naive."
msgstr ""
"Вы можете использовать функции :func:`~django.utils.timezone.is_aware` и :"
"func:`~django.utils.timezone.is_naive` для определения типа объекта."

# bf7cd0aeb5824124ae70bcb61edce75e
#: ../../topics/i18n/timezones.txt:71
msgid ""
"When time zone support is disabled, Django uses naive datetime objects in "
"local time. This is simple and sufficient for many use cases. In this mode, "
"to obtain the current time, you would write::"
msgstr ""
"При отключенной поддержке часовых поясов, Django использует относительное "
"время. Такое поведение подходит для многих случаев. В этом режиме, для "
"получения информации о текущем времени, потребуется сделать::"

# 4e743dfa216f4082a8aff6823265025e
#: ../../topics/i18n/timezones.txt:79
msgid ""
"When time zone support is enabled, Django uses time-zone-aware datetime "
"objects. If your code creates datetime objects, they should be aware too. In "
"this mode, the example above becomes::"
msgstr ""
"При включенной поддержке часовых поясов, Django использует абсолютное время. "
"Если ваш код создаёт объекты даты-времени, они тоже должны быть представлены "
"абсолютным временем. В этом режиме, предыдущий пример будет выглядеть так::"

# 0d21df80992343e5999264c264b60fb8
#: ../../topics/i18n/timezones.txt:90
msgid ""
":mod:`django.utils.timezone` provides a :func:`~django.utils.timezone.now()` "
"function that returns a naive or aware datetime object according to the "
"value of :setting:`USE_TZ`."
msgstr ""
"Модуль :mod:`django.utils.timezone` предоставляет функцию :func:`~django."
"utils.timezone.now()`, которая возвращает текущее время, относительное или "
"абсолютное, в зависимости от значения параметра конфигурации :setting:"
"`USE_TZ`."

# e99a7b38835146758e3e5903b4dc78f6
#: ../../topics/i18n/timezones.txt:96
msgid ""
"Dealing with aware datetime objects isn't always intuitive. For instance, "
"the ``tzinfo`` argument of the standard datetime constructor doesn't work "
"reliably for time zones with DST. Using UTC is generally safe; if you're "
"using other time zones, you should review the `pytz`_ documentation "
"carefully."
msgstr ""
"Работа с объектами абсолютного времени не всегда интуитивно понятна. "
"Например, аргумент ``tzinfo`` не надёжно работает с часовыми поясами в "
"летнем времени. Использование UTC обычно безопаснее. Если вы работаете с "
"несколькими часовыми поясами, то тщательно изучите документацию на `pytz`_."

# ef7a525d2e1c4ba3be63002aa878e5e7
#: ../../topics/i18n/timezones.txt:104
msgid ""
"Python's :class:`datetime.time` objects also feature a ``tzinfo`` attribute, "
"and PostgreSQL has a matching ``time with time zone`` type. However, as "
"PostgreSQL's docs put it, this type \"exhibits properties which lead to "
"questionable usefulness\"."
msgstr ""
"Объекты класса :class:`datetime.time` также обладают атрибутом ``tzinfo``, а "
"PostgreSQL имеет соответствующий тип ``time with time zone``. Тем не менее, "
"как написано в документации на PostgreSQL, этот тип \"обладает свойствами, "
"которые имеют сомнительную полезность\"."

# 21ef4bc096d749bfbb75697155324ae4
#: ../../topics/i18n/timezones.txt:109
msgid ""
"Django only supports naive time objects and will raise an exception if you "
"attempt to save an aware time object."
msgstr ""
"Django поддерживает только объекты относительного времени и вызывает "
"исключение, если вы попытаетесь сохранить объект абсолютного времени."

# 100e6f2bd6664bc8b945642149edfb89
#: ../../topics/i18n/timezones.txt:115
msgid "Interpretation of naive datetime objects"
msgstr "Интерпретация объектов относительного времени"

# 99d40200c7ef49718177913029559a61
#: ../../topics/i18n/timezones.txt:117
msgid ""
"When :setting:`USE_TZ` is ``True``, Django still accepts naive datetime "
"objects, in order to preserve backwards-compatibility. When the database "
"layer receives one, it attempts to make it aware by interpreting it in the :"
"ref:`default time zone <default-current-time-zone>` and raises a warning."
msgstr ""
"Если параметр конфигурации :setting:`USE_TZ` установлен в ``True``, Django "
"продолжает принимать объекты относительного времени, чтобы обеспечить "
"обратную совместимость. Когда слой базы данных получает такой объект, он "
"пытается преобразовать его в объект абсолютного времени, интерпретируя его в "
":ref:`стандартной зоне времени <default-current-time-zone>` и выбрасывает "
"предупреждение."

# eb450feef9dc4f8f90faaaeec493aca5
#: ../../topics/i18n/timezones.txt:122
msgid ""
"Unfortunately, during DST transitions, some datetimes don't exist or are "
"ambiguous. In such situations, pytz_ raises an exception. Other :class:"
"`~datetime.tzinfo` implementations, such as the local time zone used as a "
"fallback when pytz_ isn't installed, may raise an exception or return "
"inaccurate results. That's why you should always create aware datetime "
"objects when time zone support is enabled."
msgstr ""
"К сожалению, из-за перехода на летнее время, некоторые объекты не могут быть "
"преобразованы. В таких ситуациях, pytz_ вызывает исключение. Другие "
"реализации :class:`~datetime.tzinfo`, такие как локальная зона времени "
"используемая, если pytz_ не установлен, могут вызывать исключение или "
"возвращать неточные результаты. Именно поэтому вы должны всегда создавать "
"объекты абсолютного времени, если включена поддержка временных зон."

# 6b798c04cbcf4588a4cf35cce567fd53
#: ../../topics/i18n/timezones.txt:129
msgid ""
"In practice, this is rarely an issue. Django gives you aware datetime "
"objects in the models and forms, and most often, new datetime objects are "
"created from existing ones through :class:`~datetime.timedelta` arithmetic. "
"The only datetime that's often created in application code is the current "
"time, and :func:`timezone.now() <django.utils.timezone.now>` automatically "
"does the right thing."
msgstr ""
"На практике это редко является проблемой. Django предоставляет вам объекты "
"абсолютного времени в моделях и формах и чаще всего, новые объекты даты "
"создаются из уже имеющихся с помощью :class:`~datetime.timedelta` арифметики."
" Чаще всего в коде используется текущая дата и  функция :func:`timezone.now "
"() <django.utils.timezone.now>` создаёт объект правильного типа."

# 51f5d41b9cf444edb0d42d67257e40ec
#: ../../topics/i18n/timezones.txt:139
msgid "Default time zone and current time zone"
msgstr "Стандартная и текущая зоны времени"

# 7479643566f04e4981a122dab8de7383
#: ../../topics/i18n/timezones.txt:141
msgid ""
"The **default time zone** is the time zone defined by the :setting:"
"`TIME_ZONE` setting."
msgstr ""
"**Стандартная зона времени** — это зона времени, заданная параметром "
"конфигурации :setting:`TIME_ZONE`."

# 943fab500b8d48b6adac4b444c42a98d
#: ../../topics/i18n/timezones.txt:144
msgid "The **current time zone** is the time zone that's used for rendering."
msgstr ""
"**Текущая зона времени** — зона времени для которой отображается страница "
"сайта."

# edd8cc1c5697405db3fcbe9d1ec79c12
#: ../../topics/i18n/timezones.txt:146
msgid ""
"You should set the current time zone to the end user's actual time zone with "
":func:`~django.utils.timezone.activate`. Otherwise, the default time zone is "
"used."
msgstr ""
"Вы должны настраивать текущую зону времени на зону пользователя с помощью :"
"func:`~django.utils.timezone.activate`. В противном случае будет "
"использоваться стандартная зона времени."

# ecb74e176f9548ee9e554b0ae2b56b1a
#: ../../topics/i18n/timezones.txt:152
msgid ""
"As explained in the documentation of :setting:`TIME_ZONE`, Django sets "
"environment variables so that its process runs in the default time zone. "
"This happens regardless of the value of :setting:`USE_TZ` and of the current "
"time zone."
msgstr ""
"Как указано в документации на параметр :setting:`TIME_ZONE`, Django "
"устанавливает переменные окружения так, что она работает в стандартной зоне "
"времени. Это происходит вне зависимости от значения переменой :setting:"
"`USE_TZ` и текущей зоны времени."

# f1c6e914b5b04e2496ed62e05360dcfe
#: ../../topics/i18n/timezones.txt:157
msgid ""
"When :setting:`USE_TZ` is ``True``, this is useful to preserve backwards-"
"compatibility with applications that still rely on local time. However, :ref:"
"`as explained above <naive-datetime-objects>`, this isn't entirely reliable, "
"and you should always work with aware datetimes in UTC in your own code. For "
"instance, use :meth:`~datetime.datetime.utcfromtimestamp` instead of :meth:"
"`~datetime.datetime.fromtimestamp` -- and don't forget to set ``tzinfo`` to :"
"data:`~django.utils.timezone.utc`."
msgstr ""
"Когда параметр :setting:`USE_TZ` установлен в ``True``, полезно сохранять "
"обратную совместимость с приложениями, которые все ещё работают с локальным "
"временем. Тем не менее, :ref:`как показано выше <naive-datetime-objects>`, "
"это не совсем надёжно и вам следует всегда работать с величинами абсолютного "
"времени (UTC) в вашем коде. Например, используйте :meth:`~datetime.datetime."
"utcfromtimestamp` вместо :meth:`~datetime.datetime.fromtimestamp` и не "
"забудьте установить ``tzinfo`` в :data:`~django.utils.timezone.utc`."

# e9dfb3377eff49fdac96303887a1221d
#: ../../topics/i18n/timezones.txt:167
msgid "Selecting the current time zone"
msgstr "Выбор текущей зоны времени"

# dd0285ea6e284ea6b29a428905dd6e4f
#: ../../topics/i18n/timezones.txt:169
msgid ""
"The current time zone is the equivalent of the current :term:`locale <locale "
"name>` for translations. However, there's no equivalent of the ``Accept-"
"Language`` HTTP header that Django could use to determine the user's time "
"zone automatically. Instead, Django provides :ref:`time zone selection "
"functions <time-zone-selection-functions>`. Use them to build the time zone "
"selection logic that makes sense for you."
msgstr ""
"Зона текущего времени аналогична текущей :term:`локали <locale name>` для "
"переводов. Тем не менее, не существует аналога для HTTP заголовка ``Accept-"
"Language``, который Django может использовать для автоматического "
"определения пользовательской временной зоны. Вместо этого, Django "
"предоставляет :ref:`функции выбора временной зоны <time-zone-selection-"
"functions>`. Используйте их при построении логики выбора временной зоны."

# b30f1462d81044b993624909c5b6802e
#: ../../topics/i18n/timezones.txt:176
msgid ""
"Most Web sites that care about time zones just ask users in which time zone "
"they live and store this information in the user's profile. For anonymous "
"users, they use the time zone of their primary audience or UTC. pytz_ "
"provides helpers_, like a list of time zones per country, that you can use "
"to pre-select the most likely choices."
msgstr ""
"Большинство сайтов, которые заботятся о временных зонах, просто спрашивают "
"пользователя о его зоне и сохраняют эту информацию в профайле. Для анонимных "
"пользователей, такие сайты используют временную зону основной аудитории или "
"UTC. Библиотека pytz_ предоставляет `шпаргалки <helpers>`, например списки "
"временных зон для стран, которые можно использовать для начального "
"наполнения интерфейса."

# bdd788f7ca184b5ab1096993896f3f92
#: ../../topics/i18n/timezones.txt:182
msgid ""
"Here's an example that stores the current timezone in the session. (It skips "
"error handling entirely for the sake of simplicity.)"
msgstr ""
"Ниже приведён пример сохранения текущей зоны времени в сессии. (Пример не "
"использует обработку ошибок для простоты.)"

# fd448587a8d047e581319d70da94a083
#: ../../topics/i18n/timezones.txt:185
msgid "Add the following middleware to :setting:`MIDDLEWARE_CLASSES`::"
msgstr "Добавьте следующую строку в :setting:`MIDDLEWARE_CLASSES`::"

# 85b829948ee0461cb80f90e94fe76f85
#: ../../topics/i18n/timezones.txt:195
msgid "Create a view that can set the current timezone::"
msgstr ""
"Создайте представление, которое может установить текущую зону времени::"

# 1fc91b1d001b4acf8e10b0030847b38d
#: ../../topics/i18n/timezones.txt:207
msgid "Include a form in ``template.html`` that will ``POST`` to this view:"
msgstr ""
"Добавьте форму в ``template.html``, которая будет выполнять ``POST`` запрос "
"к этому предоставлению:"

# 30a6086abe38489085f859837bd052eb
#: ../../topics/i18n/timezones.txt:226
msgid "Time zone aware input in forms"
msgstr "Ввод значений абсолютного времени в формы"

# 7e8dd9dcf2da4edc88bd761b70214d37
#: ../../topics/i18n/timezones.txt:228
msgid ""
"When you enable time zone support, Django interprets datetimes entered in "
"forms in the :ref:`current time zone <default-current-time-zone>` and "
"returns aware datetime objects in ``cleaned_data``."
msgstr ""
"После активации поддержки временных зон, Django интерпретирует значения "
"времени, вводимые в формы относительно :ref:`текущей зоны времени <default-"
"current-time-zone>`, и возвращает объекты абсолютного времени "
"``cleaned_data``."

# d661a3f027cd4420b5940848b0ee870f
#: ../../topics/i18n/timezones.txt:232
msgid ""
"If the current time zone raises an exception for datetimes that don't exist "
"or are ambiguous because they fall in a DST transition (the timezones "
"provided by pytz_ do this), such datetimes will be reported as invalid "
"values."
msgstr ""
"Если текущая зона времени выбрасывает исключение для значений времени, "
"которые не существуют или не могут быть преобразованы из-за перехода на "
"летнее время (временные зоны, предоставляемые через pytz_, так делают), то "
"такие значения времени будут интерпретированы как неправильные."

# 172ff31bc0c348ec89be3c5b79fba86b
#: ../../topics/i18n/timezones.txt:239
msgid "Time zone aware output in templates"
msgstr "Вывод объектов абсолютного времени в шаблонах"

# c90091171c7f4ad4a3ea7d241ad4a445
#: ../../topics/i18n/timezones.txt:241
msgid ""
"When you enable time zone support, Django converts aware datetime objects to "
"the :ref:`current time zone <default-current-time-zone>` when they're "
"rendered in templates. This behaves very much like :doc:`format localization "
"</topics/i18n/formatting>`."
msgstr ""
"После активации поддержки временных зон, Django преобразует объекты "
"абсолютного времени в :ref:`текущую зону времени <default-current-time-"
"zone>` при отображении в шаблоне. Процесс идёт аналогично :doc:`локализации "
"форматирования </topics/i18n/formatting>`."

# 8a3ddded995946088ee94c108c153638
#: ../../topics/i18n/timezones.txt:248
msgid ""
"Django doesn't convert naive datetime objects, because they could be "
"ambiguous, and because your code should never produce naive datetimes when "
"time zone support is enabled. However, you can force conversion with the "
"template filters described below."
msgstr ""
"Django не преобразует объекты относительного времени, так как они могут "
"иметь двухсмысленное значение. Ваш код не должен создавать объекты "
"относительного времени при включенной поддержке временных зон. Тем не менее, "
"вы можете включить принудительную конвертацию с помощью шаблонных фильтров, "
"описанных далее."

# acb335d991fa4af7ba9884baf084c0f3
#: ../../topics/i18n/timezones.txt:253
msgid ""
"Conversion to local time isn't always appropriate -- you may be generating "
"output for computers rather than for humans. The following filters and tags, "
"provided by the ``tz`` template tag library, allow you to control the time "
"zone conversions."
msgstr ""
"Преобразование к локальному времени не всегда полезно, так как данные могут "
"генерироваться для компьютеров, а не для людей. Следующие фильтры и теги, "
"предоставляемые шаблонной библиотекой тегов ``tz``, позволяют вам управлять "
"преобразованиями объектов времени."

# 14d0d4ad41784ec09bb966df14409509
#: ../../topics/i18n/timezones.txt:259
msgid "Template tags"
msgstr "Шаблонные теги"

# 77c9466e291a4383a8d959f0f13da338
# f4b94f3103cd4bbe860eaf80f28e702a
#: ../../topics/i18n/timezones.txt:264 ../../topics/i18n/timezones.txt:341
msgid "localtime"
msgstr "localtime"

# 897fe60be55d40f4bdebd6f282b30b4b
#: ../../topics/i18n/timezones.txt:266
msgid ""
"Enables or disables conversion of aware datetime objects to the current time "
"zone in the contained block."
msgstr ""
"Включает и отключает преобразование объектов абсолютного времени в текущую "
"зону времени в блоке."

# 88d145a4fa3b43299a2ff0a24444d8fa
#: ../../topics/i18n/timezones.txt:269
msgid ""
"This tag has exactly the same effects as the :setting:`USE_TZ` setting as "
"far as the template engine is concerned. It allows a more fine grained "
"control of conversion."
msgstr ""
"Этот тег имеет точно такой же эффект как и параметр :setting:`USE_TZ`, "
"только для шаблонного движка. Он позволяет обеспечить более тонкий контроль "
"над преобразованиями."

# b5d8c6f810fe45828b995016bea6339e
#: ../../topics/i18n/timezones.txt:273
msgid "To activate or deactivate conversion for a template block, use::"
msgstr ""
"Для активации или деактивации преобразований для шаблонного блока, "
"используйте::"

# f3df92e307a840519ea50a9ac8846c37
#: ../../topics/i18n/timezones.txt:287
msgid ""
"The value of :setting:`USE_TZ` isn't respected inside of a ``{% localtime "
"%}`` block."
msgstr ""
"Значение параметра :setting:`USE_TZ` не влияет на содержимое блока ``{% "
"localtime %}``."

# 55763c1c00c1472bb66bbbe1ea3dfaeb
# 97db217a1245401d8a545e3dfa7ebf9b
#: ../../topics/i18n/timezones.txt:293 ../../topics/i18n/timezones.txt:367
msgid "timezone"
msgstr "timezone"

# 81be80c6796d462a8638af4a7ba86157
#: ../../topics/i18n/timezones.txt:295
msgid ""
"Sets or unsets the current time zone in the contained block. When the "
"current time zone is unset, the default time zone applies."
msgstr ""
"Устанавливает или снимает текущую зону времени в блоке. Если зона текущего "
"времени снята, то применяется стандартная зона времени."

# 049a8f9d0822420b9c3539649783602d
#: ../../topics/i18n/timezones.txt:312
msgid ""
"In the second block, ``None`` resolves to the Python object ``None`` because "
"it isn't defined in the template context, not because it's the string "
"``None``."
msgstr ""
"Во втором блоке, ``None`` преобразуется в объект ``None``, так как он не "
"определён в контексте шаблона, а не потому что это строка ``None``."

# 65dcab58f52e42c6954900360fe0c292
#: ../../topics/i18n/timezones.txt:319
msgid "get_current_timezone"
msgstr "get_current_timezone"

# 596c19b3d417490495cd58a08472467f
#: ../../topics/i18n/timezones.txt:321
msgid ""
"When the :func:`django.core.context_processors.tz` context processor is "
"enabled -- by default, it is -- each :class:`~django.template."
"RequestContext` contains a ``TIME_ZONE`` variable that provides the name of "
"the current time zone."
msgstr ""
"При включенном контекстном процессоре  :func:`django.core.context_processors."
"tz`, по умолчанию так и есть, каждый контекст запроса :class:`~django."
"template.RequestContext` содержит переменную ``TIME_ZONE``, которая "
"предоставляет имя для текущую зону времени."

# 346d1fecc5fe4420a472583effcd7344
#: ../../topics/i18n/timezones.txt:326
msgid ""
"If you don't use a :class:`~django.template.RequestContext`, you can obtain "
"this value with the ``get_current_timezone`` tag::"
msgstr ""
"Если вы не используете класс :class:`~django.template.RequestContext`, то вы "
"можете получить это значение с помощью тега ``get_current_timezone``::"

# f4feca13d3b04643aa1fe1612e718773
#: ../../topics/i18n/timezones.txt:332
msgid "Template filters"
msgstr "Шаблонные фильтры"

# 676912c9036f4a5daefaf572eaf35af6
#: ../../topics/i18n/timezones.txt:334
msgid ""
"These filters accept both aware and naive datetimes. For conversion "
"purposes, they assume that naive datetimes are in the default time zone. "
"They always return aware datetimes."
msgstr ""
"Эти фильтры работают с обоими типами объектов времени. Для обеспечения "
"конвертации, они предполагают, что значения относительного времени "
"представлены в текущей зоне времени. Эти фильтры всегда возвращают значения "
"абсолютного времени."

# 83d3e3564426499695d886cf7f3b2cf8
#: ../../topics/i18n/timezones.txt:343
msgid "Forces conversion of a single value to the current time zone."
msgstr ""
"Обеспечивает конвертацию единственного значения в текущую зону времени."

# 19ef9ffc83234b89932cd979aec332ca
# 876d7139c72a425e840ae513c41a4509
# 4ba0be56f003430484447a34b15c4f1a
#: ../../topics/i18n/timezones.txt:345 ../../topics/i18n/timezones.txt:358
#: ../../topics/i18n/timezones.txt:374
msgid "For example::"
msgstr "Например::"

# a51fda8e133d4877997490787e0b08d7
#: ../../topics/i18n/timezones.txt:354
msgid "utc"
msgstr "utc"

# 539b2ad1914f40319cb2b63ccd1e0d31
#: ../../topics/i18n/timezones.txt:356
msgid "Forces conversion of a single value to UTC."
msgstr "Преобразовывает единственное значение к UTC."

# 70c4de77d7e74261b010a601ed74fe41
#: ../../topics/i18n/timezones.txt:369
msgid "Forces conversion of a single value to an arbitrary timezone."
msgstr "Преобразовывает единственное значение к указанной зоне времени."

# 3fb5639ec6614f689017419704144c9c
#: ../../topics/i18n/timezones.txt:371
msgid ""
"The argument must be an instance of a :class:`~datetime.tzinfo` subclass or "
"a time zone name. If it is a time zone name, pytz_ is required."
msgstr ""
"Аргумент должен быть экземпляром потомка класса :class:`~datetime.tzinfo` "
"или именем зоны времени. В последнем случае необходимо наличие pytz_."

# 1ff79a41accd4b59a52cc470af7510a0
#: ../../topics/i18n/timezones.txt:383
msgid "Migration guide"
msgstr "Руководство по миграции"

# fbd692f94b754038807259a7701f66de
#: ../../topics/i18n/timezones.txt:385
msgid ""
"Here's how to migrate a project that was started before Django supported "
"time zones."
msgstr ""
"Здесь описано как провести миграцию старого проекта для поддержки зон "
"времени."

# 54335d90fa1f443a94377acfb9a5f251
#: ../../topics/i18n/timezones.txt:389
msgid "Database"
msgstr "База данных"

# a3f1e527d0b04b6e9a1dbc294ee06a98
#: ../../topics/i18n/timezones.txt:392
msgid "PostgreSQL"
msgstr "PostgreSQL"

# 68dc0e0ca9bb4291832ccc670066db1c
#: ../../topics/i18n/timezones.txt:394
msgid ""
"The PostgreSQL backend stores datetimes as ``timestamp with time zone``. In "
"practice, this means it converts datetimes from the connection's time zone "
"to UTC on storage, and from UTC to the connection's time zone on retrieval."
msgstr ""
"Бэкенд PostgreSQL сохраняет значения времени как ``timestamp with time "
"zone``. Это означает, что он преобразовывает значение в UTC при сохранении и "
"обратно при чтении."

# d3e717a1f7804c4195ba9cc8a26a9bec
#: ../../topics/i18n/timezones.txt:398
msgid ""
"As a consequence, if you're using PostgreSQL, you can switch between "
"``USE_TZ = False`` and ``USE_TZ = True`` freely. The database connection's "
"time zone will be set to :setting:`TIME_ZONE` or ``UTC`` respectively, so "
"that Django obtains correct datetimes in all cases. You don't need to "
"perform any data conversions."
msgstr ""
"Как следствие, при использовании PostgreSQL, вы можете свободно "
"переключаться между ``USE_TZ = False`` и ``USE_TZ = True``. Зона времени "
"базы данных будет установлена соответственно в :setting:`TIME_ZONE` или "
"``UTC``, т.е. Django получает корректные значения времени в любом случае. "
"Вам не требуется выполнять дополнительные преобразования."

# 393b0993d78846378df16d7ac9ac496f
#: ../../topics/i18n/timezones.txt:405
msgid "Other databases"
msgstr "Другие базы данных"

# daf2486f59e34119bb561996a8f39727
#: ../../topics/i18n/timezones.txt:407
msgid ""
"Other backends store datetimes without time zone information. If you switch "
"from ``USE_TZ = False`` to ``USE_TZ = True``, you must convert your data "
"from local time to UTC -- which isn't deterministic if your local time has "
"DST."
msgstr ""
"Остальные бэкэнды сохраняют значения времени без информации о зоне. Если вы "
"переключите с ``USE_TZ = False`` на ``USE_TZ = True``, вам придётся "
"преобразовать значения из локального времени в UTC, что не слишком радует, "
"если у вас используется летнее время."

# be85825d755e4fbf9f5b77f85d221a0e
#: ../../topics/i18n/timezones.txt:412
msgid "Code"
msgstr "Код"

# c22790d5deda4784960b6317546782dc
#: ../../topics/i18n/timezones.txt:414
msgid ""
"The first step is to add :setting:`USE_TZ = True <USE_TZ>` to your settings "
"file and install pytz_ (if possible). At this point, things should mostly "
"work. If you create naive datetime objects in your code, Django makes them "
"aware when necessary."
msgstr ""
"Первым шагом надо добавить :setting:`USE_TZ = True <USE_TZ>` в "
"конфигурационный файл и установить pytz_ (по возможности). После этого почти "
"всё должно заработать. Если вы создаёте объекты относительного времени в "
"вашем коде, Django будет преобразовывать их в объекты абсолютного времени "
"при необходимости."

# 9f308493bc4c48139fdbfdcb7848ac9c
#: ../../topics/i18n/timezones.txt:419
msgid ""
"However, these conversions may fail around DST transitions, which means you "
"aren't getting the full benefits of time zone support yet. Also, you're "
"likely to run into a few problems because it's impossible to compare a naive "
"datetime with an aware datetime. Since Django now gives you aware datetimes, "
"you'll get exceptions wherever you compare a datetime that comes from a "
"model or a form with a naive datetime that you've created in your code."
msgstr ""
"Тем не менее, эти преобразования могут ошибаться при использовании летнего "
"времени (DST), а значит, вы не получаете все преимущества поддержки часовых "
"поясов. Кроме того, вы, вероятно, столкнётесь с некоторыми проблемами при "
"сравнении абсолютных и относительных дат. Так как Django теперь "
"предоставляет вам значения абсолютного времени, вы получите исключения "
"везде, где вы сравниваете значения из моделей или форм со значениями "
"относительного времени, которые вы создаёте в своем коде."

# 280e308e23ba4452bdd238b777512b31
#: ../../topics/i18n/timezones.txt:426
msgid ""
"So the second step is to refactor your code wherever you instantiate "
"datetime objects to make them aware. This can be done incrementally. :mod:"
"`django.utils.timezone` defines some handy helpers for compatibility code: :"
"func:`~django.utils.timezone.now`, :func:`~django.utils.timezone.is_aware`, :"
"func:`~django.utils.timezone.is_naive`, :func:`~django.utils.timezone."
"make_aware`, and :func:`~django.utils.timezone.make_naive`."
msgstr ""
"Вторым шагом будет рефакторинг вашего кода в местах, где вы создаёте "
"значения времени, теперь они должны быть абсолютными. Это может быть сделано "
"постепенно. В модуле :mod:`django.utils.timezone` определены несколько "
"вспомогательных функций: :func:`~django.utils.timezone.now`, :func:`~django."
"utils.timezone.is_aware`, :func:`~django.utils.timezone.is_naive`, :func:"
"`~django.utils.timezone.make_aware` и :func:`~django.utils.timezone."
"make_naive`."

# bf41b698ad9e43d1849b94658e21af41
#: ../../topics/i18n/timezones.txt:435
msgid ""
"Finally, in order to help you locate code that needs upgrading, Django "
"raises a warning when you attempt to save a naive datetime to the database::"
msgstr ""
"Наконец, для того, чтобы помочь вам найти код, который нуждается в "
"модернизации, Django выдаёт предупреждение при попытке сохранить значение "
"относительного времени в базу данных::"

# 3314aee3861e407b8feae90ce4af8661
#: ../../topics/i18n/timezones.txt:440
msgid ""
"During development, you can turn such warnings into exceptions and get a "
"traceback by adding the following to your settings file::"
msgstr ""
"На время разработки, вы можете превратить такие предупреждения в исключения "
"и получить трассировки, добавив следующие строки в ваш файл настроек::"

# 0043bc767b844973b6f07c0777b9cf75
#: ../../topics/i18n/timezones.txt:449
msgid "Fixtures"
msgstr "Фикстуры"

# 2f484ccb647645b981589745f4b83f4a
#: ../../topics/i18n/timezones.txt:451
msgid ""
"When serializing an aware datetime, the UTC offset is included, like this::"
msgstr ""
"При сериализации значений абсолютного времени добавляется смещение "
"относительно UTC, подобно этому::"

# eea891e04b1a4ebeb135198f1cd997ed
#: ../../topics/i18n/timezones.txt:455
msgid "For a naive datetime, it obviously isn't::"
msgstr "Для значений относительного времени такого не происходит::"

# dfff3b2dbd8b4543ab58d4a931b6ba8f
#: ../../topics/i18n/timezones.txt:459
msgid ""
"For models with :class:`~django.db.models.DateTimeField`\\ s, this "
"difference makes it impossible to write a fixture that works both with and "
"without time zone support."
msgstr ""
"Для моделей с полями :class:`~django.db.models.DateTimeField` такая разница "
"в поведении делает невозможным создание фикстуры, которая может применяться "
"в обоих режимах поддержки часовых поясов."

# 7b6dae7480204dc98b21ecf56d3b7f0f
#: ../../topics/i18n/timezones.txt:463
msgid ""
"Fixtures generated with ``USE_TZ = False``, or before Django 1.4, use the "
"\"naive\" format. If your project contains such fixtures, after you enable "
"time zone support, you'll see :exc:`RuntimeWarning`\\ s when you load them. "
"To get rid of the warnings, you must convert your fixtures to the \"aware\" "
"format."
msgstr ""

# ec402ad60e254c5785427401e7d954d3
#: ../../topics/i18n/timezones.txt:468
msgid ""
"You can regenerate fixtures with :djadmin:`loaddata` then :djadmin:"
"`dumpdata`. Or, if they're small enough, you can simply edit them to add the "
"UTC offset that matches your :setting:`TIME_ZONE` to each serialized "
"datetime."
msgstr ""

# afedc713d7fa421da26af9fb1de79b25
#: ../../topics/i18n/timezones.txt:475
msgid "FAQ"
msgstr ""

# f0287ebfb6d04c0dbb7692f7f23f5d50
#: ../../topics/i18n/timezones.txt:478
msgid "Setup"
msgstr ""

# 16670027c54c455b8f4a2681c7d82df3
#: ../../topics/i18n/timezones.txt:480
msgid ""
"**I don't need multiple time zones. Should I enable time zone support?**"
msgstr ""

# 73f29b1dec6c441ba8c86e967ba1a215
#: ../../topics/i18n/timezones.txt:482
msgid ""
"Yes. When time zone support is enabled, Django uses a more accurate model of "
"local time. This shields you from subtle and unreproducible bugs around "
"Daylight Saving Time (DST) transitions."
msgstr ""

# 5e7a9ff23a2f4c92b79ba0664e73873f
#: ../../topics/i18n/timezones.txt:486
msgid ""
"In this regard, time zones are comparable to ``unicode`` in Python. At first "
"it's hard. You get encoding and decoding errors. Then you learn the rules. "
"And some problems disappear -- you never get mangled output again when your "
"application receives non-ASCII input."
msgstr ""

# 868479854acd4da093ae9e445667cd32
#: ../../topics/i18n/timezones.txt:491
msgid ""
"When you enable time zone support, you'll encounter some errors because "
"you're using naive datetimes where Django expects aware datetimes. Such "
"errors show up when running tests and they're easy to fix. You'll quickly "
"learn how to avoid invalid operations."
msgstr ""

# 338edd9dfa6d4451b3a3cb679d320e7a
#: ../../topics/i18n/timezones.txt:496
msgid ""
"On the other hand, bugs caused by the lack of time zone support are much "
"harder to prevent, diagnose and fix. Anything that involves scheduled tasks "
"or datetime arithmetic is a candidate for subtle bugs that will bite you "
"only once or twice a year."
msgstr ""

# 7774ab5727fb4c47961458e31c4509d0
#: ../../topics/i18n/timezones.txt:501
msgid ""
"For these reasons, time zone support is enabled by default in new projects, "
"and you should keep it unless you have a very good reason not to."
msgstr ""

# f66b09dc6563447ca239bb19d1ad30f3
#: ../../topics/i18n/timezones.txt:504
msgid "**I've enabled time zone support. Am I safe?**"
msgstr ""

# 63f59ed3ae624fd5ab92e4f28f22d3df
#: ../../topics/i18n/timezones.txt:506
msgid ""
"Maybe. You're better protected from DST-related bugs, but you can still "
"shoot yourself in the foot by carelessly turning naive datetimes into aware "
"datetimes, and vice-versa."
msgstr ""

# 4bf3bcb4d8fd42058ce337928e8d1577
#: ../../topics/i18n/timezones.txt:510
msgid ""
"If your application connects to other systems -- for instance, if it queries "
"a Web service -- make sure datetimes are properly specified. To transmit "
"datetimes safely, their representation should include the UTC offset, or "
"their values should be in UTC (or both!)."
msgstr ""

# 4f32cf664b9a435ca1bfc05b70279839
#: ../../topics/i18n/timezones.txt:515
msgid ""
"Finally, our calendar system contains interesting traps for computers::"
msgstr ""

# 0206ef7fe0714b5ea29c3854a5622b2b
#: ../../topics/i18n/timezones.txt:527
msgid ""
"(To implement this function, you must decide whether 2012-02-29 minus one "
"year is 2011-02-28 or 2011-03-01, which depends on your business "
"requirements.)"
msgstr ""

# b8e95573e328498b9c57ff50fb75c469
#: ../../topics/i18n/timezones.txt:531
msgid "**Should I install pytz?**"
msgstr ""

# 87aa98b565f6497db1f843f19ce93716
#: ../../topics/i18n/timezones.txt:533
msgid ""
"Yes. Django has a policy of not requiring external dependencies, and for "
"this reason pytz_ is optional. However, it's much safer to install it."
msgstr ""

# 94015c3b53d24b13ae3a976d35df0dbb
#: ../../topics/i18n/timezones.txt:536
msgid ""
"As soon as you activate time zone support, Django needs a definition of the "
"default time zone. When pytz is available, Django loads this definition from "
"the `tz database`_. This is the most accurate solution. Otherwise, it relies "
"on the difference between local time and UTC, as reported by the operating "
"system, to compute conversions. This is less reliable, especially around DST "
"transitions."
msgstr ""

# a989e944e8aa4f88843e5b512ef6a941
#: ../../topics/i18n/timezones.txt:543
msgid ""
"Furthermore, if you want to support users in more than one time zone, pytz "
"is the reference for time zone definitions."
msgstr ""

# a2c44d4a3ada4e7e9c82b91aab0ecde3
#: ../../topics/i18n/timezones.txt:547
msgid "Troubleshooting"
msgstr ""

# 6c7fcb16ffce4ab39ba842ea095ff4f7
#: ../../topics/i18n/timezones.txt:549
msgid ""
"**My application crashes with** ``TypeError: can't compare offset-naive`` "
"``and offset-aware datetimes`` **-- what's wrong?**"
msgstr ""

# 82e590330b234d53a2059fc78b3a4c34
#: ../../topics/i18n/timezones.txt:552
msgid ""
"Let's reproduce this error by comparing a naive and an aware datetime::"
msgstr ""

# 28fa2f17a8b040d6aecdf6fb08f77cb2
#: ../../topics/i18n/timezones.txt:563
msgid ""
"If you encounter this error, most likely your code is comparing these two "
"things:"
msgstr ""

# 6d086d6c4a1d4f07aa678ce3e21d4779
#: ../../topics/i18n/timezones.txt:566
msgid ""
"a datetime provided by Django -- for instance, a value read from a form or a "
"model field. Since you enabled time zone support, it's aware."
msgstr ""

# bcd209543da0485494cbdf39e759c0f8
#: ../../topics/i18n/timezones.txt:568
msgid ""
"a datetime generated by your code, which is naive (or you wouldn't be "
"reading this)."
msgstr ""

# 051895704a8d4994ada05cbf62ea5b44
#: ../../topics/i18n/timezones.txt:571
msgid ""
"Generally, the correct solution is to change your code to use an aware "
"datetime instead."
msgstr ""

# b432ce3746384ef0b2c21197897ab420
#: ../../topics/i18n/timezones.txt:574
msgid ""
"If you're writing a pluggable application that's expected to work "
"independently of the value of :setting:`USE_TZ`, you may find :func:`django."
"utils.timezone.now` useful. This function returns the current date and time "
"as a naive datetime when ``USE_TZ = False`` and as an aware datetime when "
"``USE_TZ = True``. You can add or subtract :class:`datetime.timedelta` as "
"needed."
msgstr ""

# 3dfc18e0f319479696847a2ade61e0e2
#: ../../topics/i18n/timezones.txt:581
msgid ""
"**I see lots of** ``RuntimeWarning: DateTimeField received a naive "
"datetime`` ``(YYYY-MM-DD HH:MM:SS)`` ``while time zone support is active`` "
"**-- is that bad?**"
msgstr ""

# 17e30555985e4f9aadac541d2dbd24bb
#: ../../topics/i18n/timezones.txt:585
msgid ""
"When time zone support is enabled, the database layer expects to receive "
"only aware datetimes from your code. This warning occurs when it receives a "
"naive datetime. This indicates that you haven't finished porting your code "
"for time zone support. Please refer to the :ref:`migration guide <time-zones-"
"migration-guide>` for tips on this process."
msgstr ""

# 94b4ced100894e6a90cfd9ddf332f5a4
#: ../../topics/i18n/timezones.txt:591
msgid ""
"In the meantime, for backwards compatibility, the datetime is considered to "
"be in the default time zone, which is generally what you expect."
msgstr ""

# c651f684ffcb4b7d8fc489d0bb7b940a
#: ../../topics/i18n/timezones.txt:594
msgid "``now.date()`` **is yesterday! (or tomorrow)**"
msgstr ""

# 72cc66428fd54490b59d7a5efac3591d
#: ../../topics/i18n/timezones.txt:596
msgid ""
"If you've always used naive datetimes, you probably believe that you can "
"convert a datetime to a date by calling its :meth:`~datetime.datetime.date` "
"method. You also consider that a :class:`~datetime.date` is a lot like a :"
"class:`~datetime.datetime`, except that it's less accurate."
msgstr ""

# aad56efe4f3f4f0cabf1c27c4770f368
#: ../../topics/i18n/timezones.txt:601
msgid "None of this is true in a time zone aware environment::"
msgstr ""

# 82635f49c4044591aa6a14b302cf04fc
#: ../../topics/i18n/timezones.txt:619
msgid ""
"As this example shows, the same datetime has a different date, depending on "
"the time zone in which it is represented. But the real problem is more "
"fundamental."
msgstr ""

# 12aa34430df04a73bce4f1537fd0c1fe
#: ../../topics/i18n/timezones.txt:623
msgid ""
"A datetime represents a **point in time**. It's absolute: it doesn't depend "
"on anything. On the contrary, a date is a **calendaring concept**. It's a "
"period of time whose bounds depend on the time zone in which the date is "
"considered. As you can see, these two concepts are fundamentally different, "
"and converting a datetime to a date isn't a deterministic operation."
msgstr ""

# 0974996067be48269bfdf70181142be6
#: ../../topics/i18n/timezones.txt:629
msgid "What does this mean in practice?"
msgstr ""

# f3ed8a9626aa4be6b0b55ffdb0c48781
#: ../../topics/i18n/timezones.txt:631
msgid ""
"Generally, you should avoid converting a :class:`~datetime.datetime` to :"
"class:`~datetime.date`. For instance, you can use the :tfilter:`date` "
"template filter to only show the date part of a datetime. This filter will "
"convert the datetime into the current time zone before formatting it, "
"ensuring the results appear correctly."
msgstr ""

# a251469037804d6f90fd3901cf574301
#: ../../topics/i18n/timezones.txt:637
msgid ""
"If you really need to do the conversion yourself, you must ensure the "
"datetime is converted to the appropriate time zone first. Usually, this will "
"be the current timezone::"
msgstr ""

# 672207efc0a9481d91dd79fc64f320f7
#: ../../topics/i18n/timezones.txt:654
msgid "Usage"
msgstr ""

# b18ce2ca9ff2403e8e333ac435a95cf3
#: ../../topics/i18n/timezones.txt:656
msgid ""
"**I have a string** ``\"2012-02-21 10:28:45\"`` **and I know it's in the** "
"``\"Europe/Helsinki\"`` **time zone. How do I turn that into an aware "
"datetime?**"
msgstr ""

# 4f0040303f1a4dd4bbf53ef78d96b807
#: ../../topics/i18n/timezones.txt:660
msgid "This is exactly what pytz_ is for."
msgstr ""

# 061cb504cf274cf9870bc2b71ce85837
#: ../../topics/i18n/timezones.txt:668
msgid ""
"Note that ``localize`` is a pytz extension to the :class:`~datetime.tzinfo` "
"API. Also, you may want to catch :exc:`~pytz.InvalidTimeError`. The "
"documentation of pytz contains `more examples`_. You should review it before "
"attempting to manipulate aware datetimes."
msgstr ""

# db32d1c78b1440b6bdb63559b26959cd
#: ../../topics/i18n/timezones.txt:673
msgid "**How can I obtain the current time in the local time zone?**"
msgstr ""

# 6ac27590b8274f4ab6604391b455adb2
#: ../../topics/i18n/timezones.txt:675
msgid "Well, the first question is, do you really need to?"
msgstr ""

# 79ae3f2586a146c6ae2d7740ce92acd9
#: ../../topics/i18n/timezones.txt:677
msgid ""
"You should only use local time when you're interacting with humans, and the "
"template layer provides :ref:`filters and tags <time-zones-in-templates>` to "
"convert datetimes to the time zone of your choice."
msgstr ""

# aea5477d4fa4437695f10cd9cd11f253
#: ../../topics/i18n/timezones.txt:681
msgid ""
"Furthermore, Python knows how to compare aware datetimes, taking into "
"account UTC offsets when necessary. It's much easier (and possibly faster) "
"to write all your model and view code in UTC. So, in most circumstances, the "
"datetime in UTC returned by :func:`django.utils.timezone.now` will be "
"sufficient."
msgstr ""

# e2ff403203fa401a907de094d79774d7
#: ../../topics/i18n/timezones.txt:687
msgid ""
"For the sake of completeness, though, if you really wanted the current time "
"in the local time zone, here's how you would obtain it::"
msgstr ""

# 11b91daaca0c4463b67fba5005166a1c
#: ../../topics/i18n/timezones.txt:695
msgid ""
"In this example, pytz_ is installed and :setting:`TIME_ZONE` is ``\"Europe/"
"Paris\"``."
msgstr ""

# 40d8c660e8024c778be443acbef2ab5f
#: ../../topics/i18n/timezones.txt:698
msgid "**How can I see all available time zones?**"
msgstr ""

# 30a295e68944480aae504daac2f77794
#: ../../topics/i18n/timezones.txt:700
msgid ""
"pytz_ provides helpers_, including a list of current time zones and a list "
"of all available time zones -- some of which are only of historical interest."
""
msgstr ""
