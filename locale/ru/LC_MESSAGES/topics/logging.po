# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated <>, 2012, 2013.
# Dmitriy Kostochko <alerion.um@gmail.com>, 2013.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-08-21 17:15\n"
"PO-Revision-Date: 2013-08-22 01:32+0400\n"
"Last-Translator: Dmitriy Kostochko <alerion.um@gmail.com>\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# 6e8078b0131647019da9f6dbc327ec1f
#: ../../topics/logging.txt:3
msgid "Logging"
msgstr "Логгирование"

# 286d8b8bab4f4c4caa1f21d0ee030b92
#: ../../topics/logging.txt:9
msgid "A quick logging primer"
msgstr "Быстрый пример использования логирования"

# f5b8c11d868f47b8a8f92bd78930507d
#: ../../topics/logging.txt:11
msgid ""
"Django uses Python's builtin :mod:`logging` module to perform system "
"logging. The usage of this module is discussed in detail in Python's own "
"documentation. However, if you've never used Python's logging framework (or "
"even if you have), here's a quick primer."
msgstr ""
"Django использует встроенный модуль Python :mod:`logging` для системного "
"логирования. Подробности об использовании этого модуля описаны в "
"документации модуля. Но для тех, кто никогда не использовал этот модуль (да "
"и для тех кто использовал), мы приводим небольшой пример."

# 62ea5402e7ee4d1590b3c0b12861b7f4
#: ../../topics/logging.txt:17
msgid "The cast of players"
msgstr "Действующие лица"

# 2359972ef1054a3084f167f65a7a759c
#: ../../topics/logging.txt:19
msgid "A Python logging configuration consists of four parts:"
msgstr "Конфигурация логирования в Python состоит из четырех частей:"

# bbc96cb2079c404682574683fe74c831
#: ../../topics/logging.txt:21
msgid ":ref:`topic-logging-parts-loggers`"
msgstr ":ref:`topic-logging-parts-loggers`"

# 865437f0b20f47d1b9437b7f9987725f
#: ../../topics/logging.txt:22
msgid ":ref:`topic-logging-parts-handlers`"
msgstr ":ref:`topic-logging-parts-handlers`"

# a9bef536ccd743109cfa458dbaba67c0
#: ../../topics/logging.txt:23
msgid ":ref:`topic-logging-parts-filters`"
msgstr ":ref:`topic-logging-parts-filters`"

# d68b10973a3a47aebcae08ecf178c432
#: ../../topics/logging.txt:24
msgid ":ref:`topic-logging-parts-formatters`"
msgstr ":ref:`topic-logging-parts-formatters`"

# b56b85fac98c49199c625106a0b4ccda
# 815a3a04101f4164bb8dd9e7ef0c60b1
#: ../../topics/logging.txt:29 ../../topics/logging.txt:395
msgid "Loggers"
msgstr "Loggers(Логеры)"

# 600bba1092a24b5fbeb982ec7306faef
#: ../../topics/logging.txt:31
msgid ""
"A logger is the entry point into the logging system. Each logger is a named "
"bucket to which messages can be written for processing."
msgstr ""
"Логер -- это точка входа в систему логирования. Каждый логер как именованный "
"канал для сообщений, в который они отправляются для обработки."

# ba2fa757ae7241e5a8136e71b315de2f
#: ../../topics/logging.txt:34
msgid ""
"A logger is configured to have a *log level*. This log level describes the "
"severity of the messages that the logger will handle. Python defines the "
"following log levels:"
msgstr ""
"У каждого логера есть *уровень логирования*(log level). Уровень логирования "
"указывает важность принимаемых сообщений. Python определяет следующие уровни "
"логирования:"

# 53b8a03f192c4f6f8016ec95f167b33c
#: ../../topics/logging.txt:38
msgid "``DEBUG``: Low level system information for debugging purposes"
msgstr ""
"``DEBUG``: Низкий уровень логирования системной информации для последующего "
"использования в отладке"

# f08470ab7f164ccf802c6a0a88752787
#: ../../topics/logging.txt:40
msgid "``INFO``: General system information"
msgstr "``INFO``: Общая системная информация"

# c83af74b75614a1785386f17fb21f860
#: ../../topics/logging.txt:42
msgid "``WARNING``: Information describing a minor problem that has occurred."
msgstr ""
"``WARNING``: Информация о мелких проблемах возникших при работе приложения"

# dc4dd527a7cc49ba97a431bf01aa2218
#: ../../topics/logging.txt:45
msgid "``ERROR``: Information describing a major problem that has occurred."
msgstr "``ERROR``: Информация об ошибках возникших при работе приложения"

# 5bbc9abb977f4ab194f4b93c95202c65
#: ../../topics/logging.txt:48
msgid ""
"``CRITICAL``: Information describing a critical problem that has occurred."
msgstr "``CRITICAL``: Информация о критических ошибках"

# 158a30f7930d4ba08ce9a2203afc0cb1
#: ../../topics/logging.txt:51
msgid ""
"Each message that is written to the logger is a *Log Record*. Each log "
"record also has a *log level* indicating the severity of that specific "
"message. A log record can also contain useful metadata that describes the "
"event that is being logged. This can include details such as a stack trace "
"or an error code."
msgstr ""
"Каждое сообщение записанное в логер называется *Log Record(Запись)*. Каждая "
"запись содержит *уровень логирования*, который указывает важность сообщения. "
"Сообщение так же может содержать метаданные, которые описывают произошедшее "
"событие. Метаданные могут содержать код ошибки или отладочную информацию."

# 681c628eb70a434d9e53684d13185b45
#: ../../topics/logging.txt:57
msgid ""
"When a message is given to the logger, the log level of the message is "
"compared to the log level of the logger. If the log level of the message "
"meets or exceeds the log level of the logger itself, the message will "
"undergo further processing. If it doesn't, the message will be ignored."
msgstr ""
"Когда сообщение передается в логер, уровень логирования сообщения "
"сравнивается с уровнем логирования логера. Если уровень логирования "
"сообщения равен или выше уровню логирования логера, сообщение будет "
"обработано, иначе - проигнорировано."

# 7338dbb096ed4f42a79f10c75d04ee88
#: ../../topics/logging.txt:63
msgid ""
"Once a logger has determined that a message needs to be processed, it is "
"passed to a *Handler*."
msgstr ""
"После того, как логер принял сообщение на обработку, оно передается в "
"*Handler(Обработчик)*."

# a5a29475234b4a4cbee57ebc94e7207f
# 5c80f3bde46740fbbcbe095c52fcce8a
#: ../../topics/logging.txt:69 ../../topics/logging.txt:438
msgid "Handlers"
msgstr "Handlers(Обработчики)"

# f4bcc43d3f694ddc9aa179da2ae8f3c2
#: ../../topics/logging.txt:71
msgid ""
"The handler is the engine that determines what happens to each message in a "
"logger. It describes a particular logging behavior, such as writing a "
"message to the screen, to a file, or to a network socket."
msgstr ""
"Обработчик определяет что делать с сообщением пришедшим из логера. Он "
"определяет поведение логирования, например: вывести сообщение на экран, "
"записать в файл или сокет."

# 9adca71d48f842449512c992e26154d4
#: ../../topics/logging.txt:75
msgid ""
"Like loggers, handlers also have a log level. If the log level of a log "
"record doesn't meet or exceed the level of the handler, the handler will "
"ignore the message."
msgstr ""
"Как и логеры, обработчики имеют уровень логирования. Если уровень "
"логирования сообщения ниже уровня логирования обработчика, сообщение будет "
"проигнорировано."

# bcc69169224b4af2a527ac424c7fa9bc
#: ../../topics/logging.txt:79
msgid ""
"A logger can have multiple handlers, and each handler can have a different "
"log level. In this way, it is possible to provide different forms of "
"notification depending on the importance of a message. For example, you "
"could install one handler that forwards ``ERROR`` and ``CRITICAL`` messages "
"to a paging service, while a second handler logs all messages (including "
"``ERROR`` and ``CRITICAL`` messages) to a file for later analysis."
msgstr ""
"Логер может содержать несколько обработчик, который могут иметь различный "
"уровень логирования. Это позволяет обрабатывать сообщения в соответствии с "
"их уровнем важности. Например, вы можете установить обработчик для ``ERROR`` "
"и ``CRITICAL`` сообщений, который будет отправлять через какой-то сервер "
"сообщений, и в то же время обработчик записывающий все сообщения (включая "
"``ERROR`` и ``CRITICAL``) в файл."

# 192d63212f9d4c768e953b27c335737a
# 2f1ea294876240419613bf41522acdae
#: ../../topics/logging.txt:90 ../../topics/logging.txt:483
msgid "Filters"
msgstr "Filters(Фильтры)"

# 005a594f62224a589f6d7fd584989735
#: ../../topics/logging.txt:92
msgid ""
"A filter is used to provide additional control over which log records are "
"passed from logger to handler."
msgstr ""
"Фильтры предоставляют дополнительный контроль над тем, какие сообщения будут "
"переданы из логера в обработчик."

# f1a3b46e9f524a81b08f85b58619ace9
#: ../../topics/logging.txt:95
msgid ""
"By default, any log message that meets log level requirements will be "
"handled. However, by installing a filter, you can place additional criteria "
"on the logging process. For example, you could install a filter that only "
"allows ``ERROR`` messages from a particular source to be emitted."
msgstr ""
"По умолчанию все сообщения, прошедшие проверку уровня логирования, будут "
"переданы в обработчик. Добавив фильтры вы можете определить дополнительные "
"правила проверки при обработке сообщений. Например, вы можете добавить "
"фильтр, который позволяет обрабатывать ``ERROR`` сообщения отправленные "
"определенным источником."

# fc12de3759b2490b8fcd6213b1d20c71
#: ../../topics/logging.txt:101
msgid ""
"Filters can also be used to modify the logging record prior to being "
"emitted. For example, you could write a filter that downgrades ``ERROR`` log "
"records to ``WARNING`` records if a particular set of criteria are met."
msgstr ""
"Фильтры так же могу изменить сообщение. Например, вы можете создать фильтр, "
"который изменяет уровень логирования определенных сообщения с ``ERROR`` на "
"``WARNING``."

# fad41dd2ac714f3c98bc7851b4863b4e
#: ../../topics/logging.txt:106
msgid ""
"Filters can be installed on loggers or on handlers; multiple filters can be "
"used in a chain to perform multiple filtering actions."
msgstr ""
"Фильтр могут быть добавлены к логеру или обработчику, можно использовать "
"несколько фильтров."

# d22ae59a11e84e38a4f99ea8329ee449
#: ../../topics/logging.txt:112
msgid "Formatters"
msgstr "Formatters(Форматер)"

# bf44f2713f0c485bbd5b7de5543aba19
#: ../../topics/logging.txt:114
msgid ""
"Ultimately, a log record needs to be rendered as text. Formatters describe "
"the exact format of that text. A formatter usually consists of a Python "
"formatting string; however, you can also write custom formatters to "
"implement specific formatting behavior."
msgstr ""
"В результат сообщение должно быть представлено как текст. Форматеры "
"определяют формат полученного текста. Обычно это строка форматирования "
"Python, но вы так же можете создать собственный класс форматера."

# 189889688036465abeb362ce5311124d
#: ../../topics/logging.txt:120
msgid "Using logging"
msgstr "Использование логирования"

# d03a4427ec8940dbace15d918466c136
#: ../../topics/logging.txt:122
msgid ""
"Once you have configured your loggers, handlers, filters and formatters, you "
"need to place logging calls into your code. Using the logging framework is "
"very simple. Here's an example::"
msgstr ""
"После настройки логеров, обработчиков, фильтров и форматеров, добавим "
"логирование в наш код. Использовать логирование очень просто. Вот небольшой "
"пример::"

# 7ee79a4ed9e449898dba7f26a6378f3b
#: ../../topics/logging.txt:138
msgid ""
"And that's it! Every time the ``bad_mojo`` condition is activated, an error "
"log record will be written."
msgstr ""
"Это все! При каждой успешной проверке условия ``bad_mojo`` будет записано "
"сообщение ошибки."

# 8042454252fe4bf2a5862d45fc6b7f5e
#: ../../topics/logging.txt:142
msgid "Naming loggers"
msgstr "Именование логеров"

# 8b1369bba6ae4cf081be9d155a3da38f
#: ../../topics/logging.txt:144
msgid ""
"The call to :func:`logging.getLogger()` obtains (creating, if necessary) an "
"instance of a logger. The logger instance is identified by a name. This name "
"is used to identify the logger for configuration purposes."
msgstr ""
"Вызов :meth:`logging.getLogger()` возвращает (создает при необходимости) "
"экземпляр логера. Экземпляру логера может назначить имя. Это имя "
"используется при настройке журналирования."

# 2783c7a752fe46f4be64482d3d14bcbd
#: ../../topics/logging.txt:149
msgid ""
"By convention, the logger name is usually ``__name__``, the name of the "
"python module that contains the logger. This allows you to filter and handle "
"logging calls on a per-module basis. However, if you have some other way of "
"organizing your logging messages, you can provide any dot-separated name to "
"identify your logger::"
msgstr ""
"Для удобства обычно используется ``__name__`` в качестве названия -- "
"название модуля, который содержит логер. Это позволяет вам управлять "
"логированием на уровне модулей. Однако, если вы используете другую систему "
"организации сообщений, вы может использовать любое составное название, "
"разделенное точками::"

# 04c2b7c880844ffdb463358d03af8f2e
#: ../../topics/logging.txt:158
msgid ""
"The dotted paths of logger names define a hierarchy. The ``project."
"interesting`` logger is considered to be a parent of the ``project."
"interesting.stuff`` logger; the ``project`` logger is a parent of the "
"``project.interesting`` logger."
msgstr ""
"Точки в названии логера позволяют определять иерархию. Логер ``project."
"interesting`` считается родительским по отношению к логеру ``project."
"interesting.stuff``; логер ``project`` родительским по отношению к ``project."
"interesting``."

# edca0e3afba44852b553cf16d8013f57
#: ../../topics/logging.txt:163
msgid ""
"Why is the hierarchy important? Well, because loggers can be set to "
"*propagate* their logging calls to their parents. In this way, you can "
"define a single set of handlers at the root of a logger tree, and capture "
"all logging calls in the subtree of loggers. A logging handler defined in "
"the ``project`` namespace will catch all logging messages issued on the "
"``project.interesting`` and ``project.interesting.stuff`` loggers."
msgstr ""
"Почему иерархия так важна? Потому что логеры могут быть настроены на "
"*передачу* сообщений родительским логерам. Таким образом вы можете "
"определить один обработчик для корневого логера и обрабатывать сообщения ко "
"всем дочерним логерам. Обработчик назначенный логеру ``project`` будет "
"обрабатывать сообщения к ``project.interesting`` и ``project.interesting."
"stuff``."

# 6d98d2ee1b9649178aaad82816919e2f
#: ../../topics/logging.txt:171
msgid ""
"This propagation can be controlled on a per-logger basis. If you don't want "
"a particular logger to propagate to it's parents, you can turn off this "
"behavior."
msgstr ""
"Передачу сообщений можно настроить для конкретного логера. Если вы не хотите "
"что бы определенный логер передавал свои сообщения родительского логеру, вы "
"можете отключить такое поведение."

# c14d54de1d804f83b405850ed5282a61
#: ../../topics/logging.txt:176
msgid "Making logging calls"
msgstr "Функции логирования"

# fdb41f96d23a44f59cacf47c1666a5ff
#: ../../topics/logging.txt:178
msgid ""
"The logger instance contains an entry method for each of the default log "
"levels:"
msgstr "Логер предоставляет методы для каждого уровня логирования:"

# c41a34db2fc84c7aa68c000f79d7893a
#: ../../topics/logging.txt:181
msgid "``logger.critical()``"
msgstr "``logger.critical()``"

# 38580d8fcfee437ebd7c69b0e5d56e29
#: ../../topics/logging.txt:182
msgid "``logger.error()``"
msgstr "``logger.error()``"

# 2b84f60ffde3433ea2744c8ae4e2584b
#: ../../topics/logging.txt:183
msgid "``logger.warning()``"
msgstr "``logger.warning()``"

# bf0fdea3676545f8bdcc67abf8e6e656
#: ../../topics/logging.txt:184
msgid "``logger.info()``"
msgstr "``logger.info()``"

# 3c882cca71f449d6a992abbbb9ebc93b
#: ../../topics/logging.txt:185
msgid "``logger.debug()``"
msgstr "``logger.debug()``"

# d8b03ff44c6d41389a2ee639ea933e5c
#: ../../topics/logging.txt:187
msgid "There are two other logging calls available:"
msgstr "Так же есть два дополнительных метода:"

# 1e7649548fa4414aafba4f6c212b145a
#: ../../topics/logging.txt:189
msgid ""
"``logger.log()``: Manually emits a logging message with a specific log level."
msgstr "``logger.log()``: отправить сообщение с указанным уровнем логирования"

# 0e446a7d496a4aaaa75af29754dfa09e
#: ../../topics/logging.txt:192
msgid ""
"``logger.exception()``: Creates an ``ERROR`` level logging message wrapping "
"the current exception stack frame."
msgstr ""
"``logger.exception()``: Создать ``ERROR`` сообщение из последнего исключения"
"(*пер.* the current exception stack frame)."

# 149046927d934267abc3aff09407cf90
#: ../../topics/logging.txt:198
msgid "Configuring logging"
msgstr "Настройка логирования"

# a5c8c8a042d042c58f4d34ff0dcabfd2
#: ../../topics/logging.txt:200
msgid ""
"Of course, it isn't enough to just put logging calls into your code. You "
"also need to configure the loggers, handlers, filters and formatters to "
"ensure that logging output is output in a useful way."
msgstr ""
"Конечно же не достаточно просто добавить вызов функций логирования в ваш "
"код. Вы так же должны настроить логеры, обработчики, фильтры и форматеры что "
"бы сообщения попали в нужное место."

# 184755f6817649f6b401ca12fcdab43f
#: ../../topics/logging.txt:204
msgid ""
"Python's logging library provides several techniques to configure logging, "
"ranging from a programmatic interface to configuration files. By default, "
"Django uses the `dictConfig format`_."
msgstr ""
"Библиотека логирования Python предоставляет несколько способов настроить "
"логирования -- от программного интерфейса и до конфигурационных файлов. По "
"умолчанию Django использует `dictConfig формат <http://docs.python.org/"
"library/logging.config.html#configuration-dictionary-schema>`_."

# c2f0ec0c90cd4612b0dba1be011e3345
#: ../../topics/logging.txt:209
msgid ""
"``logging.dictConfig`` is a builtin library in Python 2.7. In order to make "
"this library available for users of earlier Python versions, Django includes "
"a copy as part of ``django.utils.log``. If you have Python 2.7 or later, the "
"system native library will be used; if you have Python 2.6, Django's copy "
"will be used."
msgstr ""
"Библиотека ``logging.dictConfig`` встроена в Python 2.7. Для того, чтобы "
"предоставить доступ к библиотеке для пользователей других версий Python, "
"Django содержит копию в ``django.utils.log``. Если вы используете Python "
"2.7, будет использоваться системная версия модуля. Если вы используете "
"Python 2.6 и ниже, будет использоваться копия модуля из Django."

# 46cdb29d372e4a25b40c14a46519434e
#: ../../topics/logging.txt:215
msgid ""
"In order to configure logging, you use :setting:`LOGGING` to define a "
"dictionary of logging settings. These settings describes the loggers, "
"handlers, filters and formatters that you want in your logging setup, and "
"the log levels and other properties that you want those components to have."
msgstr ""
"Для настройки логирования используется настройка :setting:`LOGGING`. Эта "
"настройка описывает логеры, обработчики, фильтры и форматеры а так же их "
"параметры."

# 575133bc6d9b4002be13973f462ecfc5
#: ../../topics/logging.txt:221
msgid ""
"Prior to Django 1.5, the :setting:`LOGGING` setting overwrote the :ref:"
"`default Django logging configuration <default-logging-configuration>`. From "
"Django 1.5 forward, the project's logging configuration is merged with "
"Django's defaults, hence you can decide if you want to add to, or replace "
"the existing configuration. To completely override the default "
"configuration, set the ``disable_existing_loggers`` key to True in the :"
"setting:`LOGGING` dictConfig. Alternatively you can redefine some or all of "
"the loggers."
msgstr ""
"До Django 1.5 параметр конфигурации :setting:`LOGGING` перезаписывал :ref:"
"`стандартные настройки журналирования Django <default-logging-"
"configuration>`. Начиная с Django 1.5, конфигурация журналирования "
"объединяется стандартные настройки Django, следовательно, вы можете решать "
"добавлять или заменять параметры существующей конфигурации. Для того, чтобы "
"полностью переопределить стандартную конфигурацию, сделайте "
"``disable_existing_loggers`` равным ``True`` в параметре конфигурации :"
"setting:`LOGGING`. Аналогично вы можете переопределить некоторые или все "
"логеры."

# f82efe4925324f39a03754d5673af00e
#: ../../topics/logging.txt:229
msgid ""
"Logging is configured as soon as settings have been loaded (either manually "
"using :func:`~django.conf.settings.configure` or when at least one setting "
"is accessed). Since the loading of settings is one of the first things that "
"Django does, you can be certain that loggers are always ready for use in "
"your project code."
msgstr ""
"Журналирование настраивается сразу после загрузки настроек (вручную с "
"помощью :func:`~django.conf.settings.configure` или при первом доступе к "
"конфигурации журналирования). Так как настройки загружаются в первую "
"очередь, вы можете быть уверены, что журналирование уже работает при запуске "
"вашего кода."

# c1e87837adc24252844d97767c8b8e1c
#: ../../topics/logging.txt:240
msgid "An example"
msgstr "Пример"

# 8fe82bb89c704d85accdf9fca014fe23
#: ../../topics/logging.txt:242
msgid ""
"The full documentation for `dictConfig format`_ is the best source of "
"information about logging configuration dictionaries. However, to give you a "
"taste of what is possible, here is an example of a fairly complex logging "
"setup, configured using :func:`logging.config.dictConfig`::"
msgstr ""
"Официальная документация `формата dictConfig <dictConfig format>`_ лучше "
"всего описывает формат словаря конфигурации журналирования. Однако, чтобы "
"показать вам её возможности, мы приведем пример достаточно сложной настройки "
"журналирования с использованием :meth:`logging.dictConfig`::"

# 2c29e94fb5f14bf49a671b58502c073b
#: ../../topics/logging.txt:299
msgid "This logging configuration does the following things:"
msgstr "Эта конфигурация выполняет следующее:"

# 151d592b43fd46ca9f67406c9f4f7d48
#: ../../topics/logging.txt:301
msgid ""
"Identifies the configuration as being in 'dictConfig version 1' format. At "
"present, this is the only dictConfig format version."
msgstr ""
"Указывает что конфигурация задана в формате 'dictConfig версия 1'. На данный "
"момент это единственная версия dictConfig формата."

# 89907e99492d4a08bada7ce99e277e91
#: ../../topics/logging.txt:304
msgid "Disables all existing logging configurations."
msgstr "Отключает все существующие настройки логирования."

# ceb0953d61bc46d3a5c909f822474975
#: ../../topics/logging.txt:306
msgid "Defines two formatters:"
msgstr "Определяет два форматера:"

# 33a82633093641f0917cfda72aeca64b
#: ../../topics/logging.txt:308
msgid ""
"``simple``, that just outputs the log level name (e.g., ``DEBUG``) and the "
"log message."
msgstr ""
"``simple``, просто возвращает уровень логирования сообщения (например, "
"``DEBUG``) и содержимое сообщения."

# 461bc1f3e02c4a5c95c6656e5df184e7
#: ../../topics/logging.txt:311
msgid ""
"The ``format`` string is a normal Python formatting string describing the "
"details that are to be output on each logging line. The full list of detail "
"that can be output can be found in the `formatter documentation`_."
msgstr ""
"Строка `format` является обычной строкой форматирования Python, описывающая "
"детали, которые будут присутствовать в каждой строке журнала. Полный список "
"переменных для форматирования вы можете найти в `документации <http://docs."
"python.org/library/logging.html#formatter-objects>`_."

# 3f84d41b4ebb4e6592218960ee346e3c
#: ../../topics/logging.txt:316
msgid ""
"``verbose``, that outputs the log level name, the log message, plus the "
"time, process, thread and module that generate the log message."
msgstr ""
"``verbose``, выведет уровень логирования, сообщение, время, название "
"процесса, потока и модуля, который создал собщение."

# f96d26ece3e142ca8781205df8ff2b39
#: ../../topics/logging.txt:320
msgid ""
"Defines one filter -- ``project.logging.SpecialFilter``, using the alias "
"``special``. If this filter required additional arguments at time of "
"construction, they can be provided as additional keys in the filter "
"configuration dictionary. In this case, the argument ``foo`` will be given a "
"value of ``bar`` when instantiating the ``SpecialFilter``."
msgstr ""
"Определяет один фильтр -- :class:`project.logging.SpecialFilter` с названием "
"``special``. Если конструктор фильтра требует наличия дополнительных "
"аргументов, вы можете указать их в словаре настройки фильтра. В этом случае "
"будет передан аргумент ``foo``  со значением ``bar`` при создании "
"экземпляра :class:`SpecialFilter`."

# 13ea9af407844a39a8c114e8b4c44e41
#: ../../topics/logging.txt:327
msgid "Defines three handlers:"
msgstr "Определяет три обработчика:"

# 7a37435c967541f39e645396d04d6efe
#: ../../topics/logging.txt:329
msgid ""
"``null``, a NullHandler, which will pass any ``DEBUG`` (or higher) message "
"to ``/dev/null``."
msgstr ""
"``null``, NullHandler, который отправляет все сообщения уровня ``DEBUG`` "
"(или выше) в ``/dev/null``."

# 1653b8f3019b40a6913ffbc3a9f2ccd2
#: ../../topics/logging.txt:332
msgid ""
"``console``, a StreamHandler, which will print any ``DEBUG`` (or higher) "
"message to stderr. This handler uses the ``simple`` output format."
msgstr ""
"``console``, StreamHandler, который перенаправляет все сообщения уровня "
"``DEBUG`` (и выше) в stderr. Этот обработчик использует формат `simple`."

# c9f16e9e546f42bba965eec54360b366
#: ../../topics/logging.txt:336
msgid ""
"``mail_admins``, an AdminEmailHandler, which will email any ``ERROR`` (or "
"higher) message to the site admins. This handler uses the ``special`` filter."
msgstr ""
"``mail_admins``, AdminEmailHandler, который отправляет e-mail с сообщением "
"уровня ``ERROR`` (и выше) администраторам сайта. Этот обработчик использует "
"фильтр ``special``."

# ed7fc7f3c4d9490d976567ea26969196
#: ../../topics/logging.txt:340
msgid "Configures three loggers:"
msgstr "Настраивает три логера:"

# c98ac582c09841969e664220a8d3278c
#: ../../topics/logging.txt:342
msgid ""
"``django``, which passes all messages at ``INFO`` or higher to the ``null`` "
"handler."
msgstr ""
"``django``, который перенаправляет все сообщения уровня ``INFO`` и выше в "
"обработчик ``null``."

# 0fd82f3d30774f7ba966dd6ab977505d
#: ../../topics/logging.txt:345
msgid ""
"``django.request``, which passes all ``ERROR`` messages to the "
"``mail_admins`` handler. In addition, this logger is marked to *not* "
"propagate messages. This means that log messages written to ``django."
"request`` will not be handled by the ``django`` logger."
msgstr ""
"``django.request``, который передает все сообщения уровня ``ERROR`` в "
"обработчик ``mail_admins``. Так же указывается, что логер *не* должен "
"передавать сообщения родительским логерам. Это означает что сообщения "
"переданные в ``django.request`` не будут обрабатываться логером ``django``."

# 0c2989b25783429282cf08f731b23f45
#: ../../topics/logging.txt:351
msgid ""
"``myproject.custom``, which passes all messages at ``INFO`` or higher that "
"also pass the ``special`` filter to two handlers -- the ``console``, and "
"``mail_admins``. This means that all ``INFO`` level messages (or higher) "
"will be printed to the console; ``ERROR`` and ``CRITICAL`` messages will "
"also be output via email."
msgstr ""
"``myproject.custom``, который передает все сообщения уровня ``INFO`` и выше "
"прошедшие фильтр ``special`` в два обработчика -- ``console`` и "
"``mail_admins``. Это означает что все сообщения уровня ``INFO`` (или выше) "
"будут отправлены в консоль, сообщения ``ERROR`` и ``CRITICAL`` будут "
"отосланы через e-mail."

# a402b4563ca34cee826a736f405e4a1e
#: ../../topics/logging.txt:361
msgid "Custom logging configuration"
msgstr "Собственная конфигурация логирования"

# 78aa8eaa031b4aac915eb3ffcb99db15
#: ../../topics/logging.txt:363
msgid ""
"If you don't want to use Python's dictConfig format to configure your "
"logger, you can specify your own configuration scheme."
msgstr ""
"Если вы не хотите использовать формат dictConfig для настройки логирования, "
"вы можете определить собственный формат."

# 0ffc023cf87942d089988e359189f561
#: ../../topics/logging.txt:366
msgid ""
"The :setting:`LOGGING_CONFIG` setting defines the callable that will be used "
"to configure Django's loggers. By default, it points at Python's :func:"
"`logging.config.dictConfig()` function. However, if you want to use a "
"different configuration process, you can use any other callable that takes a "
"single argument. The contents of :setting:`LOGGING` will be provided as the "
"value of that argument when logging is configured."
msgstr ""
"Параметр конфигурации :setting:`LOGGING_CONFIG` определяет функцию, которая "
"настраивает журналирование в Django. По умолчанию, параметр указывает на :"
"meth:`logging.dictConfig()`. Однако, если вы хотите переопределить настройку "
"журналирования, укажите функцию, которая принимает один аргумент. "
"Содержимое :setting:`LOGGING` будет передано в функцию при настройке "
"журналирования."

# 026eeee598a2443b9cb390eeda05a086
#: ../../topics/logging.txt:374
msgid "Disabling logging configuration"
msgstr "Отключение настройки логирования"

# c799f20624d44f559ad618d4d9f85ae3
#: ../../topics/logging.txt:376
msgid ""
"If you don't want to configure logging at all (or you want to manually "
"configure logging using your own approach), you can set :setting:"
"`LOGGING_CONFIG` to ``None``. This will disable the configuration process."
msgstr ""
"Если вы не хотите настраивать логирование (или самостоятельно настроить "
"логирование используя собсвенный механизм), вы можете установить :setting:"
"`LOGGING_CONFIG` в ``None``. Это отключит процесс настройки логирования."

# 1d4f1721204b4c979ec072960657d3d9
#: ../../topics/logging.txt:382
msgid ""
"Setting :setting:`LOGGING_CONFIG` to ``None`` only means that the "
"configuration process is disabled, not logging itself. If you disable the "
"configuration process, Django will still make logging calls, falling back to "
"whatever default logging behavior is defined."
msgstr ""
"Установка :setting:`LOGGING_CONFIG` в ``None`` отключает процесс "
"конфигурации, а не логирование. Если вы отключите процесс конфигурации, "
"Django все равно будет вызывать методы логирования."

# 9c22f2889abd4d3087566cc0f35d0312
#: ../../topics/logging.txt:389
msgid "Django's logging extensions"
msgstr "Расширения для логирования в Django"

# 23b712158d1e43e68635fcd939427699
#: ../../topics/logging.txt:391
msgid ""
"Django provides a number of utilities to handle the unique requirements of "
"logging in Web server environment."
msgstr ""
"Django предоставляет набор утилит для решения стандартных задач логирования "
"в Web-приложениях."

# e2642501f7fc46c69b077f8d0e203774
#: ../../topics/logging.txt:397
msgid "Django provides three built-in loggers."
msgstr "Django использует три логера."

# a06ad725020d467e9f9d12b644f7fe6e
#: ../../topics/logging.txt:400
msgid "``django``"
msgstr "``django``"

# 751fd4ce2edb4268936135812c9333a6
#: ../../topics/logging.txt:402
msgid ""
"``django`` is the catch-all logger. No messages are posted directly to this "
"logger."
msgstr ""
"``django`` -- логер принимающий все сообщения. Сообщения не записываются "
"непосредственно в этот логер."

# f60292956d9d4bfead17ed180d416652
#: ../../topics/logging.txt:406
msgid "``django.request``"
msgstr "``django.request``"

# ce47aac3c8834f6dbbca79b8e25cfd56
#: ../../topics/logging.txt:408
msgid ""
"Log messages related to the handling of requests. 5XX responses are raised "
"as ``ERROR`` messages; 4XX responses are raised as ``WARNING`` messages."
msgstr ""
"Принимает сообщения связанные с процессом обработки запросов. 5XX ответы "
"отправляют ``ERROR`` сообщения, 4XX ответы -- ``WARNING`` сообщения."

# ada9a4f225624f8aa40d600cbaea49a1
# 03861da84cca4b099d6e394c6c128b89
#: ../../topics/logging.txt:412 ../../topics/logging.txt:427
msgid "Messages to this logger have the following extra context:"
msgstr "Сообщения этого логера содержат дополнительные данные:"

# 6bdbd7de7f0e4bd0b5a5f4aa88539d06
#: ../../topics/logging.txt:414
msgid "``status_code``: The HTTP response code associated with the request."
msgstr "``status_code``:  HTTP код ответа."

# 1ed63dd9126247ff872910b3e027926a
#: ../../topics/logging.txt:417
msgid "``request``: The request object that generated the logging message."
msgstr "``request``: объект запроса, который спровоцировал сообщение."

# 6926e2a1990b404abad4bf05207f3489
#: ../../topics/logging.txt:421
msgid "``django.db.backends``"
msgstr "``django.db.backends``"

# 2a6e2337955743c2b397008a52a1edd3
#: ../../topics/logging.txt:423
msgid ""
"Messages relating to the interaction of code with the database. For example, "
"every SQL statement executed by a request is logged at the ``DEBUG`` level "
"to this logger."
msgstr ""
"Сообщения связанные с взаимодействием кода с базой данной. Например, каждый "
"SQL запрос создает ``DEBUG`` сообщение в этот логер."

# 12be06cb27524ebd8e013473f6c2fee7
#: ../../topics/logging.txt:429
msgid "``duration``: The time taken to execute the SQL statement."
msgstr "``duration``: Время выполнения SQL запроса."

# 7d52ac968f074a629c630e889aef98a9
#: ../../topics/logging.txt:430
msgid "``sql``: The SQL statement that was executed."
msgstr "``sql``: SQL запрос."

# 16941d6614e1470ab6dace2dd51a7f28
#: ../../topics/logging.txt:431
msgid "``params``: The parameters that were used in the SQL call."
msgstr "``params``: Параметры используемые при выполнении SQL запроса."

# c7b56d41d56b4d47a7c7d82600ff5471
#: ../../topics/logging.txt:433
msgid ""
"For performance reasons, SQL logging is only enabled when ``settings.DEBUG`` "
"is set to ``True``, regardless of the logging level or handlers that are "
"installed."
msgstr ""
"Для повышения производительности логирование SQL запросов включено только "
"при ``settings.DEBUG`` равном ``True``, независимо от уровня логирования и "
"назначенных обработчиков."

# 7d4811f19e914dcc8f1812fbe4c9cf9b
#: ../../topics/logging.txt:440
msgid ""
"Django provides one log handler in addition to those provided by the Python "
"logging module."
msgstr "Django предоставляет один дополнительный обработчик."

# 5138c8a4fc8a495fb00677af7f7ec459
#: ../../topics/logging.txt:445
msgid ""
"This handler sends an email to the site admins for each log message it "
"receives."
msgstr ""
"Этот логер отсылает e-mail администраторам сайта с принятый сообщением."

# 79e724a1e16347788acd9e22c00335a6
#: ../../topics/logging.txt:448
msgid ""
"If the log record contains a ``request`` attribute, the full details of the "
"request will be included in the email."
msgstr ""
"Если сообщение содержит атрибут ``request``, полная информация о запросе "
"будет включена в e-mail."

# dbbbb0a35c3246239c1a65fb0fda0138
#: ../../topics/logging.txt:451
msgid ""
"If the log record contains stack trace information, that stack trace will be "
"included in the email."
msgstr ""
"Если сообщение содержит стек трассировки(*пер.* stack trace information), он "
"будет включен в e-mail."

# d08aa86684004f64a9739163e4fe849e
#: ../../topics/logging.txt:454
msgid ""
"The ``include_html`` argument of ``AdminEmailHandler`` is used to control "
"whether the traceback email includes an HTML attachment containing the full "
"content of the debug Web page that would have been produced if :setting:"
"`DEBUG` were ``True``. To set this value in your configuration, include it "
"in the handler definition for ``django.utils.log.AdminEmailHandler``, like "
"this::"
msgstr ""
"Параметр ``include_html`` в ``AdminEmailHandler`` указывает будет ли e-mail "
"содержать HTML содержимое debug-страницы, которая была бы создана при :"
"setting:`DEBUG` равном ``True``. Что бы установить этот параметр, укажите "
"его в словаре конфигурации ``django.utils.log.AdminEmailHandler``, например "
"так::"

# ea9ee78bbb294e10af101076f15a5ef5
#: ../../topics/logging.txt:469
msgid ""
"Note that this HTML version of the email contains a full traceback, with "
"names and values of local variables at each level of the stack, plus the "
"values of your Django settings. This information is potentially very "
"sensitive, and you may not want to send it over email. Consider using "
"something such as `Sentry`_ to get the best of both worlds -- the rich "
"information of full tracebacks plus the security of *not* sending the "
"information over email. You may also explicitly designate certain sensitive "
"information to be filtered out of error reports -- learn more on :ref:"
"`Filtering error reports<filtering-error-reports>`."
msgstr ""
"Заметим, что HTML версия письма содержит полный трейсбек с названиями и "
"значениями локальных переменных на каждом уровне стека, а так же значения "
"настроек Django. Эта информация потенциально очень важна и возможно вы не "
"захотите отправлять её через электронную почту. Рекомендуется использовать "
"что-то вроде `django-sentry <Sentry>`_ что бы получить все преимущества -- "
"полная информация c трейсбеком и *отсутствие* отправки важной информации "
"через электронную почту. Вы можете так же явно указать фильтрацию важной "
"информации -- подробнее в разделе о :ref:`фильтрации отчетов об ошибках "
"<filtering-error-reports>`."

# 9cccde6ebf714f6780212807a815422f
#: ../../topics/logging.txt:485
msgid ""
"Django provides two log filters in addition to those provided by the Python "
"logging module."
msgstr "Django предоставляет два дополнительных фильтра."

# c145ec0718cc45f7b04f21c2fda1d438
#: ../../topics/logging.txt:492
msgid ""
"This filter accepts a callback function (which should accept a single "
"argument, the record to be logged), and calls it for each record that passes "
"through the filter. Handling of that record will not proceed if the callback "
"returns False."
msgstr ""
"Этот фильтр принимает функцию (которая должна принимать один аргумент - "
"логированное сообщение), и вызывает ее для каждого переданного сообщения. "
"Сообщение не будет обработано если функция вернет False."

# eee518f58cc14c00ba42ae0fa4ab4f7f
#: ../../topics/logging.txt:497
msgid ""
"For instance, to filter out :exc:`~django.http.UnreadablePostError` (raised "
"when a user cancels an upload) from the admin emails, you would create a "
"filter function::"
msgstr ""
"Например, для исключения из писем информации об исключении :exc:`~django."
"http.UnreadablePostError` (выбрасывается, когда пользователь прерывает "
"загрузку файла), вы можете создать функцию фильтрации::"

# 1ef61277bb5f4e30b9bc1f1b1c70d0ac
#: ../../topics/logging.txt:510
msgid "and then add it to your logging config::"
msgstr "и затем добавить её в свою конфигурацию журналирования::"

# 37168fffb3a64bfc88c32c74393cb634
#: ../../topics/logging.txt:530
msgid "This filter will only pass on records when settings.DEBUG is False."
msgstr ""
"Этот фильтр работает только если настройка :setting:`DEBUG` равна False."

# d75ac888d5e34ceaae43f025f0ec835a
#: ../../topics/logging.txt:532
msgid ""
"This filter is used as follows in the default :setting:`LOGGING` "
"configuration to ensure that the :class:`AdminEmailHandler` only sends error "
"emails to admins when :setting:`DEBUG` is ``False``::"
msgstr ""
"Этот фильтр используется в конфигурации :setting:`LOGGING` по-умолчанию, "
"чтобы предотвратить отсылку писем обработчиком :class:`AdminEmailHandler` "
"если настройка :setting:`DEBUG` не равна `False`::"

# 59b9c04d7ff042cfb13963da2936e7d5
#: ../../topics/logging.txt:553
msgid ""
"This filter is similar to :class:`RequireDebugFalse`, except that records "
"are passed only when :setting:`DEBUG` is ``True``."
msgstr ""
"Этот фильтр аналогичен :class:`RequireDebugFalse` за исключением того, что "
"он пропускает записи только в случае когда параметр конфигурации :setting:"
"`DEBUG` равен `True`."

# 026eeee598a2443b9cb390eeda05a086
#: ../../topics/logging.txt:559
msgid "Django's default logging configuration"
msgstr "Стандартная конфигурация журналирования"

# efaf33d5b68e47e9bbcc7e82ed295a83
#: ../../topics/logging.txt:561
msgid ""
"By default, Django configures the ``django.request`` logger so that all "
"messages with ``ERROR`` or ``CRITICAL`` level are sent to :class:"
"`AdminEmailHandler`, as long as the :setting:`DEBUG` setting is set to "
"``False``."
msgstr ""
"По умолчанию, Django настраивает логгер для ``django.request``, так что все "
"сообщения уровня ``ERROR`` или ``CRITICAL`` будут отправлены в :class:"
"`AdminEmailHandler`. Такое поведение имеет место быть только когда параметр "
"конфигурации :setting:`DEBUG` равен ``False``."

# 44c594c2ff3b441985ca788812cb2ef9
#: ../../topics/logging.txt:565
msgid ""
"All messages reaching the ``django`` catch-all logger when :setting:`DEBUG` "
"is ``True`` are sent to the console. They are simply discarded (sent to "
"``NullHandler``) when :setting:`DEBUG` is ``False``."
msgstr ""
"Все сообщения, достигающие глобального логгера ``django``, при параметре "
"конфигурации :setting:`DEBUG` равным ``True``, отправляются на консоль. При :"
"setting:`DEBUG` равном `False` они просто игнорируются (точнее отправляются "
"в ``NullHandler``)."

# 96a53fe4e626480cb6886b88e3e7f571
#: ../../topics/logging.txt:574
msgid ""
"See also :ref:`Configuring logging <configuring-logging>` to learn how you "
"can complement or replace this default logging configuration."
msgstr ""
"Также см. :ref:`настройку журналирования <configuring-logging>`, чтобы "
"разобраться как вы можете дополнить или заменить стандартную конфигурацию "
"журналирования."
