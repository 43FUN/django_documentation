# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2012.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-02-29 18:30\n"
"PO-Revision-Date: 2012-02-15 15:13\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# 6e8078b0131647019da9f6dbc327ec1f
#: ../../topics/logging.txt:3
msgid "Logging"
msgstr ""

# 286d8b8bab4f4c4caa1f21d0ee030b92
#: ../../topics/logging.txt:11
msgid "A quick logging primer"
msgstr ""

# f5b8c11d868f47b8a8f92bd78930507d
#: ../../topics/logging.txt:13
msgid ""
"Django uses Python's builtin :mod:`logging` module to perform system "
"logging. The usage of this module is discussed in detail in Python's own "
"documentation. However, if you've never used Python's logging framework (or "
"even if you have), here's a quick primer."
msgstr ""

# 62ea5402e7ee4d1590b3c0b12861b7f4
#: ../../topics/logging.txt:19
msgid "The cast of players"
msgstr ""

# 2359972ef1054a3084f167f65a7a759c
#: ../../topics/logging.txt:21
msgid "A Python logging configuration consists of four parts:"
msgstr ""

# bbc96cb2079c404682574683fe74c831
#: ../../topics/logging.txt:23
msgid ":ref:`topic-logging-parts-loggers`"
msgstr ""

# 865437f0b20f47d1b9437b7f9987725f
#: ../../topics/logging.txt:24
msgid ":ref:`topic-logging-parts-handlers`"
msgstr ""

# a9bef536ccd743109cfa458dbaba67c0
#: ../../topics/logging.txt:25
msgid ":ref:`topic-logging-parts-filters`"
msgstr ""

# d68b10973a3a47aebcae08ecf178c432
#: ../../topics/logging.txt:26
msgid ":ref:`topic-logging-parts-formatters`"
msgstr ""

# b56b85fac98c49199c625106a0b4ccda
# 815a3a04101f4164bb8dd9e7ef0c60b1
#: ../../topics/logging.txt:31 ../../topics/logging.txt:416
msgid "Loggers"
msgstr ""

# 600bba1092a24b5fbeb982ec7306faef
#: ../../topics/logging.txt:33
msgid ""
"A logger is the entry point into the logging system. Each logger is a named "
"bucket to which messages can be written for processing."
msgstr ""

# ba2fa757ae7241e5a8136e71b315de2f
#: ../../topics/logging.txt:36
msgid ""
"A logger is configured to have a *log level*. This log level describes the "
"severity of the messages that the logger will handle. Python defines the "
"following log levels:"
msgstr ""

# 53b8a03f192c4f6f8016ec95f167b33c
#: ../../topics/logging.txt:40
msgid "``DEBUG``: Low level system information for debugging purposes"
msgstr ""

# f08470ab7f164ccf802c6a0a88752787
#: ../../topics/logging.txt:42
msgid "``INFO``: General system information"
msgstr ""

# c83af74b75614a1785386f17fb21f860
#: ../../topics/logging.txt:44
msgid "``WARNING``: Information describing a minor problem that has occurred."
msgstr ""

# dc4dd527a7cc49ba97a431bf01aa2218
#: ../../topics/logging.txt:47
msgid "``ERROR``: Information describing a major problem that has occurred."
msgstr ""

# 5bbc9abb977f4ab194f4b93c95202c65
#: ../../topics/logging.txt:50
msgid ""
"``CRITICAL``: Information describing a critical problem that has occurred."
msgstr ""

# 158a30f7930d4ba08ce9a2203afc0cb1
#: ../../topics/logging.txt:53
msgid ""
"Each message that is written to the logger is a *Log Record*. Each log "
"record also has a *log level* indicating the severity of that specific "
"message. A log record can also contain useful metadata that describes the "
"event that is being logged. This can include details such as a stack trace "
"or an error code."
msgstr ""

# 681c628eb70a434d9e53684d13185b45
#: ../../topics/logging.txt:59
msgid ""
"When a message is given to the logger, the log level of the message is "
"compared to the log level of the logger. If the log level of the message "
"meets or exceeds the log level of the logger itself, the message will "
"undergo further processing. If it doesn't, the message will be ignored."
msgstr ""

# 7338dbb096ed4f42a79f10c75d04ee88
#: ../../topics/logging.txt:65
msgid ""
"Once a logger has determined that a message needs to be processed, it is "
"passed to a *Handler*."
msgstr ""

# a5a29475234b4a4cbee57ebc94e7207f
# 5c80f3bde46740fbbcbe095c52fcce8a
#: ../../topics/logging.txt:71 ../../topics/logging.txt:459
msgid "Handlers"
msgstr ""

# f4bcc43d3f694ddc9aa179da2ae8f3c2
#: ../../topics/logging.txt:73
msgid ""
"The handler is the engine that determines what happens to each message in a "
"logger. It describes a particular logging behavior, such as writing a "
"message to the screen, to a file, or to a network socket."
msgstr ""

# 9adca71d48f842449512c992e26154d4
#: ../../topics/logging.txt:77
msgid ""
"Like loggers, handlers also have a log level. If the log level of a log "
"record doesn't meet or exceed the level of the handler, the handler will "
"ignore the message."
msgstr ""

# bcc69169224b4af2a527ac424c7fa9bc
#: ../../topics/logging.txt:81
msgid ""
"A logger can have multiple handlers, and each handler can have a different "
"log level. In this way, it is possible to provide different forms of "
"notification depending on the importance of a message. For example, you "
"could install one handler that forwards ``ERROR`` and ``CRITICAL`` messages "
"to a paging service, while a second handler logs all messages (including "
"``ERROR`` and ``CRITICAL`` messages) to a file for later analysis."
msgstr ""

# 192d63212f9d4c768e953b27c335737a
# 2f1ea294876240419613bf41522acdae
#: ../../topics/logging.txt:92 ../../topics/logging.txt:504
msgid "Filters"
msgstr ""

# 005a594f62224a589f6d7fd584989735
#: ../../topics/logging.txt:94
msgid ""
"A filter is used to provide additional control over which log records are "
"passed from logger to handler."
msgstr ""

# f1a3b46e9f524a81b08f85b58619ace9
#: ../../topics/logging.txt:97
msgid ""
"By default, any log message that meets log level requirements will be "
"handled. However, by installing a filter, you can place additional criteria "
"on the logging process. For example, you could install a filter that only "
"allows ``ERROR`` messages from a particular source to be emitted."
msgstr ""

# fc12de3759b2490b8fcd6213b1d20c71
#: ../../topics/logging.txt:103
msgid ""
"Filters can also be used to modify the logging record prior to being "
"emitted. For example, you could write a filter that downgrades ``ERROR`` log "
"records to ``WARNING`` records if a particular set of criteria are met."
msgstr ""

# fad41dd2ac714f3c98bc7851b4863b4e
#: ../../topics/logging.txt:108
msgid ""
"Filters can be installed on loggers or on handlers; multiple filters can be "
"used in a chain to perform multiple filtering actions."
msgstr ""

# d22ae59a11e84e38a4f99ea8329ee449
#: ../../topics/logging.txt:114
msgid "Formatters"
msgstr ""

# bf44f2713f0c485bbd5b7de5543aba19
#: ../../topics/logging.txt:116
msgid ""
"Ultimately, a log record needs to be rendered as text. Formatters describe "
"the exact format of that text. A formatter usually consists of a Python "
"formatting string; however, you can also write custom formatters to "
"implement specific formatting behavior."
msgstr ""

# 189889688036465abeb362ce5311124d
#: ../../topics/logging.txt:122
msgid "Using logging"
msgstr ""

# d03a4427ec8940dbace15d918466c136
#: ../../topics/logging.txt:124
msgid ""
"Once you have configured your loggers, handlers, filters and formatters, you "
"need to place logging calls into your code. Using the logging framework is "
"very simple. Here's an example::"
msgstr ""

# 7ee79a4ed9e449898dba7f26a6378f3b
#: ../../topics/logging.txt:140
msgid ""
"And that's it! Every time the ``bad_mojo`` condition is activated, an error "
"log record will be written."
msgstr ""

# 8042454252fe4bf2a5862d45fc6b7f5e
#: ../../topics/logging.txt:144
msgid "Naming loggers"
msgstr ""

# 8b1369bba6ae4cf081be9d155a3da38f
#: ../../topics/logging.txt:146
msgid ""
"The call to :meth:`logging.getLogger()` obtains (creating, if necessary) an "
"instance of a logger. The logger instance is identified by a name. This name "
"is used to identify the logger for configuration purposes."
msgstr ""

# 2783c7a752fe46f4be64482d3d14bcbd
#: ../../topics/logging.txt:151
msgid ""
"By convention, the logger name is usually ``__name__``, the name of the "
"python module that contains the logger. This allows you to filter and handle "
"logging calls on a per-module basis. However, if you have some other way of "
"organizing your logging messages, you can provide any dot-separated name to "
"identify your logger::"
msgstr ""

# 04c2b7c880844ffdb463358d03af8f2e
#: ../../topics/logging.txt:160
msgid ""
"The dotted paths of logger names define a hierarchy. The ``project."
"interesting`` logger is considered to be a parent of the ``project."
"interesting.stuff`` logger; the ``project`` logger is a parent of the "
"``project.interesting`` logger."
msgstr ""

# edca0e3afba44852b553cf16d8013f57
#: ../../topics/logging.txt:165
msgid ""
"Why is the hierarchy important? Well, because loggers can be set to "
"*propagate* their logging calls to their parents. In this way, you can "
"define a single set of handlers at the root of a logger tree, and capture "
"all logging calls in the subtree of loggers. A logging handler defined in "
"the ``project`` namespace will catch all logging messages issued on the "
"``project.interesting`` and ``project.interesting.stuff`` loggers."
msgstr ""

# 6d98d2ee1b9649178aaad82816919e2f
#: ../../topics/logging.txt:173
msgid ""
"This propagation can be controlled on a per-logger basis. If you don't want "
"a particular logger to propagate to it's parents, you can turn off this "
"behavior."
msgstr ""

# c14d54de1d804f83b405850ed5282a61
#: ../../topics/logging.txt:178
msgid "Making logging calls"
msgstr ""

# fdb41f96d23a44f59cacf47c1666a5ff
#: ../../topics/logging.txt:180
msgid ""
"The logger instance contains an entry method for each of the default log "
"levels:"
msgstr ""

# c41a34db2fc84c7aa68c000f79d7893a
#: ../../topics/logging.txt:183
msgid "``logger.critical()``"
msgstr ""

# 38580d8fcfee437ebd7c69b0e5d56e29
#: ../../topics/logging.txt:184
msgid "``logger.error()``"
msgstr ""

# 2b84f60ffde3433ea2744c8ae4e2584b
#: ../../topics/logging.txt:185
msgid "``logger.warning()``"
msgstr ""

# bf0fdea3676545f8bdcc67abf8e6e656
#: ../../topics/logging.txt:186
msgid "``logger.info()``"
msgstr ""

# 3c882cca71f449d6a992abbbb9ebc93b
#: ../../topics/logging.txt:187
msgid "``logger.debug()``"
msgstr ""

# d8b03ff44c6d41389a2ee639ea933e5c
#: ../../topics/logging.txt:189
msgid "There are two other logging calls available:"
msgstr ""

# 1e7649548fa4414aafba4f6c212b145a
#: ../../topics/logging.txt:191
msgid ""
"``logger.log()``: Manually emits a logging message with a specific log level."
msgstr ""

# 0e446a7d496a4aaaa75af29754dfa09e
#: ../../topics/logging.txt:194
msgid ""
"``logger.exception()``: Creates an ``ERROR`` level logging message wrapping "
"the current exception stack frame."
msgstr ""

# 149046927d934267abc3aff09407cf90
#: ../../topics/logging.txt:198
msgid "Configuring logging"
msgstr ""

# a5c8c8a042d042c58f4d34ff0dcabfd2
#: ../../topics/logging.txt:200
msgid ""
"Of course, it isn't enough to just put logging calls into your code. You "
"also need to configure the loggers, handlers, filters and formatters to "
"ensure that logging output is output in a useful way."
msgstr ""

# 184755f6817649f6b401ca12fcdab43f
#: ../../topics/logging.txt:204
msgid ""
"Python's logging library provides several techniques to configure logging, "
"ranging from a programmatic interface to configuration files. By default, "
"Django uses the `dictConfig format`_."
msgstr ""

# c2f0ec0c90cd4612b0dba1be011e3345
#: ../../topics/logging.txt:209
msgid ""
"``logging.dictConfig`` is a builtin library in Python 2.7. In order to make "
"this library available for users of earlier Python versions, Django includes "
"a copy as part of ``django.utils.log``. If you have Python 2.7, the system "
"native library will be used; if you have Python 2.6 or earlier, Django's "
"copy will be used."
msgstr ""

# 46cdb29d372e4a25b40c14a46519434e
#: ../../topics/logging.txt:215
msgid ""
"In order to configure logging, you use :setting:`LOGGING` to define a "
"dictionary of logging settings. These settings describes the loggers, "
"handlers, filters and formatters that you want in your logging setup, and "
"the log levels and other properties that you want those components to have."
msgstr ""

# f82efe4925324f39a03754d5673af00e
#: ../../topics/logging.txt:221
msgid ""
"Logging is configured immediately after settings have been loaded. Since the "
"loading of settings is one of the first things that Django does, you can be "
"certain that loggers are always ready for use in your project code."
msgstr ""

# c1e87837adc24252844d97767c8b8e1c
#: ../../topics/logging.txt:231
msgid "An example"
msgstr ""

# 8fe82bb89c704d85accdf9fca014fe23
#: ../../topics/logging.txt:233
msgid ""
"The full documentation for `dictConfig format`_ is the best source of "
"information about logging configuration dictionaries. However, to give you a "
"taste of what is possible, here is an example of a fairly complex logging "
"setup, configured using :meth:`logging.dictConfig`::"
msgstr ""

# 2c29e94fb5f14bf49a671b58502c073b
#: ../../topics/logging.txt:290
msgid "This logging configuration does the following things:"
msgstr ""

# 151d592b43fd46ca9f67406c9f4f7d48
#: ../../topics/logging.txt:292
msgid ""
"Identifies the configuration as being in 'dictConfig version 1' format. At "
"present, this is the only dictConfig format version."
msgstr ""

# 89907e99492d4a08bada7ce99e277e91
#: ../../topics/logging.txt:295
msgid "Disables all existing logging configurations."
msgstr ""

# ceb0953d61bc46d3a5c909f822474975
#: ../../topics/logging.txt:297
msgid "Defines two formatters:"
msgstr ""

# 33a82633093641f0917cfda72aeca64b
#: ../../topics/logging.txt:299
msgid ""
"``simple``, that just outputs the log level name (e.g., ``DEBUG``) and the "
"log message."
msgstr ""

# 461bc1f3e02c4a5c95c6656e5df184e7
#: ../../topics/logging.txt:302
msgid ""
"The `format` string is a normal Python formatting string describing the "
"details that are to be output on each logging line. The full list of detail "
"that can be output can be found in the `formatter documentation`_."
msgstr ""

# 3f84d41b4ebb4e6592218960ee346e3c
#: ../../topics/logging.txt:307
msgid ""
"``verbose``, that outputs the log level name, the log message, plus the "
"time, process, thread and module that generate the log message."
msgstr ""

# f96d26ece3e142ca8781205df8ff2b39
#: ../../topics/logging.txt:311
msgid ""
"Defines one filter -- :class:`project.logging.SpecialFilter`, using the "
"alias ``special``. If this filter required additional arguments at time of "
"construction, they can be provided as additional keys in the filter "
"configuration dictionary. In this case, the argument ``foo`` will be given a "
"value of ``bar`` when instantiating the :class:`SpecialFilter`."
msgstr ""

# 13ea9af407844a39a8c114e8b4c44e41
#: ../../topics/logging.txt:318
msgid "Defines three handlers:"
msgstr ""

# 7a37435c967541f39e645396d04d6efe
#: ../../topics/logging.txt:320
msgid ""
"``null``, a NullHandler, which will pass any ``DEBUG`` (or higher) message "
"to ``/dev/null``."
msgstr ""

# 696e5d6e06e84b5a9710045068c5333c
#: ../../topics/logging.txt:323
msgid ""
"``console``, a StreamHandler, which will print any ``DEBUG`` (or higher) "
"message to stdout. This handler uses the `simple` output format."
msgstr ""

# c9f16e9e546f42bba965eec54360b366
#: ../../topics/logging.txt:327
msgid ""
"``mail_admins``, an AdminEmailHandler, which will email any ``ERROR`` (or "
"higher) message to the site admins. This handler uses the ``special`` filter."
msgstr ""

# ed7fc7f3c4d9490d976567ea26969196
#: ../../topics/logging.txt:331
msgid "Configures three loggers:"
msgstr ""

# c98ac582c09841969e664220a8d3278c
#: ../../topics/logging.txt:333
msgid ""
"``django``, which passes all messages at ``INFO`` or higher to the ``null`` "
"handler."
msgstr ""

# 0fd82f3d30774f7ba966dd6ab977505d
#: ../../topics/logging.txt:336
msgid ""
"``django.request``, which passes all ``ERROR`` messages to the "
"``mail_admins`` handler. In addition, this logger is marked to *not* "
"propagate messages. This means that log messages written to ``django."
"request`` will not be handled by the ``django`` logger."
msgstr ""

# 0c2989b25783429282cf08f731b23f45
#: ../../topics/logging.txt:342
msgid ""
"``myproject.custom``, which passes all messages at ``INFO`` or higher that "
"also pass the ``special`` filter to two handlers -- the ``console``, and "
"``mail_admins``. This means that all ``INFO`` level messages (or higher) "
"will be printed to the console; ``ERROR`` and ``CRITICAL`` messages will "
"also be output via email."
msgstr ""

# e89ca1c00302430891372e1ecdc36f03
#: ../../topics/logging.txt:351
msgid ""
"If your ``settings.py`` specifies a custom handler class and the file "
"defining that class also imports ``settings.py`` a circular import will "
"occur."
msgstr ""

# 464f6843dea448129b4b8bb86f9d2d14
#: ../../topics/logging.txt:355
msgid ""
"For example, if ``settings.py`` contains the following config for :setting:"
"`LOGGING`::"
msgstr ""

# b86ea9686ac04d18ad068ced920d32d1
#: ../../topics/logging.txt:368
msgid ""
"and ``myproject/logconfig.py`` has the following line before the "
"``MyHandler`` definition::"
msgstr ""

# 52627a7f699f4b9282b4db9d3e3248ac
#: ../../topics/logging.txt:373
msgid ""
"then the ``dictconfig`` module will raise an exception like the following::"
msgstr ""

# a402b4563ca34cee826a736f405e4a1e
#: ../../topics/logging.txt:382
msgid "Custom logging configuration"
msgstr ""

# 78aa8eaa031b4aac915eb3ffcb99db15
#: ../../topics/logging.txt:384
msgid ""
"If you don't want to use Python's dictConfig format to configure your "
"logger, you can specify your own configuration scheme."
msgstr ""

# 0ffc023cf87942d089988e359189f561
#: ../../topics/logging.txt:387
msgid ""
"The :setting:`LOGGING_CONFIG` setting defines the callable that will be used "
"to configure Django's loggers. By default, it points at Python's :meth:"
"`logging.dictConfig()` method. However, if you want to use a different "
"configuration process, you can use any other callable that takes a single "
"argument. The contents of :setting:`LOGGING` will be provided as the value "
"of that argument when logging is configured."
msgstr ""

# 026eeee598a2443b9cb390eeda05a086
#: ../../topics/logging.txt:395
msgid "Disabling logging configuration"
msgstr ""

# c799f20624d44f559ad618d4d9f85ae3
#: ../../topics/logging.txt:397
msgid ""
"If you don't want to configure logging at all (or you want to manually "
"configure logging using your own approach), you can set :setting:"
"`LOGGING_CONFIG` to ``None``. This will disable the configuration process."
msgstr ""

# 1d4f1721204b4c979ec072960657d3d9
#: ../../topics/logging.txt:403
msgid ""
"Setting :setting:`LOGGING_CONFIG` to ``None`` only means that the "
"configuration process is disabled, not logging itself. If you disable the "
"configuration process, Django will still make logging calls, falling back to "
"whatever default logging behavior is defined."
msgstr ""

# 9c22f2889abd4d3087566cc0f35d0312
#: ../../topics/logging.txt:410
msgid "Django's logging extensions"
msgstr ""

# 23b712158d1e43e68635fcd939427699
#: ../../topics/logging.txt:412
msgid ""
"Django provides a number of utilities to handle the unique requirements of "
"logging in Web server environment."
msgstr ""

# e2642501f7fc46c69b077f8d0e203774
#: ../../topics/logging.txt:418
msgid "Django provides three built-in loggers."
msgstr ""

# a06ad725020d467e9f9d12b644f7fe6e
#: ../../topics/logging.txt:421
msgid "``django``"
msgstr ""

# 751fd4ce2edb4268936135812c9333a6
#: ../../topics/logging.txt:423
msgid ""
"``django`` is the catch-all logger. No messages are posted directly to this "
"logger."
msgstr ""

# f60292956d9d4bfead17ed180d416652
#: ../../topics/logging.txt:427
msgid "``django.request``"
msgstr ""

# ce47aac3c8834f6dbbca79b8e25cfd56
#: ../../topics/logging.txt:429
msgid ""
"Log messages related to the handling of requests. 5XX responses are raised "
"as ``ERROR`` messages; 4XX responses are raised as ``WARNING`` messages."
msgstr ""

# ada9a4f225624f8aa40d600cbaea49a1
# 03861da84cca4b099d6e394c6c128b89
#: ../../topics/logging.txt:433 ../../topics/logging.txt:448
msgid "Messages to this logger have the following extra context:"
msgstr ""

# 6bdbd7de7f0e4bd0b5a5f4aa88539d06
#: ../../topics/logging.txt:435
msgid "``status_code``: The HTTP response code associated with the request."
msgstr ""

# 1ed63dd9126247ff872910b3e027926a
#: ../../topics/logging.txt:438
msgid "``request``: The request object that generated the logging message."
msgstr ""

# 6926e2a1990b404abad4bf05207f3489
#: ../../topics/logging.txt:442
msgid "``django.db.backends``"
msgstr ""

# 2a6e2337955743c2b397008a52a1edd3
#: ../../topics/logging.txt:444
msgid ""
"Messages relating to the interaction of code with the database. For example, "
"every SQL statement executed by a request is logged at the ``DEBUG`` level "
"to this logger."
msgstr ""

# 12be06cb27524ebd8e013473f6c2fee7
#: ../../topics/logging.txt:450
msgid "``duration``: The time taken to execute the SQL statement."
msgstr ""

# 7d52ac968f074a629c630e889aef98a9
#: ../../topics/logging.txt:451
msgid "``sql``: The SQL statement that was executed."
msgstr ""

# 16941d6614e1470ab6dace2dd51a7f28
#: ../../topics/logging.txt:452
msgid "``params``: The parameters that were used in the SQL call."
msgstr ""

# c7b56d41d56b4d47a7c7d82600ff5471
#: ../../topics/logging.txt:454
msgid ""
"For performance reasons, SQL logging is only enabled when ``settings.DEBUG`` "
"is set to ``True``, regardless of the logging level or handlers that are "
"installed."
msgstr ""

# 7d4811f19e914dcc8f1812fbe4c9cf9b
#: ../../topics/logging.txt:461
msgid ""
"Django provides one log handler in addition to those provided by the Python "
"logging module."
msgstr ""

# 5138c8a4fc8a495fb00677af7f7ec459
#: ../../topics/logging.txt:466
msgid ""
"This handler sends an email to the site admins for each log message it "
"receives."
msgstr ""

# 79e724a1e16347788acd9e22c00335a6
#: ../../topics/logging.txt:469
msgid ""
"If the log record contains a ``request`` attribute, the full details of the "
"request will be included in the email."
msgstr ""

# dbbbb0a35c3246239c1a65fb0fda0138
#: ../../topics/logging.txt:472
msgid ""
"If the log record contains stack trace information, that stack trace will be "
"included in the email."
msgstr ""

# d08aa86684004f64a9739163e4fe849e
#: ../../topics/logging.txt:475
msgid ""
"The ``include_html`` argument of ``AdminEmailHandler`` is used to control "
"whether the traceback email includes an HTML attachment containing the full "
"content of the debug Web page that would have been produced if :setting:"
"`DEBUG` were ``True``. To set this value in your configuration, include it "
"in the handler definition for ``django.utils.log.AdminEmailHandler``, like "
"this::"
msgstr ""

# ea9ee78bbb294e10af101076f15a5ef5
#: ../../topics/logging.txt:490
msgid ""
"Note that this HTML version of the email contains a full traceback, with "
"names and values of local variables at each level of the stack, plus the "
"values of your Django settings. This information is potentially very "
"sensitive, and you may not want to send it over email. Consider using "
"something such as `django-sentry`_ to get the best of both worlds -- the "
"rich information of full tracebacks plus the security of *not* sending the "
"information over email. You may also explicitly designate certain sensitive "
"information to be filtered out of error reports -- learn more on :ref:"
"`Filtering error reports<filtering-error-reports>`."
msgstr ""

# 9cccde6ebf714f6780212807a815422f
#: ../../topics/logging.txt:506
msgid ""
"Django provides two log filters in addition to those provided by the Python "
"logging module."
msgstr ""

# c145ec0718cc45f7b04f21c2fda1d438
#: ../../topics/logging.txt:513
msgid ""
"This filter accepts a callback function (which should accept a single "
"argument, the record to be logged), and calls it for each record that passes "
"through the filter. Handling of that record will not proceed if the callback "
"returns False."
msgstr ""

# 37168fffb3a64bfc88c32c74393cb634
#: ../../topics/logging.txt:522
msgid "This filter will only pass on records when settings.DEBUG is False."
msgstr ""

# d75ac888d5e34ceaae43f025f0ec835a
#: ../../topics/logging.txt:524
msgid ""
"This filter is used as follows in the default :setting:`LOGGING` "
"configuration to ensure that the :class:`AdminEmailHandler` only sends error "
"emails to admins when :setting:`DEBUG` is `False`::"
msgstr ""
