# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2012.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-02-15 15:13\n"
"PO-Revision-Date: 2012-02-15 15:13\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# 4b61d09e086b43ba898827b9378441b3
#: ../../topics/conditional-view-processing.txt:3
msgid "Conditional View Processing"
msgstr ""

# a740e5af0fe44e0b87ff4edde8808c42
#: ../../topics/conditional-view-processing.txt:5
msgid ""
"HTTP clients can send a number of headers to tell the server about copies of "
"a resource that they have already seen. This is commonly used when "
"retrieving a Web page (using an HTTP ``GET`` request) to avoid sending all "
"the data for something the client has already retrieved. However, the same "
"headers can be used for all HTTP methods (``POST``, ``PUT``, ``DELETE``, "
"etc)."
msgstr ""

# c4003defcd6441f2b9c4ac59ea490443
#: ../../topics/conditional-view-processing.txt:11
msgid ""
"For each page (response) that Django sends back from a view, it might "
"provide two HTTP headers: the ``ETag`` header and the ``Last-Modified`` "
"header. These headers are optional on HTTP responses. They can be set by "
"your view function, or you can rely on the :class:`~django.middleware.common."
"CommonMiddleware` middleware to set the ``ETag`` header."
msgstr ""

# aa0e5090717e4fb4aaf1dea215cd9d12
#: ../../topics/conditional-view-processing.txt:17
msgid ""
"When the client next requests the same resource, it might send along a "
"header such as `If-modified-since`_, containing the date of the last "
"modification time it was sent, or `If-none-match`_, containing the ``ETag`` "
"it was sent. If the current version of the page matches the ``ETag`` sent by "
"the client, or if the resource has not been modified, a 304 status code can "
"be sent back, instead of a full response, telling the client that nothing "
"has changed."
msgstr ""

# 89a6c63ef40e40b9ac2625c1b051cb9c
#: ../../topics/conditional-view-processing.txt:27
msgid ""
"When you need more fine-grained control you may use per-view conditional "
"processing functions."
msgstr ""

# 3a41aa3f847d4deaadbb9d560ed308cd
#: ../../topics/conditional-view-processing.txt:33
msgid "The ``condition`` decorator"
msgstr ""

# b323a44866304b859991f3271b7de36a
#: ../../topics/conditional-view-processing.txt:35
msgid ""
"Sometimes (in fact, quite often) you can create functions to rapidly compute "
"the ETag_ value or the last-modified time for a resource, **without** "
"needing to do all the computations needed to construct the full view. Django "
"can then use these functions to provide an \"early bailout\" option for the "
"view processing. Telling the client that the content has not been modified "
"since the last request, perhaps."
msgstr ""

# ec07c61cd0004a33b14e8a7b8339fdcc
#: ../../topics/conditional-view-processing.txt:44
msgid ""
"These two functions are passed as parameters the ``django.views.decorators."
"http.condition`` decorator. This decorator uses the two functions (you only "
"need to supply one, if you can't compute both quantities easily and quickly) "
"to work out if the headers in the HTTP request match those on the resource. "
"If they don't match, a new copy of the resource must be computed and your "
"normal view is called."
msgstr ""

# 005fcbf2116b4467b75d1351230fb958
#: ../../topics/conditional-view-processing.txt:51
msgid "The ``condition`` decorator's signature looks like this::"
msgstr ""

# ed8054c6d99440b185fd36d01c628e74
#: ../../topics/conditional-view-processing.txt:55
msgid ""
"The two functions, to compute the ETag and the last modified time, will be "
"passed the incoming ``request`` object and the same parameters, in the same "
"order, as the view function they are helping to wrap. The function passed "
"``last_modified_func`` should return a standard datetime value specifying "
"the last time the resource was modified, or ``None`` if the resource doesn't "
"exist. The function passed to the ``etag`` decorator should return a string "
"representing the `Etag`_ for the resource, or ``None`` if it doesn't exist."
msgstr ""

# 417c8fb516194da8912b9ccc8874700b
#: ../../topics/conditional-view-processing.txt:63
msgid ""
"Using this feature usefully is probably best explained with an example. "
"Suppose you have this pair of models, representing a simple blog system::"
msgstr ""

# 290aee1d643d430ab800d0519c4be1be
#: ../../topics/conditional-view-processing.txt:77
msgid ""
"If the front page, displaying the latest blog entries, only changes when you "
"add a new blog entry, you can compute the last modified time very quickly. "
"You need the latest ``published`` date for every entry associated with that "
"blog. One way to do this would be::"
msgstr ""

# c9e430ab08014d098192257e241ab0b8
#: ../../topics/conditional-view-processing.txt:85
msgid ""
"You can then use this function to provide early detection of an unchanged "
"page for your front page view::"
msgstr ""

# 14a0168d64474c639ea0b7d057df4f43
#: ../../topics/conditional-view-processing.txt:95
msgid "Shortcuts for only computing one value"
msgstr ""

# aa9290d0eafa421494d5607202331bf6
#: ../../topics/conditional-view-processing.txt:97
msgid ""
"As a general rule, if you can provide functions to compute *both* the ETag "
"and the last modified time, you should do so. You don't know which headers "
"any given HTTP client will send you, so be prepared to handle both. However, "
"sometimes only one value is easy to compute and Django provides decorators "
"that handle only ETag or only last-modified computations."
msgstr ""

# 43a98a45fab2409cb0b78d44cf4a9829
#: ../../topics/conditional-view-processing.txt:103
msgid ""
"The ``django.views.decorators.http.etag`` and ``django.views.decorators.http."
"last_modified`` decorators are passed the same type of functions as the "
"``condition`` decorator. Their signatures are::"
msgstr ""

# dc4ac2219e4b4ae492bd53ae8f02d8e7
#: ../../topics/conditional-view-processing.txt:110
msgid ""
"We could write the earlier example, which only uses a last-modified "
"function, using one of these decorators::"
msgstr ""

# 507c782dfb694948b40601e260d6399e
#: ../../topics/conditional-view-processing.txt:117
msgid "...or::"
msgstr ""

# 7e5f62f68b9145e592863613a701a176
#: ../../topics/conditional-view-processing.txt:124
msgid "Use ``condition`` when testing both conditions"
msgstr ""

# 8ea726009c014e2d8917d5f1824809cf
#: ../../topics/conditional-view-processing.txt:126
msgid ""
"It might look nicer to some people to try and chain the ``etag`` and "
"``last_modified`` decorators if you want to test both preconditions. "
"However, this would lead to incorrect behavior."
msgstr ""

# f7c6adea301f4f5fa1fd0749b29c5041
#: ../../topics/conditional-view-processing.txt:140
msgid ""
"The first decorator doesn't know anything about the second and might answer "
"that the response is not modified even if the second decorators would "
"determine otherwise. The ``condition`` decorator uses both callback "
"functions simultaneously to work out the right action to take."
msgstr ""

# 56ea4b6dff8a45e9bee333c6fb85884b
#: ../../topics/conditional-view-processing.txt:146
msgid "Using the decorators with other HTTP methods"
msgstr ""

# fd345fea72464086a1cec263931cf2b0
#: ../../topics/conditional-view-processing.txt:148
msgid ""
"The ``condition`` decorator is useful for more than only ``GET`` and "
"``HEAD`` requests (``HEAD`` requests are the same as ``GET`` in this "
"situation). It can be used also to be used to provide checking for ``POST``, "
"``PUT`` and ``DELETE`` requests. In these situations, the idea isn't to "
"return a \"not modified\" response, but to tell the client that the resource "
"they are trying to change has been altered in the meantime."
msgstr ""

# bb19168659d04ac5b196ea3c348ee8a7
#: ../../topics/conditional-view-processing.txt:155
msgid ""
"For example, consider the following exchange between the client and server:"
msgstr ""

# a3eee41cb6c04b6bb2f41398254e4101
#: ../../topics/conditional-view-processing.txt:157
msgid "Client requests ``/foo/``."
msgstr ""

# e7dda3237f31488ba00797550611ff71
#: ../../topics/conditional-view-processing.txt:158
msgid "Server responds with some content with an ETag of ``\"abcd1234\"``."
msgstr ""

# e2727c59d632499ba8907ec715ef6143
#: ../../topics/conditional-view-processing.txt:159
msgid ""
"Client sends an HTTP ``PUT`` request to ``/foo/`` to update the resource. It "
"also sends an ``If-Match: \"abcd1234\"`` header to specify the version it is "
"trying to update."
msgstr ""

# ad100b936ea244d3886a894faac25735
#: ../../topics/conditional-view-processing.txt:162
msgid ""
"Server checks to see if the resource has changed, by computing the ETag the "
"same way it does for a ``GET`` request (using the same function). If the "
"resource *has* changed, it will return a 412 status code code, meaning "
"\"precondition failed\"."
msgstr ""

# 91c25b44a0a54cd7bf9aa300fc704429
#: ../../topics/conditional-view-processing.txt:166
msgid ""
"Client sends a ``GET`` request to ``/foo/``, after receiving a 412 response, "
"to retrieve an updated version of the content before updating it."
msgstr ""

# 5cd324b69b7645e2863e59e7046c5874
#: ../../topics/conditional-view-processing.txt:170
msgid ""
"The important thing this example shows is that the same functions can be "
"used to compute the ETag and last modification values in all situations. In "
"fact, you **should** use the same functions, so that the same values are "
"returned every time."
msgstr ""

# 4b5758b74cef42ef89a785bc5be76d22
#: ../../topics/conditional-view-processing.txt:176
msgid "Comparison with middleware conditional processing"
msgstr ""

# 26134701a597469bbd85114570512046
#: ../../topics/conditional-view-processing.txt:178
msgid ""
"You may notice that Django already provides simple and straightforward "
"conditional ``GET`` handling via the :class:`django.middleware.http."
"ConditionalGetMiddleware` and :class:`~django.middleware.common."
"CommonMiddleware`. Whilst certainly being easy to use and suitable for many "
"situations, those pieces of middleware functionality have limitations for "
"advanced usage:"
msgstr ""

# e674e88579fb420d8498f8883caa5bcf
#: ../../topics/conditional-view-processing.txt:185
msgid "They are applied globally to all views in your project"
msgstr ""

# dc50ef424ceb497fb80e78e7ff703c15
#: ../../topics/conditional-view-processing.txt:186
msgid ""
"They don't save you from generating the response itself, which may be "
"expensive"
msgstr ""

# 7c26453a21294d178751a99d43b2463b
#: ../../topics/conditional-view-processing.txt:188
msgid "They are only appropriate for HTTP ``GET`` requests."
msgstr ""

# b7f618a92b244c339925bfdc4893331b
#: ../../topics/conditional-view-processing.txt:190
msgid ""
"You should choose the most appropriate tool for your particular problem "
"here. If you have a way to compute ETags and modification times quickly and "
"if some view takes a while to generate the content, you should consider "
"using the ``condition`` decorator described in this document. If everything "
"already runs fairly quickly, stick to using the middleware and the amount of "
"network traffic sent back to the clients will still be reduced if the view "
"hasn't changed."
msgstr ""
