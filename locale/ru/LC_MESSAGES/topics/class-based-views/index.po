# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2013.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-02-27 00:21\n"
"PO-Revision-Date: 2013-02-27 00:21\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# 4e1992488b434b25b562db9a20c24a60
#: ../../topics/class-based-views/index.txt:3
msgid "Class-based views"
msgstr ""

# 1dc82f765aab4dc2a4211e6d5dc1fd2d
#: ../../topics/class-based-views/index.txt:5
msgid ""
"A view is a callable which takes a request and returns a response. This can "
"be more than just a function, and Django provides an example of some classes "
"which can be used as views. These allow you to structure your views and "
"reuse code by harnessing inheritance and mixins. There are also some generic "
"views for simple tasks which we'll get to later, but you may want to design "
"your own structure of reusable views which suits your use case. For full "
"details, see the :doc:`class-based views reference documentation</ref/class-"
"based-views/index>`."
msgstr ""

# 31af98e814f749289905f969f14953a5
#: ../../topics/class-based-views/index.txt:22
msgid "Basic examples"
msgstr ""

# 2671579316004cb4902d1c7d82a56355
#: ../../topics/class-based-views/index.txt:24
msgid ""
"Django provides base view classes which will suit a wide range of "
"applications. All views inherit from the :class:`~django.views.generic.base."
"View` class, which handles linking the view in to the URLs, HTTP method "
"dispatching and other simple features. :class:`~django.views.generic.base."
"RedirectView` is for a simple HTTP redirect, and :class:`~django.views."
"generic.base.TemplateView` extends the base class to make it also render a "
"template."
msgstr ""

# fa8fd291147e4dd9b9fd44d0da82d53a
#: ../../topics/class-based-views/index.txt:33
msgid "Simple usage in your URLconf"
msgstr ""

# 4254d7dcd0d94996b387ae8b1b3c410e
#: ../../topics/class-based-views/index.txt:35
msgid ""
"The simplest way to use generic views is to create them directly in your "
"URLconf. If you're only changing a few simple attributes on a class-based "
"view, you can simply pass them into the :meth:`~django.views.generic.base."
"View.as_view` method call itself::"
msgstr ""

# 0e702fb0570041739ae0a3b46f83dfc7
#: ../../topics/class-based-views/index.txt:47
msgid ""
"Any arguments passed to :meth:`~django.views.generic.base.View.as_view` will "
"override attributes set on the class. In this example, we set "
"``template_name`` on the ``TemplateView``. A similar overriding pattern can "
"be used for the ``url`` attribute on :class:`~django.views.generic.base."
"RedirectView`."
msgstr ""

# f66b832eb1c3405c93710f897d398a29
#: ../../topics/class-based-views/index.txt:54
msgid "Subclassing generic views"
msgstr ""

# c42231bda2424dd7bc6cc63c2d1fb179
#: ../../topics/class-based-views/index.txt:56
msgid ""
"The second, more powerful way to use generic views is to inherit from an "
"existing view and override attributes (such as the ``template_name``) or "
"methods (such as ``get_context_data``) in your subclass to provide new "
"values or methods. Consider, for example, a view that just displays one "
"template, ``about.html``. Django has a generic view to do this - :class:"
"`~django.views.generic.base.TemplateView` - so we can just subclass it, and "
"override the template name::"
msgstr ""

# 4bb4df0a7fde4aa7be3b3dbee8dc0a8a
#: ../../topics/class-based-views/index.txt:70
msgid ""
"Then we just need to add this new view into our URLconf. `~django.views."
"generic.base.TemplateView` is a class, not a function, so we point the URL "
"to the :meth:`~django.views.generic.base.View.as_view` class method instead, "
"which provides a function-like entry to class-based views::"
msgstr ""

# 4455863a35f4417188ea370333541a55
#: ../../topics/class-based-views/index.txt:84
msgid ""
"For more information on how to use the built in generic views, consult the "
"next topic on :doc:`generic class based views</topics/class-based-views/"
"generic-display>`."
msgstr ""

# ffb1788a497a41cd84c1360960a3b3a8
#: ../../topics/class-based-views/index.txt:90
msgid "Supporting other HTTP methods"
msgstr ""

# 030f215f234244adb11397aacd40597f
#: ../../topics/class-based-views/index.txt:92
msgid ""
"Suppose somebody wants to access our book library over HTTP using the views "
"as an API. The API client would connect every now and then and download book "
"data for the books published since last visit. But if no new books appeared "
"since then, it is a waste of CPU time and bandwidth to fetch the books from "
"the database, render a full response and send it to the client. It might be "
"preferable to ask the API when the most recent book was published."
msgstr ""

# 86b3a6c0880649b3b1c1dcbba37cbada
#: ../../topics/class-based-views/index.txt:99
msgid "We map the URL to book list view in the URLconf::"
msgstr ""

# fd417ea95107429bb8d751e9302cd8ec
#: ../../topics/class-based-views/index.txt:108
msgid "And the view::"
msgstr ""

# 095a0cc5356c4c839618a1cd1765588d
#: ../../topics/class-based-views/index.txt:124
msgid ""
"If the view is accessed from a ``GET`` request, a plain-and-simple object "
"list is returned in the response (using ``book_list.html`` template). But if "
"the client issues a ``HEAD`` request, the response has an empty body and the "
"``Last-Modified`` header indicates when the most recent book was published. "
"Based on this information, the client may or may not download the full "
"object list."
msgstr ""

# 1045038e92e947c0b3dfe1a47df1ebc1
#: ../../topics/class-based-views/index.txt:132
msgid "Decorating class-based views"
msgstr ""

# f5d005da5b6c41b4af846a34877027de
#: ../../topics/class-based-views/index.txt:136
msgid ""
"Since class-based views aren't functions, decorating them works differently "
"depending on if you're using ``as_view`` or creating a subclass."
msgstr ""

# d832f9b3d488471089a526c6a80186e9
#: ../../topics/class-based-views/index.txt:140
msgid "Decorating in URLconf"
msgstr ""

# 6122365ca15048f3bb9e69de45b0d2be
#: ../../topics/class-based-views/index.txt:142
msgid ""
"The simplest way of decorating class-based views is to decorate the result "
"of the :meth:`~django.views.generic.base.View.as_view` method. The easiest "
"place to do this is in the URLconf where you deploy your view::"
msgstr ""

# 5b1551435d0146b6871df158e96ba751
#: ../../topics/class-based-views/index.txt:156
msgid ""
"This approach applies the decorator on a per-instance basis. If you want "
"every instance of a view to be decorated, you need to take a different "
"approach."
msgstr ""

# 6cbe6826bb0f4af890563b52fbef3cea
#: ../../topics/class-based-views/index.txt:163
msgid "Decorating the class"
msgstr ""

# 1b74ebf7a8f149e7a03bb65766cb75ac
#: ../../topics/class-based-views/index.txt:165
msgid ""
"To decorate every instance of a class-based view, you need to decorate the "
"class definition itself. To do this you apply the decorator to the :meth:"
"`~django.views.generic.base.View.dispatch` method of the class."
msgstr ""

# 2b6757862fb046c78e40d28537f98a30
#: ../../topics/class-based-views/index.txt:169
msgid ""
"A method on a class isn't quite the same as a standalone function, so you "
"can't just apply a function decorator to the method -- you need to transform "
"it into a method decorator first. The ``method_decorator`` decorator "
"transforms a function decorator into a method decorator so that it can be "
"used on an instance method. For example::"
msgstr ""

# d59d7b95ea434853a77456c7e0ab6286
#: ../../topics/class-based-views/index.txt:186
msgid ""
"In this example, every instance of ``ProtectedView`` will have login "
"protection."
msgstr ""

# c11da2d72adc4e91abc48b081bd1a5cb
#: ../../topics/class-based-views/index.txt:191
msgid ""
"``method_decorator`` passes ``*args`` and ``**kwargs`` as parameters to the "
"decorated method on the class. If your method does not accept a compatible "
"set of parameters it will raise a ``TypeError`` exception."
msgstr ""
