# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2014.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-07-11 11:43+0300\n"
"PO-Revision-Date: 2014-07-11 11:43+0300\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# 4ae0e898410b4af1b5d8986d8651b691
#: ../../topics/migrations.txt:3
msgid "Migrations"
msgstr ""

# 66934939f1db41d99199317ae317b295
#: ../../topics/migrations.txt:10
msgid ""
"Migrations are Django's way of propagating changes you make to your models "
"(adding a field, deleting a model, etc.) into your database schema. They're "
"designed to be mostly automatic, but you'll need to know when to make "
"migrations, when to run them, and the common problems you might run into."
msgstr ""

# bcaa02ba15314001b110f5c3b9c2116e
#: ../../topics/migrations.txt:16
msgid "A Brief History"
msgstr ""

# 52c5b149d71d4d7d864240c74908243b
#: ../../topics/migrations.txt:18
msgid ""
"Prior to version 1.7, Django only supported adding new models to the "
"database; it was not possible to alter or remove existing models via the "
"``syncdb`` command (the predecessor to :djadmin:`migrate`)."
msgstr ""

# 8bce4b1048d543eea2b37bf02ba9b6e9
#: ../../topics/migrations.txt:22
msgid ""
"Third-party tools, most notably `South <http://south.aeracode.org>`_, "
"provided support for these additional types of change, but it was considered "
"important enough that support was brought into core Django."
msgstr ""

# 1a8912ad5d704b3b876f04bac5346056
#: ../../topics/migrations.txt:27
msgid "Two Commands"
msgstr ""

# 3334a3adcf6845b2b1a7308ccfc95105
#: ../../topics/migrations.txt:29
msgid ""
"There are two commands which you will use to interact with migrations and "
"Django's handling of database schema:"
msgstr ""

# 0fa0b246ddad45dc91d8907d5b7da1fb
#: ../../topics/migrations.txt:32
msgid ""
":djadmin:`migrate`, which is responsible for applying migrations, as well as "
"unapplying and listing their status."
msgstr ""

# 23ed031a276b4b06a1944ea56aea58f2
#: ../../topics/migrations.txt:35
msgid ""
":djadmin:`makemigrations`, which is responsible for creating new migrations "
"based on the changes you have made to your models."
msgstr ""

# f9f66f2d17dd4dfb8c67928d3d2aebec
#: ../../topics/migrations.txt:38
msgid ""
"It's worth noting that migrations are created and run on a per-app basis. In "
"particular, it's possible to have apps that *do not use migrations* (these "
"are referred to as \"unmigrated\" apps) - these apps will instead mimic the "
"legacy behavior of just adding new models."
msgstr ""

# 724b590ec3a943cf945cc976894f62cb
#: ../../topics/migrations.txt:43
msgid ""
"You should think of migrations as a version control system for your database "
"schema. ``makemigrations`` is responsible for packaging up your model "
"changes into individual migration files - analogous to commits - and "
"``migrate`` is responsible for applying those to your database."
msgstr ""

# d9c3b8cb714f4013b7b1f79e93b81789
#: ../../topics/migrations.txt:48
msgid ""
"The migration files for each app live in a \"migrations\" directory inside "
"of that app, and are designed to be committed to, and distributed as part "
"of, its codebase. You should be making them once on your development machine "
"and then running the same migrations on your colleagues' machines, your "
"staging machines, and eventually your production machines."
msgstr ""

# 5866b5664d854729a01a79c25c987775
#: ../../topics/migrations.txt:55
msgid ""
"It is possible to override the name of the package which contains the "
"migrations on a per-app basis by modifying the :setting:`MIGRATION_MODULES` "
"setting."
msgstr ""

# 3333bc2205fc4c539390d7d3314e5703
#: ../../topics/migrations.txt:59
msgid ""
"Migrations will run the same way on the same dataset and produce consistent "
"results, meaning that what you see in development and staging is, under the "
"same circumstances, exactly what will happen in production."
msgstr ""

# 5129f9020a16432393401f4aa1f6fbcd
#: ../../topics/migrations.txt:63
msgid ""
"Django will make migrations for any change to your models or fields - even "
"options that don't affect the database - as the only way it can reconstruct "
"a field correctly is to have all the changes in the history, and you might "
"need those options in some data migrations later on (for example, if you've "
"set custom validators)."
msgstr ""

# e602150881c64a76b7ac2446ea8b138f
#: ../../topics/migrations.txt:70
msgid "Backend Support"
msgstr ""

# 52d53c914fe04fc38bacc2e67fc9e533
#: ../../topics/migrations.txt:72
msgid ""
"Migrations are supported on all backends that Django ships with, as well as "
"any third-party backends if they have programmed in support for schema "
"alteration (done via the :doc:`SchemaEditor </ref/schema-editor>` class)."
msgstr ""

# 3b9737ee454a4c6f81f5f0c1d72994a0
#: ../../topics/migrations.txt:76
msgid ""
"However, some databases are more capable than others when it comes to schema "
"migrations; some of the caveats are covered below."
msgstr ""

# f5cbd8fff95a409e93031614beb07b0c
#: ../../topics/migrations.txt:80
msgid "PostgreSQL"
msgstr ""

# b2a89d061fa44bb28495371dca883717
#: ../../topics/migrations.txt:82
msgid ""
"PostgreSQL is the most capable of all the databases here in terms of schema "
"support; the only caveat is that adding columns with default values will "
"cause a full rewrite of the table, for a time proportional to its size."
msgstr ""

# 7865129d0b8d428bbb80c221e58fec4b
#: ../../topics/migrations.txt:86
msgid ""
"For this reason, it's recommended you always create new columns with "
"``null=True``, as this way they will be added immediately."
msgstr ""

# 01f0d309a6e645839e84158c9515ce5f
#: ../../topics/migrations.txt:90
msgid "MySQL"
msgstr ""

# 82f57992e60a42adadccaeab300fee48
#: ../../topics/migrations.txt:92
msgid ""
"MySQL lacks support for transactions around schema alteration operations, "
"meaning that if a migration fails to apply you will have to manually unpick "
"the changes in order to try again (it's impossible to roll back to an "
"earlier point)."
msgstr ""

# 53796914fdff474593d19c84c355e67f
#: ../../topics/migrations.txt:97
msgid ""
"In addition, MySQL will fully rewrite tables for almost every schema "
"operation and generally takes a time proportional to the number of rows in "
"the table to add or remove columns. On slower hardware this can be worse "
"than a minute per million rows - adding a few columns to a table with just a "
"few million rows could lock your site up for over ten minutes."
msgstr ""

# b3e4d3493b474db5b545bb590bc204b6
#: ../../topics/migrations.txt:103
msgid ""
"Finally, MySQL has reasonably small limits on name lengths for columns, "
"tables and indexes, as well as a limit on the combined size of all columns "
"an index covers. This means that indexes that are possible on other backends "
"will fail to be created under MySQL."
msgstr ""

# b0c83ab5fa6b4d968f6285bb9c6812eb
#: ../../topics/migrations.txt:109
msgid "SQLite"
msgstr ""

# a48f00f1d859482d9b856382217ed931
#: ../../topics/migrations.txt:111
msgid ""
"SQLite has very little built-in schema alteration support, and so Django "
"attempts to emulate it by:"
msgstr ""

# edd1c416b9194276935df566ff109f52
#: ../../topics/migrations.txt:114
msgid "Creating a new table with the new schema"
msgstr ""

# 8594d81ee95d41a4a953d3ae1b040e75
#: ../../topics/migrations.txt:115
msgid "Copying the data across"
msgstr ""

# 9e20f7f9570b4e658eb434d72f2dddaa
#: ../../topics/migrations.txt:116
msgid "Dropping the old table"
msgstr ""

# a3a19e28138d44e39c15547dea89b05f
#: ../../topics/migrations.txt:117
msgid "Renaming the new table to match the original name"
msgstr ""

# ab790323ace64e6d9bb6f024cf0540a2
#: ../../topics/migrations.txt:119
msgid ""
"This process generally works well, but it can be slow and occasionally "
"buggy. It is not recommended that you run and migrate SQLite in a production "
"environment unless you are very aware of the risks and its limitations; the "
"support Django ships with is designed to allow developers to use SQLite on "
"their local machines to develop less complex Django projects without the "
"need for a full database."
msgstr ""

# 726b0cfa76d0423cae0d8d3acfdd75de
#: ../../topics/migrations.txt:127
msgid "Workflow"
msgstr ""

# 01c957fe7a4446d8a5ceaaf631745256
#: ../../topics/migrations.txt:129
msgid ""
"Working with migrations is simple. Make changes to your models - say, add a "
"field and remove a model - and then run :djadmin:`makemigrations`::"
msgstr ""

# a2b9fa34e05149e6974d78e22c9d00e1
#: ../../topics/migrations.txt:137
msgid ""
"Your models will be scanned and compared to the versions currently contained "
"in your migration files, and then a new set of migrations will be written "
"out. Make sure to read the output to see what ``makemigrations`` thinks you "
"have changed - it's not perfect, and for complex changes it might not be "
"detecting what you expect."
msgstr ""

# 18d7d96e09204ca9840d27da08afebf4
#: ../../topics/migrations.txt:143
msgid ""
"Once you have your new migration files, you should apply them to your "
"database to make sure they work as expected::"
msgstr ""

# 5378d8cacfe94d879e3b74f7123de48c
#: ../../topics/migrations.txt:158
msgid ""
"The command runs in two stages; first, it synchronizes unmigrated apps "
"(performing the same functionality that ``syncdb`` used to provide), and "
"then it runs any migrations that have not yet been applied."
msgstr ""

# 5d872ee9124b4a07879976c492d5a2e6
#: ../../topics/migrations.txt:162
msgid ""
"Once the migration is applied, commit the migration and the models change to "
"your version control system as a single commit - that way, when other "
"developers (or your production servers) check out the code, they'll get both "
"the changes to your models and the accompanying migration at the same time."
msgstr ""

# 5ceefbc0ae96437ab20d3ad58c3434e8
#: ../../topics/migrations.txt:169
msgid "Version control"
msgstr ""

# 6e6cc39db4974621ab13eea81290580c
#: ../../topics/migrations.txt:171
msgid ""
"Because migrations are stored in version control, you'll occasionally come "
"across situations where you and another developer have both committed a "
"migration to the same app at the same time, resulting in two migrations with "
"the same number."
msgstr ""

# 9248cefb9a9c40cb8daa54a2877b8741
#: ../../topics/migrations.txt:176
msgid ""
"Don't worry - the numbers are just there for developers' reference, Django "
"just cares that each migration has a different name. Migrations specify "
"which other migrations they depend on - including earlier migrations in the "
"same app - in the file, so it's possible to detect when there's two new "
"migrations for the same app that aren't ordered."
msgstr ""

# 84deca5223814007a1e161b11de1c08d
#: ../../topics/migrations.txt:182
msgid ""
"When this happens, Django will prompt you and give you some options. If it "
"thinks it's safe enough, it will offer to automatically linearize the two "
"migrations for you. If not, you'll have to go in and modify the migrations "
"yourself - don't worry, this isn't difficult, and is explained more in :ref:"
"`migration-files` below."
msgstr ""

# 83ce6c2fc4cf419c9290f051e10d0cf6
#: ../../topics/migrations.txt:189
msgid "Dependencies"
msgstr ""

# 54679ffa1b544f4f9e116a8ee1e271c9
#: ../../topics/migrations.txt:191
msgid ""
"While migrations are per-app, the tables and relationships implied by your "
"models are too complex to be created for just one app at a time. When you "
"make a migration that requires something else to run - for example, you add "
"a ``ForeignKey`` in your ``books`` app to your ``authors`` app - the "
"resulting migration will contain a dependency on a migration in ``authors``."
msgstr ""

# 2ba2a46ffc634bf3a70176dfb2892d2b
#: ../../topics/migrations.txt:197
msgid ""
"This means that when you run the migrations, the ``authors`` migration runs "
"first and creates the table the ``ForeignKey`` references, and then the "
"migration that makes the ``ForeignKey`` column runs afterwards and creates "
"the constraint. If this didn't happen, the migration would try to create the "
"``ForeignKey`` column without the table it's referencing existing and your "
"database would throw an error."
msgstr ""

# 84fe850e74ea4945afd72b027500164e
#: ../../topics/migrations.txt:204
msgid ""
"This dependency behavior affects most migration operations where you "
"restrict to a single app. Restricting to a single app (either in "
"``makemigrations`` or ``migrate``) is a best-efforts promise, and not a "
"guarantee; any other apps that need to be used to get dependencies correct "
"will be."
msgstr ""

# 37093d6b9dbd45ed884f64a969bf5ffb
#: ../../topics/migrations.txt:212
msgid ""
"Be aware, however, that unmigrated apps cannot depend on migrated apps, by "
"the very nature of not having migrations. This means that it is not "
"generally possible to have an unmigrated app have a ForeignKey or "
"ManyToManyField to a migrated app; some cases may work, but it will "
"eventually fail."
msgstr ""

# afcb3b102be446f591f0072e862037af
#: ../../topics/migrations.txt:217
msgid ""
"This is particularly apparent if you use swappable models (e.g. "
"``AUTH_USER_MODEL``), as every app that uses swappable models will need to "
"have migrations if you're unlucky. As time goes on, more and more third-"
"party apps will get migrations, but in the meantime you can either give them "
"migrations yourself (using :setting:`MIGRATION_MODULES` to store those "
"modules outside of the app's own module if you wish), or keep the app with "
"your user model unmigrated."
msgstr ""

# 93d22c6595194f3094940c55f3f59219
#: ../../topics/migrations.txt:228
msgid "Migration files"
msgstr ""

# f4191a9e044c4817838ac48b0bda9b7d
#: ../../topics/migrations.txt:230
msgid ""
"Migrations are stored as an on-disk format, referred to here as \"migration "
"files\". These files are actually just normal Python files with an agreed-"
"upon object layout, written in a declarative style."
msgstr ""

# 5072a48f1c374d9a844fa2f42b150445
#: ../../topics/migrations.txt:234
msgid "A basic migration file looks like this::"
msgstr ""

# 97a17ea5b5c04fc7ba0c30b4ae18d257
#: ../../topics/migrations.txt:247
msgid ""
"What Django looks for when it loads a migration file (as a Python module) is "
"a subclass of ``django.db.migrations.Migration`` called ``Migration``. It "
"then inspects this object for four attributes, only two of which are used "
"most of the time:"
msgstr ""

# 85521968937c4b35809f0651bfb13c3e
#: ../../topics/migrations.txt:252
msgid "``dependencies``, a list of migrations this one depends on."
msgstr ""

# a66452d7d04e4322aa8852309d5adc01
#: ../../topics/migrations.txt:253
msgid ""
"``operations``, a list of ``Operation`` classes that define what this "
"migration does."
msgstr ""

# d16d3f5b003d4776af466667cb8adaac
#: ../../topics/migrations.txt:256
msgid ""
"The operations are the key; they are a set of declarative instructions which "
"tell Django what schema changes need to be made. Django scans them and "
"builds an in-memory representation of all of the schema changes to all apps, "
"and uses this to generate the SQL which makes the schema changes."
msgstr ""

# 0c1878d05fdb48a789a10c4e4500cb83
#: ../../topics/migrations.txt:261
msgid ""
"That in-memory structure is also used to work out what the differences are "
"between your models and the current state of your migrations; Django runs "
"through all the changes, in order, on an in-memory set of models to come up "
"with the state of your models last time you ran ``makemigrations``. It then "
"uses these models to compare against the ones in your ``models.py`` files to "
"work out what you have changed."
msgstr ""

# 828822aec941440881441e9570538990
#: ../../topics/migrations.txt:268
msgid ""
"You should rarely, if ever, need to edit migration files by hand, but it's "
"entirely possible to write them manually if you need to. Some of the more "
"complex operations are not autodetectable and are only available via a hand-"
"written migration, so don't be scared about editing them if you have to."
msgstr ""

# 24659d2038274962b6b7efd88419eeb3
#: ../../topics/migrations.txt:274
msgid "Custom fields"
msgstr ""

# ad921bb3a72f42caa41885f7acc086d2
#: ../../topics/migrations.txt:276
msgid ""
"You can't modify the number of positional arguments in an already migrated "
"custom field without raising a ``TypeError``. The old migration will call "
"the modified ``__init__`` method with the old signature. So if you need a "
"new argument, please create a keyword argument and add something like "
"``assert kwargs.get('argument_name') is not None`` in the constructor."
msgstr ""

# d6e3c9c33e4140e3b2671b71649a2e33
#: ../../topics/migrations.txt:283
msgid "Adding migrations to apps"
msgstr ""

# 21ccfb96e75f4b52b1212c4c0f055208
#: ../../topics/migrations.txt:285
msgid ""
"Adding migrations to new apps is straightforward - they come preconfigured "
"to accept migrations, and so just run :djadmin:`makemigrations` once you've "
"made some changes."
msgstr ""

# 2f44414d8ff34e48a6eb1f3930e2f71f
#: ../../topics/migrations.txt:289
msgid ""
"If your app already has models and database tables, and doesn't have "
"migrations yet (for example, you created it against a previous Django "
"version), you'll need to convert it to use migrations; this is a simple "
"process::"
msgstr ""

# 1a20f8ca21fa42a1a6f8c78530a04a9c
#: ../../topics/migrations.txt:295
msgid ""
"This will make a new initial migration for your app. Now, when you run :"
"djadmin:`migrate`, Django will detect that you have an initial migration "
"*and* that the tables it wants to create already exist, and will mark the "
"migration as already applied."
msgstr ""

# 96cea579051d4d039ba0b4e515506164
#: ../../topics/migrations.txt:300
msgid "Note that this only works given two things:"
msgstr ""

# 68271eb684a84780b274d8f0343bbec5
#: ../../topics/migrations.txt:302
msgid ""
"You have not changed your models since you made their tables. For migrations "
"to work, you must make the initial migration *first* and then make changes, "
"as Django compares changes against migration files, not the database."
msgstr ""

# bda3a3a821914dd3a6f694c835d4aa8f
#: ../../topics/migrations.txt:306
msgid ""
"You have not manually edited your database - Django won't be able to detect "
"that your database doesn't match your models, you'll just get errors when "
"migrations try to modify those tables."
msgstr ""

# 8cfe809f9f394256aee811195a17024d
#: ../../topics/migrations.txt:313
msgid "Historical models"
msgstr ""

# 2ea6bb146c5845cd88c541474c9fa1fb
#: ../../topics/migrations.txt:315
msgid ""
"When you run migrations, Django is working from historical versions of your "
"models stored in the migration files. If you write Python code using the :"
"class:`~django.db.migrations.operations.RunPython` operation, or if you have "
"``allow_migrate`` methods on your database routers, you will be exposed to "
"these versions of your models."
msgstr ""

# b23e65a8ba3d450da348b6f11d11dd42
#: ../../topics/migrations.txt:321
msgid ""
"Because it's impossible to serialize arbitrary Python code, these historical "
"models will not have any custom methods or managers that you have defined. "
"They will, however, have the same fields, relationships and ``Meta`` options "
"(also versioned, so they may be different from your current ones)."
msgstr ""

# bf580196957d4288b45074ec834e67a4
#: ../../topics/migrations.txt:328
msgid ""
"This means that you will NOT have custom ``save()`` methods called on "
"objects when you access them in migrations, and you will NOT have any custom "
"constructors or instance methods. Plan appropriately!"
msgstr ""

# cb56ad648d0f46ef9c2f673870718af0
#: ../../topics/migrations.txt:332
msgid ""
"In addition, the base classes of the model are just stored as pointers, so "
"you must always keep base classes around for as long as there is a migration "
"that contains a reference to them. On the plus side, methods and managers "
"from these base classes inherit normally, so if you absolutely need access "
"to these you can opt to move them into a superclass."
msgstr ""

# 78cc6c6026894dd2a2a1825b20160148
#: ../../topics/migrations.txt:341
msgid "Data Migrations"
msgstr ""

# caca08d3c0924c9d869ea3e08a3a426b
#: ../../topics/migrations.txt:343
msgid ""
"As well as changing the database schema, you can also use migrations to "
"change the data in the database itself, in conjunction with the schema if "
"you want."
msgstr ""

# 86ebda27190b4a50b41994a3bf942453
#: ../../topics/migrations.txt:346
msgid ""
"Migrations that alter data are usually called \"data migrations\"; they're "
"best written as separate migrations, sitting alongside your schema "
"migrations."
msgstr ""

# a964547006c94a2da3e5083deb24c044
#: ../../topics/migrations.txt:349
msgid ""
"Django can't automatically generate data migrations for you, as it does with "
"schema migrations, but it's not very hard to write them. Migration files in "
"Django are made up of :doc:`Operations </ref/migration-operations>`, and the "
"main operation you use for data migrations is :class:`~django.db.migrations."
"operations.RunPython`."
msgstr ""

# ba967cea60ea4690b64191434c501eaf
#: ../../topics/migrations.txt:355
msgid ""
"To start, make an empty migration file you can work from (Django will put "
"the file in the right place, suggest a name, and add dependencies for you)::"
msgstr ""

# 7ac15aee7d1147b08226919cbd2e083f
#: ../../topics/migrations.txt:360
msgid "Then, open up the file; it should look something like this::"
msgstr ""

# 35cbbf276d474a86a0498482574aa6a3
#: ../../topics/migrations.txt:374
msgid ""
"Now, all you need to do is create a new function and have :class:`~django.db."
"migrations.operations.RunPython` use it. :class:`~django.db.migrations."
"operations.RunPython` expects a callable as its argument which takes two "
"arguments - the first is an :doc:`app registry </ref/applications/>` that "
"has the historical versions of all your models loaded into it to match where "
"in your history the migration sits, and the second is a :doc:`SchemaEditor </"
"ref/schema-editor>`, which you can use to manually effect database schema "
"changes (but beware, doing this can confuse the migration autodetector!)"
msgstr ""

# d5ddfd6ed08e4171a9d56e53e6e4c5af
#: ../../topics/migrations.txt:384
msgid ""
"Let's write a simple migration that populates our new ``name`` field with "
"the combined values of ``first_name`` and ``last_name`` (we've come to our "
"senses and realized that not everyone has first and last names). All we need "
"to do is use the historical model and iterate over the rows::"
msgstr ""

# 47d1000613f6492f84b5b2943397671b
#: ../../topics/migrations.txt:410
msgid ""
"Once that's done, we can just run ``python manage.py migrate`` as normal and "
"the data migration will run in place alongside other migrations."
msgstr ""

# 59ba1eb9a4674d268180de43e7448bec
#: ../../topics/migrations.txt:413
msgid ""
"You can pass a second callable to :class:`~django.db.migrations.operations."
"RunPython` to run whatever logic you want executed when migrating backwards. "
"If this callable is omitted, migrating backwards will raise an exception."
msgstr ""

# 243e42c894724ebc90d42ee79ec26b26
#: ../../topics/migrations.txt:418
msgid ""
"If you're interested in the more advanced migration operations, or want to "
"be able to write your own, see the :doc:`migration operations reference </"
"ref/migration-operations>`."
msgstr ""

# b05c63762b6144fbb47e2c647d51a802
#: ../../topics/migrations.txt:425
msgid "Squashing migrations"
msgstr ""

# cfb42be39fa345f89d66b0390bfe1925
#: ../../topics/migrations.txt:427
msgid ""
"You are encouraged to make migrations freely and not worry about how many "
"you have; the migration code is optimized to deal with hundreds at a time "
"without much slowdown. However, eventually you will want to move back from "
"having several hundred migrations to just a few, and that's where squashing "
"comes in."
msgstr ""

# d57634a0412740bb8edf86915f98f1e0
#: ../../topics/migrations.txt:432
msgid ""
"Squashing is the act of reducing an existing set of many migrations down to "
"one (or sometimes a few) migrations which still represent the same changes."
msgstr ""

# aeffdbc435b244b1b46c8924ed9a3654
#: ../../topics/migrations.txt:435
msgid ""
"Django does this by taking all of your existing migrations, extracting their "
"``Operation``\\s and putting them all in sequence, and then running an "
"optimizer over them to try and reduce the length of the list - for example, "
"it knows that :class:`~django.db.migrations.operations.CreateModel` and :"
"class:`~django.db.migrations.operations.DeleteModel` cancel each other out, "
"and it knows that :class:`~django.db.migrations.operations.AddField` can be "
"rolled into :class:`~django.db.migrations.operations.CreateModel`."
msgstr ""

# 84f7908d57ba42109a3ddd1f6de8cc35
#: ../../topics/migrations.txt:443
msgid ""
"Once the operation sequence has been reduced as much as possible - the "
"amount possible depends on how closely intertwined your models are and if "
"you have any :class:`~django.db.migrations.operations.RunSQL` or :class:"
"`~django.db.migrations.operations.RunPython` operations (which can't be "
"optimized through) - Django will them write it back out into a new set of "
"initial migration files."
msgstr ""

# e066934d762f4f90ac2019c019074338
#: ../../topics/migrations.txt:450
msgid ""
"These files are marked to say they replace the previously-squashed "
"migrations, so they can coexist with the old migration files, and Django "
"will intelligently switch between them depending where you are in the "
"history. If you're still part-way through the set of migrations that you "
"squashed, it will keep using them until it hits the end and then switch to "
"the squashed history, while new installs will just use the new squashed "
"migration and skip all the old ones."
msgstr ""

# a01fb381ce1e4fdeb85506cf995740a5
#: ../../topics/migrations.txt:457
msgid ""
"This enables you to squash and not mess up systems currently in production "
"that aren't fully up-to-date yet. The recommended process is to squash, "
"keeping the old files, commit and release, wait until all systems are "
"upgraded with the new release (or if you're a third-party project, just "
"ensure your users upgrade releases in order without skipping any), and then "
"remove the old files, commit and do a second release."
msgstr ""

# 3451808250c94876afff0bbdd45f13b6
#: ../../topics/migrations.txt:464
msgid ""
"The command that backs all this is :djadmin:`squashmigrations` - just pass "
"it the app label and migration name you want to squash up to, and it'll get "
"to work::"
msgstr ""

# 59cd5953ef87435790a7b62c51bb3cd1
#: ../../topics/migrations.txt:483
msgid ""
"Note that model interdependencies in Django can get very complex, and "
"squashing may occasionally result in an optimized migration that doesn't "
"work or is impossible to run. When this occurs, you can re-try with ``--no-"
"optimize``, but please `file a bug report <https://code.djangoproject.com/"
"newticket>`_ either way detailing the models and their relationships so we "
"can improve the optimizer to handle your case."
msgstr ""

# 8158664a9a024e989692d2fea012dbe4
#: ../../topics/migrations.txt:493
msgid "Serializing values"
msgstr ""

# 3835dae0ccbd4a0290e45bf8b2e28c36
#: ../../topics/migrations.txt:495
msgid ""
"Migrations are just Python files containing the old definitions of your "
"models - thus, to write them, Django must take the current state of your "
"models and serialize them out into a file."
msgstr ""

# 4e3f435fa57444b89db594c7775fe810
#: ../../topics/migrations.txt:499
msgid ""
"While Django can serialize most things, there are some things that we just "
"can't serialize out into a valid Python representation - there's no Python "
"standard for how a value can be turned back into code (``repr()`` only works "
"for basic values, and doesn't specify import paths)."
msgstr ""

# 24a0141f270c435cb51d7200f3235c4e
#: ../../topics/migrations.txt:504
msgid "Django can serialize the following:"
msgstr ""

# 3c023ba5c7bb4f328ba2a69bb452d4b9
#: ../../topics/migrations.txt:506
msgid ""
"``int``, ``long``, ``float``, ``bool``, ``str``, ``unicode``, ``bytes``, "
"``None``"
msgstr ""

# 8ac31979a06049e6b613c6934ef117d5
#: ../../topics/migrations.txt:507
msgid "``list``, ``set``, ``tuple``, ``dict``"
msgstr ""

# ca64fb0bf0a5456ca53820c9d122e1cf
#: ../../topics/migrations.txt:508
msgid "``datetime.date`` and ``datetime.datetime`` instances"
msgstr ""

# dccd4f32c500499495cb2d0b1695c0a6
#: ../../topics/migrations.txt:509
msgid "``decimal.Decimal`` instances"
msgstr ""

# 3c7e2115eade4fdb8ff6d89fce83e488
#: ../../topics/migrations.txt:510
msgid "Any Django field"
msgstr ""

# 2ccc05225783451e82a337bc5807e94c
#: ../../topics/migrations.txt:511
msgid "Any function or method reference (e.g. ``datetime.datetime.today``)"
msgstr ""

# f9f395e87c474b439fc28216568a412f
#: ../../topics/migrations.txt:512
msgid "Any class reference"
msgstr ""

# 3690be5782854dcd89e24d2ecba67e13
#: ../../topics/migrations.txt:513
msgid ""
"Anything with a custom ``deconstruct()`` method (:ref:`see below <custom-"
"deconstruct-method>`)"
msgstr ""

# e6c9f707415a4039a56aa5554374de94
#: ../../topics/migrations.txt:515
msgid "Django can serialize the following on Python 3 only:"
msgstr ""

# fb8f447a22184d50a0c6a13137869e0c
#: ../../topics/migrations.txt:517
msgid "Unbound methods used from within the class body (see below)"
msgstr ""

# b65f12427a76490c92420917724eee76
#: ../../topics/migrations.txt:519
msgid "Django cannot serialize:"
msgstr ""

# 13268fe8db994ec9b7c900f028469b2f
#: ../../topics/migrations.txt:521
msgid "Arbitrary class instances (e.g. ``MyClass(4.3, 5.7)``)"
msgstr ""

# 52ca0452e3b04e1aabbad36d63fa5563
#: ../../topics/migrations.txt:522
msgid "Lambdas"
msgstr ""

# 2c8ab6d200d245e1ad286a66e289866e
#: ../../topics/migrations.txt:524
msgid ""
"Due to the fact ``__qualname__`` was only introduced in Python 3, Django can "
"only serialize the following pattern (an unbound method used within the "
"class body) on Python 3, and will fail to serialize a reference to it on "
"Python 2::"
msgstr ""

# 0f4145e724d1413db78f0733b080c625
#: ../../topics/migrations.txt:535
msgid ""
"If you are using Python 2, we recommend you move your methods for upload_to "
"and similar arguments that accept callables (e.g. ``default``) to live in "
"the main module body, rather than the class body."
msgstr ""

# 2fa61872887743bc9e75f74209baa682
#: ../../topics/migrations.txt:542
msgid "Adding a deconstruct() method"
msgstr ""

# b0ee4bef50a1452aa016b9fa128afd36
#: ../../topics/migrations.txt:544
msgid ""
"You can let Django serialize your own custom class instances by giving the "
"class a ``deconstruct()`` method. It takes no arguments, and should return a "
"tuple of three things: ``(path, args, kwargs)``. Note this return value is "
"different from the ``deconstruct()`` method :ref:`for custom fields <custom-"
"field-deconstruct-method>` which returns a tuple of four items."
msgstr ""

# 89f6e73cf8a34929a83c105d8d335c17
#: ../../topics/migrations.txt:550
msgid ""
"``path`` should be the Python path to the class, with the class name "
"included as the last part (for example, ``myapp.custom_things.MyClass``). If "
"your class is not available at the top level of a module it is not "
"serializable."
msgstr ""

# 01cf3c978b104f3b85885d5b9ecebf5d
#: ../../topics/migrations.txt:554
msgid ""
"``args`` should be a list of positional arguments to pass to your class' "
"``__init__`` method. Everything in this list should itself be serializable."
msgstr ""

# 25d989e3b97545d9a8a97300e228dabe
#: ../../topics/migrations.txt:557
msgid ""
"``kwargs`` should be a dict of keyword arguments to pass to your class' "
"``__init__`` method. Every value should itself be serializable."
msgstr ""

# 9b59414e533a418fbe719f49f202c836
#: ../../topics/migrations.txt:560
msgid ""
"Django will write out the value as an instantiation of your class with the "
"given arguments, similar to the way it writes out references to Django "
"fields."
msgstr ""

# 9025384595b24055a0a4eeb44186c79e
#: ../../topics/migrations.txt:563
msgid ""
"As long as all of the arguments to your class' constructor are themselves "
"serializable, you can just use the ``@deconstructible`` class decorator from "
"``django.utils.deconstruct`` to add the method::"
msgstr ""

# 9f6ea85914344b83b692ecbb472af7b3
#: ../../topics/migrations.txt:575
msgid ""
"The decorator adds logic to capture and preserve the arguments on their way "
"into your constructor, and then returns those arguments exactly when "
"deconstruct() is called."
msgstr ""

# 32c8c625df184822ad2fd29bc2a4017a
#: ../../topics/migrations.txt:580
msgid "Upgrading from South"
msgstr ""

# ac3a7e883b8a4701991f462dd01196c0
#: ../../topics/migrations.txt:582
msgid ""
"If you already have pre-existing migrations created with `South 0.x <http://"
"south.aeracode.org>`_, then the upgrade process to use ``django.db."
"migrations`` is quite simple:"
msgstr ""

# 45e05114b12c443f816deae28e6fe7e0
#: ../../topics/migrations.txt:586
msgid "Ensure all installs are fully up-to-date with their migrations"
msgstr ""

# ae5d850c67f7479b9d6870a305000b48
#: ../../topics/migrations.txt:587
msgid ""
"Delete all your (numbered) migration files, but not the directory or "
"``__init__.py`` - make sure you remove the ``.pyc`` files too."
msgstr ""

# 7c2887daf39c4167938ac2127917c5a4
#: ../../topics/migrations.txt:589
msgid ""
"Run ``python manage.py makemigrations``. Django should see the empty "
"migration directories and make new initial migrations in the new format."
msgstr ""

# 16af3c30b8e64f8e8bbf7f175735bcb2
#: ../../topics/migrations.txt:591
msgid ""
"Run ``python manage.py migrate``. Django will see that the tables for the "
"initial migrations already exist and mark them as applied without running "
"them."
msgstr ""

# 65b3045a520c4d2299efe1697fe565b1
#: ../../topics/migrations.txt:595
msgid ""
"That's it! The only complication is if you have a circular dependency loop "
"of foreign keys; in this case, ``makemigrations`` might make more than one "
"initial migration, and you'll need to mark them all as applied using::"
msgstr ""
