# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2013.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-04-23 16:09\n"
"PO-Revision-Date: 2013-02-27 00:21\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# e0f7bb739d3446a5922d1ab4b33cdd73
#: ../../topics/auth/default.txt:3
msgid "Using the Django authentication system"
msgstr ""

# 756f55d8e8ed46feacf44944df759a48
#: ../../topics/auth/default.txt:7
msgid ""
"This document explains the usage of Django's authentication system in its "
"default configuration. This configuration has evolved to serve the most "
"common project needs, handling a reasonably wide range of tasks, and has a "
"careful implementation of passwords and permissions, and can handle many "
"projects as is.  For projects where authentication needs differ from the "
"default, Django supports extensive :doc:`extension and customization </"
"topics/auth/customizing>` of authentication."
msgstr ""

# 43aa262211af48dd965204dfc413aa6f
#: ../../topics/auth/default.txt:15
msgid ""
"Django authentication provides both authentication and authorization, "
"together and is generally referred to as the authentication system, as these "
"features somewhat coupled."
msgstr ""

# 56a16ff906f0414a93778ca166c56cb0
#: ../../topics/auth/default.txt:22
msgid "User objects"
msgstr ""

# 61431470beae4d1c9f0b15c9b1caf828
#: ../../topics/auth/default.txt:24
msgid ""
":class:`~django.contrib.auth.models.User` objects are the core of the "
"authentication system. They typically represent the people interacting with "
"your site and are used to enable things like restricting access, registering "
"user profiles, associating content with creators etc. Only one class of user "
"exists in Django's authentication framework, i.e., 'superusers' or admin "
"'staff' users are just user objects with special attributes set, not "
"different classes of user objects."
msgstr ""

# 2fa48eb1c82840fc987ebdcd0f12899b
#: ../../topics/auth/default.txt:32
msgid "The primary attributes of the default user are:"
msgstr ""

# 2e6c6366128f49a48ab34d98323d8ad3
#: ../../topics/auth/default.txt:34
msgid "username"
msgstr ""

# 77d6442b216940c584e84b05e5b18f75
#: ../../topics/auth/default.txt:35
msgid "password"
msgstr ""

# ee358bda76444ddba0cc03b203411228
#: ../../topics/auth/default.txt:36
msgid "email"
msgstr ""

# e85df72acb044f3dbeafb882e4c90730
#: ../../topics/auth/default.txt:37
msgid "first name"
msgstr ""

# 471e33e4ed034acaad5470ffad31bd1f
#: ../../topics/auth/default.txt:38
msgid "last name"
msgstr ""

# 5b3fe8ca170a4981b3664ab94b15409f
#: ../../topics/auth/default.txt:40
msgid ""
"See the :class:`full API documentation <django.contrib.auth.models.User>` "
"for full reference, the documentation that follows is more task oriented."
msgstr ""

# 5dfadc871e09447e9c7982aa5303de7f
#: ../../topics/auth/default.txt:46
msgid "Creating users"
msgstr ""

# 75e7175e671a4bd6ae762429df0ff256
#: ../../topics/auth/default.txt:48
msgid ""
"The most direct way to create users is to use the included :meth:`~django."
"contrib.auth.models.UserManager.create_user` helper function::"
msgstr ""

# 48bb8e511dda45ed874b9a7b56fa8528
#: ../../topics/auth/default.txt:60
msgid ""
"If you have the Django admin installed, you can also :ref:`create users "
"interactively <auth-admin>`."
msgstr ""

# cd110d1000e64b3eb1160fed83cf726d
#: ../../topics/auth/default.txt:66
msgid "Creating superusers"
msgstr ""

# b64a91c13bcc4f588e86056111fc4f9f
#: ../../topics/auth/default.txt:68
msgid ""
":djadmin:`manage.py syncdb <syncdb>` prompts you to create a superuser the "
"first time you run it with ``'django.contrib.auth'`` in your :setting:"
"`INSTALLED_APPS`. If you need to create a superuser at a later date, you can "
"use a command line utility::"
msgstr ""

# e0890c215b374f75a07c6bdbd0231640
#: ../../topics/auth/default.txt:75
msgid ""
"You will be prompted for a password. After you enter one, the user will be "
"created immediately. If you leave off the :djadminopt:`--username` or the :"
"djadminopt:`--email` options, it will prompt you for those values."
msgstr ""

# eeb93d6376314aed9f48ee8c6c59e3a3
#: ../../topics/auth/default.txt:80
msgid "Changing passwords"
msgstr ""

# 520dbed1fc4640d3ac87ed90ee67e971
#: ../../topics/auth/default.txt:82
msgid ""
"Django does not store raw (clear text) passwords on the user model, but only "
"a hash (see :doc:`documentation of how passwords are managed </topics/auth/"
"passwords>` for full details). Because of this, do not attempt to manipulate "
"the password attribute of the user directly. This is why a helper function "
"is used when creating a user."
msgstr ""

# 8690a71f64d14fbab60a346b81d40a7d
#: ../../topics/auth/default.txt:88
msgid "To change a user's password, you have several options:"
msgstr ""

# aa9df3fbf39e498c881ff816b81c0fe3
#: ../../topics/auth/default.txt:90
msgid ""
":djadmin:`manage.py changepassword *username* <changepassword>` offers a "
"method of changing a User's password from the command line. It prompts you "
"to change the password of a given user which you must enter twice. If they "
"both match, the new password will be changed immediately. If you do not "
"supply a user, the command will attempt to change the password whose "
"username matches the current system user."
msgstr ""

# 12a10a68107c418db565da80bfbc3433
#: ../../topics/auth/default.txt:97
msgid ""
"You can also change a password programmatically, using :meth:`~django."
"contrib.auth.models.User.set_password()`:"
msgstr ""

# 66f8b89b534c40e8999b06b4ce2360be
#: ../../topics/auth/default.txt:107
msgid ""
"If you have the Django admin installed, you can also change user's passwords "
"on the :ref:`authentication system's admin pages <auth-admin>`."
msgstr ""

# a69c94a82c3a43c7994361f880f39ad8
#: ../../topics/auth/default.txt:110
msgid ""
"Django also provides :ref:`views <built-in-auth-views>` and :ref:`forms "
"<built-in-auth-forms>` that may be used to allow users to change their own "
"passwords."
msgstr ""

# 2361fce2471044c89ac0b3c69232a8f7
#: ../../topics/auth/default.txt:115
msgid "Authenticating Users"
msgstr ""

# 342377984d9f46279ddb0e17a96057f6
#: ../../topics/auth/default.txt:119
msgid ""
"To authenticate a given username and password, use :func:`~django.contrib."
"auth.authenticate()`. It takes credentials in the form of keyword arguments, "
"for the default configuration this is ``username`` and ``password``, and it "
"returns a :class:`~django.contrib.auth.models.User` object if the password "
"is valid for the given username. If the password is invalid, :func:`~django."
"contrib.auth.authenticate()` returns ``None``. Example::"
msgstr ""

# 2014bd1f984f45e3a0cffc1eb992fa0a
#: ../../topics/auth/default.txt:142
msgid "Permissions and Authorization"
msgstr ""

# 9d0858e01545476687cca85e8752b12a
#: ../../topics/auth/default.txt:144
msgid ""
"Django comes with a simple permissions system. It provides a way to assign "
"permissions to specific users and groups of users."
msgstr ""

# 7d5642d5656041bdaeb2d75708af9885
#: ../../topics/auth/default.txt:147
msgid ""
"It's used by the Django admin site, but you're welcome to use it in your own "
"code."
msgstr ""

# 8e711cdecccf4f92805af109b836d98f
#: ../../topics/auth/default.txt:150
msgid "The Django admin site uses permissions as follows:"
msgstr ""

# 3d835eb7ce904643922654093fcfad49
#: ../../topics/auth/default.txt:152
msgid ""
"Access to view the \"add\" form and add an object is limited to users with "
"the \"add\" permission for that type of object."
msgstr ""

# a60a80d1405b4580b160f0ad16da00f2
#: ../../topics/auth/default.txt:154
msgid ""
"Access to view the change list, view the \"change\" form and change an "
"object is limited to users with the \"change\" permission for that type of "
"object."
msgstr ""

# 879213096ff143c4837080086530ffd6
#: ../../topics/auth/default.txt:157
msgid ""
"Access to delete an object is limited to users with the \"delete\" "
"permission for that type of object."
msgstr ""

# 353a9790fa274f41a443bcc588cd1024
#: ../../topics/auth/default.txt:160
msgid ""
"Permissions can be set not only per type of object, but also per specific "
"object instance. By using the :meth:`~django.contrib.admin.ModelAdmin."
"has_add_permission`, :meth:`~django.contrib.admin.ModelAdmin."
"has_change_permission` and :meth:`~django.contrib.admin.ModelAdmin."
"has_delete_permission` methods provided by the :class:`~django.contrib.admin."
"ModelAdmin` class, it is possible to customize permissions for different "
"object instances of the same type."
msgstr ""

# 389b226d1de441f8bb9bc358e879310c
#: ../../topics/auth/default.txt:168
msgid ""
":class:`~django.contrib.auth.models.User` objects have two many-to-many "
"fields: ``groups`` and ``user_permissions``. :class:`~django.contrib.auth."
"models.User` objects can access their related objects in the same way as any "
"other :doc:`Django model </topics/db/models>`:"
msgstr ""

# 6cf4ee5cb991470fb6030c96169f85b6
#: ../../topics/auth/default.txt:186
msgid "Default permissions"
msgstr ""

# 4f00e716cb8341cfbb2616140525b73e
#: ../../topics/auth/default.txt:188
msgid ""
"When ``django.contrib.auth`` is listed in your :setting:`INSTALLED_APPS` "
"setting, it will ensure that three default permissions -- add, change and "
"delete -- are created for each Django model defined in one of your installed "
"applications."
msgstr ""

# af1f8b880cfd4535aeb4cd5b9ed3a2ab
#: ../../topics/auth/default.txt:193
msgid ""
"These permissions will be created when you run :djadmin:`manage.py syncdb "
"<syncdb>`; the first time you run ``syncdb`` after adding ``django.contrib."
"auth`` to :setting:`INSTALLED_APPS`, the default permissions will be created "
"for all previously-installed models, as well as for any new models being "
"installed at that time. Afterward, it will create default permissions for "
"new models each time you run :djadmin:`manage.py syncdb <syncdb>`."
msgstr ""

# f30c484f907e4bde85ff783a1df84d54
#: ../../topics/auth/default.txt:201
msgid ""
"Assuming you have an application with an :attr:`~django.db.models.Options."
"app_label` ``foo`` and a model named ``Bar``, to test for basic permissions "
"you should use:"
msgstr ""

# 089dd023370e49af8bb3b0422590995e
#: ../../topics/auth/default.txt:205
msgid "add: ``user.has_perm('foo.add_bar')``"
msgstr ""

# c9011f5c01a546019d4293d4e8ac8dc2
#: ../../topics/auth/default.txt:206
msgid "change: ``user.has_perm('foo.change_bar')``"
msgstr ""

# 27cba49d947b453289d9a7fd05a0142a
#: ../../topics/auth/default.txt:207
msgid "delete: ``user.has_perm('foo.delete_bar')``"
msgstr ""

# 6e93e6cda1464dfaaeb66a45b7d02f76
#: ../../topics/auth/default.txt:209
msgid ""
"The :class:`~django.contrib.auth.models.Permission` model is rarely accessed "
"directly."
msgstr ""

# 790f3b7b146b43c6a95a43cb3931c262
#: ../../topics/auth/default.txt:213
msgid "Groups"
msgstr ""

# 8b1280aa6fe94f2cb184e43441724e33
#: ../../topics/auth/default.txt:215
msgid ""
":class:`django.contrib.auth.models.Group` models are a generic way of "
"categorizing users so you can apply permissions, or some other label, to "
"those users. A user can belong to any number of groups."
msgstr ""

# d91a2ad80d204b54a065742cbd4a19cf
#: ../../topics/auth/default.txt:219
msgid ""
"A user in a group automatically has the permissions granted to that group. "
"For example, if the group ``Site editors`` has the permission "
"``can_edit_home_page``, any user in that group will have that permission."
msgstr ""

# 1af1d553fb2a4f5f86be54dec41192f9
#: ../../topics/auth/default.txt:223
msgid ""
"Beyond permissions, groups are a convenient way to categorize users to give "
"them some label, or extended functionality. For example, you could create a "
"group ``'Special users'``, and you could write code that could, say, give "
"them access to a members-only portion of your site, or send them members-"
"only email messages."
msgstr ""

# c20492a8c1454ab494f73083545df89e
#: ../../topics/auth/default.txt:230
msgid "Programmatically creating permissions"
msgstr ""

# 724315b2d79046359c9e10c35c2f5dd6
#: ../../topics/auth/default.txt:232
msgid ""
"While :ref:`custom permissions <custom-permissions>` can be defined within a "
"model's ``Meta`` class, you can also create permissions directly. For "
"example, you can create the ``can_publish`` permission for a ``BlogPost`` "
"model in ``myapp``::"
msgstr ""

# 16759c8ea8e9483fb30a9b7de00f6e84
#: ../../topics/auth/default.txt:245
msgid ""
"The permission can then be assigned to a :class:`~django.contrib.auth.models."
"User` via its ``user_permissions`` attribute or to a :class:`~django.contrib."
"auth.models.Group` via its ``permissions`` attribute."
msgstr ""

# 21742463b5c14a7da70e322db73bfb17
#: ../../topics/auth/default.txt:253
msgid "Authentication in Web requests"
msgstr ""

# e5cd5a3f19634e578f46ed8feeee042e
#: ../../topics/auth/default.txt:255
msgid ""
"Django uses :doc:`sessions </topics/http/sessions>` and middleware to hook "
"the authentication system into :class:`request objects <django.http."
"HttpRequest>`."
msgstr ""

# da72a5ad77754a17a0ab826a7b5282da
#: ../../topics/auth/default.txt:258
msgid ""
"These provide a :attr:`request.user <django.http.HttpRequest.user>`  "
"attribute on every request which represents the current user. If the current "
"user has not logged in, this attribute will be set to an instance of :class:"
"`~django.contrib.auth.models.AnonymousUser`, otherwise it will be an "
"instance of :class:`~django.contrib.auth.models.User`."
msgstr ""

# a72be288d2614118a4de50b0210e70b4
#: ../../topics/auth/default.txt:264
msgid ""
"You can tell them apart with :meth:`~django.contrib.auth.models.User."
"is_authenticated()`, like so::"
msgstr ""

# 0f4ef0038f774a9490d38e8c283a3cb0
#: ../../topics/auth/default.txt:275
msgid "How to log a user in"
msgstr ""

# 6dd4311786464552ae77688adfef4e46
#: ../../topics/auth/default.txt:277
msgid ""
"If you have an authenticated user you want to attach to the current session "
"- this is done with a :func:`~django.contrib.auth.login` function."
msgstr ""

# 0b60204e250a4bca99f86b04e2ccf471
#: ../../topics/auth/default.txt:282
msgid ""
"To log a user in, from a view, use :func:`~django.contrib.auth.login()`. It "
"takes an :class:`~django.http.HttpRequest` object and a :class:`~django."
"contrib.auth.models.User` object. :func:`~django.contrib.auth.login()` saves "
"the user's ID in the session, using Django's session framework."
msgstr ""

# 1054cd88e0414f7b8c91952f049cd90b
#: ../../topics/auth/default.txt:288
msgid ""
"Note that any data set during the anonymous session is retained in the "
"session after a user logs in."
msgstr ""

# 3893196cfddc4961a764277b68549ad1
#: ../../topics/auth/default.txt:291
msgid ""
"This example shows how you might use both :func:`~django.contrib.auth."
"authenticate()` and :func:`~django.contrib.auth.login()`::"
msgstr ""

# 41ba8efb27ef4c199882a6bce06c8f07
#: ../../topics/auth/default.txt:312
msgid ""
"When you're manually logging a user in, you *must* call :func:`~django."
"contrib.auth.authenticate()` before you call :func:`~django.contrib.auth."
"login()`. :func:`~django.contrib.auth.authenticate()` sets an attribute on "
"the :class:`~django.contrib.auth.models.User` noting which authentication "
"backend successfully authenticated that user (see the :ref:`backends "
"documentation <authentication-backends>` for details), and this information "
"is needed later during the login process. An error will be raise if you try "
"to login a user object retrieved from the database directly."
msgstr ""

# a6186ec84e594d0a8a310e2028927967
#: ../../topics/auth/default.txt:324
msgid "How to log a user out"
msgstr ""

# 2d7591027bfb4b939e7b089e50caa0fa
#: ../../topics/auth/default.txt:328
msgid ""
"To log out a user who has been logged in via :func:`django.contrib.auth.login"
"()`, use :func:`django.contrib.auth.logout()` within your view. It takes an :"
"class:`~django.http.HttpRequest` object and has no return value. Example::"
msgstr ""

# 26675a801e3245e2bab6207784fc0e04
#: ../../topics/auth/default.txt:340
msgid ""
"Note that :func:`~django.contrib.auth.logout()` doesn't throw any errors if "
"the user wasn't logged in."
msgstr ""

# 4f1724640d1c411eb111bc10b79e293d
#: ../../topics/auth/default.txt:343
msgid ""
"When you call :func:`~django.contrib.auth.logout()`, the session data for "
"the current request is completely cleaned out. All existing data is removed. "
"This is to prevent another person from using the same Web browser to log in "
"and have access to the previous user's session data. If you want to put "
"anything into the session that will be available to the user immediately "
"after logging out, do that *after* calling :func:`django.contrib.auth.logout"
"()`."
msgstr ""

# 7cd8c71a10dc4d4ea22fde81f3e8f60b
#: ../../topics/auth/default.txt:352
msgid "Limiting access to logged-in users"
msgstr ""

# 5d1d011cb0f44a8dabc918f7fe881220
#: ../../topics/auth/default.txt:355
msgid "The raw way"
msgstr ""

# b9b1c90dcfd64c94be359e07b020920a
#: ../../topics/auth/default.txt:357
msgid ""
"The simple, raw way to limit access to pages is to check :meth:`request.user."
"is_authenticated() <django.contrib.auth.models.User.is_authenticated()>` and "
"either redirect to a login page::"
msgstr ""

# 20832875276d48a7a71ff7f6d6446725
#: ../../topics/auth/default.txt:369
msgid "...or display an error message::"
msgstr ""

# 6577929e165f41a59244836813e285a0
#: ../../topics/auth/default.txt:381
msgid "The login_required decorator"
msgstr ""

# edfd16ff7f02488782149e95242642b9
#: ../../topics/auth/default.txt:385
msgid ""
"As a shortcut, you can use the convenient :func:`~django.contrib.auth."
"decorators.login_required` decorator::"
msgstr ""

# 2527c260c3094dc4b25470d07fa61e05
#: ../../topics/auth/default.txt:394
msgid ""
":func:`~django.contrib.auth.decorators.login_required` does the following:"
msgstr ""

# 292712e196104112bdae3d6ab53821c5
#: ../../topics/auth/default.txt:396
msgid ""
"If the user isn't logged in, redirect to :setting:`settings.LOGIN_URL "
"<LOGIN_URL>`, passing the current absolute path in the query string. "
"Example: ``/accounts/login/?next=/polls/3/``."
msgstr ""

# 2740aea0c6c04c2884dc7aeed8e1b436
#: ../../topics/auth/default.txt:400
msgid ""
"If the user is logged in, execute the view normally. The view code is free "
"to assume the user is logged in."
msgstr ""

# 7958899931c9480eaf34a4068fed887d
#: ../../topics/auth/default.txt:403
msgid ""
"By default, the path that the user should be redirected to upon successful "
"authentication is stored in a query string parameter called ``\"next\"``. If "
"you would prefer to use a different name for this parameter, :func:`~django."
"contrib.auth.decorators.login_required` takes an optional "
"``redirect_field_name`` parameter::"
msgstr ""

# 90efaadf5dbf44218ad9546fc9da96e4
#: ../../topics/auth/default.txt:415
msgid ""
"Note that if you provide a value to ``redirect_field_name``, you will most "
"likely need to customize your login template as well, since the template "
"context variable which stores the redirect path will use the value of "
"``redirect_field_name`` as its key rather than ``\"next\"`` (the default)."
msgstr ""

# 11efbe28f4ab4239acbf36c86fc47726
#: ../../topics/auth/default.txt:420
msgid ""
":func:`~django.contrib.auth.decorators.login_required` also takes an "
"optional ``login_url`` parameter. Example::"
msgstr ""

# e759bb1c497e419792d1dfa7d3c1ffbe
#: ../../topics/auth/default.txt:429
msgid ""
"Note that if you don't specify the ``login_url`` parameter, you'll need to "
"ensure that the :setting:`settings.LOGIN_URL <LOGIN_URL>` and your login "
"view are properly associated. For example, using the defaults, add the "
"following line to your URLconf::"
msgstr ""

# dec07352ee0f411aaab8948d8638f7ec
#: ../../topics/auth/default.txt:438
msgid ""
"The :setting:`settings.LOGIN_URL <LOGIN_URL>` also accepts view function "
"names and :ref:`named URL patterns <naming-url-patterns>`. This allows you "
"to freely remap your login view within your URLconf without having to update "
"the setting."
msgstr ""

# a25e12a74665404f8633653bd4c4fe18
#: ../../topics/auth/default.txt:445
msgid ""
"The login_required decorator does NOT check the is_active flag on a user."
msgstr ""

# 2ca43fd6586a4a728cb4ed99744e0c05
#: ../../topics/auth/default.txt:448
msgid "Limiting access to logged-in users that pass a test"
msgstr ""

# b2b8d7a07dd64250b2d0b8d71b5eed64
#: ../../topics/auth/default.txt:450
msgid ""
"To limit access based on certain permissions or some other test, you'd do "
"essentially the same thing as described in the previous section."
msgstr ""

# 34c8666919784899b48869dc440b895a
#: ../../topics/auth/default.txt:453
msgid ""
"The simple way is to run your test on :attr:`request.user <django.http."
"HttpRequest.user>` in the view directly. For example, this view checks to "
"make sure the user has an email in the desired domain::"
msgstr ""

# 7416542dac6b404ebd542601330c2a7f
#: ../../topics/auth/default.txt:464
msgid ""
"As a shortcut, you can use the convenient ``user_passes_test`` decorator::"
msgstr ""

# c0d6300d10854752bc95c075b734faea
#: ../../topics/auth/default.txt:475
msgid ""
":func:`~django.contrib.auth.decorators.user_passes_test` takes a required "
"argument: a callable that takes a :class:`~django.contrib.auth.models.User` "
"object and returns ``True`` if the user is allowed to view the page. Note "
"that :func:`~django.contrib.auth.decorators.user_passes_test` does not "
"automatically check that the :class:`~django.contrib.auth.models.User` is "
"not anonymous."
msgstr ""

# dc4ccba1e6644045a781e6148a4d2d77
#: ../../topics/auth/default.txt:483
msgid ""
":func:`~django.contrib.auth.decorators.user_passes_test()` takes an optional "
"``login_url`` argument, which lets you specify the URL for your login page (:"
"setting:`settings.LOGIN_URL <LOGIN_URL>` by default)."
msgstr ""

# 81e432061e4241abb4730ecc982e41f1
#: ../../topics/auth/default.txt:487
msgid "For example::"
msgstr ""

# 58b22415418d422a88f2d580f6aa6be9
#: ../../topics/auth/default.txt:494
msgid "The permission_required decorator"
msgstr ""

# 29b6661c1e3c46e98e3eeaca0c7269ba
#: ../../topics/auth/default.txt:498
msgid ""
"It's a relatively common task to check whether a user has a particular "
"permission. For that reason, Django provides a shortcut for that case: the :"
"func:`~django.contrib.auth.decorators.permission_required()` decorator.::"
msgstr ""

# 7ef9e586bb424546af531ebe819c7756
#: ../../topics/auth/default.txt:508
msgid ""
"As for the :meth:`~django.contrib.auth.models.User.has_perm` method, "
"permission names take the form ``\"<app label>.<permission codename>\"`` (i."
"e. ``polls.can_vote`` for a permission on a model in the ``polls`` "
"application)."
msgstr ""

# 24e4dbad590c4e09888345b8640bce64
#: ../../topics/auth/default.txt:513
msgid ""
"Note that :func:`~django.contrib.auth.decorators.permission_required()` also "
"takes an optional ``login_url`` parameter. Example::"
msgstr ""

# 4ac6964be3874713ada6bc810ef088b4
#: ../../topics/auth/default.txt:522
msgid ""
"As in the :func:`~django.contrib.auth.decorators.login_required` decorator, "
"``login_url`` defaults to :setting:`settings.LOGIN_URL <LOGIN_URL>`."
msgstr ""

# 78055c36f1a447e3a34ab8e6d4979714
#: ../../topics/auth/default.txt:527
msgid ""
"Added ``raise_exception`` parameter. If given, the decorator will raise :exc:"
"`~django.core.exceptions.PermissionDenied`, prompting :ref:`the 403 (HTTP "
"Forbidden) view<http_forbidden_view>` instead of redirecting to the login "
"page."
msgstr ""

# 8e56ff5f9c71445ca339c6a9858334e0
#: ../../topics/auth/default.txt:533
msgid "Applying permissions to generic views"
msgstr ""

# e634412a4b8f48059725b158a9c9ec3d
#: ../../topics/auth/default.txt:535
msgid ""
"To apply a permission to a :doc:`class-based generic view </ref/class-based-"
"views/index>`, decorate the :meth:`View.dispatch <django.views.generic.base."
"View.dispatch>` method on the class. See :ref:`decorating-class-based-views` "
"for details."
msgstr ""

# ee99ad4bb79a478191427824587ee520
#: ../../topics/auth/default.txt:544
msgid "Authentication Views"
msgstr ""

# 62b91408d07f4cedbb2e6dded23b2c1f
#: ../../topics/auth/default.txt:548
msgid ""
"Django provides several views that you can use for handling login, logout, "
"and password management. These make use of the :ref:`stock auth forms <built-"
"in-auth-forms>` but you can pass in your own forms as well."
msgstr ""

# 78e8156fa5154509974bbfa64071e232
#: ../../topics/auth/default.txt:552
msgid ""
"Django provides no default template for the authentication views - however "
"the template context is documented for each view below."
msgstr ""

# 074aae5da83f4791a008a436e09d4c6f
#: ../../topics/auth/default.txt:557
msgid ""
"The built-in views all return a :class:`~django.template.response."
"TemplateResponse` instance, which allows you to easily customize the "
"response data before rendering.  For more details, see the :doc:"
"`TemplateResponse documentation </ref/template-response>`."
msgstr ""

# c2e5338ee68345a3a9f422deba675bc6
#: ../../topics/auth/default.txt:562
msgid ""
"Most built-in authentication views provide a URL name for easier reference. "
"See :doc:`the URL documentation </topics/http/urls>` for details on using "
"named URL patterns."
msgstr ""

# 2f1b208700be4bee9c117652721a49b7
#: ../../topics/auth/default.txt:569
msgid "**URL name:** ``login``"
msgstr ""

# f9fc635ac0794b7fbbd099ec7baf81f4
#: ../../topics/auth/default.txt:571
msgid ""
"See :doc:`the URL documentation </topics/http/urls>` for details on using "
"named URL patterns."
msgstr ""

# 31df47350d9e41759fa21041161eb045
#: ../../topics/auth/default.txt:574
msgid "Here's what ``django.contrib.auth.views.login`` does:"
msgstr ""

# 2a025985687644a7a31dbcec94744bc4
#: ../../topics/auth/default.txt:576
msgid ""
"If called via ``GET``, it displays a login form that POSTs to the same URL. "
"More on this in a bit."
msgstr ""

# 5f18ec94d26642a7a6342e68d77fb9cf
#: ../../topics/auth/default.txt:579
msgid ""
"If called via ``POST`` with user submitted credentials, it tries to log the "
"user in. If login is successful, the view redirects to the URL specified in "
"``next``. If ``next`` isn't provided, it redirects to :setting:`settings."
"LOGIN_REDIRECT_URL <LOGIN_REDIRECT_URL>` (which defaults to ``/accounts/"
"profile/``). If login isn't successful, it redisplays the login form."
msgstr ""

# 22826e62856a465ba24f56c3ba5a65f6
#: ../../topics/auth/default.txt:586
msgid ""
"It's your responsibility to provide the html for the login template , called "
"``registration/login.html`` by default. This template gets passed four "
"template context variables:"
msgstr ""

# 931430abee9444c1912ed3795727a768
#: ../../topics/auth/default.txt:590
msgid ""
"``form``: A :class:`~django.forms.Form` object representing the :class:"
"`~django.contrib.auth.forms.AuthenticationForm`."
msgstr ""

# 82df2e8d24a541c2b8ef721fc40bd970
#: ../../topics/auth/default.txt:593
msgid ""
"``next``: The URL to redirect to after successful login. This may contain a "
"query string, too."
msgstr ""

# 6f372f6b573e4d5cad9daf20a91fd0c3
# 5b573d22f6ce4edda67a1823040aae21
#: ../../topics/auth/default.txt:596 ../../topics/auth/default.txt:685
msgid ""
"``site``: The current :class:`~django.contrib.sites.models.Site`, according "
"to the :setting:`SITE_ID` setting. If you don't have the site framework "
"installed, this will be set to an instance of :class:`~django.contrib.sites."
"models.RequestSite`, which derives the site name and domain from the "
"current :class:`~django.http.HttpRequest`."
msgstr ""

# fb71219381be4eb78e4663d4211f9005
# 74242c7884154d3eab1bcd083c879a6d
# ca28895f8531401dadad92bfdcefc371
#: ../../topics/auth/default.txt:603 ../../topics/auth/default.txt:692
#: ../../topics/auth/default.txt:801
msgid ""
"``site_name``: An alias for ``site.name``. If you don't have the site "
"framework installed, this will be set to the value of :attr:`request.META"
"['SERVER_NAME'] <django.http.HttpRequest.META>`. For more on sites, see :doc:"
"`/ref/contrib/sites`."
msgstr ""

# 84e2246853eb4992af0c9829d64edd35
#: ../../topics/auth/default.txt:608
msgid ""
"If you'd prefer not to call the template :file:`registration/login.html`, "
"you can pass the ``template_name`` parameter via the extra arguments to the "
"view in your URLconf. For example, this URLconf line would use :file:`myapp/"
"login.html` instead::"
msgstr ""

# 2477363e6bc7491ea647868f2d435a97
#: ../../topics/auth/default.txt:615
msgid ""
"You can also specify the name of the ``GET`` field which contains the URL to "
"redirect to after login by passing ``redirect_field_name`` to the view. By "
"default, the field is called ``next``."
msgstr ""

# 37f3a0e1baae4bcb8f158c936720b31e
#: ../../topics/auth/default.txt:619
msgid ""
"Here's a sample :file:`registration/login.html` template you can use as a "
"starting point. It assumes you have a :file:`base.html` template that "
"defines a ``content`` block:"
msgstr ""

# 4323768cf1f6411ab563d3d5d50ef489
#: ../../topics/auth/default.txt:652
msgid ""
"If you have customized authentication (see :doc:`Customizing Authentication "
"</topics/auth/customizing>`) you can pass a custom authentication form to "
"the login view via the ``authentication_form`` parameter. This form must "
"accept a ``request`` keyword argument in its ``__init__`` method, and "
"provide a ``get_user`` method which returns the authenticated user object "
"(this method is only ever called after successful form validation)."
msgstr ""

# 6f5e534a3a994edcb95f879aa66d31e6
#: ../../topics/auth/default.txt:665
msgid "Logs a user out."
msgstr ""

# cad92c1903d34f2ebd06e160740f275b
#: ../../topics/auth/default.txt:667
msgid "**URL name:** ``logout``"
msgstr ""

# 337aee37e23d4f6b9f365d33108ac35f
# 075c8b3848984344a468a618bd8c40d8
# 5d1a49e4958245ecb1a97e407236d1d1
# 62bdae9000b048c8ad9e2c9ee336fd00
# a4960215b9b1455ea381607c47d8a452
# 6a22689a264940bda46d9a1816177a80
# f2eb55bf91bd45ac9f8ce2bc977ac5d3
# b64251622f3a477a9b049a39227191e2
# 65783ea18f764e51b72d0c9ae115af67
#: ../../topics/auth/default.txt:669 ../../topics/auth/default.txt:703
#: ../../topics/auth/default.txt:714 ../../topics/auth/default.txt:738
#: ../../topics/auth/default.txt:758 ../../topics/auth/default.txt:835
#: ../../topics/auth/default.txt:847 ../../topics/auth/default.txt:882
#: ../../topics/auth/default.txt:901
msgid "**Optional arguments:**"
msgstr ""

# 9bbe031e88ac4393990d1ad31ce3fb0b
#: ../../topics/auth/default.txt:671
msgid "``next_page``: The URL to redirect to after logout."
msgstr ""

# 79c2b382b5114ecf8c0deae33bff734f
#: ../../topics/auth/default.txt:673
msgid ""
"``template_name``: The full name of a template to display after logging the "
"user out. Defaults to :file:`registration/logged_out.html` if no argument is "
"supplied."
msgstr ""

# d0443c46ac7645ab9ba4d4253ad280f3
#: ../../topics/auth/default.txt:677
msgid ""
"``redirect_field_name``: The name of a ``GET`` field containing the URL to "
"redirect to after log out. Overrides ``next_page`` if the given ``GET`` "
"parameter is passed."
msgstr ""

# 38d0e057603d4b2bb24ceeb2ea6bf09f
# 76ea36dabb9e46ea83e8791d8c72489b
# 4340932a37f842a0b4ac6151ae323fef
# 7ce6cc7b3d3f475aba99638d57906a93
#: ../../topics/auth/default.txt:681 ../../topics/auth/default.txt:728
#: ../../topics/auth/default.txt:788 ../../topics/auth/default.txt:867
msgid "**Template context:**"
msgstr ""

# 788df042a848478dbc758cd7c6661063
#: ../../topics/auth/default.txt:683
msgid "``title``: The string \"Logged out\", localized."
msgstr ""

# ffa184284c2044f09332d4b266698aad
#: ../../topics/auth/default.txt:699
msgid "Logs a user out, then redirects to the login page."
msgstr ""

# 978ebf59fd934c75aa568860f69e5cd8
#: ../../topics/auth/default.txt:701
msgid "**URL name:** No default URL provided"
msgstr ""

# 1f7076d32efd427f8578cdd2f120ec3a
# cc33eb034e7d43f6927df70628684bbc
#: ../../topics/auth/default.txt:705 ../../topics/auth/default.txt:903
msgid ""
"``login_url``: The URL of the login page to redirect to. Defaults to :"
"setting:`settings.LOGIN_URL <LOGIN_URL>` if not supplied."
msgstr ""

# 4a5f92eee5cc45ca877f0259a60e131d
#: ../../topics/auth/default.txt:710
msgid "Allows a user to change their password."
msgstr ""

# 6aa232edef474639980b895b892f638a
#: ../../topics/auth/default.txt:712
msgid "**URL name:** ``password_change``"
msgstr ""

# 0136e5d56dc34aa7b23912ef86e19cda
#: ../../topics/auth/default.txt:716
msgid ""
"``template_name``: The full name of a template to use for displaying the "
"password change form. Defaults to :file:`registration/password_change_form."
"html` if not supplied."
msgstr ""

# 34901a8edbb54fb39d985c996b6d0cc5
#: ../../topics/auth/default.txt:720
msgid ""
"``post_change_redirect``: The URL to redirect to after a successful password "
"change."
msgstr ""

# 648cfdcd29f84e0da81fbfaad12e0ac6
#: ../../topics/auth/default.txt:723
msgid ""
"``password_change_form``: A custom \"change password\" form which must "
"accept a ``user`` keyword argument. The form is responsible for actually "
"changing the user's password. Defaults to :class:`~django.contrib.auth.forms."
"PasswordChangeForm`."
msgstr ""

# 0bb954dbc6e84c19b70180190cb13aca
#: ../../topics/auth/default.txt:730
msgid ""
"``form``: The password change form (see ``password_change_form`` above)."
msgstr ""

# f8d988e793ad4f0a815d0c92ac7efaf0
#: ../../topics/auth/default.txt:734
msgid "The page shown after a user has changed their password."
msgstr ""

# a4d875fec522426eb41d5cb6a0f48203
#: ../../topics/auth/default.txt:736
msgid "**URL name:** ``password_change_done``"
msgstr ""

# 44b2715d2f84459ba9cbbefa1d9b8e9c
#: ../../topics/auth/default.txt:740
msgid ""
"``template_name``: The full name of a template to use. Defaults to :file:"
"`registration/password_change_done.html` if not supplied."
msgstr ""

# aa8fce1fdb5a458da327091ec706563f
#: ../../topics/auth/default.txt:746
msgid ""
"Allows a user to reset their password by generating a one-time use link that "
"can be used to reset the password, and sending that link to the user's "
"registered email address."
msgstr ""

# 6fa7f30bfcae469499372e5494dae10f
#: ../../topics/auth/default.txt:756
msgid "**URL name:** ``password_reset``"
msgstr ""

# 5796b5fb3d5741849ed08e5a2564ac40
#: ../../topics/auth/default.txt:760
msgid ""
"``template_name``: The full name of a template to use for displaying the "
"password reset form. Defaults to :file:`registration/password_reset_form."
"html` if not supplied."
msgstr ""

# 04805474326e446a83e47b9f7cee968f
#: ../../topics/auth/default.txt:764
msgid ""
"``email_template_name``: The full name of a template to use for generating "
"the email with the reset password link. Defaults to :file:`registration/"
"password_reset_email.html` if not supplied."
msgstr ""

# 32e73d48d28c49b59b1d88ec6491cf8b
#: ../../topics/auth/default.txt:768
msgid ""
"``subject_template_name``: The full name of a template to use for the "
"subject of the email with the reset password link. Defaults to :file:"
"`registration/password_reset_subject.txt` if not supplied."
msgstr ""

# 6d06c1c1b2734204809658ea52ca3d14
#: ../../topics/auth/default.txt:774
msgid ""
"``password_reset_form``: Form that will be used to get the email of the user "
"to reset the password for. Defaults to :class:`~django.contrib.auth.forms."
"PasswordResetForm`."
msgstr ""

# 26d688eb25974bd285fd4ce7a78634af
#: ../../topics/auth/default.txt:778
msgid ""
"``token_generator``: Instance of the class to check the one time link. This "
"will default to ``default_token_generator``, it's an instance of ``django."
"contrib.auth.tokens.PasswordResetTokenGenerator``."
msgstr ""

# 05282d31c042452e83cae0ae2aee8f2d
#: ../../topics/auth/default.txt:782
msgid ""
"``post_reset_redirect``: The URL to redirect to after a successful password "
"reset request."
msgstr ""

# af94f8bf0a2b4db8bd4c4f950a8d72da
#: ../../topics/auth/default.txt:785
msgid ""
"``from_email``: A valid email address. By default Django uses the :setting:"
"`DEFAULT_FROM_EMAIL`."
msgstr ""

# 53a3c37ed6cc46f9a8a5c02c374c7ce5
#: ../../topics/auth/default.txt:790
msgid ""
"``form``: The form (see ``password_reset_form`` above) for resetting the "
"user's password."
msgstr ""

# eb91087bd18241e7bbc03c7162d4e676
#: ../../topics/auth/default.txt:793
msgid "**Email template context:**"
msgstr ""

# eae3a174a0064f9bac9793bfc452c494
#: ../../topics/auth/default.txt:795
msgid "``email``: An alias for ``user.email``"
msgstr ""

# ed5084f625cd4dcf97635a7575f86d7e
#: ../../topics/auth/default.txt:797
msgid ""
"``user``: The current :class:`~django.contrib.auth.models.User`, according "
"to the ``email`` form field. Only active users are able to reset their "
"passwords (``User.is_active is True``)."
msgstr ""

# 1833066f40f7447985e63af980e64e46
#: ../../topics/auth/default.txt:806
msgid ""
"``domain``: An alias for ``site.domain``. If you don't have the site "
"framework installed, this will be set to the value of ``request.get_host()``."
msgstr ""

# 22118d2d1472498ab7bcf771ad8d7c69
#: ../../topics/auth/default.txt:810
msgid "``protocol``: http or https"
msgstr ""

# d1114f18a3d243e986083f6dd7858822
#: ../../topics/auth/default.txt:812
msgid "``uid``: The user's id encoded in base 36."
msgstr ""

# 53ade0b4716246a08841251337791100
#: ../../topics/auth/default.txt:814
msgid "``token``: Token to check that the reset link is valid."
msgstr ""

# 518f40d5f22345a49e500785f1a3fd11
#: ../../topics/auth/default.txt:816
msgid ""
"Sample ``registration/password_reset_email.html`` (email body template):"
msgstr ""

# 421062b5f41f4639bf3e2dda6811ea0a
#: ../../topics/auth/default.txt:823
msgid ""
"The same template context is used for subject template. Subject must be "
"single line plain text string."
msgstr ""

# ce921ffca0014dc491704abbe4dca9ef
#: ../../topics/auth/default.txt:829
msgid ""
"The page shown after a user has been emailed a link to reset their password. "
"This view is called by default if the :func:`password_reset` view doesn't "
"have an explicit ``post_reset_redirect`` URL set."
msgstr ""

# 90910ab8e59b4324b34b6a5c44cd2671
#: ../../topics/auth/default.txt:833
msgid "**URL name:** ``password_reset_done``"
msgstr ""

# 602a3c944b5143709cf1cd26ebfe1841
#: ../../topics/auth/default.txt:837
msgid ""
"``template_name``: The full name of a template to use. Defaults to :file:"
"`registration/password_reset_done.html` if not supplied."
msgstr ""

# 5e83cf1dd6e34de2b8fa9c030c3e1fae
#: ../../topics/auth/default.txt:843
msgid "Presents a form for entering a new password."
msgstr ""

# 436e7d24de904b1ca198d311e8a24d00
#: ../../topics/auth/default.txt:845
msgid "**URL name:** ``password_reset_confirm``"
msgstr ""

# 2f53942e7abf46b585d3bd9328d905aa
#: ../../topics/auth/default.txt:849
msgid "``uidb36``: The user's id encoded in base 36. Defaults to ``None``."
msgstr ""

# 2728add6223f433889500d541aa33edd
#: ../../topics/auth/default.txt:851
msgid ""
"``token``: Token to check that the password is valid. Defaults to ``None``."
msgstr ""

# 10e22def730c4f5db0023efe532470a6
#: ../../topics/auth/default.txt:854
msgid ""
"``template_name``: The full name of a template to display the confirm "
"password view. Default value is :file:`registration/password_reset_confirm."
"html`."
msgstr ""

# 27a19b402e4645a290332d6a09ea7e52
#: ../../topics/auth/default.txt:857
msgid ""
"``token_generator``: Instance of the class to check the password. This will "
"default to ``default_token_generator``, it's an instance of ``django.contrib."
"auth.tokens.PasswordResetTokenGenerator``."
msgstr ""

# 3a33bd693df846f1aaa8fc6932e16298
#: ../../topics/auth/default.txt:861
msgid ""
"``set_password_form``: Form that will be used to set the password. Defaults "
"to :class:`~django.contrib.auth.forms.SetPasswordForm`"
msgstr ""

# 9b3410c286454a028e5d81b8bdfba3ef
#: ../../topics/auth/default.txt:864
msgid ""
"``post_reset_redirect``: URL to redirect after the password reset done. "
"Defaults to ``None``."
msgstr ""

# 7b184ccfa78a48719e71d7cf7eb0ff5e
#: ../../topics/auth/default.txt:869
msgid ""
"``form``: The form (see ``set_password_form`` above) for setting the new "
"user's password."
msgstr ""

# 6be7ba7f012c40b59886b3e8af6cabfb
#: ../../topics/auth/default.txt:872
msgid ""
"``validlink``: Boolean, True if the link (combination of uidb36 and token) "
"is valid or unused yet."
msgstr ""

# 170ac97b3f5d4a6190e6d33fd3ab2ad6
#: ../../topics/auth/default.txt:877
msgid ""
"Presents a view which informs the user that the password has been "
"successfully changed."
msgstr ""

# ea48dcc0a47e483c939581250bcd2a0d
#: ../../topics/auth/default.txt:880
msgid "**URL name:** ``password_reset_complete``"
msgstr ""

# b44cce844aa0416b8a85f1f14deb52b4
#: ../../topics/auth/default.txt:884
msgid ""
"``template_name``: The full name of a template to display the view. Defaults "
"to :file:`registration/password_reset_complete.html`."
msgstr ""

# e01b20e5b15042ecbd4c4eb7990f278c
#: ../../topics/auth/default.txt:888
msgid "Helper functions"
msgstr ""

# f71be53fbff04091ae3bab54fed49806
#: ../../topics/auth/default.txt:894
msgid ""
"Redirects to the login page, and then back to another URL after a successful "
"login."
msgstr ""

# 4acee997a2e0401eac3da73017fda3e8
#: ../../topics/auth/default.txt:897
msgid "**Required arguments:**"
msgstr ""

# 3902071169184beb8baa9cbe0d43b090
#: ../../topics/auth/default.txt:899
msgid "``next``: The URL to redirect to after a successful login."
msgstr ""

# 61d3d64d552c4c9381af9ccc10f9c293
#: ../../topics/auth/default.txt:906
msgid ""
"``redirect_field_name``: The name of a ``GET`` field containing the URL to "
"redirect to after log out. Overrides ``next`` if the given ``GET`` parameter "
"is passed."
msgstr ""

# 7627880af8da4182b5efe2eae2fd8f6a
#: ../../topics/auth/default.txt:914
msgid "Built-in forms"
msgstr ""

# 9de311b1bac9450eb1a98849d37e701e
#: ../../topics/auth/default.txt:918
msgid ""
"If you don't want to use the built-in views, but want the convenience of not "
"having to write forms for this functionality, the authentication system "
"provides several built-in forms located in :mod:`django.contrib.auth.forms`:"
msgstr ""

# 66da6d3466524f9a919c43b5a6133a46
#: ../../topics/auth/default.txt:923
msgid ""
"The built-in authentication forms make certain assumptions about the user "
"model that they are working with. If you're using a :ref:`custom User model "
"<auth-custom-user>`, it may be necessary to define your own forms for the "
"authentication system. For more information, refer to the documentation "
"about :ref:`using the built-in authentication forms with custom user models "
"<custom-users-and-the-built-in-auth-forms>`."
msgstr ""

# 5704d4c4a63b4cff9d895ab9a34dd4f8
#: ../../topics/auth/default.txt:932
msgid "A form used in the admin interface to change a user's password."
msgstr ""

# 6ff122a6352a48d1ade2a912681c30e0
#: ../../topics/auth/default.txt:936
msgid "A form for logging a user in."
msgstr ""

# 2e97d9c9953742b5819b6ca0e13f585a
#: ../../topics/auth/default.txt:940
msgid "A form for allowing a user to change their password."
msgstr ""

# 6588ecf38d4e42fc8ba0896711790560
#: ../../topics/auth/default.txt:944
msgid ""
"A form for generating and emailing a one-time use link to reset a user's "
"password."
msgstr ""

# c26930ed3e2b4b168c49855259ba0269
#: ../../topics/auth/default.txt:949
msgid ""
"A form that lets a user change his/her password without entering the old "
"password."
msgstr ""

# e9066cd481d549fcb2666f2a162b7cb8
#: ../../topics/auth/default.txt:954
msgid ""
"A form used in the admin interface to change a user's information and "
"permissions."
msgstr ""

# 36a3b118974843388061f6425192f08f
#: ../../topics/auth/default.txt:959
msgid "A form for creating a new user."
msgstr ""

# a71a918fb2754522b273584cec2c1e16
#: ../../topics/auth/default.txt:965
msgid "Authentication data in templates"
msgstr ""

# 2fbadd2001d2464081615a5e2e2ce065
#: ../../topics/auth/default.txt:967
msgid ""
"The currently logged-in user and his/her permissions are made available in "
"the :doc:`template context </ref/templates/api>` when you use :class:"
"`~django.template.RequestContext`."
msgstr ""

# 2992035ec1c64713a24674864369a172
#: ../../topics/auth/default.txt:973
msgid ""
"Technically, these variables are only made available in the template context "
"if you use :class:`~django.template.RequestContext` *and* your :setting:"
"`TEMPLATE_CONTEXT_PROCESSORS` setting contains ``\"django.contrib.auth."
"context_processors.auth\"``, which is default. For more, see the :ref:"
"`RequestContext docs <subclassing-context-requestcontext>`."
msgstr ""

# c0ee95847b4d4f129fd124c036941c84
#: ../../topics/auth/default.txt:980
msgid "Users"
msgstr ""

# d179bf8e11e7405a89e0528b0e49c7b4
#: ../../topics/auth/default.txt:982
msgid ""
"When rendering a template :class:`~django.template.RequestContext`, the "
"currently logged-in user, either a  :class:`~django.contrib.auth.models."
"User` instance or an :class:`~django.contrib.auth.models.AnonymousUser` "
"instance, is stored in the template variable ``{{ user }}``:"
msgstr ""

# d23026f86dfd40a2b8528516c89d7dd5
#: ../../topics/auth/default.txt:995
msgid ""
"This template context variable is not available if a ``RequestContext`` is "
"not being used."
msgstr ""

# e6e2f16925d64edba8b835d3b0594ab6
#: ../../topics/auth/default.txt:999
msgid "Permissions"
msgstr ""

# 89b4a4723a984c9caad6d79debbe4166
#: ../../topics/auth/default.txt:1001
msgid ""
"The currently logged-in user's permissions are stored in the template "
"variable ``{{ perms }}``. This is an instance of ``django.contrib.auth."
"context_processors.PermWrapper``, which is a template-friendly proxy of "
"permissions."
msgstr ""

# 26cd826fe7e84ab79be6d7c7def551f8
#: ../../topics/auth/default.txt:1006
msgid ""
"In the ``{{ perms }}`` object, single-attribute lookup is a proxy to :meth:"
"`User.has_module_perms <django.contrib.auth.models.User.has_module_perms>`. "
"This example would display ``True`` if the logged-in user had any "
"permissions in the ``foo`` app::"
msgstr ""

# 7a7199ea944645cb90e5a916d3722659
#: ../../topics/auth/default.txt:1013
msgid ""
"Two-level-attribute lookup is a proxy to :meth:`User.has_perm <django."
"contrib.auth.models.User.has_perm>`. This example would display ``True`` if "
"the logged-in user had the permission ``foo.can_vote``::"
msgstr ""

# 67b7943d69f64ca8926cd9b503ee775b
#: ../../topics/auth/default.txt:1020
msgid "Thus, you can check permissions in template ``{% if %}`` statements:"
msgstr ""

# f9d0f0014c93426bacbda49a592fb87e
#: ../../topics/auth/default.txt:1039
msgid ""
"It is possible to also look permissions up by ``{% if in %}`` statements. "
"For example:"
msgstr ""

# cdeec38e36e748bd9ff8f9b511d1b056
#: ../../topics/auth/default.txt:1053
msgid "Managing users in the admin"
msgstr ""

# 6a2971ea7dcb47d7979f93a867100549
#: ../../topics/auth/default.txt:1055
msgid ""
"When you have both ``django.contrib.admin`` and ``django.contrib.auth`` "
"installed, the admin provides a convenient way to view and manage users, "
"groups, and permissions. Users can be created and deleted like any Django "
"model. Groups can be created, and permissions can be assigned to users or "
"groups. A log of user edits to models made within the admin is also stored "
"and displayed."
msgstr ""

# 69249d34ee4a4ac8b9f993b9dd939088
#: ../../topics/auth/default.txt:1063
msgid "Creating Users"
msgstr ""

# e3ab35a934394fc19d3f381a478731ce
#: ../../topics/auth/default.txt:1065
msgid ""
"You should see a link to \"Users\" in the \"Auth\" section of the main admin "
"index page. The \"Add user\" admin page is different than standard admin "
"pages in that it requires you to choose a username and password before "
"allowing you to edit the rest of the user's fields."
msgstr ""

# a84af0a82f53461987e94cd23280609f
#: ../../topics/auth/default.txt:1070
msgid ""
"Also note: if you want a user account to be able to create users using the "
"Django admin site, you'll need to give them permission to add users *and* "
"change users (i.e., the \"Add user\" and \"Change user\" permissions). If an "
"account has permission to add users but not to change them, that account "
"won't be able to add users. Why? Because if you have permission to add "
"users, you have the power to create superusers, which can then, in turn, "
"change other users. So Django requires add *and* change permissions as a "
"slight security measure."
msgstr ""

# 5e0a40e7e2e74b4e964b3824b932c3c8
#: ../../topics/auth/default.txt:1080
msgid "Changing Passwords"
msgstr ""

# 75e3a3c238454a37b120e8e47f2e2373
#: ../../topics/auth/default.txt:1082
msgid ""
"User passwords are not displayed in the admin (nor stored in the database), "
"but the :doc:`password storage details </topics/auth/passwords>` are "
"displayed. Included in the display of this information is a link to a "
"password change form that allows admins to change user passwords."
msgstr ""
