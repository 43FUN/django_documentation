# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2013.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-11-07 10:34\n"
"PO-Revision-Date: 2013-02-27 00:21\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# e853a21af0c04ddcb9e547296f21fa74
#: ../../topics/auth/passwords.txt:3
msgid "Password management in Django"
msgstr ""

# a72b7d9b4ce84c3abfb40272fa959e32
#: ../../topics/auth/passwords.txt:5
msgid ""
"Password management is something that should generally not be reinvented "
"unnecessarily, and Django endeavors to provide a secure and flexible set of "
"tools for managing user passwords. This document describes how Django stores "
"passwords, how the storage hashing can be configured, and some utilities to "
"work with hashed passwords."
msgstr ""

# 02179afa44b84ccaa4019fdd89407cf9
#: ../../topics/auth/passwords.txt:14
msgid "How Django stores passwords"
msgstr ""

# 80638dd57b0d42b0b3aede59fa71d9ad
#: ../../topics/auth/passwords.txt:16
msgid ""
"Django provides a flexible password storage system and uses PBKDF2 by "
"default."
msgstr ""

# 7296526ed8374801b9526ecb544e18e8
#: ../../topics/auth/passwords.txt:18
msgid ""
"The :attr:`~django.contrib.auth.models.User.password` attribute of a :class:"
"`~django.contrib.auth.models.User` object is a string in this format::"
msgstr ""

# ca2d1d2d757045dfada761b46aec40f7
#: ../../topics/auth/passwords.txt:23
msgid ""
"Those are the components used for storing a User's password, separated by "
"the dollar-sign character and consist of: the hashing algorithm, the number "
"of algorithm iterations (work factor), the random salt, and the resulting "
"password hash.  The algorithm is one of a number of one-way hashing or "
"password storage algorithms Django can use; see below. Iterations describe "
"the number of times the algorithm is run over the hash. Salt is the random "
"seed used and the hash is the result of the one-way function."
msgstr ""

# 9d390c968758479b8fb05868373c9222
#: ../../topics/auth/passwords.txt:31
msgid ""
"By default, Django uses the PBKDF2_ algorithm with a SHA256 hash, a password "
"stretching mechanism recommended by NIST_. This should be sufficient for "
"most users: it's quite secure, requiring massive amounts of computing time "
"to break."
msgstr ""

# 47744e9767db4bc9ba784a1b2411e7bb
#: ../../topics/auth/passwords.txt:36
msgid ""
"However, depending on your requirements, you may choose a different "
"algorithm, or even use a custom algorithm to match your specific security "
"situation. Again, most users shouldn't need to do this -- if you're not "
"sure, you probably don't.  If you do, please read on:"
msgstr ""

# 17c8e902dd984258adab806a4b283546
#: ../../topics/auth/passwords.txt:41
msgid ""
"Django chooses the algorithm to use by consulting the :setting:"
"`PASSWORD_HASHERS` setting. This is a list of hashing algorithm classes that "
"this Django installation supports. The first entry in this list (that is, "
"``settings.PASSWORD_HASHERS[0]``) will be used to store passwords, and all "
"the other entries are valid hashers that can be used to check existing "
"passwords.  This means that if you want to use a different algorithm, you'll "
"need to modify :setting:`PASSWORD_HASHERS` to list your preferred algorithm "
"first in the list."
msgstr ""

# 6c247db07b594cecbf591d448ebd9e35
#: ../../topics/auth/passwords.txt:50
msgid "The default for :setting:`PASSWORD_HASHERS` is::"
msgstr ""

# 6ffb62d3152e4f5e8e223345d3ec583c
#: ../../topics/auth/passwords.txt:62
msgid ""
"This means that Django will use PBKDF2_ to store all passwords, but will "
"support checking passwords stored with PBKDF2SHA1, bcrypt_, SHA1_, etc. The "
"next few sections describe a couple of common ways advanced users may want "
"to modify this setting."
msgstr ""

# 1184bbce81f34a5c80536ea26bef9d51
#: ../../topics/auth/passwords.txt:70
msgid "Using bcrypt with Django"
msgstr ""

# f005de51fadb4006a0850ead2f134880
#: ../../topics/auth/passwords.txt:72
msgid ""
"Bcrypt_ is a popular password storage algorithm that's specifically designed "
"for long-term password storage. It's not the default used by Django since it "
"requires the use of third-party libraries, but since many people may want to "
"use it Django supports bcrypt with minimal effort."
msgstr ""

# 3c70d7eea3294f66aed020d44d5092bf
#: ../../topics/auth/passwords.txt:77
msgid "To use Bcrypt as your default storage algorithm, do the following:"
msgstr ""

# 0890b4051f684a6e81dc5f9a7e3b428c
#: ../../topics/auth/passwords.txt:79
msgid ""
"Install the `bcrypt library`_ (probably by running ``sudo pip install "
"bcrypt``, or downloading the library and installing it with ``python setup."
"py install``)."
msgstr ""

# b534b55fee94440496f00ac49a1a5543
#: ../../topics/auth/passwords.txt:83
msgid ""
"Modify :setting:`PASSWORD_HASHERS` to list ``BCryptSHA256PasswordHasher`` "
"first. That is, in your settings file, you'd put::"
msgstr ""

# 691f4ee7c5444783a38d391e32b6af02
#: ../../topics/auth/passwords.txt:96
msgid ""
"(You need to keep the other entries in this list, or else Django won't be "
"able to upgrade passwords; see below)."
msgstr ""

# 49718e5da0c24f9eb50ee673b1ce92ee
#: ../../topics/auth/passwords.txt:99
msgid ""
"That's it -- now your Django install will use Bcrypt as the default storage "
"algorithm."
msgstr ""

# f24348c54d0d47638b9b1e4711e8e508
#: ../../topics/auth/passwords.txt:104
msgid ""
"The designers of bcrypt truncate all passwords at 72 characters which means "
"that ``bcrypt(password_with_100_chars) == bcrypt(password_with_100_chars"
"[:72])``. The original ``BCryptPasswordHasher`` does not have any special "
"handling and thus is also subject to this hidden password length limit. "
"``BCryptSHA256PasswordHasher`` fixes this by first first hashing the "
"password using sha256. This prevents the password truncation and so should "
"be preferred over the ``BCryptPasswordHasher``. The practical ramification "
"of this truncation is pretty marginal as the average user does not have a "
"password greater than 72 characters in length and even being truncated at 72 "
"the compute powered required to brute force bcrypt in any useful amount of "
"time is still astronomical. Nonetheless, we recommend you use "
"``BCryptSHA256PasswordHasher`` anyway on the principle of \"better safe than "
"sorry\"."
msgstr ""

# b3f570c2d9c846d7acda5f8652767633
#: ../../topics/auth/passwords.txt:120
msgid ""
"There are several other implementations that allow bcrypt to be used with "
"Django. Django's bcrypt support is NOT directly compatible with these. To "
"upgrade, you will need to modify the hashes in your database to be in the "
"form ``bcrypt$(raw bcrypt output)``. For example: ``bcrypt$$2a"
"$12$NT0I31Sa7ihGEWpka9ASYrEFkhuTNeBQ2xfZskIiiJeyFXhRgS.Sy``."
msgstr ""

# 1f19e5ed62c04c47bfc60b5649148b60
#: ../../topics/auth/passwords.txt:130
msgid "Increasing the work factor"
msgstr ""

# d496c563aee1499c9213ac16c9a5c009
#: ../../topics/auth/passwords.txt:132
msgid ""
"The PBKDF2 and bcrypt algorithms use a number of iterations or rounds of "
"hashing. This deliberately slows down attackers, making attacks against "
"hashed passwords harder. However, as computing power increases, the number "
"of iterations needs to be increased. We've chosen a reasonable default (and "
"will increase it with each release of Django), but you may wish to tune it "
"up or down, depending on your security needs and available processing power. "
"To do so, you'll subclass the appropriate algorithm and override the "
"``iterations`` parameters. For example, to increase the number of iterations "
"used by the default PBKDF2 algorithm:"
msgstr ""

# 361887267b4147009ca8617cdb56c6d3
#: ../../topics/auth/passwords.txt:142
msgid ""
"Create a subclass of ``django.contrib.auth.hashers.PBKDF2PasswordHasher``::"
msgstr ""

# 3e5ee698266f4d5b8e54c29d9c34a6cc
#: ../../topics/auth/passwords.txt:152
msgid ""
"Save this somewhere in your project. For example, you might put this in a "
"file like ``myproject/hashers.py``."
msgstr ""

# 53402d12d2724a6eab05e8feb2bc3ab5
#: ../../topics/auth/passwords.txt:155
msgid "Add your new hasher as the first entry in :setting:`PASSWORD_HASHERS`::"
msgstr ""

# b2703b9c1bb04bde98d868b78527d168
#: ../../topics/auth/passwords.txt:169
msgid ""
"That's it -- now your Django install will use more iterations when it stores "
"passwords using PBKDF2."
msgstr ""

# 3ded3043eeb74015b49e56f887ea59d9
#: ../../topics/auth/passwords.txt:175
msgid "Password upgrading"
msgstr ""

# b503b7ae683a4357b5074e76aaa4f8d3
#: ../../topics/auth/passwords.txt:177
msgid ""
"When users log in, if their passwords are stored with anything other than "
"the preferred algorithm, Django will automatically upgrade the algorithm to "
"the preferred one. This means that old installs of Django will get "
"automatically more secure as users log in, and it also means that you can "
"switch to new (and better) storage algorithms as they get invented."
msgstr ""

# 9e9b06831ed44afeae34c12b1023ee28
#: ../../topics/auth/passwords.txt:183
msgid ""
"However, Django can only upgrade passwords that use algorithms mentioned in :"
"setting:`PASSWORD_HASHERS`, so as you upgrade to new systems you should make "
"sure never to *remove* entries from this list. If you do, users using un- "
"mentioned algorithms won't be able to upgrade."
msgstr ""

# d01063ca80d04377a42306ee722c262e
#: ../../topics/auth/passwords.txt:200
msgid "Manually managing a user's password"
msgstr ""

# 311308949e7b40d09953975e49b310fd
#: ../../topics/auth/passwords.txt:204
msgid ""
"The :mod:`django.contrib.auth.hashers` module provides a set of functions to "
"create and validate hashed password. You can use them independently from the "
"``User`` model."
msgstr ""

# ef1a7e88125a4a0ea6d3b1390b5ad2dc
#: ../../topics/auth/passwords.txt:210
msgid ""
"If you'd like to manually authenticate a user by comparing a plain-text "
"password to the hashed password in the database, use the convenience "
"function :func:`check_password`. It takes two arguments: the plain-text "
"password to check, and the full value of a user's ``password`` field in the "
"database to check against, and returns ``True`` if they match, ``False`` "
"otherwise."
msgstr ""

# b47592f5bd28456f8fc4f2c365e38eba
#: ../../topics/auth/passwords.txt:225
msgid ""
"Creates a hashed password in the format used by this application. It takes "
"one mandatory argument: the password in plain-text. Optionally, you can "
"provide a salt and a hashing algorithm to use, if you don't want to use the "
"defaults (first entry of ``PASSWORD_HASHERS`` setting). Currently supported "
"algorithms are: ``'pbkdf2_sha256'``, ``'pbkdf2_sha1'``, ``'bcrypt_sha256'`` "
"(see :ref:`bcrypt_usage`), ``'bcrypt'``, ``'sha1'``, ``'md5'``, "
"``'unsalted_md5'`` (only for backward compatibility) and ``'crypt'`` if you "
"have the ``crypt`` library installed. If the password argument is ``None``, "
"an unusable password is returned (a one that will be never accepted by :func:"
"`check_password`)."
msgstr ""

# 13c679823b7d49e78f42517da24489fe
#: ../../topics/auth/passwords.txt:238
msgid ""
"Checks if the given string is a hashed password that has a chance of being "
"verified against :func:`check_password`."
msgstr ""
