# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2014.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-03-19 15:06+0200\n"
"PO-Revision-Date: 2014-07-11 11:43+0300\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# 2ef645263c8a4c298fe047118b39ea03
#: ../../topics/checks.txt:3
msgid "System check framework"
msgstr ""

# ad6a21fa011d424a8141d6686539d37a
#: ../../topics/checks.txt:9
msgid ""
"The system check framework is a set of static checks for validating Django "
"projects. It detects common problems and provides hints for how to fix them. "
"The framework is extensible so you can easily add your own checks."
msgstr ""

#: ../../topics/checks.txt:13
msgid ""
"Checks can be triggered explicitly via the :djadmin:`check` command. Checks "
"are triggered implicitly before most commands, including :djadmin:"
"`runserver` and :djadmin:`migrate`. For performance reasons, checks are not "
"run as part of the WSGI stack that is used in deployment. If you need to run "
"system checks on your deployment server, trigger them explicitly using :"
"djadmin:`check`."
msgstr ""

# 78b33dcf61474442897a558bb3c3ec89
#: ../../topics/checks.txt:19
msgid ""
"Serious errors will prevent Django commands (such as :djadmin:`runserver`) "
"from running at all. Minor problems are reported to the console. If you have "
"inspected the cause of a warning and are happy to ignore it, you can hide "
"specific warnings using the :setting:`SILENCED_SYSTEM_CHECKS` setting in "
"your project settings file."
msgstr ""

# f5c39b0fc9ed402ab9d5adaba2e79dbf
#: ../../topics/checks.txt:24
msgid ""
"A full list of all checks that can be raised by Django can be found in the :"
"doc:`System check reference </ref/checks>`."
msgstr ""

# 0041f37e7698457ba1c66997e9916261
#: ../../topics/checks.txt:28
msgid "Writing your own checks"
msgstr ""

# cd7e1ae2be5e435f801d374edf17e6e8
#: ../../topics/checks.txt:30
msgid ""
"The framework is flexible and allows you to write functions that perform any "
"other kind of check you may require. The following is an example stub check "
"function::"
msgstr ""

# 434d9a4ba9cc4488b7312822dc82291c
#: ../../topics/checks.txt:42
msgid ""
"The check function *must* accept an ``app_configs`` argument; this argument "
"is the list of applications that should be inspected. If None, the check "
"must be run on *all* installed apps in the project. The ``**kwargs`` "
"argument is required for future expansion."
msgstr ""

# 10979985b84145219491feb65134a7e5
#: ../../topics/checks.txt:48
msgid "Messages"
msgstr ""

# d628275c6e95449b97c587b3e3acaa43
#: ../../topics/checks.txt:50
msgid ""
"The function must return a list of messages. If no problems are found as a "
"result of the check, the check function must return an empty list."
msgstr ""

# ae95e5e64b0b485b9b94b36e8efc74a1
#: ../../topics/checks.txt:55
msgid ""
"The warnings and errors raised by the check method must be instances of :"
"class:`~django.core.checks.CheckMessage`. An instance of :class:`~django."
"core.checks.CheckMessage` encapsulates a single reportable error or warning. "
"It also provides context and hints applicable to the message, and a unique "
"identifier that is used for filtering purposes."
msgstr ""

# e32158de86b249e9a5b17ceff187745d
#: ../../topics/checks.txt:61
msgid ""
"The concept is very similar to messages from the :doc:`message framework </"
"ref/contrib/messages>` or the :doc:`logging framework </topics/logging>`. "
"Messages are tagged with a ``level`` indicating the severity of the message."
msgstr ""

# 3f8784505af84785ad3339c252996cf7
#: ../../topics/checks.txt:66
msgid "Constructor arguments are:"
msgstr ""

# 59b7b35dbbb040f59bba65f1a734dd5f
#: ../../topics/checks.txt:74
msgid "``level``"
msgstr ""

# 45ddaf9956ba4ae8ac9581ed1fa729ee
#: ../../topics/checks.txt:69
msgid ""
"The severity of the message. Use one of the predefined values: ``DEBUG``, "
"``INFO``, ``WARNING``, ``ERROR``, ``CRITICAL``. If the level is greater or "
"equal to ``ERROR``, then Django will prevent management commands from "
"executing. Messages with level lower than ``ERROR`` (i.e. warnings) are "
"reported to the console, but can be silenced."
msgstr ""

# 9b151811a724484f9510c53578e7612e
#: ../../topics/checks.txt:78
msgid "``msg``"
msgstr ""

# f693e4d55c1f4a62b621bce99bef2acb
#: ../../topics/checks.txt:77
msgid ""
"A short (less than 80 characters) string describing the problem. The string "
"should *not* contain newlines."
msgstr ""

# ba3036b7c3d54b7b81e8b1eb1fd72dd2
#: ../../topics/checks.txt:83
msgid "``hint``"
msgstr ""

# dd3a4be9763a48c2883481f9fbd79539
#: ../../topics/checks.txt:81
msgid ""
"A single-line string providing a hint for fixing the problem. If no hint can "
"be provided, or the hint is self-evident from the error message, the hint "
"can be omitted, or a value of ``None`` can be used."
msgstr ""

# 6ed6cc21fa8847b3b41a2cc7b94c9b22
#: ../../topics/checks.txt:90
msgid "``obj``"
msgstr ""

# acf25dbcda5243559ae4a386c69a894f
#: ../../topics/checks.txt:86
msgid ""
"Optional. An object providing context for the message (for example, the "
"model where the problem was discovered). The object should be a model, "
"field, or manager or any other object that defines ``__str__`` method (on "
"Python 2 you need to define ``__unicode__`` method). The method is used "
"while reporting all messages and its result precedes the message."
msgstr ""

# 6e05309b4f9f4eeb8305a6fd60ab0f5a
#: ../../topics/checks.txt:97
msgid "``id``"
msgstr ""

# 2f461a6da3584729a9020a1a37a4c2e6
#: ../../topics/checks.txt:93
msgid ""
"Optional string. A unique identifier for the issue. Identifiers should "
"follow the pattern ``applabel.X001``, where ``X`` is one of the letters "
"``CEWID``, indicating the message severity (``C`` for criticals, ``E`` for "
"errors and so). The number can be allocated by the application, but should "
"be unique within that application."
msgstr ""

# a54f46d96f6246e886ab5a3dd0ce49e8
#: ../../topics/checks.txt:99
msgid ""
"There are also shortcuts to make creating messages with common levels "
"easier. When using these methods you can omit the ``level`` argument because "
"it is implied by the class name."
msgstr ""

# 08b0edc386014fdfbc5cc62829b38009
#: ../../topics/checks.txt:109
msgid "Messages are comparable. That allows you to easily write tests::"
msgstr ""

# 230eab319fb94b05838478d200e80d85
#: ../../topics/checks.txt:124
msgid "Registering and labeling checks"
msgstr ""

# 04e0a784dd1c4b2a837a1c831697404a
#: ../../topics/checks.txt:126
msgid ""
"Lastly, your check function must be registered explicitly with system check "
"registry."
msgstr ""

# 839dec5e2ed14ba8a778ed6fc6349852
#: ../../topics/checks.txt:131
msgid ""
"You can pass as many tags to ``register`` as you want in order to label your "
"check. Tagging checks is useful since it allows you to run only a certain "
"group of checks. For example, to register a compatibility check, you would "
"make the following call::"
msgstr ""

#: ../../topics/checks.txt:145
msgid ""
"You can register \"deployment checks\" that are only relevant to a "
"production settings file like this::"
msgstr ""

#: ../../topics/checks.txt:152
msgid ""
"These checks will only be run if the :djadminopt:`--deploy` option is passed "
"to the :djadmin:`check` command."
msgstr ""

#: ../../topics/checks.txt:155
msgid ""
"You can also use ``register`` as a function rather than a decorator by "
"passing a callable object (usually a function) as the first argument to "
"``register``."
msgstr ""

#: ../../topics/checks.txt:159
msgid "The code below is equivalent to the code above::"
msgstr ""

#: ../../topics/checks.txt:167
msgid "The ability to use register as a function was added."
msgstr ""

# dfd682e1b412485db46979b8721e0613
#: ../../topics/checks.txt:172
msgid "Field, Model, and Manager checks"
msgstr ""

# 93931386bb014de9b40e875fb1ea7c9d
#: ../../topics/checks.txt:174
msgid ""
"In some cases, you won't need to register your check function -- you can "
"piggyback on an existing registration."
msgstr ""

#: ../../topics/checks.txt:177
msgid ""
"Fields, models, and model managers all implement a ``check()`` method that "
"is already registered with the check framework. If you want to add extra "
"checks, you can extend the implementation on the base class, perform any "
"extra checks you need, and append any messages to those generated by the "
"base class. It's recommended that you delegate each check to separate "
"methods."
msgstr ""

# 4133b4ad5bba4dbfaf24474b256563ba
#: ../../topics/checks.txt:183
msgid ""
"Consider an example where you are implementing a custom field named "
"``RangedIntegerField``. This field adds ``min`` and ``max`` arguments to the "
"constructor of ``IntegerField``. You may want to add a check to ensure that "
"users provide a min value that is less than or equal to the max value. The "
"following code snippet shows how you can implement this check::"
msgstr ""

# 5718a979d1894ed9b58b3e337110187e
#: ../../topics/checks.txt:223
msgid ""
"If you wanted to add checks to a model manager, you would take the same "
"approach on your subclass of :class:`~django.db.models.Manager`."
msgstr ""

# 34fa230d635f4582a97cc2c0032c3395
#: ../../topics/checks.txt:226
msgid ""
"If you want to add a check to a model class, the approach is *almost* the "
"same: the only difference is that the check is a classmethod, not an "
"instance method::"
msgstr ""
