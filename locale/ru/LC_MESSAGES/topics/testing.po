# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated <>, 2012.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-03-24 01:58\n"
"PO-Revision-Date: 2012-08-02 16:06+0400\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# c0a1c8805940445e8c4a6f675e75455b
#: ../../topics/testing.txt:3
msgid "Testing Django applications"
msgstr "Тестирование приложений Django"

# 90cd41e738c94b50ab828e275f314efa
#: ../../topics/testing.txt:8
msgid ""
"Automated testing is an extremely useful bug-killing tool for the modern Web "
"developer. You can use a collection of tests -- a **test suite** -- to "
"solve, or avoid, a number of problems:"
msgstr ""
"Автоматическое тестирование является очень полезной методикой для "
"современного веб разработчика. Вы можете использовать коллекцию тестов "
"(**пакет тестов**) для решения, или исключения, ряда проблем:"

# a1c4335ac4ea49a7a4d320effdea7df1
#: ../../topics/testing.txt:12
msgid ""
"When you're writing new code, you can use tests to validate your code works "
"as expected."
msgstr ""
"Когда вы пишете новый код, вы можете использовать тесты для проверки того, "
"что ваш код работает как ожидалось."

# 8c8bb485c7bc42ffab082d61bb8bae86
#: ../../topics/testing.txt:15
msgid ""
"When you're refactoring or modifying old code, you can use tests to ensure "
"your changes haven't affected your application's behavior unexpectedly."
msgstr ""
"Когда вы рефакторите или модифицируете старый код, вы можете использовать "
"тесты, чтобы гарантировать неизменность поведения вашего приложения после "
"внесения изменений."

# 99f46b86de0649c5a05cab761ca2d67b
#: ../../topics/testing.txt:19
msgid ""
"Testing a Web application is a complex task, because a Web application is "
"made of several layers of logic -- from HTTP-level request handling, to form "
"validation and processing, to template rendering. With Django's test-"
"execution framework and assorted utilities, you can simulate requests, "
"insert test data, inspect your application's output and generally verify "
"your code is doing what it should be doing."
msgstr ""
"Тестирование веб приложений -- это сложная задача, так как веб приложение "
"создаётся с использованием нескольких слоёв логики: от HTTP уровня для "
"обработки запросов до проверки и обработки форм, отображения шаблонов. "
"Используя механизм Django для запуска тестов и дополнительные утилиты, вы "
"можете имитировать запросы, вставлять тестовые данные, инспектировать вывод "
"вашего приложения и в общем проверять, что ваш код делает именно то, что "
"должен."

# a4e72a242f334e70987ec05c6ae5c613
#: ../../topics/testing.txt:26
msgid "The best part is, it's really easy."
msgstr "Ну и самое главное, всё это несложно."

# b31c1d19112e44f1bb5783e0f059799e
#: ../../topics/testing.txt:28
msgid ""
"This document is split into two primary sections. First, we explain how to "
"write tests with Django. Then, we explain how to run them."
msgstr ""
"Этот документ разбит на две основные части. В первой мы рассказываем как "
"писать тесты для Django. Во второй мы объясняем как их использовать."

# 1199de4ec42a42ae818cad64fbaa79d0
#: ../../topics/testing.txt:32
msgid "Writing tests"
msgstr "Создание тестов"

# 4737e586627646f3bc7b2a7a0ac1508f
#: ../../topics/testing.txt:34
msgid ""
"There are two primary ways to write tests with Django, corresponding to the "
"two test frameworks that ship in the Python standard library. The two "
"frameworks are:"
msgstr ""
"Существует два основных способа создания тестов для Django, в соответствии с "
"двумя тестовыми фреймворками, которые поставляются в стандартной библиотеке "
"языка Python. Рассмотрим их:"

# 588585c262e74cd18d5a9fd41aaaa3ca
#: ../../topics/testing.txt:38
msgid ""
"**Unit tests** -- tests that are expressed as methods on a Python class that "
"subclasses :class:`unittest.TestCase` or Django's customized :class:"
"`TestCase`. For example::"
msgstr ""
"**Юнит тесты** -- тесты, которые представлены в виде методов класса, "
"унаследованного от :class:`unittest.TestCase` или от :class:`django.tests."
"TestCase`. Пример::"

# d70052ab192c44fc9228915029a45e64
#: ../../topics/testing.txt:50
msgid ""
"**Doctests** -- tests that are embedded in your functions' docstrings and "
"are written in a way that emulates a session of the Python interactive "
"interpreter. For example::"
msgstr ""
"**Док тесты** -- тесты, которые встраиваются в описание ваших функций и "
"написаны в стиле эмуляции сессии интерактивного интерпретатора языка Python. "
"Пример::"

# 5f791e0491644093aabf397a7aa9a7ad
#: ../../topics/testing.txt:64
msgid ""
"We'll discuss choosing the appropriate test framework later, however, most "
"experienced developers prefer unit tests. You can also use any *other* "
"Python test framework, as we'll explain in a bit."
msgstr ""
"Мы обсудим выбор соответствующего фреймворка чуть позже. Но сразу скажем, "
"что опытные разработчики предпочитают юнит тесты. Вы можете также "
"использовать любые *другие* тестовые фреймворки для Python, мы про это тоже "
"расскажем."

# 36f2cde6e99a4a16a78eca28f3f7a677
#: ../../topics/testing.txt:69
msgid "Writing unit tests"
msgstr "Создание юнит тестов"

# 259f340d7f0b40a9a2e2953a179b2b18
#: ../../topics/testing.txt:71
msgid ""
"Django's unit tests use a Python standard library module: :mod:`unittest`. "
"This module defines tests in class-based approach."
msgstr ""
"Юнит тесты Django используют модуль :mod:`unittest` стандартной библиотеки "
"языка Python. Этот модуль определяет тесты в виде классов."

# 322d23e97ae2488ebd7fcd7e4312a4b8
#: ../../topics/testing.txt:78
msgid ""
"Python 2.7 introduced some major changes to the unittest library, adding "
"some extremely useful features. To ensure that every Django project can "
"benefit from these new features, Django ships with a copy of unittest2_, a "
"copy of the Python 2.7 unittest library, backported for Python 2.5 "
"compatibility."
msgstr ""
"Python 2.7 привнёс достаточно серьёзные изменения в библиотеку юнит тестов, "
"добавив очень полезные возможности. Чтобы дать возможность каждому Django "
"проекту использовать эти новые возможности, Django поставляется с копией "
"unittest2_ из Python 2.7, спортированной для работы с Python 2.5."

# 6adfbe5fe2444f1ea600f747b440b336
#: ../../topics/testing.txt:84
msgid ""
"To access this library, Django provides the :mod:`django.utils.unittest` "
"module alias. If you are using Python 2.7, or you have installed unittest2 "
"locally, Django will map the alias to the installed version of the unittest "
"library. Otherwise, Django will use its own bundled version of unittest2."
msgstr ""
"Django предоставляет модуль :mod:`django.utils.unittest` для доступа к этой "
"библиотеке. Если вы используете Python 2.7 или если вы установили unittest2 "
"локально, Django будет использовать оригинальную версию библиотеки. В "
"остальных случаях Django будет использовать свою версию библиотеки."

# 05a97e74b5dd439eb0db5f3edf7be11a
#: ../../topics/testing.txt:90
msgid "To use this alias, simply use::"
msgstr "Для использования этого модуля делайте так::"

# a2ac7e5c3fbd40fba21559814aba2937
#: ../../topics/testing.txt:94
msgid "wherever you would have historically used::"
msgstr "там где вы раньше использовали::"

# 5fd75b6c44df48bba1abd3b11fe95c44
#: ../../topics/testing.txt:98
msgid ""
"If you want to continue to use the base unittest library, you can -- you "
"just won't get any of the nice new unittest2 features."
msgstr ""
"Если вы желаете продолжить использовать базовую библиотеку ``unittest``, то "
"продолжайте. Вы просто не получите доступ к новым возможностям ``unittest2``."

# 18d47cab5e274d8385161a42d3d1b36e
#: ../../topics/testing.txt:103
msgid ""
"For a given Django application, the test runner looks for unit tests in two "
"places:"
msgstr ""
"В приложении есть два места, которые проверяет test runner при запуске юнит "
"тестов:"

# 6289f9b8839449e188cbe5d04f1572fb
#: ../../topics/testing.txt:106
msgid ""
"The ``models.py`` file. The test runner looks for any subclass of :class:"
"`unittest.TestCase` in this module."
msgstr ""
"Файл ``models.py``. Тест раннер ищет наследников класса :class:`unittest."
"TestCase` в этом модуле."

# f0ebe5482d074f3ba9d30bf2ca742e37
#: ../../topics/testing.txt:109
msgid ""
"A file called ``tests.py`` in the application directory -- i.e., the "
"directory that holds ``models.py``. Again, the test runner looks for any "
"subclass of :class:`unittest.TestCase` in this module."
msgstr ""
"Файл и именем ``tests.py`` в каталоге приложения, т.е. в каталоге, где "
"находится файл ``models.py``. И снова, тест раннер ищет наследников класса :"
"class:`unittest.TestCase` в этом модуле."

# 17c3cdedd2fe4fe084d5544fcee8255a
#: ../../topics/testing.txt:113
msgid "Here is an example :class:`unittest.TestCase` subclass::"
msgstr "Ниже представлен пример такого класса::"

# 6e3fba6dbc7e4ef1bf2bafc81a4944af
#: ../../topics/testing.txt:128
msgid ""
"When you :ref:`run your tests <running-tests>`, the default behavior of the "
"test utility is to find all the test cases (that is, subclasses of :class:"
"`unittest.TestCase`) in ``models.py`` and ``tests.py``, automatically build "
"a test suite out of those test cases, and run that suite."
msgstr ""
"При :ref:`выполнении ваших тестов <running-tests>`, обычным поведением "
"тестовой утилиты будет поиск всех тестов (т.е., потомков класса :class:"
"`unittest.TestCase`) в файлах ``models.py`` и ``tests.py``, автоматическое "
"построение тестового набора и выполнение этого набора."

# ea1ed1d1b3554cde9c7678abbf536b73
#: ../../topics/testing.txt:133
msgid ""
"There is a second way to define the test suite for a module: if you define a "
"function called ``suite()`` in either ``models.py`` or ``tests.py``, the "
"Django test runner will use that function to construct the test suite for "
"that module. This follows the `suggested organization`_ for unit tests. See "
"the Python documentation for more details on how to construct a complex test "
"suite."
msgstr ""
"Есть ещё один способ определения тестового набора для модуля: если в "
"``models.py`` или ``tests.py``будет определена функция ``suite()``, то тест "
"раннер будет использовать эту функцию для создания набора тестов для этого "
"модуля. Это поведение соответствует `договорённостям об организации "
"<suggested organization>`_ для юнит тестов. Обратитесь к документации языка "
"Python для получения информации о том, как создавать сложные тестовые наборы."

# e8ca2894c350455195428b68f27779b0
#: ../../topics/testing.txt:140
msgid "For more details about :mod:`unittest`, see the Python documentation."
msgstr ""
"Для получения информации по :mod:`unittest`, обратитесь к документации на "
"язык Python."

# 302ddf6058594f5299bf952fca86aec7
#: ../../topics/testing.txt:145
msgid "Writing doctests"
msgstr "Создание доктестов"

# eed27dd49285429b8b8ce49c1f322e5a
#: ../../topics/testing.txt:147
msgid ""
"Doctests use Python's standard :mod:`doctest` module, which searches your "
"docstrings for statements that resemble a session of the Python interactive "
"interpreter. A full explanation of how :mod:`doctest` works is out of the "
"scope of this document; read Python's official documentation for the details."
msgstr ""
"Доктесты используют стандартный модуль :mod:`doctest` языка Python, который "
"выполняет поиск встроенной документации для элементов модуля, в которых "
"имитируется сессия интерактивного интерпретатора. Подробное объяснение "
"функционала :mod:`doctest` не входит в цели данного документа. Обратитесь к "
"официальной документации на язык Python."

# 35659c6e98db43d69f049d95f257ea47
#: ../../topics/testing.txt:154
msgid ""
"A good explanation of docstrings (and some guidelines for using them "
"effectively) can be found in :pep:`257`:"
msgstr ""
"Хорошее описание встроенной документации (docstrings) (и несколько "
"инструкций по их эффективному использованию) можно найти в :pep:`257`:"

# 3c568f6413724834ad04b19700c35417
#: ../../topics/testing.txt:157
msgid ""
"A docstring is a string literal that occurs as the first statement in a "
"module, function, class, or method definition.  Such a docstring becomes the "
"``__doc__`` special attribute of that object."
msgstr ""
"Встроенная документация -- это строка, которая находится на месте первого "
"оператора в определении модуля, функции, класса или метода. Такая "
"документация доступна через свойство ``__doc__`` объекта."

# c3c32b83e7d3407e89f4c962741f2a2e
#: ../../topics/testing.txt:161
msgid ""
"For example, this function has a docstring that describes what it does::"
msgstr ""
"Например, эта функция имеет встроенную документацию, которая объясняет её "
"предназначение::"

# c8c7c06bb13b474bafe27d1ec396be63
#: ../../topics/testing.txt:167
msgid ""
"Because tests often make great documentation, putting tests directly in your "
"docstrings is an effective way to document *and* test your code."
msgstr ""
"Так как тесты часто улучшают документацию, размещение тестов прямо во "
"встроенной документации является эффективным способом документирования *и* "
"тестирования вашего кода."

# 078ea068e62c43aab43858844670df96
#: ../../topics/testing.txt:170
msgid ""
"As with unit tests, for a given Django application, the test runner looks "
"for doctests in two places:"
msgstr ""
"Аналогично юнит тестам, в случае приложения Django, тест раннер ищет "
"встроенную документацию в двух местах:"

# 053b67274ea64c478c3006ebc0f3e44c
#: ../../topics/testing.txt:173
msgid ""
"The ``models.py`` file. You can define module-level doctests and/or a "
"doctest for individual models. It's common practice to put application-level "
"doctests in the module docstring and model-level doctests in the model "
"docstrings."
msgstr ""
"Файл ``models.py``. Вы можете определить встроенную документацию для модуля "
"и/или встроенную документацию для отдельных моделей. Обычно на уровне модуля "
"размещают тесты уровня приложения, а на уровне моделей тесты описывают во "
"встроенной документации моделей."

# fa53d581b42547408af816ea2314c573
#: ../../topics/testing.txt:178
msgid ""
"A file called ``tests.py`` in the application directory -- i.e., the "
"directory that holds ``models.py``. This file is a hook for any and all "
"doctests you want to write that aren't necessarily related to models."
msgstr ""
"В файде ``tests.py`` в каталоге приложения, т.е., в каталоге, где находится "
"файл ``models.py``. Этот файл является основным местом для всех доктестов, "
"которые не относятся к моделям."

# ea4c56ca38054d0f836e172259a910d9
#: ../../topics/testing.txt:182
msgid ""
"This example doctest is equivalent to the example given in the unittest "
"section above::"
msgstr "Этот пример аналогичен примеру из раздела юниттестов::"

# f23e4d7229994e44b1aa01bb648804fa
#: ../../topics/testing.txt:209
msgid ""
"When you :ref:`run your tests <running-tests>`, the test runner will find "
"this docstring, notice that portions of it look like an interactive Python "
"session, and execute those lines while checking that the results match."
msgstr ""
"При :ref:`запуске ваших тестов <running-tests>`, тест раннер найдёт эту "
"встроенную документацию (обратите внимание на то, что часть её выглядит как "
"журнал сессии интерактивного интерпретатора Python) и выполнит эти строки, "
"проверяя совпадение результатов."

# a961023b4b104d14a9fe11c1102b8c3d
#: ../../topics/testing.txt:213
msgid ""
"In the case of model tests, note that the test runner takes care of creating "
"its own test database. That is, any test that accesses a database -- by "
"creating and saving model instances, for example -- will not affect your "
"production database. However, the database is not refreshed between "
"doctests, so if your doctest requires a certain state you should consider "
"flushing the database or loading a fixture. (See the section on fixtures, "
"below, for more on this.) Note that to use this feature, the database user "
"Django is connecting as must have ``CREATE DATABASE`` rights."
msgstr ""
"При тестировании моделей, следует отметить, что тест раннер обеспечивает "
"создание тестовой базы данных. Следовательно, любой тест, который "
"взаимодействует с базой данных (например, создание и сохранение экземпляров "
"модели) никак не повлияет на вашу базу данных. Тем не менее, тестовая база "
"данных не обновляется при работе доктестов. Таким образом, если доктест "
"требует определённого состояния базы данных, вы должны очистить базу или "
"подгрузить фикстуры. (Обратитесь далее к разделу с описанием фикстур для "
"получения подробной информации.) Следует отметить, что для использования "
"данной возможности, пользователь базы данных, который используется Django, "
"должен обладать правом ``CREATE DATABASE``."

# 5cc9909560f444c0b82d7dab85ec73ed
#: ../../topics/testing.txt:222
msgid "For more details about :mod:`doctest`, see the Python documentation."
msgstr ""
"Для получения подробной информации о :mod:`doctest` обратитесь к "
"документации на язык Python."

# 96ee3888ba8b45f798dfeeef372109a0
#: ../../topics/testing.txt:225
msgid "Which should I use?"
msgstr "Что должен выбрать я?"

# def098379faf4261baf4c56603177428
#: ../../topics/testing.txt:227
msgid ""
"Because Django supports both of the standard Python test frameworks, it's up "
"to you and your tastes to decide which one to use. You can even decide to "
"use *both*."
msgstr ""
"Так как Django поддерживает оба стандартных тестовых фреймворка языка "
"Python, выбор одного из них лежит на вас. Вы можете даже использовать *оба\" "
"одновременно."

# 6d5a747605a94f0490b60aa09c3756d8
#: ../../topics/testing.txt:231
msgid ""
"For developers new to testing, however, this choice can seem confusing. "
"Here, then, are a few key differences to help you decide which approach is "
"right for you:"
msgstr ""
"Тем не менее, новичкам трудно сделать такой выбор. Поэтому мы приводим "
"список ключевых различий, которые могут помочь вам сделать правильный выбор:"

# e4cade1410ce49fc8c0eaf81ebfafb13
#: ../../topics/testing.txt:235
msgid ""
"If you've been using Python for a while, :mod:`doctest` will probably feel "
"more \"pythonic\". It's designed to make writing tests as easy as possible, "
"so it requires no overhead of writing classes or methods. You simply put "
"tests in docstrings. This has the added advantage of serving as "
"documentation (and correct documentation, at that!). However, while doctests "
"are good for some simple example code, they are not very good if you want to "
"produce either high quality, comprehensive tests or high quality "
"documentation. Test failures are often difficult to debug as it can be "
"unclear exactly why the test failed. Thus, doctests should generally be "
"avoided and used primarily for documentation examples only."
msgstr ""
"Если вы работали с Python достаточно продолжительное время, то :mod:"
"`doctest` возможно будет более \"питонским\". Он был создан, чтобы сделать "
"написание тестов максимально простым, он не требует написания классов или "
"методов. Вы просто располагаете тесты во встроенной документации (и "
"корректируете саму документацию). Однако, доктесты хороши для простого кода, "
"но не подходят для случая, когда вам надо создать либо сложные тесты или "
"качественную документацию. Сбои во время тестов часто бывает непросто "
"отладить, так как не всегда бывает очевидна причина. Таким образом, доктесты "
"следует применять только для документирования примеров."

# 13b46c8181ac43c69c8d9f32892f9f4f
#: ../../topics/testing.txt:246
msgid ""
"The :mod:`unittest` framework will probably feel very familiar to developers "
"coming from Java. :mod:`unittest` is inspired by Java's JUnit, so you'll "
"feel at home with this method if you've used JUnit or any test framework "
"inspired by JUnit."
msgstr ""
"Библиотека :mod:`unittest` возможно будет более понятна для разработчиков, "
"которые пришли из мира Java. Библиотека :mod:`unittest` была создана по "
"примеру JUnit, что упрощает процесс вхождения для людей, имевших дело с "
"любым тестовым фреймворком на его основе."

# 5db3ae8b5da147ddaf7d7d1ea502ac6b
#: ../../topics/testing.txt:251
msgid ""
"If you need to write a bunch of tests that share similar code, then you'll "
"appreciate the :mod:`unittest` framework's organization around classes and "
"methods. This makes it easy to abstract common tasks into common methods. "
"The framework also supports explicit setup and/or cleanup routines, which "
"give you a high level of control over the environment in which your test "
"cases are run."
msgstr ""
"Если вам надо написать ряд тестов, которые используют одинаковый код, то вам "
"понравится организация фреймворка :mod:`unittest` по классам и методам. "
"Такой подход упрощает абстракцию общих задач в общие методы. Фреймвор также "
"поддерживает явные процедуры настройки и очистки, которые предоставляют "
"высокий уровень контроля над средой, в который происходит выполнение тестов."

# 1b254f01f6c947909182c2a18ce957da
#: ../../topics/testing.txt:258
msgid ""
"If you're writing tests for Django itself, you should use :mod:`unittest`."
msgstr ""
"Если вы пишете тесты для кода Django, то вы должны использовать :mod:"
"`unittest`."

# e04510aecfad4f6d91dffc60baa5c4d5
#: ../../topics/testing.txt:263
msgid "Running tests"
msgstr "Выполнение тестов"

# 4e981a76589544c3930a7123e91c6840
#: ../../topics/testing.txt:265
msgid ""
"Once you've written tests, run them using the :djadmin:`test` command of "
"your project's ``manage.py`` utility::"
msgstr ""
"Написав тесты, запустите их с помощью команды :djadmin:`test` утилиты "
"``manage.py`` вашего проекта::"

# ee8301490744444a916efd8e0d3648b2
#: ../../topics/testing.txt:270
msgid ""
"By default, this will run every test in every application in :setting:"
"`INSTALLED_APPS`. If you only want to run tests for a particular "
"application, add the application name to the command line. For example, if "
"your :setting:`INSTALLED_APPS` contains ``'myproject.polls'`` and "
"``'myproject.animals'``, you can run the ``myproject.animals`` unit tests "
"alone with this command::"
msgstr ""
"По умолчанию, эта команда запустит все тесты каждого приложения, которые "
"перечислены в параметре конфигурации :setting:`INSTALLED_APPS`. Если "
"требуется запустить тесты только одного определённого приложения, то "
"добавьте имя этого приложения в командную строку. Например если параметр "
"конфигурации :setting:`INSTALLED_APPS` содержит ``'myproject.polls'`` и "
"``'myproject.animals'``, вы можете выполнить юниттесты из ``myproject."
"animals`` с помощью команды::"

# 93c303592ef74212987b5c9b6a55d714
#: ../../topics/testing.txt:279
msgid "Note that we used ``animals``, not ``myproject.animals``."
msgstr ""
"Следует отметить, что мы использовали ``animals``, а не ``myproject."
"animals``."

# bd4cdfc41c23461d8117dc5abe83a539
#: ../../topics/testing.txt:281
msgid ""
"You can be even *more* specific by naming an individual test case. To run a "
"single test case in an application (for example, the ``AnimalTestCase`` "
"described in the \"Writing unit tests\" section), add the name of the test "
"case to the label on the command line::"
msgstr ""
"Вы *даже* можете указать конкретный тест для запуска. Для запуска одного "
"теста из приложения (например, ``AnimalTestCase``, который описан в разделе "
"`Создание юниттестов` <writing unit tests>`_), добавите имя этого теста к "
"имени приложения в командной строке::"

# b0fa331c6aea477f9c69c4972a4ede5e
#: ../../topics/testing.txt:288
msgid ""
"And it gets even more granular than that! To run a *single* test method "
"inside a test case, add the name of the test method to the label::"
msgstr ""
"Можно пойти ещё дальше! Для запуска *единственного* метода из теста, "
"добавьте его имя в командную строку::"

# 933e8ccd25414361965bb18cfbeeaf16
#: ../../topics/testing.txt:297
msgid ""
"You can use the same rules if you're using doctests. Django will use the "
"test label as a path to the test method or class that you want to run. If "
"your ``models.py`` or ``tests.py`` has a function with a doctest, or class "
"with a class-level doctest, you can invoke that test by appending the name "
"of the test method or class to the label::"
msgstr ""
"Вы можете использовать те же правила и при использовании доктестов. Django "
"использует тестовую метку в качестве пути к методу или классу, который вы "
"желаете запустить. Если файлы ``models.py`` или ``tests.py`` приложения "
"содержат функцию со встроенной документацией или класс с документацией, вы "
"можете вызвать эти тесты, добавив имя метода или класса к метке::"

# 3f357baa6c1e436783b65caa0ae47612
#: ../../topics/testing.txt:305
msgid ""
"If you want to run the doctest for a specific method in a class, add the "
"name of the method to the label::"
msgstr ""
"Если требуется запустить доктест для определённого метода в классе, добавьте "
"имя метода к метке::"

# 74231e4df0484a609205643ed4a6dabe
#: ../../topics/testing.txt:310
msgid ""
"If you're using a ``__test__`` dictionary to specify doctests for a module, "
"Django will use the label as a key in the ``__test__`` dictionary for "
"defined in ``models.py`` and ``tests.py``."
msgstr ""
"Если вы используете словарь ``__test__`` для определения доктестов для "
"модуля, Django будет использовать метку как ключ словаря ``__test__`` для "
"определённых ``models.py`` и ``tests.py``."

# ecd725adac6946e1ade8ab6250653e16
#: ../../topics/testing.txt:317
msgid ""
"If you press ``Ctrl-C`` while the tests are running, the test runner will "
"wait for the currently running test to complete and then exit gracefully. "
"During a graceful exit the test runner will output details of any test "
"failures, report on how many tests were run and how many errors and failures "
"were encountered, and destroy any test databases as usual. Thus pressing "
"``Ctrl-C`` can be very useful if you forget to pass the :djadminopt:`--"
"failfast` option, notice that some tests are unexpectedly failing, and want "
"to get details on the failures without waiting for the full test run to "
"complete."
msgstr ""
"Если вы нажмёте ``Ctrl-C`` во время работы тестов, то раннер дождётся "
"завершения работы текущего теста и аккуратно завершит свою работу. При "
"завершении своей работы раннер выведет всю информацию о найденных ошибках, "
"укажет сколько тестов было выполнено и как много ошибок и сбоев было "
"обнаружено. Как обычно, в конце раннер удалит все тестовые базы данных. "
"Таким образом, нажатие ``Ctrl-C`` может быть очень полезным, если вы забыли "
"передать аргумент :djadminopt:`--failfast`. Следует отметить, что некоторые "
"тесты могут падать и это комбинация клавиш позволяет получить информацию от "
"тестов, не дожидаясь завершения всего набора."

# 57b7af9690ac4a6ab5d18b0ab383b380
#: ../../topics/testing.txt:326
msgid ""
"If you do not want to wait for the currently running test to finish, you can "
"press ``Ctrl-C`` a second time and the test run will halt immediately, but "
"not gracefully. No details of the tests run before the interruption will be "
"reported, and any test databases created by the run will not be destroyed."
msgstr ""
"Если вам не надо дожидаться окончания работы текущего теста, вы можете "
"нажать ``Ctrl-C`` во второй раз и тест будет прерван немедленно, без "
"очистки. Никакой информации о пройденных тестах не будет выведено. Тестовые "
"базы данных останутся нетронутыми."

# c4138478c9d44de984aa5cb6314b0667
#: ../../topics/testing.txt:333
msgid ""
"It's a good idea to run your tests with Python warnings enabled: ``python -"
"Wall manage.py test``. The ``-Wall`` flag tells Python to display "
"deprecation warnings. Django, like many other Python libraries, uses these "
"warnings to flag when features are going away. It also might flag areas in "
"your code that aren't strictly wrong but could benefit from a better "
"implementation."
msgstr ""
"Хорошей идеей будет запуск ваших тестов с включенным функционалом "
"уведомлений языка Python: ``python -Wall manage.py test``. Флаг ``-Wall`` "
"указывает Python, что надо отображать напоминаний при использовании "
"устаревшего функционала. Django, как и многие другие библиотеки языка "
"Python, используют такие напоминания, чтобы уведомить пользователей об "
"устаревшем функционале. Также этот механизм может помечать части вашего "
"кода, которые не то, чтобы неправильные, но могли бы стать лучше."

# fb4eb1a7d75c439eb6e630e3309dd97d
#: ../../topics/testing.txt:341
msgid "Running tests outside the test runner"
msgstr "Выполнение тестов без тест раннера"

# d8c9bd5383fd4cf4b86bcaf72c6c3bde
#: ../../topics/testing.txt:343
msgid ""
"If you want to run tests outside of ``./manage.py test`` -- for example, "
"from a shell prompt -- you will need to set up the test environment first. "
"Django provides a convenience method to do this::"
msgstr ""
"Если вам надо выполнять тесты без запуска ``./manage.py test`` (например, из "
"консоли), вам надо настроить тестовое окружение. Django предоставляет для "
"этого удобный метод::"

# 772302b30c724165be0460a7baa7872f
#: ../../topics/testing.txt:350
msgid ""
"This convenience method sets up the test database, and puts other Django "
"features into modes that allow for repeatable testing."
msgstr ""
"Этот метод создаёт тестовую базу данных и переводит функционал Django в "
"режимы, которые позволяют проводить повторяемое тестирование."

# 6b744c6137e644c39d1a8ca8839a80ee
#: ../../topics/testing.txt:353
msgid ""
"The call to :meth:`~django.test.utils.setup_test_environment` is made "
"automatically as part of the setup of `./manage.py test`. You only need to "
"manually invoke this method if you're not using running your tests via "
"Django's test runner."
msgstr ""
"Вызов метода :meth:`~django.test.utils.setup_test_environment` выполняется "
"автоматически во время работы `./manage.py test`. Без использования тест "
"раннера вам придётся вызывать этот метод вручную."

# ac7f53c73f084ed5b08c714ef4bda8d8
#: ../../topics/testing.txt:359
msgid "The test database"
msgstr "Тестовая база данных"

# 18ad3029836f48e19f50db57ea1b76d8
#: ../../topics/testing.txt:361
msgid ""
"Tests that require a database (namely, model tests) will not use your \"real"
"\" (production) database. Separate, blank databases are created for the "
"tests."
msgstr ""
"Тесты, которым необходима база данных (так называемые модельные тесты), не "
"используют вашу \"реальную\" (продакшн) базу данных. Для тестов создаётся "
"отдельная база данных."

# 40f85d1ec1a04b4ebc7cfa4714100477
#: ../../topics/testing.txt:364
msgid ""
"Regardless of whether the tests pass or fail, the test databases are "
"destroyed when all the tests have been executed."
msgstr ""
"Независимо от того, прошли тесты успешно или нет, тестовая база данных "
"уничтожается в конце процесса тестирования"

# 287d0d8d3cdf4631972ec988c79e6d9d
#: ../../topics/testing.txt:367
msgid ""
"By default the test databases get their names by prepending ``test_`` to the "
"value of the :setting:`NAME` settings for the databases defined in :setting:"
"`DATABASES`. When using the SQLite database engine the tests will by default "
"use an in-memory database (i.e., the database will be created in memory, "
"bypassing the filesystem entirely!). If you want to use a different database "
"name, specify :setting:`TEST_NAME` in the dictionary for any given database "
"in :setting:`DATABASES`."
msgstr ""
"По умолчанию, тестовые базы данных получают свои имена, добавляя префикс "
"``test_`` к значению параметра :setting:`NAME` баз данных, который определён "
"в параметре конфигурации :setting:`DATABASES`. При использовании SQLite "
"тесты по умолчанию будут использовать оперативную базу данных (т.е., база "
"данных будет создана в оперативной памяти, диск вообще не используется!) "
"Если вам надо использовать собственное имя для тестовой базы данных, "
"определите :setting:`TEST_NAME` для нужной базы данных в параметре "
"конфигурации :setting:`DATABASES`."

# 3cb15dfe6ab34d068fdafc10c41184f2
#: ../../topics/testing.txt:376
msgid ""
"Aside from using a separate database, the test runner will otherwise use all "
"of the same database settings you have in your settings file: :setting:"
"`ENGINE`, :setting:`USER`, :setting:`HOST`, etc. The test database is "
"created by the user specified by :setting:`USER`, so you'll need to make "
"sure that the given user account has sufficient privileges to create a new "
"database on the system."
msgstr ""
"Во остальном, тест раннер будет использовать оригинальные настройки для базы "
"данных: :setting:`ENGINE`, :setting:`USER`, :setting:`HOST` и так далее. "
"Тестовая база данных создаётся от имени пользователя, который определён в :"
"setting:`USER`, так чтовам потребуется дать ему соответствующие права, чтобы "
"он мог это сделать."

# b747e85d52ef46b6b56f8da74f4b0f7e
#: ../../topics/testing.txt:383
msgid ""
"For fine-grained control over the character encoding of your test database, "
"use the :setting:`TEST_CHARSET` option. If you're using MySQL, you can also "
"use the :setting:`TEST_COLLATION` option to control the particular collation "
"used by the test database. See the :doc:`settings documentation </ref/"
"settings>` for details of these advanced settings."
msgstr ""
"Для точного контроля кодировкой символов в вашей тестовой базе данных, "
"используйте параметр :setting:`TEST_CHARSET`. При использовании MySQL вы "
"можете также использовать параметр :setting:`TEST_COLLATION` для управления "
"сопоставлениями, используемыми базой данных. Обратитесь к документации по :"
"doc:`параметрам конфигурации проекта </ref/settings>` для получения "
"информации по этим дополнительным параметрам."

# 850b460149924879a84bc4641a05a85a
#: ../../topics/testing.txt:393
msgid "Testing master/slave configurations"
msgstr "Тестирование конфигураций мастер/ведомый"

# 613754a7506546c5b84a2d31aa499b00
#: ../../topics/testing.txt:397
msgid ""
"If you're testing a multiple database configuration with master/slave "
"replication, this strategy of creating test databases poses a problem. When "
"the test databases are created, there won't be any replication, and as a "
"result, data created on the master won't be seen on the slave."
msgstr ""
"При тестировании конфигураций со множество баз данных с репликацией вида "
"мастер/ведомый, такая стратегия создания тестовых баз данных приводит к "
"проблеме. После создания тестовых баз данных никакой репликации выполнено не "
"будет, соответственно, данные, созданные на мастере, не появятся на ведомой "
"базе."

# 212d7a8c834f476c804e425b4ec49344
#: ../../topics/testing.txt:403
msgid ""
"To compensate for this, Django allows you to define that a database is a "
"*test mirror*. Consider the following (simplified) example database "
"configuration::"
msgstr ""
"Для решения этой задачи Django позволяет вам определить, что база данных "
"является *тестовым зеркалом*. Рассмотрим следующий (упрощённый) пример "
"конфигурации базы данных::"

# 6cbed713244e48f49fa730c459c0cab7
#: ../../topics/testing.txt:423
msgid ""
"In this setup, we have two database servers: ``dbmaster``, described by the "
"database alias ``default``, and ``dbslave`` described by the alias "
"``slave``. As you might expect, ``dbslave`` has been configured by the "
"database administrator as a read slave of ``dbmaster``, so in normal "
"activity, any write to ``default`` will appear on ``slave``."
msgstr ""
"В такой конфигурации у нас есть два сервера баз данных: ``dbmaster``, "
"имеющий псевдоним ``default``, и ``dbslave`` с псевдонимом ``slave``. Как вы "
"могли ожидать, ``dbslave`` настроен администратором баз данных как копия "
"``dbmaster``. Таким образом, любая запись данных в ``default`` приведёт к их "
"появлению на ``slave``."

# beb0453f77ab4a1cab78b9a5de6c83ca
#: ../../topics/testing.txt:429
msgid ""
"If Django created two independent test databases, this would break any tests "
"that expected replication to occur. However, the ``slave`` database has been "
"configured as a test mirror (using the :setting:`TEST_MIRROR` setting), "
"indicating that under testing, ``slave`` should be treated as a mirror of "
"``default``."
msgstr ""
"Если Django создаст две независимые тестовые базы данных, это приведёт к "
"сбою любых тестов, которые ожидают проведения репликации. Однако, база "
"данных ``slave`` настрена как тестовое зеркало (с помощью параметра "
"конфигурации :setting:`TEST_MIRROR`), т.е., во время тестирования ``slave`` "
"должен рассматриваться как зеркало ``default``."

# 58213e8763304853b14522ba2558eb6a
#: ../../topics/testing.txt:435
msgid ""
"When the test environment is configured, a test version of ``slave`` will "
"*not* be created. Instead the connection to ``slave`` will be redirected to "
"point at ``default``. As a result, writes to ``default`` will appear on "
"``slave`` -- but because they are actually the same database, not because "
"there is data replication between the two databases."
msgstr ""
"При настройке тестового окружения, тестовая версия ``slave`` *не будет* "
"создана. Вместо этого, соединение к ``slave`` будет перенаправлено на "
"``default``. В результате, запись в ``default`` будет приводить к появлению "
"данных на ``slave``. Но лишь потому что это одна и та же база данных, а не "
"из-за репликации между двумя базами данных."

# 1b55a9c999a74a50ab2732dc91e21277
#: ../../topics/testing.txt:445
msgid "Controlling creation order for test databases"
msgstr "Управление порядком создания тестовых баз данных"

# faad77ee24044e1f96d78dabe10a1643
#: ../../topics/testing.txt:449
msgid ""
"By default, Django will always create the ``default`` database first. "
"However, no guarantees are made on the creation order of any other databases "
"in your test setup."
msgstr ""
"По умолчанию, Django всегда создаёт базу данных ``default`` первой. Однако "
"никак не гарантирует порядок создания остальных баз данных вашей "
"конфигурации."

# a405c5f76c56440691590104df3a84a7
#: ../../topics/testing.txt:453
msgid ""
"If your database configuration requires a specific creation order, you can "
"specify the dependencies that exist using the :setting:`TEST_DEPENDENCIES` "
"setting. Consider the following (simplified) example database configuration::"
msgstr ""
"Если конфигурация ваших баз данных требует определённого порядка создания "
"баз данных, вы можете указать эти зависимости с помощью параметра "
"конфигурации :setting:`TEST_DEPENDENCIES`. Рассмотрим следующий (упрощенный) "
"пример конфигурации баз данных::"

# 94f4574b502f48c0b66cd7983e73b480
#: ../../topics/testing.txt:480
msgid ""
"Under this configuration, the ``diamonds`` database will be created first, "
"as it is the only database alias without dependencies. The ``default`` and "
"``clubs`` alias will be created next (although the order of creation of this "
"pair is not guaranteed); then ``hearts``; and finally ``spades``."
msgstr ""
"Используя эту конфигурацию, база данных ``diamonds`` будет создана первой, "
"так как только у неё нет зависимостей. Базы данных ``default`` и ``clubs`` "
"будут созданы далее (хотя порядок создания этой пары случаен). Затем будет "
"создана ``hearts`` и в конце ``spades`` базы данных."

# 48f25f102e9d4517a8314323f9d6528f
#: ../../topics/testing.txt:485
msgid ""
"If there are any circular dependencies in the :setting:`TEST_DEPENDENCIES` "
"definition, an ``ImproperlyConfigured`` exception will be raised."
msgstr ""
"Если в параметре :setting:`TEST_DEPENDENCIES` будет определена циклическая "
"зависимость, то будет вызвано исключение ``ImproperlyConfigured``."

# 7bb896f011274c3497d1de950d6ef2ec
#: ../../topics/testing.txt:490
msgid "Other test conditions"
msgstr "Другие условия тестирования"

# aa2079382aee44d4a39bf45b7915bf69
#: ../../topics/testing.txt:492
msgid ""
"Regardless of the value of the :setting:`DEBUG` setting in your "
"configuration file, all Django tests run with :setting:`DEBUG`\\=False. This "
"is to ensure that the observed output of your code matches what will be seen "
"in a production setting."
msgstr ""
"Независимо от значения параметра конфигурации :setting:`DEBUG`, Django "
"выполняет все тесты, устанавливая :setting:`DEBUG`\\=False. Так делается для "
"того, чтобы проверять код в условиях, аналогичных боевым."

# eb0996dafc254d7e8f5746d9cb3dc080
#: ../../topics/testing.txt:498
msgid "Understanding the test output"
msgstr "Изучение вывода тестов"

# 4f5c4d02c6d24db394c918a301da7378
#: ../../topics/testing.txt:500
msgid ""
"When you run your tests, you'll see a number of messages as the test runner "
"prepares itself. You can control the level of detail of these messages with "
"the ``verbosity`` option on the command line::"
msgstr ""
"При запуске тестов, вы увидите ряд сообщений тест раннера. Вы можете "
"управлять уровнем детализации этих сообщений с помощью аргумента "
"``verbosity`` командной строки::"

# b2e328d71eee40ee866bc5c35860f35c
#: ../../topics/testing.txt:510
msgid ""
"This tells you that the test runner is creating a test database, as "
"described in the previous section."
msgstr ""
"Это показывает вам, что тест раннер создал тестовую базу данных, как мы об "
"этом рассказали в предыдущем разделе."

# 0a6c7bfc022343e0ad02a2ae9df42abc
#: ../../topics/testing.txt:513
msgid ""
"Once the test database has been created, Django will run your tests. If "
"everything goes well, you'll see something like this::"
msgstr ""
"После создания тестовой базы данных, Django запускает ваши тесты. Если всё "
"идёт без ошибок, то вы увидите подобный вывод::"

# f4000ff4ccc1432780549ba335903852
#: ../../topics/testing.txt:521
msgid ""
"If there are test failures, however, you'll see full details about which "
"tests failed::"
msgstr ""
"Если во время выполнения тестов произошли ошибки, то вы увидите полную "
"информацию по непройденным тестам::"

# 04716acdd5c54537b06729671b64a1d0
#: ../../topics/testing.txt:547
msgid ""
"A full explanation of this error output is beyond the scope of this "
"document, but it's pretty intuitive. You can consult the documentation of "
"Python's :mod:`unittest` library for details."
msgstr ""
"Полный разбор этого вывода ошибки находится вне данного документа, но тест "
"ошибки говорит сам за себя. Вы можете обратиться к документации на "
"библиотеку :mod:`unittest` языка Python для получения подробной информации."

# 741216820db24330b5b4df9f4c485d45
#: ../../topics/testing.txt:551
msgid ""
"Note that the return code for the test-runner script is 1 for any number of "
"failed and erroneous tests. If all the tests pass, the return code is 0. "
"This feature is useful if you're using the test-runner script in a shell "
"script and need to test for success or failure at that level."
msgstr ""
"Следует отметить, что тест раннер возвращает 1 для любого количества ошибок. "
"Если все тесты пройдены, будет возвращен 0. Эта особенность полезна в "
"случае, когда вам надо запускать раннер из скриптов шелла, проверяя "
"результат его работы."

# c1051cb994bd4631b69d7782470c037e
#: ../../topics/testing.txt:557
msgid "Testing tools"
msgstr "Инструменты тестировщика"

# aafaff1b91f7418599c9bf0bc1ec9028
#: ../../topics/testing.txt:559
msgid ""
"Django provides a small set of tools that come in handy when writing tests."
msgstr ""
"Django предоставляет небольшой набор инструментов, которые пригодятся при "
"написании тестов."

# 7185ba95eabf4bbdbf7d320cba9eb0e3
#: ../../topics/testing.txt:564
msgid "The test client"
msgstr "Тестовый клиент"

# c7bbb932819e47548cde883cfead52d9
#: ../../topics/testing.txt:569
msgid ""
"The test client is a Python class that acts as a dummy Web browser, allowing "
"you to test your views and interact with your Django-powered application "
"programmatically."
msgstr ""
"Тестовый клиент -- это класс Python, который работает как простой веб "
"браузер, позволяя вам тестировать ваши представления и взаимодействовать с "
"вашим приложением программно."

# 8ae71719c24e49c5b0525a9fcb4f8c9f
#: ../../topics/testing.txt:573
msgid "Some of the things you can do with the test client are:"
msgstr "Некоторые вещи, которые вы можете делать с помощью тестового клиента:"

# e48ababb2ed34a09b45aeaeae943ddad
#: ../../topics/testing.txt:575
msgid ""
"Simulate GET and POST requests on a URL and observe the response -- "
"everything from low-level HTTP (result headers and status codes) to page "
"content."
msgstr ""
"Симуляция GET и POST запросов на URL и просмотр ответа. Всё, от HTTP "
"(включая заголовки и коды статуса) до содержимого страницы."

# d7814cc5fb4342f79da88eabba7e4185
#: ../../topics/testing.txt:579
msgid "Test that the correct view is executed for a given URL."
msgstr ""
"Проверять. что правильное представление было вызвано для указанного URL."

# 47919dd0c6e54a1b84521085944b2040
#: ../../topics/testing.txt:581
msgid ""
"Test that a given request is rendered by a given Django template, with a "
"template context that contains certain values."
msgstr ""
"Проверять, что указанный запрос обработан определённым шаблоном, с шаблонным "
"контекстом, который содержит нужные значения."

# bd40f9f9f2ec45ef8462291b6313e1ae
#: ../../topics/testing.txt:584
msgid ""
"Note that the test client is not intended to be a replacement for Selenium_ "
"or other \"in-browser\" frameworks. Django's test client has a different "
"focus. In short:"
msgstr ""
"Следует отметить, что тестовый клиент не является заменой Selenium_ или "
"другим \"внутри браузерным\" фреймворкам. Тестовый клиент имеет другое "
"назначение. Если кратко, то:"

# f8b679529a6e49539cee001e06046880
#: ../../topics/testing.txt:588
msgid ""
"Use Django's test client to establish that the correct view is being called "
"and that the view is collecting the correct context data."
msgstr ""
"Используйте тестовый клиент для уверенности, что правильное представление "
"было вызвано и что представление создало контекст с нужным содержимым."

# 2b73d8dde10a43e4b0216bc030ac3c23
#: ../../topics/testing.txt:591
msgid ""
"Use in-browser frameworks like Selenium_ to test *rendered* HTML and the "
"*behavior* of Web pages, namely JavaScript functionality. Django also "
"provides special support for those frameworks; see the section on :class:"
"`~django.test.LiveServerTestCase` for more details."
msgstr ""
"Используйте внутри браузерные фреймворки, такие как Selenium_, для проверки "
"*созданных* HTML и *поведения* веб страниц, особенно функционала "
"реализуемого с помощью JavaScript. Django также предоставляет специальную "
"поддержку для этих фреймворков. Обратитесь к разделу :class:`~django.test."
"LiveServerTestCase` для получения подробностей."

# 98602b606b3b4d16a0342d31b9b54d5c
#: ../../topics/testing.txt:596
msgid "A comprehensive test suite should use a combination of both test types."
msgstr ""
"Всесторонний пакет тестирования должен использовать комбинацию подходов к "
"тестированию."

# a620516989be4b3caa28c025c50a4216
#: ../../topics/testing.txt:599
msgid "Overview and a quick example"
msgstr "Введение"

# da007cd929f843dd88899853aaa423f4
#: ../../topics/testing.txt:601
msgid ""
"To use the test client, instantiate ``django.test.client.Client`` and "
"retrieve Web pages::"
msgstr ""
"Для того, чтобы начать использовать тестовый клиент, следует создать "
"экземпляр ``django.test.client.Client`` и запросить веб страницы::"

# fa4dbf5c86184a079c942d360bdb8ec8
#: ../../topics/testing.txt:613
msgid ""
"As this example suggests, you can instantiate ``Client`` from within a "
"session of the Python interactive interpreter."
msgstr ""
"Этот пример предполагает, что вы создаёте экземпляр ``Client`` в сессии "
"интерактивного интерпретатора Python."

# 3889bc5bfa4c4038b88c3c224e1da60e
#: ../../topics/testing.txt:616
msgid "Note a few important things about how the test client works:"
msgstr ""
"Следует отметить несколько важных особенностей работы тестового клиента:"

# 20687b2f885346c7ac642b3ff524153d
#: ../../topics/testing.txt:618
msgid ""
"The test client does *not* require the Web server to be running. In fact, it "
"will run just fine with no Web server running at all! That's because it "
"avoids the overhead of HTTP and deals directly with the Django framework. "
"This helps make the unit tests run quickly."
msgstr ""
"Тестовый клиент *не требует* запуска веб сервера. В действительности, он "
"будет отлично работать без всякого запущенного вебсервера! Так происходит, "
"потому что клиент работает с Django напрямую, минуя HTTP. Такой подход "
"помогает ускорить выполнение тестов."

# dd759b7d8f5f40c9ade8b7effa0323af
#: ../../topics/testing.txt:623
msgid ""
"When retrieving pages, remember to specify the *path* of the URL, not the "
"whole domain. For example, this is correct::"
msgstr ""
"При получении страниц, не забывайте указывать *путь* для URL, а не весь "
"домен. Вот так будет правильно::"

# 70071f4e5a06433497f78914535f1838
#: ../../topics/testing.txt:628
msgid "This is incorrect::"
msgstr "Вот так будет неправильно::"

# 2fa518baa3b44bcba0b34df26d281cce
#: ../../topics/testing.txt:632
msgid ""
"The test client is not capable of retrieving Web pages that are not powered "
"by your Django project. If you need to retrieve other Web pages, use a "
"Python standard library module such as :mod:`urllib` or :mod:`urllib2`."
msgstr ""

# 33a9bd5af634473c830e3c4433e8dfa7
#: ../../topics/testing.txt:637
msgid ""
"To resolve URLs, the test client uses whatever URLconf is pointed-to by "
"your :setting:`ROOT_URLCONF` setting."
msgstr ""

# 40724f877ce24fe2b094862d2c045591
#: ../../topics/testing.txt:640
msgid ""
"Although the above example would work in the Python interactive interpreter, "
"some of the test client's functionality, notably the template-related "
"functionality, is only available *while tests are running*."
msgstr ""

# 0b98e8ed541848cbb50410edff982ac0
#: ../../topics/testing.txt:645
msgid ""
"The reason for this is that Django's test runner performs a bit of black "
"magic in order to determine which template was loaded by a given view. This "
"black magic (essentially a patching of Django's template system in memory) "
"only happens during test running."
msgstr ""

# c4de036b74ce4964979e6e393e7f01f9
#: ../../topics/testing.txt:650
msgid ""
"By default, the test client will disable any CSRF checks performed by your "
"site."
msgstr ""

# 1aa10a91fb7f4d60b0af3955a0d36cd0
#: ../../topics/testing.txt:655
msgid ""
"If, for some reason, you *want* the test client to perform CSRF checks, you "
"can create an instance of the test client that enforces CSRF checks. To do "
"this, pass in the ``enforce_csrf_checks`` argument when you construct your "
"client::"
msgstr ""

# a5dad615b79d4acba07e973d39a43d7f
#: ../../topics/testing.txt:665
msgid "Making requests"
msgstr ""

# 960d99f4eb0b412b9fdb1aa9556eb479
#: ../../topics/testing.txt:667
msgid ""
"Use the ``django.test.client.Client`` class to make requests. It requires no "
"arguments at time of construction:"
msgstr ""

# c7263c5f8eb84a1395676e2466efd2b3
#: ../../topics/testing.txt:672
msgid ""
"Once you have a ``Client`` instance, you can call any of the following "
"methods:"
msgstr ""

# 6ba06f1af2a244d9bac726fa5fb67ef5
#: ../../topics/testing.txt:678
msgid ""
"Makes a GET request on the provided ``path`` and returns a ``Response`` "
"object, which is documented below."
msgstr ""

# 437d80762add4d22b3be7251ee3150d5
#: ../../topics/testing.txt:681
msgid ""
"The key-value pairs in the ``data`` dictionary are used to create a GET data "
"payload. For example::"
msgstr ""

# a0f748a01d9148c29924beee1edc94d3
#: ../../topics/testing.txt:687
msgid "...will result in the evaluation of a GET request equivalent to::"
msgstr ""

# d6d8acb4701f4710a167c395f0147a17
#: ../../topics/testing.txt:691
msgid ""
"The ``extra`` keyword arguments parameter can be used to specify headers to "
"be sent in the request. For example::"
msgstr ""

# 8f2bcaa2fb334e63a678a033c5a93e2d
#: ../../topics/testing.txt:698
msgid ""
"...will send the HTTP header ``HTTP_X_REQUESTED_WITH`` to the details view, "
"which is a good way to test code paths that use the :meth:`django.http."
"HttpRequest.is_ajax()` method."
msgstr ""

# 197cdb581ccc4a0087972ad313967eaf
#: ../../topics/testing.txt:704
msgid ""
"The headers sent via ``**extra`` should follow CGI_ specification. For "
"example, emulating a different \"Host\" header as sent in the HTTP request "
"from the browser to the server should be passed as ``HTTP_HOST``."
msgstr ""

# e245528f380d4b96a49183fab11eb61d
#: ../../topics/testing.txt:711
msgid ""
"If you already have the GET arguments in URL-encoded form, you can use that "
"encoding instead of using the data argument. For example, the previous GET "
"request could also be posed as::"
msgstr ""

# 5314faa192ac43e78a1b6bd232caaacb
#: ../../topics/testing.txt:718
msgid ""
"If you provide a URL with both an encoded GET data and a data argument, the "
"data argument will take precedence."
msgstr ""

# b5171731475c49c4b8331c1408db7995
# 4b0044b3e97443e59596ba095f78d77b
# 70b2cca3c2f34a4eb24afcee6a216360
# 5df3cd326b074a7ab7c6b08da8e8bb64
# 1c7b55bd26e64c4ba1c6fbc4b50729d3
# 8e3ce2ce91da40d3865b5b2aac583ee1
#: ../../topics/testing.txt:721 ../../topics/testing.txt:803
#: ../../topics/testing.txt:813 ../../topics/testing.txt:822
#: ../../topics/testing.txt:834 ../../topics/testing.txt:843
msgid ""
"If you set ``follow`` to ``True`` the client will follow any redirects and a "
"``redirect_chain`` attribute will be set in the response object containing "
"tuples of the intermediate urls and status codes."
msgstr ""

# f06e3c30906a4f94bf87023c2cd22860
#: ../../topics/testing.txt:725
msgid ""
"If you had an url ``/redirect_me/`` that redirected to ``/next/``, that "
"redirected to ``/final/``, this is what you'd see::"
msgstr ""

# 4fb2fb5d8cdb40028939ff44f837ff0d
#: ../../topics/testing.txt:734
msgid ""
"Makes a POST request on the provided ``path`` and returns a ``Response`` "
"object, which is documented below."
msgstr ""

# 31d60ccafdd441a499f2fc754e0ff762
#: ../../topics/testing.txt:737
msgid ""
"The key-value pairs in the ``data`` dictionary are used to submit POST data. "
"For example::"
msgstr ""

# 8ef9b0ec26c94a069dfabe0d5403d2ef
#: ../../topics/testing.txt:743
msgid "...will result in the evaluation of a POST request to this URL::"
msgstr ""

# 93efc9516e264e748a08c03bf111b7b8
#: ../../topics/testing.txt:747
msgid "...with this POST data::"
msgstr ""

# eda585f099ad499a9f0ef65c28552035
#: ../../topics/testing.txt:751
msgid ""
"If you provide ``content_type`` (e.g. :mimetype:`text/xml` for an XML "
"payload), the contents of ``data`` will be sent as-is in the POST request, "
"using ``content_type`` in the HTTP ``Content-Type`` header."
msgstr ""

# 9a3533fe7cec44e6982ae19ce66a9dab
#: ../../topics/testing.txt:755
msgid ""
"If you don't provide a value for ``content_type``, the values in ``data`` "
"will be transmitted with a content type of :mimetype:`multipart/form-data`. "
"In this case, the key-value pairs in ``data`` will be encoded as a multipart "
"message and used to create the POST data payload."
msgstr ""

# 5d65103b12454ba3837efc1d55d80b31
#: ../../topics/testing.txt:761
msgid ""
"To submit multiple values for a given key -- for example, to specify the "
"selections for a ``<select multiple>`` -- provide the values as a list or "
"tuple for the required key. For example, this value of ``data`` would submit "
"three selected values for the field named ``choices``::"
msgstr ""

# 605c22b3c5d5489092f092a195a24b8c
#: ../../topics/testing.txt:768
msgid ""
"Submitting files is a special case. To POST a file, you need only provide "
"the file field name as a key, and a file handle to the file you wish to "
"upload as a value. For example::"
msgstr ""

# ea737c527bf0429dbc94af7931dda5c8
#: ../../topics/testing.txt:777
msgid ""
"(The name ``attachment`` here is not relevant; use whatever name your file-"
"processing code expects.)"
msgstr ""

# 09da1f09c67b49be8e0fb1790dae3453
#: ../../topics/testing.txt:780
msgid ""
"Note that if you wish to use the same file handle for multiple ``post()`` "
"calls then you will need to manually reset the file pointer between posts. "
"The easiest way to do this is to manually close the file after it has been "
"provided to ``post()``, as demonstrated above."
msgstr ""

# 0081f86e0dfd4263b4acd61f5643ce2a
#: ../../topics/testing.txt:786
msgid ""
"You should also ensure that the file is opened in a way that allows the data "
"to be read. If your file contains binary data such as an image, this means "
"you will need to open the file in ``rb`` (read binary) mode."
msgstr ""

# 1e4cec0be6a842b58c5b97a1db20f2c3
# 0c8760c240f445ee96b78dcd9bde9f25
# e2b3b58eb7044e1096444f0ff27cffef
#: ../../topics/testing.txt:791 ../../topics/testing.txt:826
#: ../../topics/testing.txt:847
msgid "The ``extra`` argument acts the same as for :meth:`Client.get`."
msgstr ""

# 2b11cc79a25142cca3e0a0ad5a29cf9f
#: ../../topics/testing.txt:793
msgid ""
"If the URL you request with a POST contains encoded parameters, these "
"parameters will be made available in the request.GET data. For example, if "
"you were to make the request::"
msgstr ""

# e988a95d62bc4594927ad36b5cd7e2d5
#: ../../topics/testing.txt:799
msgid ""
"... the view handling this request could interrogate request.POST to "
"retrieve the username and password, and could interrogate request.GET to "
"determine if the user was a visitor."
msgstr ""

# e430d3e3fc7f49d5b0ba211639df4e5e
#: ../../topics/testing.txt:809
msgid ""
"Makes a HEAD request on the provided ``path`` and returns a ``Response`` "
"object. Useful for testing RESTful interfaces. Acts just like :meth:`Client."
"get` except it does not return a message body."
msgstr ""

# bfd61b79c7ea4d66bc3ff533ee3ceb6e
#: ../../topics/testing.txt:819
msgid ""
"Makes an OPTIONS request on the provided ``path`` and returns a ``Response`` "
"object. Useful for testing RESTful interfaces."
msgstr ""

# 1a5c9a934fad4cf7be46fe1a35dcd962
#: ../../topics/testing.txt:830
msgid ""
"Makes a PUT request on the provided ``path`` and returns a ``Response`` "
"object. Useful for testing RESTful interfaces. Acts just like :meth:`Client."
"post` except with the PUT request method."
msgstr ""

# 548eba0d347746c582a79d34d89a8ede
#: ../../topics/testing.txt:840
msgid ""
"Makes an DELETE request on the provided ``path`` and returns a ``Response`` "
"object. Useful for testing RESTful interfaces."
msgstr ""

# 62d0ce82881749089c7205afe74c9420
#: ../../topics/testing.txt:851
msgid ""
"If your site uses Django's :doc:`authentication system</topics/auth>` and "
"you deal with logging in users, you can use the test client's ``login()`` "
"method to simulate the effect of a user logging into the site."
msgstr ""

# 496bcbf9a1804beaac093e21f94a6114
#: ../../topics/testing.txt:856
msgid ""
"After you call this method, the test client will have all the cookies and "
"session data required to pass any login-based tests that may form part of a "
"view."
msgstr ""

# 3e6ece338a38412a87aaef87c8abd106
#: ../../topics/testing.txt:860
msgid ""
"The format of the ``credentials`` argument depends on which :ref:"
"`authentication backend <authentication-backends>` you're using (which is "
"configured by your :setting:`AUTHENTICATION_BACKENDS` setting). If you're "
"using the standard authentication backend provided by Django "
"(``ModelBackend``), ``credentials`` should be the user's username and "
"password, provided as keyword arguments::"
msgstr ""

# b3b95983f3d941239c66ff07ad32dfda
#: ../../topics/testing.txt:872
msgid ""
"If you're using a different authentication backend, this method may require "
"different credentials. It requires whichever credentials are required by "
"your backend's ``authenticate()`` method."
msgstr ""

# 1be1fce1ce364b5f9472b87873a76a67
#: ../../topics/testing.txt:876
msgid ""
"``login()`` returns ``True`` if it the credentials were accepted and login "
"was successful."
msgstr ""

# c5fc670a15e4401aa32474b94955e58c
#: ../../topics/testing.txt:879
msgid ""
"Finally, you'll need to remember to create user accounts before you can use "
"this method. As we explained above, the test runner is executed using a test "
"database, which contains no users by default. As a result, user accounts "
"that are valid on your production site will not work under test conditions. "
"You'll need to create users as part of the test suite -- either manually "
"(using the Django model API) or with a test fixture. Remember that if you "
"want your test user to have a password, you can't set the user's password by "
"setting the password attribute directly -- you must use the :meth:`~django."
"contrib.auth.models.User.set_password()` function to store a correctly "
"hashed password. Alternatively, you can use the :meth:`~django.contrib.auth."
"models.UserManager.create_user` helper method to create a new user with a "
"correctly hashed password."
msgstr ""

# 32ad9949a0b3404bb4da474c64f44078
#: ../../topics/testing.txt:895
msgid ""
"If your site uses Django's :doc:`authentication system</topics/auth>`, the "
"``logout()`` method can be used to simulate the effect of a user logging out "
"of your site."
msgstr ""

# a6fd0a5586224d7cbb169599df2a1dfa
#: ../../topics/testing.txt:899
msgid ""
"After you call this method, the test client will have all the cookies and "
"session data cleared to defaults. Subsequent requests will appear to come "
"from an AnonymousUser."
msgstr ""

# 2a9e1ab38c0743998ca48523b47b8357
#: ../../topics/testing.txt:904
msgid "Testing responses"
msgstr ""

# 7b7f6c886a90491e8f41ae903c926766
#: ../../topics/testing.txt:906
msgid ""
"The ``get()`` and ``post()`` methods both return a ``Response`` object. This "
"``Response`` object is *not* the same as the ``HttpResponse`` object "
"returned Django views; the test response object has some additional data "
"useful for test code to verify."
msgstr ""

# aa27802e173d44fba051503d65853fd4
#: ../../topics/testing.txt:911
msgid "Specifically, a ``Response`` object has the following attributes:"
msgstr ""

# 5fcb89828e494851b86e18b9c7ffeed3
#: ../../topics/testing.txt:917
msgid ""
"The test client that was used to make the request that resulted in the "
"response."
msgstr ""

# 102892689460447abdaee5b09c90bc40
#: ../../topics/testing.txt:922
msgid ""
"The body of the response, as a string. This is the final page content as "
"rendered by the view, or any error message."
msgstr ""

# 93a163fae7a74beb8106f862d6885eec
#: ../../topics/testing.txt:927
msgid ""
"The template ``Context`` instance that was used to render the template that "
"produced the response content."
msgstr ""

# 26f8fb3087844d918b4b81a170c12737
#: ../../topics/testing.txt:930
msgid ""
"If the rendered page used multiple templates, then ``context`` will be a "
"list of ``Context`` objects, in the order in which they were rendered."
msgstr ""

# 91e41391c0b34c119b497c38dc7e9165
#: ../../topics/testing.txt:933
msgid ""
"Regardless of the number of templates used during rendering, you can "
"retrieve context values using the ``[]`` operator. For example, the context "
"variable ``name`` could be retrieved using::"
msgstr ""

# 17f0ceb5894b40f7aa993e4ae8714a8a
#: ../../topics/testing.txt:943
msgid "The request data that stimulated the response."
msgstr ""

# 6119698be57446779f3104ff6780e805
#: ../../topics/testing.txt:947
msgid ""
"The HTTP status of the response, as an integer. See :rfc:`2616#section-10` "
"for a full list of HTTP status codes."
msgstr ""

# 86d1a4ee09894082b9be2c739d0eef04
#: ../../topics/testing.txt:954
msgid ""
"A list of ``Template`` instances used to render the final content, in the "
"order they were rendered. For each template in the list, use ``template."
"name`` to get the template's file name, if the template was loaded from a "
"file. (The name is a string such as ``'admin/index.html'``.)"
msgstr ""

# ae4109eedb2e442d850589ccd34aec66
#: ../../topics/testing.txt:960
msgid ""
"You can also use dictionary syntax on the response object to query the value "
"of any settings in the HTTP headers. For example, you could determine the "
"content type of a response using ``response['Content-Type']``."
msgstr ""

# f106a50735b34089869482bef69f3684
#: ../../topics/testing.txt:965
msgid "Exceptions"
msgstr ""

# e6430f5b5c6f467d99541538cbc48ea3
#: ../../topics/testing.txt:967
msgid ""
"If you point the test client at a view that raises an exception, that "
"exception will be visible in the test case. You can then use a standard "
"``try ... except`` block or :meth:`~unittest.TestCase.assertRaises` to test "
"for exceptions."
msgstr ""

# cc162acfe44647f5b883bbdb5675ffaa
#: ../../topics/testing.txt:971
msgid ""
"The only exceptions that are not visible to the test client are ``Http404``, "
"``PermissionDenied`` and ``SystemExit``. Django catches these exceptions "
"internally and converts them into the appropriate HTTP response codes. In "
"these cases, you can check ``response.status_code`` in your test."
msgstr ""

# 9473018c4ba8490fb591c1f0e87e6894
#: ../../topics/testing.txt:977
msgid "Persistent state"
msgstr ""

# 93aa14208c544327819543b9c3b19eac
#: ../../topics/testing.txt:979
msgid ""
"The test client is stateful. If a response returns a cookie, then that "
"cookie will be stored in the test client and sent with all subsequent ``get()"
"`` and ``post()`` requests."
msgstr ""

# 8a6c9c6bf1764976afa994d749c86735
#: ../../topics/testing.txt:983
msgid ""
"Expiration policies for these cookies are not followed. If you want a cookie "
"to expire, either delete it manually or create a new ``Client`` instance "
"(which will effectively delete all cookies)."
msgstr ""

# 05d36c9100714b8f9b4fa50824db8d22
#: ../../topics/testing.txt:987
msgid ""
"A test client has two attributes that store persistent state information. "
"You can access these properties as part of a test condition."
msgstr ""

# 8ecb4b4d0ecc408ebf0fc5a613b11d82
#: ../../topics/testing.txt:992
msgid ""
"A Python :class:`~Cookie.SimpleCookie` object, containing the current values "
"of all the client cookies. See the documentation of the :mod:`Cookie` module "
"for more."
msgstr ""

# 74a027900ea045e38f6cac9de9653f24
#: ../../topics/testing.txt:998
msgid ""
"A dictionary-like object containing session information. See the :doc:"
"`session documentation</topics/http/sessions>` for full details."
msgstr ""

# 242b9f9218d64901b71afd59358c729e
#: ../../topics/testing.txt:1001
msgid ""
"To modify the session and then save it, it must be stored in a variable "
"first (because a new ``SessionStore`` is created every time this property is "
"accessed)::"
msgstr ""

# d6a790bc2a9849bab7766775d80a4b17
# 75142f6b893e4b7abdbc4a56822f7237
#: ../../topics/testing.txt:1011 ../../topics/testing.txt:1064
msgid "Example"
msgstr ""

# f7c870ba8e70493ca72ea4f0c607ed20
#: ../../topics/testing.txt:1013
msgid "The following is a simple unit test using the test client::"
msgstr ""

# 2db38c3741484815b08759ab12d86b58
#: ../../topics/testing.txt:1034
msgid "The request factory"
msgstr ""

# d4a3fbcdb5b74bd28233fd9a5eafc7ed
#: ../../topics/testing.txt:1040
msgid ""
"The :class:`~django.test.client.RequestFactory` shares the same API as the "
"test client. However, instead of behaving like a browser, the RequestFactory "
"provides a way to generate a request instance that can be used as the first "
"argument to any view. This means you can test a view function the same way "
"as you would test any other function -- as a black box, with exactly known "
"inputs, testing for specific outputs."
msgstr ""

# 563e5be281424c62ab97a0affa6f705a
#: ../../topics/testing.txt:1047
msgid ""
"The API for the :class:`~django.test.client.RequestFactory` is a slightly "
"restricted subset of the test client API:"
msgstr ""

# 3399c74534a2475b8e656eb0e301f134
#: ../../topics/testing.txt:1050
msgid ""
"It only has access to the HTTP methods :meth:`~Client.get()`, :meth:`~Client."
"post()`, :meth:`~Client.put()`, :meth:`~Client.delete()`, :meth:`~Client.head"
"()` and :meth:`~Client.options()`."
msgstr ""

# 47db7f5c26db40439010d6ea13b63efb
#: ../../topics/testing.txt:1055
msgid ""
"These methods accept all the same arguments *except* for ``follows``. Since "
"this is just a factory for producing requests, it's up to you to handle the "
"response."
msgstr ""

# b0e97bc75e8049ad8a1444a60c8ba05f
#: ../../topics/testing.txt:1059
msgid ""
"It does not support middleware. Session and authentication attributes must "
"be supplied by the test itself if required for the view to function properly."
msgstr ""

# 4a780aa6202d4ef2b5bf23f0b8656700
#: ../../topics/testing.txt:1066
msgid "The following is a simple unit test using the request factory::"
msgstr ""

# 576e34d00e234ed1a2f29e54ce8b0c39
#: ../../topics/testing.txt:1085
msgid "TestCase"
msgstr ""

# 91d8208f9c7c4f748a201362a68f0f06
#: ../../topics/testing.txt:1089
msgid ""
"Normal Python unit test classes extend a base class of :class:`unittest."
"TestCase`. Django provides a few extensions of this base class:"
msgstr ""

# d31ff530831f4b4e8ce553866d2eb7d3
#: ../../topics/testing.txt:1101
msgid ""
"This class provides some additional capabilities that can be useful for "
"testing Web sites."
msgstr ""

# 3c9c28a05bb04aafa2c924b2508d6900
#: ../../topics/testing.txt:1104
msgid ""
"Converting a normal :class:`unittest.TestCase` to a Django :class:`TestCase` "
"is easy: just change the base class of your test from :class:`unittest."
"TestCase` to :class:`django.test.TestCase`. All of the standard Python unit "
"test functionality will continue to be available, but it will be augmented "
"with some useful additions, including:"
msgstr ""

# 59bf841597a04207a85dbc96dfdba133
#: ../../topics/testing.txt:1110
msgid "Automatic loading of fixtures."
msgstr ""

# 47fb57f05c924502adad2b6e0092ccfc
#: ../../topics/testing.txt:1112
msgid "Wraps each test in a transaction."
msgstr ""

# 8cf42dc90f7944c6bf308c12101eeebe
#: ../../topics/testing.txt:1114
msgid "Creates a TestClient instance."
msgstr ""

# 83067f06919f4df3b2e730074fc224e6
#: ../../topics/testing.txt:1116
msgid ""
"Django-specific assertions for testing for things like redirection and form "
"errors."
msgstr ""

# 78f33f1f858f46c5aa5fd611862f6e87
#: ../../topics/testing.txt:1119
msgid "``TestCase`` inherits from :class:`~django.test.TransactionTestCase`."
msgstr ""

# 57d98232717d4c77893a0ea7ef179ee3
#: ../../topics/testing.txt:1123
msgid ""
"Django ``TestCase`` classes make use of database transaction facilities, if "
"available, to speed up the process of resetting the database to a known "
"state at the beginning of each test. A consequence of this, however, is that "
"the effects of transaction commit and rollback cannot be tested by a Django "
"``TestCase`` class. If your test requires testing of such transactional "
"behavior, you should use a Django ``TransactionTestCase``."
msgstr ""

# 4c7356a4c26d4e96b4e19f2604523f54
#: ../../topics/testing.txt:1130
msgid ""
"``TransactionTestCase`` and ``TestCase`` are identical except for the manner "
"in which the database is reset to a known state and the ability for test "
"code to test the effects of commit and rollback. A ``TransactionTestCase`` "
"resets the database before the test runs by truncating all tables and "
"reloading initial data. A ``TransactionTestCase`` may call commit and "
"rollback and observe the effects of these calls on the database."
msgstr ""

# 7202252f7e6e405c9e84a46fa354af7a
#: ../../topics/testing.txt:1137
msgid ""
"A ``TestCase``, on the other hand, does not truncate tables and reload "
"initial data at the beginning of a test. Instead, it encloses the test code "
"in a database transaction that is rolled back at the end of the test.  It "
"also prevents the code under test from issuing any commit or rollback "
"operations on the database, to ensure that the rollback at the end of the "
"test restores the database to its initial state. In order to guarantee that "
"all ``TestCase`` code starts with a clean database, the Django test runner "
"runs all ``TestCase`` tests first, before any other tests (e.g. doctests) "
"that may alter the database without restoring it to its original state."
msgstr ""

# 93d71ea746874997a9cc40b0a81cfe10
#: ../../topics/testing.txt:1147
msgid ""
"When running on a database that does not support rollback (e.g. MySQL with "
"the MyISAM storage engine), ``TestCase`` falls back to initializing the "
"database by truncating tables and reloading initial data."
msgstr ""

# bebea4df3dbe47e3bc48020bdba178f7
#: ../../topics/testing.txt:1151
msgid ""
"``TransactionTestCase`` inherits from :class:`~django.test.SimpleTestCase`."
msgstr ""

# 4359899622d146239342bc84eae11987
#: ../../topics/testing.txt:1154
msgid ""
"The ``TestCase`` use of rollback to un-do the effects of the test code may "
"reveal previously-undetected errors in test code.  For example, test code "
"that assumes primary keys values will be assigned starting at one may find "
"that assumption no longer holds true when rollbacks instead of table "
"truncation are being used to reset the database.  Similarly, the reordering "
"of tests so that all ``TestCase`` classes run first may reveal unexpected "
"dependencies on test case ordering.  In such cases a quick fix is to switch "
"the ``TestCase`` to a ``TransactionTestCase``. A better long-term fix, that "
"allows the test to take advantage of the speed benefit of ``TestCase``, is "
"to fix the underlying test problem."
msgstr ""

# 0e3a7a3e69044b74868003eb3bfd4d26
#: ../../topics/testing.txt:1169
msgid ""
"A very thin subclass of :class:`unittest.TestCase`, it extends it with some "
"basic functionality like:"
msgstr ""

# fe2ad29909a340c999f21d19131cc810
#: ../../topics/testing.txt:1172
msgid "Saving and restoring the Python warning machinery state."
msgstr ""

# 4607337b6bfc4b059e8cbb830d7ca506
#: ../../topics/testing.txt:1173
msgid ""
"Checking that a callable :meth:`raises a certain exception <SimpleTestCase."
"assertRaisesMessage>`."
msgstr ""

# da3907b7a663417ea1c5daafc977567d
#: ../../topics/testing.txt:1174
msgid ""
":meth:`Testing form field rendering <SimpleTestCase.assertFieldOutput>`."
msgstr ""

# 5f913124951c4d45bb0d3c72ccef9986
#: ../../topics/testing.txt:1175
msgid ""
"Testing server :ref:`HTML responses for the presence/lack of a given "
"fragment <assertions>`."
msgstr ""

# 6b7c9d56fb7b4c9b92fb73283081a710
#: ../../topics/testing.txt:1176
msgid ""
"The ability to run tests with :ref:`modified settings <overriding-settings>`"
msgstr ""

# 0cebadb55bdb4102a60a57826f538c8e
#: ../../topics/testing.txt:1178
msgid ""
"If you need any of the other more complex and heavyweight Django-specific "
"features like:"
msgstr ""

# 7aeac3c8ac1943afa460d29a1ccb9cd3
#: ../../topics/testing.txt:1181
msgid "Using the :attr:`~TestCase.client` :class:`~django.test.client.Client`."
msgstr ""

# 3958183889254520ba088f110b161acb
#: ../../topics/testing.txt:1182
msgid "Testing or using the ORM."
msgstr ""

# 5d04a978dea7424f8040fb37b2ec52b5
#: ../../topics/testing.txt:1183
msgid "Database :attr:`~TestCase.fixtures`."
msgstr ""

# 5884c53f520c481e8035a500da1746a6
#: ../../topics/testing.txt:1184
msgid "Custom test-time :attr:`URL maps <TestCase.urls>`."
msgstr ""

# bcb92bb48171434c8e3e164ea66563ad
#: ../../topics/testing.txt:1185
msgid ""
"Test :ref:`skipping based on database backend features <skipping-tests>`."
msgstr ""

# de44ca0e8e954d93a37c0657bd4c7252
#: ../../topics/testing.txt:1186
msgid "The remaining specialized :ref:`assert* <assertions>` methods."
msgstr ""

# 38ace371ff2d4c048b6e48aca148c5e5
#: ../../topics/testing.txt:1188
msgid ""
"then you should use :class:`~django.test.TransactionTestCase` or :class:"
"`~django.test.TestCase` instead."
msgstr ""

# df0c0ef72e1245ccb7927ef12cc55ecd
#: ../../topics/testing.txt:1191
msgid ""
"``SimpleTestCase`` inherits from :class:`django.utils.unittest.TestCase`."
msgstr ""

# 845da102ff8a428b84b5dd81d3b66411
#: ../../topics/testing.txt:1194
msgid "Default test client"
msgstr ""

# 978aca859b4b4db38a96d0e16679cbc4
#: ../../topics/testing.txt:1198
msgid ""
"Every test case in a ``django.test.TestCase`` instance has access to an "
"instance of a Django test client. This client can be accessed as ``self."
"client``. This client is recreated for each test, so you don't have to worry "
"about state (such as cookies) carrying over from one test to another."
msgstr ""

# 0d41fd8f162f4cd3917409f8b36297c0
#: ../../topics/testing.txt:1203
msgid "This means, instead of instantiating a ``Client`` in each test::"
msgstr ""

# 2b430ea75a4f45d3a62e2686547ca203
#: ../../topics/testing.txt:1219
msgid "...you can just refer to ``self.client``, like so::"
msgstr ""

# ef0a324d102449849489ec35f68bccff
#: ../../topics/testing.txt:1233
msgid "Customizing the test client"
msgstr ""

# 5389538324a64bf185ea27c8bcf94198
#: ../../topics/testing.txt:1239
msgid ""
"If you want to use a different ``Client`` class (for example, a subclass "
"with customized behavior), use the :attr:`~TestCase.client_class` class "
"attribute::"
msgstr ""

# c2a2aae54a984296bf5c2e3c11627973
#: ../../topics/testing.txt:1258
msgid "Fixture loading"
msgstr ""

# 57912222ed57408bbefb9c92c32d30e1
#: ../../topics/testing.txt:1262
msgid ""
"A test case for a database-backed Web site isn't much use if there isn't any "
"data in the database. To make it easy to put test data into the database, "
"Django's custom ``TestCase`` class provides a way of loading **fixtures**."
msgstr ""

# 934e0301857243c0ba01d029437b68a9
#: ../../topics/testing.txt:1266
msgid ""
"A fixture is a collection of data that Django knows how to import into a "
"database. For example, if your site has user accounts, you might set up a "
"fixture of fake user accounts in order to populate your database during "
"tests."
msgstr ""

# 881fd2d871104e018c8811d120ce7edd
#: ../../topics/testing.txt:1270
msgid ""
"The most straightforward way of creating a fixture is to use the :djadmin:"
"`manage.py dumpdata <dumpdata>` command. This assumes you already have some "
"data in your database. See the :djadmin:`dumpdata documentation<dumpdata>` "
"for more details."
msgstr ""

# b48c87c2587e45e98ff1585a279f92e3
#: ../../topics/testing.txt:1277
msgid ""
"If you've ever run :djadmin:`manage.py syncdb<syncdb>`, you've already used "
"a fixture without even knowing it! When you call :djadmin:`syncdb` in the "
"database for the first time, Django installs a fixture called "
"``initial_data``. This gives you a way of populating a new database with any "
"initial data, such as a default set of categories."
msgstr ""

# 310c44bc391d4f10bbc6a872fe12385b
#: ../../topics/testing.txt:1284
msgid ""
"Fixtures with other names can always be installed manually using the :"
"djadmin:`manage.py loaddata<loaddata>` command."
msgstr ""

# 5990143981ca40dfb5242c0fe524cd9e
#: ../../topics/testing.txt:1289
msgid ""
"Django provides a second way to insert initial data into models -- the :ref:"
"`custom SQL hook <initial-sql>`. However, this technique *cannot* be used to "
"provide initial data for testing purposes. Django's test framework flushes "
"the contents of the test database after each test; as a result, any data "
"added using the custom SQL hook will be lost."
msgstr ""

# d29e08a313aa451782b3eeaac47481fd
#: ../../topics/testing.txt:1296
msgid ""
"Once you've created a fixture and placed it in a ``fixtures`` directory in "
"one of your :setting:`INSTALLED_APPS`, you can use it in your unit tests by "
"specifying a ``fixtures`` class attribute on your :class:`django.test."
"TestCase` subclass::"
msgstr ""

# ddd92e0eb2e14fcab3b3f7aae5f59f35
#: ../../topics/testing.txt:1315
msgid "Here's specifically what will happen:"
msgstr ""

# c6880c572d9a4f17bb11a97017285302
#: ../../topics/testing.txt:1317
msgid ""
"At the start of each test case, before ``setUp()`` is run, Django will flush "
"the database, returning the database to the state it was in directly after :"
"djadmin:`syncdb` was called."
msgstr ""

# 5cc9543a23124a3db1ebc61f019f7702
#: ../../topics/testing.txt:1321
msgid ""
"Then, all the named fixtures are installed. In this example, Django will "
"install any JSON fixture named ``mammals``, followed by any fixture named "
"``birds``. See the :djadmin:`loaddata` documentation for more details on "
"defining and installing fixtures."
msgstr ""

# f872989654db4a6ab86e9f3d5b9d2004
#: ../../topics/testing.txt:1326
msgid ""
"This flush/load procedure is repeated for each test in the test case, so you "
"can be certain that the outcome of a test will not be affected by another "
"test, or by the order of test execution."
msgstr ""

# f05eb441d67947f58ddfb119ccb261d1
#: ../../topics/testing.txt:1331
msgid "URLconf configuration"
msgstr ""

# 038b7b4262f04fc6bee0124eff553f05
#: ../../topics/testing.txt:1335
msgid ""
"If your application provides views, you may want to include tests that use "
"the test client to exercise those views. However, an end user is free to "
"deploy the views in your application at any URL of their choosing. This "
"means that your tests can't rely upon the fact that your views will be "
"available at a particular URL."
msgstr ""

# 61f1ac11df06436fa8efad5d997684aa
#: ../../topics/testing.txt:1341
msgid ""
"In order to provide a reliable URL space for your test, ``django.test."
"TestCase`` provides the ability to customize the URLconf configuration for "
"the duration of the execution of a test suite. If your ``TestCase`` instance "
"defines an ``urls`` attribute, the ``TestCase`` will use the value of that "
"attribute as the :setting:`ROOT_URLCONF` for the duration of that test."
msgstr ""

# 61c6a80e0c224b6b8e49047c7a3c266d
# 3e55c46b715146f2b474c19c8a405188
#: ../../topics/testing.txt:1348 ../../topics/testing.txt:1386
msgid "For example::"
msgstr ""

# ae0be21b0b5d4adeba9078f45cda3f72
#: ../../topics/testing.txt:1359
msgid ""
"This test case will use the contents of ``myapp.test_urls`` as the URLconf "
"for the duration of the test case."
msgstr ""

# 6da32df13f7d4f1faf15e75b415b140a
#: ../../topics/testing.txt:1365
msgid "Multi-database support"
msgstr ""

# 52ffdd1564be41f8acbbb8f83a640016
#: ../../topics/testing.txt:1371
msgid ""
"Django sets up a test database corresponding to every database that is "
"defined in the :setting:`DATABASES` definition in your settings file. "
"However, a big part of the time taken to run a Django TestCase is consumed "
"by the call to ``flush`` that ensures that you have a clean database at the "
"start of each test run. If you have multiple databases, multiple flushes are "
"required (one for each database), which can be a time consuming activity -- "
"especially if your tests don't need to test multi-database activity."
msgstr ""

# ee073e1b5cd14862b283da37ab28a40e
#: ../../topics/testing.txt:1380
msgid ""
"As an optimization, Django only flushes the ``default`` database at the "
"start of each test run. If your setup contains multiple databases, and you "
"have a test that requires every database to be clean, you can use the "
"``multi_db`` attribute on the test suite to request a full flush."
msgstr ""

# 2c5ccbec8d4b4424818901a83f83392e
#: ../../topics/testing.txt:1394
msgid ""
"This test case will flush *all* the test databases before running "
"``testIndexPageView``."
msgstr ""

# 43dbdbdbf77748e8a424ea4b9b6c2f98
#: ../../topics/testing.txt:1400
msgid "Overriding settings"
msgstr ""

# 157d1eee39974a688b0ba233b060c1ba
#: ../../topics/testing.txt:1406
msgid ""
"For testing purposes it's often useful to change a setting temporarily and "
"revert to the original value after running the testing code. For this use "
"case Django provides a standard Python context manager (see :pep:`343`) :"
"meth:`~django.test.TestCase.settings`, which can be used like this::"
msgstr ""

# 330e4ed9bbad4ab6a163bba9060c6ec5
#: ../../topics/testing.txt:1426
msgid ""
"This example will override the :setting:`LOGIN_URL` setting for the code in "
"the ``with`` block and reset its value to the previous state afterwards."
msgstr ""

# ba0fd3585d6f4a89ba4a8daa97925f5b
#: ../../topics/testing.txt:1433
msgid ""
"In case you want to override a setting for just one test method or even the "
"whole :class:`TestCase` class, Django provides the :func:`~django.test.utils."
"override_settings` decorator (see :pep:`318`). It's used like this::"
msgstr ""

# fe8118fca74c4ff3a1b0445757b7d243
#: ../../topics/testing.txt:1448
msgid "The decorator can also be applied to test case classes::"
msgstr ""

# 80bdad43fa3a452ba36ddd3ea86d152d
#: ../../topics/testing.txt:1463
msgid ""
"When given a class, the decorator modifies the class directly and returns "
"it; it doesn't create and return a modified copy of it.  So if you try to "
"tweak the above example to assign the return value to a different name than "
"``LoginTestCase``, you may be surprised to find that the original "
"``LoginTestCase`` is still equally affected by the decorator."
msgstr ""

# bb016d2dd2624687aca2e29a63d33562
#: ../../topics/testing.txt:1470
msgid ""
"On Python 2.6 and higher you can also use the well known decorator syntax to "
"decorate the class::"
msgstr ""

# ac47687c0769474da06246f9ac76c091
#: ../../topics/testing.txt:1485
msgid ""
"When overriding settings, make sure to handle the cases in which your app's "
"code uses a cache or similar feature that retains state even if the setting "
"is changed. Django provides the :data:`django.test.signals.setting_changed` "
"signal that lets you register callbacks to clean up and otherwise reset "
"state when settings are changed. Note that this signal isn't currently used "
"by Django itself, so changing built-in settings may not yield the results "
"you expect."
msgstr ""

# 0e80b9add652427cafac8e31e792dd4f
#: ../../topics/testing.txt:1494
msgid "Emptying the test outbox"
msgstr ""

# 53e3ec322e274423ab7f31d9a3dc9839
#: ../../topics/testing.txt:1496
msgid ""
"If you use Django's custom ``TestCase`` class, the test runner will clear "
"the contents of the test email outbox at the start of each test case."
msgstr ""

# 9b7950c191c1416680f0d9dcb67c1714
#: ../../topics/testing.txt:1499
msgid "For more detail on email services during tests, see `Email services`_."
msgstr ""

# 2df54567696040c282203bd9ecc51e46
#: ../../topics/testing.txt:1504
msgid "Assertions"
msgstr ""

# 53cd5fdfb75c423bb51bb59855257d7b
#: ../../topics/testing.txt:1511
msgid ""
"As Python's normal :class:`unittest.TestCase` class implements assertion "
"methods such as :meth:`~unittest.TestCase.assertTrue` and :meth:`~unittest."
"TestCase.assertEqual`, Django's custom :class:`TestCase` class provides a "
"number of custom assertion methods that are useful for testing Web "
"applications:"
msgstr ""

# 809eb527cd5c449bbca6832366eaaaa2
#: ../../topics/testing.txt:1517
msgid ""
"The failure messages given by most of these assertion methods can be "
"customized with the ``msg_prefix`` argument. This string will be prefixed to "
"any failure message generated by the assertion. This allows you to provide "
"additional details that may help you to identify the location and cause of "
"an failure in your test suite."
msgstr ""

# 72995c140897427ea80404b18ed38e9c
#: ../../topics/testing.txt:1527
msgid ""
"Asserts that execution of callable ``callable_obj`` raised the "
"``expected_exception`` exception and that such exception has an "
"``expected_message`` representation. Any other outcome is reported as a "
"failure. Similar to unittest's :meth:`~unittest.TestCase.assertRaisesRegexp` "
"with the difference that ``expected_message`` isn't a regular expression."
msgstr ""

# 40829efcf9cc41efa58f3f9efc34bb37
#: ../../topics/testing.txt:1537
msgid "Asserts that a form field behaves correctly with various inputs."
msgstr ""

# a3c9dc483d404a92a11f7ca9c5bbbffb
#: ../../topics/testing.txt:1548
msgid ""
"For example, the following code tests that an ``EmailField`` accepts \"a@a."
"com\" as a valid email address, but rejects \"aaa\" with a reasonable error "
"message::"
msgstr ""

# f081b9dc42444467ad34b78c995722b4
#: ../../topics/testing.txt:1557
msgid ""
"Asserts that a ``Response`` instance produced the given ``status_code`` and "
"that ``text`` appears in the content of the response. If ``count`` is "
"provided, ``text`` must occur exactly ``count`` times in the response."
msgstr ""

# 49d25142f4434025a7d6290c29a56bd8
# ec398ed4c9174c5f8f1eeb4ac050b376
#: ../../topics/testing.txt:1563 ../../topics/testing.txt:1576
msgid ""
"Set ``html`` to ``True`` to handle ``text`` as HTML. The comparison with the "
"response content will be based on HTML semantics instead of character-by-"
"character equality. Whitespace is ignored in most cases, attribute ordering "
"is not significant. See :meth:`~SimpleTestCase.assertHTMLEqual` for more "
"details."
msgstr ""

# d7105ed534ee422fb1dbd0ed57ae5ab0
#: ../../topics/testing.txt:1571
msgid ""
"Asserts that a ``Response`` instance produced the given ``status_code`` and "
"that ``text`` does not appears in the content of the response."
msgstr ""

# 8ee55745191043b58a4e8ea641af5665
#: ../../topics/testing.txt:1584
msgid ""
"Asserts that a field on a form raises the provided list of errors when "
"rendered on the form."
msgstr ""

# 753d5e490d3d44bba8f491ce10adca59
#: ../../topics/testing.txt:1587
msgid ""
"``form`` is the name the ``Form`` instance was given in the template context."
msgstr ""

# af21e9ce2a3b4ee782d89f07fa116622
#: ../../topics/testing.txt:1590
msgid ""
"``field`` is the name of the field on the form to check. If ``field`` has a "
"value of ``None``, non-field errors (errors you can access via ``form."
"non_field_errors()``) will be checked."
msgstr ""

# e3fe4e8b541d4597abd1b8b8cd4b96d2
#: ../../topics/testing.txt:1594
msgid ""
"``errors`` is an error string, or a list of error strings, that are expected "
"as a result of form validation."
msgstr ""

# 6dc3615c91284a01a043bcef76a5ed4f
#: ../../topics/testing.txt:1599
msgid ""
"Asserts that the template with the given name was used in rendering the "
"response."
msgstr ""

# bb43930124dc4b5c8a96d773150e773f
#: ../../topics/testing.txt:1602
msgid "The name is a string such as ``'admin/index.html'``."
msgstr ""

# 29232ab538c346329624717ca7e3cf05
#: ../../topics/testing.txt:1606
msgid "You can use this as a context manager, like this::"
msgstr ""

# 2df666a5c7034249afd4a9a649b0f8eb
#: ../../topics/testing.txt:1619
msgid ""
"Asserts that the template with the given name was *not* used in rendering "
"the response."
msgstr ""

# 6cee666c1513406fad0bb98b2e9e85ea
#: ../../topics/testing.txt:1624
msgid ""
"You can use this as a context manager in the same way as :meth:`~TestCase."
"assertTemplateUsed`."
msgstr ""

# 03df6104824641c48fb44cdd389e23ae
#: ../../topics/testing.txt:1629
msgid ""
"Asserts that the response return a ``status_code`` redirect status, it "
"redirected to ``expected_url`` (including any GET data), and the final page "
"was received with ``target_status_code``."
msgstr ""

# 5c5c4c16869b496ebd239b18ed60413c
#: ../../topics/testing.txt:1633
msgid ""
"If your request used the ``follow`` argument, the ``expected_url`` and "
"``target_status_code`` will be the url and status code for the final point "
"of the redirect chain."
msgstr ""

# 64e01acd407e48efb353e1dbb75d9fdd
#: ../../topics/testing.txt:1641
msgid ""
"Asserts that a queryset ``qs`` returns a particular list of values "
"``values``."
msgstr ""

# 4ea6fe6b77e046e48f32acd0d942e1db
#: ../../topics/testing.txt:1643
msgid ""
"The comparison of the contents of ``qs`` and ``values`` is performed using "
"the function ``transform``; by default, this means that the ``repr()`` of "
"each value is compared. Any other callable can be used if ``repr()`` doesn't "
"provide a unique or helpful comparison."
msgstr ""

# 49bbaffc67d94c71822d6ca0ec8efe71
#: ../../topics/testing.txt:1648
msgid ""
"By default, the comparison is also ordering dependent. If ``qs`` doesn't "
"provide an implicit ordering, you can set the ``ordered`` parameter to "
"``False``, which turns the comparison into a Python set comparison."
msgstr ""

# 40b14f5f881c49eb85fd4665ab1f7d9a
#: ../../topics/testing.txt:1663
msgid ""
"Asserts that when ``func`` is called with ``*args`` and ``**kwargs`` that "
"``num`` database queries are executed."
msgstr ""

# 3eb70b6f1a1245afab56e37a411817f7
#: ../../topics/testing.txt:1666
msgid ""
"If a ``\"using\"`` key is present in ``kwargs`` it is used as the database "
"alias for which to check the number of queries.  If you wish to call a "
"function with a ``using`` parameter you can do it by wrapping the call with "
"a ``lambda`` to add an extra parameter::"
msgstr ""

# 7269e54188a94339b8bb9f4b75e91936
#: ../../topics/testing.txt:1673
msgid ""
"If you're using Python 2.5 or greater you can also use this as a context "
"manager::"
msgstr ""

# 0b7df6baf65842c0b61105410e549c4c
#: ../../topics/testing.txt:1688
msgid ""
"Asserts that the strings ``html1`` and ``html2`` are equal. The comparison "
"is based on HTML semantics. The comparison takes following things into "
"account:"
msgstr ""

# 0e59ec8587504e37aa7c6d11dda9881c
#: ../../topics/testing.txt:1692
msgid "Whitespace before and after HTML tags is ignored."
msgstr ""

# cbfc7ce740d348f58523d7783920f89f
#: ../../topics/testing.txt:1693
msgid "All types of whitespace are considered equivalent."
msgstr ""

# f31b7ab9aa884cfd9c430d1067d9666c
#: ../../topics/testing.txt:1694
msgid ""
"All open tags are closed implicitly, e.g. when a surrounding tag is closed "
"or the HTML document ends."
msgstr ""

# 9afd0eca17ea4c778f56efe824ea843f
#: ../../topics/testing.txt:1696
msgid "Empty tags are equivalent to their self-closing version."
msgstr ""

# 0007518dfc1648448e9c25d78730fdf0
#: ../../topics/testing.txt:1697
msgid "The ordering of attributes of an HTML element is not significant."
msgstr ""

# 99da5932d05646dc8c6f4c68e2033f87
#: ../../topics/testing.txt:1698
msgid ""
"Attributes without an argument are equal to attributes that equal in name "
"and value (see the examples)."
msgstr ""

# bc717090441b4f589076365202e299bc
#: ../../topics/testing.txt:1701
msgid ""
"The following examples are valid tests and don't raise any "
"``AssertionError``::"
msgstr ""

# b67ac4dffbaa4a7f9dcbd9f97f07cf9e
# 92decb7da65540848287ba77419e4e46
#: ../../topics/testing.txt:1712 ../../topics/testing.txt:1723
msgid ""
"``html1`` and ``html2`` must be valid HTML. An ``AssertionError`` will be "
"raised if one of them cannot be parsed."
msgstr ""

# 815708887643428e827e0582c5ff0504
#: ../../topics/testing.txt:1719
msgid ""
"Asserts that the strings ``html1`` and ``html2`` are *not* equal. The "
"comparison is based on HTML semantics. See :meth:`~SimpleTestCase."
"assertHTMLEqual` for details."
msgstr ""

# 75cffd7201a14ac98f8379563d9b45e3
#: ../../topics/testing.txt:1729
msgid "Email services"
msgstr ""

# d0754b496dd24ec6b070351e1a833a9e
#: ../../topics/testing.txt:1731
msgid ""
"If any of your Django views send email using :doc:`Django's email "
"functionality </topics/email>`, you probably don't want to send email each "
"time you run a test using that view. For this reason, Django's test runner "
"automatically redirects all Django-sent email to a dummy outbox. This lets "
"you test every aspect of sending email -- from the number of messages sent "
"to the contents of each message -- without actually sending the messages."
msgstr ""

# 792d26dac824477e83f38094644e2c50
#: ../../topics/testing.txt:1738
msgid ""
"The test runner accomplishes this by transparently replacing the normal "
"email backend with a testing backend. (Don't worry -- this has no effect on "
"any other email senders outside of Django, such as your machine's mail "
"server, if you're running one.)"
msgstr ""

# de5bed5124ff4e7e97472a2e56d28b6d
#: ../../topics/testing.txt:1747
msgid ""
"During test running, each outgoing email is saved in ``django.core.mail."
"outbox``. This is a simple list of all :class:`~django.core.mail."
"EmailMessage` instances that have been sent. The ``outbox`` attribute is a "
"special attribute that is created *only* when the ``locmem`` email backend "
"is used. It doesn't normally exist as part of the :mod:`django.core.mail` "
"module and you can't import it directly. The code below shows how to access "
"this attribute correctly."
msgstr ""

# befa69f7d10e4aea9ee5a9bd627ea655
#: ../../topics/testing.txt:1755
msgid ""
"Here's an example test that examines ``django.core.mail.outbox`` for length "
"and contents::"
msgstr ""

# 909360722f99452ab97f8cb0b391d877
#: ../../topics/testing.txt:1774
msgid ""
"As noted :ref:`previously <emptying-test-outbox>`, the test outbox is "
"emptied at the start of every test in a Django ``TestCase``. To empty the "
"outbox manually, assign the empty list to ``mail.outbox``::"
msgstr ""

# af8b78a285b647d9b8306a9a4f4e55ce
#: ../../topics/testing.txt:1786
msgid "Skipping tests"
msgstr ""

# ce40bb1a2e4f475b8e543775666419cd
#: ../../topics/testing.txt:1792
msgid ""
"The unittest library provides the :func:`@skipIf <unittest.skipIf>` and :"
"func:`@skipUnless <unittest.skipUnless>` decorators to allow you to skip "
"tests if you know ahead of time that those tests are going to fail under "
"certain conditions."
msgstr ""

# 0e56b9821eb6490091b20288ef82c093
#: ../../topics/testing.txt:1797
msgid ""
"For example, if your test requires a particular optional library in order to "
"succeed, you could decorate the test case with :func:`@skipIf <unittest."
"skipIf>`. Then, the test runner will report that the test wasn't executed "
"and why, instead of failing the test or omitting the test altogether."
msgstr ""

# d1194a41d5b84e2fb0be119eee8672f9
#: ../../topics/testing.txt:1802
msgid ""
"To supplement these test skipping behaviors, Django provides two additional "
"skip decorators. Instead of testing a generic boolean, these decorators "
"check the capabilities of the database, and skip the test if the database "
"doesn't support a specific named feature."
msgstr ""

# 27b6ca69d06749f9a9da783b91cbaea5
#: ../../topics/testing.txt:1807
msgid ""
"The decorators use a string identifier to describe database features. This "
"string corresponds to attributes of the database connection features class. "
"See :class:`~django.db.backends.BaseDatabaseFeatures` class for a full list "
"of database features that can be used as a basis for skipping tests."
msgstr ""

# c2e1a2f5431148649fbf46662d77552a
#: ../../topics/testing.txt:1815
msgid "Skip the decorated test if the named database feature is supported."
msgstr ""

# fe3902c9e68646aea8925a82721fdb11
#: ../../topics/testing.txt:1817
msgid ""
"For example, the following test will not be executed if the database "
"supports transactions (e.g., it would *not* run under PostgreSQL, but it "
"would under MySQL with MyISAM tables)::"
msgstr ""

# b354fb6a2cad4e05bd67316af157d626
#: ../../topics/testing.txt:1828
msgid ""
"Skip the decorated test if the named database feature is *not* supported."
msgstr ""

# 1537f9aba6b84b839cb951d14d024442
#: ../../topics/testing.txt:1831
msgid ""
"For example, the following test will only be executed if the database "
"supports transactions (e.g., it would run under PostgreSQL, but *not* under "
"MySQL with MyISAM tables)::"
msgstr ""

# e4efdbfedbc64b1fafeea204a9c2583a
#: ../../topics/testing.txt:1841
msgid "Live test server"
msgstr ""

# cac21dba5d3b4768b22c72a63c6c73b3
#: ../../topics/testing.txt:1849
msgid ""
"``LiveServerTestCase`` does basically the same as :class:`~django.test."
"TransactionTestCase` with one extra feature: it launches a live Django "
"server in the background on setup, and shuts it down on teardown. This "
"allows the use of automated test clients other than the :ref:`Django dummy "
"client <test-client>` such as, for example, the Selenium_ client, to execute "
"a series of functional tests inside a browser and simulate a real user's "
"actions."
msgstr ""

# a7ec701df1fb4af8b6882a5f7ad98b33
#: ../../topics/testing.txt:1857
msgid ""
"By default the live server's address is `'localhost:8081'` and the full URL "
"can be accessed during the tests with ``self.live_server_url``. If you'd "
"like to change the default address (in the case, for example, where the 8081 "
"port is already taken) then you may pass a different one to the :djadmin:"
"`test` command via the :djadminopt:`--liveserver` option, for example:"
msgstr ""

# a84dab8f14c34aa389857502956fdaf9
#: ../../topics/testing.txt:1867
msgid ""
"Another way of changing the default server address is by setting the "
"`DJANGO_LIVE_TEST_SERVER_ADDRESS` environment variable somewhere in your "
"code (for example, in a :ref:`custom test runner<topics-testing-"
"test_runner>`):"
msgstr ""

# 3cd1f453d06340c6a315a8746ba09554
#: ../../topics/testing.txt:1876
msgid ""
"In the case where the tests are run by multiple processes in parallel (for "
"example, in the context of several simultaneous `continuous integration`_ "
"builds), the processes will compete for the same address, and therefore your "
"tests might randomly fail with an \"Address already in use\" error. To avoid "
"this problem, you can pass a comma-separated list of ports or ranges of "
"ports (at least as many as the number of potential parallel processes). For "
"example:"
msgstr ""

# 0f5604fe297046a9a75450c218baf7b9
#: ../../topics/testing.txt:1887
msgid ""
"Then, during test execution, each new live test server will try every "
"specified port until it finds one that is free and takes it."
msgstr ""

# 280b79af39cb4552914f9faeeaeb8bc7
#: ../../topics/testing.txt:1892
msgid ""
"To demonstrate how to use ``LiveServerTestCase``, let's write a simple "
"Selenium test. First of all, you need to install the `selenium package`_ "
"into your Python path:"
msgstr ""

# f947d7cbe05f4cdb86d1e9e0ef0638d4
#: ../../topics/testing.txt:1900
msgid ""
"Then, add a ``LiveServerTestCase``-based test to your app's tests module "
"(for example: ``myapp/tests.py``). The code for this test may look as "
"follows:"
msgstr ""

# 116404f87a09402ca9d0c93b43999add
#: ../../topics/testing.txt:1929
msgid "Finally, you may run the test as follows:"
msgstr ""

# 663de836bad64104a16ac4a5cd75fd28
#: ../../topics/testing.txt:1935
msgid ""
"This example will automatically open Firefox then go to the login page, "
"enter the credentials and press the \"Log in\" button. Selenium offers other "
"drivers in case you do not have Firefox installed or wish to use another "
"browser. The example above is just a tiny fraction of what the Selenium "
"client can do; check out the `full reference`_ for more details."
msgstr ""

# ee825e85975e438f8be9a48087db1483
#: ../../topics/testing.txt:1948
msgid ""
"``LiveServerTestCase`` makes use of the :doc:`staticfiles contrib app </"
"howto/static-files>` so you'll need to have your project configured "
"accordingly (in particular by setting :setting:`STATIC_URL`)."
msgstr ""

# bfa678a74ae640af9bd4b5a066acbda0
#: ../../topics/testing.txt:1954
msgid ""
"When using an in-memory SQLite database to run the tests, the same database "
"connection will be shared by two threads in parallel: the thread in which "
"the live server is run and the thread in which the test case is run. It's "
"important to prevent simultaneous database queries via this shared "
"connection by the two threads, as that may sometimes randomly cause the "
"tests to fail. So you need to ensure that the two threads don't access the "
"database at the same time. In particular, this means that in some cases (for "
"example, just after clicking a link or submitting a form), you might need to "
"check that a response is received by Selenium and that the next page is "
"loaded before proceeding with further test execution. Do this, for example, "
"by making Selenium wait until the `<body>` HTML tag is found in the response "
"(requires Selenium > 2.13):"
msgstr ""

# 574c35171d7847e2a4a849c4c761f2a4
#: ../../topics/testing.txt:1977
msgid ""
"The tricky thing here is that there's really no such thing as a \"page load,"
"\" especially in modern Web apps that generate HTML dynamically after the "
"server generates the initial document. So, simply checking for the presence "
"of `<body>` in the response might not necessarily be appropriate for all use "
"cases. Please refer to the `Selenium FAQ`_ and `Selenium documentation`_ for "
"more information."
msgstr ""

# 94b19bc5e74046289b78e8128e8c2587
#: ../../topics/testing.txt:1988
msgid "Using different testing frameworks"
msgstr ""

# defe1f4dd2f74f75a69dd0623e4f3cdd
#: ../../topics/testing.txt:1990
msgid ""
"Clearly, :mod:`doctest` and :mod:`unittest` are not the only Python testing "
"frameworks. While Django doesn't provide explicit support for alternative "
"frameworks, it does provide a way to invoke tests constructed for an "
"alternative framework as if they were normal Django tests."
msgstr ""

# dc8ffb2de2d24849a99b82c1067cd0a4
#: ../../topics/testing.txt:1995
msgid ""
"When you run ``./manage.py test``, Django looks at the :setting:"
"`TEST_RUNNER` setting to determine what to do. By default, :setting:"
"`TEST_RUNNER` points to ``'django.test.simple.DjangoTestSuiteRunner'``. This "
"class defines the default Django testing behavior. This behavior involves:"
msgstr ""

# c42020c61eac429bb0ee226532911216
#: ../../topics/testing.txt:2000
msgid "Performing global pre-test setup."
msgstr ""

# 2589446d67eb4ea7997e0e1eac3a9c5d
#: ../../topics/testing.txt:2002
msgid ""
"Looking for unit tests and doctests in the ``models.py`` and ``tests.py`` "
"files in each installed application."
msgstr ""

# 456190412bdd483285b792c6b700acfa
#: ../../topics/testing.txt:2005
msgid "Creating the test databases."
msgstr ""

# 4c627a45d7b24b67993df6480bcea474
#: ../../topics/testing.txt:2007
msgid ""
"Running ``syncdb`` to install models and initial data into the test "
"databases."
msgstr ""

# 398f87474dd5450eb453b5713fa1b289
#: ../../topics/testing.txt:2010
msgid "Running the unit tests and doctests that are found."
msgstr ""

# 4bb78a12b5154ab2abbecf32f0f31df0
#: ../../topics/testing.txt:2012
msgid "Destroying the test databases."
msgstr ""

# 3848a671c0f84bd9b985bcff7a26213e
#: ../../topics/testing.txt:2014
msgid "Performing global post-test teardown."
msgstr ""

# 1a2334ebf28447388bb5eb7f0be5937d
#: ../../topics/testing.txt:2016
msgid ""
"If you define your own test runner class and point :setting:`TEST_RUNNER` at "
"that class, Django will execute your test runner whenever you run ``./manage."
"py test``. In this way, it is possible to use any test framework that can be "
"executed from Python code, or to modify the Django test execution process to "
"satisfy whatever testing requirements you may have."
msgstr ""

# c61cdf3bada8429487f027d75f347f05
#: ../../topics/testing.txt:2025
msgid "Defining a test runner"
msgstr ""

# c3d3394387504774a3bc43bce8880dbf
#: ../../topics/testing.txt:2032
msgid ""
"A test runner is a class defining a ``run_tests()`` method. Django ships "
"with a ``DjangoTestSuiteRunner`` class that defines the default Django "
"testing behavior. This class defines the ``run_tests()`` entry point, plus a "
"selection of other methods that are used to by ``run_tests()`` to set up, "
"execute and tear down the test suite."
msgstr ""

# 947610f6fafd47baaec4f76221ce844a
#: ../../topics/testing.txt:2040
msgid ""
"``verbosity`` determines the amount of notification and debug information "
"that will be printed to the console; ``0`` is no output, ``1`` is normal "
"output, and ``2`` is verbose output."
msgstr ""

# 7b11246a50234a5b8de80f5ed86b2f72
#: ../../topics/testing.txt:2044
msgid ""
"If ``interactive`` is ``True``, the test suite has permission to ask the "
"user for instructions when the test suite is executed. An example of this "
"behavior would be asking for permission to delete an existing test database. "
"If ``interactive`` is ``False``, the test suite must be able to run without "
"any manual intervention."
msgstr ""

# d9e487e2e1144ab990632a775db6b37d
#: ../../topics/testing.txt:2050
msgid ""
"If ``failfast`` is ``True``, the test suite will stop running after the "
"first test failure is detected."
msgstr ""

# a4a3a8d631a34e7f9ce1dac6260a8359
#: ../../topics/testing.txt:2053
msgid ""
"Django will, from time to time, extend the capabilities of the test runner "
"by adding new arguments. The ``**kwargs`` declaration allows for this "
"expansion. If you subclass ``DjangoTestSuiteRunner`` or write your own test "
"runner, ensure accept and handle the ``**kwargs`` parameter."
msgstr ""

# 68d0e98573ba48778112c5987bb2c542
#: ../../topics/testing.txt:2061
msgid ""
"Your test runner may also define additional command-line options. If you add "
"an ``option_list`` attribute to a subclassed test runner, those options will "
"be added to the list of command-line options that the :djadmin:`test` "
"command can use."
msgstr ""

# a833f8998b4848278e034b5b15d1f09b
#: ../../topics/testing.txt:2067
msgid "Attributes"
msgstr ""

# cf91479ed4704da9b04b2e8f0266e5e0
#: ../../topics/testing.txt:2073
msgid ""
"This is the tuple of ``optparse`` options which will be fed into the "
"management command's ``OptionParser`` for parsing arguments. See the "
"documentation for Python's ``optparse`` module for more details."
msgstr ""

# 491eeedd796645c488acffa16844932a
#: ../../topics/testing.txt:2078
msgid "Methods"
msgstr ""

# d5ab9626978f4e8595a9f972fbb77120
#: ../../topics/testing.txt:2082
msgid "Run the test suite."
msgstr ""

# 5eae9d8a41c146fb803e86cb9459c931
# 004aca061f7f48f08dcc9084c7014136
#: ../../topics/testing.txt:2084 ../../topics/testing.txt:2109
msgid ""
"``test_labels`` is a list of strings describing the tests to be run. A test "
"label can take one of three forms:"
msgstr ""

# 156f4d2a5d2e4f38ae4771ae37d75cdc
# 3926125772db4cef96678fc56d9e3dc1
#: ../../topics/testing.txt:2087 ../../topics/testing.txt:2112
msgid ""
"``app.TestCase.test_method`` -- Run a single test method in a test case."
msgstr ""

# 2e522dcfbd3c4711bf27c612d4d3b860
# 5c0541c83d0e4f3c98f078c4fadbabdd
#: ../../topics/testing.txt:2089 ../../topics/testing.txt:2114
msgid "``app.TestCase`` -- Run all the test methods in a test case."
msgstr ""

# a2c8fd09aac342dbb3175092eeb55999
# 9eb3a98eb3c541d7a02caf9d8fd7aeac
#: ../../topics/testing.txt:2090 ../../topics/testing.txt:2115
msgid "``app`` -- Search for and run all tests in the named application."
msgstr ""

# 32caddf098934fee95fc1ddd2661e566
# 09ee007b17a44de49e6c49837a601f88
#: ../../topics/testing.txt:2092 ../../topics/testing.txt:2117
msgid ""
"If ``test_labels`` has a value of ``None``, the test runner should run "
"search for tests in all the applications in :setting:`INSTALLED_APPS`."
msgstr ""

# b484fb7831d840ea9c0fa82f49ac7981
# ed840ef3af454188a33852c5952c6caa
#: ../../topics/testing.txt:2095 ../../topics/testing.txt:2120
msgid ""
"``extra_tests`` is a list of extra ``TestCase`` instances to add to the "
"suite that is executed by the test runner. These extra tests are run in "
"addition to those discovered in the modules listed in ``test_labels``."
msgstr ""

# 6ac7c3ddcea14fe9ac9b89232cba755a
#: ../../topics/testing.txt:2099
msgid "This method should return the number of tests that failed."
msgstr ""

# a98350dfc00043c1a85f3115dad9dacc
#: ../../topics/testing.txt:2103
msgid "Sets up the test environment ready for testing."
msgstr ""

# 859a81864f474c998facb2f42047a8ac
#: ../../topics/testing.txt:2107
msgid "Constructs a test suite that matches the test labels provided."
msgstr ""

# 5a9a91747561417ba26dc35045554b9c
#: ../../topics/testing.txt:2124
msgid "Returns a ``TestSuite`` instance ready to be run."
msgstr ""

# cfa13a4b56e5489da08cdf383d9f3766
#: ../../topics/testing.txt:2128
msgid "Creates the test databases."
msgstr ""

# c0490af1066745ccaabf087d063ad2d8
#: ../../topics/testing.txt:2130
msgid ""
"Returns a data structure that provides enough detail to undo the changes "
"that have been made. This data will be provided to the ``teardown_databases()"
"`` function at the conclusion of testing."
msgstr ""

# b0350851588d40149b2738a0bbe4c977
#: ../../topics/testing.txt:2136
msgid "Runs the test suite."
msgstr ""

# 177d79a00d56486e96c063684920ab59
#: ../../topics/testing.txt:2138
msgid "Returns the result produced by the running the test suite."
msgstr ""

# e6a55f93e64e4b97bb4adba914054604
#: ../../topics/testing.txt:2142
msgid "Destroys the test databases, restoring pre-test conditions."
msgstr ""

# bde14c82e5f74af0962bbb9f8f9433bf
#: ../../topics/testing.txt:2144
msgid ""
"``old_config`` is a data structure defining the changes in the database "
"configuration that need to be reversed. It is the return value of the "
"``setup_databases()`` method."
msgstr ""

# 7c8f9a428c054645a34678421545bcad
#: ../../topics/testing.txt:2150
msgid "Restores the pre-test environment."
msgstr ""

# 2364244e8cac48f49ce396182931d581
#: ../../topics/testing.txt:2154
msgid ""
"Computes and returns a return code based on a test suite, and the result "
"from that test suite."
msgstr ""

# 39176b318e51431495bdbe37e9b0e70c
#: ../../topics/testing.txt:2159
msgid "Testing utilities"
msgstr ""

# 6be5934356784c04b5289d0e86e4fd04
#: ../../topics/testing.txt:2164
msgid ""
"To assist in the creation of your own test runner, Django provides a number "
"of utility methods in the ``django.test.utils`` module."
msgstr ""

# dad05220e83f4afdad5e71845ccd75cd
#: ../../topics/testing.txt:2169
msgid ""
"Performs any global pre-test setup, such as the installing the "
"instrumentation of the template rendering system and setting up the dummy "
"``SMTPConnection``."
msgstr ""

# 59a76066fbee49bfa7ba6d75c99ac139
#: ../../topics/testing.txt:2175
msgid ""
"Performs any global post-test teardown, such as removing the black magic "
"hooks into the template system and restoring normal email services."
msgstr ""

# 5b462ce5c21b4589bccfe8e7237396eb
#: ../../topics/testing.txt:2181
msgid ""
"The creation module of the database backend (``connection.creation``) also "
"provides some utilities that can be useful during testing."
msgstr ""

# 81db5d4d9d8d4e16b580acfd5e5a4f6a
#: ../../topics/testing.txt:2186
msgid "Creates a new test database and runs ``syncdb`` against it."
msgstr ""

# 5b0562361586499ea35b4eafbb73f7d8
#: ../../topics/testing.txt:2188
msgid "``verbosity`` has the same behavior as in ``run_tests()``."
msgstr ""

# 93f9d043919440339e06ed3308d12489
#: ../../topics/testing.txt:2190
msgid ""
"``autoclobber`` describes the behavior that will occur if a database with "
"the same name as the test database is discovered:"
msgstr ""

# 9cf841fa0b634969aeb5799bfbbc79f7
#: ../../topics/testing.txt:2193
msgid ""
"If ``autoclobber`` is ``False``, the user will be asked to approve "
"destroying the existing database. ``sys.exit`` is called if the user does "
"not approve."
msgstr ""

# 0ed74861bf8e4a34b17c10e0d861ee59
#: ../../topics/testing.txt:2197
msgid ""
"If autoclobber is ``True``, the database will be destroyed without "
"consulting the user."
msgstr ""

# 10926101c6ec404794ffbc1616a09664
#: ../../topics/testing.txt:2200
msgid "Returns the name of the test database that it created."
msgstr ""

# a585219a6c694c13a5e14f3a1a7c1cf1
#: ../../topics/testing.txt:2202
msgid ""
"``create_test_db()`` has the side effect of modifying the value of :setting:"
"`NAME` in :setting:`DATABASES` to match the name of the test database."
msgstr ""

# ae9cf88ea3b04abab90006152d6d3791
#: ../../topics/testing.txt:2208
msgid ""
"Destroys the database whose name is the value of :setting:`NAME` in :setting:"
"`DATABASES`, and sets :setting:`NAME` to the value of ``old_database_name``."
msgstr ""

# 02a0bafd811b4932b85e2843ced31477
#: ../../topics/testing.txt:2212
msgid ""
"The ``verbosity`` argument has the same behavior as for :class:`~django.test."
"simple.DjangoTestSuiteRunner`."
msgstr ""
