# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2012.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-02-29 18:30\n"
"PO-Revision-Date: 2012-02-15 15:13\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# f2ec389c092c4aeb9911e01fe093419a
#: ../../topics/templates.txt:3
msgid "The Django template language"
msgstr ""

# 338bc381cbe84a36a6237088e1b1a4af
#: ../../topics/templates.txt:7
msgid ""
"This document explains the language syntax of the Django template system. If "
"you're looking for a more technical perspective on how it works and how to "
"extend it, see :doc:`/ref/templates/api`."
msgstr ""

# 54f37eb253234e3ea62bddaa6549c3e4
#: ../../topics/templates.txt:11
msgid ""
"Django's template language is designed to strike a balance between power and "
"ease. It's designed to feel comfortable to those used to working with HTML. "
"If you have any exposure to other text-based template languages, such as "
"Smarty_ or CheetahTemplate_, you should feel right at home with Django's "
"templates."
msgstr ""

# 7dd5c2828d124882b34d64fc1151c90c
#: ../../topics/templates.txt:18
msgid ""
"If you have a background in programming, or if you're used to languages like "
"PHP which mix programming code directly into HTML, you'll want to bear in "
"mind that the Django template system is not simply Python embedded into "
"HTML. This is by design: the template system is meant to express "
"presentation, not program logic."
msgstr ""

# ab34b638ed6d4f3a876bcccddd82b4f7
#: ../../topics/templates.txt:24
msgid ""
"The Django template system provides tags which function similarly to some "
"programming constructs -- an :ttag:`if` tag for boolean tests, a :ttag:`for` "
"tag for looping, etc. -- but these are not simply executed as the "
"corresponding Python code, and the template system will not execute "
"arbitrary Python expressions. Only the tags, filters and syntax listed below "
"are supported by default (although you can add :doc:`your own extensions </"
"howto/custom-template-tags>` to the template language as needed)."
msgstr ""

# 95a64c65987a4095b4e869c612e78ccb
#: ../../topics/templates.txt:37
msgid "Templates"
msgstr ""

# d7e87bf68be94e87a5da384ee28a63ef
#: ../../topics/templates.txt:41
msgid ""
"A template is simply a text file. It can generate any text-based format "
"(HTML, XML, CSV, etc.)."
msgstr ""

# 0efad2a595dc40e0bc4eb4582b3e2fa8
#: ../../topics/templates.txt:44
msgid ""
"A template contains **variables**, which get replaced with values when the "
"template is evaluated, and **tags**, which control the logic of the template."
msgstr ""

# 65336cb59f2e4dfabf855ea8e0c88fd2
#: ../../topics/templates.txt:47
msgid ""
"Below is a minimal template that illustrates a few basics. Each element will "
"be explained later in this document.::"
msgstr ""

# 8f01df6c6a6a47ab943ca7841df22c8c
#: ../../topics/templates.txt:69
msgid ""
"Why use a text-based template instead of an XML-based one (like Zope's TAL)? "
"We wanted Django's template language to be usable for more than just XML/"
"HTML templates. At World Online, we use it for emails, JavaScript and CSV. "
"You can use the template language for any text-based format."
msgstr ""

# 27d8a353303c4a39a9a6f19060f348c5
#: ../../topics/templates.txt:75
msgid "Oh, and one more thing: Making humans edit XML is sadistic!"
msgstr ""

# 7e41b7d93cf348bfaae0488724faffc1
#: ../../topics/templates.txt:78
msgid "Variables"
msgstr ""

# dd6987b4df5942dfa94a4f9fc7b6af4b
#: ../../topics/templates.txt:80
msgid ""
"Variables look like this: ``{{ variable }}``. When the template engine "
"encounters a variable, it evaluates that variable and replaces it with the "
"result. Variable names consist of any combination of alphanumeric characters "
"and the underscore (``\"_\"``). The dot (``\".\"``) also appears in variable "
"sections, although that has a special meaning, as indicated below. "
"Importantly, *you cannot have spaces or punctuation characters in variable "
"names.*"
msgstr ""

# 94fbd9e4c7cb404290161934bb965100
#: ../../topics/templates.txt:88
msgid "Use a dot (``.``) to access attributes of a variable."
msgstr ""

# cf89805da4474fdc80890ff5260e774b
#: ../../topics/templates.txt:92
msgid ""
"Technically, when the template system encounters a dot, it tries the "
"following lookups, in this order:"
msgstr ""

# a2197c683a4d49a6a53cd93ae13199d5
#: ../../topics/templates.txt:95
msgid "Dictionary lookup"
msgstr ""

# dd9a54e445104def8b4cbb8d95e8cc44
#: ../../topics/templates.txt:96
msgid "Attribute lookup"
msgstr ""

# 359db41b2272480ab6238b5f9dc045b6
#: ../../topics/templates.txt:97
msgid "Method call"
msgstr ""

# 84e4e3707a72476aa76b24717c4a8146
#: ../../topics/templates.txt:98
msgid "List-index lookup"
msgstr ""

# 7a115c2e50194cc69b0f1d70a1346a27
#: ../../topics/templates.txt:100
msgid ""
"In the above example, ``{{ section.title }}`` will be replaced with the "
"``title`` attribute of the ``section`` object."
msgstr ""

# ba0cdd5e0b144067a45e90f29f0ec624
#: ../../topics/templates.txt:103
msgid ""
"If you use a variable that doesn't exist, the template system will insert "
"the value of the :setting:`TEMPLATE_STRING_IF_INVALID` setting, which is set "
"to ``''`` (the empty string) by default."
msgstr ""

# 56fb6d3ca10743198e2d5676744b2562
#: ../../topics/templates.txt:108
msgid "Filters"
msgstr ""

# 0fe29e1597bc4576bf8d9d5cb48dcbe1
#: ../../topics/templates.txt:110
msgid "You can modify variables for display by using **filters**."
msgstr ""

# b0209fc4074d46a596c794234e74ee7d
#: ../../topics/templates.txt:112
msgid ""
"Filters look like this: ``{{ name|lower }}``. This displays the value of the "
"``{{ name }}`` variable after being filtered through the :tfilter:`lower` "
"filter, which converts text to lowercase. Use a pipe (``|``) to apply a "
"filter."
msgstr ""

# d5c9d37c690d4a2a837b40f3dd1ed88d
#: ../../topics/templates.txt:116
msgid ""
"Filters can be \"chained.\" The output of one filter is applied to the next. "
"``{{ text|escape|linebreaks }}`` is a common idiom for escaping text "
"contents, then converting line breaks to ``<p>`` tags."
msgstr ""

# 83cf676da9224ff5801ddbfbdad40bba
#: ../../topics/templates.txt:120
msgid ""
"Some filters take arguments. A filter argument looks like this: ``{{ bio|"
"truncatewords:30 }}``. This will display the first 30 words of the ``bio`` "
"variable."
msgstr ""

# a66aecb77ae84b7c8b0f69a6d19527af
#: ../../topics/templates.txt:124
msgid ""
"Filter arguments that contain spaces must be quoted; for example, to join a "
"list with commas and spaced you'd use ``{{ list|join:\", \" }}``."
msgstr ""

# 10da6836ea97410e90a71c392bb0c885
#: ../../topics/templates.txt:127
msgid ""
"Django provides about thirty built-in template filters. You can read all "
"about them in the :ref:`built-in filter reference <ref-templates-builtins-"
"filters>`. To give you a taste of what's available, here are some of the "
"more commonly used template filters:"
msgstr ""

# b70ade8790344ea1b641352e32d2d31c
#: ../../topics/templates.txt:133
msgid ""
"If a variable is false or empty, use given default. Otherwise, use the value "
"of the variable"
msgstr ""

# 6bb84b800595413e9ab43ee3a5328351
#: ../../topics/templates.txt:136
msgid "For example::"
msgstr ""

# 7480af08eb0444e5bc78895573259d44
#: ../../topics/templates.txt:140
msgid ""
"If ``value`` isn't provided or is empty, the above will display \"``nothing``"
"\"."
msgstr ""

# 90ce9dab4b9e4d3fa7e650fdb5144c8d
#: ../../topics/templates.txt:144
msgid ""
"Returns the length of the value. This works for both strings and lists; for "
"example::"
msgstr ""

# 67bcf20d7db3486dab8c29ed1fc8d667
#: ../../topics/templates.txt:149
msgid "If ``value`` is ``['a', 'b', 'c', 'd']``, the output will be ``4``."
msgstr ""

# 5d7a0dbe7e3b43e78d4baa609d7f64c8
#: ../../topics/templates.txt:152
msgid "Strips all [X]HTML tags. For example::"
msgstr ""

# 07e20e060066445dae60c46478ee9859
#: ../../topics/templates.txt:156
msgid ""
"If ``value`` is ``\"<b>Joel</b> <button>is</button> a <span>slug</span>\"``, "
"the output will be ``\"Joel is a slug\"``."
msgstr ""

# 192621bec1a44a1fafeb028a92712923
#: ../../topics/templates.txt:159
msgid ""
"Again, these are just a few examples; see the :ref:`built-in filter "
"reference <ref-templates-builtins-filters>` for the complete list."
msgstr ""

# 0b5e9162b74d446da8c488714bf54f63
#: ../../topics/templates.txt:162
msgid ""
"You can also create your own custom template filters; see :doc:`/howto/"
"custom-template-tags`."
msgstr ""

# d2112403e8ee43ecbac7ba7ce9f5d19d
# 6a62d74a8a114b09aa28afc7e17e0bd5
#: ../../topics/templates.txt:167 ../../topics/templates.txt:229
msgid ""
"Django's admin interface can include a complete reference of all template "
"tags and filters available for a given site. See :doc:`/ref/contrib/admin/"
"admindocs`."
msgstr ""

# e2fbc31c77dc405cb13535ecd88ee4ba
#: ../../topics/templates.txt:172
msgid "Tags"
msgstr ""

# ade3c60483524723a2d406d81467d1be
#: ../../topics/templates.txt:174
msgid ""
"Tags look like this: ``{% tag %}``. Tags are more complex than variables: "
"Some create text in the output, some control flow by performing loops or "
"logic, and some load external information into the template to be used by "
"later variables."
msgstr ""

# 000111c65907405f89bce087e49326a5
#: ../../topics/templates.txt:178
msgid ""
"Some tags require beginning and ending tags (i.e. ``{% tag %} ... tag "
"contents ... {% endtag %}``)."
msgstr ""

# 049efc7c33f8445aa9b86d0927bd4253
#: ../../topics/templates.txt:181
msgid ""
"Django ships with about two dozen built-in template tags. You can read all "
"about them in the :ref:`built-in tag reference <ref-templates-builtins-"
"tags>`. To give you a taste of what's available, here are some of the more "
"commonly used tags:"
msgstr ""

# f02470727ab144538ddaa297e2113369
#: ../../topics/templates.txt:187
msgid ""
"Loop over each item in an array.  For example, to display a list of athletes "
"provided in ``athlete_list``::"
msgstr ""

# 44157ac6b0894d2aa1b7ae97cd938ab3
#: ../../topics/templates.txt:197
msgid ""
"Evaluates a variable, and if that variable is \"true\" the contents of the "
"block are displayed::"
msgstr ""

# b5b5bceafb8e488885d80742d6e77cb1
#: ../../topics/templates.txt:206
msgid ""
"In the above, if ``athlete_list`` is not empty, the number of athletes will "
"be displayed by the ``{{ athlete_list|length }}`` variable."
msgstr ""

# 63efcc2e1e2d4592bfc2ef4de29562b8
#: ../../topics/templates.txt:209
msgid "You can also use filters and various operators in the :ttag:`if` tag::"
msgstr ""

# 819c94a354a040adb26deceb65dd0749
#: ../../topics/templates.txt:218
msgid ""
"Set up `template inheritance`_ (see below), a powerful way of cutting down "
"on \"boilerplate\" in templates."
msgstr ""

# b713d4c8d03f41e8862285a3ca24215d
#: ../../topics/templates.txt:221
msgid ""
"Again, the above is only a selection of the whole list; see the :ref:`built-"
"in tag reference <ref-templates-builtins-tags>` for the complete list."
msgstr ""

# 9b5f027343cb4e43a8d4ecc508dac416
#: ../../topics/templates.txt:224
msgid ""
"You can also create your own custom template tags; see :doc:`/howto/custom-"
"template-tags`."
msgstr ""

# 2342c1ccf2604587a62e089602b2fadf
#: ../../topics/templates.txt:234
msgid "Comments"
msgstr ""

# f7cca4597a424b43af51c36a9804fef0
#: ../../topics/templates.txt:236
msgid ""
"To comment-out part of a line in a template, use the comment syntax: ``{# #}"
"``."
msgstr ""

# dbc1f319d437477087f300d2be853579
#: ../../topics/templates.txt:238
msgid "For example, this template would render as ``'hello'``::"
msgstr ""

# 070199fbd8ea457da6be2d0a5d67a9bf
#: ../../topics/templates.txt:242
msgid "A comment can contain any template code, invalid or not. For example::"
msgstr ""

# abcff62b7a704a09a532b9c18aee6853
#: ../../topics/templates.txt:246
msgid ""
"This syntax can only be used for single-line comments (no newlines are "
"permitted between the ``{#`` and ``#}`` delimiters). If you need to comment "
"out a multiline portion of the template, see the :ttag:`comment` tag."
msgstr ""

# 6ab4da952ddc458daa72ceee5385affb
#: ../../topics/templates.txt:253
msgid "Template inheritance"
msgstr ""

# 89ae1e5cdd7346daa96dbd88e81f3b4f
#: ../../topics/templates.txt:255
msgid ""
"The most powerful -- and thus the most complex -- part of Django's template "
"engine is template inheritance. Template inheritance allows you to build a "
"base \"skeleton\" template that contains all the common elements of your "
"site and defines **blocks** that child templates can override."
msgstr ""

# c2f1e9ea43bc4635b8d334bcad53fcc4
#: ../../topics/templates.txt:260
msgid ""
"It's easiest to understand template inheritance by starting with an example::"
msgstr ""

# f144259fe2e3434087e0cbb6ef6a8688
#: ../../topics/templates.txt:285
msgid ""
"This template, which we'll call ``base.html``, defines a simple HTML "
"skeleton document that you might use for a simple two-column page. It's the "
"job of \"child\" templates to fill the empty blocks with content."
msgstr ""

# 8684aa413a2745a494c8e083f9806e0f
#: ../../topics/templates.txt:289
msgid ""
"In this example, the :ttag:`block` tag defines three blocks that child "
"templates can fill in. All the :ttag:`block` tag does is to tell the "
"template engine that a child template may override those portions of the "
"template."
msgstr ""

# 03489c2c588c4eff917c0e36bd13aa9e
#: ../../topics/templates.txt:293
msgid "A child template might look like this::"
msgstr ""

# 7d4af052a16d4e149fc6b9b27ff9f3d5
#: ../../topics/templates.txt:306
msgid ""
"The :ttag:`extends` tag is the key here. It tells the template engine that "
"this template \"extends\" another template. When the template system "
"evaluates this template, first it locates the parent -- in this case, \"base."
"html\"."
msgstr ""

# 7ea85e9dff2048dcabcef386187c65ab
#: ../../topics/templates.txt:310
msgid ""
"At that point, the template engine will notice the three :ttag:`block` tags "
"in ``base.html`` and replace those blocks with the contents of the child "
"template. Depending on the value of ``blog_entries``, the output might look "
"like::"
msgstr ""

# a3741c0605b64fb08d6f4da55ab71501
#: ../../topics/templates.txt:340
msgid ""
"Note that since the child template didn't define the ``sidebar`` block, the "
"value from the parent template is used instead. Content within a ``{% block "
"%}`` tag in a parent template is always used as a fallback."
msgstr ""

# 6cd2b627ce5f441cb716d4be3604a489
#: ../../topics/templates.txt:344
msgid ""
"You can use as many levels of inheritance as needed. One common way of using "
"inheritance is the following three-level approach:"
msgstr ""

# 5ad81e4a174349fbbdd3eff0bc03c3b6
#: ../../topics/templates.txt:347
msgid ""
"Create a ``base.html`` template that holds the main look-and-feel of your "
"site."
msgstr ""

# c98d15d3d34540b2a9301e705ff5c0f0
#: ../../topics/templates.txt:349
msgid ""
"Create a ``base_SECTIONNAME.html`` template for each \"section\" of your "
"site. For example, ``base_news.html``, ``base_sports.html``. These templates "
"all extend ``base.html`` and include section-specific styles/design."
msgstr ""

# d9124e875c514688bdf8635b2e759aab
#: ../../topics/templates.txt:353
msgid ""
"Create individual templates for each type of page, such as a news article or "
"blog entry. These templates extend the appropriate section template."
msgstr ""

# 74e11a742c0b4b7696acb714f5d5940b
#: ../../topics/templates.txt:357
msgid ""
"This approach maximizes code reuse and makes it easy to add items to shared "
"content areas, such as section-wide navigation."
msgstr ""

# ff3ac870f9d54ae8b06464c6fa7560ea
#: ../../topics/templates.txt:360
msgid "Here are some tips for working with inheritance:"
msgstr ""

# 65d489883ec546c786a4379643e41e4c
#: ../../topics/templates.txt:362
msgid ""
"If you use :ttag:`{% extends %}<extends>` in a template, it must be the "
"first template tag in that template. Template inheritance won't work, "
"otherwise."
msgstr ""

# 3bb1d212e3b645d7a5bc718ac79ed746
#: ../../topics/templates.txt:365
msgid ""
"More :ttag:`{% block %}<block>` tags in your base templates are better. "
"Remember, child templates don't have to define all parent blocks, so you can "
"fill in reasonable defaults in a number of blocks, then only define the ones "
"you need later. It's better to have more hooks than fewer hooks."
msgstr ""

# 20e5ce4f9cd04acd9bb8a39a6471473c
#: ../../topics/templates.txt:370
msgid ""
"If you find yourself duplicating content in a number of templates, it "
"probably means you should move that content to a ``{% block %}`` in a parent "
"template."
msgstr ""

# 464196833fc74e5eb819a0d618398397
#: ../../topics/templates.txt:374
msgid ""
"If you need to get the content of the block from the parent template, the ``"
"{{ block.super }}`` variable will do the trick. This is useful if you want "
"to add to the contents of a parent block instead of completely overriding "
"it. Data inserted using ``{{ block.super }}`` will not be automatically "
"escaped (see the `next section`_), since it was already escaped, if "
"necessary, in the parent template."
msgstr ""

# 825c11434b42412d8992b2462ea6f9b8
#: ../../topics/templates.txt:381
msgid ""
"For extra readability, you can optionally give a *name* to your ``{% "
"endblock %}`` tag. For example::"
msgstr ""

# 91669ac2e8ba434a9001ccef3ddd0e13
#: ../../topics/templates.txt:388
msgid ""
"In larger templates, this technique helps you see which ``{% block %}`` tags "
"are being closed."
msgstr ""

# 05d84092ba2d442a9b5cb3fa076c46e5
#: ../../topics/templates.txt:391
msgid ""
"Finally, note that you can't define multiple :ttag:`block` tags with the "
"same name in the same template. This limitation exists because a block tag "
"works in \"both\" directions. That is, a block tag doesn't just provide a "
"hole to fill -- it also defines the content that fills the hole in the "
"*parent*. If there were two similarly-named :ttag:`block` tags in a "
"template, that template's parent wouldn't know which one of the blocks' "
"content to use."
msgstr ""

# af289496010943e9a9569dcd732824d3
#: ../../topics/templates.txt:402
msgid "Automatic HTML escaping"
msgstr ""

# 61e37993781e46abb74e831f1078a8d0
#: ../../topics/templates.txt:404
msgid ""
"When generating HTML from templates, there's always a risk that a variable "
"will include characters that affect the resulting HTML. For example, "
"consider this template fragment::"
msgstr ""

# 7779f35b760249f8bcdd44857ac3a973
#: ../../topics/templates.txt:410
msgid ""
"At first, this seems like a harmless way to display a user's name, but "
"consider what would happen if the user entered his name as this::"
msgstr ""

# cb4b76ad8fbf4fd6905012c84ba26823
#: ../../topics/templates.txt:415
msgid "With this name value, the template would be rendered as::"
msgstr ""

# ca040842b8d943a2b2b4d9a7d136085e
#: ../../topics/templates.txt:419
msgid "...which means the browser would pop-up a JavaScript alert box!"
msgstr ""

# fda644aefd5f4c4290f75cbea670ade4
#: ../../topics/templates.txt:421
msgid "Similarly, what if the name contained a ``'<'`` symbol, like this?"
msgstr ""

# 73a9fd3bacdb4f30bf4204270248062a
#: ../../topics/templates.txt:427
msgid "That would result in a rendered template like this::"
msgstr ""

# bb6114e1f8a84f0886848c0f3117320c
#: ../../topics/templates.txt:431
msgid ""
"...which, in turn, would result in the remainder of the Web page being "
"bolded!"
msgstr ""

# f3464b2288854e18a8b0f3885428bd83
#: ../../topics/templates.txt:433
msgid ""
"Clearly, user-submitted data shouldn't be trusted blindly and inserted "
"directly into your Web pages, because a malicious user could use this kind "
"of hole to do potentially bad things. This type of security exploit is "
"called a `Cross Site Scripting`_ (XSS) attack."
msgstr ""

# e2489e5fef944e68a1b7868b233139ab
#: ../../topics/templates.txt:438
msgid "To avoid this problem, you have two options:"
msgstr ""

# 7c268055785344208ab6b0047d07eff0
#: ../../topics/templates.txt:440
msgid ""
"One, you can make sure to run each untrusted variable through the :tfilter:"
"`escape` filter (documented below), which converts potentially harmful HTML "
"characters to unharmful ones. This was the default solution in Django for "
"its first few years, but the problem is that it puts the onus on *you*, the "
"developer / template author, to ensure you're escaping everything. It's easy "
"to forget to escape data."
msgstr ""

# 9a6f99a3008e4c448d9362048e1ddf27
#: ../../topics/templates.txt:447
msgid ""
"Two, you can take advantage of Django's automatic HTML escaping. The "
"remainder of this section describes how auto-escaping works."
msgstr ""

# a2c6625e0d9c4eaeaf0e0ad6ba1c4044
#: ../../topics/templates.txt:450
msgid ""
"By default in Django, every template automatically escapes the output of "
"every variable tag. Specifically, these five characters are escaped:"
msgstr ""

# ef39136807bb41f68f1bb31100c3f4f6
#: ../../topics/templates.txt:454
msgid "``<`` is converted to ``&lt;``"
msgstr ""

# f6bf91e855a540478a714b55afce1026
#: ../../topics/templates.txt:455
msgid "``>`` is converted to ``&gt;``"
msgstr ""

# 16e820ce340943a8a9c54ee47a851c29
#: ../../topics/templates.txt:456
msgid "``'`` (single quote) is converted to ``&#39;``"
msgstr ""

# ca3b7e4f5ce4484b8d8615f01049c57b
#: ../../topics/templates.txt:457
msgid "``\"`` (double quote) is converted to ``&quot;``"
msgstr ""

# 1429057ff3a345b8a9d806ccfb2969c3
#: ../../topics/templates.txt:458
msgid "``&`` is converted to ``&amp;``"
msgstr ""

# 4ce97e2e0eef404eb910b0526f3cadfa
#: ../../topics/templates.txt:460
msgid ""
"Again, we stress that this behavior is on by default. If you're using "
"Django's template system, you're protected."
msgstr ""

# dfd5ad7103ec4051aea2c8b45447a3b7
#: ../../topics/templates.txt:466
msgid "How to turn it off"
msgstr ""

# 717c058f5dec40acbc5bc30ea75cd31c
#: ../../topics/templates.txt:468
msgid ""
"If you don't want data to be auto-escaped, on a per-site, per-template level "
"or per-variable level, you can turn it off in several ways."
msgstr ""

# 3ea07dba136443238fc2df6cad2902fe
#: ../../topics/templates.txt:471
msgid ""
"Why would you want to turn it off? Because sometimes, template variables "
"contain data that you *intend* to be rendered as raw HTML, in which case you "
"don't want their contents to be escaped. For example, you might store a blob "
"of HTML in your database and want to embed that directly into your template. "
"Or, you might be using Django's template system to produce text that is "
"*not* HTML -- like an email message, for instance."
msgstr ""

# c040440af6354e7f89d2f715b4ee7946
#: ../../topics/templates.txt:479
msgid "For individual variables"
msgstr ""

# 30ef4d501ec34d25845715a731376e9a
#: ../../topics/templates.txt:481
msgid ""
"To disable auto-escaping for an individual variable, use the :tfilter:`safe` "
"filter::"
msgstr ""

# 1d5bfe3a8c1b4e49915f1d9ffbbb13e7
#: ../../topics/templates.txt:487
msgid ""
"Think of *safe* as shorthand for *safe from further escaping* or *can be "
"safely interpreted as HTML*. In this example, if ``data`` contains "
"``'<b>'``, the output will be::"
msgstr ""

# 5d76a9fb7da64e6f873f4c7288aa6004
#: ../../topics/templates.txt:495
msgid "For template blocks"
msgstr ""

# ebfcbddf66d347f2bad1632847caf084
#: ../../topics/templates.txt:497
msgid ""
"To control auto-escaping for a template, wrap the template (or just a "
"particular section of the template) in the :ttag:`autoescape` tag, like so::"
msgstr ""

# f11304f6313745bfab986c1560b9926a
#: ../../topics/templates.txt:504
msgid ""
"The :ttag:`autoescape` tag takes either ``on`` or ``off`` as its argument. "
"At times, you might want to force auto-escaping when it would otherwise be "
"disabled. Here is an example template::"
msgstr ""

# 0c31d7de36ec45b68ff617b47a501653
#: ../../topics/templates.txt:519
msgid ""
"The auto-escaping tag passes its effect onto templates that extend the "
"current one as well as templates included via the :ttag:`include` tag, just "
"like all block tags. For example::"
msgstr ""

# 9816b544495a4ae9bfe8434296f27edb
#: ../../topics/templates.txt:538
msgid ""
"Because auto-escaping is turned off in the base template, it will also be "
"turned off in the child template, resulting in the following rendered HTML "
"when the ``greeting`` variable contains the string ``<b>Hello!</b>``::"
msgstr ""

# 74505fbc46e243be9f6dc16fc8c9f47d
#: ../../topics/templates.txt:546
msgid "Notes"
msgstr ""

# 78c9fcf6ca4c44a8965945a06e480e83
#: ../../topics/templates.txt:548
msgid ""
"Generally, template authors don't need to worry about auto-escaping very "
"much. Developers on the Python side (people writing views and custom "
"filters) need to think about the cases in which data shouldn't be escaped, "
"and mark data appropriately, so things Just Work in the template."
msgstr ""

# 3adf79c9439045a2bf357116d94536d5
#: ../../topics/templates.txt:553
msgid ""
"If you're creating a template that might be used in situations where you're "
"not sure whether auto-escaping is enabled, then add an :tfilter:`escape` "
"filter to any variable that needs escaping. When auto-escaping is on, "
"there's no danger of the :tfilter:`escape` filter *double-escaping* data -- "
"the :tfilter:`escape` filter does not affect auto-escaped variables."
msgstr ""

# 80abbf16c49b4e76a9b8707eeaacd4a4
#: ../../topics/templates.txt:562
msgid "String literals and automatic escaping"
msgstr ""

# e16e132ffa21439a83c41ee682b1fadc
#: ../../topics/templates.txt:564
msgid "As we mentioned earlier, filter arguments can be strings::"
msgstr ""

# aa9051f5a5f74618b288a3dbf7b4528c
#: ../../topics/templates.txt:568
msgid ""
"All string literals are inserted **without** any automatic escaping into the "
"template -- they act as if they were all passed through the :tfilter:`safe` "
"filter. The reasoning behind this is that the template author is in control "
"of what goes into the string literal, so they can make sure the text is "
"correctly escaped when the template is written."
msgstr ""

# a70dfd2f9e424c5fa70c5eddc920ad4c
#: ../../topics/templates.txt:574
msgid "This means you would write ::"
msgstr ""

# 7654fae00eb84ffe87cb70680ebf331b
#: ../../topics/templates.txt:578
msgid "...rather than ::"
msgstr ""

# d980614a2ed5486cb04a4d5b9ee62e04
#: ../../topics/templates.txt:582
msgid ""
"This doesn't affect what happens to data coming from the variable itself. "
"The variable's contents are still automatically escaped, if necessary, "
"because they're beyond the control of the template author."
msgstr ""

# 2c992443237d42628791b5ea4cdef854
#: ../../topics/templates.txt:589
msgid "Accessing method calls"
msgstr ""

# 026c75c58f34405ba5e59f9fddff44a8
#: ../../topics/templates.txt:591
msgid ""
"Most method calls attached to objects are also available from within "
"templates. This means that templates have access to much more than just "
"class attributes (like field names) and variables passed in from views. For "
"example, the Django ORM provides the :ref:`\"entry_set\"<topics-db-queries-"
"related>` syntax for finding a collection of objects related on a foreign "
"key. Therefore, given a model called \"comment\" with a foreign key "
"relationship to a model called \"task\" you can loop through all comments "
"attached to a given task like this::"
msgstr ""

# 58fee8333363456888033bb6e9b70912
#: ../../topics/templates.txt:603
msgid ""
"Similarly, :doc:`QuerySets</ref/models/querysets>` provide a ``count()`` "
"method to count the number of objects they contain. Therefore, you can "
"obtain a count of all comments related to the current task with::"
msgstr ""

# 61c3299bc4fc4e4b9a54ae452ccd74ee
#: ../../topics/templates.txt:609
msgid ""
"And of course you can easily access methods you've explicitly defined on "
"your own models::"
msgstr ""

# b4ced439160e483eb7b6cef1603ff964
#: ../../topics/templates.txt:620
msgid ""
"Because Django intentionally limits the amount of logic processing available "
"in the template language, it is not possible to pass arguments to method "
"calls accessed from within templates. Data should be calculated in views, "
"then passed to templates for display."
msgstr ""

# 99065e3a3719449681326a140d52999f
#: ../../topics/templates.txt:628
msgid "Custom tag and filter libraries"
msgstr ""

# 4a586a7486e54832a6895584032d6fea
#: ../../topics/templates.txt:630
msgid ""
"Certain applications provide custom tag and filter libraries. To access them "
"in a template, use the :ttag:`load` tag::"
msgstr ""

# 6ac26bfb05ac49b99b8f98ed9fab8a28
#: ../../topics/templates.txt:637
msgid ""
"In the above, the :ttag:`load` tag loads the ``comments`` tag library, which "
"then makes the ``comment_form`` tag available for use. Consult the "
"documentation area in your admin to find the list of custom libraries in "
"your installation."
msgstr ""

# d9bfd6e9a8ff4150b2a1e2dc01d96109
#: ../../topics/templates.txt:641
msgid ""
"The :ttag:`load` tag can take multiple library names, separated by spaces. "
"Example::"
msgstr ""

# 8430e73cf0524ee490e457590f276827
#: ../../topics/templates.txt:646
msgid ""
"See :doc:`/howto/custom-template-tags` for information on writing your own "
"custom template libraries."
msgstr ""

# ddef1274f1474e478913b65ac3438f84
#: ../../topics/templates.txt:650
msgid "Custom libraries and template inheritance"
msgstr ""

# d5d8baf3983240038939f0f92ce73ed5
#: ../../topics/templates.txt:652
msgid ""
"When you load a custom tag or filter library, the tags/filters are only made "
"available to the current template -- not any parent or child templates along "
"the template-inheritance path."
msgstr ""

# 47dafada49574497b1814ed513faa3cd
#: ../../topics/templates.txt:656
msgid ""
"For example, if a template ``foo.html`` has ``{% load comments %}``, a child "
"template (e.g., one that has ``{% extends \"foo.html\" %}``) will *not* have "
"access to the comments template tags and filters. The child template is "
"responsible for its own ``{% load comments %}``."
msgstr ""

# 2a77ab437d8f4083881b4173217cb18e
#: ../../topics/templates.txt:661
msgid "This is a feature for the sake of maintainability and sanity."
msgstr ""
