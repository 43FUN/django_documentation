# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2012.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-02-15 15:13\n"
"PO-Revision-Date: 2012-02-15 15:13\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# abfabd9542ed41ddb6bc6ae5c954472a
#: ../../topics/signing.txt:3
msgid "Cryptographic signing"
msgstr ""

# 0b5959e288a5401eb34df0975fc40f34
#: ../../topics/signing.txt:10
msgid ""
"The golden rule of Web application security is to never trust data from "
"untrusted sources. Sometimes it can be useful to pass data through an "
"untrusted medium. Cryptographically signed values can be passed through an "
"untrusted channel safe in the knowledge that any tampering will be detected."
msgstr ""

# 06c95e7eb9d34c2ca96f1453ff5e4b00
#: ../../topics/signing.txt:15
msgid ""
"Django provides both a low-level API for signing values and a high-level API "
"for setting and reading signed cookies, one of the most common uses of "
"signing in Web applications."
msgstr ""

# d7a43dc5089441caa5d74d0816a06fc4
#: ../../topics/signing.txt:19
msgid "You may also find signing useful for the following:"
msgstr ""

# 7838e8911fae455bb1e515a22af27503
#: ../../topics/signing.txt:21
msgid ""
"Generating \"recover my account\" URLs for sending to users who have lost "
"their password."
msgstr ""

# 4f7c74342be04ef4bf3615cf11b9c3af
#: ../../topics/signing.txt:24
msgid "Ensuring data stored in hidden form fields has not been tampered with."
msgstr ""

# 52d735fe0f8a40709c8e6477de82de41
#: ../../topics/signing.txt:26
msgid ""
"Generating one-time secret URLs for allowing temporary access to a protected "
"resource, for example a downloadable file that a user has paid for."
msgstr ""

# 84287ac23a5a4b91b22f2a509b32906a
#: ../../topics/signing.txt:31
msgid "Protecting the SECRET_KEY"
msgstr ""

# b3814905aee14c8b83524965666e4815
#: ../../topics/signing.txt:33
msgid ""
"When you create a new Django project using :djadmin:`startproject`, the "
"``settings.py`` file is generated automatically and gets a random :setting:"
"`SECRET_KEY` value. This value is the key to securing signed data -- it is "
"vital you keep this secure, or attackers could use it to generate their own "
"signed values."
msgstr ""

# 872938d72dd64580a5b9c588df914358
#: ../../topics/signing.txt:40
msgid "Using the low-level API"
msgstr ""

# 9e530c53052641b782bc909022197e8f
#: ../../topics/signing.txt:44
msgid ""
"Django's signing methods live in the ``django.core.signing`` module. To sign "
"a value, first instantiate a ``Signer`` instance::"
msgstr ""

# 7dfbe325246e46018cb39d5a3ecddd35
#: ../../topics/signing.txt:53
msgid ""
"The signature is appended to the end of the string, following the colon. You "
"can retrieve the original value using the ``unsign`` method::"
msgstr ""

# bed6687c7e6147e9943f5c946f4602d6
#: ../../topics/signing.txt:60
msgid ""
"If the signature or value have been altered in any way, a ``django.core."
"signing.BadSignature`` exception will be raised::"
msgstr ""

# ed96a08d3c0a4c25b31b6197b8c62b26
#: ../../topics/signing.txt:69
msgid ""
"By default, the ``Signer`` class uses the :setting:`SECRET_KEY` setting to "
"generate signatures. You can use a different secret by passing it to the "
"``Signer`` constructor::"
msgstr ""

# cd4d774a021e4123bc008e4145b27c26
#: ../../topics/signing.txt:79
msgid "Using the salt argument"
msgstr ""

# 39d0996efe0b48a39a8800aa8da88b43
#: ../../topics/signing.txt:81
msgid ""
"If you do not wish for every occurrence of a particular string to have the "
"same signature hash, you can use the optional ``salt`` argument to the "
"``Signer`` class. Using a salt will seed the signing hash function with both "
"the salt and your :setting:`SECRET_KEY`::"
msgstr ""

# e6f6f9c26745466d8bf8f6c9f1a9b188
#: ../../topics/signing.txt:95
msgid ""
"Using salt in this way puts the different signatures into different "
"namespaces.  A signature that comes from one namespace (a particular salt "
"value) cannot be used to validate the same plaintext string in a different "
"namespace that is using a different salt setting. The result is to prevent "
"an attacker from using a signed string generated in one place in the code as "
"input to another piece of code that is generating (and verifying) signatures "
"using a different salt."
msgstr ""

# d4c3a392329b4c429a49695e9e41888e
#: ../../topics/signing.txt:103
msgid ""
"Unlike your :setting:`SECRET_KEY`, your salt argument does not need to stay "
"secret."
msgstr ""

# 01b7b85d36e444a5b8cb1d24db9c8833
#: ../../topics/signing.txt:107
msgid "Verifying timestamped values"
msgstr ""

# 6d6e6704db3d497e8b48a3f018c5a5be
#: ../../topics/signing.txt:111
msgid ""
"``TimestampSigner`` is a subclass of :class:`~Signer` that appends a signed "
"timestamp to the value. This allows you to confirm that a signed value was "
"created within a specified period of time::"
msgstr ""

# ea6694af73cd4cccbae8a9d4dc0ef57a
#: ../../topics/signing.txt:129
msgid "Protecting complex data structures"
msgstr ""

# 662f79d4a0f14262bf3e3d8649b62a18
#: ../../topics/signing.txt:131
msgid ""
"If you wish to protect a list, tuple or dictionary you can do so using the "
"signing module's ``dumps`` and ``loads`` functions. These imitate Python's "
"pickle module, but use JSON serialization under the hood. JSON ensures that "
"even if your :setting:`SECRET_KEY` is stolen an attacker will not be able to "
"execute arbitrary commands by exploiting the pickle format.::"
msgstr ""

# 25adc06622604f4f95465b1b9aeb5b5b
#: ../../topics/signing.txt:146
msgid "Returns URL-safe, sha1 signed base64 compressed JSON string."
msgstr ""

# 3fac9f4b391b4733ab2ed2ac244f280b
#: ../../topics/signing.txt:150
msgid "Reverse of dumps(), raises ``BadSignature`` if signature fails."
msgstr ""
