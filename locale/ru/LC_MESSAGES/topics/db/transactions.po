# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated <>, 2012.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-11-07 10:34\n"
"PO-Revision-Date: 2013-04-23 14:45+0300\n"
"Last-Translator: Dmitriy Kostochko <alerion.um@gmail.com>\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# 4cc932d9ef744290bc400ca2a669cae6
#: ../../topics/db/transactions.txt:3
#, fuzzy
msgid "Database transactions"
msgstr "Управление транзакциями"

# de779103b58c4774a85e4bc9d4924241
#: ../../topics/db/transactions.txt:7
#, fuzzy
msgid ""
"Django gives you a few ways to control how database transactions are managed."
msgstr ""
"Django предоставляет несколько способов использования механизма транзакций, "
"который может предоставлять база данных."

# 4cc932d9ef744290bc400ca2a669cae6
#: ../../topics/db/transactions.txt:10
msgid "Managing database transactions"
msgstr "Управление транзакциями"

# 367327ff4acb4fca87958fa26c0eae7a
#: ../../topics/db/transactions.txt:13
msgid "Django's default transaction behavior"
msgstr "Стандартное поведение Django"

# bdaa10ae7df24a1abafa091411d35f02
#: ../../topics/db/transactions.txt:15
msgid ""
"Django's default behavior is to run in autocommit mode. Each query is "
"immediately committed to the database. :ref:`See below for details "
"<autocommit-details>`."
msgstr ""

# dd0c1128d07d465aab1481a0094dbc4c
#: ../../topics/db/transactions.txt:19
msgid ""
"Django uses transactions or savepoints automatically to guarantee the "
"integrity of ORM operations that require multiple queries, especially :ref:"
"`delete() <topics-db-queries-delete>` and :ref:`update() <topics-db-queries-"
"update>` queries."
msgstr ""

# 4b68e0d22c4b4a3d909c42db7413da70
#: ../../topics/db/transactions.txt:32
msgid "Tying transactions to HTTP requests"
msgstr "Привязка транзакций к HTTP запросам"

# 527fea9a731f4bad80d7a51c671de3b9
#: ../../topics/db/transactions.txt:34
msgid ""
"A common way to handle transactions on the web is to wrap each request in a "
"transaction. Set :setting:`ATOMIC_REQUESTS <DATABASE-ATOMIC_REQUESTS>` to "
"``True`` in the configuration of each database for which you want to enable "
"this behavior."
msgstr ""

# 8cf50f314cb5478bb0cedc7bc21718cc
#: ../../topics/db/transactions.txt:39
#, fuzzy
msgid ""
"It works like this. Before calling a view function, Django starts a "
"transaction. If the response is produced without problems, Django commits "
"the transaction. If the view produces an exception, Django rolls back the "
"transaction."
msgstr ""
"Это работает следующим образом: При получении запроса Django начинает "
"транзакцию. Если отклик был создан без возникновения ошибок, Django "
"фиксирует все ожидающие транзакции. Если функция представления вызывает "
"исключение, Django откатывает все ожидающие транзакции."

# 940ec520afa748a3b71362bf5b05f82c
#: ../../topics/db/transactions.txt:44
msgid ""
"You may perfom partial commits and rollbacks in your view code, typically "
"with the :func:`atomic` context manager. However, at the end of the view, "
"either all the changes will be committed, or none of them."
msgstr ""

# 66611132c8a84a379831a542f77c0247
#: ../../topics/db/transactions.txt:50
msgid ""
"While the simplicity of this transaction model is appealing, it also makes "
"it inefficient when traffic increases. Opening a transaction for every view "
"has some overhead. The impact on performance depends on the query patterns "
"of your application and on how well your database handles locking."
msgstr ""

# bdc45215f9ca4a7bb81dcf8a8382834e
#: ../../topics/db/transactions.txt:57
msgid ""
"When a view returns a :class:`~django.http.StreamingHttpResponse`, reading "
"the contents of the response will often execute code to generate the "
"content. Since the view has already returned, such code runs outside of the "
"transaction."
msgstr ""

# 74c944f9b5ad437bb484de515f25d7c1
#: ../../topics/db/transactions.txt:62
msgid ""
"Generally speaking, it isn't advisable to write to the database while "
"generating a streaming response, since there's no sensible way to handle "
"errors after starting to send the response."
msgstr ""

# 5aaa1a274f8a49a79c11c30abe2aa6cb
#: ../../topics/db/transactions.txt:66
msgid ""
"In practice, this feature simply wraps every view function in the :func:"
"`atomic` decorator described below."
msgstr ""

# 63e1ec7042834e07975c62b522206459
#: ../../topics/db/transactions.txt:69
msgid ""
"Note that only the execution of your view is enclosed in the transactions. "
"Middleware runs outside of the transaction, and so does the rendering of "
"template responses."
msgstr ""

# 8b4e840f905a467aa9761219f8cda533
#: ../../topics/db/transactions.txt:73
msgid ""
"When :setting:`ATOMIC_REQUESTS <DATABASE-ATOMIC_REQUESTS>` is enabled, it's "
"still possible to prevent views from running in a transaction."
msgstr ""

# 697984f005d34957857b5a265a735b23
#: ../../topics/db/transactions.txt:78
msgid ""
"This decorator will negate the effect of :setting:`ATOMIC_REQUESTS <DATABASE-"
"ATOMIC_REQUESTS>` for a given view::"
msgstr ""

# a76a3294bab844e7ade611d2488ad584
#: ../../topics/db/transactions.txt:91
msgid "It only works if it's applied to the view itself."
msgstr ""

# 9ec15ad440d54d4eb2d525aa91049116
#: ../../topics/db/transactions.txt:99
#, fuzzy
msgid "Controlling transactions explicitly"
msgstr "Управление транзакциями в представлениях"

# 4cc932d9ef744290bc400ca2a669cae6
#: ../../topics/db/transactions.txt:103
#, fuzzy
msgid "Django provides a single API to control database transactions."
msgstr "Управление транзакциями"

# 9bf568d54a404063aec5a8e488f69bfb
#: ../../topics/db/transactions.txt:107
msgid ""
"Atomicity is the defining property of database transactions. ``atomic`` "
"allows us to create a block of code within which the atomicity on the "
"database is guaranteed. If the block of code is successfully completed, the "
"changes are committed to the database. If there is an exception, the changes "
"are rolled back."
msgstr ""

# 5b9f3bebddb0476a98fb1d8267f9fc0d
#: ../../topics/db/transactions.txt:113
msgid ""
"``atomic`` blocks can be nested. In this case, when an inner block completes "
"successfully, its effects can still be rolled back if an exception is raised "
"in the outer block at a later point."
msgstr ""

# 813153ed49d944129c2979d08ba55e46
#: ../../topics/db/transactions.txt:117
msgid "``atomic`` is usable both as a `decorator`_::"
msgstr ""

# 705e769a3a4a4801a7ad0540283076c0
#: ../../topics/db/transactions.txt:126
msgid "and as a `context manager`_::"
msgstr ""

# 827c6c310995479b988501120c2429b8
#: ../../topics/db/transactions.txt:141
msgid ""
"Wrapping ``atomic`` in a try/except block allows for natural handling of "
"integrity errors::"
msgstr ""

# 61ce2d08657d40b09de1caa2c112dfcc
#: ../../topics/db/transactions.txt:158
msgid ""
"In this example, even if ``generate_relationships()`` causes a database "
"error by breaking an integrity constraint, you can execute queries in "
"``add_children()``, and the changes from ``create_parent()`` are still "
"there. Note that any operations attempted in ``generate_relationships()`` "
"will already have been rolled back safely when ``handle_exception()`` is "
"called, so the exception handler can also operate on the database if "
"necessary."
msgstr ""

# 3b6d50f8dac1415fb7e638d27ad38a3e
#: ../../topics/db/transactions.txt:168
msgid ""
"When exiting an ``atomic`` block, Django looks at whether it's exited "
"normally or with an exception to determine whether to commit or roll back. "
"If you catch and handle exceptions inside an ``atomic`` block, you may hide "
"from Django the fact that a problem has happened. This can result in "
"unexpected behavior."
msgstr ""

# 1798cf44ce8d4496b38e0d5b554e89b3
#: ../../topics/db/transactions.txt:174
msgid ""
"This is mostly a concern for :exc:`~django.db.DatabaseError` and its "
"subclasses such as :exc:`~django.db.IntegrityError`. After such an error, "
"the transaction is broken and Django will perform a rollback at the end of "
"the ``atomic`` block. If you attempt to run database queries before the "
"rollback happens, Django will raise a :class:`~django.db.transaction."
"TransactionManagementError`. You may also encounter this behavior when an "
"ORM-related signal handler raises an exception."
msgstr ""

# 67ffad60eab84079b178e1fe16b7e36b
#: ../../topics/db/transactions.txt:183
msgid ""
"The correct way to catch database errors is around an ``atomic`` block as "
"shown above. If necessary, add an extra ``atomic`` block for this purpose. "
"This pattern has another advantage: it delimits explicitly which operations "
"will be rolled back if an exception occurs."
msgstr ""

# 0d1628bb73b1400eba2f5a7f9108e6b2
#: ../../topics/db/transactions.txt:188
msgid ""
"If you catch exceptions raised by raw SQL queries, Django's behavior is "
"unspecified and database-dependent."
msgstr ""

# 34c80850557e4a72b47a2fd2e58b89a2
#: ../../topics/db/transactions.txt:191
msgid ""
"In order to guarantee atomicity, ``atomic`` disables some APIs. Attempting "
"to commit, roll back, or change the autocommit state of the database "
"connection within an ``atomic`` block will raise an exception."
msgstr ""

# b5761afe39df4f1880ca5a1d2fd66c1b
#: ../../topics/db/transactions.txt:195
#, fuzzy
msgid ""
"``atomic`` takes a ``using`` argument which should be the name of a "
"database. If this argument isn't provided, Django uses the ``\"default\"`` "
"database."
msgstr ""
"Каждая из этих функция принимает аргумент ``using``, который обозначает имя "
"базы данных с которой производится работа. Если этот аргумент не указан, то "
"все действия идут относительно стандартной (``\"default\"``) базы данных."

# 9ec15ad440d54d4eb2d525aa91049116
#: ../../topics/db/transactions.txt:199
#, fuzzy
msgid "Under the hood, Django's transaction management code:"
msgstr "Управление транзакциями в представлениях"

# 36c95550f7b84067b5ba8acc881a65a6
#: ../../topics/db/transactions.txt:201
msgid "opens a transaction when entering the outermost ``atomic`` block;"
msgstr ""

# d8b28e3bfe7e4ec1944fdb1662a53ade
#: ../../topics/db/transactions.txt:202
msgid "creates a savepoint when entering an inner ``atomic`` block;"
msgstr ""

# 7e16b87795e2433492c839f4370fd865
#: ../../topics/db/transactions.txt:203
msgid "releases or rolls back to the savepoint when exiting an inner block;"
msgstr ""

# 4652ccb9b60f42fdb5f0dc790c3e278a
#: ../../topics/db/transactions.txt:204
msgid "commits or rolls back the transaction when exiting the outermost block."
msgstr ""

# 9c9408dc4d65480bbc2d3980e19b4480
#: ../../topics/db/transactions.txt:206
msgid ""
"You can disable the creation of savepoints for inner blocks by setting the "
"``savepoint`` argument to ``False``. If an exception occurs, Django will "
"perform the rollback when exiting the first parent block with a savepoint if "
"there is one, and the outermost block otherwise. Atomicity is still "
"guaranteed by the outer transaction. This option should only be used if the "
"overhead of savepoints is noticeable. It has the drawback of breaking the "
"error handling described above."
msgstr ""

# 2229167d23bc4066b6adbd298c2cf76b
#: ../../topics/db/transactions.txt:214
msgid ""
"You may use ``atomic`` when autocommit is turned off. It will only use "
"savepoints, even for the outermost block, and it will raise an exception if "
"the outermost block is declared with ``savepoint=False``."
msgstr ""

# ebe513d5a8524a1481f462edeb49e458
#: ../../topics/db/transactions.txt:220
msgid ""
"Open transactions have a performance cost for your database server. To "
"minimize this overhead, keep your transactions as short as possible. This is "
"especially important of you're using :func:`atomic` in long-running "
"processes, outside of Django's request / response cycle."
msgstr ""

# 4891d04f6280425da08d5bc397e2d6eb
# 3a3c9b3f22c843289ae8b7bca0a0ee99
#: ../../topics/db/transactions.txt:226 ../../topics/db/transactions.txt:288
msgid "Autocommit"
msgstr ""

# 40a191800eb04cfd8ae4eb35f729f373
#: ../../topics/db/transactions.txt:231
msgid "Why Django uses autocommit"
msgstr ""

# ecabb42f512f4d42b8f2641719f9d62f
#: ../../topics/db/transactions.txt:233
msgid ""
"In the SQL standards, each SQL query starts a transaction, unless one is "
"already in progress. Such transactions must then be committed or rolled back."
msgstr ""

# e8e50fe2f3f8453d944fe13d6fd1043c
#: ../../topics/db/transactions.txt:236
msgid ""
"This isn't always convenient for application developers. To alleviate this "
"problem, most databases provide an autocommit mode. When autocommit is "
"turned on, each SQL query is wrapped in its own transaction. In other words, "
"the transaction is not only automatically started, but also automatically "
"committed."
msgstr ""

# 58cb5ef7fcc44f1a92e8c6834032c1e1
#: ../../topics/db/transactions.txt:242
msgid ""
":pep:`249`, the Python Database API Specification v2.0, requires autocommit "
"to be initially turned off. Django overrides this default and turns "
"autocommit on."
msgstr ""

# dddcb751cf644452995d5a5369060c71
#: ../../topics/db/transactions.txt:246
msgid ""
"To avoid this, you can :ref:`deactivate the transaction management "
"<deactivate-transaction-management>`, but it isn't recommended."
msgstr ""

# 9803f47b47444902b7c3ea61078bbab1
#: ../../topics/db/transactions.txt:257
#, fuzzy
msgid "Deactivating transaction management"
msgstr "Как глобально деактивировать управление транзакциями"

# ab0786299a89455b9d81102408b38f84
#: ../../topics/db/transactions.txt:259
msgid ""
"You can totally disable Django's transaction management for a given database "
"by setting :setting:`AUTOCOMMIT <DATABASE-AUTOCOMMIT>` to ``False`` in its "
"configuration. If you do this, Django won't enable autocommit, and won't "
"perform any commits. You'll get the regular behavior of the underlying "
"database library."
msgstr ""

# 18f4e6db2b754734bfe405f55fa03941
#: ../../topics/db/transactions.txt:265
msgid ""
"This requires you to commit explicitly every transaction, even those started "
"by Django or by third-party libraries. Thus, this is best used in situations "
"where you want to run your own transaction-controlling middleware or do "
"something really strange."
msgstr ""

# 94cc977612ae4fe9ad1ed461447a0238
#: ../../topics/db/transactions.txt:275
msgid "Low-level APIs"
msgstr ""

# dd135cd5afb14d80b463c31d2e33daa0
#: ../../topics/db/transactions.txt:279
msgid ""
"Always prefer :func:`atomic` if possible at all. It accounts for the "
"idiosyncrasies of each database and prevents invalid operations."
msgstr ""

# 09c8ec95affb488eaa07626c4c2e9385
#: ../../topics/db/transactions.txt:282
msgid ""
"The low level APIs are only useful if you're implementing your own "
"transaction management."
msgstr ""

# 3725507756be4f7393dadcaa8fefa300
#: ../../topics/db/transactions.txt:292
msgid ""
"Django provides a straightforward API in the :mod:`django.db.transaction` "
"module to manage the autocommit state of each database connection."
msgstr ""

# b5761afe39df4f1880ca5a1d2fd66c1b
#: ../../topics/db/transactions.txt:299 ../../topics/db/transactions.txt:334
#, fuzzy
msgid ""
"These functions take a ``using`` argument which should be the name of a "
"database. If it isn't provided, Django uses the ``\"default\"`` database."
msgstr ""
"Каждая из этих функция принимает аргумент ``using``, который обозначает имя "
"базы данных с которой производится работа. Если этот аргумент не указан, то "
"все действия идут относительно стандартной (``\"default\"``) базы данных."

# f266e0322dac4cc08f31ac892f7986c6
#: ../../topics/db/transactions.txt:302
msgid ""
"Autocommit is initially turned on. If you turn it off, it's your "
"responsibility to restore it."
msgstr ""

# b038616bc55a47b08a19d323d3dd965d
#: ../../topics/db/transactions.txt:305
msgid ""
"Once you turn autocommit off, you get the default behavior of your database "
"adapter, and Django won't help you. Although that behavior is specified in :"
"pep:`249`, implementations of adapters aren't always consistent with one "
"another. Review the documentation of the adapter you're using carefully."
msgstr ""

# 3b4b0bc8d4e44319ab38784e2ce03adf
#: ../../topics/db/transactions.txt:310
msgid ""
"You must ensure that no transaction is active, usually by issuing a :func:"
"`commit` or a :func:`rollback`, before turning autocommit back on."
msgstr ""

# 60e04e3b15fc491da1a0fe99ee18d362
#: ../../topics/db/transactions.txt:313
msgid ""
"Django will refuse to turn autocommit off when an :func:`atomic` block is "
"active, because that would break atomicity."
msgstr ""

# 1cd9d1e6b3e74602a5909fa7b987370b
#: ../../topics/db/transactions.txt:317
#, fuzzy
msgid "Transactions"
msgstr "Транзакции в MySQL"

# a24aef0470f7452fb23ea496b44436e9
#: ../../topics/db/transactions.txt:319
msgid ""
"A transaction is an atomic set of database queries. Even if your program "
"crashes, the database guarantees that either all the changes will be "
"applied, or none of them."
msgstr ""

# fe0f0c01f57e4707879e9157890075fd
#: ../../topics/db/transactions.txt:323
msgid ""
"Django doesn't provide an API to start a transaction. The expected way to "
"start a transaction is to disable autocommit with :func:`set_autocommit`."
msgstr ""

# 5d887f79d8714e008e44b8b9d3401dad
#: ../../topics/db/transactions.txt:326
msgid ""
"Once you're in a transaction, you can choose either to apply the changes "
"you've performed until this point with :func:`commit`, or to cancel them "
"with :func:`rollback`. These functions are defined in :mod:`django.db."
"transaction`."
msgstr ""

# eb8a266b3d2e46aca5bd1ddac0005c63
#: ../../topics/db/transactions.txt:337
msgid ""
"Django will refuse to commit or to rollback when an :func:`atomic` block is "
"active, because that would break atomicity."
msgstr ""

# e5353a7c8bb648d6971c583a6fcb7b0a
#: ../../topics/db/transactions.txt:343
msgid "Savepoints"
msgstr "Промежуточные точки"

# 5596f0f12f7743cbb13950c891733165
#: ../../topics/db/transactions.txt:345
#, fuzzy
msgid ""
"A savepoint is a marker within a transaction that enables you to roll back "
"part of a transaction, rather than the full transaction. Savepoints are "
"available with the SQLite (≥ 3.6.8), PostgreSQL, Oracle and MySQL (when "
"using the InnoDB storage engine) backends. Other backends provide the "
"savepoint functions, but they're empty operations -- they don't actually do "
"anything."
msgstr ""
"Промежуточной точкой называют маркер внутри транзации, который позволяет вам "
"откатить лишь часть транзакции, а не всю. Промежуточные точки доступны при "
"использовании PostgreSQL 8, Oracle и MySQL(при использовании InnoDB). В "
"остальных случаях их использование не имеет смысла, так как функции работать "
"будут без ошибок, но и реальных действий производить не будут."

# c9eac2da1e1d465b91038a8bd092777e
#: ../../topics/db/transactions.txt:351
#, fuzzy
msgid ""
"Savepoints aren't especially useful if you are using autocommit, the default "
"behavior of Django. However, once you open a transaction with :func:"
"`atomic`, you build up a series of database operations awaiting a commit or "
"rollback. If you issue a rollback, the entire transaction is rolled back. "
"Savepoints provide the ability to perform a fine-grained rollback, rather "
"than the full rollback that would be performed by ``transaction.rollback()``."
msgstr ""
"Промежуточные точки бесполезны, если вы используете стандартное поведение "
"транзакций (т.е. автоматическую фиксацию изменений). Тем не менее, при "
"использовании ``commit_on_success`` или ``commit_manually``, каждая открытая "
"транзакция выполняет ряд операций в базе данных, ожидая фиксации или отката "
"транзакции. Если вы выполните откат транзакции, то будет выполнен откат всей "
"транзакции. Промежуточные точки предоставляют возможность выполнять "
"частичный откат, вместо выполнения полного отката, который делается с "
"помощью ``transaction.rollback()``."

# b5761afe39df4f1880ca5a1d2fd66c1b
#: ../../topics/db/transactions.txt:365
msgid ""
"Each of these functions takes a ``using`` argument which should be the name "
"of a database for which the behavior applies.  If no ``using`` argument is "
"provided then the ``\"default\"`` database is used."
msgstr ""
"Каждая из этих функция принимает аргумент ``using``, который обозначает имя "
"базы данных с которой производится работа. Если этот аргумент не указан, то "
"все действия идут относительно стандартной (``\"default\"``) базы данных."

# b6ba6236c63c4374a8a9c9a71fa4578a
#: ../../topics/db/transactions.txt:369
#, fuzzy
msgid ""
"Savepoints are controlled by three functions in :mod:`django.db.transaction`:"
msgstr "Промежуточные точки управляются тремя методами объекта транзакции:"

# 9bcb1bc5d14549e2a097ee02ccabb141
#: ../../topics/db/transactions.txt:373
#, fuzzy
msgid ""
"Creates a new savepoint. This marks a point in the transaction that is known "
"to be in a \"good\" state. Returns the savepoint ID (``sid``)."
msgstr ""
"Создаёт новую промежуточную точку, обозначая точку в транзакции, отмечающую "
"\"хорошее\" состояние."

# 08d265cb723b4015ad586c4143251921
#: ../../topics/db/transactions.txt:378
#, fuzzy
msgid ""
"Releases savepoint ``sid``. The changes performed since the savepoint was "
"created become part of the transaction."
msgstr ""
"Обновляет промежуточную точку информацией о всех операциях, которые были "
"выполнены с момента её создания или с момента последней фиксации."

# 2240b980574b4bf588bca9f3d8ddc57b
#: ../../topics/db/transactions.txt:383
#, fuzzy
msgid "Rolls back the transaction to savepoint ``sid``."
msgstr "Откатывает транзакцию до последней точки."

# 6f7e2dc306e64760b04c5576ff56809e
#: ../../topics/db/transactions.txt:385
msgid ""
"These functions do nothing if savepoints aren't supported or if the database "
"is in autocommit mode."
msgstr ""

# e15f2b7fe0d04a56b669216a3035bdd0
#: ../../topics/db/transactions.txt:388
msgid "In addition, there's a utility function:"
msgstr ""

# 0728600917754ae0933e12f91588bfb8
#: ../../topics/db/transactions.txt:392
msgid "Resets the counter used to generate unique savepoint IDs."
msgstr ""

# ed997682e0fa4bc9a900c6edb5ab64d0
#: ../../topics/db/transactions.txt:394
msgid "The following example demonstrates the use of savepoints::"
msgstr "Следующие примеры демонстрируют использование промежуточных точек::"

# b227ea8ab4c94f54a73f7782487754d0
#: ../../topics/db/transactions.txt:419
msgid ""
"Savepoints may be used to recover from a database error by performing a "
"partial rollback. If you're doing this inside an :func:`atomic` block, the "
"entire block will still be rolled back, because it doesn't know you've "
"handled the situation at a lower level! To prevent this, you can control the "
"rollback behavior with the following functions."
msgstr ""

# 96958a14f5944e0bb607aa86a0c6a453
#: ../../topics/db/transactions.txt:429
msgid ""
"Setting the rollback flag to ``True`` forces a rollback when exiting the "
"innermost atomic block. This may be useful to trigger a rollback without "
"raising an exception."
msgstr ""

# 5c78043a8d524ebbbe6ab6646047a51e
#: ../../topics/db/transactions.txt:433
msgid ""
"Setting it to ``False`` prevents such a rollback. Before doing that, make "
"sure you've rolled back the transaction to a known-good savepoint within the "
"current atomic block! Otherwise you're breaking atomicity and data "
"corruption may occur."
msgstr ""

# 71a016207ea1446690fa3ab4d4af070a
#: ../../topics/db/transactions.txt:439
msgid "Database-specific notes"
msgstr ""

# e5353a7c8bb648d6971c583a6fcb7b0a
#: ../../topics/db/transactions.txt:444
#, fuzzy
msgid "Savepoints in SQLite"
msgstr "Промежуточные точки"

# 4a4430cdda004033a2f64efc201bc9a7
#: ../../topics/db/transactions.txt:446
msgid ""
"While SQLite ≥ 3.6.8 supports savepoints, a flaw in the design of the :mod:"
"`sqlite3` module makes them hardly usable."
msgstr ""

# 25fbcb5c4f5844459321375f0f09ae6e
#: ../../topics/db/transactions.txt:449
msgid ""
"When autocommit is enabled, savepoints don't make sense. When it's "
"disabled, :mod:`sqlite3` commits implicitly before savepoint statements. (In "
"fact, it commits before any statement other than ``SELECT``, ``INSERT``, "
"``UPDATE``, ``DELETE`` and ``REPLACE``.) This bug has two consequences:"
msgstr ""

# fe884406c15f4e69810a94616b7dc27a
#: ../../topics/db/transactions.txt:454
msgid ""
"The low level APIs for savepoints are only usable inside a transaction ie. "
"inside an :func:`atomic` block."
msgstr ""

# 10b6615e29574834b4c20cdd683ff422
#: ../../topics/db/transactions.txt:456
msgid "It's impossible to use :func:`atomic` when autocommit is turned off."
msgstr ""

# 1cd9d1e6b3e74602a5909fa7b987370b
#: ../../topics/db/transactions.txt:459
msgid "Transactions in MySQL"
msgstr "Транзакции в MySQL"

# 51bd28f8f81e43c7b112007f204d5076
#: ../../topics/db/transactions.txt:461
msgid ""
"If you're using MySQL, your tables may or may not support transactions; it "
"depends on your MySQL version and the table types you're using. (By \"table "
"types,\" we mean something like \"InnoDB\" or \"MyISAM\".) MySQL transaction "
"peculiarities are outside the scope of this article, but the MySQL site has "
"`information on MySQL transactions`_."
msgstr ""
"При использовании MySQL поддержка трензакция зависит от версии движка базы "
"данных и от используемого типа таблиц. (Под \"типом таблицы\" мы "
"подразумеваем \"InnoDB\" или \"MyISAM\".) Особенности транзакций MySQL "
"выходят за рамки данной статьи, но сайт MySQL содержит `информацию о "
"транзакциях <information on MySQL transactions>`_."

# 86c00e13de144dfb86bc00ae45ac780e
#: ../../topics/db/transactions.txt:467
#, fuzzy
msgid ""
"If your MySQL setup does *not* support transactions, then Django will always "
"function in autocommit mode: statements will be executed and committed as "
"soon as they're called. If your MySQL setup *does* support transactions, "
"Django will handle transactions as explained in this document."
msgstr ""
"Если ваша настройка MySQL *не поддерживает* транзакции, тогда Django будет "
"работать в режиме автоматической фиксации: Операторы будут выполняться и "
"сразу же фиксироваться. Если же ваша настройка MySQL *поддерживает* "
"транзакции, Django будет обрабатывать транзакции, как это описано выше."

# 1235948529204a689b68d888fbd47cfa
#: ../../topics/db/transactions.txt:475
msgid "Handling exceptions within PostgreSQL transactions"
msgstr "Обработка исключений в транзакциях PostgreSQL"

# 075b91c9f5714d708805d4d752be141f
#: ../../topics/db/transactions.txt:479
msgid ""
"This section is relevant only if you're implementing your own transaction "
"management. This problem cannot occur in Django's default mode and :func:"
"`atomic` handles it automatically."
msgstr ""

# 0d63e1677b8f4b1791dc358247514adb
#: ../../topics/db/transactions.txt:483
#, fuzzy
msgid ""
"Inside a transaction, when a call to a PostgreSQL cursor raises an exception "
"(typically ``IntegrityError``), all subsequent SQL in the same transaction "
"will fail with the error \"current transaction is aborted, queries ignored "
"until end of transaction block\". Whilst simple use of ``save()`` is "
"unlikely to raise an exception in PostgreSQL, there are more advanced usage "
"patterns which might, such as saving objects with unique fields, saving "
"using the force_insert/force_update flag, or invoking custom SQL."
msgstr ""
"Когда вызов к курсору PostgreSQL вызывает исключение (обычно "
"`IntegrityError``), все последующие SQL запросы в той же транзакции будут "
"заблокированы с ошибкой \"текущая транзакция прервана, запросы "
"проигнорированы до конца транзакционного блока\". Хотя обычное использование "
"``save()`` вряд ли вызовет исключение в PostgreSQL, существуют более сложные "
"шаблоны использования, которые могут вызвать исключение: сохранение объектов "
"с уникальными полями, сохранение с использованием флага ``force_insert``/"
"``force_update`` или вызов собственного SQL."

# 41c03d7594854df4bb16214fa841e61c
#: ../../topics/db/transactions.txt:491
msgid "There are several ways to recover from this sort of error."
msgstr "Существует несколько способов выхода из этого вида ошибок."

# 84f83f8b04894213abd824dbfe043ab5
#: ../../topics/db/transactions.txt:494
msgid "Transaction rollback"
msgstr "Откат транзакции"

# 43a06ad2083a4674b0c28d089fbe1270
#: ../../topics/db/transactions.txt:496
msgid "The first option is to roll back the entire transaction. For example::"
msgstr "Позволяет выполнить полный откат транзакции. Например::"

# 5bbb7fec588b4173ba34cd29b42f567e
#: ../../topics/db/transactions.txt:505
msgid ""
"Calling ``transaction.rollback()`` rolls back the entire transaction. Any "
"uncommitted database operations will be lost. In this example, the changes "
"made by ``a.save()`` would be lost, even though that operation raised no "
"error itself."
msgstr ""
"Вызов ``transaction.rollback()`` откатывает всю транзакцию. Все "
"незафиксированные в базе данных операции будут потеряны. В этом примере "
"изменения, сделанные с помощью ``a.save()`` будут потеряны, несмотря на то, "
"что эта операция прошла без ошибок."

# a0f73197843a4f25b5c3ce9c5babb344
#: ../../topics/db/transactions.txt:511
msgid "Savepoint rollback"
msgstr "Откат до промежуточной точки"

# ea79025d957e4bd7981e474804dc2228
#: ../../topics/db/transactions.txt:513
#, fuzzy
msgid ""
"You can use :ref:`savepoints <topics-db-transactions-savepoints>` to control "
"the extent of a rollback. Before performing a database operation that could "
"fail, you can set or update the savepoint; that way, if the operation fails, "
"you can roll back the single offending operation, rather than the entire "
"transaction. For example::"
msgstr ""
"При использовании PostgreSQL 8+ вы можете использовать :ref:`промежуточные "
"точки <topics-db-transactions-savepoints>` для управления глубиной отката. "
"Перед выполнением действия над базой данных, которое может завершиться "
"ошибкой, вы можете установить или обновить промежуточную точку. "
"Впоследствии, если выполняемое действие завершится ошибкой, вы можете "
"откатить только изменения, созданные этим действием, не оказывая влияние на "
"всю транзакцию в целом. Например::"

# 44fee65141514961b0deaad96a63b382
#: ../../topics/db/transactions.txt:528
msgid ""
"In this example, ``a.save()`` will not be undone in the case where ``b.save()"
"`` raises an exception."
msgstr ""
"В этом примере ``a.save()`` не будет отменён, если ``b.save()`` вызовет "
"исключение."

# 7cef8ed73b7149a89d5f5d36e468a702
#: ../../topics/db/transactions.txt:534
msgid "Changes from Django 1.5 and earlier"
msgstr ""

# 3b7656bb3a374192a1632e93d46e172d
#: ../../topics/db/transactions.txt:536
msgid ""
"The features described below were deprecated in Django 1.6 and will be "
"removed in Django 1.8. They're documented in order to ease the migration to "
"the new transaction management APIs."
msgstr ""

# b99b3d6ca7f94229bfe0ee165534739d
#: ../../topics/db/transactions.txt:541
msgid "Legacy APIs"
msgstr ""

# 2520c57d5b684493a8664f7ac1e632cc
#: ../../topics/db/transactions.txt:543
msgid ""
"The following functions, defined in ``django.db.transaction``, provided a "
"way to control transactions on a per-function or per-code-block basis. They "
"could be used as decorators or as context managers, and they accepted a "
"``using`` argument, exactly like :func:`atomic`."
msgstr ""

# 367327ff4acb4fca87958fa26c0eae7a
#: ../../topics/db/transactions.txt:550
#, fuzzy
msgid "Enable Django's default autocommit behavior."
msgstr "Стандартное поведение Django"

# 553416575631465eaea8928ac1729e63
#: ../../topics/db/transactions.txt:552
#, fuzzy
msgid ""
"Transactions will be committed as soon as you call ``model.save()``, ``model."
"delete()``, or any other function that writes to the database."
msgstr ""
"В функции ``viewfunc()`` транзакции будут зафиксированы как только вы "
"вызовете ``model.save()``, ``model.delete()`` или любую другую функцию, "
"которая приводит к записи в базу данных. Функция ``viewfunc2()`` работает "
"аналогично, но использует соединение ``\"my_other_database\"``."

# 5a69201a42a243549c1f0649919f77e7
#: ../../topics/db/transactions.txt:557
#, fuzzy
msgid "Use a single transaction for all the work done in a function."
msgstr ""
"Используйте декоратор ``commit_on_success`` для объединения всех действий "
"функции в единственную транзакцию::"

# 215db948f3324d6b96ffb4311d23c1b3
#: ../../topics/db/transactions.txt:559
msgid ""
"If the function returns successfully, then Django will commit all work done "
"within the function at that point. If the function raises an exception, "
"though, Django will roll back the transaction."
msgstr ""
"Если функция отрабатывает без ошибок, то Django фиксирует все изменения, "
"которые она создала. Если функция вызывает исключение, то Django откатывает "
"изменения, созданные в транзакции."

# 74bbb5f9366246139ca0ec1b0d1c5724
#: ../../topics/db/transactions.txt:565
msgid "Tells Django you'll be managing the transaction on your own."
msgstr ""

# bf98082ea9db4f33bdbbf64dcf00f7f1
#: ../../topics/db/transactions.txt:567
msgid ""
"Whether you are writing or simply reading from the database, you must "
"``commit()`` or ``rollback()`` explicitly or Django will raise a :exc:"
"`TransactionManagementError` exception. This is required when reading from "
"the database because ``SELECT`` statements may call functions which modify "
"tables, and thus it is impossible to know if any data has been modified."
msgstr ""
"При записи или чтении с базы данных, необходимо явно выполнить ``commit()`` "
"или ``rollback()``, иначе Django вызовет исключение :exc:"
"`TransactionManagementError`. Это необходимо при чтении с базы данных т.к. "
"``SELECT`` может вызывать функции изменяющие таблицы и нет возможность "
"узнать были изменены какие либо данные или нет."

# 84f83f8b04894213abd824dbfe043ab5
#: ../../topics/db/transactions.txt:577
#, fuzzy
msgid "Transaction states"
msgstr "Откат транзакции"

# 605f87e59fc9492597830e29b1ec103a
#: ../../topics/db/transactions.txt:579
msgid ""
"The three functions described above relied on a concept called \"transaction "
"states\". This mechanism was deprecated in Django 1.6, but it's still "
"available until Django 1.8."
msgstr ""

# f2b183309d6448d79bb3aad57d96bb69
#: ../../topics/db/transactions.txt:583
msgid "At any time, each database connection is in one of these two states:"
msgstr ""

# 879b43c02084459aa8410b06b5179ad2
#: ../../topics/db/transactions.txt:585
msgid "**auto mode**: autocommit is enabled;"
msgstr ""

# 958dbc5d6a4346e1afff326e229f89c2
#: ../../topics/db/transactions.txt:586
msgid "**managed mode**: autocommit is disabled."
msgstr ""

# c30d29f705df4fad8cadc5fca5bcb138
#: ../../topics/db/transactions.txt:588
msgid ""
"Django starts in auto mode. ``TransactionMiddleware``, :func:"
"`commit_on_success` and :func:`commit_manually` activate managed mode; :func:"
"`autocommit` activates auto mode."
msgstr ""

# 72aa30becd7f48a59b29ab3f35655c7a
#: ../../topics/db/transactions.txt:592
msgid ""
"Internally, Django keeps a stack of states. Activations and deactivations "
"must be balanced."
msgstr ""

# bea3104838e040ca8f0e01a3423cf564
#: ../../topics/db/transactions.txt:595
msgid ""
"For example, :func:`commit_on_success` switches to managed mode when "
"entering the block of code it controls; when exiting the block, it commits "
"or rollbacks, and switches back to auto mode."
msgstr ""

# b6543eb45f8d43a6917ea40c30beb173
#: ../../topics/db/transactions.txt:599
msgid ""
"So :func:`commit_on_success` really has two effects: it changes the "
"transaction state and it defines an transaction block. Nesting will give the "
"expected results in terms of transaction state, but not in terms of "
"transaction semantics. Most often, the inner block will commit, breaking the "
"atomicity of the outer block."
msgstr ""

# fa3841de4bd648df92b6b51659a72efc
#: ../../topics/db/transactions.txt:605
msgid ""
":func:`autocommit` and :func:`commit_manually` have similar limitations."
msgstr ""

# 0addfd6e2bb04d20ac6cc474541d77de
#: ../../topics/db/transactions.txt:608
msgid "API changes"
msgstr ""

# 84f83f8b04894213abd824dbfe043ab5
#: ../../topics/db/transactions.txt:611
#, fuzzy
msgid "Transaction middleware"
msgstr "Откат транзакции"

# 7958c37868784b04b1ffa8f49a1f312d
#: ../../topics/db/transactions.txt:613
msgid ""
"In Django 1.6, ``TransactionMiddleware`` is deprecated and replaced by :"
"setting:`ATOMIC_REQUESTS <DATABASE-ATOMIC_REQUESTS>`. While the general "
"behavior is the same, there are two differences."
msgstr ""

# 46cbe79e1a5947cfbcbd7975acd83f3b
#: ../../topics/db/transactions.txt:617
msgid ""
"With the previous API, it was possible to switch to autocommit or to commit "
"explicitly anywhere inside a view. Since :setting:`ATOMIC_REQUESTS <DATABASE-"
"ATOMIC_REQUESTS>` relies on :func:`atomic` which enforces atomicity, this "
"isn't allowed any longer. However, at the toplevel, it's still possible to "
"avoid wrapping an entire view in a transaction. To achieve this, decorate "
"the view with :func:`non_atomic_requests` instead of :func:`autocommit`."
msgstr ""

# 1ed9e60e2d5d4673bbe1f25afc4621c1
#: ../../topics/db/transactions.txt:624
#, fuzzy
msgid ""
"The transaction middleware applied not only to view functions, but also to "
"middleware modules that came after it. For instance, if you used the session "
"middleware after the transaction middleware, session creation was part of "
"the transaction. :setting:`ATOMIC_REQUESTS <DATABASE-ATOMIC_REQUESTS>` only "
"applies to the view itself."
msgstr ""
"Порядок указания прослоек в списке имеет большое значение. Прослойка "
"транзакций влияет не только на функции представления, но и на все вложенные "
"прослойки. Таким образом, если прослойка сессий указана после прослойки "
"транзакций, то создание сессии будет частью транзакции."

# 4cc932d9ef744290bc400ca2a669cae6
#: ../../topics/db/transactions.txt:631
#, fuzzy
msgid "Managing transactions"
msgstr "Управление транзакциями"

# 22a33c93f765410bbf466d6b0f2b0e9c
#: ../../topics/db/transactions.txt:633
msgid ""
"Starting with Django 1.6, :func:`atomic` is the only supported API for "
"defining a transaction. Unlike the deprecated APIs, it's nestable and always "
"guarantees atomicity."
msgstr ""

# d45de048f62a4f0c8cf24093e9307fd9
#: ../../topics/db/transactions.txt:637
msgid ""
"In most cases, it will be a drop-in replacement for :func:"
"`commit_on_success`."
msgstr ""

# c24399d9ae5b42b39fbc65afbb988978
#: ../../topics/db/transactions.txt:639
msgid ""
"During the deprecation period, it's possible to use :func:`atomic` within :"
"func:`autocommit`, :func:`commit_on_success` or :func:`commit_manually`. "
"However, the reverse is forbidden, because nesting the old decorators / "
"context managers breaks atomicity."
msgstr ""

# 9abf1c8fcad2463486943b652625baa7
#: ../../topics/db/transactions.txt:645
msgid "Managing autocommit"
msgstr ""

# 4731559906fe4094846e12e482fead47
#: ../../topics/db/transactions.txt:647
msgid ""
"Django 1.6 introduces an explicit :ref:`API for mananging autocommit "
"<managing-autocommit>`."
msgstr ""

# 9dd0a0732ac0467c980f51de4700a9e9
#: ../../topics/db/transactions.txt:650
msgid "To disable autocommit temporarily, instead of::"
msgstr ""

# be1976eccdec4fb68ba9ec54b5b11a2b
# 49db2d3cb3c642aca4b5d875f1085166
#: ../../topics/db/transactions.txt:655 ../../topics/db/transactions.txt:668
msgid "you should now use::"
msgstr ""

# 6635b058db9042768bdbf8df600a4bb2
#: ../../topics/db/transactions.txt:663
msgid "To enable autocommit temporarily, instead of::"
msgstr ""

# 2eb83473673d43cb8a89d7be7d80912b
#: ../../topics/db/transactions.txt:676
msgid ""
"Unless you're implementing a transaction management framework, you shouldn't "
"ever need to do this."
msgstr ""

# 9ec15ad440d54d4eb2d525aa91049116
#: ../../topics/db/transactions.txt:680
#, fuzzy
msgid "Disabling transaction management"
msgstr "Управление транзакциями в представлениях"

# c057812019f44a5ca462d12bd6cb0960
#: ../../topics/db/transactions.txt:682
msgid ""
"Instead of setting ``TRANSACTIONS_MANAGED = True``, set the ``AUTOCOMMIT`` "
"key to ``False`` in the configuration of each database, as explained in :ref:"
"`deactivate-transaction-management`."
msgstr ""

# 6e160d4594d844fb81e495e4923ae430
#: ../../topics/db/transactions.txt:687
msgid "Backwards incompatibilities"
msgstr ""

# bcde12f6e96648a9b7e237857b6a8ce0
#: ../../topics/db/transactions.txt:689
msgid ""
"Since version 1.6, Django uses database-level autocommit in auto mode. "
"Previously, it implemented application-level autocommit by triggering a "
"commit after each ORM write."
msgstr ""

# e4efcaececb24fbaac274b2fd5f3eb37
#: ../../topics/db/transactions.txt:693
msgid ""
"As a consequence, each database query (for instance, an ORM read) started a "
"transaction that lasted until the next ORM write. Such \"automatic "
"transactions\" no longer exist in Django 1.6."
msgstr ""

# b58bbb23fd0a4b0294a49e5ccf661f16
#: ../../topics/db/transactions.txt:697
msgid "There are four known scenarios where this is backwards-incompatible."
msgstr ""

# 7550ec6c43714ea6aad7b63559ce1ddb
#: ../../topics/db/transactions.txt:699
msgid ""
"Note that managed mode isn't affected at all. This section assumes auto "
"mode. See the :ref:`description of modes <transaction-states>` above."
msgstr ""

# a51008b8c14c4236ab04dcf918070cab
#: ../../topics/db/transactions.txt:703
msgid "Sequences of custom SQL queries"
msgstr ""

# 9ee674a5d7fd4433a264dad6c3cfa377
#: ../../topics/db/transactions.txt:705
msgid ""
"If you're executing several :ref:`custom SQL queries <executing-custom-sql>` "
"in a row, each one now runs in its own transaction, instead of sharing the "
"same \"automatic transaction\". If you need to enforce atomicity, you must "
"wrap the sequence of queries in :func:`atomic`."
msgstr ""

# 87edc024f5b642dba718ca18b1ae940a
#: ../../topics/db/transactions.txt:710
msgid ""
"To check for this problem, look for calls to ``cursor.execute()``. They're "
"usually followed by a call to ``transaction.commit_unless_managed()``, which "
"isn't useful any more and should be removed."
msgstr ""

# f49908b01e34490d8d172b18a5033b06
#: ../../topics/db/transactions.txt:715
msgid "Select for update"
msgstr ""

# c829a434a5714ed598c1b8e6063b1ef5
#: ../../topics/db/transactions.txt:717
msgid ""
"If you were relying on \"automatic transactions\" to provide locking "
"between :meth:`~django.db.models.query.QuerySet.select_for_update` and a "
"subsequent write operation — an extremely fragile design, but nonetheless "
"possible — you must wrap the relevant code in :func:`atomic`."
msgstr ""

# cbc37bac7bef4ad4bbe66586c221b631
#: ../../topics/db/transactions.txt:723
msgid "Using a high isolation level"
msgstr ""

# dc3fe6c1c0884d5e9a21280b71928719
#: ../../topics/db/transactions.txt:725
msgid ""
"If you were using the \"repeatable read\" isolation level or higher, and if "
"you relied on \"automatic transactions\" to guarantee consistency between "
"successive reads, the new behavior might be backwards-incompatible. To "
"enforce consistency, you must wrap such sequences in :func:`atomic`."
msgstr ""

# c229c8c04b5e4be6837d705362c43722
#: ../../topics/db/transactions.txt:730
msgid ""
"MySQL defaults to \"repeatable read\" and SQLite to \"serializable\"; they "
"may be affected by this problem."
msgstr ""

# 2a3097eaa3304be78520854efcec422d
#: ../../topics/db/transactions.txt:733
msgid ""
"At the \"read committed\" isolation level or lower, \"automatic transactions"
"\" have no effect on the semantics of any sequence of ORM operations."
msgstr ""

# 16640ca76b3649dfb503a2f9c889641a
#: ../../topics/db/transactions.txt:736
msgid ""
"PostgreSQL and Oracle default to \"read committed\" and aren't affected, "
"unless you changed the isolation level."
msgstr ""

# 23974022d4f14b27ae3e6f86ae8ae2fb
#: ../../topics/db/transactions.txt:740
msgid "Using unsupported database features"
msgstr ""

# c7d691451edd4f14b5e4daadf6c73857
#: ../../topics/db/transactions.txt:742
msgid ""
"With triggers, views, or functions, it's possible to make ORM reads result "
"in database modifications. Django 1.5 and earlier doesn't deal with this "
"case and it's theoretically possible to observe a different behavior after "
"upgrading to Django 1.6 or later. In doubt, use :func:`atomic` to enforce "
"integrity."
msgstr ""

# 671fdefd331e4b37b4a41f471bec31cb
#~ msgid ""
#~ "Django's default behavior is to run with an open transaction which it "
#~ "commits automatically when any built-in, data-altering model function is "
#~ "called. For example, if you call ``model.save()`` or ``model.delete()``, "
#~ "the change will be committed immediately."
#~ msgstr ""
#~ "Обычно Django выполняет создаёт транзакцию и фиксирует её автоматически "
#~ "после выполнения любой встроенной, изменяющей данный функции модели. "
#~ "Например, если вызвать ``model.save()`` или ``model.delete()``, то "
#~ "изменения будут немедленно зафиксированы в базе данных."

# 4e34ed2db647461f92745f91ef77298c
#~ msgid ""
#~ "This is much like the auto-commit setting for most databases. As soon as "
#~ "you perform an action that needs to write to the database, Django "
#~ "produces the ``INSERT``/``UPDATE``/``DELETE`` statements and then does "
#~ "the ``COMMIT``. There's no implicit ``ROLLBACK``."
#~ msgstr ""
#~ "Такое поведение аналогично автоматической фиксации (``auto-commit``), "
#~ "которая предоставляется большинством баз данных. Как только вы выполняете "
#~ "действие, которое требует записи в базу данных, Django выполняет "
#~ "``INSERT``/``UPDATE``/``DELETE`` операторы и затем фиксирует изменения с "
#~ "помощью ``COMMIT``."

# 3c3660b3f0b74509a6ffcce5689d93a2
#~ msgid ""
#~ "The recommended way to handle transactions in Web requests is to tie them "
#~ "to the request and response phases via Django's ``TransactionMiddleware``."
#~ msgstr ""
#~ "Рекомендованным способом использования транзакций в веб запросах является "
#~ "их привязка к фазам запроса и ответа с помощью прослойки (middleware) "
#~ "Django ``TransactionMiddleware``."

# 7f8eb095ff1d49269075e5bb0b172180
#~ msgid ""
#~ "To activate this feature, just add the ``TransactionMiddleware`` "
#~ "middleware to your :setting:`MIDDLEWARE_CLASSES` setting::"
#~ msgstr ""
#~ "Для активации этой возможности, просто добавьте прослойку "
#~ "``TransactionMiddleware`` в настройку :setting:`MIDDLEWARE_CLASSES`::"

# e4076c0602d84aca8f357970353c6d79
#~ msgid ""
#~ "The various cache middlewares are an exception: ``CacheMiddleware``, :"
#~ "class:`~django.middleware.cache.UpdateCacheMiddleware`, and :class:"
#~ "`~django.middleware.cache.FetchFromCacheMiddleware` are never affected. "
#~ "Even when using database caching, Django's cache backend uses its own "
#~ "database cursor (which is mapped to its own database connection "
#~ "internally)."
#~ msgstr ""
#~ "Различные кэширующие прослойки не попадают под это правило: "
#~ "``CacheMiddleware``, :class:`~django.middleware.cache."
#~ "UpdateCacheMiddleware`, и :class:`~django.middleware.cache."
#~ "FetchFromCacheMiddleware`. Даже при использовании кэширования в базу "
#~ "данных, бэкэнд кэша использует для своей работы отдельный курсор БД."

# dbd04ef21c254e1e9f1bb3f34bd99371
#~ msgid ""
#~ "The ``TransactionMiddleware`` only affects the database aliased as "
#~ "\"default\" within your :setting:`DATABASES` setting.  If you are using "
#~ "multiple databases and want transaction control over databases other than "
#~ "\"default\", you will need to write your own transaction middleware."
#~ msgstr ""
#~ " ``TransactionMiddleware`` работает только с базой данной под именем "
#~ "\"default\" в настройке :setting:`DATABASES`.  Если вы используете "
#~ "несколько баз данных и хотите иметь контроль над транзакциями не только "
#~ "для базы \"default\", создайте собственный middleware."

# 6fa9bbeb71e8433ebd1c321b2ae0efa0
#~ msgid ""
#~ "For most people, implicit request-based transactions work wonderfully. "
#~ "However, if you need more fine-grained control over how transactions are "
#~ "managed, you can use a set of functions in ``django.db.transaction`` to "
#~ "control transactions on a per-function or per-code-block basis."
#~ msgstr ""
#~ "Для большинства людей неявные автоматические транзакции работают отлично. "
#~ "Тем не менее, если вам требуется более тонкий контроль над управлением, "
#~ "вы можете воспользоваться рядом функций из ``django.db.transaction`` на "
#~ "уровне функции или блока кода."

# fcaf422700ff40eeb1acf584346984f5
#~ msgid ""
#~ "These functions, described in detail below, can be used in two different "
#~ "ways:"
#~ msgstr ""
#~ "Эти функции, рассмотренные подробно далее, могут быть использованы двумя "
#~ "способами:"

# 956a913338bd480aaf53ed48593ce0e8
#~ msgid "As a decorator_ on a particular function. For example::"
#~ msgstr "В качестве `декоратора <decorator>`_ функции. Например::"

# e0991ef5370844ec9a1c1c19307e6e8f
#~ msgid "As a `context manager`_ around a particular block of code::"
#~ msgstr ""
#~ "В качестве `менеджера контекста <context manager>`_ вокруг блока кода::"

# 3671dfb2664b4059922ba4315c1f2bb4
#~ msgid "Both techniques work with all supported version of Python."
#~ msgstr "Оба способа работают со всеми поддерживаемыми версиями Python."

# fbeb45f0ed8a4f9e9ee5f00a1fa514d2
#~ msgid ""
#~ "For maximum compatibility, all of the examples below show transactions "
#~ "using the decorator syntax, but all of the follow functions may be used "
#~ "as context managers, too."
#~ msgstr ""
#~ "Для наибольшей совместимости, все приведённые далее примеры показывают "
#~ "использование декоратора для управления транзакциями. Но все эти функции "
#~ "могут быть использованы и с контекстным менеджером."

# 30a4cc289b1344cc9f01fbea3a11c5e1
#~ msgid ""
#~ "Although the examples below use view functions as examples, these "
#~ "decorators and context managers can be used anywhere in your code that "
#~ "you need to deal with transactions."
#~ msgstr ""
#~ "Несмотря на то, что приведённые далее примеры используют функции "
#~ "представления, эти декораторы и контекстные менеджеры могут быть "
#~ "использованы в любом месте вашего кода, в котором их применение имеет "
#~ "смысл."

# 554998e77c6c4d238e32b30f8fa632cd
#~ msgid ""
#~ "Use the ``autocommit`` decorator to switch a view function to Django's "
#~ "default commit behavior, regardless of the global transaction setting."
#~ msgstr ""
#~ "Используйте декоратор ``autocommit`` для принудительного использования "
#~ "стандартного механизма Django для автоматической фиксации изменений, вне "
#~ "зависимости от глобальной настройки управления транзакциями."

# 02b9ea05a5884266b1056bc112afad58
#~ msgid "Example::"
#~ msgstr "Пример::"

# c7502285d1e74815ac3435ca2b551d1d
#~ msgid ""
#~ "Use the ``commit_manually`` decorator if you need full control over "
#~ "transactions. It tells Django you'll be managing the transaction on your "
#~ "own."
#~ msgstr ""
#~ "Используйте декоратор ``commit_manually``, если вам требуется полный "
#~ "контроль над транзакциями. Этот декоратор указывает Django, что "
#~ "транзакцией управляете вы сами."

# 875b4bb15d9c400f90883a692d45ae79
#~ msgid "Manual transaction management looks like this::"
#~ msgstr "Ручное управление транзакцией выглядит следующим образом::"

# daab8651e38c4f809413e27bc665b0b2
#~ msgid "Requirements for transaction handling"
#~ msgstr "Требования для обработки транзакций"

# 23bfdb776e1d4ff694f9accb01a6f307
#~ msgid ""
#~ "Django requires that every transaction that is opened is closed before "
#~ "the completion of a request. If you are using :func:`autocommit` (the "
#~ "default commit mode) or :func:`commit_on_success`, this will be done for "
#~ "you automatically (with the exception of :ref:`executing custom SQL "
#~ "<executing-custom-sql>`). However, if you are manually managing "
#~ "transactions (using the :func:`commit_manually` decorator), you must "
#~ "ensure that the transaction is either committed or rolled back before a "
#~ "request is completed."
#~ msgstr ""
#~ "Django требует, чтобы каждая открытая транзакция была закрыта до "
#~ "завершения обработки запроса. Если вы используете :func:`autocommit` "
#~ "(стандартный режим фиксации) или :func:`commit_on_success`, то фиксация "
#~ "будет произведена автоматически(за исключением :ref:`выполенения "
#~ "собственных SQL запросов <executing-custom-sql>`). При ручном управлении "
#~ "транзакциями (при использовании декоратора :func:`commit_manually`), вы "
#~ "должны обеспечить фиксацию или откат изменений до завершения обработки "
#~ "запроса."

# 115a27fb63934eaab4679941a172f7ae
#~ msgid ""
#~ "This applies to all database operations, not just write operations. Even "
#~ "if your transaction only reads from the database, the transaction must be "
#~ "committed or rolled back before you complete a request."
#~ msgstr ""
#~ "Эти требования обязательны для всех операций с базой данных, не только "
#~ "для записи. Даже если ваша транзакция лишь читает из базы данных, "
#~ "транзакция должна быть зафиксирована или отменена до завершения обработки "
#~ "запроса."

# b5534b84eb6c400ca700808a34e28db3
#~ msgid ""
#~ "Control freaks can totally disable all transaction management by setting :"
#~ "setting:`TRANSACTIONS_MANAGED` to ``True`` in the Django settings file."
#~ msgstr ""
#~ "Сторонники параноидального контроля могут полностью отключить всё "
#~ "управление транзакциями, установив параметр :setting:"
#~ "`TRANSACTIONS_MANAGED` равным ``True`` в файле конфигурации Django."

# ef1857570d224ef286cb9dbf58fe958f
#~ msgid ""
#~ "If you do this, Django won't provide any automatic transaction management "
#~ "whatsoever. Middleware will no longer implicitly commit transactions, and "
#~ "you'll need to roll management yourself. This even requires you to commit "
#~ "changes done by middleware somewhere else."
#~ msgstr ""
#~ "Если вы это сделаете, Django не будет обеспечивать автоматическое "
#~ "управление транзакциями. Прослойка не будет неявно фиксировать транзакции "
#~ "и вам потребуется взять эту работу на себя. Также потребуется взять на "
#~ "себя фиксацию изменений, которые сделаны чужим кодом."

# 15fdde51e90c4dab81c228c636a7f32d
#~ msgid ""
#~ "Thus, this is best used in situations where you want to run your own "
#~ "transaction-controlling middleware or do something really strange. In "
#~ "almost all situations, you'll be better off using the default behavior, "
#~ "or the transaction middleware, and only modify selected functions as "
#~ "needed."
#~ msgstr ""
#~ "Следовательно, делать так лучше в ситуации, когда есть неукротимое "
#~ "желание использовать собственную мидлварь для управления транзакциями или "
#~ "что-то эмоционально подобное. В подавляющем большинстве ситуаций лучше "
#~ "продолжать использовать стандартный функционал Django, лишь в особых "
#~ "случаях беря ситуацию под свой контроль."

# a80c88fe20ea456aabbf62945921842c
#~ msgid "Returns the savepoint ID (sid)."
#~ msgstr "Возвращает идентификатор промежуточной точки (``sid``)."

# 6160f11265e64702998045b02ef423f3
#~ msgid "Database-level autocommit"
#~ msgstr "Автоматическая фиксация на уровне базы данных"

# f94077f8ae154c63aad010d88df177f5
#~ msgid ""
#~ "With PostgreSQL 8.2 or later, there is an advanced option to run "
#~ "PostgreSQL with :doc:`database-level autocommit </ref/databases>`. If you "
#~ "use this option, there is no constantly open transaction, so it is always "
#~ "possible to continue after catching an exception. For example::"
#~ msgstr ""
#~ "Начиная с PostgreSQL 8.2 появилась возможность использовать :doc:"
#~ "`автоматическую фиксацию на уровне базы данных </ref/databases>`. Если вы "
#~ "используете эту опцию, то для вам нет постоянно открытой транзакции, "
#~ "таким образом всегда можно продолжить работу после обработки исключения. "
#~ "Например::"

# 9e5ea91594774d028f49958b72e3ab20
#~ msgid ""
#~ "This is not the same as the :ref:`autocommit decorator <topics-db-"
#~ "transactions-autocommit>`. When using database level autocommit there is "
#~ "no database transaction at all. The ``autocommit`` decorator still uses "
#~ "transactions, automatically committing each transaction when a database "
#~ "modifying operation occurs."
#~ msgstr ""
#~ "Эта опция не аналогична :ref:`декоратору автоматической фиксации <topics-"
#~ "db-transactions-autocommit>`. При использовании автоматической фиксации "
#~ "на уровне базы данных транзакций как бы вообще не существует. Декоратор "
#~ "``autocommit`` использует транзакции, автоматически фиксируя каждую из "
#~ "них при изменениях в базе данных."
