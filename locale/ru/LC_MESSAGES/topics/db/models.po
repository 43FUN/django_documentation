# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2012.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-02-15 15:13\n"
"PO-Revision-Date: 2012-02-15 15:13\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# c75c8c34785847fea7f9fbdc89248b33
#: ../../topics/db/models.txt:3
msgid "Models"
msgstr "Модели"

# 11137305691b416eb5e9aa1c16ac72b3
#: ../../topics/db/models.txt:7
msgid ""
"A model is the single, definitive source of data about your data. It "
"contains the essential fields and behaviors of the data you're storing. "
"Generally, each model maps to a single database table."
msgstr ""

# a872f09c8c734beeaacbbe4d58a8694a
#: ../../topics/db/models.txt:11
msgid "The basics:"
msgstr ""

# 8e07ef8c3f9c45ea9a3333b021707ca4
#: ../../topics/db/models.txt:13
msgid ""
"Each model is a Python class that subclasses :class:`django.db.models.Model`."
msgstr ""

# 16525490eea541d7bb28cc797e3ebd1d
#: ../../topics/db/models.txt:16
msgid "Each attribute of the model represents a database field."
msgstr ""

# 635925e93aa145e0898ff9bb0c392917
#: ../../topics/db/models.txt:18
msgid ""
"With all of this, Django gives you an automatically-generated database-"
"access API; see :doc:`/topics/db/queries`."
msgstr ""

# 48b3bceaf80747ceb31d72dff7683f08
#: ../../topics/db/models.txt:23
msgid ""
"A companion to this document is the `official repository of model "
"examples`_. (In the Django source distribution, these examples are in the "
"``tests/modeltests`` directory.)"
msgstr ""

# d6c34f064ebc4f91abc784ab1895902c
#: ../../topics/db/models.txt:30
msgid "Quick example"
msgstr ""

# 6662ca02f4444f73987a64e3dcd853b4
#: ../../topics/db/models.txt:32
msgid ""
"This example model defines a ``Person``, which has a ``first_name`` and "
"``last_name``::"
msgstr ""

# 4cee07cc74a5462e98e086333e98e67e
#: ../../topics/db/models.txt:41
msgid ""
"``first_name`` and ``last_name`` are fields_ of the model. Each field is "
"specified as a class attribute, and each attribute maps to a database column."
msgstr ""

# a84a5d45553242679bd1d8eae161fa09
#: ../../topics/db/models.txt:44
msgid "The above ``Person`` model would create a database table like this:"
msgstr ""

# 4730bf4d3f6949eabd80bf4c2f3afa05
#: ../../topics/db/models.txt:54
msgid "Some technical notes:"
msgstr ""

# d8896eb3092340e29f07e1bb11d6f723
#: ../../topics/db/models.txt:56
msgid ""
"The name of the table, ``myapp_person``, is automatically derived from some "
"model metadata but can be overridden. See :ref:`table-names` for more "
"details.."
msgstr ""

# bae5929c89ca49cab4a4868d78c36ba0
#: ../../topics/db/models.txt:60
msgid ""
"An ``id`` field is added automatically, but this behavior can be overridden. "
"See :ref:`automatic-primary-key-fields`."
msgstr ""

# 8fcbb5f3ed7d400aade29783568860ba
#: ../../topics/db/models.txt:63
msgid ""
"The ``CREATE TABLE`` SQL in this example is formatted using PostgreSQL "
"syntax, but it's worth noting Django uses SQL tailored to the database "
"backend specified in your :doc:`settings file </topics/settings>`."
msgstr ""

# 826c383753254d2e855fda7302398226
#: ../../topics/db/models.txt:68
msgid "Using models"
msgstr ""

# 78f65e394d5f4e6e8d2788f30201fa02
#: ../../topics/db/models.txt:70
msgid ""
"Once you have defined your models, you need to tell Django you're going to "
"*use* those models. Do this by editing your settings file and changing the :"
"setting:`INSTALLED_APPS` setting to add the name of the module that contains "
"your ``models.py``."
msgstr ""

# 6a4bb435accb414998b05c2fd48ad849
#: ../../topics/db/models.txt:75
msgid ""
"For example, if the models for your application live in the module ``mysite."
"myapp.models`` (the package structure that is created for an application by "
"the :djadmin:`manage.py startapp <startapp>` script), :setting:"
"`INSTALLED_APPS` should read, in part::"
msgstr ""

# 2131c6232aef4c4296e7f82b79bc6bc7
#: ../../topics/db/models.txt:86
msgid ""
"When you add new apps to :setting:`INSTALLED_APPS`, be sure to run :djadmin:"
"`manage.py syncdb <syncdb>`."
msgstr ""

# 2478275f7df740429dbba2499c0470de
#: ../../topics/db/models.txt:90
msgid "Fields"
msgstr ""

# ff05361377ab456caef982c1b03972e5
#: ../../topics/db/models.txt:92
msgid ""
"The most important part of a model -- and the only required part of a model "
"-- is the list of database fields it defines. Fields are specified by class "
"attributes."
msgstr ""

# 4faa5224d3d24be6a6d07e2e96b22c48
#: ../../topics/db/models.txt:96
msgid "Example::"
msgstr ""

# 0bd2c34f0de94435ae6eb7014fca8384
#: ../../topics/db/models.txt:110
msgid "Field types"
msgstr ""

# fd6bde64915045d2bf4d43f752b12fb3
#: ../../topics/db/models.txt:112
msgid ""
"Each field in your model should be an instance of the appropriate :class:"
"`~django.db.models.Field` class. Django uses the field class types to "
"determine a few things:"
msgstr ""

# f15b4a8845cf41b59dda9f9abddce649
#: ../../topics/db/models.txt:116
msgid "The database column type (e.g. ``INTEGER``, ``VARCHAR``)."
msgstr ""

# bf96df19f4ae44418a9e1f0d1e9003d8
#: ../../topics/db/models.txt:118
msgid ""
"The :doc:`widget </ref/forms/widgets>` to use in Django's admin interface, "
"if you care to use it (e.g. ``<input type=\"text\">``, ``<select>``)."
msgstr ""

# abeb0ab8d6bc4bfcab6aea7ea1262070
#: ../../topics/db/models.txt:121
msgid ""
"The minimal validation requirements, used in Django's admin and in "
"automatically-generated forms."
msgstr ""

# 7ee114cbbd944107881ab2a306e7dab7
#: ../../topics/db/models.txt:124
msgid ""
"Django ships with dozens of built-in field types; you can find the complete "
"list in the :ref:`model field reference <model-field-types>`. You can easily "
"write your own fields if Django's built-in ones don't do the trick; see :doc:"
"`/howto/custom-model-fields`."
msgstr ""

# c5079fe7999245f6a3e69385c6dc08c8
#: ../../topics/db/models.txt:130
msgid "Field options"
msgstr ""

# 175c8193a39b4af9973bc58980570590
#: ../../topics/db/models.txt:132
msgid ""
"Each field takes a certain set of field-specific arguments (documented in "
"the :ref:`model field reference <model-field-types>`). For example, :class:"
"`~django.db.models.CharField` (and its subclasses) require a :attr:`~django."
"db.models.CharField.max_length` argument which specifies the size of the "
"``VARCHAR`` database field used to store the data."
msgstr ""

# 3f17fb8c77da4f04ae30c62af0416ccd
#: ../../topics/db/models.txt:138
msgid ""
"There's also a set of common arguments available to all field types. All are "
"optional. They're fully explained in the :ref:`reference <common-model-field-"
"options>`, but here's a quick summary of the most often-used ones:"
msgstr ""

# e4553425e4b34a2eb395d54d45459430
#: ../../topics/db/models.txt:144
msgid ""
"If ``True``, Django will store empty values as ``NULL`` in the database. "
"Default is ``False``."
msgstr ""

# b820abbcfac74d64992e2ff1110100d5
#: ../../topics/db/models.txt:148
msgid "If ``True``, the field is allowed to be blank. Default is ``False``."
msgstr ""

# 26473561bb0840be9f0ce1ce2924e2ef
#: ../../topics/db/models.txt:150
msgid ""
"Note that this is different than :attr:`~Field.null`. :attr:`~Field.null` is "
"purely database-related, whereas :attr:`~Field.blank` is validation-related. "
"If a field has :attr:`blank=True <Field.blank>`, validation on Django's "
"admin site will allow entry of an empty value. If a field has :attr:"
"`blank=False <Field.blank>`, the field will be required."
msgstr ""

# a0c174fedb1d43e9ab369c0b5cb2220c
#: ../../topics/db/models.txt:158
msgid ""
"An iterable (e.g., a list or tuple) of 2-tuples to use as choices for this "
"field. If this is given, Django's admin will use a select box instead of the "
"standard text field and will limit choices to the choices given."
msgstr ""

# 10a6d891752e44fca08e69a80a5855ba
#: ../../topics/db/models.txt:163
msgid "A choices list looks like this::"
msgstr ""

# e0c906b6fbe94fa885dc61dacf01666c
#: ../../topics/db/models.txt:173
msgid ""
"The first element in each tuple is the value that will be stored in the "
"database, the second element will be displayed by the admin interface, or in "
"a ModelChoiceField. Given an instance of a model object, the display value "
"for a choices field can be accessed using the ``get_FOO_display`` method. "
"For example::"
msgstr ""

# 484b4e647a074f42b9dd6f0ae7f008f3
#: ../../topics/db/models.txt:199
msgid ""
"The default value for the field. This can be a value or a callable object. "
"If callable it will be called every time a new object is created."
msgstr ""

# 1532782d179643368905bdd9d4aa8349
#: ../../topics/db/models.txt:204
msgid ""
"Extra \"help\" text to be displayed under the field on the object's admin "
"form. It's useful for documentation even if your object doesn't have an "
"admin form."
msgstr ""

# 3648acb2233745cb95a537d0383fa7b7
#: ../../topics/db/models.txt:209
msgid "If ``True``, this field is the primary key for the model."
msgstr ""

# 6041a11148064dca963c102b99e0800b
#: ../../topics/db/models.txt:211
msgid ""
"If you don't specify :attr:`primary_key=True <Field.primary_key>` for any "
"fields in your model, Django will automatically add an :class:`IntegerField` "
"to hold the primary key, so you don't need to set :attr:`primary_key=True "
"<Field.primary_key>` on any of your fields unless you want to override the "
"default primary-key behavior. For more, see :ref:`automatic-primary-key-"
"fields`."
msgstr ""

# 5bf916f31c07402e8b091d16d74d85a3
#: ../../topics/db/models.txt:219
msgid "If ``True``, this field must be unique throughout the table."
msgstr ""

# 3217ae2ca3c24bf38342ee8311ce2b6d
#: ../../topics/db/models.txt:221
msgid ""
"Again, these are just short descriptions of the most common field options. "
"Full details can be found in the :ref:`common model field option reference "
"<common-model-field-options>`."
msgstr ""

# e5a12e69fe5247858e27db8d2d8d3234
#: ../../topics/db/models.txt:228
msgid "Automatic primary key fields"
msgstr ""

# 6ce244681b5743e5852682324429b405
#: ../../topics/db/models.txt:230
msgid "By default, Django gives each model the following field::"
msgstr ""

# 24c366bec6dd4df7a9e49a82bd138c10
#: ../../topics/db/models.txt:234
msgid "This is an auto-incrementing primary key."
msgstr ""

# 89bffbb3539b4d949814a924e5cf202c
#: ../../topics/db/models.txt:236
msgid ""
"If you'd like to specify a custom primary key, just specify :attr:"
"`primary_key=True <Field.primary_key>` on one of your fields. If Django sees "
"you've explicitly set :attr:`Field.primary_key`, it won't add the automatic "
"``id`` column."
msgstr ""

# 0c38bce1f59d4eca90044cb73c40312d
#: ../../topics/db/models.txt:241
msgid ""
"Each model requires exactly one field to have :attr:`primary_key=True <Field."
"primary_key>`."
msgstr ""

# c3bf07d27fc94059a253218131ffb88f
#: ../../topics/db/models.txt:247
msgid "Verbose field names"
msgstr ""

# 6664af7dacb24228bca6d9521237f415
#: ../../topics/db/models.txt:249
msgid ""
"Each field type, except for :class:`~django.db.models.ForeignKey`, :class:"
"`~django.db.models.ManyToManyField` and :class:`~django.db.models."
"OneToOneField`, takes an optional first positional argument -- a verbose "
"name. If the verbose name isn't given, Django will automatically create it "
"using the field's attribute name, converting underscores to spaces."
msgstr ""

# fba4ebde237644238fca77f65c5d708d
#: ../../topics/db/models.txt:256
msgid "In this example, the verbose name is ``\"person's first name\"``::"
msgstr ""

# 8767087247fb46f5ad5d0fb5c09c80b1
#: ../../topics/db/models.txt:260
msgid "In this example, the verbose name is ``\"first name\"``::"
msgstr ""

# 852fd8dff13e43d2abf27a8970b4dafa
#: ../../topics/db/models.txt:264
msgid ""
":class:`~django.db.models.ForeignKey`, :class:`~django.db.models."
"ManyToManyField` and :class:`~django.db.models.OneToOneField` require the "
"first argument to be a model class, so use the :attr:`~Field.verbose_name` "
"keyword argument::"
msgstr ""

# f49ecf24c7ec4bbfaef3946811a3a1b7
#: ../../topics/db/models.txt:273
msgid ""
"The convention is not to capitalize the first letter of the :attr:`~Field."
"verbose_name`. Django will automatically capitalize the first letter where "
"it needs to."
msgstr ""

# eb2fc19ac14c4224b84db6c0017c26e0
#: ../../topics/db/models.txt:278
msgid "Relationships"
msgstr ""

# 7b452d78594f4a8d8331b8919af64061
#: ../../topics/db/models.txt:280
msgid ""
"Clearly, the power of relational databases lies in relating tables to each "
"other. Django offers ways to define the three most common types of database "
"relationships: many-to-one, many-to-many and one-to-one."
msgstr ""

# 7f22c90e884347f4aad9705eebe81853
#: ../../topics/db/models.txt:285
msgid "Many-to-one relationships"
msgstr ""

# 79a76880d75f4fc5b8c217ff317ae086
#: ../../topics/db/models.txt:287
msgid ""
"To define a many-to-one relationship, use :class:`django.db.models."
"ForeignKey`. You use it just like any other :class:`~django.db.models.Field` "
"type: by including it as a class attribute of your model."
msgstr ""

# 22eebec9d2c341a29e7c9ee4ef6a39aa
#: ../../topics/db/models.txt:291
msgid ""
":class:`~django.db.models.ForeignKey` requires a positional argument: the "
"class to which the model is related."
msgstr ""

# 51696ba0bb244b09ace73f872767cacf
#: ../../topics/db/models.txt:294
msgid ""
"For example, if a ``Car`` model has a ``Manufacturer`` -- that is, a "
"``Manufacturer`` makes multiple cars but each ``Car`` only has one "
"``Manufacturer`` -- use the following definitions::"
msgstr ""

# 30d97cb86bb745a6b1f5486212d09b17
#: ../../topics/db/models.txt:305
msgid ""
"You can also create :ref:`recursive relationships <recursive-relationships>` "
"(an object with a many-to-one relationship to itself) and :ref:"
"`relationships to models not yet defined <lazy-relationships>`; see :ref:"
"`the model field reference <ref-foreignkey>` for details."
msgstr ""

# ccabcc7335b846c0a37788cd4575065f
#: ../../topics/db/models.txt:310
msgid ""
"It's suggested, but not required, that the name of a :class:`~django.db."
"models.ForeignKey` field (``manufacturer`` in the example above) be the name "
"of the model, lowercase. You can, of course, call the field whatever you "
"want. For example::"
msgstr ""

# 436ced8e6d4f4ca8b0d345c1f174d85a
#: ../../topics/db/models.txt:321
msgid ""
":class:`~django.db.models.ForeignKey` fields accept a number of extra "
"arguments which are explained in :ref:`the model field reference <foreign-"
"key-arguments>`. These options help define how the relationship should work; "
"all are optional."
msgstr ""

# 3dc08bd753c842739240df6c2e6cd839
#: ../../topics/db/models.txt:326
msgid ""
"For details on accessing backwards-related objects, see the :ref:`Following "
"relationships backward example <backwards-related-objects>`."
msgstr ""

# da62d903554a41a486671705b99b716c
#: ../../topics/db/models.txt:329
msgid "For sample code, see the `Many-to-one relationship model tests`_."
msgstr ""

# 3bbdd50c7d824f3aac7fe8f69c43dff7
#: ../../topics/db/models.txt:334
msgid "Many-to-many relationships"
msgstr ""

# c33c12bceba04710b6a348fd0f2e0d3f
#: ../../topics/db/models.txt:336
msgid ""
"To define a many-to-many relationship, use :class:`~django.db.models."
"ManyToManyField`. You use it just like any other :class:`~django.db.models."
"Field` type: by including it as a class attribute of your model."
msgstr ""

# ed1aa7371b3b49168b370b427cf24ceb
#: ../../topics/db/models.txt:341
msgid ""
":class:`~django.db.models.ManyToManyField` requires a positional argument: "
"the class to which the model is related."
msgstr ""

# 5a395bc8082240dba9f79620afd784c3
#: ../../topics/db/models.txt:344
msgid ""
"For example, if a ``Pizza`` has multiple ``Topping`` objects -- that is, a "
"``Topping`` can be on multiple pizzas and each ``Pizza`` has multiple "
"toppings -- here's how you'd represent that::"
msgstr ""

# 036159cb54464ea4b48c4af40863dafb
#: ../../topics/db/models.txt:355
msgid ""
"As with :class:`~django.db.models.ForeignKey`, you can also create :ref:"
"`recursive relationships <recursive-relationships>` (an object with a many-"
"to-many relationship to itself) and :ref:`relationships to models not yet "
"defined <lazy-relationships>`; see :ref:`the model field reference <ref-"
"manytomany>` for details."
msgstr ""

# 4d14bbbbec5d4f3aaec5ddd2bddce115
#: ../../topics/db/models.txt:361
msgid ""
"It's suggested, but not required, that the name of a :class:`~django.db."
"models.ManyToManyField` (``toppings`` in the example above) be a plural "
"describing the set of related model objects."
msgstr ""

# fa92e32d6d5e4e72ba7e8e070c6c9098
#: ../../topics/db/models.txt:365
msgid ""
"It doesn't matter which model has the :class:`~django.db.models."
"ManyToManyField`, but you should only put it in one of the models -- not "
"both."
msgstr ""

# b6bf3b24895945c1bb0cc254f966d3e1
#: ../../topics/db/models.txt:369
msgid ""
"Generally, :class:`~django.db.models.ManyToManyField` instances should go in "
"the object that's going to be edited in the admin interface, if you're using "
"Django's admin. In the above example, ``toppings`` is in ``Pizza`` (rather "
"than ``Topping`` having a ``pizzas`` :class:`~django.db.models."
"ManyToManyField` ) because it's more natural to think about a pizza having "
"toppings than a topping being on multiple pizzas. The way it's set up above, "
"the ``Pizza`` admin form would let users select the toppings."
msgstr ""

# 18b6df1db5d84e12b1751996f5fcf6de
#: ../../topics/db/models.txt:379
msgid "See the `Many-to-many relationship model example`_ for a full example."
msgstr ""

# bd1b3262e4dc4be7b69ee6fcc4b19540
#: ../../topics/db/models.txt:383
msgid ""
":class:`~django.db.models.ManyToManyField` fields also accept a number of "
"extra arguments which are explained in :ref:`the model field reference "
"<manytomany-arguments>`. These options help define how the relationship "
"should work; all are optional."
msgstr ""

# 8de521f22beb4545890d0721105e7a8a
#: ../../topics/db/models.txt:391
msgid "Extra fields on many-to-many relationships"
msgstr ""

# 881cc28492c44294806fcc95a6abeaab
#: ../../topics/db/models.txt:393
msgid ""
"When you're only dealing with simple many-to-many relationships such as "
"mixing and matching pizzas and toppings, a standard :class:`~django.db."
"models.ManyToManyField` is all you need. However, sometimes you may need to "
"associate data with the relationship between two models."
msgstr ""

# 7b67bd5349904b0a8d3fa6aece30db66
#: ../../topics/db/models.txt:397
msgid ""
"For example, consider the case of an application tracking the musical groups "
"which musicians belong to. There is a many-to-many relationship between a "
"person and the groups of which they are a member, so you could use a :class:"
"`~django.db.models.ManyToManyField` to represent this relationship. However, "
"there is a lot of detail about the membership that you might want to "
"collect, such as the date at which the person joined the group."
msgstr ""

# 1104641cea6c4988a0fbecfc16213634
#: ../../topics/db/models.txt:404
msgid ""
"For these situations, Django allows you to specify the model that will be "
"used to govern the many-to-many relationship. You can then put extra fields "
"on the intermediate model. The intermediate model is associated with the :"
"class:`~django.db.models.ManyToManyField` using the :attr:`through "
"<ManyToManyField.through>` argument to point to the model that will act as "
"an intermediary. For our musician example, the code would look something "
"like this::"
msgstr ""

# 62262b63a1db4820b7072b2826d56b87
#: ../../topics/db/models.txt:431
msgid ""
"When you set up the intermediary model, you explicitly specify foreign keys "
"to the models that are involved in the ManyToMany relation. This explicit "
"declaration defines how the two models are related."
msgstr ""

# b471d98666dd47d78ceb759e381f6afb
#: ../../topics/db/models.txt:435
msgid "There are a few restrictions on the intermediate model:"
msgstr ""

# b8eb7ab534c149c88d74a8aa0861e391
#: ../../topics/db/models.txt:437
msgid ""
"Your intermediate model must contain one - and *only* one - foreign key to "
"the target model (this would be ``Person`` in our example). If you have more "
"than one foreign key, a validation error will be raised."
msgstr ""

# 2061a8ba52884cd088215bfa6bdcb809
#: ../../topics/db/models.txt:441
msgid ""
"Your intermediate model must contain one - and *only* one - foreign key to "
"the source model (this would be ``Group`` in our example). If you have more "
"than one foreign key, a validation error will be raised."
msgstr ""

# 1476c27c9acf4e96a33798b7b3f1f781
#: ../../topics/db/models.txt:445
msgid ""
"The only exception to this is a model which has a many-to-many relationship "
"to itself, through an intermediary model. In this case, two foreign keys to "
"the same model are permitted, but they will be treated as the two "
"(different) sides of the many-to-many relation."
msgstr ""

# 2081c71652b940e7afcca5ee17b322c8
#: ../../topics/db/models.txt:451
msgid ""
"When defining a many-to-many relationship from a model to itself, using an "
"intermediary model, you *must* use :attr:`symmetrical=False <ManyToManyField."
"symmetrical>` (see :ref:`the model field reference <manytomany-arguments>`)."
msgstr ""

# 01725049cc294503b91f8a3313edbf8d
#: ../../topics/db/models.txt:456
msgid ""
"Now that you have set up your :class:`~django.db.models.ManyToManyField` to "
"use your intermediary model (``Membership``, in this case), you're ready to "
"start creating some many-to-many relationships. You do this by creating "
"instances of the intermediate model::"
msgstr ""

# 1bfd10564e43493bad6cc575b400c114
#: ../../topics/db/models.txt:478
msgid ""
"Unlike normal many-to-many fields, you *can't* use ``add``, ``create``, or "
"assignment (i.e., ``beatles.members = [...]``) to create relationships::"
msgstr ""

# 14456bd614ae45cc835151ef144abb83
#: ../../topics/db/models.txt:488
msgid ""
"Why? You can't just create a relationship between a ``Person`` and a "
"``Group`` - you need to specify all the detail for the relationship required "
"by the ``Membership`` model. The simple ``add``, ``create`` and assignment "
"calls don't provide a way to specify this extra detail. As a result, they "
"are disabled for many-to-many relationships that use an intermediate model. "
"The only way to create this type of relationship is to create instances of "
"the intermediate model."
msgstr ""

# f773ee4f86ae46039459463bfaf59dca
#: ../../topics/db/models.txt:496
msgid ""
"The :meth:`~django.db.models.fields.related.RelatedManager.remove` method is "
"disabled for similar reasons. However, the :meth:`~django.db.models.fields."
"related.RelatedManager.clear` method can be used to remove all many-to-many "
"relationships for an instance::"
msgstr ""

# 2aabe69e896849ac96093b93925d55b1
#: ../../topics/db/models.txt:504
msgid ""
"Once you have established the many-to-many relationships by creating "
"instances of your intermediate model, you can issue queries. Just as with "
"normal many-to-many relationships, you can query using the attributes of the "
"many-to-many-related model::"
msgstr ""

# b60fb9138bc8493c98801261c1a6e503
#: ../../topics/db/models.txt:513
msgid ""
"As you are using an intermediate model, you can also query on its "
"attributes::"
msgstr ""

# 427a2e35e2034d1e900aad9a7cf3907c
#: ../../topics/db/models.txt:521
msgid ""
"If you need to access a membership's information you may do so by directly "
"querying the ``Membership`` model::"
msgstr ""

# a795841f93634cad9ed43d08a00e8ab2
#: ../../topics/db/models.txt:530
msgid ""
"Another way to access the same information is by querying the :ref:`many-to-"
"many reverse relationship<m2m-reverse-relationships>` from a ``Person`` "
"object::"
msgstr ""

# 05a03c58509c4fa1a12646acb0676bf6
#: ../../topics/db/models.txt:542
msgid "One-to-one relationships"
msgstr ""

# eeafd424cf734c0ba46cf48407b516c6
#: ../../topics/db/models.txt:544
msgid ""
"To define a one-to-one relationship, use :class:`~django.db.models."
"OneToOneField`. You use it just like any other ``Field`` type: by including "
"it as a class attribute of your model."
msgstr ""

# 13c42a2e475d4e8ebf25de1c7432016e
#: ../../topics/db/models.txt:548
msgid ""
"This is most useful on the primary key of an object when that object "
"\"extends\" another object in some way."
msgstr ""

# c0f2f9040446444284c156f03017df1a
#: ../../topics/db/models.txt:551
msgid ""
":class:`~django.db.models.OneToOneField` requires a positional argument: the "
"class to which the model is related."
msgstr ""

# 76cc78f3a15f4fd8bcb3f3b7c4621e78
#: ../../topics/db/models.txt:554
msgid ""
"For example, if you were building a database of \"places\", you would build "
"pretty standard stuff such as address, phone number, etc. in the database. "
"Then, if you wanted to build a database of restaurants on top of the places, "
"instead of repeating yourself and replicating those fields in the "
"``Restaurant`` model, you could make ``Restaurant`` have a :class:`~django."
"db.models.OneToOneField` to ``Place`` (because a restaurant \"is a\" place; "
"in fact, to handle this you'd typically use :ref:`inheritance <model-"
"inheritance>`, which involves an implicit one-to-one relation)."
msgstr ""

# 138b125c709b4faca7e7ee77a70a49d2
#: ../../topics/db/models.txt:564
msgid ""
"As with :class:`~django.db.models.ForeignKey`, a :ref:`recursive "
"relationship <recursive-relationships>` can be defined and :ref:`references "
"to as-yet undefined models <lazy-relationships>` can be made; see :ref:`the "
"model field reference <ref-onetoone>` for details."
msgstr ""

# aae53d0b31084bcd986ee9dbd5caa01a
#: ../../topics/db/models.txt:572
msgid "See the `One-to-one relationship model example`_ for a full example."
msgstr ""

# 6fd7fa8fa67044c7baf84e5a0a7e37a5
#: ../../topics/db/models.txt:576
msgid ""
":class:`~django.db.models.OneToOneField` fields also accept one optional "
"argument described in the :ref:`model field reference <ref-onetoone>`."
msgstr ""

# 7d4d187042824b49ab745dfed9a3ef91
#: ../../topics/db/models.txt:579
msgid ""
":class:`~django.db.models.OneToOneField` classes used to automatically "
"become the primary key on a model. This is no longer true (although you can "
"manually pass in the :attr:`~django.db.models.Field.primary_key` argument if "
"you like). Thus, it's now possible to have multiple fields of type :class:"
"`~django.db.models.OneToOneField` on a single model."
msgstr ""

# 681baad9d12b42888bab919eabd7ca0d
#: ../../topics/db/models.txt:586
msgid "Models across files"
msgstr ""

# 79ba3b54878a47728c21af58a1e01937
#: ../../topics/db/models.txt:588
msgid ""
"It's perfectly OK to relate a model to one from another app. To do this, "
"import the related model at the top of the model that holds your model. "
"Then, just refer to the other model class wherever needed. For example::"
msgstr ""

# 764f877100a24ad48b840a4a93d7fd0a
#: ../../topics/db/models.txt:599
msgid "Field name restrictions"
msgstr ""

# 8cc4348dc8784a1c91d7b5ae97a5fceb
#: ../../topics/db/models.txt:601
msgid "Django places only two restrictions on model field names:"
msgstr ""

# aaade55d5f354f9c84a3cfd4bd7465df
#: ../../topics/db/models.txt:603
msgid ""
"A field name cannot be a Python reserved word, because that would result in "
"a Python syntax error. For example::"
msgstr ""

# 685bdf35b8c548b48245e5c864f05d70
#: ../../topics/db/models.txt:609
msgid ""
"A field name cannot contain more than one underscore in a row, due to the "
"way Django's query lookup syntax works. For example::"
msgstr ""

# 063723c60f4c476baa6cc284e835cfe2
#: ../../topics/db/models.txt:615
msgid ""
"These limitations can be worked around, though, because your field name "
"doesn't necessarily have to match your database column name. See the :attr:"
"`~Field.db_column` option."
msgstr ""

# 063bd2328bf845cba2bf8daa8358dde7
#: ../../topics/db/models.txt:619
msgid ""
"SQL reserved words, such as ``join``, ``where`` or ``select``, *are* allowed "
"as model field names, because Django escapes all database table names and "
"column names in every underlying SQL query. It uses the quoting syntax of "
"your particular database engine."
msgstr ""

# 7959db8cc3c44bcf92bbf467f1e29e79
#: ../../topics/db/models.txt:625
msgid "Custom field types"
msgstr ""

# 22220a441b0346c8bcd7ff01a5267134
#: ../../topics/db/models.txt:627
msgid ""
"If one of the existing model fields cannot be used to fit your purposes, or "
"if you wish to take advantage of some less common database column types, you "
"can create your own field class. Full coverage of creating your own fields "
"is provided in :doc:`/howto/custom-model-fields`."
msgstr ""

# d850d8a34b6e4c588f995d4a4362050e
#: ../../topics/db/models.txt:635
msgid "Meta options"
msgstr ""

# 34d4641a8f094c999be871cdb639fbc9
#: ../../topics/db/models.txt:637
msgid "Give your model metadata by using an inner ``class Meta``, like so::"
msgstr ""

# faf9ebbe142540338782c6ea0d9827b1
#: ../../topics/db/models.txt:646
msgid ""
"Model metadata is \"anything that's not a field\", such as ordering options "
"(:attr:`~Options.ordering`), database table name (:attr:`~Options."
"db_table`), or human-readable singular and plural names (:attr:`~Options."
"verbose_name` and :attr:`~Options.verbose_name_plural`). None are required, "
"and adding ``class Meta`` to a model is completely optional."
msgstr ""

# f49fb48c1ce346b0b2a347fd900cf580
#: ../../topics/db/models.txt:652
msgid ""
"A complete list of all possible ``Meta`` options can be found in the :doc:"
"`model option reference </ref/models/options>`."
msgstr ""

# fa822af1e2764fc3a663e0cb71e6749f
#: ../../topics/db/models.txt:658
msgid "Model methods"
msgstr ""

# 08563dae2c0241a5b38cce4c02decffd
#: ../../topics/db/models.txt:660
msgid ""
"Define custom methods on a model to add custom \"row-level\" functionality "
"to your objects. Whereas :class:`~django.db.models.Manager` methods are "
"intended to do \"table-wide\" things, model methods should act on a "
"particular model instance."
msgstr ""

# 45db4ef9bc074e53b225b21b9a1f5e97
#: ../../topics/db/models.txt:664
msgid ""
"This is a valuable technique for keeping business logic in one place -- the "
"model."
msgstr ""

# a26149fff6844b05955d8a61d935ac9b
#: ../../topics/db/models.txt:667
msgid "For example, this model has a few custom methods::"
msgstr ""

# a1b3a0a7e9d541e1add1239f358c1938
#: ../../topics/db/models.txt:697
msgid "The last method in this example is a :term:`property`."
msgstr ""

# d0e9c227556e4bb5a4f98ea8d82111f3
#: ../../topics/db/models.txt:699
msgid ""
"The :doc:`model instance reference </ref/models/instances>` has a complete "
"list of :ref:`methods automatically given to each model <model-instance-"
"methods>`. You can override most of these -- see `overriding predefined "
"model methods`_, below -- but there are a couple that you'll almost always "
"want to define:"
msgstr ""

# e9196a373f544e6c80ad9fce97ee5815
#: ../../topics/db/models.txt:705
msgid ""
"A Python \"magic method\" that returns a unicode \"representation\" of any "
"object. This is what Python and Django will use whenever a model instance "
"needs to be coerced and displayed as a plain string. Most notably, this "
"happens when you display an object in an interactive console or in the admin."
msgstr ""

# cba433c5445c47f9a8b2b1efb3171926
#: ../../topics/db/models.txt:711
msgid ""
"You'll always want to define this method; the default isn't very helpful at "
"all."
msgstr ""

# 139ba73fd754467a82bbb8428892dbab
#: ../../topics/db/models.txt:715
msgid ""
"This tells Django how to calculate the URL for an object. Django uses this "
"in its admin interface, and any time it needs to figure out a URL for an "
"object."
msgstr ""

# f175cb7402ab461bace00afdd5b270d8
#: ../../topics/db/models.txt:719
msgid ""
"Any object that has a URL that uniquely identifies it should define this "
"method."
msgstr ""

# 3dd5a207bfbf437396c8604a1fe69802
#: ../../topics/db/models.txt:725
msgid "Overriding predefined model methods"
msgstr ""

# 6d0794484edf4c9189acdefb810db510
#: ../../topics/db/models.txt:727
msgid ""
"There's another set of :ref:`model methods <model-instance-methods>` that "
"encapsulate a bunch of database behavior that you'll want to customize. In "
"particular you'll often want to change the way :meth:`~Model.save` and :meth:"
"`~Model.delete` work."
msgstr ""

# 551d2de781bd4398921ff92f6fd255c2
#: ../../topics/db/models.txt:732
msgid ""
"You're free to override these methods (and any other model method) to alter "
"behavior."
msgstr ""

# c557fde6a64646968696f2ceb861538c
#: ../../topics/db/models.txt:735
msgid ""
"A classic use-case for overriding the built-in methods is if you want "
"something to happen whenever you save an object. For example (see :meth:"
"`~Model.save` for documentation of the parameters it accepts)::"
msgstr ""

# 63719ba064b64de4bddbf512e9d641e9
#: ../../topics/db/models.txt:748
msgid "You can also prevent saving::"
msgstr ""

# eb29513fcdcf442495aafc8fb5652c63
#: ../../topics/db/models.txt:760
msgid ""
"It's important to remember to call the superclass method -- that's that "
"``super(Blog, self).save(*args, **kwargs)`` business -- to ensure that the "
"object still gets saved into the database. If you forget to call the "
"superclass method, the default behavior won't happen and the database won't "
"get touched."
msgstr ""

# 9ebe267dbb764cff9f0f33b2057bc2d6
#: ../../topics/db/models.txt:766
msgid ""
"It's also important that you pass through the arguments that can be passed "
"to the model method -- that's what the ``*args, **kwargs`` bit does. Django "
"will, from time to time, extend the capabilities of built-in model methods, "
"adding new arguments. If you use ``*args, **kwargs`` in your method "
"definitions, you are guaranteed that your code will automatically support "
"those arguments when they are added."
msgstr ""

# d10ca11283834eaabf10de7c7c8bdf81
#: ../../topics/db/models.txt:775
msgid ""
"Note that the :meth:`~Model.delete()` method for an object is not "
"necessarily called when :ref:`deleting objects in bulk using a "
"QuerySet<topics-db-queries-delete>`. To ensure customized delete logic gets "
"executed, you can use :data:`~django.db.models.signals.pre_delete` and/or :"
"data:`~django.db.models.signals.post_delete` signals."
msgstr ""

# 4b5c4b51c1b04b4f9046c09aa3002bf5
#: ../../topics/db/models.txt:782
msgid "Executing custom SQL"
msgstr ""

# 744146f5d4c943798a8e763fff6b89ab
#: ../../topics/db/models.txt:784
msgid ""
"Another common pattern is writing custom SQL statements in model methods and "
"module-level methods. For more details on using raw SQL, see the "
"documentation on :doc:`using raw SQL</topics/db/sql>`."
msgstr ""

# 240cdeffffdc4b5a8b0878e4d5c68813
#: ../../topics/db/models.txt:791
msgid "Model inheritance"
msgstr ""

# 5d0f522f2dad47f1a79fff497061d9cf
#: ../../topics/db/models.txt:793
msgid ""
"Model inheritance in Django works almost identically to the way normal class "
"inheritance works in Python. The only decision you have to make is whether "
"you want the parent models to be models in their own right (with their own "
"database tables), or if the parents are just holders of common information "
"that will only be visible through the child models."
msgstr ""

# 622d456b641c456f93db612633dc82e6
#: ../../topics/db/models.txt:800
msgid "There are three styles of inheritance that are possible in Django."
msgstr ""

# 387406a3478b426ba32b62fbab5dcd7c
#: ../../topics/db/models.txt:802
msgid ""
"Often, you will just want to use the parent class to hold information that "
"you don't want to have to type out for each child model. This class isn't "
"going to ever be used in isolation, so :ref:`abstract-base-classes` are what "
"you're after."
msgstr ""

# edd79a2639a242fc913ee01e878dd3fe
#: ../../topics/db/models.txt:806
msgid ""
"If you're subclassing an existing model (perhaps something from another "
"application entirely) and want each model to have its own database table, :"
"ref:`multi-table-inheritance` is the way to go."
msgstr ""

# 7ffe0a41523d4f0bafa7688dee9ebb35
#: ../../topics/db/models.txt:809
msgid ""
"Finally, if you only want to modify the Python-level behavior of a model, "
"without changing the models fields in any way, you can use :ref:`proxy-"
"models`."
msgstr ""

# 1e0180e04bb341d7a61c669ca83d5ed6
#: ../../topics/db/models.txt:816
msgid "Abstract base classes"
msgstr ""

# 7c5d668e42b5464eac3bfd734efbdd08
#: ../../topics/db/models.txt:818
msgid ""
"Abstract base classes are useful when you want to put some common "
"information into a number of other models. You write your base class and put "
"``abstract=True`` in the :ref:`Meta <meta-options>` class. This model will "
"then not be used to create any database table. Instead, when it is used as a "
"base class for other models, its fields will be added to those of the child "
"class. It is an error to have fields in the abstract base class with the "
"same name as those in the child (and Django will raise an exception)."
msgstr ""

# 9383f0ace70c4e9da05fc5ba2076b8fc
#: ../../topics/db/models.txt:827
msgid "An example::"
msgstr ""

# a9abb69d7ac84aa2a533700033163851
#: ../../topics/db/models.txt:839
msgid ""
"The ``Student`` model will have three fields: ``name``, ``age`` and "
"``home_group``. The ``CommonInfo`` model cannot be used as a normal Django "
"model, since it is an abstract base class. It does not generate a database "
"table or have a manager, and cannot be instantiated or saved directly."
msgstr ""

# 682792d1ed594e50a47bf6e3df554517
#: ../../topics/db/models.txt:844
msgid ""
"For many uses, this type of model inheritance will be exactly what you want. "
"It provides a way to factor out common information at the Python level, "
"whilst still only creating one database table per child model at the "
"database level."
msgstr ""

# 9598bd584a164731a56215b6679ba257
#: ../../topics/db/models.txt:849
msgid "``Meta`` inheritance"
msgstr ""

# 2fb27a269e76447caa3949fb45a940dc
#: ../../topics/db/models.txt:851
msgid ""
"When an abstract base class is created, Django makes any :ref:`Meta <meta-"
"options>` inner class you declared in the base class available as an "
"attribute. If a child class does not declare its own :ref:`Meta <meta-"
"options>` class, it will inherit the parent's :ref:`Meta <meta-options>`. If "
"the child wants to extend the parent's :ref:`Meta <meta-options>` class, it "
"can subclass it. For example::"
msgstr ""

# 831ac15359c64f668a913c7245b87aa7
#: ../../topics/db/models.txt:868
msgid ""
"Django does make one adjustment to the :ref:`Meta <meta-options>` class of "
"an abstract base class: before installing the :ref:`Meta <meta-options>` "
"attribute, it sets ``abstract=False``. This means that children of abstract "
"base classes don't automatically become abstract classes themselves. Of "
"course, you can make an abstract base class that inherits from another "
"abstract base class. You just need to remember to explicitly set "
"``abstract=True`` each time."
msgstr ""

# 52859d946dfc415bb502b4234103f595
#: ../../topics/db/models.txt:875
msgid ""
"Some attributes won't make sense to include in the :ref:`Meta <meta-"
"options>` class of an abstract base class. For example, including "
"``db_table`` would mean that all the child classes (the ones that don't "
"specify their own :ref:`Meta <meta-options>`) would use the same database "
"table, which is almost certainly not what you want."
msgstr ""

# 09581e211daf44158073d27e1b1b4d59
#: ../../topics/db/models.txt:883
msgid "Be careful with ``related_name``"
msgstr ""

# 7077856cb48845cfa1223b1c0b7072c9
#: ../../topics/db/models.txt:885
msgid ""
"If you are using the :attr:`~django.db.models.ForeignKey.related_name` "
"attribute on a ``ForeignKey`` or ``ManyToManyField``, you must always "
"specify a *unique* reverse name for the field. This would normally cause a "
"problem in abstract base classes, since the fields on this class are "
"included into each of the child classes, with exactly the same values for "
"the attributes (including :attr:`~django.db.models.ForeignKey.related_name`) "
"each time."
msgstr ""

# c9d07202089e4079a0d7f2611b037132
#: ../../topics/db/models.txt:893
msgid ""
"To work around this problem, when you are using :attr:`~django.db.models."
"ForeignKey.related_name` in an abstract base class (only), part of the name "
"should contain ``'%(app_label)s'`` and ``'%(class)s'``."
msgstr ""

# cb082381ac45410ca32aaf390a1ada71
#: ../../topics/db/models.txt:897
msgid ""
"``'%(class)s'`` is replaced by the lower-cased name of the child class that "
"the field is used in."
msgstr ""

# 59ad42ab31d74b28af6526904a60f533
#: ../../topics/db/models.txt:899
msgid ""
"``'%(app_label)s'`` is replaced by the lower-cased name of the app the child "
"class is contained within. Each installed application name must be unique "
"and the model class names within each app must also be unique, therefore the "
"resulting name will end up being different."
msgstr ""

# 73355bd1bc6e43fd96353dcc118b6bad
#: ../../topics/db/models.txt:904
msgid "For example, given an app ``common/models.py``::"
msgstr ""

# 42c336bb451a4ea8baee3df5811da3b7
#: ../../topics/db/models.txt:918
msgid "Along with another app ``rare/models.py``::"
msgstr ""

# 74cf8b09934842baa3363d70abbd01c3
#: ../../topics/db/models.txt:925
msgid ""
"The reverse name of the ``common.ChildA.m2m`` field will be "
"``common_childa_related``, whilst the reverse name of the ``common.ChildB."
"m2m`` field will be ``common_childb_related``, and finally the reverse name "
"of the ``rare.ChildB.m2m`` field will be ``rare_childb_related``. It is up "
"to you how you use the ``'%(class)s'`` and ``'%(app_label)s`` portion to "
"construct your related name, but if you forget to use it, Django will raise "
"errors when you validate your models (or run :djadmin:`syncdb`)."
msgstr ""

# 44e39271527e48f9a91e7937097c7652
#: ../../topics/db/models.txt:933
msgid ""
"If you don't specify a :attr:`~django.db.models.ForeignKey.related_name` "
"attribute for a field in an abstract base class, the default reverse name "
"will be the name of the child class followed by ``'_set'``, just as it "
"normally would be if you'd declared the field directly on the child class. "
"For example, in the above code, if the :attr:`~django.db.models.ForeignKey."
"related_name` attribute was omitted, the reverse name for the ``m2m`` field "
"would be ``childa_set`` in the ``ChildA`` case and ``childb_set`` for the "
"``ChildB`` field."
msgstr ""

# d928287b998f41ff8513e1b52abd30a5
#: ../../topics/db/models.txt:945
msgid "Multi-table inheritance"
msgstr ""

# 5b71b61ebf754279add14a1c5195f822
#: ../../topics/db/models.txt:947
msgid ""
"The second type of model inheritance supported by Django is when each model "
"in the hierarchy is a model all by itself. Each model corresponds to its own "
"database table and can be queried and created individually. The inheritance "
"relationship introduces links between the child model and each of its "
"parents (via an automatically-created :class:`~django.db.models."
"OneToOneField`). For example::"
msgstr ""

# bfcc95089b0b4b4da0690f517815f25a
#: ../../topics/db/models.txt:962
msgid ""
"All of the fields of ``Place`` will also be available in ``Restaurant``, "
"although the data will reside in a different database table. So these are "
"both possible::"
msgstr ""

# 3012002ea44449c0a089a10c3d49e6d4
#: ../../topics/db/models.txt:969
msgid ""
"If you have a ``Place`` that is also a ``Restaurant``, you can get from the "
"``Place`` object to the ``Restaurant`` object by using the lower-case "
"version of the model name::"
msgstr ""

# abc97764e172404b8bd083ab31e6a268
#: ../../topics/db/models.txt:978
msgid ""
"However, if ``p`` in the above example was *not* a ``Restaurant`` (it had "
"been created directly as a ``Place`` object or was the parent of some other "
"class), referring to ``p.restaurant`` would raise a Restaurant.DoesNotExist "
"exception."
msgstr ""

# 76d9a43a2a0e4fea8c6afa325018a32f
#: ../../topics/db/models.txt:983
msgid "``Meta`` and multi-table inheritance"
msgstr ""

# 993dc2d9294e45a68c2977e9c967fb40
#: ../../topics/db/models.txt:985
msgid ""
"In the multi-table inheritance situation, it doesn't make sense for a child "
"class to inherit from its parent's :ref:`Meta <meta-options>` class. All "
"the :ref:`Meta <meta-options>` options have already been applied to the "
"parent class and applying them again would normally only lead to "
"contradictory behavior (this is in contrast with the abstract base class "
"case, where the base class doesn't exist in its own right)."
msgstr ""

# 524b703d562542bc8cdeb00cdd56c14f
#: ../../topics/db/models.txt:992
msgid ""
"So a child model does not have access to its parent's :ref:`Meta <meta-"
"options>` class. However, there are a few limited cases where the child "
"inherits behavior from the parent: if the child does not specify an :attr:"
"`~django.db.models.Options.ordering` attribute or a :attr:`~django.db.models."
"Options.get_latest_by` attribute, it will inherit these from its parent."
msgstr ""

# 06e77dc6db65453eb16d86cfddfc8175
#: ../../topics/db/models.txt:999
msgid ""
"If the parent has an ordering and you don't want the child to have any "
"natural ordering, you can explicitly disable it::"
msgstr ""

# ea60945ee09f4f0aa61a920d6036973e
#: ../../topics/db/models.txt:1009
msgid "Inheritance and reverse relations"
msgstr ""

# c11a08bb6aef4be7b7e4b74513b1d4b5
#: ../../topics/db/models.txt:1011
msgid ""
"Because multi-table inheritance uses an implicit :class:`~django.db.models."
"OneToOneField` to link the child and the parent, it's possible to move from "
"the parent down to the child, as in the above example. However, this uses up "
"the name that is the default :attr:`~django.db.models.ForeignKey."
"related_name` value for :class:`~django.db.models.ForeignKey` and :class:"
"`~django.db.models.ManyToManyField` relations.  If you are putting those "
"types of relations on a subclass of another model, you **must** specify the :"
"attr:`~django.db.models.ForeignKey.related_name` attribute on each such "
"field. If you forget, Django will raise an error when you run :djadmin:"
"`validate` or :djadmin:`syncdb`."
msgstr ""

# b6bb8021f39c4c9ebb8b43d8016066a0
#: ../../topics/db/models.txt:1024
msgid ""
"For example, using the above ``Place`` class again, let's create another "
"subclass with a :class:`~django.db.models.ManyToManyField`::"
msgstr ""

# 6b7c685d836847928a3a0395a90ac4ed
#: ../../topics/db/models.txt:1033
msgid "Specifying the parent link field"
msgstr ""

# 3b342bbc60db458dbe652238a4c13d0e
#: ../../topics/db/models.txt:1035
msgid ""
"As mentioned, Django will automatically create a :class:`~django.db.models."
"OneToOneField` linking your child class back any non-abstract parent models. "
"If you want to control the name of the attribute linking back to the parent, "
"you can create your own :class:`~django.db.models.OneToOneField` and set :"
"attr:`parent_link=True <django.db.models.OneToOneField.parent_link>` to "
"indicate that your field is the link back to the parent class."
msgstr ""

# c047d5ee744642dbb949a9cba0dc4ad1
#: ../../topics/db/models.txt:1046
msgid "Proxy models"
msgstr ""

# 30fe4cdf231d46bfa5caafbe188cac13
#: ../../topics/db/models.txt:1048
msgid ""
"When using :ref:`multi-table inheritance <multi-table-inheritance>`, a new "
"database table is created for each subclass of a model. This is usually the "
"desired behavior, since the subclass needs a place to store any additional "
"data fields that are not present on the base class. Sometimes, however, you "
"only want to change the Python behavior of a model -- perhaps to change the "
"default manager, or add a new method."
msgstr ""

# ffe67274918b4f42bec162a1029b5566
#: ../../topics/db/models.txt:1055
msgid ""
"This is what proxy model inheritance is for: creating a *proxy* for the "
"original model. You can create, delete and update instances of the proxy "
"model and all the data will be saved as if you were using the original (non-"
"proxied) model. The difference is that you can change things like the "
"default model ordering or the default manager in the proxy, without having "
"to alter the original."
msgstr ""

# c0d6200a93274980b6e99385b38469aa
#: ../../topics/db/models.txt:1062
msgid ""
"Proxy models are declared like normal models. You tell Django that it's a "
"proxy model by setting the :attr:`~django.db.models.Options.proxy` attribute "
"of the ``Meta`` class to ``True``."
msgstr ""

# 8a3d40b42a1c440db013b79f03a1516a
#: ../../topics/db/models.txt:1066
msgid ""
"For example, suppose you want to add a method to the standard :class:"
"`~django.contrib.auth.models.User` model that will be used in your "
"templates. You can do it like this::"
msgstr ""

# 2ba71b3e967d4f1890f490234bf13c38
#: ../../topics/db/models.txt:1079
msgid ""
"The ``MyUser`` class operates on the same database table as its parent :"
"class:`~django.contrib.auth.models.User` class. In particular, any new "
"instances of :class:`~django.contrib.auth.models.User` will also be "
"accessible through ``MyUser``, and vice-versa::"
msgstr ""

# 1916078fe747413c8ffb17a913e198a5
#: ../../topics/db/models.txt:1088
msgid ""
"You could also use a proxy model to define a different default ordering on a "
"model. The standard :class:`~django.contrib.auth.models.User` model has no "
"ordering defined on it (intentionally; sorting is expensive and we don't "
"want to do it all the time when we fetch users). You might want to regularly "
"order by the ``username`` attribute when you use the proxy. This is easy::"
msgstr ""

# d3a69b9ddecc4ce3a29baf46d1b6e743
#: ../../topics/db/models.txt:1099
msgid ""
"Now normal :class:`~django.contrib.auth.models.User` queries will be "
"unordered and ``OrderedUser`` queries will be ordered by ``username``."
msgstr ""

# a6ca4b8252474f108c6dd2ebac5f62d8
#: ../../topics/db/models.txt:1103
msgid "QuerySets still return the model that was requested"
msgstr ""

# 0b62b0db98e84e6cb3d6d587f31ca6af
#: ../../topics/db/models.txt:1105
msgid ""
"There is no way to have Django return, say, a ``MyUser`` object whenever you "
"query for :class:`~django.contrib.auth.models.User` objects. A queryset for "
"``User`` objects will return those types of objects. The whole point of "
"proxy objects is that code relying on the original ``User`` will use those "
"and your own code can use the extensions you included (that no other code is "
"relying on anyway). It is not a way to replace the ``User`` (or any other) "
"model everywhere with something of your own creation."
msgstr ""

# 53ef4533648e4cb0aadb96df50b49ccf
#: ../../topics/db/models.txt:1114
msgid "Base class restrictions"
msgstr ""

# f3ab4b245e5c46ff944b1cb85d826955
#: ../../topics/db/models.txt:1116
msgid ""
"A proxy model must inherit from exactly one non-abstract model class. You "
"can't inherit from multiple non-abstract models as the proxy model doesn't "
"provide any connection between the rows in the different database tables. A "
"proxy model can inherit from any number of abstract model classes, providing "
"they do *not* define any model fields."
msgstr ""

# fbb86bce98b045e8850ff0c48c0f37d2
#: ../../topics/db/models.txt:1122
msgid ""
"Proxy models inherit any ``Meta`` options that they don't define from their "
"non-abstract model parent (the model they are proxying for)."
msgstr ""

# cabb533e8a29477f91c59c2b0c5f7bd9
#: ../../topics/db/models.txt:1126
msgid "Proxy model managers"
msgstr ""

# ce2c391c7a2d4f8ca5c53000d96d90ef
#: ../../topics/db/models.txt:1128
msgid ""
"If you don't specify any model managers on a proxy model, it inherits the "
"managers from its model parents. If you define a manager on the proxy model, "
"it will become the default, although any managers defined on the parent "
"classes will still be available."
msgstr ""

# a81df51964be4070a5f2d51f0f855fd7
#: ../../topics/db/models.txt:1133
msgid ""
"Continuing our example from above, you could change the default manager used "
"when you query the ``User`` model like this::"
msgstr ""

# 4cf5f584dbbc4b62be6746c13c39b55f
#: ../../topics/db/models.txt:1145
msgid ""
"If you wanted to add a new manager to the Proxy, without replacing the "
"existing default, you can use the techniques described in the :ref:`custom "
"manager <custom-managers-and-inheritance>` documentation: create a base "
"class containing the new managers and inherit that after the primary base "
"class::"
msgstr ""

# 9a432c52fd6a4856a382dbd8e7c1188d
#: ../../topics/db/models.txt:1161
msgid ""
"You probably won't need to do this very often, but, when you do, it's "
"possible."
msgstr ""

# 62f377f567c640b4badb638cab44948c
#: ../../topics/db/models.txt:1167
msgid "Differences between proxy inheritance and  unmanaged models"
msgstr ""

# 9acff3c4e12d45bb9e5d5c95bea6b371
#: ../../topics/db/models.txt:1169
msgid ""
"Proxy model inheritance might look fairly similar to creating an unmanaged "
"model, using the :attr:`~django.db.models.Options.managed` attribute on a "
"model's ``Meta`` class. The two alternatives are not quite the same and it's "
"worth considering which one you should use."
msgstr ""

# 3aa4d7b7229c42a69095862f0b8e7166
#: ../../topics/db/models.txt:1174
msgid ""
"One difference is that you can (and, in fact, must unless you want an empty "
"model) specify model fields on models with ``Meta.managed=False``. You "
"could, with careful setting of :attr:`Meta.db_table <django.db.models."
"Options.db_table>` create an unmanaged model that shadowed an existing model "
"and add Python methods to it. However, that would be very repetitive and "
"fragile as you need to keep both copies synchronized if you make any changes."
msgstr ""

# 092266b85308496e9e32d1993f2f8b7d
#: ../../topics/db/models.txt:1182
msgid ""
"The other difference that is more important for proxy models, is how model "
"managers are handled. Proxy models are intended to behave exactly like the "
"model they are proxying for. So they inherit the parent model's managers, "
"including the default manager. In the normal multi-table model inheritance "
"case, children do not inherit managers from their parents as the custom "
"managers aren't always appropriate when extra fields are involved. The :ref:"
"`manager documentation <custom-managers-and-inheritance>` has more details "
"about this latter case."
msgstr ""

# 8a621d0da9a241a1937c23cb3caffd50
#: ../../topics/db/models.txt:1191
msgid ""
"When these two features were implemented, attempts were made to squash them "
"into a single option. It turned out that interactions with inheritance, in "
"general, and managers, in particular, made the API very complicated and "
"potentially difficult to understand and use. It turned out that two options "
"were needed in any case, so the current separation arose."
msgstr ""

# dc68f51ff7d84b2eb68326648c7c73a8
#: ../../topics/db/models.txt:1197
msgid "So, the general rules are:"
msgstr ""

# c79456c86e4d433b84906bc8a06ee4ab
#: ../../topics/db/models.txt:1199
msgid ""
"If you are mirroring an existing model or database table and don't want all "
"the original database table columns, use ``Meta.managed=False``. That option "
"is normally useful for modeling database views and tables not under the "
"control of Django."
msgstr ""

# 6aea5fefef234ce592994dc913a64486
#: ../../topics/db/models.txt:1203
msgid ""
"If you are wanting to change the Python-only behavior of a model, but keep "
"all the same fields as in the original, use ``Meta.proxy=True``. This sets "
"things up so that the proxy model is an exact copy of the storage structure "
"of the original model when data is saved."
msgstr ""

# 2086c62df8f04f768ee64325305e9547
#: ../../topics/db/models.txt:1209
msgid "Multiple inheritance"
msgstr ""

# 4a0f21b359d4431e8591c3e0b6a2eee4
#: ../../topics/db/models.txt:1211
msgid ""
"Just as with Python's subclassing, it's possible for a Django model to "
"inherit from multiple parent models. Keep in mind that normal Python name "
"resolution rules apply. The first base class that a particular name (e.g. :"
"ref:`Meta <meta-options>`) appears in will be the one that is used; for "
"example, this means that if multiple parents contain a :ref:`Meta <meta-"
"options>` class, only the first one is going to be used, and all others will "
"be ignored."
msgstr ""

# 49a1ffdb8c724403b4e8003c21552d82
#: ../../topics/db/models.txt:1218
msgid ""
"Generally, you won't need to inherit from multiple parents. The main use-"
"case where this is useful is for \"mix-in\" classes: adding a particular "
"extra field or method to every class that inherits the mix-in. Try to keep "
"your inheritance hierarchies as simple and straightforward as possible so "
"that you won't have to struggle to work out where a particular piece of "
"information is coming from."
msgstr ""

# c40aca9df47e4e0fb62cb95e72451eb7
#: ../../topics/db/models.txt:1226
msgid "Field name \"hiding\" is not permitted"
msgstr ""

# 54c9809587054cb0b8b07380a5297651
#: ../../topics/db/models.txt:1228
msgid ""
"In normal Python class inheritance, it is permissible for a child class to "
"override any attribute from the parent class. In Django, this is not "
"permitted for attributes that are :class:`~django.db.models.Field` instances "
"(at least, not at the moment). If a base class has a field called "
"``author``, you cannot create another model field called ``author`` in any "
"class that inherits from that base class."
msgstr ""

# 2ea60b93e66e4d32a0a05223278618ee
#: ../../topics/db/models.txt:1235
msgid ""
"Overriding fields in a parent model leads to difficulties in areas such as "
"initializing new instances (specifying which field is being initialized in "
"``Model.__init__``) and serialization. These are features which normal "
"Python class inheritance doesn't have to deal with in quite the same way, so "
"the difference between Django model inheritance and Python class inheritance "
"isn't arbitrary."
msgstr ""

# bc73a22c790d4d93af6a9975358cec3e
#: ../../topics/db/models.txt:1242
msgid ""
"This restriction only applies to attributes which are :class:`~django.db."
"models.Field` instances. Normal Python attributes can be overridden if you "
"wish. It also only applies to the name of the attribute as Python sees it: "
"if you are manually specifying the database column name, you can have the "
"same column name appearing in both a child and an ancestor model for multi-"
"table inheritance (they are columns in two different database tables)."
msgstr ""

# de3b9fbfc05f455bb72881440bad07f0
#: ../../topics/db/models.txt:1250
msgid ""
"Django will raise a :exc:`~django.core.exceptions.FieldError` if you "
"override any model field in any ancestor model."
msgstr ""
