# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2012.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-02-29 18:30\n"
"PO-Revision-Date: 2012-02-15 15:13\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# d365214a179c4e22a4ee83cad28871cc
#: ../../topics/db/sql.txt:3
msgid "Performing raw SQL queries"
msgstr ""

# 34ee9642c78642bd832a8953e2aaf70b
#: ../../topics/db/sql.txt:7
msgid ""
"When the :doc:`model query APIs </topics/db/queries>` don't go far enough, "
"you can fall back to writing raw SQL. Django gives you two ways of "
"performing raw SQL queries: you can use :meth:`Manager.raw()` to `perform "
"raw queries and return model instances`__, or you can avoid the model layer "
"entirely and `execute custom SQL directly`__."
msgstr ""

# 627f540faf3140fdbcbd4abc520f7517
#: ../../topics/db/sql.txt:19
msgid "Performing raw queries"
msgstr ""

# 225156bf4dde459c835075571eeb0958
#: ../../topics/db/sql.txt:23
msgid ""
"The ``raw()`` manager method can be used to perform raw SQL queries that "
"return model instances:"
msgstr ""

# 469e5687a634474aa610614ca198c9d6
#: ../../topics/db/sql.txt:28
msgid ""
"This method method takes a raw SQL query, executes it, and returns a :class:"
"`~django.db.models.query.RawQuerySet` instance. This :class:`~django.db."
"models.query.RawQuerySet` instance can be iterated over just like an normal "
"QuerySet to provide object instances."
msgstr ""

# f6a47f7c25e2489381a74ce0f02f9541
#: ../../topics/db/sql.txt:33
msgid ""
"This is best illustrated with an example. Suppose you've got the following "
"model::"
msgstr ""

# 8f99810cf930406299eaa5d1d5fd59dd
#: ../../topics/db/sql.txt:40
msgid "You could then execute custom SQL like so::"
msgstr ""

# f9804a1f541043a58ba8f647a2a20823
#: ../../topics/db/sql.txt:47
msgid ""
"Of course, this example isn't very exciting -- it's exactly the same as "
"running ``Person.objects.all()``. However, ``raw()`` has a bunch of other "
"options that make it very powerful."
msgstr ""

# c23b5906efa84836923b7356b69db3b6
#: ../../topics/db/sql.txt:53
msgid "Where'd the name of the ``Person`` table come from in that example?"
msgstr ""

# 0fa27d526bf64d4c87acc3fa14129260
#: ../../topics/db/sql.txt:55
msgid ""
"By default, Django figures out a database table name by joining the model's "
"\"app label\" -- the name you used in ``manage.py startapp`` -- to the "
"model's class name, with an underscore between them. In the example we've "
"assumed that the ``Person`` model lives in an app named ``myapp``, so its "
"table would be ``myapp_person``."
msgstr ""

# af84b86e32134699a59305b01392e3b6
#: ../../topics/db/sql.txt:61
msgid ""
"For more details check out the documentation for the :attr:`~Options."
"db_table` option, which also lets you manually set the database table name."
msgstr ""

# a1d664c2d6f44c4d95ad63ba09aab40d
#: ../../topics/db/sql.txt:67
msgid ""
"No checking is done on the SQL statement that is passed in to ``.raw()``. "
"Django expects that the statement will return a set of rows from the "
"database, but does nothing to enforce that. If the query does not return "
"rows, a (possibly cryptic) error will result."
msgstr ""

# 7168bcb8e867443a9faefbdcbf96ea7a
#: ../../topics/db/sql.txt:73
msgid "Mapping query fields to model fields"
msgstr ""

# 9f72293519c94a2aa77f8f49eea0a8d4
#: ../../topics/db/sql.txt:75
msgid ""
"``raw()`` automatically maps fields in the query to fields on the model."
msgstr ""

# f024e864810b4017a867c5b4a4cb172f
#: ../../topics/db/sql.txt:77
msgid ""
"The order of fields in your query doesn't matter. In other words, both of "
"the following queries work identically::"
msgstr ""

# 2b3d5b8dd46d4b009500d79dff783437
#: ../../topics/db/sql.txt:85
msgid ""
"Matching is done by name. This means that you can use SQL's ``AS`` clauses "
"to map fields in the query to model fields. So if you had some other table "
"that had ``Person`` data in it, you could easily map it into ``Person`` "
"instances::"
msgstr ""

# 6b85120350504f36b11665c1d6ca24dd
#: ../../topics/db/sql.txt:95
msgid ""
"As long as the names match, the model instances will be created correctly."
msgstr ""

# b592b24ebb5c493aa5a0774b7d7e4681
#: ../../topics/db/sql.txt:97
msgid ""
"Alternatively, you can map fields in the query to model fields using the "
"``translations`` argument to ``raw()``. This is a dictionary mapping names "
"of fields in the query to names of fields on the model. For example, the "
"above query could also be written::"
msgstr ""

# 4e86fb276b774c5bb54686d7ae10aab4
#: ../../topics/db/sql.txt:106
msgid "Index lookups"
msgstr ""

# b1866270bef440b09bfd030cb0da9167
#: ../../topics/db/sql.txt:108
msgid ""
"``raw()`` supports indexing, so if you need only the first result you can "
"write::"
msgstr ""

# 4ede67da26cf4329a2fc6d07c63116eb
#: ../../topics/db/sql.txt:113
msgid ""
"However, the indexing and slicing are not performed at the database level. "
"If you have a big amount of ``Person`` objects in your database, it is more "
"efficient to limit the query at the SQL level::"
msgstr ""

# 82dbac07263c4232b77508cc194cf1e3
#: ../../topics/db/sql.txt:120
msgid "Deferring model fields"
msgstr ""

# 47a2ba6ce7b3403ea6fee377a3440121
#: ../../topics/db/sql.txt:122
msgid "Fields may also be left out::"
msgstr ""

# d6be296f2e784543b3b19bda5c89ac6e
#: ../../topics/db/sql.txt:126
msgid ""
"The ``Person`` objects returned by this query will be deferred model "
"instances (see :meth:`~django.db.models.query.QuerySet.defer()`). This means "
"that the fields that are omitted from the query will be loaded on demand. "
"For example::"
msgstr ""

# 7419ece7bf1d41e5a6fa4cfec35b7730
#: ../../topics/db/sql.txt:137
msgid ""
"From outward appearances, this looks like the query has retrieved both the "
"first name and last name. However, this example actually issued 3 queries. "
"Only the first names were retrieved by the raw() query -- the last names "
"were both retrieved on demand when they were printed."
msgstr ""

# 4accffc728f741a4ab9803dda01acb56
#: ../../topics/db/sql.txt:142
msgid ""
"There is only one field that you can't leave out - the primary key field. "
"Django uses the primary key to identify model instances, so it must always "
"be included in a raw query. An ``InvalidQuery`` exception will be raised if "
"you forget to include the primary key."
msgstr ""

# be02e783e817422d90fe5783f6ce5132
#: ../../topics/db/sql.txt:148
msgid "Adding annotations"
msgstr ""

# a5aea20c19c2414db94d95c9bc3cb691
#: ../../topics/db/sql.txt:150
msgid ""
"You can also execute queries containing fields that aren't defined on the "
"model. For example, we could use `PostgreSQL's age() function`__ to get a "
"list of people with their ages calculated by the database::"
msgstr ""

# 7cb40e1d06aa4ea98ddbea047a638c09
#: ../../topics/db/sql.txt:164
msgid "Passing parameters into ``raw()``"
msgstr ""

# f0ef377e43e6463294ca26e5f7cb9c04
#: ../../topics/db/sql.txt:166
msgid ""
"If you need to perform parameterized queries, you can use the ``params`` "
"argument to ``raw()``::"
msgstr ""

# d1ccff552786443cbf71206cc93c66b3
#: ../../topics/db/sql.txt:172
msgid ""
"``params`` is a list of parameters. You'll use ``%s`` placeholders in the "
"query string (regardless of your database engine); they'll be replaced with "
"parameters from the ``params`` list."
msgstr ""

# 67537d8af9fc4a5f9622c0c9feac352a
#: ../../topics/db/sql.txt:178
msgid "**Do not use string formatting on raw queries!**"
msgstr ""

# 37bebbcd691648e88c9fd4d3011db9b4
#: ../../topics/db/sql.txt:180
msgid "It's tempting to write the above query as::"
msgstr ""

# 6d6024d7dcb946c7a1603872d7b95bb8
#: ../../topics/db/sql.txt:185
msgid "**Don't.**"
msgstr ""

# d26883ab7d38404fa63ca94186c35d92
#: ../../topics/db/sql.txt:187
msgid ""
"Using the ``params`` list completely protects you from `SQL injection "
"attacks`__, a common exploit where attackers inject arbitrary SQL into your "
"database. If you use string interpolation, sooner or later you'll fall "
"victim to SQL injection. As long as you remember to always use the "
"``params`` list you'll be protected."
msgstr ""

# a3f6386003184a438fa817a3ee5f75b3
#: ../../topics/db/sql.txt:198
msgid "Executing custom SQL directly"
msgstr ""

# dc53b738ed8f41a58586887c0ec4ef9e
#: ../../topics/db/sql.txt:200
msgid ""
"Sometimes even :meth:`Manager.raw` isn't quite enough: you might need to "
"perform queries that don't map cleanly to models, or directly execute "
"``UPDATE``, ``INSERT``, or ``DELETE`` queries."
msgstr ""

# 57f671e0b9a543ae864b97ee2e406eda
#: ../../topics/db/sql.txt:204
msgid ""
"In these cases, you can always access the database directly, routing around "
"the model layer entirely."
msgstr ""

# ee0f2a5bf7524a5fb495608716c544ee
#: ../../topics/db/sql.txt:207
msgid ""
"The object ``django.db.connection`` represents the default database "
"connection, and ``django.db.transaction`` represents the default database "
"transaction. To use the database connection, call ``connection.cursor()`` to "
"get a cursor object. Then, call ``cursor.execute(sql, [params])`` to execute "
"the SQL and ``cursor.fetchone()`` or ``cursor.fetchall()`` to return the "
"resulting rows. After performing a data changing operation, you should then "
"call ``transaction.commit_unless_managed()`` to ensure your changes are "
"committed to the database. If your query is purely a data retrieval "
"operation, no commit is required. For example::"
msgstr ""

# 4871c2ebadcc4dbca7f725dd583f8320
#: ../../topics/db/sql.txt:232
msgid ""
"If you are using more than one database you can use ``django.db."
"connections`` to obtain the connection (and cursor) for a specific database. "
"``django.db.connections`` is a dictionary-like object that allows you to "
"retrieve a specific connection using its alias::"
msgstr ""

# 5f519b956e5447219236bf3db748bf72
#: ../../topics/db/sql.txt:243
msgid ""
"By default, the Python DB API will return results without their field names, "
"which means you end up with a ``list`` of values, rather than a ``dict``. At "
"a small performance cost, you can return results as a ``dict`` by using "
"something like this::"
msgstr ""

# 0485eb426ffe48e59250e1f3304c3bcf
#: ../../topics/db/sql.txt:256
msgid "Here is an example of the difference between the two::"
msgstr ""

# db6f1acd82324f1db1c8280b3b581ff1
#: ../../topics/db/sql.txt:270
msgid "Transactions and raw SQL"
msgstr ""

# b8e3639b63be4019aedbcecb55f053f2
#: ../../topics/db/sql.txt:272
msgid ""
"When you make a raw SQL call, Django will automatically mark the current "
"transaction as dirty. You must then ensure that the transaction containing "
"those calls is closed correctly. See :ref:`the notes on the requirements of "
"Django's transaction handling <topics-db-transactions-requirements>` for "
"more details."
msgstr ""

# ca4a69d2f2374206a4a055bd967caeb7
#: ../../topics/db/sql.txt:280
msgid ""
"Prior to Django 1.3, it was necessary to manually mark a transaction as "
"dirty using ``transaction.set_dirty()`` when using raw SQL calls."
msgstr ""

# be44bce06957408b9cef2609c74b5e57
#: ../../topics/db/sql.txt:284
msgid "Connections and cursors"
msgstr ""

# f48db64db511477a812e99e1e1d7cbb2
#: ../../topics/db/sql.txt:286
msgid ""
"``connection`` and ``cursor`` mostly implement the standard Python DB-API "
"described in :pep:`249` (except when it comes to :doc:`transaction handling "
"</topics/db/transactions>`). If you're not familiar with the Python DB-API, "
"note that the SQL statement in ``cursor.execute()`` uses placeholders, ``\"%s"
"\"``, rather than adding parameters directly within the SQL. If you use this "
"technique, the underlying database library will automatically add quotes and "
"escaping to your parameter(s) as necessary. (Also note that Django expects "
"the ``\"%s\"`` placeholder, *not* the ``\"?\"`` placeholder, which is used "
"by the SQLite Python bindings. This is for the sake of consistency and "
"sanity.)"
msgstr ""
