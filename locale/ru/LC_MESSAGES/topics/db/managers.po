# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2012.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-02-15 15:13\n"
"PO-Revision-Date: 2012-02-15 15:13\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# 61930e1658fb42b2b653a0a098c8e2ad
#: ../../topics/db/managers.txt:3
msgid "Managers"
msgstr ""

# 5050dcdb08ad4ca983ce1dda5a057010
#: ../../topics/db/managers.txt:9
msgid ""
"A ``Manager`` is the interface through which database query operations are "
"provided to Django models. At least one ``Manager`` exists for every model "
"in a Django application."
msgstr ""

# 894b223178a0406baac6e29a198710ce
#: ../../topics/db/managers.txt:13
msgid ""
"The way ``Manager`` classes work is documented in :doc:`/topics/db/queries`; "
"this document specifically touches on model options that customize "
"``Manager`` behavior."
msgstr ""

# 2af39c610b0548a0a61d3177c7e972d9
#: ../../topics/db/managers.txt:20
msgid "Manager names"
msgstr ""

# a3b3e248ce934396bb7ef40b21c082a8
#: ../../topics/db/managers.txt:22
msgid ""
"By default, Django adds a ``Manager`` with the name ``objects`` to every "
"Django model class. However, if you want to use ``objects`` as a field name, "
"or if you want to use a name other than ``objects`` for the ``Manager``, you "
"can rename it on a per-model basis. To rename the ``Manager`` for a given "
"class, define a class attribute of type ``models.Manager()`` on that model. "
"For example::"
msgstr ""

# 1327005562674b19802a7badae912396
#: ../../topics/db/managers.txt:34
msgid ""
"Using this example model, ``Person.objects`` will generate an "
"``AttributeError`` exception, but ``Person.people.all()`` will provide a "
"list of all ``Person`` objects."
msgstr ""

# fe0fade2addb4972b3f7d298915ae8af
#: ../../topics/db/managers.txt:41
msgid "Custom Managers"
msgstr ""

# cae7b650d65442d793661597ff14b8fc
#: ../../topics/db/managers.txt:43
msgid ""
"You can use a custom ``Manager`` in a particular model by extending the base "
"``Manager`` class and instantiating your custom ``Manager`` in your model."
msgstr ""

# cd9b1f4d2e68470aa9dcb951334f6845
#: ../../topics/db/managers.txt:46
msgid ""
"There are two reasons you might want to customize a ``Manager``: to add "
"extra ``Manager`` methods, and/or to modify the initial ``QuerySet`` the "
"``Manager`` returns."
msgstr ""

# 3828c8cc5fb24680a5dfa72edbf75764
#: ../../topics/db/managers.txt:51
msgid "Adding extra Manager methods"
msgstr ""

# 85247f8eb9ff4a38beab864162fff358
#: ../../topics/db/managers.txt:53
msgid ""
"Adding extra ``Manager`` methods is the preferred way to add \"table-level\" "
"functionality to your models. (For \"row-level\" functionality -- i.e., "
"functions that act on a single instance of a model object -- use :ref:`Model "
"methods <model-methods>`, not custom ``Manager`` methods.)"
msgstr ""

# 2dc149d4b51e4a398d0ff9f43a2d24b9
#: ../../topics/db/managers.txt:58
msgid ""
"A custom ``Manager`` method can return anything you want. It doesn't have to "
"return a ``QuerySet``."
msgstr ""

# adee7a4085984f83b60e13a36fbe3b24
#: ../../topics/db/managers.txt:61
msgid ""
"For example, this custom ``Manager`` offers a method ``with_counts()``, "
"which returns a list of all ``OpinionPoll`` objects, each with an extra "
"``num_responses`` attribute that is the result of an aggregate query::"
msgstr ""

# a29e135dce9446e48259f54060e40677
#: ../../topics/db/managers.txt:92
msgid ""
"With this example, you'd use ``OpinionPoll.objects.with_counts()`` to return "
"that list of ``OpinionPoll`` objects with ``num_responses`` attributes."
msgstr ""

# 271cff5610894aa68edcad4d4286d562
#: ../../topics/db/managers.txt:95
msgid ""
"Another thing to note about this example is that ``Manager`` methods can "
"access ``self.model`` to get the model class to which they're attached."
msgstr ""

# f6db6b6561494262bedd213f56be440f
#: ../../topics/db/managers.txt:99
msgid "Modifying initial Manager QuerySets"
msgstr ""

# 98d182820abf498fbd132b2e102716a6
#: ../../topics/db/managers.txt:101
msgid ""
"A ``Manager``'s base ``QuerySet`` returns all objects in the system. For "
"example, using this model::"
msgstr ""

# 5ceb27b6052f4d20b106f2fbc92f6b51
#: ../../topics/db/managers.txt:108
msgid ""
"...the statement ``Book.objects.all()`` will return all books in the "
"database."
msgstr ""

# db8584cc89f6473bb1fe78208834b62b
#: ../../topics/db/managers.txt:110
msgid ""
"You can override a ``Manager``\\'s base ``QuerySet`` by overriding the "
"``Manager.get_query_set()`` method. ``get_query_set()`` should return a "
"``QuerySet`` with the properties you require."
msgstr ""

# 63002e16ca2b418492834b4c47cb2afe
#: ../../topics/db/managers.txt:114
msgid ""
"For example, the following model has *two* ``Manager``\\s -- one that "
"returns all objects, and one that returns only the books by Roald Dahl::"
msgstr ""

# 894b16139a8d4936bf10cec249d3f6b5
#: ../../topics/db/managers.txt:130
msgid ""
"With this sample model, ``Book.objects.all()`` will return all books in the "
"database, but ``Book.dahl_objects.all()`` will only return the ones written "
"by Roald Dahl."
msgstr ""

# f269cf8b327c409b801eadc6f513151b
#: ../../topics/db/managers.txt:134
msgid ""
"Of course, because ``get_query_set()`` returns a ``QuerySet`` object, you "
"can use ``filter()``, ``exclude()`` and all the other ``QuerySet`` methods "
"on it. So these statements are all legal::"
msgstr ""

# 4ac027a030c640f897a5c629891ab1bd
#: ../../topics/db/managers.txt:142
msgid ""
"This example also pointed out another interesting technique: using multiple "
"managers on the same model. You can attach as many ``Manager()`` instances "
"to a model as you'd like. This is an easy way to define common \"filters\" "
"for your models."
msgstr ""

# 140b18b8413b4f039fc3a5fad89b03fb
#: ../../topics/db/managers.txt:147
msgid "For example::"
msgstr ""

# 5e838ecd7df54ddba974cfe05aaf9ef3
#: ../../topics/db/managers.txt:165
msgid ""
"This example allows you to request ``Person.men.all()``, ``Person.women.all()"
"``, and ``Person.people.all()``, yielding predictable results."
msgstr ""

# 0510fbadbf384944acd75afd4b53a43c
#: ../../topics/db/managers.txt:168
msgid ""
"If you use custom ``Manager`` objects, take note that the first ``Manager`` "
"Django encounters (in the order in which they're defined in the model) has a "
"special status. Django interprets the first ``Manager`` defined in a class "
"as the \"default\" ``Manager``, and several parts of Django (including :"
"djadmin:`dumpdata`) will use that ``Manager`` exclusively for that model. As "
"a result, it's a good idea to be careful in your choice of default manager "
"in order to avoid a situation where overriding ``get_query_set()`` results "
"in an inability to retrieve objects you'd like to work with."
msgstr ""

# 04a59d1b7d54470f99cb87a7ef34aa99
#: ../../topics/db/managers.txt:181
msgid "Using managers for related object access"
msgstr ""

# 571edc9b4cd0425885b44082768ea012
#: ../../topics/db/managers.txt:183
msgid ""
"By default, Django uses an instance of a \"plain\" manager class when "
"accessing related objects (i.e. ``choice.poll``), not the default manager on "
"the related object. This is because Django needs to be able to retrieve the "
"related object, even if it would otherwise be filtered out (and hence be "
"inaccessible) by the default manager."
msgstr ""

# ca74f3a91ebc4f69a363ca7b86670e9a
#: ../../topics/db/managers.txt:189
msgid ""
"If the normal plain manager class (:class:`django.db.models.Manager`) is not "
"appropriate for your circumstances, you can force Django to use the same "
"class as the default manager for your model by setting the "
"`use_for_related_fields` attribute on the manager class. This is documented "
"fully below_."
msgstr ""

# 791f89fd06434976b913c8dd0d7275ce
#: ../../topics/db/managers.txt:199
msgid "Custom managers and model inheritance"
msgstr ""

# bed45920458446329f7eec9461583868
#: ../../topics/db/managers.txt:201
msgid ""
"Class inheritance and model managers aren't quite a perfect match for each "
"other. Managers are often specific to the classes they are defined on and "
"inheriting them in subclasses isn't necessarily a good idea. Also, because "
"the first manager declared is the *default manager*, it is important to "
"allow that to be controlled. So here's how Django handles custom managers "
"and :ref:`model inheritance <model-inheritance>`:"
msgstr ""

# 048894b8e7ba48c0b87b68cd7ecaaa8f
#: ../../topics/db/managers.txt:208
msgid ""
"Managers defined on non-abstract base classes are *not* inherited by child "
"classes. If you want to reuse a manager from a non-abstract base, redeclare "
"it explicitly on the child class. These sorts of managers are likely to be "
"fairly specific to the class they are defined on, so inheriting them can "
"often lead to unexpected results (particularly as far as the default manager "
"goes). Therefore, they aren't passed onto child classes."
msgstr ""

# 02ef7837aaa54c9a89d20ce2854cbe07
#: ../../topics/db/managers.txt:216
msgid ""
"Managers from abstract base classes are always inherited by the child class, "
"using Python's normal name resolution order (names on the child class "
"override all others; then come names on the first parent class, and so on). "
"Abstract base classes are designed to capture information and behavior that "
"is common to their child classes. Defining common managers is an appropriate "
"part of this common information."
msgstr ""

# c9cba1e2b12d41f5aec01df6056f8f07
#: ../../topics/db/managers.txt:223
msgid ""
"The default manager on a class is either the first manager declared on the "
"class, if that exists, or the default manager of the first abstract base "
"class in the parent hierarchy, if that exists. If no default manager is "
"explicitly declared, Django's normal default manager is used."
msgstr ""

# 505bc79c9ef04a128006b02be2c90e1e
#: ../../topics/db/managers.txt:229
msgid ""
"These rules provide the necessary flexibility if you want to install a "
"collection of custom managers on a group of models, via an abstract base "
"class, but still customize the default manager. For example, suppose you "
"have this base class::"
msgstr ""

# e9076b62c5c9481b975e594b091660d1
#: ../../topics/db/managers.txt:241
msgid ""
"If you use this directly in a subclass, ``objects`` will be the default "
"manager if you declare no managers in the base class::"
msgstr ""

# 72bd2e49210d4a60837d7123a7887f24
#: ../../topics/db/managers.txt:248
msgid ""
"If you want to inherit from ``AbstractBase``, but provide a different "
"default manager, you can provide the default manager on the child class::"
msgstr ""

# 1d0f1648cf7c40058e686c45cf81b56f
#: ../../topics/db/managers.txt:256
msgid ""
"Here, ``default_manager`` is the default. The ``objects`` manager is still "
"available, since it's inherited. It just isn't used as the default."
msgstr ""

# f9f5ba5a373546f1ab62beaa748acc9a
#: ../../topics/db/managers.txt:259
msgid ""
"Finally for this example, suppose you want to add extra managers to the "
"child class, but still use the default from ``AbstractBase``. You can't add "
"the new manager directly in the child class, as that would override the "
"default and you would have to also explicitly include all the managers from "
"the abstract base class. The solution is to put the extra managers in "
"another base class and introduce it into the inheritance hierarchy *after* "
"the defaults::"
msgstr ""

# 4c9a9a892dde44e9bd42926f1ee9584d
#: ../../topics/db/managers.txt:278
msgid "Implementation concerns"
msgstr ""

# ac9c0bc2e9194ff59fc02491554e1b3b
#: ../../topics/db/managers.txt:280
msgid ""
"Whatever features you add to your custom ``Manager``, it must be possible to "
"make a shallow copy of a ``Manager`` instance; i.e., the following code must "
"work::"
msgstr ""

# 63f6ee7f3bc4483eadda8d9472a9520b
#: ../../topics/db/managers.txt:288
msgid ""
"Django makes shallow copies of manager objects during certain queries; if "
"your Manager cannot be copied, those queries will fail."
msgstr ""

# 5cb300a201834905b90e9f40ef7df99f
#: ../../topics/db/managers.txt:291
msgid ""
"This won't be an issue for most custom managers. If you are just adding "
"simple methods to your ``Manager``, it is unlikely that you will "
"inadvertently make instances of your ``Manager`` uncopyable. However, if "
"you're overriding ``__getattr__`` or some other private method of your "
"``Manager`` object that controls object state, you should ensure that you "
"don't affect the ability of your ``Manager`` to be copied."
msgstr ""

# 35f77fec45744528b21cad7e6ddf8002
#: ../../topics/db/managers.txt:302
msgid "Controlling automatic Manager types"
msgstr ""

# 67be4a6f3ed9419ca311ab1922ac0e05
#: ../../topics/db/managers.txt:304
msgid ""
"This document has already mentioned a couple of places where Django creates "
"a manager class for you: `default managers`_ and the \"plain\" manager used "
"to `access related objects`_. There are other places in the implementation "
"of Django where temporary plain managers are needed. Those automatically "
"created managers will normally be instances of the :class:`django.db.models."
"Manager` class."
msgstr ""

# 03ed13cb362043568f2572baeb6f9f84
#: ../../topics/db/managers.txt:314
msgid ""
"Throughout this section, we will use the term \"automatic manager\" to mean "
"a manager that Django creates for you -- either as a default manager on a "
"model with no managers, or to use temporarily when accessing related objects."
msgstr ""

# b8cd5397754b418f8b6d06fd129cdf08
#: ../../topics/db/managers.txt:318
msgid ""
"Sometimes this default class won't be the right choice. One example is in "
"the :mod:`django.contrib.gis` application that ships with Django itself. All "
"``gis`` models must use a special manager class (:class:`~django.contrib.gis."
"db.models.GeoManager`) because they need a special queryset (:class:`~django."
"contrib.gis.db.models.GeoQuerySet`) to be used for interacting with the "
"database.  It turns out that models which require a special manager like "
"this need to use the same manager class wherever an automatic manager is "
"created."
msgstr ""

# 7546beb312184e7d973a94263ce477d5
#: ../../topics/db/managers.txt:326
msgid ""
"Django provides a way for custom manager developers to say that their "
"manager class should be used for automatic managers whenever it is the "
"default manager on a model. This is done by setting the "
"``use_for_related_fields`` attribute on the manager class::"
msgstr ""

# 7b38bf56190a4b59a93b19cf80e01d39
#: ../../topics/db/managers.txt:336
msgid ""
"If this attribute is set on the *default* manager for a model (only the "
"default manager is considered in these situations), Django will use that "
"class whenever it needs to automatically create a manager for the class.  "
"Otherwise, it will use :class:`django.db.models.Manager`."
msgstr ""

# b120df99300441f3a13a836b55d762c8
#: ../../topics/db/managers.txt:343
msgid ""
"Given the purpose for which it's used, the name of this attribute "
"(``use_for_related_fields``) might seem a little odd. Originally, the "
"attribute only controlled the type of manager used for related field access, "
"which is where the name came from. As it became clear the concept was more "
"broadly useful, the name hasn't been changed. This is primarily so that "
"existing code will :doc:`continue to work </misc/api-stability>` in future "
"Django versions."
msgstr ""

# 856be24e84aa47aabe7f65cd2c2b9315
#: ../../topics/db/managers.txt:352
msgid "Writing correct Managers for use in automatic Manager instances"
msgstr ""

# 09808f0f6b504919930aa73ba28b5b72
#: ../../topics/db/managers.txt:354
msgid ""
"As already suggested by the `django.contrib.gis` example, above, the "
"``use_for_related_fields`` feature is primarily for managers that need to "
"return a custom ``QuerySet`` subclass. In providing this functionality in "
"your manager, there are a couple of things to remember."
msgstr ""

# b7a8e8663841420d87034926a3774a87
#: ../../topics/db/managers.txt:360
msgid "Do not filter away any results in this type of manager subclass"
msgstr ""

# 3f856d857cf141bd80a168a0047a78be
#: ../../topics/db/managers.txt:362
msgid ""
"One reason an automatic manager is used is to access objects that are "
"related to from some other model. In those situations, Django has to be able "
"to see all the objects for the model it is fetching, so that *anything* "
"which is referred to can be retrieved."
msgstr ""

# b5730aa46e4242f2b7e48819889e0000
#: ../../topics/db/managers.txt:367
msgid ""
"If you override the ``get_query_set()`` method and filter out any rows, "
"Django will return incorrect results. Don't do that. A manager that filters "
"results in ``get_query_set()`` is not appropriate for use as an automatic "
"manager."
msgstr ""

# 7db1d09d1bc04699aba6bf65670aa0aa
#: ../../topics/db/managers.txt:372
msgid "Set ``use_for_related_fields`` when you define the class"
msgstr ""

# c3015c48723d49479915f56c2bcf33f3
#: ../../topics/db/managers.txt:374
msgid ""
"The ``use_for_related_fields`` attribute must be set on the manager *class*, "
"not on an *instance* of the class. The earlier example shows the correct way "
"to set it, whereas the following will not work::"
msgstr ""

# 217bc644c3894cf09b20027f2547e4e6
#: ../../topics/db/managers.txt:393
msgid ""
"You also shouldn't change the attribute on the class object after it has "
"been used in a model, since the attribute's value is processed when the "
"model class is created and not subsequently reread. Set the attribute on the "
"manager class when it is first defined, as in the initial example of this "
"section and everything will work smoothly."
msgstr ""
