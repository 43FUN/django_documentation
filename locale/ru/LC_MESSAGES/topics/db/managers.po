# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated <>, 2012.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-02-27 00:21\n"
"PO-Revision-Date: 2013-06-07 17:54+0300\n"
"Last-Translator: Dmitriy Kostochko <alerion.um@gmail.com>\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# 61930e1658fb42b2b653a0a098c8e2ad
#: ../../topics/db/managers.txt:3
msgid "Managers"
msgstr "Менеджеры"

# 5050dcdb08ad4ca983ce1dda5a057010
#: ../../topics/db/managers.txt:9
msgid "A ``Manager`` is the interface through which database query operations are provided to Django models. At least one ``Manager`` exists for every model in a Django application."
msgstr "Менеджер(``Manager``) - это интерфейс, через который создаются запросы к моделям Django. Каждая модель имеет хотя бы один менеджер."

# 894b223178a0406baac6e29a198710ce
#: ../../topics/db/managers.txt:13
msgid "The way ``Manager`` classes work is documented in :doc:`/topics/db/queries`; this document specifically touches on model options that customize ``Manager`` behavior."
msgstr "Как работает ``Manager`` описано в разделе :doc:`/topics/db/queries`; этот раздел описывает как изменить поведение менеджера модели."

# 2af39c610b0548a0a61d3177c7e972d9
#: ../../topics/db/managers.txt:20
msgid "Manager names"
msgstr "Имя менеджера"

# a3b3e248ce934396bb7ef40b21c082a8
#: ../../topics/db/managers.txt:22
msgid "By default, Django adds a ``Manager`` with the name ``objects`` to every Django model class. However, if you want to use ``objects`` as a field name, or if you want to use a name other than ``objects`` for the ``Manager``, you can rename it on a per-model basis. To rename the ``Manager`` for a given class, define a class attribute of type ``models.Manager()`` on that model. For example::"
msgstr "По умолчанию Django добавляет ``Manager`` с именем ``objects`` для каждого класса модели. Однако, если вы хотите использовать ``objects``, как имя поля, или хотите использовать название отличное от ``objects`` для ``Manager``, вы можете переименовать его для модели. Что бы переименовать ``Manager`` добавьте в класс атрибут, значение которого экземпляр ``models.Manager()``. Например::"

# 1327005562674b19802a7badae912396
#: ../../topics/db/managers.txt:34
msgid "Using this example model, ``Person.objects`` will generate an ``AttributeError`` exception, but ``Person.people.all()`` will provide a list of all ``Person`` objects."
msgstr "Обращение к ``Person.objects`` вызовет исключение ``AttributeError``, в то время как ``Person.people.all()`` вернет список всех объектов ``Person``."

# fe0fade2addb4972b3f7d298915ae8af
#: ../../topics/db/managers.txt:41
msgid "Custom Managers"
msgstr "Собственные менеджеры"

# cae7b650d65442d793661597ff14b8fc
#: ../../topics/db/managers.txt:43
msgid "You can use a custom ``Manager`` in a particular model by extending the base ``Manager`` class and instantiating your custom ``Manager`` in your model."
msgstr "Вы можете использовать собственный менеджер создав его через наследование от основного класса ``Manager`` и добавив его в модель."

# cd9b1f4d2e68470aa9dcb951334f6845
#: ../../topics/db/managers.txt:46
msgid "There are two reasons you might want to customize a ``Manager``: to add extra ``Manager`` methods, and/or to modify the initial ``QuerySet`` the ``Manager`` returns."
msgstr "Есть две причины почему вам может понадобиться изменить ``Manager``: добавить дополнительные методы, и/или изменить базовый ``QuerySet``, который возвращает ``Manager``."

# 3828c8cc5fb24680a5dfa72edbf75764
#: ../../topics/db/managers.txt:51
msgid "Adding extra Manager methods"
msgstr "Добавление методов в менеджер"

# 85247f8eb9ff4a38beab864162fff358
#: ../../topics/db/managers.txt:53
msgid "Adding extra ``Manager`` methods is the preferred way to add \"table-level\" functionality to your models. (For \"row-level\" functionality -- i.e., functions that act on a single instance of a model object -- use :ref:`Model methods <model-methods>`, not custom ``Manager`` methods.)"
msgstr "Добавление дополнительных методов в ``Manager`` - лучший способ добавить \"table-level\" функционал в вашу модель. (Для \"row-level\" функционала -- то есть функции, которые работают с одним экземпляром модели -- используйте :ref:`методы модели <model-methods>`, а не методы менеджера.)"

# 2dc149d4b51e4a398d0ff9f43a2d24b9
#: ../../topics/db/managers.txt:58
msgid "A custom ``Manager`` method can return anything you want. It doesn't have to return a ``QuerySet``."
msgstr "Методы ``Manager`` могут возвращать что угодно. И это не обязательно должен быть ``QuerySet``."

# adee7a4085984f83b60e13a36fbe3b24
#: ../../topics/db/managers.txt:61
msgid "For example, this custom ``Manager`` offers a method ``with_counts()``, which returns a list of all ``OpinionPoll`` objects, each with an extra ``num_responses`` attribute that is the result of an aggregate query::"
msgstr "Например, этот ``Manager`` имеет метод ``with_counts()``, который возвращает список всех объектов ``OpinionPoll``, каждый из которых содержит дополнительный атрибут ``num_responses`` с результатом агрегации::"

# a29e135dce9446e48259f54060e40677
#: ../../topics/db/managers.txt:92
msgid "With this example, you'd use ``OpinionPoll.objects.with_counts()`` to return that list of ``OpinionPoll`` objects with ``num_responses`` attributes."
msgstr "Вы можете использовать ``OpinionPoll.objects.with_counts()`` что бы получить список объектов ``OpinionPoll`` с атрибутом ``num_responses``."

# 271cff5610894aa68edcad4d4286d562
#: ../../topics/db/managers.txt:95
msgid "Another thing to note about this example is that ``Manager`` methods can access ``self.model`` to get the model class to which they're attached."
msgstr "Стоит отметить, что методы ``Manager`` могут обращаться к ``self.model`` что бы получить класс модели, которая использует этот менеджер."

# f6db6b6561494262bedd213f56be440f
#: ../../topics/db/managers.txt:99
msgid "Modifying initial Manager QuerySets"
msgstr "Изменение базового QuerySets менеджера"

# 98d182820abf498fbd132b2e102716a6
#: ../../topics/db/managers.txt:101
msgid "A ``Manager``'s base ``QuerySet`` returns all objects in the system. For example, using this model::"
msgstr "Базовый ``QuerySet`` менеджера возвращает все объекты модели. Возьмем для примера эту модель::"

# 5ceb27b6052f4d20b106f2fbc92f6b51
#: ../../topics/db/managers.txt:108
msgid "...the statement ``Book.objects.all()`` will return all books in the database."
msgstr "... ``Book.objects.all()`` вернет все книги из базы данных."

# db8584cc89f6473bb1fe78208834b62b
#: ../../topics/db/managers.txt:110
msgid "You can override a ``Manager``\\'s base ``QuerySet`` by overriding the ``Manager.get_query_set()`` method. ``get_query_set()`` should return a ``QuerySet`` with the properties you require."
msgstr "Вы можете изменить базовый ``QuerySet`` переопределив метод ``Manager.get_query_set()``. Метод ``get_query_set()`` возвращает ``QuerySet`` с необходимыми вам свойствами."

# 63002e16ca2b418492834b4c47cb2afe
#: ../../topics/db/managers.txt:114
msgid "For example, the following model has *two* ``Manager``\\s -- one that returns all objects, and one that returns only the books by Roald Dahl::"
msgstr "Например, следующая модель содержит *два* менеджера -- один возвращает все книги, второй - только книги Roald Dahl::"

# 894b16139a8d4936bf10cec249d3f6b5
#: ../../topics/db/managers.txt:130
msgid "With this sample model, ``Book.objects.all()`` will return all books in the database, but ``Book.dahl_objects.all()`` will only return the ones written by Roald Dahl."
msgstr "Для этой простой модели, ``Book.objects.all()`` вернет все книги из базы данных, в то время как ``Book.dahl_objects.all()`` вернет книги Roald Dahl."

# f269cf8b327c409b801eadc6f513151b
#: ../../topics/db/managers.txt:134
msgid "Of course, because ``get_query_set()`` returns a ``QuerySet`` object, you can use ``filter()``, ``exclude()`` and all the other ``QuerySet`` methods on it. So these statements are all legal::"
msgstr "Конечно же, т.к. ``get_query_set()`` возвращает экземпляр ``QuerySet``, вы можете использовать ``filter()``, ``exclude()`` и остальные методы ``QuerySet``. Например::"

# 4ac027a030c640f897a5c629891ab1bd
#: ../../topics/db/managers.txt:142
msgid "This example also pointed out another interesting technique: using multiple managers on the same model. You can attach as many ``Manager()`` instances to a model as you'd like. This is an easy way to define common \"filters\" for your models."
msgstr "Этот пример так же показывает как мы можем использовать несколько менеджеров в одной модели. Вы можете добавить столько экземпляров ``Manager()``, сколько вы пожелаете. Это позволяет легко добавить набор \"стандартных\" фильтров для вашей модели."

# 140b18b8413b4f039fc3a5fad89b03fb
#: ../../topics/db/managers.txt:147
msgid "For example::"
msgstr "Например::"

# 5e838ecd7df54ddba974cfe05aaf9ef3
#: ../../topics/db/managers.txt:165
msgid "This example allows you to request ``Person.men.all()``, ``Person.women.all()``, and ``Person.people.all()``, yielding predictable results."
msgstr "Этот пример позволяет выполнить ``Person.men.all()``, ``Person.women.all()``, и ``Person.people.all()`` для получения соответствующего результата."

# 0510fbadbf384944acd75afd4b53a43c
#: ../../topics/db/managers.txt:168
msgid "If you use custom ``Manager`` objects, take note that the first ``Manager`` Django encounters (in the order in which they're defined in the model) has a special status. Django interprets the first ``Manager`` defined in a class as the \"default\" ``Manager``, and several parts of Django (including :djadmin:`dumpdata`) will use that ``Manager`` exclusively for that model. As a result, it's a good idea to be careful in your choice of default manager in order to avoid a situation where overriding ``get_query_set()`` results in an inability to retrieve objects you'd like to work with."
msgstr "При использовании собственного объекта ``Manager``,помните что первый ``Manager``, который заметит Django (в том порядке, в котором они определяются в модели) имеет особый статус. Для Django первый ``Manager`` будет ``Manager`` \"по умолчанию\", и некоторые компоненты Django (включая :djadmin:`dumpdata`) будут использовать этот ``Manager``. Поэтому нужно быть осторожным при выборе менеджера по умолчанию, что бы переопределив ``get_query_set()`` не попасть в ситуацию, когда вы не можете получить нужный объект."

# 04a59d1b7d54470f99cb87a7ef34aa99
#: ../../topics/db/managers.txt:181
msgid "Using managers for related object access"
msgstr "Использования менеджеров для получения связанных объектов"

# 571edc9b4cd0425885b44082768ea012
#: ../../topics/db/managers.txt:183
msgid "By default, Django uses an instance of a \"plain\" manager class when accessing related objects (i.e. ``choice.poll``), not the default manager on the related object. This is because Django needs to be able to retrieve the related object, even if it would otherwise be filtered out (and hence be inaccessible) by the default manager."
msgstr "По умолчанию, Django использует \"обычный\" класс менеджера для получения связанных объектов (например, ``choice.poll``), а не менеджер по умолчанию связанной модели. Это связано с тем, что Django необходимо получить все связанные объекты, без каких либо фильтров применяемых менеджером по умолчанию."

# ca74f3a91ebc4f69a363ca7b86670e9a
#: ../../topics/db/managers.txt:189
msgid "If the normal plain manager class (:class:`django.db.models.Manager`) is not appropriate for your circumstances, you can force Django to use the same class as the default manager for your model by setting the `use_for_related_fields` attribute on the manager class. This is documented fully below_."
msgstr "Если стандартный менеджер(:class:`django.db.models.Manager`) вас не устраивает, вы можете указать Django  использовать менеджер по умолчанию используя аргумент ``use_for_related_fields`` в классе менеджера. Все это описано в manager-types_."

# 791f89fd06434976b913c8dd0d7275ce
#: ../../topics/db/managers.txt:199
msgid "Custom managers and model inheritance"
msgstr "Собственные менеджеры и наследование моделей"

# bed45920458446329f7eec9461583868
#: ../../topics/db/managers.txt:201
msgid "Class inheritance and model managers aren't quite a perfect match for each other. Managers are often specific to the classes they are defined on and inheriting them in subclasses isn't necessarily a good idea. Also, because the first manager declared is the *default manager*, it is important to allow that to be controlled. So here's how Django handles custom managers and :ref:`model inheritance <model-inheritance>`:"
msgstr "Наследование моделей и менеджеры взаимодействуют не совсем просто. Обычно менеджеры предназначены для работы с моделью, к которой принадлежат, по этому наследовать их в дочерних моделях - не всегда хорошая идея. К тому же первый менеджер в модели будет *менеджером по умолчанию*, и очень важно что бы это так и работало. Вот как Django решает эти проблемы при :ref:`наследовании моделей <model-inheritance>`:"

# 048894b8e7ba48c0b87b68cd7ecaaa8f
#: ../../topics/db/managers.txt:208
msgid "Managers defined on non-abstract base classes are *not* inherited by child classes. If you want to reuse a manager from a non-abstract base, redeclare it explicitly on the child class. These sorts of managers are likely to be fairly specific to the class they are defined on, so inheriting them can often lead to unexpected results (particularly as far as the default manager goes). Therefore, they aren't passed onto child classes."
msgstr "Менеджеры из не абстрактной базовой модели *не* наследуются дочерними. Если вы хотите унаследовать менеджер из не абстрактной родительской модели, добавьте его в дочернюю модель. Такие менеджеры обычно тесно связаны с моделью, по этому их наследование может привести к проблемам (по крайней мере менеджер по умолчанию). Таким образом, они не передаются на дочерние классы."

# 02ef7837aaa54c9a89d20ce2854cbe07
#: ../../topics/db/managers.txt:216
msgid "Managers from abstract base classes are always inherited by the child class, using Python's normal name resolution order (names on the child class override all others; then come names on the first parent class, and so on). Abstract base classes are designed to capture information and behavior that is common to their child classes. Defining common managers is an appropriate part of this common information."
msgstr "Менеджеры абстрактного класса наследуются дочерним классом, используя правила именования Python (имена дочернего класса переопределяют имена родительского).Абстрактные классы созданы для работы с общими данными дочерних классов. Определение общих менеджеров - важная часть абстрактных моделей."

# c9cba1e2b12d41f5aec01df6056f8f07
#: ../../topics/db/managers.txt:223
msgid "The default manager on a class is either the first manager declared on the class, if that exists, or the default manager of the first abstract base class in the parent hierarchy, if that exists. If no default manager is explicitly declared, Django's normal default manager is used."
msgstr "Менеджером по умолчанию  становится первый менеджер определенный в модели. Если он отсутствует, используется менеджер по умолчанию первого абстрактного класса среди родительских моделей, если он существует. Если таким образом не удалось определить менеджер по умолчанию, используется стандартный менеджер Django."

# 505bc79c9ef04a128006b02be2c90e1e
#: ../../topics/db/managers.txt:229
msgid "These rules provide the necessary flexibility if you want to install a collection of custom managers on a group of models, via an abstract base class, but still customize the default manager. For example, suppose you have this base class::"
msgstr "Эти правила позволяют достаточно гибко добавить собственные менеджеры в модель через абстрактные модели, в то же время имея возможность переопределить менеджер по умолчанию. Например, у нас есть такой базовый класс::"

# e9076b62c5c9481b975e594b091660d1
#: ../../topics/db/managers.txt:241
msgid "If you use this directly in a subclass, ``objects`` will be the default manager if you declare no managers in the base class::"
msgstr "Унаследовав от него модель, ``objects`` станет менеджером по умолчанию, если мы не определим другой менеджер в дочерней модели ::"

# 72bd2e49210d4a60837d7123a7887f24
#: ../../topics/db/managers.txt:248
msgid "If you want to inherit from ``AbstractBase``, but provide a different default manager, you can provide the default manager on the child class::"
msgstr "Если вы хотите унаследоваться от ``AbstractBase``, но использовать другой менеджер по умолчанию, вы можете определить менеджер по умолчанию таким способом::"

# 1d0f1648cf7c40058e686c45cf81b56f
#: ../../topics/db/managers.txt:256
msgid "Here, ``default_manager`` is the default. The ``objects`` manager is still available, since it's inherited. It just isn't used as the default."
msgstr "``default_manager`` - менеджер по умолчанию. Менеджер ``objects`` так же можно использовать, т.к. он был унаследован. Он просто не используется как менеджер по умолчанию."

# f9f5ba5a373546f1ab62beaa748acc9a
#: ../../topics/db/managers.txt:259
msgid "Finally for this example, suppose you want to add extra managers to the child class, but still use the default from ``AbstractBase``. You can't add the new manager directly in the child class, as that would override the default and you would have to also explicitly include all the managers from the abstract base class. The solution is to put the extra managers in another base class and introduce it into the inheritance hierarchy *after* the defaults::"
msgstr "Еще один пример... Например, мы хотим добавить еще один менеджер и в то же время оставить менеджер по умолчанию из ``AbstractBase``. Вы не можете просто добавить новый менеджер в дочернюю модель, т.к. вам нужно будет так же добавить менеджер из абстрактной модели перед ним, что бы он был менеджером по умолчанию. Мы можем добавить дополнительный менеджер в другую модель, и добавить в наследование *после* базовой::"

# dcdc236e20144827b9e1ed54fdfcaed1
#: ../../topics/db/managers.txt:277
msgid "Note that while you can *define* a custom manager on the abstract model, you can't *invoke* any methods using the abstract model. That is::"
msgstr "Обратите внимание, хотя вы и можете *определить* собственный менеджер для абстрактной модели, вы не можете *вызывать* методы используя абстрактную модель. То есть::"

# 09d0beb4e8764e569aed50df51194c38
#: ../../topics/db/managers.txt:282
msgid "is legal, but::"
msgstr "будет работать, но::"

# 8df39bcbdb7540d0a4e9d37b94a128ac
#: ../../topics/db/managers.txt:286
msgid "will raise an exception. This is because managers are intended to encapsulate logic for managing collections of objects. Since you can't have a collection of abstract objects, it doesn't make sense to be managing them. If you have functionality that applies to the abstract model, you should put that functionality in a ``staticmethod`` or ``classmethod`` on the abstract model."
msgstr "вызовет исключение. Менеджеры инкапсулируют логику работы с коллекцией объектов. Так как мы не можем создать коллекцию абстрактных объктов, нет смысла использовать менеджер для них. Если вам неоходим фукнционал связанный с абстрактной моделью, добавьте его в ``staticmethod`` или ``classmethod``."

# 4c9a9a892dde44e9bd42926f1ee9584d
#: ../../topics/db/managers.txt:293
msgid "Implementation concerns"
msgstr "Проблемы реализации"

# ac9c0bc2e9194ff59fc02491554e1b3b
#: ../../topics/db/managers.txt:295
msgid "Whatever features you add to your custom ``Manager``, it must be possible to make a shallow copy of a ``Manager`` instance; i.e., the following code must work::"
msgstr "Всегда должно работать копирование экземпляра менеджера, то есть должен работать такой код::"

# 63f6ee7f3bc4483eadda8d9472a9520b
#: ../../topics/db/managers.txt:303
msgid "Django makes shallow copies of manager objects during certain queries; if your Manager cannot be copied, those queries will fail."
msgstr "Django выполняет копирование экземпляра менеджера при определенных запросах. Если ваш менеджер нельзя скопировать, эти запросы перестанут работать."

# 5cb300a201834905b90e9f40ef7df99f
#: ../../topics/db/managers.txt:306
msgid "This won't be an issue for most custom managers. If you are just adding simple methods to your ``Manager``, it is unlikely that you will inadvertently make instances of your ``Manager`` uncopyable. However, if you're overriding ``__getattr__`` or some other private method of your ``Manager`` object that controls object state, you should ensure that you don't affect the ability of your ``Manager`` to be copied."
msgstr "Для большинства менеджеров это не будет проблемой. Если вы просто добавить метод в ``Manager``, вряд ли он станет не копируемый. Однако, если вы измените ``__getattr__`` или какой-либо другой приватный метод, который контролирует состояние объекта, вы должны убедиться что объект можно скопировать."

# 35f77fec45744528b21cad7e6ddf8002
#: ../../topics/db/managers.txt:317
msgid "Controlling automatic Manager types"
msgstr "Тип автоматически создаваемого менеджера"

# 67be4a6f3ed9419ca311ab1922ac0e05
#: ../../topics/db/managers.txt:319
msgid "This document has already mentioned a couple of places where Django creates a manager class for you: `default managers`_ and the \"plain\" manager used to `access related objects`_. There are other places in the implementation of Django where temporary plain managers are needed. Those automatically created managers will normally be instances of the :class:`django.db.models.Manager` class."
msgstr "Этот раздел уже упоминался несколько раз там, где говорилось что Django создает менеджер для тебя: `default managers`_ и \"стандартный\" менеджер используемые для `access related objects`_.  Есть и другие ситуация, когда Django создает временные менеджеры. Обычно это экземпляры класса :class:`django.db.models.Manager`."

# 03ed13cb362043568f2572baeb6f9f84
#: ../../topics/db/managers.txt:329
msgid "Throughout this section, we will use the term \"automatic manager\" to mean a manager that Django creates for you -- either as a default manager on a model with no managers, or to use temporarily when accessing related objects."
msgstr "В этом разделе мы будем использовать термит \"автоматически созданный менеджер\" подразумевая менеджер, который Django создает для вас  -- будь то менеджер по умолчанию для модели без определенных менеджеров, или временный менеджер для доступа к связанным объектам."

# b8cd5397754b418f8b6d06fd129cdf08
#: ../../topics/db/managers.txt:333
msgid "Sometimes this default class won't be the right choice. One example is in the :mod:`django.contrib.gis` application that ships with Django itself. All ``gis`` models must use a special manager class (:class:`~django.contrib.gis.db.models.GeoManager`) because they need a special queryset (:class:`~django.contrib.gis.db.models.GeoQuerySet`) to be used for interacting with the database.  It turns out that models which require a special manager like this need to use the same manager class wherever an automatic manager is created."
msgstr "Для некоторых случаев обычный класс не подойдет. Один из примеров это приложение :mod:`django.contrib.gis` которое включено в Django. Все ``gis`` модели должны использовать специальный менеджер (:class:`~django.contrib.gis.db.models.GeoManager`), т.к. они должны использовать особый ``QuerySet`` класс (:class:`~django.contrib.gis.db.models.GeoQuerySet`) для работы с базой данных.  Получается что они должны использовать специальный менеджер каждый раз, когда Django должен автоматически создать его."

# 7546beb312184e7d973a94263ce477d5
#: ../../topics/db/managers.txt:341
msgid "Django provides a way for custom manager developers to say that their manager class should be used for automatic managers whenever it is the default manager on a model. This is done by setting the ``use_for_related_fields`` attribute on the manager class::"
msgstr "Django позволяет указать, что созданный вам менеджер должен использоваться как \"автоматически созданный менеджер\", каждый раз когда он добавлен в модель как менеджер по умолчанию. Это можно сделать используя атрибут ``use_for_related_fields``::"

# 7b38bf56190a4b59a93b19cf80e01d39
#: ../../topics/db/managers.txt:351
msgid "If this attribute is set on the *default* manager for a model (only the default manager is considered in these situations), Django will use that class whenever it needs to automatically create a manager for the class.  Otherwise, it will use :class:`django.db.models.Manager`."
msgstr "Если этот атрибут используется для менеджера *по умолчанию* (это работает только для менеджера по умолчанию), Django будет использовать его каждый раз при автоматическом создании менеджера, иначе будет использован :class:`django.db.models.Manager`."

# b120df99300441f3a13a836b55d762c8
#: ../../topics/db/managers.txt:358
msgid "Given the purpose for which it's used, the name of this attribute (``use_for_related_fields``) might seem a little odd. Originally, the attribute only controlled the type of manager used for related field access, which is where the name came from. As it became clear the concept was more broadly useful, the name hasn't been changed. This is primarily so that existing code will :doc:`continue to work </misc/api-stability>` in future Django versions."
msgstr "С учетом целей, для которых он используется, имя этого атрибута (``use_for_related_fields``) может звучать немного странно. Изначально этот атрибут использовался для определения менеджера для доступа к связанным объектам, вот откуда это название. В то время, когда стало понятно на сколько это широко можно использовать эту концепцию, имя не изменилось. Это было сделано, что бы существующий код :doc:`продолжал работать </misc/api-stability>` в следующих версиях Django."

# 856be24e84aa47aabe7f65cd2c2b9315
#: ../../topics/db/managers.txt:367
msgid "Writing correct Managers for use in automatic Manager instances"
msgstr "Каким должен быть класс автоматически создаваемого менеджера"

# 09808f0f6b504919930aa73ba28b5b72
#: ../../topics/db/managers.txt:369
msgid "As already suggested by the `django.contrib.gis` example, above, the ``use_for_related_fields`` feature is primarily for managers that need to return a custom ``QuerySet`` subclass. In providing this functionality in your manager, there are a couple of things to remember."
msgstr "Как уже упоминалось в примере о `django.contrib.gis`, ``use_for_related_fields`` используется для возвращения специального подкласса ``QuerySet``. Реализуя подобный функционал необходимо помнить о нескольких правилах."

# b7a8e8663841420d87034926a3774a87
#: ../../topics/db/managers.txt:375
msgid "Do not filter away any results in this type of manager subclass"
msgstr "Не фильтруйте результаты запроса"

# 3f856d857cf141bd80a168a0047a78be
#: ../../topics/db/managers.txt:377
msgid "One reason an automatic manager is used is to access objects that are related to from some other model. In those situations, Django has to be able to see all the objects for the model it is fetching, so that *anything* which is referred to can be retrieved."
msgstr "Одно из назначений автоматически создаваемого менеджера - доступ к связанным объектам. В этом случае Django должен иметь возможность получить *все* связанные объекты."

# b5730aa46e4242f2b7e48819889e0000
#: ../../topics/db/managers.txt:382
msgid "If you override the ``get_query_set()`` method and filter out any rows, Django will return incorrect results. Don't do that. A manager that filters results in ``get_query_set()`` is not appropriate for use as an automatic manager."
msgstr "Если вы переопределите метод ``get_query_set()`` и отфильтруете часть результата, Django вернет неверный результат. Не делайте этого. Менеджер, который фильтрует результат запроса в ``get_query_set()`` не подходит на роль автоматически создаваемого менеджера."

# 7db1d09d1bc04699aba6bf65670aa0aa
#: ../../topics/db/managers.txt:387
msgid "Set ``use_for_related_fields`` when you define the class"
msgstr "Добавляйте ``use_for_related_fields`` при определении класса"

# c3015c48723d49479915f56c2bcf33f3
#: ../../topics/db/managers.txt:389
msgid "The ``use_for_related_fields`` attribute must be set on the manager *class*, not on an *instance* of the class. The earlier example shows the correct way to set it, whereas the following will not work::"
msgstr "Атрибут ``use_for_related_fields`` должен быть добавлен в *класс* менеджера, не в *экземпляр* класса. Пример выше показывает верный вариант, в то время как этот не будет работать::"

# 217bc644c3894cf09b20027f2547e4e6
#: ../../topics/db/managers.txt:408
msgid "You also shouldn't change the attribute on the class object after it has been used in a model, since the attribute's value is processed when the model class is created and not subsequently reread. Set the attribute on the manager class when it is first defined, as in the initial example of this section and everything will work smoothly."
msgstr "Вы так же не должны изменять атрибут экземпляра класса менеджера, т.к. значение атрибута класса обрабатывается в момент объявления класса и в дальнейшем не переопределяется. Устанавливайте атрибут в классе менеджера при его объявлении, как в примере выше, и все будет работать правильно."

