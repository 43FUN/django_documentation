# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated <>, 2012.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-02-15 15:13\n"
"PO-Revision-Date: 2012-02-28 00:33+0200\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# bcda587ca63046259b0310b271887f4c
#: ../../topics/db/multi-db.txt:3
msgid "Multiple databases"
msgstr "Использование нескольких баз данных"

# ef835e5dffc1439da8d84e1cb08167db
#: ../../topics/db/multi-db.txt:7
msgid ""
"This topic guide describes Django's support for interacting with multiple "
"databases. Most of the rest of Django's documentation assumes you are "
"interacting with a single database. If you want to interact with multiple "
"databases, you'll need to take some additional steps."
msgstr ""

# 0c5f4f719df24c168a178fda9a7f7444
#: ../../topics/db/multi-db.txt:13
msgid "Defining your databases"
msgstr ""

# 1aac27f6a23b422e9ca6badef10e531c
#: ../../topics/db/multi-db.txt:15
msgid ""
"The first step to using more than one database with Django is to tell Django "
"about the database servers you'll be using. This is done using the :setting:"
"`DATABASES` setting. This setting maps database aliases, which are a way to "
"refer to a specific database throughout Django, to a dictionary of settings "
"for that specific connection. The settings in the inner dictionaries are "
"described fully in the :setting:`DATABASES` documentation."
msgstr ""

# 939335b541ef4a628a6227db1ce8f4cb
#: ../../topics/db/multi-db.txt:23
msgid ""
"Databases can have any alias you choose. However, the alias ``default`` has "
"special significance. Django uses the database with the alias of ``default`` "
"when no other database has been selected. If you don't have a ``default`` "
"database, you need to be careful to always specify the database that you "
"want to use."
msgstr ""

# d6cbbc6b2d6e4a509d7a35d0801f3e8b
#: ../../topics/db/multi-db.txt:29
msgid ""
"The following is an example ``settings.py`` snippet defining two databases "
"-- a default PostgreSQL database and a MySQL database called ``users``:"
msgstr ""

# cb3c2ab4bdfb4d6e8298766cab1a1dfe
#: ../../topics/db/multi-db.txt:50
msgid ""
"If you attempt to access a database that you haven't defined in your :"
"setting:`DATABASES` setting, Django will raise a ``django.db.utils."
"ConnectionDoesNotExist`` exception."
msgstr ""

# 822de62948914e3aadf6847ceeb9174f
#: ../../topics/db/multi-db.txt:55
msgid "Synchronizing your databases"
msgstr ""

# 95e12d2636b948f9b6b81858c8bf3cc9
#: ../../topics/db/multi-db.txt:57
msgid ""
"The :djadmin:`syncdb` management command operates on one database at a time. "
"By default, it operates on the ``default`` database, but by providing a :"
"djadminopt:`--database` argument, you can tell syncdb to synchronize a "
"different database. So, to synchronize all models onto all databases in our "
"example, you would need to call::"
msgstr ""

# 5011b97dd9e04ced98c10edc1cac8c98
#: ../../topics/db/multi-db.txt:66
msgid ""
"If you don't want every application to be synchronized onto a particular "
"database, you can define a :ref:`database router<topics-db-multi-db-"
"routing>` that implements a policy constraining the availability of "
"particular models."
msgstr ""

# eac0ffc7172d47d186381a7a5b506398
#: ../../topics/db/multi-db.txt:71
msgid ""
"Alternatively, if you want fine-grained control of synchronization, you can "
"pipe all or part of the output of :djadmin:`sqlall` for a particular "
"application directly into your database prompt, like this::"
msgstr ""

# 7b239145c2134716baa306929f3728dd
#: ../../topics/db/multi-db.txt:78
msgid "Using other management commands"
msgstr ""

# 129b927ced0b4213a495b5c27e38f26d
#: ../../topics/db/multi-db.txt:80
msgid ""
"The other ``django-admin.py`` commands that interact with the database "
"operate in the same way as :djadmin:`syncdb` -- they only ever operate on "
"one database at a time, using :djadminopt:`--database` to control the "
"database used."
msgstr ""

# 8a3dbcfac1b043e58999147cf37a3fb4
#: ../../topics/db/multi-db.txt:88
msgid "Automatic database routing"
msgstr ""

# 001e42d0fdc345c5af0fc847a761bd3c
#: ../../topics/db/multi-db.txt:90
msgid ""
"The easiest way to use multiple databases is to set up a database routing "
"scheme. The default routing scheme ensures that objects remain 'sticky' to "
"their original database (i.e., an object retrieved from the ``foo`` database "
"will be saved on the same database). The default routing scheme ensures that "
"if a database isn't specified, all queries fall back to the ``default`` "
"database."
msgstr ""

# c616754e64c74e0489b22aa4bf091555
#: ../../topics/db/multi-db.txt:97
msgid ""
"You don't have to do anything to activate the default routing scheme -- it "
"is provided 'out of the box' on every Django project. However, if you want "
"to implement more interesting database allocation behaviors, you can define "
"and install your own database routers."
msgstr ""

# c49df0a2aef44c919762fd90a8cb1d61
#: ../../topics/db/multi-db.txt:103
msgid "Database routers"
msgstr ""

# 512d3cf89582400b9d9e7075bbee12ce
#: ../../topics/db/multi-db.txt:105
msgid "A database Router is a class that provides up to four methods:"
msgstr ""

# 5a54f7cd2a50468bb2d96729166a52a7
#: ../../topics/db/multi-db.txt:109
msgid ""
"Suggest the database that should be used for read operations for objects of "
"type ``model``."
msgstr ""

# aee841638e974d16be08f4424e0dc25a
# 06fd749e2c0544acbe4c77eb6550458a
#: ../../topics/db/multi-db.txt:112 ../../topics/db/multi-db.txt:124
msgid ""
"If a database operation is able to provide any additional information that "
"might assist in selecting a database, it will be provided in the ``hints`` "
"dictionary. Details on valid hints are provided :ref:`below <topics-db-multi-"
"db-hints>`."
msgstr ""

# a45d02c7fc8a4704bb190a3d662151fd
# 4f9e2c34e3a1450c9803ea66affa85d7
#: ../../topics/db/multi-db.txt:117 ../../topics/db/multi-db.txt:129
msgid "Returns None if there is no suggestion."
msgstr ""

# 2677f3fecd2348a7a26767266a17d9d2
#: ../../topics/db/multi-db.txt:121
msgid ""
"Suggest the database that should be used for writes of objects of type Model."
msgstr ""

# 35af379fbb3d4945ab81eb1420e4fdca
#: ../../topics/db/multi-db.txt:133
msgid ""
"Return True if a relation between obj1 and obj2 should be allowed, False if "
"the relation should be prevented, or None if the router has no opinion. This "
"is purely a validation operation, used by foreign key and many to many "
"operations to determine if a relation should be allowed between two objects."
msgstr ""

# 1c3cf101aec0411a8049c6fbde3daece
#: ../../topics/db/multi-db.txt:141
msgid ""
"Determine if the ``model`` should be synchronized onto the database with "
"alias ``db``. Return True if the model should be synchronized, False if it "
"should not be synchronized, or None if the router has no opinion. This "
"method can be used to determine the availability of a model on a given "
"database."
msgstr ""

# d18b25a565c74c41a577b5b80fc36ea4
#: ../../topics/db/multi-db.txt:147
msgid ""
"A router doesn't have to provide *all* these methods -- it may omit one or "
"more of them. If one of the methods is omitted, Django will skip that router "
"when performing the relevant check."
msgstr ""

# 93f5dc7a46494a24973b44ee2e2faa64
#: ../../topics/db/multi-db.txt:154
msgid "Hints"
msgstr ""

# 64fbc03f3ea047f9b434ee267ade60ed
#: ../../topics/db/multi-db.txt:156
msgid ""
"The hints received by the database router can be used to decide which "
"database should receive a given request."
msgstr ""

# 9c696ee806394d7c9f96a94519619a73
#: ../../topics/db/multi-db.txt:159
msgid ""
"At present, the only hint that will be provided is ``instance``, an object "
"instance that is related to the read or write operation that is underway. "
"This might be the instance that is being saved, or it might be an instance "
"that is being added in a many-to-many relation. In some cases, no instance "
"hint will be provided at all. The router checks for the existence of an "
"instance hint, and determine if that hint should be used to alter routing "
"behavior."
msgstr ""

# 4304203950f74d819129b70baeb59191
#: ../../topics/db/multi-db.txt:168
msgid "Using routers"
msgstr ""

# f19edac9491f4fc4a9ed742bd77948e4
#: ../../topics/db/multi-db.txt:170
msgid ""
"Database routers are installed using the :setting:`DATABASE_ROUTERS` "
"setting. This setting defines a list of class names, each specifying a "
"router that should be used by the master router (``django.db.router``)."
msgstr ""

# 170d737f9b0e4cf39485a671dcfb7282
#: ../../topics/db/multi-db.txt:175
msgid ""
"The master router is used by Django's database operations to allocate "
"database usage. Whenever a query needs to know which database to use, it "
"calls the master router, providing a model and a hint (if available). Django "
"then tries each router in turn until a database suggestion can be found. If "
"no suggestion can be found, it tries the current ``_state.db`` of the hint "
"instance. If a hint instance wasn't provided, or the instance doesn't "
"currently have database state, the master router will allocate the "
"``default`` database."
msgstr ""

# e4a6b47937454b10b570b6fdd10e4697
#: ../../topics/db/multi-db.txt:185
msgid "An example"
msgstr ""

# a298ae7107a54b2194b7d2940444ac02
#: ../../topics/db/multi-db.txt:189
msgid ""
"This example is intended as a demonstration of how the router infrastructure "
"can be used to alter database usage. It intentionally ignores some complex "
"issues in order to demonstrate how routers are used."
msgstr ""

# 8fe23b6135cb47bfa303cf7c2ffc57fb
#: ../../topics/db/multi-db.txt:194
msgid ""
"This example won't work if any of the models in ``myapp`` contain "
"relationships to models outside of the ``other`` database. :ref:`Cross-"
"database relationships <no_cross_database_relations>` introduce referential "
"integrity problems that Django can't currently handle."
msgstr ""

# 5211c6fb22b44d39bb3e8cdf5284f164
#: ../../topics/db/multi-db.txt:200
msgid ""
"The master/slave configuration described is also flawed -- it doesn't "
"provide any solution for handling replication lag (i.e., query "
"inconsistencies introduced because of the time taken for a write to "
"propagate to the slaves). It also doesn't consider the interaction of "
"transactions with the database utilization strategy."
msgstr ""

# 99a9c24474c04409bb911fef439417ad
#: ../../topics/db/multi-db.txt:206
msgid ""
"So - what does this mean in practice? Say you want ``myapp`` to exist on the "
"``other`` database, and you want all other models in a master/slave "
"relationship between the databases ``master``, ``slave1`` and ``slave2``. To "
"implement this, you would need 2 routers::"
msgstr ""

# b63d5ead449c451dbea826f76957277d
#: ../../topics/db/multi-db.txt:263
msgid ""
"Then, in your settings file, add the following (substituting ``path.to.`` "
"with the actual python path to the module where you define the routers)::"
msgstr ""

# ea0bf3aca231451aa2aea8714ccb0abc
#: ../../topics/db/multi-db.txt:268
msgid ""
"The order in which routers are processed is significant. Routers will be "
"queried in the order the are listed in the :setting:`DATABASE_ROUTERS` "
"setting . In this example, the ``MyAppRouter`` is processed before the "
"``MasterSlaveRouter``, and as a result, decisions concerning the models in "
"``myapp`` are processed before any other decision is made. If the :setting:"
"`DATABASE_ROUTERS` setting listed the two routers in the other order, "
"``MasterSlaveRouter.allow_syncdb()`` would be processed first. The catch-all "
"nature of the MasterSlaveRouter implementation would mean that all models "
"would be available on all databases."
msgstr ""

# 97c12a233dfa428cbcf86ebc9111ee40
#: ../../topics/db/multi-db.txt:279
msgid "With this setup installed, lets run some Django code::"
msgstr ""

# 05c0f317efbd4d28962e6b3ce4ceb203
#: ../../topics/db/multi-db.txt:306
msgid "Manually selecting a database"
msgstr ""

# fbc0eb82c3394156828fe4fd7374aa80
#: ../../topics/db/multi-db.txt:308
msgid ""
"Django also provides an API that allows you to maintain complete control "
"over database usage in your code. A manually specified database allocation "
"will take priority over a database allocated by a router."
msgstr ""

# aeadcd3980a643fbaf100534de0720fc
#: ../../topics/db/multi-db.txt:313
msgid "Manually selecting a database for a ``QuerySet``"
msgstr ""

# 96e8706a60c043cb855b7fa0c70f47dc
#: ../../topics/db/multi-db.txt:315
msgid ""
"You can select the database for a ``QuerySet`` at any point in the "
"``QuerySet`` \"chain.\" Just call ``using()`` on the ``QuerySet`` to get "
"another ``QuerySet`` that uses the specified database."
msgstr ""

# 9d0afe0f900342c0a7c52697e7bdaa34
#: ../../topics/db/multi-db.txt:319
msgid ""
"``using()`` takes a single argument: the alias of the database on which you "
"want to run the query. For example::"
msgstr ""

# a62409f5bd4c4589ae6ec37fe81f8ec8
#: ../../topics/db/multi-db.txt:332
msgid "Selecting a database for ``save()``"
msgstr ""

# baf49f6b61a140c2a39d928d603f9f4c
#: ../../topics/db/multi-db.txt:334
msgid ""
"Use the ``using`` keyword to ``Model.save()`` to specify to which database "
"the data should be saved."
msgstr ""

# 9ca9cdb4925549099f31956baf734100
#: ../../topics/db/multi-db.txt:337
msgid ""
"For example, to save an object to the ``legacy_users`` database, you'd use "
"this::"
msgstr ""

# cbbd04662ed54ee1ade638309bee50df
#: ../../topics/db/multi-db.txt:342
msgid ""
"If you don't specify ``using``, the ``save()`` method will save into the "
"default database allocated by the routers."
msgstr ""

# dfeae7b21f944c88b530302f9450a1bd
#: ../../topics/db/multi-db.txt:346
msgid "Moving an object from one database to another"
msgstr ""

# 163a8d0a0fde429fa74cbaccaa6774d3
#: ../../topics/db/multi-db.txt:348
msgid ""
"If you've saved an instance to one database, it might be tempting to use "
"``save(using=...)`` as a way to migrate the instance to a new database. "
"However, if you don't take appropriate steps, this could have some "
"unexpected consequences."
msgstr ""

# aae75878ae5043c58a56044fa5b63264
#: ../../topics/db/multi-db.txt:353
msgid "Consider the following example::"
msgstr ""

# 7a1ecf06fe26450493024226881f0aad
#: ../../topics/db/multi-db.txt:359
msgid ""
"In statement 1, a new ``Person`` object is saved to the ``first`` database. "
"At this time, ``p`` doesn't have a primary key, so Django issues a SQL "
"``INSERT`` statement. This creates a primary key, and Django assigns that "
"primary key to ``p``."
msgstr ""

# e5e58f03afa64671afd7a2e7a090f6d5
#: ../../topics/db/multi-db.txt:364
msgid ""
"When the save occurs in statement 2, ``p`` already has a primary key value, "
"and Django will attempt to use that primary key on the new database. If the "
"primary key value isn't in use in the ``second`` database, then you won't "
"have any problems -- the object will be copied to the new database."
msgstr ""

# 6fe8e2a8670f4471b39ce677bb225148
#: ../../topics/db/multi-db.txt:370
msgid ""
"However, if the primary key of ``p`` is already in use on the ``second`` "
"database, the existing object in the ``second`` database will be overridden "
"when ``p`` is saved."
msgstr ""

# 122197f5c3984fb09a9e116fe2c10147
#: ../../topics/db/multi-db.txt:374
msgid ""
"You can avoid this in two ways. First, you can clear the primary key of the "
"instance. If an object has no primary key, Django will treat it as a new "
"object, avoiding any loss of data on the ``second`` database::"
msgstr ""

# 40377afa31974882a55eebf255c8e711
#: ../../topics/db/multi-db.txt:384
msgid ""
"The second option is to use the ``force_insert`` option to ``save()`` to "
"ensure that Django does a SQL ``INSERT``::"
msgstr ""

# 1f8ef3b43a80445b852ac082cd59d4a9
#: ../../topics/db/multi-db.txt:391
msgid ""
"This will ensure that the person named ``Fred`` will have the same primary "
"key on both databases. If that primary key is already in use when you try to "
"save onto the ``second`` database, an error will be raised."
msgstr ""

# a8ec9ce8fd464bab93e909dc8c373c2b
#: ../../topics/db/multi-db.txt:397
msgid "Selecting a database to delete from"
msgstr ""

# c4128abae09141859b8720c7b6064f09
#: ../../topics/db/multi-db.txt:399
msgid ""
"By default, a call to delete an existing object will be executed on the same "
"database that was used to retrieve the object in the first place::"
msgstr ""

# f8907d036b024ee1885a4f0f89b655bc
#: ../../topics/db/multi-db.txt:406
msgid ""
"To specify the database from which a model will be deleted, pass a ``using`` "
"keyword argument to the ``Model.delete()`` method. This argument works just "
"like the ``using`` keyword argument to ``save()``."
msgstr ""

# 1640abb55c4c4cc186c0416888340146
#: ../../topics/db/multi-db.txt:410
msgid ""
"For example, if you're migrating a user from the ``legacy_users`` database "
"to the ``new_users`` database, you might use these commands::"
msgstr ""

# fb2a0a235b50425f99eafe809a0b33a1
#: ../../topics/db/multi-db.txt:417
msgid "Using managers with multiple databases"
msgstr ""

# d2035829ba124f6ab46d67ef95fd81e6
#: ../../topics/db/multi-db.txt:419
msgid ""
"Use the ``db_manager()`` method on managers to give managers access to a non-"
"default database."
msgstr ""

# 68413b8257174b0e93fccf2a6431048c
#: ../../topics/db/multi-db.txt:422
msgid ""
"For example, say you have a custom manager method that touches the database "
"-- ``User.objects.create_user()``. Because ``create_user()`` is a manager "
"method, not a ``QuerySet`` method, you can't do ``User.objects.using"
"('new_users').create_user()``. (The ``create_user()`` method is only "
"available on ``User.objects``, the manager, not on ``QuerySet`` objects "
"derived from the manager.) The solution is to use ``db_manager()``, like "
"this::"
msgstr ""

# cf7883d81c944642b385716ea9f299f1
#: ../../topics/db/multi-db.txt:432
msgid ""
"``db_manager()`` returns a copy of the manager bound to the database you "
"specify."
msgstr ""

# e73e3707ce6a4fcd87b85edf0a66590d
#: ../../topics/db/multi-db.txt:435
msgid "Using ``get_query_set()`` with multiple databases"
msgstr ""

# 43d45e21ba254e39886b7196414c3951
#: ../../topics/db/multi-db.txt:437
msgid ""
"If you're overriding ``get_query_set()`` on your manager, be sure to either "
"call the method on the parent (using ``super()``) or do the appropriate "
"handling of the ``_db`` attribute on the manager (a string containing the "
"name of the database to use)."
msgstr ""

# 3d2c14b30e004dea892b345071a8b460
#: ../../topics/db/multi-db.txt:442
msgid ""
"For example, if you want to return a custom ``QuerySet`` class from the "
"``get_query_set`` method, you could do this::"
msgstr ""

# ea86ba305e074356ac930b8c828e511c
#: ../../topics/db/multi-db.txt:453
msgid "Exposing multiple databases in Django's admin interface"
msgstr ""

# 9556109aaef040d3917666687e522f3f
#: ../../topics/db/multi-db.txt:455
msgid ""
"Django's admin doesn't have any explicit support for multiple databases. If "
"you want to provide an admin interface for a model on a database other than "
"that specified by your router chain, you'll need to write custom :class:"
"`~django.contrib.admin.ModelAdmin` classes that will direct the admin to use "
"a specific database for content."
msgstr ""

# 87a53aecfeb74918a25506848827bafe
#: ../../topics/db/multi-db.txt:461
msgid ""
"``ModelAdmin`` objects have five methods that require customization for "
"multiple-database support::"
msgstr ""

# 549cfb825cec40118e901cf229a830b8
#: ../../topics/db/multi-db.txt:490
msgid ""
"The implementation provided here implements a multi-database strategy where "
"all objects of a given type are stored on a specific database (e.g., all "
"``User`` objects are in the ``other`` database). If your usage of multiple "
"databases is more complex, your ``ModelAdmin`` will need to reflect that "
"strategy."
msgstr ""

# 9aeac70f95884fc6826146203dcfab6f
#: ../../topics/db/multi-db.txt:496
msgid ""
"Inlines can be handled in a similar fashion. They require three customized "
"methods::"
msgstr ""

# 584e76d919ff44f3bcd6c59cf1a570af
#: ../../topics/db/multi-db.txt:515
msgid ""
"Once you've written your model admin definitions, they can be registered "
"with any ``Admin`` instance::"
msgstr ""

# 5bbfe64b0f8043f7856ff283cc18b59a
#: ../../topics/db/multi-db.txt:533
msgid ""
"This example sets up two admin sites. On the first site, the ``Author`` and "
"``Publisher`` objects are exposed; ``Publisher`` objects have an tabular "
"inline showing books published by that publisher. The second site exposes "
"just publishers, without the inlines."
msgstr ""

# 8c1b9d49627c4ae09be2be97b0cd6c15
#: ../../topics/db/multi-db.txt:540
msgid "Using raw cursors with multiple databases"
msgstr ""

# 0d8f03cf5527443482bc4a30fe1be898
#: ../../topics/db/multi-db.txt:542
msgid ""
"If you are using more than one database you can use ``django.db."
"connections`` to obtain the connection (and cursor) for a specific database. "
"``django.db.connections`` is a dictionary-like object that allows you to "
"retrieve a specific connection using its alias::"
msgstr ""

# 139b54192cca4548ac87b9582a3bf590
#: ../../topics/db/multi-db.txt:552
msgid "Limitations of multiple databases"
msgstr ""

# 3ef1d67b7b8b498b9ced094e5a696765
#: ../../topics/db/multi-db.txt:557
msgid "Cross-database relations"
msgstr ""

# bbc8612e03de4985b2d28a37ab5574d6
#: ../../topics/db/multi-db.txt:559
msgid ""
"Django doesn't currently provide any support for foreign key or many-to-many "
"relationships spanning multiple databases. If you have used a router to "
"partition models to different databases, any foreign key and many-to-many "
"relationships defined by those models must be internal to a single database."
msgstr ""

# 6ee3d3c9ff5749a1ae3c4b18590ddbf3
#: ../../topics/db/multi-db.txt:565
msgid ""
"This is because of referential integrity. In order to maintain a "
"relationship between two objects, Django needs to know that the primary key "
"of the related object is valid. If the primary key is stored on a separate "
"database, it's not possible to easily evaluate the validity of a primary key."
msgstr ""

# 130c2cf8e0a14720922a0f3ec78b1851
#: ../../topics/db/multi-db.txt:571
msgid ""
"If you're using Postgres, Oracle, or MySQL with InnoDB, this is enforced at "
"the database integrity level -- database level key constraints prevent the "
"creation of relations that can't be validated."
msgstr ""

# 9c61bdcf428844b0a05e46f0560da50e
#: ../../topics/db/multi-db.txt:575
msgid ""
"However, if you're using SQLite or MySQL with MyISAM tables, there is no "
"enforced referential integrity; as a result, you may be able to 'fake' cross "
"database foreign keys. However, this configuration is not officially "
"supported by Django."
msgstr ""
