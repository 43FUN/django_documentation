# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2012.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-02-15 15:13\n"
"PO-Revision-Date: 2012-02-15 15:13\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# 4917ed21653d43a08d6203ce4dc323fd
#: ../../topics/class-based-views.txt:3
msgid "Class-based generic views"
msgstr ""

# a1765cc019ad44748a7fad6bef563369
#: ../../topics/class-based-views.txt:8
msgid ""
"Prior to Django 1.3, generic views were implemented as functions. The "
"function-based implementation has been deprecated in favor of the class-"
"based approach described here."
msgstr ""

# c7ff5e60d3614da0ae1f362775cfc195
#: ../../topics/class-based-views.txt:12
msgid ""
"For details on the previous generic views implementation, see the :doc:"
"`topic guide </topics/generic-views>` and :doc:`detailed reference </ref/"
"generic-views>`."
msgstr ""

# 8b6a00c89883434e95122a1d9448ae40
#: ../../topics/class-based-views.txt:16
msgid ""
"Writing Web applications can be monotonous, because we repeat certain "
"patterns again and again. Django tries to take away some of that monotony at "
"the model and template layers, but Web developers also experience this "
"boredom at the view level."
msgstr ""

# 224e6bc7acc64f44ba9351c6993914b7
#: ../../topics/class-based-views.txt:21
msgid ""
"Django's *generic views* were developed to ease that pain. They take certain "
"common idioms and patterns found in view development and abstract them so "
"that you can quickly write common views of data without having to write too "
"much code."
msgstr ""

# a4af1e68240a46cdbeaf7d3707a2a7d5
#: ../../topics/class-based-views.txt:26
msgid ""
"We can recognize certain common tasks, like displaying a list of objects, "
"and write code that displays a list of *any* object. Then the model in "
"question can be passed as an extra argument to the URLconf."
msgstr ""

# b4a7ea3a7b4f48bda9082d2a2462e541
#: ../../topics/class-based-views.txt:30
msgid "Django ships with generic views to do the following:"
msgstr ""

# 5a53c2bdf8b64d889502ee24c9b2dda9
#: ../../topics/class-based-views.txt:32
msgid ""
"Perform common \"simple\" tasks: redirect to a different page and render a "
"given template."
msgstr ""

# d4bc4daf7dfe4f5c8c9486602156c8b2
#: ../../topics/class-based-views.txt:35
msgid ""
"Display list and detail pages for a single object. If we were creating an "
"application to manage conferences then a ``TalkListView`` and a "
"``RegisteredUserListView`` would be examples of list views. A single talk "
"page is an example of what we call a \"detail\" view."
msgstr ""

# 974fe05f3e764ca89f76b009d25ba347
#: ../../topics/class-based-views.txt:40
msgid ""
"Present date-based objects in year/month/day archive pages, associated "
"detail, and \"latest\" pages. `The Django Weblog <http://www.djangoproject."
"com/weblog/>`_'s year, month, and day archives are built with these, as "
"would be a typical newspaper's archives."
msgstr ""

# 704bb61bd8b347afafc709437f14e30c
#: ../../topics/class-based-views.txt:46
msgid ""
"Allow users to create, update, and delete objects -- with or without "
"authorization."
msgstr ""

# a89590c492094042850ab6899df20606
#: ../../topics/class-based-views.txt:49
msgid ""
"Taken together, these views provide easy interfaces to perform the most "
"common tasks developers encounter."
msgstr ""

# 156809101e62468f844e0b9de0a24b33
#: ../../topics/class-based-views.txt:54
msgid "Simple usage"
msgstr ""

# d7637f630ecf4ba4a6000805ce898d71
#: ../../topics/class-based-views.txt:56
msgid ""
"Class-based generic views (and any class-based views that inherit from the "
"base classes Django provides) can be configured in two ways: subclassing, or "
"passing in arguments directly in the URLconf."
msgstr ""

# 78ef9012e3eb4bc6abe81f0993e41036
#: ../../topics/class-based-views.txt:60
msgid ""
"When you subclass a class-based view, you can override attributes (such as "
"the ``template_name``) or methods (such as ``get_context_data``) in your "
"subclass to provide new values or methods. Consider, for example, a view "
"that just displays one template, ``about.html``. Django has a generic view "
"to do this - :class:`~django.views.generic.base.TemplateView` - so we can "
"just subclass it, and override the template name::"
msgstr ""

# 38a2e6acf9584d089f77850d9df70171
#: ../../topics/class-based-views.txt:73
msgid ""
"Then, we just need to add this new view into our URLconf. As the class-based "
"views themselves are classes, we point the URL to the ``as_view`` class "
"method instead, which is the entry point for class-based views::"
msgstr ""

# af402e95cf924c22afb6c7fbda37ba16
#: ../../topics/class-based-views.txt:85
msgid ""
"Alternatively, if you're only changing a few simple attributes on a class-"
"based view, you can simply pass the new attributes into the ``as_view`` "
"method call itself::"
msgstr ""

# 6b765b4d186144cc83441ddc9719dbe9
#: ../../topics/class-based-views.txt:96
msgid ""
"A similar overriding pattern can be used for the ``url`` attribute on :class:"
"`~django.views.generic.base.RedirectView`, another simple generic view."
msgstr ""

# 567c472a96d44f57953ffaca640da281
#: ../../topics/class-based-views.txt:102
msgid "Generic views of objects"
msgstr ""

# 6557023d739642f8a6d6044cbc955c6d
#: ../../topics/class-based-views.txt:104
msgid ""
":class:`~django.views.generic.base.TemplateView` certainly is useful, but "
"Django's generic views really shine when it comes to presenting views of "
"your database content. Because it's such a common task, Django comes with a "
"handful of built-in generic views that make generating list and detail views "
"of objects incredibly easy."
msgstr ""

# 6e8557b7739b49e685cca5a050c5e5c3
#: ../../topics/class-based-views.txt:110
msgid ""
"Let's take a look at one of these generic views: the \"object list\" view. "
"We'll be using these models::"
msgstr ""

# 276b502a2bc2405e94cb2d85a04f2297
#: ../../topics/class-based-views.txt:136
msgid ""
"To build a list page of all publishers, we'd use a URLconf along these "
"lines::"
msgstr ""

# 116cc1379cb94054bb372051e57492e6
#: ../../topics/class-based-views.txt:148
msgid ""
"That's all the Python code we need to write. We still need to write a "
"template, however. We could explicitly tell the view which template to use "
"by including a ``template_name`` key in the arguments to as_view, but in the "
"absence of an explicit template Django will infer one from the object's "
"name. In this case, the inferred template will be ``\"books/publisher_list."
"html\"`` -- the \"books\" part comes from the name of the app that defines "
"the model, while the \"publisher\" bit is just the lowercased version of the "
"model's name."
msgstr ""

# c0e57b5b709e4d8298f4891fbb92cd82
#: ../../topics/class-based-views.txt:158
msgid ""
"Thus, when (for example) the :class:`django.template.loaders.app_directories."
"Loader` template loader is enabled in :setting:`TEMPLATE_LOADERS`, the "
"template location would be::"
msgstr ""

# 2b2028540fe848c6b2638d2a48697a56
#: ../../topics/class-based-views.txt:166
msgid ""
"This template will be rendered against a context containing a variable "
"called ``object_list`` that contains all the publisher objects. A very "
"simple template might look like the following::"
msgstr ""

# 10a91467ffd4434299edb7eb0a29c546
#: ../../topics/class-based-views.txt:181
msgid ""
"That's really all there is to it. All the cool features of generic views "
"come from changing the \"info\" dictionary passed to the generic view. The :"
"doc:`generic views reference</ref/class-based-views>` documents all the "
"generic views and their options in detail; the rest of this document will "
"consider some of the common ways you might customize and extend generic "
"views."
msgstr ""

# 24945c7db6d04e10b115ca2079018c9b
#: ../../topics/class-based-views.txt:189
msgid "Extending generic views"
msgstr ""

# eed5ef8e543c4a1d8c16803a7ff547a4
#: ../../topics/class-based-views.txt:193
msgid ""
"There's no question that using generic views can speed up development "
"substantially. In most projects, however, there comes a moment when the "
"generic views no longer suffice. Indeed, the most common question asked by "
"new Django developers is how to make generic views handle a wider array of "
"situations."
msgstr ""

# f45bc9d5716342ac9f83547e4b2c44da
#: ../../topics/class-based-views.txt:199
msgid ""
"This is one of the reasons generic views were redesigned for the 1.3 release "
"- previously, they were just view functions with a bewildering array of "
"options; now, rather than passing in a large amount of configuration in the "
"URLconf, the recommended way to extend generic views is to subclass them, "
"and override their attributes or methods."
msgstr ""

# 3e0e0a65df174cc68611ab45b55b8594
#: ../../topics/class-based-views.txt:207
msgid "Making \"friendly\" template contexts"
msgstr ""

# 8ee867c694e14453bc47a359df73fed9
#: ../../topics/class-based-views.txt:209
msgid ""
"You might have noticed that our sample publisher list template stores all "
"the publishers in a variable named ``object_list``. While this works just "
"fine, it isn't all that \"friendly\" to template authors: they have to "
"\"just know\" that they're dealing with publishers here."
msgstr ""

# 0b11f07b63374df3a8cfbc70cc99f238
#: ../../topics/class-based-views.txt:214
msgid ""
"Well, if you're dealing with a model object, this is already done for you. "
"When you are dealing with an object or queryset, Django is able to populate "
"the context using the verbose name (or the plural verbose name, in the case "
"of a list of objects) of the object being displayed. This is provided in "
"addition to the default ``object_list`` entry, but contains exactly the same "
"data."
msgstr ""

# 0fb49b6f702440bd831faef708d209cf
#: ../../topics/class-based-views.txt:221
msgid ""
"If the verbose name (or plural verbose name) still isn't a good match, you "
"can manually set the name of the context variable. The "
"``context_object_name`` attribute on a generic view specifies the context "
"variable to use. In this example, we'll override it in the URLconf, since "
"it's a simple change:"
msgstr ""

# 8197530534b04303abebe8039cb93b38
#: ../../topics/class-based-views.txt:236
msgid ""
"Providing a useful ``context_object_name`` is always a good idea. Your "
"coworkers who design templates will thank you."
msgstr ""

# 856ea037aa514b7298aacdb6e4d184b8
#: ../../topics/class-based-views.txt:241
msgid "Adding extra context"
msgstr ""

# 36b3db21012d44efa0f48576ef4fd5ec
#: ../../topics/class-based-views.txt:243
msgid ""
"Often you simply need to present some extra information beyond that provided "
"by the generic view. For example, think of showing a list of all the books "
"on each publisher detail page. The :class:`~django.views.generic.detail."
"DetailView` generic view provides the publisher to the context, but it seems "
"there's no way to get additional information in that template."
msgstr ""

# 391ab77b236c4167b743eaffedb5ba1f
#: ../../topics/class-based-views.txt:250
msgid ""
"However, there is; you can subclass :class:`~django.views.generic.detail."
"DetailView` and provide your own implementation of the ``get_context_data`` "
"method. The default implementation of this that comes with :class:`~django."
"views.generic.detail.DetailView` simply adds in the object being displayed "
"to the template, but you can override it to show more::"
msgstr ""

# 7a2be0e738864f61b67420ea68909026
#: ../../topics/class-based-views.txt:275
msgid "Viewing subsets of objects"
msgstr ""

# 9428d908baf449dea1e45d4fc9a740f7
#: ../../topics/class-based-views.txt:277
msgid ""
"Now let's take a closer look at the ``model`` argument we've been using all "
"along. The ``model`` argument, which specifies the database model that the "
"view will operate upon, is available on all the generic views that operate "
"on a single object or a collection of objects. However, the ``model`` "
"argument is not the only way to specify the objects that the view will "
"operate upon -- you can also specify the list of objects using the "
"``queryset`` argument::"
msgstr ""

# 2bfeaa09bf9c467c94de350bdf350785
#: ../../topics/class-based-views.txt:293
msgid ""
"Specifying ``model = Publisher`` is really just shorthand for saying "
"``queryset = Publisher.objects.all()``. However, by using ``queryset`` to "
"define a filtered list of objects you can be more specific about the objects "
"that will be visible in the view (see :doc:`/topics/db/queries` for more "
"information about :class:`QuerySet` objects, and see the :doc:`class-based "
"views reference </ref/class-based-views>` for the complete details)."
msgstr ""

# cd7c40288c4c403b9a4dd775c881312f
#: ../../topics/class-based-views.txt:301
msgid ""
"To pick a simple example, we might want to order a list of books by "
"publication date, with the most recent first::"
msgstr ""

# 4d1e912445e54e9383446426d91ca994
#: ../../topics/class-based-views.txt:316
msgid ""
"That's a pretty simple example, but it illustrates the idea nicely. Of "
"course, you'll usually want to do more than just reorder objects. If you "
"want to present a list of books by a particular publisher, you can use the "
"same technique (here, illustrated using subclassing rather than by passing "
"arguments in the URLconf)::"
msgstr ""

# 81a47d219c9b46daaede2943e5798f50
#: ../../topics/class-based-views.txt:331
msgid ""
"Notice that along with a filtered ``queryset``, we're also using a custom "
"template name. If we didn't, the generic view would use the same template as "
"the \"vanilla\" object list, which might not be what we want."
msgstr ""

# b352bac59b574b6dbdb70a6d56f9df17
#: ../../topics/class-based-views.txt:335
msgid ""
"Also notice that this isn't a very elegant way of doing publisher-specific "
"books. If we want to add another publisher page, we'd need another handful "
"of lines in the URLconf, and more than a few publishers would get "
"unreasonable. We'll deal with this problem in the next section."
msgstr ""

# d576ddb33ccf4f9b8a14bac32f9b742c
#: ../../topics/class-based-views.txt:342
msgid ""
"If you get a 404 when requesting ``/books/acme/``, check to ensure you "
"actually have a Publisher with the name 'ACME Publishing'.  Generic views "
"have an ``allow_empty`` parameter for this case.  See the :doc:`class-based-"
"views reference</ref/class-based-views>` for more details."
msgstr ""

# 68aecbba044a44748e13bbca8b37df79
#: ../../topics/class-based-views.txt:349
msgid "Dynamic filtering"
msgstr ""

# a8a2af90d9a041daa4f1047299a84830
#: ../../topics/class-based-views.txt:351
msgid ""
"Another common need is to filter down the objects given in a list page by "
"some key in the URL. Earlier we hard-coded the publisher's name in the "
"URLconf, but what if we wanted to write a view that displayed all the books "
"by some arbitrary publisher?"
msgstr ""

# 17f19b25a49842c496822162d9451383
#: ../../topics/class-based-views.txt:356
msgid ""
"Handily, the ``ListView`` has a :meth:`~django.views.generic.detail.ListView."
"get_queryset` method we can override. Previously, it has just been returning "
"the value of the ``queryset`` attribute, but now we can add more logic."
msgstr ""

# cec4d0e0bec046718578a51825f7fc69
#: ../../topics/class-based-views.txt:361
msgid ""
"The key part to making this work is that when class-based views are called, "
"various useful things are stored on ``self``; as well as the request (``self."
"request``) this includes the positional (``self.args``) and name-based "
"(``self.kwargs``) arguments captured according to the URLconf."
msgstr ""

# f076660aded7490d9abdf4e99c8a94ba
#: ../../topics/class-based-views.txt:366
msgid "Here, we have a URLconf with a single captured group::"
msgstr ""

# 1cfb03dc086346b1822c6ff8eaa70893
#: ../../topics/class-based-views.txt:374
msgid "Next, we'll write the ``PublisherBookListView`` view itself::"
msgstr ""

# ec17af86a5bf4d018b6a76c36d3db508
#: ../../topics/class-based-views.txt:389
msgid ""
"As you can see, it's quite easy to add more logic to the queryset selection; "
"if we wanted, we could use ``self.request.user`` to filter using the current "
"user, or other more complex logic."
msgstr ""

# e89ddedb324148b3818e97cc8f3e8020
#: ../../topics/class-based-views.txt:393
msgid ""
"We can also add the publisher into the context at the same time, so we can "
"use it in the template::"
msgstr ""

# 31987976c2ca41a1957a774e604551d0
#: ../../topics/class-based-views.txt:413
msgid "Performing extra work"
msgstr ""

# b01279551e4e4a36972e5d6ca7a2e6ef
#: ../../topics/class-based-views.txt:415
msgid ""
"The last common pattern we'll look at involves doing some extra work before "
"or after calling the generic view."
msgstr ""

# 71957ce591c846b4a1c32095324ce16a
#: ../../topics/class-based-views.txt:418
msgid ""
"Imagine we had a ``last_accessed`` field on our ``Author`` object that we "
"were using to keep track of the last time anybody looked at that author::"
msgstr ""

# 577b70cf053b45819cb238942f94b9e2
#: ../../topics/class-based-views.txt:431
msgid ""
"The generic ``DetailView`` class, of course, wouldn't know anything about "
"this field, but once again we could easily write a custom view to keep that "
"field updated."
msgstr ""

# 5776e230a17e47778d920013b0e6ad36
#: ../../topics/class-based-views.txt:435
msgid ""
"First, we'd need to add an author detail bit in the URLconf to point to a "
"custom view:"
msgstr ""

# 04ebb442aa364d01b7c8753eacfb1ad3
#: ../../topics/class-based-views.txt:447
msgid ""
"Then we'd write our new view -- ``get_object`` is the method that retrieves "
"the object -- so we simply override it and wrap the call::"
msgstr ""

# d4a6cbe99cb24e9e92113725a96a3b5a
#: ../../topics/class-based-views.txt:470
msgid ""
"This code won't actually work unless you create a ``books/author_detail."
"html`` template."
msgstr ""

# 91b835e6f0084f58b79bd8488759ce05
#: ../../topics/class-based-views.txt:475
msgid ""
"The URLconf here uses the named group ``pk`` - this name is the default name "
"that ``DetailView`` uses to find the value of the primary key used to filter "
"the queryset."
msgstr ""

# 92470c8e27414fbd916acd849e5d45de
#: ../../topics/class-based-views.txt:479
msgid ""
"If you want to change it, you'll need to do your own ``get()`` call on "
"``self.queryset`` using the new named parameter from ``self.kwargs``."
msgstr ""

# 922c240aefdb4dc29addf4de37374f47
#: ../../topics/class-based-views.txt:483
msgid "More than just HTML"
msgstr ""

# 06a4a295e4914aa58eae4e810f6a167f
#: ../../topics/class-based-views.txt:485
msgid ""
"So far, we've been focusing on rendering templates to generate responses. "
"However, that's not all generic views can do."
msgstr ""

# 4b739651c94c4b8eba6b2506f195f846
#: ../../topics/class-based-views.txt:488
msgid ""
"Each generic view is composed out of a series of mixins, and each mixin "
"contributes a little piece of the entire view. Some of these mixins -- such "
"as :class:`~django.views.generic.base.TemplateResponseMixin` -- are "
"specifically designed for rendering content to an HTML response using a "
"template. However, you can write your own mixins that perform different "
"rendering behavior."
msgstr ""

# cbcc9035e1ff443aa49d70cb33278114
#: ../../topics/class-based-views.txt:496
msgid "For example, a simple JSON mixin might look something like this::"
msgstr ""

# ce39a0cedaf94cc28aadfd5ebd60d27d
#: ../../topics/class-based-views.txt:520
msgid ""
"Then, you could build a JSON-returning :class:`~django.views.generic.detail."
"DetailView` by mixing your :class:`JSONResponseMixin` with the :class:"
"`~django.views.generic.detail.BaseDetailView` -- (the :class:`~django.views."
"generic.detail.DetailView` before template rendering behavior has been mixed "
"in)::"
msgstr ""

# 85934da054f24b5191730a80f2c6eb4a
#: ../../topics/class-based-views.txt:530
msgid ""
"This view can then be deployed in the same way as any other :class:`~django."
"views.generic.detail.DetailView`, with exactly the same behavior -- except "
"for the format of the response."
msgstr ""

# 3b3e3f0a07f245938f038676aefad771
#: ../../topics/class-based-views.txt:534
msgid ""
"If you want to be really adventurous, you could even mix a :class:`~django."
"views.generic.detail.DetailView` subclass that is able to return *both* HTML "
"and JSON content, depending on some property of the HTTP request, such as a "
"query argument or a HTTP header. Just mix in both the :class:"
"`JSONResponseMixin` and a :class:`~django.views.generic.detail."
"SingleObjectTemplateResponseMixin`, and override the implementation of :func:"
"`render_to_response()` to defer to the appropriate subclass depending on the "
"type of response that the user requested::"
msgstr ""

# b4f112758d1544afbb359168a9727e35
#: ../../topics/class-based-views.txt:552
msgid ""
"Because of the way that Python resolves method overloading, the local "
"``render_to_response()`` implementation will override the versions provided "
"by :class:`JSONResponseMixin` and :class:`~django.views.generic.detail."
"SingleObjectTemplateResponseMixin`."
msgstr ""

# 12d2e582053f405892ff1e42955fe697
#: ../../topics/class-based-views.txt:558
msgid "Decorating class-based views"
msgstr ""

# df7e364945844081ad27c10d85692aaa
#: ../../topics/class-based-views.txt:562
msgid ""
"The extension of class-based views isn't limited to using mixins. You can "
"use also use decorators."
msgstr ""

# c23e31003d344de8b6e945cba1a9c2cf
#: ../../topics/class-based-views.txt:566
msgid "Decorating in URLconf"
msgstr ""

# 6c008fd300b94725a6a028ade916358b
#: ../../topics/class-based-views.txt:568
msgid ""
"The simplest way of decorating class-based views is to decorate the result "
"of the :meth:`~django.views.generic.base.View.as_view` method. The easiest "
"place to do this is in the URLconf where you deploy your view::"
msgstr ""

# 4d233d19421b4213b8c3440dc1b15045
#: ../../topics/class-based-views.txt:583
msgid ""
"This approach applies the decorator on a per-instance basis. If you want "
"every instance of a view to be decorated, you need to take a different "
"approach."
msgstr ""

# 33bcd06b2a4f4d74896d94beb313004b
#: ../../topics/class-based-views.txt:588
msgid "Decorating the class"
msgstr ""

# cb5bd54c9e18437e8da863014d88b31b
#: ../../topics/class-based-views.txt:590
msgid ""
"To decorate every instance of a class-based view, you need to decorate the "
"class definition itself. To do this you apply the decorator to the :meth:"
"`~django.views.generic.base.View.dispatch` method of the class."
msgstr ""

# b3943b3904014f7cbd606b3daae284bc
#: ../../topics/class-based-views.txt:594
msgid ""
"A method on a class isn't quite the same as a standalone function, so you "
"can't just apply a function decorator to the method -- you need to transform "
"it into a method decorator first. The ``method_decorator`` decorator "
"transforms a function decorator into a method decorator so that it can be "
"used on an instance method. For example::"
msgstr ""

# e93c3b815e2e402cb49bebbd3830ee5f
#: ../../topics/class-based-views.txt:611
msgid ""
"In this example, every instance of ``ProtectedView`` will have login "
"protection."
msgstr ""

# 22ecbe583f7c4466b9b868a4a9b87d66
#: ../../topics/class-based-views.txt:616
msgid ""
"``method_decorator`` passes ``*args`` and ``**kwargs`` as parameters to the "
"decorated method on the class. If your method does not accept a compatible "
"set of parameters it will raise a ``TypeError`` exception."
msgstr ""
