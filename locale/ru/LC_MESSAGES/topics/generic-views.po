# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2012.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-03-24 01:58\n"
"PO-Revision-Date: 2012-02-15 15:13\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# ed5a1c7f3b164a02b6c3dd806c77f24b
#: ../../topics/generic-views.txt:3
msgid "Generic views"
msgstr ""

# cac68876040b45e8821e13dffba5caf0
#: ../../topics/generic-views.txt:10
msgid ""
"From Django 1.3, function-based generic views have been deprecated in favor "
"of a class-based approach, described in the class-based views :doc:`topic "
"guide </topics/class-based-views>` and :doc:`detailed reference </ref/class-"
"based-views>`."
msgstr ""

# 46b40e7db4d346f8800c5acc9c3fffa5
#: ../../topics/generic-views.txt:15
msgid ""
"Writing Web applications can be monotonous, because we repeat certain "
"patterns again and again. Django tries to take away some of that monotony at "
"the model and template layers, but Web developers also experience this "
"boredom at the view level."
msgstr ""

# 1bc64f8a730f49e1ac4780f92de7aeb5
#: ../../topics/generic-views.txt:20
msgid ""
"Django's *generic views* were developed to ease that pain. They take certain "
"common idioms and patterns found in view development and abstract them so "
"that you can quickly write common views of data without having to write too "
"much code."
msgstr ""

# d2bc4cb6a0df42b0a165e7f247f9d79d
#: ../../topics/generic-views.txt:25
msgid ""
"We can recognize certain common tasks, like displaying a list of objects, "
"and write code that displays a list of *any* object. Then the model in "
"question can be passed as an extra argument to the URLconf."
msgstr ""

# d970d0d7e65b4b44b6a24232d937fb5b
#: ../../topics/generic-views.txt:29
msgid "Django ships with generic views to do the following:"
msgstr ""

# e45d704d57634e289c853bb7f67a5ad6
#: ../../topics/generic-views.txt:31
msgid ""
"Perform common \"simple\" tasks: redirect to a different page and render a "
"given template."
msgstr ""

# ee0cbc074467430e82bb375611baf12e
#: ../../topics/generic-views.txt:34
msgid ""
"Display list and detail pages for a single object. If we were creating an "
"application to manage conferences then a ``talk_list`` view and a "
"``registered_user_list`` view would be examples of list views. A single talk "
"page is an example of what we call a \"detail\" view."
msgstr ""

# e5d3b9dd4c63475b8d9ce42559e1fa13
#: ../../topics/generic-views.txt:39
msgid ""
"Present date-based objects in year/month/day archive pages, associated "
"detail, and \"latest\" pages. The Django Weblog's (https://www.djangoproject."
"com/weblog/) year, month, and day archives are built with these, as would be "
"a typical newspaper's archives."
msgstr ""

# 346ed14cce77473c8f0fd986eea16d37
#: ../../topics/generic-views.txt:45
msgid ""
"Allow users to create, update, and delete objects -- with or without "
"authorization."
msgstr ""

# b1bcc94fd4e2470faa4ec55fe1d0e880
#: ../../topics/generic-views.txt:48
msgid ""
"Taken together, these views provide easy interfaces to perform the most "
"common tasks developers encounter."
msgstr ""

# 7ac0b0c820f7482b8a99afd0aa9d277c
#: ../../topics/generic-views.txt:52
msgid "Using generic views"
msgstr ""

# df29106077954133822343d0956ebea5
#: ../../topics/generic-views.txt:54
msgid ""
"All of these views are used by creating configuration dictionaries in your "
"URLconf files and passing those dictionaries as the third member of the "
"URLconf tuple for a given pattern."
msgstr ""

# 318b4fbf251b46b8905cc299641d469c
#: ../../topics/generic-views.txt:58
msgid ""
"For example, here's a simple URLconf you could use to present a static "
"\"about\" page::"
msgstr ""

# e10d2827d64d4dfeae0f6eeba0c70cae
#: ../../topics/generic-views.txt:70
msgid ""
"Though this might seem a bit \"magical\" at first glance  -- look, a view "
"with no code! --, actually the ``direct_to_template`` view simply grabs "
"information from the extra-parameters dictionary and uses that information "
"when rendering the view."
msgstr ""

# 3ab889ff5830457ea2c7787790f3c5fa
#: ../../topics/generic-views.txt:75
msgid ""
"Because this generic view -- and all the others -- is a regular view "
"function like any other, we can reuse it inside our own views. As an "
"example, let's extend our \"about\" example to map URLs of the form ``/about/"
"<whatever>/`` to statically rendered ``about/<whatever>.html``. We'll do "
"this by first modifying the URLconf to point to a view function:"
msgstr ""

# e4b314915ae0484ab6484e83bff5ee70
#: ../../topics/generic-views.txt:94
msgid "Next, we'll write the ``about_pages`` view::"
msgstr ""

# 732c8ea8caf546b6bec0df5fef04e337
#: ../../topics/generic-views.txt:106
msgid ""
"Here we're treating ``direct_to_template`` like any other function. Since it "
"returns an ``HttpResponse``, we can simply return it as-is. The only "
"slightly tricky business here is dealing with missing templates. We don't "
"want a nonexistent template to cause a server error, so we catch "
"``TemplateDoesNotExist`` exceptions and return 404 errors instead."
msgstr ""

# edc4e367ed1b4a82ae4a8774ccfcd5e9
#: ../../topics/generic-views.txt:114
msgid ""
"Sharp-eyed readers may have noticed a possible security hole: we're "
"constructing the template name using interpolated content from the browser "
"(``template=\"about/%s.html\" % page``). At first glance, this looks like a "
"classic *directory traversal* vulnerability. But is it really?"
msgstr ""

# e5cb784f20d34168a9d9b4cbc69992a2
#: ../../topics/generic-views.txt:119
msgid ""
"Not exactly. Yes, a maliciously crafted value of ``page`` could cause "
"directory traversal, but although ``page`` *is* taken from the request URL, "
"not every value will be accepted. The key is in the URLconf: we're using the "
"regular expression ``\\w+`` to match the ``page`` part of the URL, and ``"
"\\w`` only accepts letters and numbers. Thus, any malicious characters (dots "
"and slashes, here) will be rejected by the URL resolver before they reach "
"the view itself."
msgstr ""

# 8c9fa135da2c480dbd93ee46a7ca905e
#: ../../topics/generic-views.txt:128
msgid "Generic views of objects"
msgstr ""

# ca126ae119b4438181d8b4673c6c1acb
#: ../../topics/generic-views.txt:130
msgid ""
"The ``direct_to_template`` certainly is useful, but Django's generic views "
"really shine when it comes to presenting views on your database content. "
"Because it's such a common task, Django comes with a handful of built-in "
"generic views that make generating list and detail views of objects "
"incredibly easy."
msgstr ""

# 90ddff2b707f4e02a9899fbb41d5375a
#: ../../topics/generic-views.txt:135
msgid ""
"Let's take a look at one of these generic views: the \"object list\" view. "
"We'll be using these models::"
msgstr ""

# de80371139dd41c3b48e62464f7953de
#: ../../topics/generic-views.txt:161
msgid ""
"To build a list page of all publishers, we'd use a URLconf along these "
"lines::"
msgstr ""

# 9fba8d5415014018868edbc01106d218
#: ../../topics/generic-views.txt:175
msgid ""
"That's all the Python code we need to write. We still need to write a "
"template, however. We could explicitly tell the ``object_list`` view which "
"template to use by including a ``template_name`` key in the extra arguments "
"dictionary, but in the absence of an explicit template Django will infer one "
"from the object's name. In this case, the inferred template will be ``"
"\"books/publisher_list.html\"`` -- the \"books\" part comes from the name of "
"the app that defines the model, while the \"publisher\" bit is just the "
"lowercased version of the model's name."
msgstr ""

# 22c1217c0add40198241eefa0dee5fff
#: ../../topics/generic-views.txt:186
msgid ""
"This template will be rendered against a context containing a variable "
"called ``object_list`` that contains all the publisher objects. A very "
"simple template might look like the following::"
msgstr ""

# 84fc134c80cc462dbee64e5c6e002350
#: ../../topics/generic-views.txt:201
msgid ""
"That's really all there is to it. All the cool features of generic views "
"come from changing the \"info\" dictionary passed to the generic view. The :"
"doc:`generic views reference</ref/generic-views>` documents all the generic "
"views and all their options in detail; the rest of this document will "
"consider some of the common ways you might customize and extend generic "
"views."
msgstr ""

# 9cea8cc909984ce6a1e8971d981f1016
#: ../../topics/generic-views.txt:208
msgid "Extending generic views"
msgstr ""

# 10d371214cf24f48a0d9b578b77da383
#: ../../topics/generic-views.txt:212
msgid ""
"There's no question that using generic views can speed up development "
"substantially. In most projects, however, there comes a moment when the "
"generic views no longer suffice. Indeed, the most common question asked by "
"new Django developers is how to make generic views handle a wider array of "
"situations."
msgstr ""

# 6be8ae71544a47fcb0427ad51a240edb
#: ../../topics/generic-views.txt:218
msgid ""
"Luckily, in nearly every one of these cases, there are ways to simply extend "
"generic views to handle a larger array of use cases. These situations "
"usually fall into a handful of patterns dealt with in the sections that "
"follow."
msgstr ""

# e4ba3e09e97843488d4d179f02fa8dd8
#: ../../topics/generic-views.txt:223
msgid "Making \"friendly\" template contexts"
msgstr ""

# bba74f0147e94dc7b4c6dba80bc28a8c
#: ../../topics/generic-views.txt:225
msgid ""
"You might have noticed that our sample publisher list template stores all "
"the books in a variable named ``object_list``. While this works just fine, "
"it isn't all that \"friendly\" to template authors: they have to \"just know"
"\" that they're dealing with publishers here. A better name for that "
"variable would be ``publisher_list``; that variable's content is pretty "
"obvious."
msgstr ""

# b749804f790445bea034f50039dd4b75
#: ../../topics/generic-views.txt:231
msgid ""
"We can change the name of that variable easily with the "
"``template_object_name`` argument:"
msgstr ""

# 72559c3a82664d4e93cd52655b3b7c30
#: ../../topics/generic-views.txt:245
msgid ""
"Providing a useful ``template_object_name`` is always a good idea. Your "
"coworkers who design templates will thank you."
msgstr ""

# 01856125e49041649b8c47117e2c34e6
#: ../../topics/generic-views.txt:249
msgid "Adding extra context"
msgstr ""

# 49aac70380a94082bb4c9a2ddafbf99e
#: ../../topics/generic-views.txt:251
msgid ""
"Often you simply need to present some extra information beyond that provided "
"by the generic view. For example, think of showing a list of all the books "
"on each publisher detail page. The ``object_detail`` generic view provides "
"the publisher to the context, but it seems there's no way to get additional "
"information in that template."
msgstr ""

# 3a723dfd4c884646a26eeeabe6c66847
#: ../../topics/generic-views.txt:257
msgid ""
"But there is: all generic views take an extra optional parameter, "
"``extra_context``. This is a dictionary of extra objects that will be added "
"to the template's context. So, to provide the list of all books on the "
"detail detail view, we'd use an info dict like this:"
msgstr ""

# 48897af1c4cd4d5a83b330f28a232438
#: ../../topics/generic-views.txt:272
msgid ""
"This would populate a ``{{ book_list }}`` variable in the template context. "
"This pattern can be used to pass any information down into the template for "
"the generic view. It's very handy."
msgstr ""

# 8f717c5649ba45a0a21c72ad80c7d98b
#: ../../topics/generic-views.txt:276
msgid "However, there's actually a subtle bug here -- can you spot it?"
msgstr ""

# f89a58dfad904637b8eddccb85ea1bc0
#: ../../topics/generic-views.txt:278
msgid ""
"The problem has to do with when the queries in ``extra_context`` are "
"evaluated. Because this example puts ``Book.objects.all()`` in the URLconf, "
"it will be evaluated only once (when the URLconf is first loaded). Once you "
"add or remove books, you'll notice that the generic view doesn't reflect "
"those changes until you reload the Web server (see :ref:`caching-and-"
"querysets` for more information about when QuerySets are cached and "
"evaluated)."
msgstr ""

# 9ad4e661aa8b47f9a5cc475820cf4a2b
#: ../../topics/generic-views.txt:287
msgid ""
"This problem doesn't apply to the ``queryset`` generic view argument. Since "
"Django knows that particular QuerySet should *never* be cached, the generic "
"view takes care of clearing the cache when each view is rendered."
msgstr ""

# 3e258c6d7617424fbc3b6b4c4eaa1637
#: ../../topics/generic-views.txt:291
msgid ""
"The solution is to use a callback in ``extra_context`` instead of a value. "
"Any callable (i.e., a function) that's passed to ``extra_context`` will be "
"evaluated when the view is rendered (instead of only once). You could do "
"this with an explicitly defined function:"
msgstr ""

# 8fecdc9be64a408cb0b7becc0fc3f5c0
#: ../../topics/generic-views.txt:307
msgid ""
"or you could use a less obvious but shorter version that relies on the fact "
"that ``Book.objects.all`` is itself a callable:"
msgstr ""

# da5d9c06deee47de8405b9e538a1ffdd
#: ../../topics/generic-views.txt:318
msgid ""
"Notice the lack of parentheses after ``Book.objects.all``; this references "
"the function without actually calling it (which the generic view will do "
"later)."
msgstr ""

# 0b52a40e5efd44cea7ea62b2385036f7
#: ../../topics/generic-views.txt:322
msgid "Viewing subsets of objects"
msgstr ""

# 9606210c39d44714ada1229508f609bd
#: ../../topics/generic-views.txt:324
msgid ""
"Now let's take a closer look at this ``queryset`` key we've been using all "
"along. Most generic views take one of these ``queryset`` arguments -- it's "
"how the view knows which set of objects to display (see :doc:`/topics/db/"
"queries` for more information about ``QuerySet`` objects, and see the :doc:"
"`generic views reference</ref/generic-views>` for the complete details)."
msgstr ""

# fe1cce097ccc43ab8845272813bf1460
#: ../../topics/generic-views.txt:330
msgid ""
"To pick a simple example, we might want to order a list of books by "
"publication date, with the most recent first:"
msgstr ""

# 9037617810e24ca89a0847f7cce16177
#: ../../topics/generic-views.txt:345
msgid ""
"That's a pretty simple example, but it illustrates the idea nicely. Of "
"course, you'll usually want to do more than just reorder objects. If you "
"want to present a list of books by a particular publisher, you can use the "
"same technique:"
msgstr ""

# f8b67d8b4ded4724aa73f0047af986cf
#: ../../topics/generic-views.txt:362
msgid ""
"Notice that along with a filtered ``queryset``, we're also using a custom "
"template name. If we didn't, the generic view would use the same template as "
"the \"vanilla\" object list, which might not be what we want."
msgstr ""

# a5bb6ca79c474d2d89d50b6d66410fd6
#: ../../topics/generic-views.txt:366
msgid ""
"Also notice that this isn't a very elegant way of doing publisher-specific "
"books. If we want to add another publisher page, we'd need another handful "
"of lines in the URLconf, and more than a few publishers would get "
"unreasonable. We'll deal with this problem in the next section."
msgstr ""

# e052f3cd88ec4b6dbd2e2928f881663d
#: ../../topics/generic-views.txt:373
msgid ""
"If you get a 404 when requesting ``/books/acme/``, check to ensure you "
"actually have a Publisher with the name 'ACME Publishing'.  Generic views "
"have an ``allow_empty`` parameter for this case.  See the :doc:`generic "
"views reference</ref/generic-views>` for more details."
msgstr ""

# fe495fd4be284668a9eb6aff9594d7f3
#: ../../topics/generic-views.txt:379
msgid "Complex filtering with wrapper functions"
msgstr ""

# ca5632cac3db456b80534caf82a0fd8e
#: ../../topics/generic-views.txt:381
msgid ""
"Another common need is to filter down the objects given in a list page by "
"some key in the URL. Earlier we hard-coded the publisher's name in the "
"URLconf, but what if we wanted to write a view that displayed all the books "
"by some arbitrary publisher? We can \"wrap\" the ``object_list`` generic "
"view to avoid writing a lot of code by hand. As usual, we'll start by "
"writing a URLconf:"
msgstr ""

# 84f0fd6fc18b423dace71aa08909c140
#: ../../topics/generic-views.txt:396
msgid "Next, we'll write the ``books_by_publisher`` view itself::"
msgstr ""

# 6994bb57e5a140c68bd0e3c8cc4375af
#: ../../topics/generic-views.txt:419
msgid ""
"This works because there's really nothing special about generic views -- "
"they're just Python functions. Like any view function, generic views expect "
"a certain set of arguments and return ``HttpResponse`` objects. Thus, it's "
"incredibly easy to wrap a small function around a generic view that does "
"additional work before (or after; see the next section) handing things off "
"to the generic view."
msgstr ""

# df3ca96a8b2346a0827a5ffc0145c0e4
#: ../../topics/generic-views.txt:427
msgid ""
"Notice that in the preceding example we passed the current publisher being "
"displayed in the ``extra_context``. This is usually a good idea in wrappers "
"of this nature; it lets the template know which \"parent\" object is "
"currently being browsed."
msgstr ""

# 91f4cb0c1a96476282ad667c919d0971
#: ../../topics/generic-views.txt:433
msgid "Performing extra work"
msgstr ""

# d67ad2680f5346b5b44b2a8520d4c7f4
#: ../../topics/generic-views.txt:435
msgid ""
"The last common pattern we'll look at involves doing some extra work before "
"or after calling the generic view."
msgstr ""

# b7aef80ec6374ad68f3e446897f284bf
#: ../../topics/generic-views.txt:438
msgid ""
"Imagine we had a ``last_accessed`` field on our ``Author`` object that we "
"were using to keep track of the last time anybody looked at that author::"
msgstr ""

# d03884d9e45f4dc790d4f55fe3650b48
#: ../../topics/generic-views.txt:451
msgid ""
"The generic ``object_detail`` view, of course, wouldn't know anything about "
"this field, but once again we could easily write a custom view to keep that "
"field updated."
msgstr ""

# c60550b873e848fca3f0894c8a8d7525
#: ../../topics/generic-views.txt:455
msgid ""
"First, we'd need to add an author detail bit in the URLconf to point to a "
"custom view:"
msgstr ""

# 9ab307cdaf6b43d9b34b57b31f25dd04
#: ../../topics/generic-views.txt:467
msgid "Then we'd write our wrapper function::"
msgstr ""

# c6328fe2e2d24de290b9e7eeca36e9eb
#: ../../topics/generic-views.txt:491
msgid ""
"This code won't actually work unless you create a ``books/author_detail."
"html`` template."
msgstr ""

# 44ffbe0c98ef4d6297b6a9808b528521
#: ../../topics/generic-views.txt:494
msgid ""
"We can use a similar idiom to alter the response returned by the generic "
"view. If we wanted to provide a downloadable plain-text version of the list "
"of authors, we could use a view like this::"
msgstr ""

# 97b7929226824078bb00eafbc66820f2
#: ../../topics/generic-views.txt:508
msgid ""
"This works because the generic views return simple ``HttpResponse`` objects "
"that can be treated like dictionaries to set HTTP headers. This ``Content-"
"Disposition`` business, by the way, instructs the browser to download and "
"save the page instead of displaying it in the browser."
msgstr ""
