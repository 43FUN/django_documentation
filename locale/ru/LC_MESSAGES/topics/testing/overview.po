# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated <>, 2013, 2014.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-07-11 11:43+0300\n"
"PO-Revision-Date: 2014-12-25 18:41+0200\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"
"X-Generator: Gtranslator 2.91.6\n"

# 5b1c62cdd9044b2c9b8fc63a11b4dec2
#: ../../topics/testing/overview.txt:3
msgid "Writing and running tests"
msgstr "Создание и запуск тестов"

# f4e3146f82884aa2b87f6136ddb667e3
#: ../../topics/testing/overview.txt:10
msgid ""
"The :doc:`testing tutorial </intro/tutorial05>`, the :doc:`testing tools "
"reference </topics/testing/tools>`, and the :doc:`advanced testing topics </"
"topics/testing/advanced>`."
msgstr ""
":doc:`Урок по тестированию </intro/tutorial05>`, :doc:`раздел об "
"инструментах для тестирования </topics/testing/tools>` и :doc:`раздел о "
"тестировании для опытных </topics/testing/advanced>`."

# 62dd554249b54d32b728dad6e1feabb8
#: ../../topics/testing/overview.txt:14
msgid ""
"This document is split into two primary sections. First, we explain how to "
"write tests with Django. Then, we explain how to run them."
msgstr ""
"Этот раздел состоит из двух разделов. В первом мы расскажем как писать тесты "
"с Django, во втором - как их запускать"

# 9f5875d060a74782abb3afc12035fd2c
#: ../../topics/testing/overview.txt:18
msgid "Writing tests"
msgstr "Написание тестов"

# 3e74984276404a34b1d8953a7f57c9b5
#: ../../topics/testing/overview.txt:20
msgid ""
"Django's unit tests use a Python standard library module: :mod:`unittest`. "
"This module defines tests using a class-based approach."
msgstr ""
"Юнит тесты для Django используют стандартную библиотеку Python: :mod:"
"`unittest`. Эта библиотека позволяет создавать тесты в ООП стиле."

# 7b5ae86bf4d547f69adae12a43be5750
#: ../../topics/testing/overview.txt:0
msgid "unittest2"
msgstr "unittest2"

# acd90a15d25f40a1b260edc4aae9e619
#: ../../topics/testing/overview.txt:27
msgid ""
"Python 2.7 introduced some major changes to the ``unittest`` library, adding "
"some extremely useful features. To ensure that every Django project could "
"benefit from these new features, Django used to ship with a copy of Python "
"2.7's ``unittest`` backported for Python 2.6 compatibility."
msgstr ""
"Python 2.7 внес несколько существенных изменений в библиотеку ``unittest``, "
"добавив очень полезный функционал. Чтобы каждый проект мог использовать этот "
"функционал, Django содержит копию библиотеки ``unittest`` для Python 2.7, "
"которая совместима с Python 2.6."

# 789e498a4484439ba0f54093b1da3104
#: ../../topics/testing/overview.txt:32
msgid ""
"Since Django no longer supports Python versions older than 2.7, ``django."
"utils.unittest`` is deprecated. Simply use ``unittest``."
msgstr ""
"Т.к. Django больше не поддерживает Python версии меньше 2.7, ``django.utils."
"unittest`` помечен как устаревший. Просто используйте ``unittest``."

# 581225c1376349be8f6723c7ec6da423
#: ../../topics/testing/overview.txt:37
msgid ""
"Here is an example which subclasses from :class:`django.test.TestCase`, "
"which is a subclass of :class:`unittest.TestCase` that runs each test inside "
"a transaction to provide isolation::"
msgstr ""
"В примере ниже мы наследуемся от :class:`django.test.TestCase`, который "
"является классом наследником :class:`unittest.TestCase`, и запускает каждый "
"тест в отдельной транзакции для их изоляции::"

# 6604fb4083c24f50a11b910674083d09
#: ../../topics/testing/overview.txt:56
msgid ""
"When you :ref:`run your tests <running-tests>`, the default behavior of the "
"test utility is to find all the test cases (that is, subclasses of :class:"
"`unittest.TestCase`) in any file whose name begins with ``test``, "
"automatically build a test suite out of those test cases, and run that suite."
msgstr ""
"Когда вы :ref:`запускаете тесты <running-tests>`, происходит поиск всех "
"тестов (классов унаследованных от :class:`unittest.TestCase`) в файлах, "
"которые начинаются с ``test``, затем создается набор тестов(test suite) и их "
"запуск."

# bc0c06239ff34db8bd72a7bdd4face70
#: ../../topics/testing/overview.txt:63
msgid ""
"Previously, Django's default test runner only discovered tests in ``tests."
"py`` and ``models.py`` files within a Python package listed in :setting:"
"`INSTALLED_APPS`."
msgstr ""
"В предыдущих версиях Django тесты искались только в файлах ``tests.py`` и "
"``models.py`` в пакетах Python, которые указаны в :setting:`INSTALLED_APPS`."

# f03cc872815d4eeea722c1af69642a33
#: ../../topics/testing/overview.txt:67
msgid "For more details about :mod:`unittest`, see the Python documentation."
msgstr "Подробности о :mod:`unittest` смотрите в документации Python."

# 7c96234611d44e06b686509ba5e37b2c
#: ../../topics/testing/overview.txt:71
msgid ""
"If your tests rely on database access such as creating or querying models, "
"be sure to create your test classes as subclasses of :class:`django.test."
"TestCase` rather than :class:`unittest.TestCase`."
msgstr ""
"Если ваши тесты используют базу данных, убедитесь, что вы наследуетесь от :"
"class:`django.test.TestCase`, а не :class:`unittest.TestCase`."

# b038e33417f848678b76d67d0e87f45d
#: ../../topics/testing/overview.txt:75
msgid ""
"Using :class:`unittest.TestCase` avoids the cost of running each test in a "
"transaction and flushing the database, but if your tests interact with the "
"database their behavior will vary based on the order that the test runner "
"executes them. This can lead to unit tests that pass when run in isolation "
"but fail when run in a suite."
msgstr ""
"При использовании :class:`unittest.TestCase` экономится время на создание "
"транзакции и сброса базы данных, но если тесты работают с базой данных, их "
"поведение очень зависит от порядка выполнения тестов. В таком случае тесты, "
"которые работают изолированно, могут не проходить при запуске вместе в "
"другими тестами."

# 0a86a5f18d1642b3b9e51bf882440819
#: ../../topics/testing/overview.txt:85
msgid "Running tests"
msgstr "Запуск тестов"

# dcc92595a65947c7a223182015bd6088
#: ../../topics/testing/overview.txt:87
msgid ""
"Once you've written tests, run them using the :djadmin:`test` command of "
"your project's ``manage.py`` utility::"
msgstr ""
"Чтобы запустить тесты, используйте команду :djadmin:`test` скрипта ``manage."
"py`` в вашей проекте::"

# ca2640d6170b4c03a9f8105447370d21
#: ../../topics/testing/overview.txt:92
msgid ""
"Test discovery is based on the unittest module's :py:ref:`built-in test "
"discovery <unittest-test-discovery>`.  By default, this will discover tests "
"in any file named \"test*.py\" under the current working directory."
msgstr ""
"Поиск тестов основан на :py:ref:`поиске тестов библиотеки unittest <unittest-"
"test-discovery>`. По умолчанию тесты ищутся во всех файлах \"test*.py\" в "
"текущем каталоге."

# 23b39897ba2849c1b844127d97da33bb
#: ../../topics/testing/overview.txt:96
msgid ""
"You can specify particular tests to run by supplying any number of \"test "
"labels\" to ``./manage.py test``. Each test label can be a full Python "
"dotted path to a package, module, ``TestCase`` subclass, or test method. For "
"instance::"
msgstr ""
"Вы можете запустить определенные тесты, указав \"test labels\" для команды "
"``./manage.py test``. Каждый \"label\" - это путь к пакету Python, модулю, "
"классу наследнику ``TestCase``, или методу теста. Например::"

# bc39199a3edb4747a4f50b607b9450bc
#: ../../topics/testing/overview.txt:112
msgid ""
"You can also provide a path to a directory to discover tests below that "
"directory::"
msgstr ""
"Также можно передать путь к каталогу, в котором будет выполнен поиск тестов::"

# 86585eedcf894bf5aced630a297fe1e7
#: ../../topics/testing/overview.txt:117
msgid ""
"You can specify a custom filename pattern match using the ``-p`` (or ``--"
"pattern``) option, if your test files are named differently from the ``test*."
"py`` pattern::"
msgstr ""
"Можно указать шаблон для поиска файлов с тестами, используя опцию ``-p`` "
"(или ``--pattern``), если имена ваших файлов с тестами не соответствуют "
"шаблону ``test*.py``::"

# 20f2cda76385422fabfd3eeb45e905a9
#: ../../topics/testing/overview.txt:125
msgid ""
"Previously, test labels were in the form ``applabel``, ``applabel."
"TestCase``, or ``applabel.TestCase.test_method``, rather than being true "
"Python dotted paths, and tests could only be found within ``tests.py`` or "
"``models.py`` files within a Python package listed in :setting:"
"`INSTALLED_APPS`. The ``--pattern`` option and file paths as test labels are "
"new in 1.6."
msgstr ""

# 90b85a49c6b3404b9ffc82935ba2868a
#: ../../topics/testing/overview.txt:132
msgid ""
"If you press ``Ctrl-C`` while the tests are running, the test runner will "
"wait for the currently running test to complete and then exit gracefully. "
"During a graceful exit the test runner will output details of any test "
"failures, report on how many tests were run and how many errors and failures "
"were encountered, and destroy any test databases as usual. Thus pressing "
"``Ctrl-C`` can be very useful if you forget to pass the :djadminopt:`--"
"failfast` option, notice that some tests are unexpectedly failing, and want "
"to get details on the failures without waiting for the full test run to "
"complete."
msgstr ""

# 797f5c1fb7774f4fbf6d7a6a13bb33ad
#: ../../topics/testing/overview.txt:141
msgid ""
"If you do not want to wait for the currently running test to finish, you can "
"press ``Ctrl-C`` a second time and the test run will halt immediately, but "
"not gracefully. No details of the tests run before the interruption will be "
"reported, and any test databases created by the run will not be destroyed."
msgstr ""

# 72eda77501b742739133d4bd11120194
#: ../../topics/testing/overview.txt:0
msgid "Test with warnings enabled"
msgstr ""

# e6dfe4745a614113b9d127f62f2ad338
#: ../../topics/testing/overview.txt:148
msgid ""
"It's a good idea to run your tests with Python warnings enabled: ``python -"
"Wall manage.py test``. The ``-Wall`` flag tells Python to display "
"deprecation warnings. Django, like many other Python libraries, uses these "
"warnings to flag when features are going away. It also might flag areas in "
"your code that aren't strictly wrong but could benefit from a better "
"implementation."
msgstr ""

# 3d3d574515cc4b73980fbb1c68a42708
#: ../../topics/testing/overview.txt:159
msgid "The test database"
msgstr ""

# 7b52813d752b43ab8b9b7f64deb43eaa
#: ../../topics/testing/overview.txt:161
msgid ""
"Tests that require a database (namely, model tests) will not use your \"real"
"\" (production) database. Separate, blank databases are created for the "
"tests."
msgstr ""

# b82c76dd38e142908dd9bf7300234736
#: ../../topics/testing/overview.txt:164
msgid ""
"Regardless of whether the tests pass or fail, the test databases are "
"destroyed when all the tests have been executed."
msgstr ""

# 0348a217f372486c86032bb05ec06d71
#: ../../topics/testing/overview.txt:167
msgid ""
"By default the test databases get their names by prepending ``test_`` to the "
"value of the :setting:`NAME` settings for the databases defined in :setting:"
"`DATABASES`. When using the SQLite database engine the tests will by default "
"use an in-memory database (i.e., the database will be created in memory, "
"bypassing the filesystem entirely!). If you want to use a different database "
"name, specify :setting:`NAME <TEST_NAME>` in the :setting:`TEST <DATABASE-"
"TEST>` dictionary for any given database in :setting:`DATABASES`."
msgstr ""

# 79a3ac5a9d054616a8ecfd5f27c84346
#: ../../topics/testing/overview.txt:178
msgid ""
"On PostgreSQL, :setting:`USER` will also need read access to the built-in "
"``postgres`` database."
msgstr ""

# 2eca4cfd2a214377bcdbc976704181c6
#: ../../topics/testing/overview.txt:181
msgid ""
"Aside from using a separate database, the test runner will otherwise use all "
"of the same database settings you have in your settings file: :setting:"
"`ENGINE <DATABASE-ENGINE>`, :setting:`USER`, :setting:`HOST`, etc. The test "
"database is created by the user specified by :setting:`USER`, so you'll need "
"to make sure that the given user account has sufficient privileges to create "
"a new database on the system."
msgstr ""

# ca854cf37a72493087695de8b08270a6
#: ../../topics/testing/overview.txt:188
msgid ""
"For fine-grained control over the character encoding of your test database, "
"use the :setting:`CHARSET <TEST_CHARSET>` TEST option. If you're using "
"MySQL, you can also use the :setting:`COLLATION <TEST_COLLATION>` option to "
"control the particular collation used by the test database. See the :doc:"
"`settings documentation </ref/settings>` for details of these and other "
"advanced settings."
msgstr ""

# b7c04c3238bc4dfa9577936266947d25
#: ../../topics/testing/overview.txt:197
msgid ""
"The different options in the :setting:`TEST <DATABASE-TEST>` database "
"setting used to be separate options in the database settings dictionary, "
"prefixed with ``TEST_``."
msgstr ""

# 9a6d6717ce624aa5a25c4d91c33d36ee
#: ../../topics/testing/overview.txt:0
msgid "Finding data from your production database when running tests?"
msgstr ""

# 50d0932429d642d2a7ea58b360f0fe2a
#: ../../topics/testing/overview.txt:203
msgid ""
"If your code attempts to access the database when its modules are compiled, "
"this will occur *before* the test database is set up, with potentially "
"unexpected results. For example, if you have a database query in module-"
"level code and a real database exists, production data could pollute your "
"tests. *It is a bad idea to have such import-time database queries in your "
"code* anyway - rewrite your code so that it doesn't do this."
msgstr ""

# c3cef5c3b7f4470488e30bab367e2f89
#: ../../topics/testing/overview.txt:212
msgid ""
"This also applies to customized implementations of :meth:`~django.apps."
"AppConfig.ready()`."
msgstr ""

# 67e4a351b90847a3b0e4957a74bd17a0
#: ../../topics/testing/overview.txt:217
msgid ""
"The :ref:`advanced multi-db testing topics <topics-testing-advanced-"
"multidb>`."
msgstr ""

# 68f136d436e24f1a940fced8d9d6978c
#: ../../topics/testing/overview.txt:222
msgid "Order in which tests are executed"
msgstr ""

# 9fcd4b7c31554e3fadc3e4ce1636d483
#: ../../topics/testing/overview.txt:224
msgid ""
"In order to guarantee that all ``TestCase`` code starts with a clean "
"database, the Django test runner reorders tests in the following way:"
msgstr ""

# ed08057435074f30919e91385f999b6b
#: ../../topics/testing/overview.txt:227
msgid "All :class:`~django.test.TestCase` subclasses are run first."
msgstr ""

# d6b5ebcd817948ac9782afe95f1910dd
#: ../../topics/testing/overview.txt:229
msgid ""
"Then, all other Django-based tests (test cases based on :class:`~django.test."
"SimpleTestCase`, including :class:`~django.test.TransactionTestCase`) are "
"run with no particular ordering guaranteed nor enforced among them."
msgstr ""

# b4621cd1bd714dbfbc077a160f9cb5a1
#: ../../topics/testing/overview.txt:234
msgid ""
"Then any other :class:`unittest.TestCase` tests (including doctests) that "
"may alter the database without restoring it to its original state are run."
msgstr ""

# 4b723c3208004e4fa37baddf6f136b34
#: ../../topics/testing/overview.txt:239
msgid ""
"The new ordering of tests may reveal unexpected dependencies on test case "
"ordering. This is the case with doctests that relied on state left in the "
"database by a given :class:`~django.test.TransactionTestCase` test, they "
"must be updated to be able to run independently."
msgstr ""

# cca5ba49494b40dea38ef8e62b01f06f
#: ../../topics/testing/overview.txt:247
msgid "Rollback emulation"
msgstr ""

# c9380d5a96df46f48994dd015ee7f9e9
#: ../../topics/testing/overview.txt:249
msgid ""
"Any initial data loaded in migrations will only be available in ``TestCase`` "
"tests and not in ``TransactionTestCase`` tests, and additionally only on "
"backends where transactions are supported (the most important exception "
"being MyISAM)."
msgstr ""

# ef95bfefea02444ebbb965df57ffd120
#: ../../topics/testing/overview.txt:254
msgid ""
"Django can reload that data for you on a per-testcase basis by setting the "
"``serialized_rollback`` option to ``True`` in the body of the ``TestCase`` "
"or ``TransactionTestCase``, but note that this will slow down that test "
"suite by approximately 3x."
msgstr ""

# 7c3c7aa4249141409fe7a1ab595669a2
#: ../../topics/testing/overview.txt:259
msgid ""
"Third-party apps or those developing against MyISAM will need to set this; "
"in general, however, you should be developing your own projects against a "
"transactional database and be using ``TestCase`` for most tests, and thus "
"not need this setting."
msgstr ""

# ee62cdb536b2456d86f34d741e913dde
#: ../../topics/testing/overview.txt:264
msgid ""
"The initial serialization is usually very quick, but if you wish to exclude "
"some apps from this process (and speed up test runs slightly), you may add "
"those apps to :setting:`TEST_NON_SERIALIZED_APPS`."
msgstr ""

# bc2d87d405c14608b9d9f2a4e61cd74a
#: ../../topics/testing/overview.txt:268
msgid ""
"Apps without migrations are not affected; ``initial_data`` fixtures are "
"reloaded as usual."
msgstr ""

# aed89693cb414352a34d81414d96c0f5
#: ../../topics/testing/overview.txt:272
msgid "Other test conditions"
msgstr ""

# 03e9e972af3f4f98aa439cf44f1f5e5c
#: ../../topics/testing/overview.txt:274
msgid ""
"Regardless of the value of the :setting:`DEBUG` setting in your "
"configuration file, all Django tests run with :setting:`DEBUG`\\=False. This "
"is to ensure that the observed output of your code matches what will be seen "
"in a production setting."
msgstr ""

# 176c789a0f6f4d3ca1c6851697d4fa84
#: ../../topics/testing/overview.txt:279
msgid ""
"Caches are not cleared after each test, and running \"manage.py test fooapp"
"\" can insert data from the tests into the cache of a live system if you run "
"your tests in production because, unlike databases, a separate \"test cache"
"\" is not used. This behavior `may change`_ in the future."
msgstr ""

# a9ea38b8c27f4b6e95728c5f62c7f9fd
#: ../../topics/testing/overview.txt:287
msgid "Understanding the test output"
msgstr ""

# 76a5322dbc594adf8844942ed86bafe6
#: ../../topics/testing/overview.txt:289
msgid ""
"When you run your tests, you'll see a number of messages as the test runner "
"prepares itself. You can control the level of detail of these messages with "
"the ``verbosity`` option on the command line::"
msgstr ""

# 1745770b6a14433f89d3262b6d640109
#: ../../topics/testing/overview.txt:299
msgid ""
"This tells you that the test runner is creating a test database, as "
"described in the previous section."
msgstr ""

# 2a3e39f2ca4049258e8fd3dab0ab2b7f
#: ../../topics/testing/overview.txt:302
msgid ""
"Once the test database has been created, Django will run your tests. If "
"everything goes well, you'll see something like this::"
msgstr ""

# 1f72c54b22924a8096f7cfea19893fe7
#: ../../topics/testing/overview.txt:310
msgid ""
"If there are test failures, however, you'll see full details about which "
"tests failed::"
msgstr ""

# 1668885098ff44ad8be72ed84679d48e
#: ../../topics/testing/overview.txt:326
msgid ""
"A full explanation of this error output is beyond the scope of this "
"document, but it's pretty intuitive. You can consult the documentation of "
"Python's :mod:`unittest` library for details."
msgstr ""

# 05e4a7d89bb843479206a3b0abef1f58
#: ../../topics/testing/overview.txt:330
msgid ""
"Note that the return code for the test-runner script is 1 for any number of "
"failed and erroneous tests. If all the tests pass, the return code is 0. "
"This feature is useful if you're using the test-runner script in a shell "
"script and need to test for success or failure at that level."
msgstr ""

# 3bf706d749bf4855a9edb9dce7bdf3c1
#: ../../topics/testing/overview.txt:336
msgid "Speeding up the tests"
msgstr ""

# cafa96f6a0fb4d16a536440a0d71b413
#: ../../topics/testing/overview.txt:338
msgid ""
"In recent versions of Django, the default password hasher is rather slow by "
"design. If during your tests you are authenticating many users, you may want "
"to use a custom settings file and set the :setting:`PASSWORD_HASHERS` "
"setting to a faster hashing algorithm::"
msgstr ""

# c86fa9c2f30445dc9b55afa77efd125c
#: ../../topics/testing/overview.txt:347
msgid ""
"Don't forget to also include in :setting:`PASSWORD_HASHERS` any hashing "
"algorithm used in fixtures, if any."
msgstr ""
