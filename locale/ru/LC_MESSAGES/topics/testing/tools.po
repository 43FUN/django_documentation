# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated <>, 2014.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-09-09 11:16+0300\n"
"PO-Revision-Date: 2014-12-04 18:09+0200\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"
"X-Generator: Gtranslator 2.91.6\n"

# 77d08eedf7104e91af86196431166ad1
#: ../../topics/testing/tools.txt:3
msgid "Testing tools"
msgstr "Инструменты для тестирования"

# 61520dd952804e0a984dfd5ef894e741
#: ../../topics/testing/tools.txt:7
msgid ""
"Django provides a small set of tools that come in handy when writing tests."
msgstr ""
"Django предоставляет несколько инструментов, которые могут быть полезны при "
"написании тестов."

# 3c865869436b4cbea7fc25c3598e9d1c
#: ../../topics/testing/tools.txt:12
msgid "The test client"
msgstr "Тестовый клиент"

# d700bd92b6574e1999d9eb6fe642f9d6
#: ../../topics/testing/tools.txt:14
msgid ""
"The test client is a Python class that acts as a dummy Web browser, allowing "
"you to test your views and interact with your Django-powered application "
"programmatically."
msgstr ""
"Тестовый клиент -- это класс Python, который умеет эмулировать запросы "
"браузера. Он позволяет протестировать ваши представления и программно "
"взаимодействовать с вашим Django-приложением."

# 27551b4374bf4a4784650bd1ef423908
#: ../../topics/testing/tools.txt:18
msgid "Some of the things you can do with the test client are:"
msgstr "Некоторые вещи, которые вы можете делать с тестовым клиентом:"

# ab5f7093cfad4557af3eff6b9601e602
#: ../../topics/testing/tools.txt:20
msgid ""
"Simulate GET and POST requests on a URL and observe the response -- "
"everything from low-level HTTP (result headers and status codes) to page "
"content."
msgstr ""
"Эмулирует GET или POST запросы к URL-у и обрабатывает ответ -- начиная от "
"низкоуровневого HTTP (заголовки результата и код ответа) и заканчивая "
"содержимым ответа."

# 08666b363fdf4d32ae0a80c9f668562b
#: ../../topics/testing/tools.txt:24
msgid ""
"See the chain of redirects (if any) and check the URL and status code at "
"each step."
msgstr ""
"Следует по цепочке редиректов (если такие есть) и проверяет URL и код ответа "
"на каждом шаге."

# c50618589f4444dca5183a582a2c85b6
#: ../../topics/testing/tools.txt:27
msgid ""
"Test that a given request is rendered by a given Django template, with a "
"template context that contains certain values."
msgstr ""
"Может проверять, что полученный ответ был отрендерен определенным шаблоном "
"Django с контекстом, который содержит определенные переменные."

# 6fab74b92bbb4c2a8a7db1961b314507
#: ../../topics/testing/tools.txt:30
msgid ""
"Note that the test client is not intended to be a replacement for Selenium_ "
"or other \"in-browser\" frameworks. Django's test client has a different "
"focus. In short:"
msgstr ""
"Обратите внимание, этот клиент не может заменить Selenium_ или другие "
"фреймворки, которые используют движок браузера для запросов. У тестового "
"клиента Django другие задачи. Если кратко:"

# dbab0c4ac291475ca2dbf3aff438515a
#: ../../topics/testing/tools.txt:34
msgid ""
"Use Django's test client to establish that the correct template is being "
"rendered and that the template is passed the correct context data."
msgstr ""
"Вы можете использовать тестовый клиент, если нужно проверить какой шаблон "
"использовался для рендеринга ответа, и какой контекст ему передавался."

# 9515de8bf8f942aca95c8d5419a4726d
#: ../../topics/testing/tools.txt:37
msgid ""
"Use in-browser frameworks like Selenium_ to test *rendered* HTML and the "
"*behavior* of Web pages, namely JavaScript functionality. Django also "
"provides special support for those frameworks; see the section on :class:"
"`~django.test.LiveServerTestCase` for more details."
msgstr ""
"Фреймворки, которые используют движок браузера, например Selenium_, "
"позволяют тестировать уже *готовый* HTML и *поведение* страниц в браузере, а "
"именно работу JavaScript. Django предоставляет инструменты для работы с "
"ними, подробности смотрите в описании :class:`~django.test."
"LiveServerTestCase`."

# 40e75b654d1445b2bfb22ffa3c65d03f
#: ../../topics/testing/tools.txt:42
msgid "A comprehensive test suite should use a combination of both test types."
msgstr ""
"Комплексный набор тестов должен использовать комбинацию обоих типов тестов."

# e1a672c47db94186b0921a7930768921
#: ../../topics/testing/tools.txt:45
msgid "Overview and a quick example"
msgstr "Обзор и примеры"

# 0865ae2d789a48ef891d711269036792
#: ../../topics/testing/tools.txt:47
msgid ""
"To use the test client, instantiate ``django.test.Client`` and retrieve Web "
"pages::"
msgstr ""
"Для использования тестового клиента создайте экземпляр ``django.test."
"Client``, затем получите страницу::"

# 3fcd0e5d699049ba858829a5294cec33
#: ../../topics/testing/tools.txt:59
msgid ""
"As this example suggests, you can instantiate ``Client`` from within a "
"session of the Python interactive interpreter."
msgstr ""
"Как видно из примера, вы можете использовать ``Client`` в консоли Python."

# 67eab9789bde4fe5a1b2ecb149d40c56
#: ../../topics/testing/tools.txt:62
msgid "Note a few important things about how the test client works:"
msgstr "Несколько заметок о работе тестового клиента:"

# 06ed583158644655a4579e3be8e739fb
#: ../../topics/testing/tools.txt:64
msgid ""
"The test client does *not* require the Web server to be running. In fact, it "
"will run just fine with no Web server running at all! That's because it "
"avoids the overhead of HTTP and deals directly with the Django framework. "
"This helps make the unit tests run quickly."
msgstr ""
"Для работы тестового клиента *не нужно* запускать сервер. Он работает "
"непосредственно с Django. Это ускоряет выполнение тестов."

# 506df49691ab4ae1bc325b72df2eb70a
#: ../../topics/testing/tools.txt:69
msgid ""
"When retrieving pages, remember to specify the *path* of the URL, not the "
"whole domain. For example, this is correct::"
msgstr ""
"Следует указывать *путь* из URL без домена. Например, вот так правильно::"

# 9009e2fc305441c5bfeb54091045c869
#: ../../topics/testing/tools.txt:74
msgid "This is incorrect::"
msgstr "А это не будет работать::"

# 44c1b1f86ead4161a8fe805164d8fb17
#: ../../topics/testing/tools.txt:78
msgid ""
"The test client is not capable of retrieving Web pages that are not powered "
"by your Django project. If you need to retrieve other Web pages, use a "
"Python standard library module such as :mod:`urllib`."
msgstr ""
"Тестовый клиент умеет получить только те страницы, которые принадлежат "
"текущему Django проекту. Для загрузки внешних страниц можно использовать "
"стандартную библиотеку Python :mod:`urllib`."

# c7e45165bbef49ca9335d4bef04626a3
#: ../../topics/testing/tools.txt:82
msgid ""
"To resolve URLs, the test client uses whatever URLconf is pointed-to by "
"your :setting:`ROOT_URLCONF` setting."
msgstr ""

# 156912a55dbd44bbb4561c972551a90e
#: ../../topics/testing/tools.txt:85
msgid ""
"Although the above example would work in the Python interactive interpreter, "
"some of the test client's functionality, notably the template-related "
"functionality, is only available *while tests are running*."
msgstr ""

# 7eed2fbb13dc4c3fa5dfb754c88530a2
#: ../../topics/testing/tools.txt:90
msgid ""
"The reason for this is that Django's test runner performs a bit of black "
"magic in order to determine which template was loaded by a given view. This "
"black magic (essentially a patching of Django's template system in memory) "
"only happens during test running."
msgstr ""

# 6e9adeeaa94549748a482f92eab9d211
#: ../../topics/testing/tools.txt:95
msgid ""
"By default, the test client will disable any CSRF checks performed by your "
"site."
msgstr ""

# 9a732416d0b94cb9b7ccfa8756379b21
#: ../../topics/testing/tools.txt:98
msgid ""
"If, for some reason, you *want* the test client to perform CSRF checks, you "
"can create an instance of the test client that enforces CSRF checks. To do "
"this, pass in the ``enforce_csrf_checks`` argument when you construct your "
"client::"
msgstr ""

# de4c2479e1294939b61dae432ee3dbf4
#: ../../topics/testing/tools.txt:108
msgid "Making requests"
msgstr ""

# e2295a39556643e298b1dc70dd6cd908
#: ../../topics/testing/tools.txt:110
msgid "Use the ``django.test.Client`` class to make requests."
msgstr ""

# 83cabc6836c348199cfae61105b3b365
#: ../../topics/testing/tools.txt:114
msgid ""
"It requires no arguments at time of construction. However, you can use "
"keywords arguments to specify some default headers. For example, this will "
"send a ``User-Agent`` HTTP header in each request::"
msgstr ""

# cde80f8b68d743d99832f514e602eb65
#: ../../topics/testing/tools.txt:120
msgid ""
"The values from the ``extra`` keywords arguments passed to :meth:`~django."
"test.Client.get()`, :meth:`~django.test.Client.post()`, etc. have precedence "
"over the defaults passed to the class constructor."
msgstr ""

# d550f3601faf4f569e721198b426869a
#: ../../topics/testing/tools.txt:125
msgid ""
"The ``enforce_csrf_checks`` argument can be used to test CSRF protection "
"(see above)."
msgstr ""

# 90854d299ba142e281af9b660a36579e
#: ../../topics/testing/tools.txt:128
msgid ""
"Once you have a ``Client`` instance, you can call any of the following "
"methods:"
msgstr ""

# 66c0a541a58e41468559b4ac575f155b
#: ../../topics/testing/tools.txt:135
msgid "The ``secure`` argument was added."
msgstr ""

# 8a78c1ac69f34cf188026d149508d276
#: ../../topics/testing/tools.txt:137
msgid ""
"Makes a GET request on the provided ``path`` and returns a ``Response`` "
"object, which is documented below."
msgstr ""

# 566f77bdecde4bdb95f9c23fc3ef0099
#: ../../topics/testing/tools.txt:140
msgid ""
"The key-value pairs in the ``data`` dictionary are used to create a GET data "
"payload. For example::"
msgstr ""

# 966bfd172c0c4ff9a54e1d50e61a2e8f
#: ../../topics/testing/tools.txt:146
msgid "...will result in the evaluation of a GET request equivalent to::"
msgstr ""

# 2752bd842119479facb712e2f7af4f15
#: ../../topics/testing/tools.txt:150
msgid ""
"The ``extra`` keyword arguments parameter can be used to specify headers to "
"be sent in the request. For example::"
msgstr ""

# 3ccac0cad2004f67a6a31eb373d86ea0
#: ../../topics/testing/tools.txt:157
msgid ""
"...will send the HTTP header ``HTTP_X_REQUESTED_WITH`` to the details view, "
"which is a good way to test code paths that use the :meth:`django.http."
"HttpRequest.is_ajax()` method."
msgstr ""

# e163aa83bd2247dcadb84fa80fe1a1be
#: ../../topics/testing/tools.txt:0
msgid "CGI specification"
msgstr ""

# e50a127ca6c04f839eacde67f8bc4537
#: ../../topics/testing/tools.txt:163
msgid ""
"The headers sent via ``**extra`` should follow CGI_ specification. For "
"example, emulating a different \"Host\" header as sent in the HTTP request "
"from the browser to the server should be passed as ``HTTP_HOST``."
msgstr ""

# a396dd924afe4c62867f18a3e51282b8
#: ../../topics/testing/tools.txt:170
msgid ""
"If you already have the GET arguments in URL-encoded form, you can use that "
"encoding instead of using the data argument. For example, the previous GET "
"request could also be posed as::"
msgstr ""

# 66e4f87c74614fadb006ce11bcde907e
#: ../../topics/testing/tools.txt:177
msgid ""
"If you provide a URL with both an encoded GET data and a data argument, the "
"data argument will take precedence."
msgstr ""

# 852741fe6982418da73accf956a3b97f
# 5a5997a7a9804ede96520b1a7654ec4e
#: ../../topics/testing/tools.txt:180 ../../topics/testing/tools.txt:264
msgid ""
"If you set ``follow`` to ``True`` the client will follow any redirects and a "
"``redirect_chain`` attribute will be set in the response object containing "
"tuples of the intermediate urls and status codes."
msgstr ""

# 89e16557b5b44ac8b37592d3fa689768
#: ../../topics/testing/tools.txt:184
msgid ""
"If you had a URL ``/redirect_me/`` that redirected to ``/next/``, that "
"redirected to ``/final/``, this is what you'd see::"
msgstr ""

# 23c63faf06904b6fb10e442e8607e11f
# 720ab75600044a968ff03cc80a8fc0f6
#: ../../topics/testing/tools.txt:191 ../../topics/testing/tools.txt:268
msgid ""
"If you set ``secure`` to ``True`` the client will emulate an HTTPS request."
msgstr ""

# 8b1c86d7183748a69f8a2ffedd872222
#: ../../topics/testing/tools.txt:196
msgid ""
"Makes a POST request on the provided ``path`` and returns a ``Response`` "
"object, which is documented below."
msgstr ""

# 94634832e0af4928a1117be432ed8cc6
#: ../../topics/testing/tools.txt:199
msgid ""
"The key-value pairs in the ``data`` dictionary are used to submit POST data. "
"For example::"
msgstr ""

# d5e64841e0944c5e86533524289d6316
#: ../../topics/testing/tools.txt:205
msgid "...will result in the evaluation of a POST request to this URL::"
msgstr ""

# 54af063425404e65944d137ef324ce08
#: ../../topics/testing/tools.txt:209
msgid "...with this POST data::"
msgstr ""

# 8296ba504b7b4cf2b97e4fd006b44b2e
#: ../../topics/testing/tools.txt:213
msgid ""
"If you provide ``content_type`` (e.g. :mimetype:`text/xml` for an XML "
"payload), the contents of ``data`` will be sent as-is in the POST request, "
"using ``content_type`` in the HTTP ``Content-Type`` header."
msgstr ""

# 462836317c74473097fcd304e8113f2d
#: ../../topics/testing/tools.txt:217
msgid ""
"If you don't provide a value for ``content_type``, the values in ``data`` "
"will be transmitted with a content type of :mimetype:`multipart/form-data`. "
"In this case, the key-value pairs in ``data`` will be encoded as a multipart "
"message and used to create the POST data payload."
msgstr ""

# 90ae1f54b69b45bfa73238086d674b7b
#: ../../topics/testing/tools.txt:223
msgid ""
"To submit multiple values for a given key -- for example, to specify the "
"selections for a ``<select multiple>`` -- provide the values as a list or "
"tuple for the required key. For example, this value of ``data`` would submit "
"three selected values for the field named ``choices``::"
msgstr ""

# ded2d434685a47bc949b0d46c70c7d13
#: ../../topics/testing/tools.txt:230
msgid ""
"Submitting files is a special case. To POST a file, you need only provide "
"the file field name as a key, and a file handle to the file you wish to "
"upload as a value. For example::"
msgstr ""

# b8d1bd4dc5a0481f9b127eb8c4de291e
#: ../../topics/testing/tools.txt:238
msgid ""
"(The name ``attachment`` here is not relevant; use whatever name your file-"
"processing code expects.)"
msgstr ""

# cf395ebc5948495d9ab4d5f1f479986c
#: ../../topics/testing/tools.txt:241
msgid ""
"Note that if you wish to use the same file handle for multiple ``post()`` "
"calls then you will need to manually reset the file pointer between posts. "
"The easiest way to do this is to manually close the file after it has been "
"provided to ``post()``, as demonstrated above."
msgstr ""

# 614b3b42603145debc62f140d5d23dfd
#: ../../topics/testing/tools.txt:247
msgid ""
"You should also ensure that the file is opened in a way that allows the data "
"to be read. If your file contains binary data such as an image, this means "
"you will need to open the file in ``rb`` (read binary) mode."
msgstr ""

# 52cb9411958c442aa338deb1413c6328
#: ../../topics/testing/tools.txt:252
msgid "The ``extra`` argument acts the same as for :meth:`Client.get`."
msgstr ""

# c5e44b06329d46b084067dbf69ef2389
#: ../../topics/testing/tools.txt:254
msgid ""
"If the URL you request with a POST contains encoded parameters, these "
"parameters will be made available in the request.GET data. For example, if "
"you were to make the request::"
msgstr ""

# 0ecf6e171c5642dd8df770942d8062be
#: ../../topics/testing/tools.txt:260
msgid ""
"... the view handling this request could interrogate request.POST to "
"retrieve the username and password, and could interrogate request.GET to "
"determine if the user was a visitor."
msgstr ""

# 82985fb850be4e8a88465ca0a7e62773
#: ../../topics/testing/tools.txt:273
msgid ""
"Makes a HEAD request on the provided ``path`` and returns a ``Response`` "
"object. This method works just like :meth:`Client.get`, including the "
"``follow``, ``secure`` and ``extra`` arguments, except it does not return a "
"message body."
msgstr ""

# acef983a976e4a23a646c83847827b4b
#: ../../topics/testing/tools.txt:280
msgid ""
"Makes an OPTIONS request on the provided ``path`` and returns a ``Response`` "
"object. Useful for testing RESTful interfaces."
msgstr ""

# b85e9f7247b24cf1b4c1f357c5544e38
# 1ec3caf8255a4a7da37fd4c1d26bf4e1
# ccc1cb30e8064cba8333cc3ecaef652a
#: ../../topics/testing/tools.txt:283 ../../topics/testing/tools.txt:294
#: ../../topics/testing/tools.txt:313
msgid ""
"When ``data`` is provided, it is used as the request body, and a ``Content-"
"Type`` header is set to ``content_type``."
msgstr ""

# 364a2c8447f345e0904b1017e3ad1bef
# 7c864fa3f9474649aedd36da7d6f9e0e
# e0ecdab947f2496a9225e3dabd7dd0c0
# 652711b2029b4a1b886fd3992ab50cd5
#: ../../topics/testing/tools.txt:286 ../../topics/testing/tools.txt:297
#: ../../topics/testing/tools.txt:305 ../../topics/testing/tools.txt:316
msgid ""
"The ``follow``, ``secure`` and ``extra`` arguments act the same as for :meth:"
"`Client.get`."
msgstr ""

# a50748c929f34d51ad0c428c1c493456
#: ../../topics/testing/tools.txt:291
msgid ""
"Makes a PUT request on the provided ``path`` and returns a ``Response`` "
"object. Useful for testing RESTful interfaces."
msgstr ""

# 8012f2af4345400b9df39eada57f9f8a
#: ../../topics/testing/tools.txt:302
msgid ""
"Makes a PATCH request on the provided ``path`` and returns a ``Response`` "
"object. Useful for testing RESTful interfaces."
msgstr ""

# 04f31e942e22468598b656d805daddcc
#: ../../topics/testing/tools.txt:310
msgid ""
"Makes an DELETE request on the provided ``path`` and returns a ``Response`` "
"object. Useful for testing RESTful interfaces."
msgstr ""

# 9974b0ef96834b328af92e1a950d312f
#: ../../topics/testing/tools.txt:321
msgid ""
"If your site uses Django's :doc:`authentication system</topics/auth/index>` "
"and you deal with logging in users, you can use the test client's "
"``login()`` method to simulate the effect of a user logging into the site."
msgstr ""

# a266a73a7aad40fca400db232f8d079a
#: ../../topics/testing/tools.txt:326
msgid ""
"After you call this method, the test client will have all the cookies and "
"session data required to pass any login-based tests that may form part of a "
"view."
msgstr ""

# 02624721cd2e49ae9d6aa623fccda800
#: ../../topics/testing/tools.txt:330
msgid ""
"The format of the ``credentials`` argument depends on which :ref:"
"`authentication backend <authentication-backends>` you're using (which is "
"configured by your :setting:`AUTHENTICATION_BACKENDS` setting). If you're "
"using the standard authentication backend provided by Django "
"(``ModelBackend``), ``credentials`` should be the user's username and "
"password, provided as keyword arguments::"
msgstr ""

# 39f05f2b879d4f988638e0361cffbeba
#: ../../topics/testing/tools.txt:342
msgid ""
"If you're using a different authentication backend, this method may require "
"different credentials. It requires whichever credentials are required by "
"your backend's ``authenticate()`` method."
msgstr ""

# f43eac4869c64335903068a21e9dcbf9
#: ../../topics/testing/tools.txt:346
msgid ""
"``login()`` returns ``True`` if it the credentials were accepted and login "
"was successful."
msgstr ""

# f9bd7dc6a8dc46eea5035114839adef0
#: ../../topics/testing/tools.txt:349
msgid ""
"Finally, you'll need to remember to create user accounts before you can use "
"this method. As we explained above, the test runner is executed using a test "
"database, which contains no users by default. As a result, user accounts "
"that are valid on your production site will not work under test conditions. "
"You'll need to create users as part of the test suite -- either manually "
"(using the Django model API) or with a test fixture. Remember that if you "
"want your test user to have a password, you can't set the user's password by "
"setting the password attribute directly -- you must use the :meth:`~django."
"contrib.auth.models.User.set_password()` function to store a correctly "
"hashed password. Alternatively, you can use the :meth:`~django.contrib.auth."
"models.UserManager.create_user` helper method to create a new user with a "
"correctly hashed password."
msgstr ""

# 275f5fa10beb492e959c574639bd6ac3
#: ../../topics/testing/tools.txt:365
msgid ""
"If your site uses Django's :doc:`authentication system</topics/auth/index>`, "
"the ``logout()`` method can be used to simulate the effect of a user logging "
"out of your site."
msgstr ""

# 6c679aad9d60404cb7970e450d969e67
#: ../../topics/testing/tools.txt:369
msgid ""
"After you call this method, the test client will have all the cookies and "
"session data cleared to defaults. Subsequent requests will appear to come "
"from an :class:`~django.contrib.auth.models.AnonymousUser`."
msgstr ""

# 53f10d5caedd4066ac39364bdf964bc7
#: ../../topics/testing/tools.txt:374
msgid "Testing responses"
msgstr ""

# 3b3b92fc8de842fb8cf5955eff2b635a
#: ../../topics/testing/tools.txt:376
msgid ""
"The ``get()`` and ``post()`` methods both return a ``Response`` object. This "
"``Response`` object is *not* the same as the ``HttpResponse`` object "
"returned Django views; the test response object has some additional data "
"useful for test code to verify."
msgstr ""

# cd908126a7944730b6578bf1acd5f8d0
#: ../../topics/testing/tools.txt:381
msgid "Specifically, a ``Response`` object has the following attributes:"
msgstr ""

# 9d036460e8474ab5ad4e36cfdec2f971
#: ../../topics/testing/tools.txt:387
msgid ""
"The test client that was used to make the request that resulted in the "
"response."
msgstr ""

# 5cde3acdd64c45c4813914b2ff95f435
#: ../../topics/testing/tools.txt:392
msgid ""
"The body of the response, as a string. This is the final page content as "
"rendered by the view, or any error message."
msgstr ""

# d2daba85ad8d4deba4d01cb477e64355
#: ../../topics/testing/tools.txt:397
msgid ""
"The template ``Context`` instance that was used to render the template that "
"produced the response content."
msgstr ""

# ddee72e426f349449c882874ac94fc01
#: ../../topics/testing/tools.txt:400
msgid ""
"If the rendered page used multiple templates, then ``context`` will be a "
"list of ``Context`` objects, in the order in which they were rendered."
msgstr ""

# fb39d1aac52f4ceeb4106263a2019b03
#: ../../topics/testing/tools.txt:403
msgid ""
"Regardless of the number of templates used during rendering, you can "
"retrieve context values using the ``[]`` operator. For example, the context "
"variable ``name`` could be retrieved using::"
msgstr ""

# 9a5deb17736f4d7aa3557d715bab4b03
#: ../../topics/testing/tools.txt:413
msgid "The request data that stimulated the response."
msgstr ""

# 2708c58cd7604c84b386404eed312023
#: ../../topics/testing/tools.txt:419
msgid ""
"The ``WSGIRequest`` instance generated by the test handler that generated "
"the response."
msgstr ""

# dbd7a92c827a4b72829a2d87a4332cea
#: ../../topics/testing/tools.txt:424
msgid ""
"The HTTP status of the response, as an integer. See :rfc:`2616#section-10` "
"for a full list of HTTP status codes."
msgstr ""

# 11395b71c394468c86b25780612753be
#: ../../topics/testing/tools.txt:429
msgid ""
"A list of ``Template`` instances used to render the final content, in the "
"order they were rendered. For each template in the list, use ``template."
"name`` to get the template's file name, if the template was loaded from a "
"file. (The name is a string such as ``'admin/index.html'``.)"
msgstr ""

# 1f0e060f60444b4485595f5f2795e7ec
#: ../../topics/testing/tools.txt:435
msgid ""
"You can also use dictionary syntax on the response object to query the value "
"of any settings in the HTTP headers. For example, you could determine the "
"content type of a response using ``response['Content-Type']``."
msgstr ""

# 73468f8409304c398f508aa60cff44f4
#: ../../topics/testing/tools.txt:440
msgid "Exceptions"
msgstr ""

# 01e8d9482a354532b5d84e037b87afb9
#: ../../topics/testing/tools.txt:442
msgid ""
"If you point the test client at a view that raises an exception, that "
"exception will be visible in the test case. You can then use a standard "
"``try ... except`` block or :meth:`~unittest.TestCase.assertRaises` to test "
"for exceptions."
msgstr ""

# 78f231f940d24bcb9f63b5be8b4a9fac
#: ../../topics/testing/tools.txt:446
msgid ""
"The only exceptions that are not visible to the test client are ``Http404``, "
"``PermissionDenied`` and ``SystemExit``. Django catches these exceptions "
"internally and converts them into the appropriate HTTP response codes. In "
"these cases, you can check ``response.status_code`` in your test."
msgstr ""

# 6e2345e53d1641109f1b015ab0191cf4
#: ../../topics/testing/tools.txt:452
msgid "Persistent state"
msgstr ""

# ac5aa136718c4b5382b522c7e06a56d8
#: ../../topics/testing/tools.txt:454
msgid ""
"The test client is stateful. If a response returns a cookie, then that "
"cookie will be stored in the test client and sent with all subsequent "
"``get()`` and ``post()`` requests."
msgstr ""

# bc0bc152a0ea4855a91e7f15cdfa7adf
#: ../../topics/testing/tools.txt:458
msgid ""
"Expiration policies for these cookies are not followed. If you want a cookie "
"to expire, either delete it manually or create a new ``Client`` instance "
"(which will effectively delete all cookies)."
msgstr ""

# 49e7f14252b946598c954595ce9966e4
#: ../../topics/testing/tools.txt:462
msgid ""
"A test client has two attributes that store persistent state information. "
"You can access these properties as part of a test condition."
msgstr ""

# 62f056bf17404459b187874e35b483b4
#: ../../topics/testing/tools.txt:467
msgid ""
"A Python :class:`~http.cookies.SimpleCookie` object, containing the current "
"values of all the client cookies. See the documentation of the :mod:`http."
"cookies` module for more."
msgstr ""

# 66ddcacf36fb4bc9bdc430306763f563
#: ../../topics/testing/tools.txt:473
msgid ""
"A dictionary-like object containing session information. See the :doc:"
"`session documentation</topics/http/sessions>` for full details."
msgstr ""

# aa8abada9fa444da9f5d17bc71bedf2f
#: ../../topics/testing/tools.txt:476
msgid ""
"To modify the session and then save it, it must be stored in a variable "
"first (because a new ``SessionStore`` is created every time this property is "
"accessed)::"
msgstr ""

# 3ea846b559c148d1b6b419ff4123ad24
#: ../../topics/testing/tools.txt:486
msgid "Example"
msgstr ""

# a4681287b4084573b6ffd92cf8578e58
#: ../../topics/testing/tools.txt:488
msgid "The following is a simple unit test using the test client::"
msgstr ""

# c2f16599e1354b909c12eb0753bfcf36
#: ../../topics/testing/tools.txt:510
msgid ":class:`django.test.RequestFactory`"
msgstr ""

# 3365afb986ba432a9a0a21c0f295a48a
#: ../../topics/testing/tools.txt:515
msgid "Provided test case classes"
msgstr ""

# a319cf1687e94a19b15dddcc70af774c
#: ../../topics/testing/tools.txt:517
msgid ""
"Normal Python unit test classes extend a base class of :class:`unittest."
"TestCase`. Django provides a few extensions of this base class:"
msgstr ""

# 20688441a18c46c8bb07f23abf7c4160
#: ../../topics/testing/tools.txt:0
msgid "Hierarchy of Django unit testing classes"
msgstr ""

# 183ecec60e924139ad8d4072aec24d3d
#: ../../topics/testing/tools.txt:530
msgid "SimpleTestCase"
msgstr ""

# 63343c7c414b47269517e18e951d44d1
#: ../../topics/testing/tools.txt:534
msgid ""
"A thin subclass of :class:`unittest.TestCase`, it extends it with some basic "
"functionality like:"
msgstr ""

# 26a17a47d90e4773b1778855aff4ca5b
#: ../../topics/testing/tools.txt:537
msgid "Saving and restoring the Python warning machinery state."
msgstr ""

# ed82c3d0cc0a4e6eb0329b8e9bf18021
#: ../../topics/testing/tools.txt:538
msgid "Some useful assertions like:"
msgstr ""

# 00b606a05b984c6b972b16875da0f58a
#: ../../topics/testing/tools.txt:540
msgid ""
"Checking that a callable :meth:`raises a certain exception <SimpleTestCase."
"assertRaisesMessage>`."
msgstr ""

# 7379b990423740a1adee5698f3b16003
#: ../../topics/testing/tools.txt:542
msgid ""
"Testing form field :meth:`rendering and error treatment <SimpleTestCase."
"assertFieldOutput>`."
msgstr ""

# 2082d8ce429540c9b1adab374682057e
#: ../../topics/testing/tools.txt:544
msgid ""
"Testing :meth:`HTML responses for the presence/lack of a given fragment "
"<SimpleTestCase.assertContains>`."
msgstr ""

# ba1d0dfa8a7f417383a22a36b775ed9f
#: ../../topics/testing/tools.txt:546
msgid ""
"Verifying that a template :meth:`has/hasn't been used to generate a given "
"response content <SimpleTestCase.assertTemplateUsed>`."
msgstr ""

# c165dca1748f49ef94d1fa0e7730fc55
#: ../../topics/testing/tools.txt:548
msgid ""
"Verifying a HTTP :meth:`redirect <SimpleTestCase.assertRedirects>` is "
"performed by the app."
msgstr ""

# 804f93fd009441569cb5fd6a66b125e0
#: ../../topics/testing/tools.txt:550
msgid ""
"Robustly testing two :meth:`HTML fragments <SimpleTestCase.assertHTMLEqual>` "
"for equality/inequality or :meth:`containment <SimpleTestCase.assertInHTML>`."
msgstr ""

# 391ef0d9360f4fa9a0078828dd0e8733
#: ../../topics/testing/tools.txt:552
msgid ""
"Robustly testing two :meth:`XML fragments <SimpleTestCase.assertXMLEqual>` "
"for equality/inequality."
msgstr ""

# 95e975639172456cada44829411379f7
#: ../../topics/testing/tools.txt:554
msgid ""
"Robustly testing two :meth:`JSON fragments <SimpleTestCase.assertJSONEqual>` "
"for equality."
msgstr ""

# 7fbff155cb9242f99efa1f93cdbc5918
#: ../../topics/testing/tools.txt:557
msgid ""
"The ability to run tests with :ref:`modified settings <overriding-settings>`."
msgstr ""

# 081be580a790494d9ebbd476dac9468c
#: ../../topics/testing/tools.txt:558
msgid "Using the :attr:`~SimpleTestCase.client` :class:`~django.test.Client`."
msgstr ""

# b2e3338570644b75be70436f3209deed
#: ../../topics/testing/tools.txt:559
msgid "Custom test-time :attr:`URL maps <SimpleTestCase.urls>`."
msgstr ""

# e8b3890bb5cf4f9f86afa3d36774b50e
#: ../../topics/testing/tools.txt:563
msgid ""
"The latter two features were moved from ``TransactionTestCase`` to "
"``SimpleTestCase`` in Django 1.6."
msgstr ""

# b4134bad6b8a43e8a476c16c0ea3cdc3
#: ../../topics/testing/tools.txt:566
msgid ""
"If you need any of the other more complex and heavyweight Django-specific "
"features like:"
msgstr ""

# 64b0edc493f54e73a250d94a88873459
#: ../../topics/testing/tools.txt:569
msgid "Testing or using the ORM."
msgstr ""

# d454228f4e98470a9619371415fa1cf4
#: ../../topics/testing/tools.txt:570
msgid "Database :attr:`~TransactionTestCase.fixtures`."
msgstr ""

# d54afcabfe1d4bc2b4b64a92d12634a5
#: ../../topics/testing/tools.txt:571
msgid ""
"Test :ref:`skipping based on database backend features <skipping-tests>`."
msgstr ""

# 9620e0ebfd074c639fbadd8bb290ee7f
#: ../../topics/testing/tools.txt:572
msgid ""
"The remaining specialized :meth:`assert* <TransactionTestCase."
"assertQuerysetEqual>` methods."
msgstr ""

# 5bcccc1ef8a749678bcdc72048c65f69
#: ../../topics/testing/tools.txt:575
msgid ""
"then you should use :class:`~django.test.TransactionTestCase` or :class:"
"`~django.test.TestCase` instead."
msgstr ""

# bdf7bb1699094fb3854fc7f707f9cc2c
#: ../../topics/testing/tools.txt:578
msgid "``SimpleTestCase`` inherits from ``unittest.TestCase``."
msgstr ""

# b3c64f9a3c534ed2ac59fd7b7e4f04a4
#: ../../topics/testing/tools.txt:581
msgid "TransactionTestCase"
msgstr ""

# 7588707236394261ab034e8ba93e8ea0
#: ../../topics/testing/tools.txt:585
msgid ""
"Django's ``TestCase`` class (described below) makes use of database "
"transaction facilities to speed up the process of resetting the database to "
"a known state at the beginning of each test. A consequence of this, however, "
"is that the effects of transaction commit and rollback cannot be tested by a "
"Django ``TestCase`` class. If your test requires testing of such "
"transactional behavior, you should use a Django ``TransactionTestCase``."
msgstr ""

# 7e5bbb57168143429ebe0060740b73ce
#: ../../topics/testing/tools.txt:592
msgid ""
"``TransactionTestCase`` and ``TestCase`` are identical except for the manner "
"in which the database is reset to a known state and the ability for test "
"code to test the effects of commit and rollback:"
msgstr ""

# cf1ddc46585d4ef380cfac5f54e0d5f5
#: ../../topics/testing/tools.txt:596
msgid ""
"A ``TransactionTestCase`` resets the database after the test runs by "
"truncating all tables. A ``TransactionTestCase`` may call commit and "
"rollback and observe the effects of these calls on the database."
msgstr ""

# 1761b72af1c342d9a8beb96885f2f535
#: ../../topics/testing/tools.txt:600
msgid ""
"A ``TestCase``, on the other hand, does not truncate tables after a test. "
"Instead, it encloses the test code in a database transaction that is rolled "
"back at the end of the test. Both explicit commits like ``transaction."
"commit()`` and implicit ones that may be caused by ``transaction.atomic()`` "
"are replaced with a ``nop`` operation. This guarantees that the rollback at "
"the end of the test restores the database to its initial state."
msgstr ""

# 4a1f0b520bed4aa4976e0fa11674b977
#: ../../topics/testing/tools.txt:610
msgid ""
"``TestCase`` running on a database that does not support rollback (e.g. "
"MySQL with the MyISAM storage engine), and all instances of "
"``TransactionTestCase``, will roll back at the end of the test by deleting "
"all data from the test database and reloading initial data for apps without "
"migrations."
msgstr ""

# 582cd14ed3e2419287306b730a351a3b
#: ../../topics/testing/tools.txt:615
msgid ""
"Apps with migrations :ref:`will not see their data reloaded <test-case-"
"serialized-rollback>`; if you need this functionality (for example, third-"
"party apps should enable this) you can set ``serialized_rollback = True`` "
"inside the ``TestCase`` body."
msgstr ""

# 8ad81f4da9cc4a2cbc109a90c577ce1c
#: ../../topics/testing/tools.txt:622
msgid ""
"While ``commit`` and ``rollback`` operations still *appear* to work when "
"used in ``TestCase``, no actual commit or rollback will be performed by the "
"database. This can cause your tests to pass or fail unexpectedly. Always use "
"``TransactionTestCase`` when testing transactional behavior or any code that "
"can't normally be executed in autocommit mode (:meth:`~django.db.models."
"query.QuerySet.select_for_update()` is an example)."
msgstr ""

# 1c2581043bd94c5a9f41706242bf684e
#: ../../topics/testing/tools.txt:630
msgid ""
"``TransactionTestCase`` inherits from :class:`~django.test.SimpleTestCase`."
msgstr ""

# 7bfeb4f2af104e6ebc0b1b24b39f8f51
#: ../../topics/testing/tools.txt:633
msgid "TestCase"
msgstr ""

# e0d6c51697c64501a1792ff6d9314830
#: ../../topics/testing/tools.txt:637
msgid ""
"This class provides some additional capabilities that can be useful for "
"testing Web sites."
msgstr ""

# 9db2f307bda94c22aaa7c0ef4c31df41
#: ../../topics/testing/tools.txt:640
msgid ""
"Converting a normal :class:`unittest.TestCase` to a Django :class:`TestCase` "
"is easy: Just change the base class of your test from ``'unittest."
"TestCase'`` to ``'django.test.TestCase'``. All of the standard Python unit "
"test functionality will continue to be available, but it will be augmented "
"with some useful additions, including:"
msgstr ""

# 91f598b9e6c44744a4048e4ae2cf08ac
#: ../../topics/testing/tools.txt:646
msgid "Automatic loading of fixtures."
msgstr ""

# 0616393a0e564296a2926c20eadb5cdb
#: ../../topics/testing/tools.txt:648
msgid "Wraps each test in a transaction."
msgstr ""

# 6dd450b499f14e8ba6d856622233f623
#: ../../topics/testing/tools.txt:650
msgid "Creates a TestClient instance."
msgstr ""

# 54aab0dfc20149a994c122ee2c3c0d2f
#: ../../topics/testing/tools.txt:652
msgid ""
"Django-specific assertions for testing for things like redirection and form "
"errors."
msgstr ""

# 030cbcd2bbbd4c63b03d515309221a34
#: ../../topics/testing/tools.txt:655
msgid "``TestCase`` inherits from :class:`~django.test.TransactionTestCase`."
msgstr ""

# a6d80b66c43d453c8315a08d9f3aed94
#: ../../topics/testing/tools.txt:660
msgid "LiveServerTestCase"
msgstr ""

# e9ccf634525a4072abdc0b5da47d5484
#: ../../topics/testing/tools.txt:664
msgid ""
"``LiveServerTestCase`` does basically the same as :class:`~django.test."
"TransactionTestCase` with one extra feature: it launches a live Django "
"server in the background on setup, and shuts it down on teardown. This "
"allows the use of automated test clients other than the :ref:`Django dummy "
"client <test-client>` such as, for example, the Selenium_ client, to execute "
"a series of functional tests inside a browser and simulate a real user's "
"actions."
msgstr ""

# fbeaea10b25e4753bb2c206daff9ed75
#: ../../topics/testing/tools.txt:672
msgid ""
"By default the live server's address is ``'localhost:8081'`` and the full "
"URL can be accessed during the tests with ``self.live_server_url``. If you'd "
"like to change the default address (in the case, for example, where the 8081 "
"port is already taken) then you may pass a different one to the :djadmin:"
"`test` command via the :djadminopt:`--liveserver` option, for example:"
msgstr ""

# 846fe711824e4195a548d1b018a143bf
#: ../../topics/testing/tools.txt:682
msgid ""
"Another way of changing the default server address is by setting the "
"`DJANGO_LIVE_TEST_SERVER_ADDRESS` environment variable somewhere in your "
"code (for example, in a :ref:`custom test runner<topics-testing-"
"test_runner>`):"
msgstr ""

# 22257bba34eb4e5b9368fde28acd9d0a
#: ../../topics/testing/tools.txt:691
msgid ""
"In the case where the tests are run by multiple processes in parallel (for "
"example, in the context of several simultaneous `continuous integration`_ "
"builds), the processes will compete for the same address, and therefore your "
"tests might randomly fail with an \"Address already in use\" error. To avoid "
"this problem, you can pass a comma-separated list of ports or ranges of "
"ports (at least as many as the number of potential parallel processes). For "
"example:"
msgstr ""

# f2b90ae0602d4329950a3c5b488e027f
#: ../../topics/testing/tools.txt:702
msgid ""
"Then, during test execution, each new live test server will try every "
"specified port until it finds one that is free and takes it."
msgstr ""

# d92d1e081a994269a3851bce1a7dea1d
#: ../../topics/testing/tools.txt:707
msgid ""
"To demonstrate how to use ``LiveServerTestCase``, let's write a simple "
"Selenium test. First of all, you need to install the `selenium package`_ "
"into your Python path:"
msgstr ""

# f5bd112679d94b51b1fe33d1e5fe81da
#: ../../topics/testing/tools.txt:715
msgid ""
"Then, add a ``LiveServerTestCase``-based test to your app's tests module "
"(for example: ``myapp/tests.py``). The code for this test may look as "
"follows:"
msgstr ""

# 00e2dca7440f45cf893a90bc41f9a7cb
#: ../../topics/testing/tools.txt:744
msgid "Finally, you may run the test as follows:"
msgstr ""

# 99a1bd1c081d4c028b919c7788366449
#: ../../topics/testing/tools.txt:750
msgid ""
"This example will automatically open Firefox then go to the login page, "
"enter the credentials and press the \"Log in\" button. Selenium offers other "
"drivers in case you do not have Firefox installed or wish to use another "
"browser. The example above is just a tiny fraction of what the Selenium "
"client can do; check out the `full reference`_ for more details."
msgstr ""

# 3d41d96902254afa80b2fd2d4c1446f2
#: ../../topics/testing/tools.txt:763
msgid ""
"Before Django 1.7 ``LiveServerTestCase`` used to rely on the :doc:"
"`staticfiles contrib app </howto/static-files/index>` to get the static "
"assets of the application(s) under test transparently served at their "
"expected locations during the execution of these tests."
msgstr ""

# c46102bb340f409dac4d34f6a84221c3
#: ../../topics/testing/tools.txt:768
msgid ""
"In Django 1.7 this dependency of core functionality on a ``contrib`` "
"application has been removed, because of which ``LiveServerTestCase`` "
"ability in this respect has been retrofitted to simply publish the contents "
"of the file system under :setting:`STATIC_ROOT` at the :setting:`STATIC_URL` "
"URL."
msgstr ""

# cab17bb4987348ab99532d368209b952
#: ../../topics/testing/tools.txt:774
msgid ""
"If you use the ``staticfiles`` app in your project and need to perform live "
"testing then you might want to consider using the :class:`~django.contrib."
"staticfiles.testing.StaticLiveServerTestCase` subclass shipped with it "
"instead because it's the one that implements the original behavior now. See :"
"ref:`the relevant documentation <staticfiles-testing-support>` for more "
"details."
msgstr ""

# e0478b7094814b7c9df523b11d8eb649
#: ../../topics/testing/tools.txt:783
msgid ""
"When using an in-memory SQLite database to run the tests, the same database "
"connection will be shared by two threads in parallel: the thread in which "
"the live server is run and the thread in which the test case is run. It's "
"important to prevent simultaneous database queries via this shared "
"connection by the two threads, as that may sometimes randomly cause the "
"tests to fail. So you need to ensure that the two threads don't access the "
"database at the same time. In particular, this means that in some cases (for "
"example, just after clicking a link or submitting a form), you might need to "
"check that a response is received by Selenium and that the next page is "
"loaded before proceeding with further test execution. Do this, for example, "
"by making Selenium wait until the ``<body>`` HTML tag is found in the "
"response (requires Selenium > 2.13):"
msgstr ""

# b1b0dc0ffb104b0083356f77ef6fe43a
#: ../../topics/testing/tools.txt:807
msgid ""
"The tricky thing here is that there's really no such thing as a \"page load,"
"\" especially in modern Web apps that generate HTML dynamically after the "
"server generates the initial document. So, simply checking for the presence "
"of ``<body>`` in the response might not necessarily be appropriate for all "
"use cases. Please refer to the `Selenium FAQ`_ and `Selenium documentation`_ "
"for more information."
msgstr ""

# 35e68ca1d3204563b1121291246c363a
#: ../../topics/testing/tools.txt:818
msgid "Test cases features"
msgstr ""

# ed6891acfbab43de87ff5ebbdfc04ff2
#: ../../topics/testing/tools.txt:821
msgid "Default test client"
msgstr ""

# 974c2bbb18c049f2a00435cb6b79c121
#: ../../topics/testing/tools.txt:825
msgid ""
"Every test case in a ``django.test.*TestCase`` instance has access to an "
"instance of a Django test client. This client can be accessed as ``self."
"client``. This client is recreated for each test, so you don't have to worry "
"about state (such as cookies) carrying over from one test to another."
msgstr ""

# 6849f34bbb334921911d2b303e454619
#: ../../topics/testing/tools.txt:830
msgid "This means, instead of instantiating a ``Client`` in each test::"
msgstr ""

# 4acaa44656044a4aad12fc3c2deacc15
#: ../../topics/testing/tools.txt:846
msgid "...you can just refer to ``self.client``, like so::"
msgstr ""

# c3ee722d80334914b0be54a10f0490e6
#: ../../topics/testing/tools.txt:860
msgid "Customizing the test client"
msgstr ""

# 47099470903a4e0d8c8badb40040e781
#: ../../topics/testing/tools.txt:864
msgid ""
"If you want to use a different ``Client`` class (for example, a subclass "
"with customized behavior), use the :attr:`~SimpleTestCase.client_class` "
"class attribute::"
msgstr ""

# 2737ab59aee5427db574a2fb88dfd2c6
#: ../../topics/testing/tools.txt:883
msgid "Fixture loading"
msgstr ""

# 1606c6203a484c8f95f0e0b786cf689a
#: ../../topics/testing/tools.txt:887
msgid ""
"A test case for a database-backed Web site isn't much use if there isn't any "
"data in the database. To make it easy to put test data into the database, "
"Django's custom ``TransactionTestCase`` class provides a way of loading "
"**fixtures**."
msgstr ""

# 44ec1f10dde94faab1703353abc4608d
#: ../../topics/testing/tools.txt:892
msgid ""
"A fixture is a collection of data that Django knows how to import into a "
"database. For example, if your site has user accounts, you might set up a "
"fixture of fake user accounts in order to populate your database during "
"tests."
msgstr ""

# 9e68ac7648f148ce86127b56543b8541
#: ../../topics/testing/tools.txt:896
msgid ""
"The most straightforward way of creating a fixture is to use the :djadmin:"
"`manage.py dumpdata <dumpdata>` command. This assumes you already have some "
"data in your database. See the :djadmin:`dumpdata documentation<dumpdata>` "
"for more details."
msgstr ""

# 9383bd46db7d476ea54a407576f9a6a4
#: ../../topics/testing/tools.txt:903
msgid ""
"If you've ever run :djadmin:`manage.py migrate<migrate>`, you've already "
"used a fixture without even knowing it! When you call :djadmin:`migrate` in "
"the database for the first time, Django installs a fixture called "
"``initial_data``. This gives you a way of populating a new database with any "
"initial data, such as a default set of categories."
msgstr ""

# 0195670dd3b54c7baf84da7b5fb87182
#: ../../topics/testing/tools.txt:910
msgid ""
"Fixtures with other names can always be installed manually using the :"
"djadmin:`manage.py loaddata<loaddata>` command."
msgstr ""

# 785eee53e5304fa5bf54c4b8644aa936
#: ../../topics/testing/tools.txt:0
msgid "Initial SQL data and testing"
msgstr ""

# fb1002e7042143be9931fc6d1c609602
#: ../../topics/testing/tools.txt:915
msgid ""
"Django provides a second way to insert initial data into models -- the :ref:"
"`custom SQL hook <initial-sql>`. However, this technique *cannot* be used to "
"provide initial data for testing purposes. Django's test framework flushes "
"the contents of the test database after each test; as a result, any data "
"added using the custom SQL hook will be lost."
msgstr ""

# c0538cceb8a14c5399e6043837183a11
#: ../../topics/testing/tools.txt:922
msgid ""
"Once you've created a fixture and placed it in a ``fixtures`` directory in "
"one of your :setting:`INSTALLED_APPS`, you can use it in your unit tests by "
"specifying a ``fixtures`` class attribute on your :class:`django.test."
"TestCase` subclass::"
msgstr ""

# 44274328ca3e41efba15bcfce417b6df
#: ../../topics/testing/tools.txt:941
msgid "Here's specifically what will happen:"
msgstr ""

# ce7065708c1042b8aeb6f2a04674e4b2
#: ../../topics/testing/tools.txt:943
msgid ""
"At the start of each test case, before ``setUp()`` is run, Django will flush "
"the database, returning the database to the state it was in directly after :"
"djadmin:`migrate` was called."
msgstr ""

# e3176e247f114df58044cd085ff7a90e
#: ../../topics/testing/tools.txt:947
msgid ""
"Then, all the named fixtures are installed. In this example, Django will "
"install any JSON fixture named ``mammals``, followed by any fixture named "
"``birds``. See the :djadmin:`loaddata` documentation for more details on "
"defining and installing fixtures."
msgstr ""

# bcfa528394ed46709618389e345a5a1b
#: ../../topics/testing/tools.txt:952
msgid ""
"This flush/load procedure is repeated for each test in the test case, so you "
"can be certain that the outcome of a test will not be affected by another "
"test, or by the order of test execution."
msgstr ""

# 31c9d95c75ce4125a98884ffe24ce490
#: ../../topics/testing/tools.txt:956
msgid ""
"By default, fixtures are only loaded into the ``default`` database. If you "
"are using multiple databases and set :attr:`multi_db=True "
"<TransactionTestCase.multi_db>`, fixtures will be loaded into all databases."
msgstr ""

# f954bca468de486aa4a07b057dc9db22
#: ../../topics/testing/tools.txt:961
msgid "URLconf configuration"
msgstr ""

# 2c1307b7df22477ab8efb0ccbaf3e001
#: ../../topics/testing/tools.txt:965
msgid ""
"If your application provides views, you may want to include tests that use "
"the test client to exercise those views. However, an end user is free to "
"deploy the views in your application at any URL of their choosing. This "
"means that your tests can't rely upon the fact that your views will be "
"available at a particular URL."
msgstr ""

# 9020b4425f6343e886f603111e70467c
#: ../../topics/testing/tools.txt:971
msgid ""
"In order to provide a reliable URL space for your test, ``django.test."
"*TestCase`` classes provide the ability to customize the URLconf "
"configuration for the duration of the execution of a test suite. If your "
"``*TestCase`` instance defines an ``urls`` attribute, the ``*TestCase`` will "
"use the value of that attribute as the :setting:`ROOT_URLCONF` for the "
"duration of that test."
msgstr ""

# 4f6950099751413ba49cf456da204560
# b28e54d287f24d3a8d4b31ed4d470558
#: ../../topics/testing/tools.txt:978 ../../topics/testing/tools.txt:1014
msgid "For example::"
msgstr ""

# b36fa64b81c4417e86f656c37e9454d6
#: ../../topics/testing/tools.txt:989
msgid ""
"This test case will use the contents of ``myapp.test_urls`` as the URLconf "
"for the duration of the test case."
msgstr ""

# face625abcd04f0292feadbcd0c76e22
#: ../../topics/testing/tools.txt:995
msgid "Multi-database support"
msgstr ""

# 88788a755a16453e902421b1bc6b2f9f
#: ../../topics/testing/tools.txt:999
msgid ""
"Django sets up a test database corresponding to every database that is "
"defined in the :setting:`DATABASES` definition in your settings file. "
"However, a big part of the time taken to run a Django TestCase is consumed "
"by the call to ``flush`` that ensures that you have a clean database at the "
"start of each test run. If you have multiple databases, multiple flushes are "
"required (one for each database), which can be a time consuming activity -- "
"especially if your tests don't need to test multi-database activity."
msgstr ""

# d4aef4247c564c03a473215af1060c0e
#: ../../topics/testing/tools.txt:1008
msgid ""
"As an optimization, Django only flushes the ``default`` database at the "
"start of each test run. If your setup contains multiple databases, and you "
"have a test that requires every database to be clean, you can use the "
"``multi_db`` attribute on the test suite to request a full flush."
msgstr ""

# 15bc477fc2df4bf29fba5126c08fea04
#: ../../topics/testing/tools.txt:1022
msgid ""
"This test case will flush *all* the test databases before running "
"``testIndexPageView``."
msgstr ""

# 8dfd60af8dac46ea963711454f11acf3
#: ../../topics/testing/tools.txt:1025
msgid ""
"The ``multi_db`` flag also affects into which databases the attr:"
"`TransactionTestCase.fixtures` are loaded. By default (when "
"``multi_db=False``), fixtures are only loaded into the ``default`` database. "
"If ``multi_db=True``, fixtures are loaded into all databases."
msgstr ""

# 1bee2288a1d14ddfaf4f7687422807c6
#: ../../topics/testing/tools.txt:1033
msgid "Overriding settings"
msgstr ""

# b1e0c3d70fce4d36ad306fa169bb1810
#: ../../topics/testing/tools.txt:1037
msgid ""
"For testing purposes it's often useful to change a setting temporarily and "
"revert to the original value after running the testing code. For this use "
"case Django provides a standard Python context manager (see :pep:`343`) "
"called :meth:`~django.test.SimpleTestCase.settings`, which can be used like "
"this::"
msgstr ""

# 43402ee83c764fa9ab755ce46861ec10
#: ../../topics/testing/tools.txt:1057
msgid ""
"This example will override the :setting:`LOGIN_URL` setting for the code in "
"the ``with`` block and reset its value to the previous state afterwards."
msgstr ""

# fa10c41b9fb04d5f82ef18dfb50495af
#: ../../topics/testing/tools.txt:1064
msgid ""
"It can prove unwieldy to redefine settings that contain a list of values. In "
"practice, adding or removing values is often sufficient. The :meth:`~django."
"test.SimpleTestCase.modify_settings` context manager makes it easy::"
msgstr ""

# ad4ae7d27a804c08b61fc5c0ac36bc02
#: ../../topics/testing/tools.txt:1086
msgid ""
"For each action, you can supply either a list of values or a string. When "
"the value already exists in the list, ``append`` and ``prepend`` have no "
"effect; neither does ``remove`` when the value doesn't exist."
msgstr ""

# 42fe9daf426b41b8a0f65445af3266a1
#: ../../topics/testing/tools.txt:1092
msgid ""
"In case you want to override a setting for a test method, Django provides "
"the :func:`~django.test.override_settings` decorator (see :pep:`318`). It's "
"used like this::"
msgstr ""

# 934d041e97364f2c965c8b2dd5cd17e1
#: ../../topics/testing/tools.txt:1105
msgid ""
"The decorator can also be applied to :class:`~django.test.TestCase` classes::"
msgstr ""

# a15663e2e2b34f3a81dbb70d52319878
#: ../../topics/testing/tools.txt:1118
msgid ""
"Previously, ``override_settings`` was imported from ``django.test.utils``."
msgstr ""

# 3942b9a3daaf4b8ba6a264a5b5b9c768
#: ../../topics/testing/tools.txt:1124
msgid ""
"Likewise, Django provides the :func:`~django.test.modify_settings` "
"decorator::"
msgstr ""

# 88f195cda27747fca72cc2b853d9dc03
#: ../../topics/testing/tools.txt:1139
msgid "The decorator can also be applied to test case classes::"
msgstr ""

# 6f9dcafde20b49bc952cdc3db76bbba4
#: ../../topics/testing/tools.txt:1155
msgid ""
"When given a class, these decorators modify the class directly and return "
"it; they don't create and return a modified copy of it. So if you try to "
"tweak the above examples to assign the return value to a different name than "
"``LoginTestCase`` or ``MiddlewareTestCase``, you may be surprised to find "
"that the original test case classes are still equally affected by the "
"decorator. For a given class, :func:`~django.test.modify_settings` is always "
"applied after :func:`~django.test.override_settings`."
msgstr ""

# 7e3c8098258c44628c573621c6937f87
#: ../../topics/testing/tools.txt:1165
msgid ""
"The settings file contains some settings that are only consulted during "
"initialization of Django internals. If you change them with "
"``override_settings``, the setting is changed if you access it via the "
"``django.conf.settings`` module, however, Django's internals access it "
"differently. Effectively, using :func:`~django.test.override_settings` or :"
"func:`~django.test.modify_settings` with these settings is probably not "
"going to do what you expect it to do."
msgstr ""

# a34df2c3fbca4dad862db9b63fb338e3
#: ../../topics/testing/tools.txt:1173
msgid ""
"We do not recommend altering the :setting:`DATABASES` setting. Altering the :"
"setting:`CACHES` setting is possible, but a bit tricky if you are using "
"internals that make using of caching, like :mod:`django.contrib.sessions`. "
"For example, you will have to reinitialize the session backend in a test "
"that uses cached sessions and overrides :setting:`CACHES`."
msgstr ""

# b6a5231c203841c287a4e8334ea7ecdd
#: ../../topics/testing/tools.txt:1180
msgid ""
"Finally, avoid aliasing your settings as module-level constants as "
"``override_settings()`` won't work on such values since they are only "
"evaluated the first time the module is imported."
msgstr ""

# 95f8396ee9164fbab153e205fa703487
#: ../../topics/testing/tools.txt:1184
msgid ""
"You can also simulate the absence of a setting by deleting it after settings "
"have been overridden, like this::"
msgstr ""

# 6d218a246b4f42e5acc33d85119d1a40
#: ../../topics/testing/tools.txt:1194
msgid ""
"Previously, you could only simulate the deletion of a setting which was "
"explicitly overridden."
msgstr ""

# 5b9cf7c988bb4a5ea710ad508a9e9abc
#: ../../topics/testing/tools.txt:1197
msgid ""
"When overriding settings, make sure to handle the cases in which your app's "
"code uses a cache or similar feature that retains state even if the setting "
"is changed. Django provides the :data:`django.test.signals.setting_changed` "
"signal that lets you register callbacks to clean up and otherwise reset "
"state when settings are changed."
msgstr ""

# e0cb5bd8eb28419b8ca826c5292efd89
#: ../../topics/testing/tools.txt:1203
msgid "Django itself uses this signal to reset various data:"
msgstr ""

# 83dae620a6754399b9ef7dbdf14c198a
#: ../../topics/testing/tools.txt:1206
msgid "Overridden settings"
msgstr ""

# 54a545b870734748ad8f721fab2f7b98
#: ../../topics/testing/tools.txt:1206
msgid "Data reset"
msgstr ""

# e3a05edd16da415fbd7d42b5b2a73eff
#: ../../topics/testing/tools.txt:1208
msgid "USE_TZ, TIME_ZONE"
msgstr ""

# 2d97af6156d148df8e00d26d648a1e88
#: ../../topics/testing/tools.txt:1208
msgid "Databases timezone"
msgstr ""

# 9a90d2e458f14d41a2f17fcfa7760140
#: ../../topics/testing/tools.txt:1209
msgid "TEMPLATE_CONTEXT_PROCESSORS"
msgstr ""

# abfe24fb72254801b31b1c149635d74c
#: ../../topics/testing/tools.txt:1209
msgid "Context processors cache"
msgstr ""

# 2bfbbf4557cb44499754128d112aef1b
#: ../../topics/testing/tools.txt:1210
msgid "TEMPLATE_LOADERS"
msgstr ""

# 72ae1ec9e8af4a7fb167f486cc1f8616
#: ../../topics/testing/tools.txt:1210
msgid "Template loaders cache"
msgstr ""

# 2e728b9bf2b645339bc539d941837fcc
#: ../../topics/testing/tools.txt:1211
msgid "SERIALIZATION_MODULES"
msgstr ""

# 66f1584db15a480f8d236083dc55c740
#: ../../topics/testing/tools.txt:1211
msgid "Serializers cache"
msgstr ""

# 041b011366d34599a84b02c0f6a2ca19
#: ../../topics/testing/tools.txt:1212
msgid "LOCALE_PATHS, LANGUAGE_CODE"
msgstr ""

# c2f4c343c8a74ce5a1b9956f21bd3780
#: ../../topics/testing/tools.txt:1212
msgid "Default translation and loaded translations"
msgstr ""

# 00c0f48386fb4b40a8748fb5c3848f76
#: ../../topics/testing/tools.txt:1213
msgid "MEDIA_ROOT, DEFAULT_FILE_STORAGE"
msgstr ""

# 296cb1d43f5d4fdab92b53c9a6e68cc3
#: ../../topics/testing/tools.txt:1213
msgid "Default file storage"
msgstr ""

# f42381dd262948a7bd0dd03a44db59b0
#: ../../topics/testing/tools.txt:1217
msgid "Emptying the test outbox"
msgstr ""

# 28245f579a9847e4a90773da9385e3a7
#: ../../topics/testing/tools.txt:1219
msgid ""
"If you use any of Django's custom ``TestCase`` classes, the test runner will "
"clear the contents of the test email outbox at the start of each test case."
msgstr ""

# 622f77011e8c4632b24f341ded34a225
#: ../../topics/testing/tools.txt:1222
msgid ""
"For more detail on email services during tests, see `Email services`_ below."
msgstr ""

# 824ec55ba58740518b4ae47d92dec941
#: ../../topics/testing/tools.txt:1227
msgid "Assertions"
msgstr ""

# cd7ccad39cba451bbe64ea99a5e507b4
#: ../../topics/testing/tools.txt:1229
msgid ""
"As Python's normal :class:`unittest.TestCase` class implements assertion "
"methods such as :meth:`~unittest.TestCase.assertTrue` and :meth:`~unittest."
"TestCase.assertEqual`, Django's custom :class:`TestCase` class provides a "
"number of custom assertion methods that are useful for testing Web "
"applications:"
msgstr ""

# f6d7997797d14b559b4f995465ca5dde
#: ../../topics/testing/tools.txt:1235
msgid ""
"The failure messages given by most of these assertion methods can be "
"customized with the ``msg_prefix`` argument. This string will be prefixed to "
"any failure message generated by the assertion. This allows you to provide "
"additional details that may help you to identify the location and cause of "
"an failure in your test suite."
msgstr ""

# ef002c0bad7b44808a27eeebcb8fed07
#: ../../topics/testing/tools.txt:1243
msgid ""
"Asserts that execution of callable ``callable_obj`` raised the "
"``expected_exception`` exception and that such exception has an "
"``expected_message`` representation. Any other outcome is reported as a "
"failure. Similar to unittest's :meth:`~unittest.TestCase.assertRaisesRegex` "
"with the difference that ``expected_message`` isn't a regular expression."
msgstr ""

# 454a88834294445aa9bce99fbb2e0203
#: ../../topics/testing/tools.txt:1251
msgid "Asserts that a form field behaves correctly with various inputs."
msgstr ""

# 2752969860e04aa6b3a243515a706cac
#: ../../topics/testing/tools.txt:1253
msgid "the class of the field to be tested."
msgstr ""

# e62dd02ea2e949fda87e70dca692cfd8
#: ../../topics/testing/tools.txt:1254
msgid "a dictionary mapping valid inputs to their expected cleaned values."
msgstr ""

# 223d9bb4477741a288a59288870ce76e
#: ../../topics/testing/tools.txt:1256
msgid ""
"a dictionary mapping invalid inputs to one or more raised error messages."
msgstr ""

# 9283b5fff6514e619a5b9efaeb76179d
#: ../../topics/testing/tools.txt:1258
msgid "the args passed to instantiate the field."
msgstr ""

# 8536875e7b13414b95ccd4b6a352d679
#: ../../topics/testing/tools.txt:1259
msgid "the kwargs passed to instantiate the field."
msgstr ""

# 8360f271cb834b3387041cf695bc9574
#: ../../topics/testing/tools.txt:1260
msgid "the expected clean output for inputs in ``empty_values``."
msgstr ""

# e1922b72c60a4c5db948e8e649d9a5d4
#: ../../topics/testing/tools.txt:1262
msgid ""
"For example, the following code tests that an ``EmailField`` accepts ``a@a."
"com`` as a valid email address, but rejects ``aaa`` with a reasonable error "
"message::"
msgstr ""

# c8d0431bf09a41de9366389f28e2a275
#: ../../topics/testing/tools.txt:1270
msgid ""
"Asserts that a field on a form raises the provided list of errors when "
"rendered on the form."
msgstr ""

# e0069114fd934542a780188a6020a4ce
#: ../../topics/testing/tools.txt:1273
msgid ""
"``form`` is the name the ``Form`` instance was given in the template context."
msgstr ""

# 54e54655045a45c380ec6468071bcc0d
# e9baacf457da4a81a58f516850ecf58d
#: ../../topics/testing/tools.txt:1276 ../../topics/testing/tools.txt:1298
msgid ""
"``field`` is the name of the field on the form to check. If ``field`` has a "
"value of ``None``, non-field errors (errors you can access via :meth:`form."
"non_field_errors() <django.forms.Form.non_field_errors>`) will be checked."
msgstr ""

# cc781324122d44b08cd5c2e3eef3d5a6
# 4526ee37ab6241c2871f1585a5116d7a
#: ../../topics/testing/tools.txt:1281 ../../topics/testing/tools.txt:1303
msgid ""
"``errors`` is an error string, or a list of error strings, that are expected "
"as a result of form validation."
msgstr ""

# 68463246496d4103ad1d32000e4f17a0
#: ../../topics/testing/tools.txt:1288
msgid ""
"Asserts that the ``formset`` raises the provided list of errors when "
"rendered."
msgstr ""

# 71982c628bba4ccfb27a1cb0feb3d30a
#: ../../topics/testing/tools.txt:1291
msgid ""
"``formset`` is the name the ``Formset`` instance was given in the template "
"context."
msgstr ""

# 307305fe3b0a40868108d03f088f0a0c
#: ../../topics/testing/tools.txt:1294
msgid ""
"``form_index`` is the number of the form within the ``Formset``.  If "
"``form_index`` has a value of ``None``, non-form errors (errors you can "
"access via ``formset.non_form_errors()``) will be checked."
msgstr ""

# 5083d083571f41ecb230168e295e3070
#: ../../topics/testing/tools.txt:1308
msgid ""
"Asserts that a ``Response`` instance produced the given ``status_code`` and "
"that ``text`` appears in the content of the response. If ``count`` is "
"provided, ``text`` must occur exactly ``count`` times in the response."
msgstr ""

# f4ae27898746453bae4f356402fd8a51
# 70497c3b00da4c608b2f557e96e28893
#: ../../topics/testing/tools.txt:1312 ../../topics/testing/tools.txt:1323
msgid ""
"Set ``html`` to ``True`` to handle ``text`` as HTML. The comparison with the "
"response content will be based on HTML semantics instead of character-by-"
"character equality. Whitespace is ignored in most cases, attribute ordering "
"is not significant. See :meth:`~SimpleTestCase.assertHTMLEqual` for more "
"details."
msgstr ""

# 3b6cf42167b34582afba162f7ce7f86c
#: ../../topics/testing/tools.txt:1320
msgid ""
"Asserts that a ``Response`` instance produced the given ``status_code`` and "
"that ``text`` does not appears in the content of the response."
msgstr ""

# 9ad9ff20821849ddbe143bcd4e726d51
#: ../../topics/testing/tools.txt:1331
msgid ""
"Asserts that the template with the given name was used in rendering the "
"response."
msgstr ""

# ffbed7d2404b4f57a35a7ebcebf3d906
#: ../../topics/testing/tools.txt:1334
msgid "The name is a string such as ``'admin/index.html'``."
msgstr ""

# e3a3a1d047f14a30b1c944898cee5bc6
#: ../../topics/testing/tools.txt:1336
msgid "You can use this as a context manager, like this::"
msgstr ""

# cdeed1d2caef49ee97dbe9dfe62cdec1
#: ../../topics/testing/tools.txt:1345
msgid ""
"Asserts that the template with the given name was *not* used in rendering "
"the response."
msgstr ""

# ef487085fdd94d2784203db40b792765
#: ../../topics/testing/tools.txt:1348
msgid ""
"You can use this as a context manager in the same way as :meth:"
"`~SimpleTestCase.assertTemplateUsed`."
msgstr ""

# 3b6e1b099e854215ae251947481b1345
#: ../../topics/testing/tools.txt:1353
msgid ""
"Asserts that the response returned a ``status_code`` redirect status, "
"redirected to ``expected_url`` (including any ``GET`` data), and that the "
"final page was received with ``target_status_code``."
msgstr ""

# 53f65db73fa5412e8f50226f5b4b9707
#: ../../topics/testing/tools.txt:1357
msgid ""
"If your request used the ``follow`` argument, the ``expected_url`` and "
"``target_status_code`` will be the url and status code for the final point "
"of the redirect chain."
msgstr ""

# e147a3c61bdc42718565da093d9da21b
#: ../../topics/testing/tools.txt:1361
msgid ""
"The ``host`` argument sets a default host if ``expected_url`` doesn't "
"include one (e.g. ``\"/bar/\"``).  If ``expected_url`` is an absolute URL "
"that includes a host (e.g. ``\"http://testhost/bar/\"``), the ``host`` "
"parameter will be ignored. Note that the test client doesn't support "
"fetching external URLs, but the parameter may be useful if you are testing "
"with a custom HTTP host (for example, initializing the test client with "
"``Client(HTTP_HOST=\"testhost\")``."
msgstr ""

# dd3f77093de6400f8c645cd4a84532d9
#: ../../topics/testing/tools.txt:1371
msgid ""
"If ``fetch_redirect_response`` is ``False``, the final page won't be loaded. "
"Since the test client can't fetch externals URLs, this is particularly "
"useful if ``expected_url`` isn't part of your Django app."
msgstr ""

# 47da7a5ad42740b3b8f3408dbaccfeeb
#: ../../topics/testing/tools.txt:1377
msgid ""
"Scheme is handled correctly when making comparisons between two URLs. If "
"there isn't any scheme specified in the location where we are redirected to, "
"the original request's scheme is used. If present, the scheme in "
"``expected_url`` is the one used to make the comparisons to."
msgstr ""

# 602882a8569f48ad878f18e20c692878
#: ../../topics/testing/tools.txt:1384
msgid ""
"Asserts that the strings ``html1`` and ``html2`` are equal. The comparison "
"is based on HTML semantics. The comparison takes following things into "
"account:"
msgstr ""

# f3c0be10e3e74a7da1d2b1e7ecc9eda1
#: ../../topics/testing/tools.txt:1388
msgid "Whitespace before and after HTML tags is ignored."
msgstr ""

# 63755a92765f4995bc6f7e2209a9c3bc
#: ../../topics/testing/tools.txt:1389
msgid "All types of whitespace are considered equivalent."
msgstr ""

# 6bbc6db36f53470eb109e9d2ddba572c
#: ../../topics/testing/tools.txt:1390
msgid ""
"All open tags are closed implicitly, e.g. when a surrounding tag is closed "
"or the HTML document ends."
msgstr ""

# b006f6c2b57546e5ba310bc7a370334a
#: ../../topics/testing/tools.txt:1392
msgid "Empty tags are equivalent to their self-closing version."
msgstr ""

# c7fe1df4fdff425db8666897a279eafc
#: ../../topics/testing/tools.txt:1393
msgid "The ordering of attributes of an HTML element is not significant."
msgstr ""

# 22a21e23deea4df5bef5997fc2069418
#: ../../topics/testing/tools.txt:1394
msgid ""
"Attributes without an argument are equal to attributes that equal in name "
"and value (see the examples)."
msgstr ""

# 9e8985285e0a4ab3b93a4683a4c65e59
#: ../../topics/testing/tools.txt:1397
msgid ""
"The following examples are valid tests and don't raise any "
"``AssertionError``::"
msgstr ""

# 59e1c558344a41d987cdd326eb5d8c72
# 6405dec68d3b4afbbe6c7d79de84c2b5
#: ../../topics/testing/tools.txt:1408 ../../topics/testing/tools.txt:1419
msgid ""
"``html1`` and ``html2`` must be valid HTML. An ``AssertionError`` will be "
"raised if one of them cannot be parsed."
msgstr ""

# 5c1dce666c414612afe8b751a362ee90
# a4fef880dd804885b0f3a64ae611df25
# 0b09c74e9fd64925a7fe381c157adecc
# 94d187ce66e340fea4e522d7b34421df
# 52b983f587f6407ea7270413dede2480
# 7c1261f8e8ab401890e2124d3d70bc8f
#: ../../topics/testing/tools.txt:1411 ../../topics/testing/tools.txt:1422
#: ../../topics/testing/tools.txt:1433 ../../topics/testing/tools.txt:1441
#: ../../topics/testing/tools.txt:1459 ../../topics/testing/tools.txt:1474
msgid "Output in case of error can be customized with the ``msg`` argument."
msgstr ""

# 3ef2b35d2e1343d1a9fec9d0f2dbcef4
#: ../../topics/testing/tools.txt:1415
msgid ""
"Asserts that the strings ``html1`` and ``html2`` are *not* equal. The "
"comparison is based on HTML semantics. See :meth:`~SimpleTestCase."
"assertHTMLEqual` for details."
msgstr ""

# bac58d509e604cac91b915f5f87fa813
#: ../../topics/testing/tools.txt:1426
msgid ""
"Asserts that the strings ``xml1`` and ``xml2`` are equal. The comparison is "
"based on XML semantics. Similarly to :meth:`~SimpleTestCase."
"assertHTMLEqual`, the comparison is made on parsed content, hence only "
"semantic differences are considered, not syntax differences. When invalid "
"XML is passed in any parameter, an ``AssertionError`` is always raised, even "
"if both string are identical."
msgstr ""

# 997220825ad34356853775216fd518bd
#: ../../topics/testing/tools.txt:1437
msgid ""
"Asserts that the strings ``xml1`` and ``xml2`` are *not* equal. The "
"comparison is based on XML semantics. See :meth:`~SimpleTestCase."
"assertXMLEqual` for details."
msgstr ""

# f392b0fe2c2e494c843fc8a90947f6c5
#: ../../topics/testing/tools.txt:1445
msgid ""
"Asserts that the HTML fragment ``needle`` is contained in the ``haystack`` "
"one."
msgstr ""

# d951ddd6f4a5459c82af854a3f2c62c0
#: ../../topics/testing/tools.txt:1447
msgid ""
"If the ``count`` integer argument is specified, then additionally the number "
"of ``needle`` occurrences will be strictly verified."
msgstr ""

# 4f3b6f44e7404ca898b461bb928d91a7
#: ../../topics/testing/tools.txt:1450
msgid ""
"Whitespace in most cases is ignored, and attribute ordering is not "
"significant. The passed-in arguments must be valid HTML."
msgstr ""

# 29fab43056f648aca818544b8c591361
#: ../../topics/testing/tools.txt:1455
msgid ""
"Asserts that the JSON fragments ``raw`` and ``expected_data`` are equal. "
"Usual JSON non-significant whitespace rules apply as the heavyweight is "
"delegated to the :mod:`json` library."
msgstr ""

# 2382c4bedeec45508ac11f4df5e40241
#: ../../topics/testing/tools.txt:1463
msgid ""
"Asserts that a queryset ``qs`` returns a particular list of values "
"``values``."
msgstr ""

# efda61e23ce141a49e64c2b74a042e02
#: ../../topics/testing/tools.txt:1465
msgid ""
"The comparison of the contents of ``qs`` and ``values`` is performed using "
"the function ``transform``; by default, this means that the ``repr()`` of "
"each value is compared. Any other callable can be used if ``repr()`` doesn't "
"provide a unique or helpful comparison."
msgstr ""

# ab6dcc630d08430cbd1d4b072bbe4892
#: ../../topics/testing/tools.txt:1470
msgid ""
"By default, the comparison is also ordering dependent. If ``qs`` doesn't "
"provide an implicit ordering, you can set the ``ordered`` parameter to "
"``False``, which turns the comparison into a Python set comparison."
msgstr ""

# 846d693d6d1149dda34427aeb791c94a
#: ../../topics/testing/tools.txt:1478
msgid ""
"The method now checks for undefined order and raises ``ValueError`` if "
"undefined order is spotted. The ordering is seen as undefined if the given "
"``qs`` isn't ordered and the comparison is against more than one ordered "
"values."
msgstr ""

# c73c28b4d6a1461e9329c75990866c78
#: ../../topics/testing/tools.txt:1485
msgid ""
"The method now accepts a ``msg`` parameter to allow customization of error "
"message"
msgstr ""

# 14286826e7e84524a3536b2b3724119f
#: ../../topics/testing/tools.txt:1490
msgid ""
"Asserts that when ``func`` is called with ``*args`` and ``**kwargs`` that "
"``num`` database queries are executed."
msgstr ""

# 5dda02d5e9a642f78268ad836763d77f
#: ../../topics/testing/tools.txt:1493
msgid ""
"If a ``\"using\"`` key is present in ``kwargs`` it is used as the database "
"alias for which to check the number of queries.  If you wish to call a "
"function with a ``using`` parameter you can do it by wrapping the call with "
"a ``lambda`` to add an extra parameter::"
msgstr ""

# 69e4954629554e2d99016068b8a10668
#: ../../topics/testing/tools.txt:1500
msgid "You can also use this as a context manager::"
msgstr ""

# acb1a07edb794b86a9e5d3c23414fe5c
#: ../../topics/testing/tools.txt:1509
msgid "Email services"
msgstr ""

# e76efe095a0f429491de02d4efdf3fcc
#: ../../topics/testing/tools.txt:1511
msgid ""
"If any of your Django views send email using :doc:`Django's email "
"functionality </topics/email>`, you probably don't want to send email each "
"time you run a test using that view. For this reason, Django's test runner "
"automatically redirects all Django-sent email to a dummy outbox. This lets "
"you test every aspect of sending email -- from the number of messages sent "
"to the contents of each message -- without actually sending the messages."
msgstr ""

# b7dcd65a71054783ad3d5d00d230e838
#: ../../topics/testing/tools.txt:1518
msgid ""
"The test runner accomplishes this by transparently replacing the normal "
"email backend with a testing backend. (Don't worry -- this has no effect on "
"any other email senders outside of Django, such as your machine's mail "
"server, if you're running one.)"
msgstr ""

# 485de814e02343ec8b924c43376f7e60
#: ../../topics/testing/tools.txt:1527
msgid ""
"During test running, each outgoing email is saved in ``django.core.mail."
"outbox``. This is a simple list of all :class:`~django.core.mail."
"EmailMessage` instances that have been sent. The ``outbox`` attribute is a "
"special attribute that is created *only* when the ``locmem`` email backend "
"is used. It doesn't normally exist as part of the :mod:`django.core.mail` "
"module and you can't import it directly. The code below shows how to access "
"this attribute correctly."
msgstr ""

# 9490d1a35220426a8e7d2ae54ab40a43
#: ../../topics/testing/tools.txt:1535
msgid ""
"Here's an example test that examines ``django.core.mail.outbox`` for length "
"and contents::"
msgstr ""

# 2373a680b60e4effa2c3a83a1bdf9807
#: ../../topics/testing/tools.txt:1554
msgid ""
"As noted :ref:`previously <emptying-test-outbox>`, the test outbox is "
"emptied at the start of every test in a Django ``*TestCase``. To empty the "
"outbox manually, assign the empty list to ``mail.outbox``::"
msgstr ""

# 4591d15e75ba4c90a3ae35b33503a3b2
#: ../../topics/testing/tools.txt:1566
msgid "Skipping tests"
msgstr ""

# 83ca88fe6c024b8293aaae70e93a83c0
#: ../../topics/testing/tools.txt:1570
msgid ""
"The unittest library provides the :func:`@skipIf <unittest.skipIf>` and :"
"func:`@skipUnless <unittest.skipUnless>` decorators to allow you to skip "
"tests if you know ahead of time that those tests are going to fail under "
"certain conditions."
msgstr ""

# a5649c2fd0ff4e0d9ccb3891ab2f594b
#: ../../topics/testing/tools.txt:1575
msgid ""
"For example, if your test requires a particular optional library in order to "
"succeed, you could decorate the test case with :func:`@skipIf <unittest."
"skipIf>`. Then, the test runner will report that the test wasn't executed "
"and why, instead of failing the test or omitting the test altogether."
msgstr ""

# 455b9608be7d449999168926f9ccf8f3
#: ../../topics/testing/tools.txt:1580
msgid ""
"To supplement these test skipping behaviors, Django provides two additional "
"skip decorators. Instead of testing a generic boolean, these decorators "
"check the capabilities of the database, and skip the test if the database "
"doesn't support a specific named feature."
msgstr ""

# a8d92a002e3f4adf9a5c9b7e00af68d9
#: ../../topics/testing/tools.txt:1585
msgid ""
"The decorators use a string identifier to describe database features. This "
"string corresponds to attributes of the database connection features class. "
"See ``django.db.backends.BaseDatabaseFeatures`` class for a full list of "
"database features that can be used as a basis for skipping tests."
msgstr ""

# 03d12203adb94cf49444fe94f9911c51
#: ../../topics/testing/tools.txt:1593
msgid ""
"Skip the decorated test or ``TestCase`` if the named database feature is "
"supported."
msgstr ""

# 8458c2c078f04ea08a1ad5b21fd04301
#: ../../topics/testing/tools.txt:1596
msgid ""
"For example, the following test will not be executed if the database "
"supports transactions (e.g., it would *not* run under PostgreSQL, but it "
"would under MySQL with MyISAM tables)::"
msgstr ""

# d0426932a391496e874d21b0afc9159f
#: ../../topics/testing/tools.txt:1607
msgid "``skipIfDBFeature`` can now be used to decorate a ``TestCase`` class."
msgstr ""

# e842d1db96a343c9a82cfd0091bdfa9d
#: ../../topics/testing/tools.txt:1611
msgid ""
"Skip the decorated test or ``TestCase`` if the named database feature is "
"*not* supported."
msgstr ""

# 7c383d4746314631b52c96b60d4fdda8
#: ../../topics/testing/tools.txt:1614
msgid ""
"For example, the following test will only be executed if the database "
"supports transactions (e.g., it would run under PostgreSQL, but *not* under "
"MySQL with MyISAM tables)::"
msgstr ""

# ba7a6f58fb4640e093663c13f03a2c59
#: ../../topics/testing/tools.txt:1625
msgid ""
"``skipUnlessDBFeature`` can now be used to decorate a ``TestCase`` class."
msgstr ""
