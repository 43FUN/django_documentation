# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated <>, 2012.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-04-23 16:09\n"
"PO-Revision-Date: 2012-06-29 17:46+0300\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# f022efe30c9c4e04884cd7081f1a8986
#: ../../topics/auth.txt:3
msgid "User authentication in Django"
msgstr "Идентификация пользователей в Django"

# a7333ae59efa4fa0b9c63ebcc4f0226b
#: ../../topics/auth.txt:8
msgid ""
"Django comes with a user authentication system. It handles user accounts, "
"groups, permissions and cookie-based user sessions. This document explains "
"how things work."
msgstr ""
"Django содержит систему идентификации пользователей, предоставляя работу с "
"пользователями, группами пользователей, правами и сессиями пользователей "
"работающими через куки(*пер.* cookie-based user sessions). Этот раздел "
"описывает как эта система работает."

# 1fdd11932db74525a78098cd85383f42
#: ../../topics/auth.txt:13
msgid "Overview"
msgstr "Обзор"

# 1ba922f9bd3745ef862188692b0654dd
#: ../../topics/auth.txt:15
msgid "The auth system consists of:"
msgstr "Система идентификации пользователей состоит из:"

# acf1c7e7d7324a4abbfdfa0ca5a4797b
# 13652c90ee9a4b96a8e8939a8c547cf0
# e70672fe04074af1961407ecedbc7ede
#: ../../topics/auth.txt:17 ../../topics/auth.txt:50
#: ../../topics/auth.txt:1635
msgid "Users"
msgstr "Пользователи"

# 9d3908554c2d40a6a5b3e291e5ce5ee0
#: ../../topics/auth.txt:18
msgid ""
"Permissions: Binary (yes/no) flags designating whether a user may perform a "
"certain task."
msgstr ""
"Права: Булево значение (да/не) определяющее имеет ли пользователь права на "
"различные действия."

# b86afda99141481fa58bc3365ffe481e
#: ../../topics/auth.txt:20
msgid ""
"Groups: A generic way of applying labels and permissions to more than one "
"user."
msgstr ""
"Группы: предоставляют возможность назначить множество прав нескольким "
"пользователям."

# bd8396163b8c423da7dbecb9ec8beea6
#: ../../topics/auth.txt:24
msgid "Installation"
msgstr "Установка"

# 856eff7898694bf6a29b1e6b79e5a4a8
#: ../../topics/auth.txt:26
msgid ""
"Authentication support is bundled as a Django application in ``django."
"contrib.auth``. To install it, do the following:"
msgstr ""
"Система идентификации пользователей в Django представлена приложением "
"``django.contrib.auth``. Для его установки выполните следующие действия:"

# 170b53c0b9a74c4e94146cfd58dbdd0e
#: ../../topics/auth.txt:29
msgid ""
"Put ``'django.contrib.auth'`` and ``'django.contrib.contenttypes'`` in your :"
"setting:`INSTALLED_APPS` setting. (The :class:`~django.contrib.auth.models."
"Permission` model in :mod:`django.contrib.auth` depends on :mod:`django."
"contrib.contenttypes`.)"
msgstr ""
"Добавьте ``'django.contrib.auth'`` и ``'django.contrib.contenttypes'`` в "
"настройку проекта :setting:`INSTALLED_APPS`. (Модель :class:`~django.contrib."
"auth.models.Permission` в :mod:`django.contrib.auth` зависит от :mod:`django."
"contrib.contenttypes`.)"

# 8056ddd9b9414beab3d4098f84b59291
#: ../../topics/auth.txt:33
msgid "Run the command ``manage.py syncdb``."
msgstr "Выполните команду ``manage.py syncdb``."

# 3770c48bee954af08c4c479225be0f8c
#: ../../topics/auth.txt:35
msgid ""
"Note that the default :file:`settings.py` file created by :djadmin:`django-"
"admin.py startproject <startproject>` includes ``'django.contrib.auth'`` and "
"``'django.contrib.contenttypes'`` in :setting:`INSTALLED_APPS` for "
"convenience.  If your :setting:`INSTALLED_APPS` already contains these apps, "
"feel free to run :djadmin:`manage.py syncdb <syncdb>` again; you can run "
"that command as many times as you'd like, and each time it'll only install "
"what's needed."
msgstr ""
"Файл :file:`settings.py`, создаваемый командой :djadmin:`django-admin.py "
"startproject <startproject>`, для удобства уже содержит ``'django.contrib."
"auth'`` и ``'django.contrib.contenttypes'`` в :setting:`INSTALLED_APPS`.  "
"Если :setting:`INSTALLED_APPS` уже содержит эти приложения, вы можете смело "
"запускать :djadmin:`manage.py syncdb <syncdb>`; вы можете выполнять эту "
"команду сколько угодно раз, будут выполнены только необходимые изменния."

# 9cb4da821dc04c4a92ac3eec00c7bc13
#: ../../topics/auth.txt:43
msgid ""
"The :djadmin:`syncdb` command creates the necessary database tables, creates "
"permission objects for all installed apps that need 'em, and prompts you to "
"create a superuser account the first time you run it."
msgstr ""
"Команда :djadmin:`syncdb` создаст необходимые таблицы в базе данных, создаст "
"при необходимости объекты прав для всех установленных приложений и предложит "
"создать суперпользователя при первом запуске."

# 152349abe9a14796996976ed59419303
#: ../../topics/auth.txt:47
msgid "Once you've taken those steps, that's it."
msgstr "Теперь все работает."

# eafb9869e9644b448ab06f2a7b7006b3
# 8856477fddfe4fc69fb8297026d57d4d
# 70073fc69de24145af1f10d6243d08db
#: ../../topics/auth.txt:55 ../../topics/auth.txt:1566
#: ../../topics/auth.txt:1712
msgid "API reference"
msgstr "Описание API"

# 011bcb81e361415aa86f33623857a5e0
# cc6d56721cd54ca48871f2436e88b3c9
# 750f72d889854d739c6cd43abe0b8fe8
#: ../../topics/auth.txt:58 ../../topics/auth.txt:1573
#: ../../topics/auth.txt:1717
msgid "Fields"
msgstr "Поля"

# 5a2c7b881ab44a9ea5d3aae00abcaa37
#: ../../topics/auth.txt:62
msgid ""
":class:`~django.contrib.auth.models.User` objects have the following fields:"
msgstr ""
"Объекты :class:`~django.contrib.auth.models.User` содержат следующие поля:"

# 97b0e1135cf54faa88837b367129d893
#: ../../topics/auth.txt:67
msgid ""
"Required. 30 characters or fewer. Alphanumeric characters only (letters, "
"digits and underscores)."
msgstr "Обязательное. До 30 символов. Только буквы, цифры и подчеркивание."

# b686574acd5143b6b317d6c6534b0f22
# eb74eeb7c4e14fb48740274a84af5e7d
#: ../../topics/auth.txt:75 ../../topics/auth.txt:79
msgid "Optional. 30 characters or fewer."
msgstr "Необязательное. До 30 символов."

# 8f938cc54c5b445193478b0cc97e978b
#: ../../topics/auth.txt:83
msgid "Optional. Email address."
msgstr "Необязательное. Email адрес."

# 569f7daa4d1143f58e0581780f0c5ad7
#: ../../topics/auth.txt:87
msgid ""
"Required. A hash of, and metadata about, the password. (Django doesn't store "
"the raw password.) Raw passwords can be arbitrarily long and can contain any "
"character. See the \"Passwords\" section below."
msgstr ""
"Обязательное. Хэш и метаданные о пароле. (Django не сохраняет открытый "
"пароль.) Пароль может быть любой длинны и  содержать любое количество "
"символов. Смотрите раздел \"Пароли\" ниже."

# 493b8a1c27214f43ba28db0b4c44de5e
#: ../../topics/auth.txt:93
msgid "Boolean. Designates whether this user can access the admin site."
msgstr ""
"Булево. Указывает имеет ли пользователь доступ к интерфейсу администратора."

# e72b12c5e0d64ef283afa3e1fad2b7b0
#: ../../topics/auth.txt:97
msgid ""
"Boolean. Designates whether this user account should be considered active. "
"We recommend that you set this flag to ``False`` instead of deleting "
"accounts; that way, if your applications have any foreign keys to users, the "
"foreign keys won't break."
msgstr ""
"Булево. Указывает активный аккаунт или нет. Советуем устанавливать это поле "
"в ``False`` вместо удаления; если в вашем приложение существуют связи с "
"моделью пользователя, они не будет сломаны."

# b4fa827890894542891e9fb0c617ba2b
#: ../../topics/auth.txt:102
msgid ""
"This doesn't necessarily control whether or not the user can log in. "
"Authentication backends aren't required to check for the ``is_active`` flag, "
"so if you want to reject a login based on ``is_active`` being ``False``, "
"it's up to you to check that in your own login view. However, the :class:"
"`~django.contrib.auth.forms.AuthenticationForm` used by the :func:`~django."
"contrib.auth.views.login` view *does* perform this check, as do the "
"permission-checking methods such as :meth:`~models.User.has_perm` and the "
"authentication in the Django admin. All of those functions/methods will "
"return ``False`` for inactive users."
msgstr ""
"Это поле не контролирует может пользователь войти или нет. Бэкэнд "
"идентификации не проверяет значение ``is_active``, по этому если вы хотите "
"ограничить вход для пользователей  с ``is_active`` равным ``False``, делайте "
"это в собственном представлении входа. Однако, класс формы :class:`~django."
"contrib.auth.forms.AuthenticationForm` используемый в представлении :func:"
"`~django.contrib.auth.views.login` *выполняет* проверку ``is_active``, "
"аналогично и метод проверки прав :meth:`~models.User.has_perm` и вход в "
"интерфейс администратора Django. Все эти методы/функции вернут ``False`` для "
"неактивных пользователей."

# 41de7389c46c47f5b238a4360b7b6bae
#: ../../topics/auth.txt:115
msgid ""
"Boolean. Designates that this user has all permissions without explicitly "
"assigning them."
msgstr ""
"Булево. Определяет, что пользователь имеет все права без явного их "
"присвоения пользователю."

# 4fc65ad82d534f72937fd264a839e584
#: ../../topics/auth.txt:120
msgid ""
"A datetime of the user's last login. Is set to the current date/time by "
"default."
msgstr ""
"Время последнего входа пользователя. По умолчанию устанавливается в текущее "
"время."

# 521694da05da4cbcb475a5488921f1e7
#: ../../topics/auth.txt:125
msgid ""
"A datetime designating when the account was created. Is set to the current "
"date/time by default when the account is created."
msgstr ""
"Время создания аккаунта. По умолчанию устанавливается в текущее время при "
"создании аккаунта."

# 539fc929d35042e6828f7ea14f58740d
# e79db8289e2b421584dbf0abdb713cba
#: ../../topics/auth.txt:129 ../../topics/auth.txt:1592
msgid "Methods"
msgstr "Методы"

# 7d4e11211052469b840bc3d467ec3650
#: ../../topics/auth.txt:133
msgid ""
":class:`~django.contrib.auth.models.User` objects have two many-to-many "
"fields: ``groups`` and ``user_permissions``. :class:`~django.contrib.auth."
"models.User` objects can access their related objects in the same way as any "
"other :doc:`Django model </topics/db/models>`:"
msgstr ""
"Объекты :class:`~django.contrib.auth.models.User` содержат две связи многое-"
"ко-многим: ``groups`` и ``user_permissions``. Объекты :class:`~django."
"contrib.auth.models.User` могут обращаться к связанным объектам так же как и "
"другие :doc:`модели Django </topics/db/models>`:"

# aa547f2525a54aea8c8e72f68561c8c3
#: ../../topics/auth.txt:150
msgid ""
"In addition to those automatic API methods, :class:`~django.contrib.auth."
"models.User` objects have the following custom methods:"
msgstr ""
"В дополнении к этим автоматически созданным методам :class:`~django.contrib."
"auth.models.User` содержит следующие методы:"

# 78277c997cca40838373635e127b9792
#: ../../topics/auth.txt:156
msgid ""
"Always returns ``False``. This is a way of differentiating :class:`~django."
"contrib.auth.models.User` and :class:`~django.contrib.auth.models."
"AnonymousUser` objects. Generally, you should prefer using :meth:`~django."
"contrib.auth.models.User.is_authenticated()` to this method."
msgstr ""
"Всегда возвращает ``False``. Используется для распознания объектов :class:"
"`~django.contrib.auth.models.User` и :class:`~django.contrib.auth.models."
"AnonymousUser`. Лучше использовать :meth:`~django.contrib.auth.models.User."
"is_authenticated()`."

# 8649064c88dd4d0386a85afeae4582b2
#: ../../topics/auth.txt:165
msgid ""
"Always returns ``True``. This is a way to tell if the user has been "
"authenticated. This does not imply any permissions, and doesn't check if the "
"user is active - it only indicates that the user has provided a valid "
"username and password."
msgstr ""
"Всегда возвращает ``True``. Указывает что пользователь идентифицирован. Не "
"учитывает никаких прав и не проверяет активный ли пользователь - указывает "
"только то, что пользователь указал верный пароль и имя пользователя."

# 3f6ca40aabb74051ba42fae1736bcfe6
#: ../../topics/auth.txt:172
msgid ""
"Returns the :attr:`~django.contrib.auth.models.User.first_name` plus the :"
"attr:`~django.contrib.auth.models.User.last_name`, with a space in between."
msgstr ""
"Возвращает :attr:`~django.contrib.auth.models.User.first_name` и :attr:"
"`~django.contrib.auth.models.User.last_name` разделенные пробелом."

# fafe8af6a71c4d6485f9706597529273
#: ../../topics/auth.txt:178
msgid ""
"Sets the user's password to the given raw string, taking care of the "
"password hashing. Doesn't save the :class:`~django.contrib.auth.models.User` "
"object."
msgstr ""
"Устанавливает пароль в указанную строку, выполняет хэширование пароля. Не "
"сохраняет объект :class:`~django.contrib.auth.models.User`."

# 25cf934735d7430bb431b86112a98700
#: ../../topics/auth.txt:184
msgid ""
"Returns ``True`` if the given raw string is the correct password for the "
"user. (This takes care of the password hashing in making the comparison.)"
msgstr ""
"Возвращает ``True`` если переданная строка является правильным паролем. "
"(Выполняет хэширование перед сравнением паролей.)"

# e8f0b98aa8644d468c0f41fdd75a3549
#: ../../topics/auth.txt:190
msgid ""
"Marks the user as having no password set.  This isn't the same as having a "
"blank string for a password. :meth:`~django.contrib.auth.models.User."
"check_password()` for this user will never return ``True``. Doesn't save "
"the :class:`~django.contrib.auth.models.User` object."
msgstr ""
"Указывает что пользователь не указал пароль.  Не аналогично пустому паролю. :"
"meth:`~django.contrib.auth.models.User.check_password()` никогда не вернет "
"``True`` для этого пользователя. Не сохраняет объект :class:`~django.contrib."
"auth.models.User`."

# 2fdadcaef7114edd8412e9dc28d886d3
#: ../../topics/auth.txt:196
msgid ""
"You may need this if authentication for your application takes place against "
"an existing external source such as an LDAP directory."
msgstr ""
"Можно использовать если идентификация пользователя использует сторонний "
"механизм и не хранит пароли в базе данных, например каталог LDAP."

# 1b5a174b20404d2ea3fbd39eca74a9c8
#: ../../topics/auth.txt:201
msgid ""
"Returns ``False`` if :meth:`~django.contrib.auth.models.User."
"set_unusable_password()` has been called for this user."
msgstr ""
"Возвращает ``False`` если был вызван метод :meth:`~django.contrib.auth."
"models.User.set_unusable_password()` для этого пользователя."

# 80f05bae3bac48039d53ab96d1c7f3d5
#: ../../topics/auth.txt:207
msgid ""
"Returns a set of permission strings that the user has, through his/her "
"groups."
msgstr ""
"Возвращает множество строк представляющие права пользователя добавленные с "
"помощью групп."

# 2660b65caf7643c98de3a68927eb0490
#: ../../topics/auth.txt:212
msgid ""
"If ``obj`` is passed in, only returns the group permissions for this "
"specific object."
msgstr "Если указан ``obj``, возвращает права только для указанного объекта."

# 625149a1333d4d14893201dc4bd68263
#: ../../topics/auth.txt:217
msgid ""
"Returns a set of permission strings that the user has, both through group "
"and user permissions."
msgstr ""
"Возвращает множество строк представляющие все права пользователя, с учетом "
"групп."

# a953d768aab5401d865cf8bb0d455695
#: ../../topics/auth.txt:222
msgid ""
"If ``obj`` is passed in, only returns the permissions for this specific "
"object."
msgstr "Если указан ``obj``, возвращает права только для указанного объекта."

# 0d0872a687164a679294c8c837ec4ea8
#: ../../topics/auth.txt:227
msgid ""
"Returns ``True`` if the user has the specified permission, where perm is in "
"the format ``\"<app label>.<permission codename>\"``. (see `permissions`_ "
"section below). If the user is inactive, this method will always return "
"``False``."
msgstr ""
"Возвращает ``True`` если пользователь имеет указанное право доступа, где "
"право указывает в формате ``\"<app label>.<permission codename>\"``. "
"(смотрите раздел :ref:`Права пользователя <permissions>` ниже). Если "
"пользователь неактивный, метод всегда возвращает ``False``."

# 6a97e3277c024f099fe913a0745ce44a
#: ../../topics/auth.txt:234
msgid ""
"If ``obj`` is passed in, this method won't check for a permission for the "
"model, but for this specific object."
msgstr ""
"Если указан ``obj``, метод проверит наличие права доступа для этого объекта, "
"а не модели."

# 7b82716d2c024086a16d3d888902535a
#: ../../topics/auth.txt:239
msgid ""
"Returns ``True`` if the user has each of the specified permissions, where "
"each perm is in the format ``\"<app label>.<permission codename>\"``. If the "
"user is inactive, this method will always return ``False``."
msgstr ""
"Возвращает ``True``, если пользователь имеет все указанные права, права "
"указанны в формате ``\"<app label>.<permission codename>\"``. Если "
"пользователь неактивный, метод вернет ``False``."

# 5cf110d16b944249a7f6639e5a3adb0d
#: ../../topics/auth.txt:246
msgid ""
"If ``obj`` is passed in, this method won't check for permissions for the "
"model, but for the specific object."
msgstr "Если передан ``obj``, метод будет проверять этот объект, а не модель."

# 15c1c1443afd408ea5c12a9ef2711d53
#: ../../topics/auth.txt:251
msgid ""
"Returns ``True`` if the user has any permissions in the given package (the "
"Django app label). If the user is inactive, this method will always return "
"``False``."
msgstr ""
"Возвращает ``True`` если пользователь имеет хотя бы одно право доступа для "
"указанного приложения. Если пользователь неактивный, метод вернет ``False``."

# 61212fbe05974e26962050bd8597f1b9
#: ../../topics/auth.txt:257
msgid ""
"Sends an email to the user. If :attr:`~django.contrib.auth.models.User."
"from_email` is ``None``, Django uses the :setting:`DEFAULT_FROM_EMAIL`."
msgstr ""
"Шлет email пользователю. Если :attr:`~django.contrib.auth.models.User."
"from_email` равен ``None``, Django использует настройку :setting:"
"`DEFAULT_FROM_EMAIL`."

# 1c217b48008e402db3ce7f74a9b0876d
#: ../../topics/auth.txt:263
msgid ""
"Returns a site-specific profile for this user. Raises :exc:`django.contrib."
"auth.models.SiteProfileNotAvailable` if the current site doesn't allow "
"profiles, or :exc:`django.core.exceptions.ObjectDoesNotExist` if the user "
"does not have a profile. For information on how to define a site-specific "
"user profile, see the section on `storing additional user information`_ "
"below."
msgstr ""
"Возвращает профиль пользователя. Вызывает :exc:`django.contrib.auth.models."
"SiteProfileNotAvailable` если профиль не настроен в текущем проекте, или :"
"exc:`django.core.exceptions.ObjectDoesNotExist` если профиль пользователя не "
"существует. Подробнее о профилях пользователя смотрите в разделе `storing "
"additional user information`_ ниже."

# 02dadc04d9a74766bc9665b63a274b7c
#: ../../topics/auth.txt:273
msgid "Manager functions"
msgstr "Методы менеджера модели"

# 6006c580ae184151a3ba320e35a0e3c1
#: ../../topics/auth.txt:277
msgid ""
"The :class:`~django.contrib.auth.models.User` model has a custom manager "
"that has the following helper functions:"
msgstr ""
"Модель :class:`~django.contrib.auth.models.User` использует менеджер, "
"который предоставляет дополнительные методы:"

# c5ebda8778504cbe9b53438af587ba27
#: ../../topics/auth.txt:287
msgid "Creates, saves and returns a :class:`~django.contrib.auth.models.User`."
msgstr ""
"Создает, сохраняет и возвращает :class:`~django.contrib.auth.models.User`."

# 6fe1c371f3e54cfb84a3728b8529be26
#: ../../topics/auth.txt:289
msgid ""
"The :attr:`~django.contrib.auth.models.User.username` and :attr:`~django."
"contrib.auth.models.User.password` are set as given. The domain portion of :"
"attr:`~django.contrib.auth.models.User.email` is automatically converted to "
"lowercase, and the returned :class:`~django.contrib.auth.models.User` object "
"will have :attr:`~models.User.is_active` set to ``True``."
msgstr ""
":attr:`~django.contrib.auth.models.User.username` и :attr:`~django.contrib."
"auth.models.User.password` равны соответствующим аргумнтам. Домен в :attr:"
"`~django.contrib.auth.models.User.email` автоматически конвертируется в "
"нижний регистр, созданный объект :class:`~django.contrib.auth.models.User` "
"будет с атрибутом :attr:`~models.User.is_active` равным ``True``."

# c3d9e6b0fe1044efb3f08c3a3fbdb173
#: ../../topics/auth.txt:296
msgid ""
"If no password is provided, :meth:`~django.contrib.auth.models.User."
"set_unusable_password()` will be called."
msgstr ""
"Если пароль не указан, будет вызван метод :meth:`~django.contrib.auth.models."
"User.set_unusable_password()`."

# e07fe688e54840849961d50edd1b10d3
#: ../../topics/auth.txt:300
msgid "See `Creating users`_ for example usage."
msgstr "Примеры смотрите в `Creating users`_."

# 7eaa55128922496da292a40935e80045
#: ../../topics/auth.txt:304
msgid ""
"Returns a random password with the given length and given string of allowed "
"characters. (Note that the default value of ``allowed_chars`` doesn't "
"contain letters that can cause user confusion, including:"
msgstr ""
"Возвращает случайный пароль указанной длинны из указанных символов. (Заметим "
"что значение ``allowed_chars`` по умолчанию не содержит символы, которые "
"могут озадачить пользователя:"

# 1d900a68ab9c43e8b753ac8382262bb5
#: ../../topics/auth.txt:308
msgid ""
"``i``, ``l``, ``I``, and ``1`` (lowercase letter i, lowercase letter L, "
"uppercase letter i, and the number one)"
msgstr ""
"``i``, ``l``, ``I``, и ``1`` (\"i\" в нижнем регистре, \"L\" в нижнем "
"регистре, \"i\" в верхнем регистре и цифра один)"

# 5b2a1c06d6a34740a37b8ae2facbb1bb
#: ../../topics/auth.txt:310
msgid ""
"``o``, ``O``, and ``0`` (uppercase letter o, lowercase letter o, and zero)"
msgstr ""
"``o``, ``O``, и ``0`` (\"o\" в верхнем регистре, \"o\" в нижнем регистре и "
"ноль)"

# 4e93a24a8f2243b69123ce418bc4e5bb
#: ../../topics/auth.txt:314
msgid "Basic usage"
msgstr "Основы использования"

# c6323019cb3a4301b014f3182a3e902c
#: ../../topics/auth.txt:319
msgid "Creating users"
msgstr "Создание пользователей"

# bef0ce1d56ce49609eb8044d2768c25d
#: ../../topics/auth.txt:321
msgid ""
"The most basic way to create users is to use the :meth:`~django.contrib.auth."
"models.UserManager.create_user` helper function that comes with Django::"
msgstr ""
"Самый простой способ создать пользователя - вызывать метод :meth:`~django."
"contrib.auth.models.UserManager.create_user`::"

# ab21eba4435e416c9e14858e7fb909ca
#: ../../topics/auth.txt:334
msgid ""
"You can also create users using the Django admin site. Assuming you've "
"enabled the admin site and hooked it to the URL ``/admin/``, the \"Add user"
"\" page is at ``/admin/auth/user/add/``. You should also see a link to "
"\"Users\" in the \"Auth\" section of the main admin index page. The \"Add "
"user\" admin page is different than standard admin pages in that it requires "
"you to choose a username and password before allowing you to edit the rest "
"of the user's fields."
msgstr ""
"Вы так же можете создать пользователя с помощью интерфейса администратора. "
"Предположим что вы уже настроили его и подключили к URL-у ``/admin/``, "
"Страница для добавления пользователя будет находиться по адресу ``/admin/"
"auth/user/add/``. Вы так же должны видеть ссылку \"Users\" в разделе \"Auth"
"\" на главной странице интерфейса администратора. Страница добавления "
"пользователя отличается от стандартной страницы добавления в интерфейсе "
"администратора, вы должны указать пароль и имя пользователя перед "
"редактированием пользователя."

# 68bf1992039940cda415c640f5c25247
#: ../../topics/auth.txt:341
msgid ""
"Also note: if you want your own user account to be able to create users "
"using the Django admin site, you'll need to give yourself permission to add "
"users *and* change users (i.e., the \"Add user\" and \"Change user\" "
"permissions). If your account has permission to add users but not to change "
"them, you won't be able to add users. Why? Because if you have permission to "
"add users, you have the power to create superusers, which can then, in turn, "
"change other users. So Django requires add *and* change permissions as a "
"slight security measure."
msgstr ""
"Так же помните: если вы хотите создавать пользователей используя интерфейс "
"администратора, вам необходимо добавить своему аккаунту права добавления *и* "
"редактирования пользователей (то есть, права \"Add user\" и \"Change user"
"\"). Если ваш аккаунт имеет право добавлять но не редактировать "
"пользователя, вы не сможете добавлять пользователей. Почему? Потому что если "
"у вас есть права добавлять пользователя, вы можете создать суперпользователя "
"и с его помощью редактировать других пользователей. По этому Django требует "
"права добавлять *и* редактировать."

# 16159b97c4e64729a788639948649969
#: ../../topics/auth.txt:350
msgid "Changing passwords"
msgstr "Смена паролей"

# ca358d96e9254dbb8f16b4dd83bf8b6b
#: ../../topics/auth.txt:355
msgid ""
":djadmin:`manage.py changepassword *username* <changepassword>` offers a "
"method of changing a User's password from the command line. It prompts you "
"to change the password of a given user which you must enter twice. If they "
"both match, the new password will be changed immediately. If you do not "
"supply a user, the command will attempt to change the password whose "
"username matches the current user."
msgstr ""
":djadmin:`manage.py changepassword *username* <changepassword>` позволяет "
"изменить пароль пользователя через консоль. Эта команда предлагает ввести "
"пароль для указанно пользователя, вы должны ввести пароль дважды. Если "
"введенные пароли совпадают, он будет изменен. Если пользователь не указан, "
"команда попытается изменить пароль пользователю чье имя совпадает с текущим "
"пользователем."

# 04d6ad756f4a483eb2560dc89dd3bb99
#: ../../topics/auth.txt:362
msgid ""
"You can also change a password programmatically, using :meth:`~django."
"contrib.auth.models.User.set_password()`:"
msgstr ""
"Вы так же можете сменить пароль программно, используя :meth:`~django.contrib."
"auth.models.User.set_password()`:"

# cc3f2e5be6c24309bd1a8008106168f7
#: ../../topics/auth.txt:372
msgid ""
"Don't set the :attr:`~django.contrib.auth.models.User.password` attribute "
"directly unless you know what you're doing. This is explained in the next "
"section."
msgstr ""
"Не изменяйте атрибут :attr:`~django.contrib.auth.models.User.password` явно, "
"если вы не знаете что делаете. Это объясняется в следующем разделе."

# aa02c0b73e5c4ce0b02577c9d48681d5
#: ../../topics/auth.txt:379
msgid "How Django stores passwords"
msgstr "Как Django хранит пароли"

# 63ae5966031a4bd9a398583f915fa57e
#: ../../topics/auth.txt:386
msgid ""
"The :attr:`~django.contrib.auth.models.User.password` attribute of a :class:"
"`~django.contrib.auth.models.User` object is a string in this format::"
msgstr ""
"Атрибут :attr:`~django.contrib.auth.models.User.password` объекта :class:"
"`~django.contrib.auth.models.User` содержит строку в формате::"

# 77a799ec478f466881557863afdf9cd1
#: ../../topics/auth.txt:391
msgid ""
"That's a storage algorithm, and hash, separated by the dollar-sign "
"character. The algorithm is one of a number of one way hashing or password "
"storage algorithms Django can use; see below. The hash is the result of the "
"one- way function."
msgstr ""
"Она состоит из алгоритма и хэша разделенных знаком доллара. Django "
"поддерживает несколько алгоритмов, подробнее смотрите ниже. Хэш - результат "
"выполнения алгоритма над паролем."

# 08d59c65a4054385b29f023a747e1f28
#: ../../topics/auth.txt:396
msgid ""
"By default, Django uses the PBKDF2_ algorithm with a SHA256 hash, a password "
"stretching mechanism recommended by NIST_. This should be sufficient for "
"most users: it's quite secure, requiring massive amounts of computing time "
"to break."
msgstr ""
"По умолчанию, Django использует алгоритм PBKDF2_ с SHA256 хэшом -- механизм "
"рекомендованный NIST_. Этого должно быть достаточно для большинства "
"пользователей: механизм достаточно защищен и требует больших вычислительных "
"ресурсов для взлома."

# 50d2eba8b6604cd6a6f4f0634fef794d
#: ../../topics/auth.txt:401
msgid ""
"However, depending on your requirements, you may choose a different "
"algorithm, or even use a custom algorithm to match your specific security "
"situation. Again, most users shouldn't need to do this -- if you're not "
"sure, you probably don't.  If you do, please read on:"
msgstr ""
"Одна, если это необходимо, вы можете выбрать другой алгоритм, или "
"использовать собственный. Опять же, большинству пользователей не придется "
"этого делать -- если вы не уверены, скорее всего вам не нужно что-либо "
"менять."

# 165e9454292c44dda8b9fa3366828e9f
#: ../../topics/auth.txt:406
msgid ""
"Django chooses the an algorithm by consulting the :setting:"
"`PASSWORD_HASHERS` setting. This is a list of hashing algorithm classes that "
"this Django installation supports. The first entry in this list (that is, "
"``settings.PASSWORD_HASHERS[0]``) will be used to store passwords, and all "
"the other entries are valid hashers that can be used to check existing "
"passwords. This means that if you want to use a different algorithm, you'll "
"need to modify :setting:`PASSWORD_HASHERS` to list your prefered algorithm "
"first in the list."
msgstr ""
"Django выбирает алгоритм в соответствии с настройкой :setting:"
"`PASSWORD_HASHERS`. Настройка содержит список хэширующих алгоритмов, которые "
"поддерживает проект. Первый элемент списка (то есть ``settings."
"PASSWORD_HASHERS[0]``) будет использован для хранения паролей, и все "
"остальные элементы могут быть использованы при проверке паролей. Это "
"означает что если вы хотите использовать другой алгоритм, вам необходимо "
"добавить его в начало списка :setting:`PASSWORD_HASHERS`."

# f2994b08674d47c2b2973d4f4c940a18
#: ../../topics/auth.txt:414
msgid "The default for :setting:`PASSWORD_HASHERS` is::"
msgstr "Значение по умолчанию для :setting:`PASSWORD_HASHERS`::"

# 4c32bd87f6b745259cfac336da7df4cf
#: ../../topics/auth.txt:425
msgid ""
"This means that Django will use PBKDF2_ to store all passwords, but will "
"support checking passwords stored with PBKDF2SHA1, bcrypt_, SHA1_, etc. The "
"next few sections describe a couple of common ways advanced users may want "
"to modify this setting."
msgstr ""
"Это означает что Django будет использовать PBKDF2_ для хранения паролей, но "
"для проверки сохраненных паролей использует PBKDF2SHA1, bcrypt_, SHA1_, и "
"др. Следующие несколько разделов описывают как продвинутые пользователи "
"могут поменять эту настройку."

# 25a86ebbb1154582ac54f85cdbfb82d5
#: ../../topics/auth.txt:431
msgid "Using bcrypt with Django"
msgstr "Использование bcrypt с Django"

# e733b6ba2e41487e98a48b27f3e7c64a
#: ../../topics/auth.txt:433
msgid ""
"Bcrypt_ is a popular password storage algorithm that's specifically designed "
"for long-term password storage. It's not the default used by Django since it "
"requires the use of third-party libraries, but since many people may want to "
"use it Django supports bcrypt with minimal effort."
msgstr ""
"Bcrypt_ -- популярный алгоритм для шифрования паролей, специально создан для "
"долговременного хранения паролей. Не используется Django по умолчанию так "
"как требует использования сторонних библиотек, но так как он может "
"пригодиться для большинства пользователей, Django позволяет использовать "
"bcrypt с минимальными усилиями."

# e9d418f2499949bca6315d2bfd7a94ab
#: ../../topics/auth.txt:438
msgid "To use Bcrypt as your default storage algorithm, do the following:"
msgstr "Что бы использовать Bcrypt по умолчанию, выполните следующие действия:"

# 899bd5c23bdd4cf48241b1c8c3cec2c4
#: ../../topics/auth.txt:440
msgid ""
"Install the `py-bcrypt`_ library (probably by running ``sudo pip install py-"
"bcrypt``, or downloading the library and installing it with ``python setup."
"py install``)."
msgstr ""
"Установите библиотеку `py-bcrypt`_  (выполнив ``sudo pip install py-"
"bcrypt``, или скачав библиотеку и установив ее с помощью ``python setup.py "
"install``)."

# 36ab636f7fc04d438c89b87a8af6dc58
#: ../../topics/auth.txt:444
msgid ""
"Modify :setting:`PASSWORD_HASHERS` to list ``BCryptPasswordHasher`` first. "
"That is, in your settings file, you'd put::"
msgstr ""
"Измените :setting:`PASSWORD_HASHERS` добавив в начало списка "
"``BCryptPasswordHasher``. Вот что должно получиться::"

# 45092d98ef6446f594e58a9dc1deb463
#: ../../topics/auth.txt:456
msgid ""
"(You need to keep the other entries in this list, or else Django won't be "
"able to upgrade passwords; see below)."
msgstr ""
"(Необходимо сохранить остальные элементы списка, иначе Django не сможет "
"обновить пароли, подробности смотрите ниже)."

# 6f78eb335eb5484e88e01a1ef67ec1fd
#: ../../topics/auth.txt:459
msgid ""
"That's it -- now your Django install will use Bcrypt as the default storage "
"algorithm."
msgstr ""
"Это все -- теперь Django будет использовать Bcrypt как алгоритм по умолчанию "
"для хранения паролей."

# 1b6e3be5ffa24013b8c450492804892d
#: ../../topics/auth.txt:464
msgid ""
"There are several other implementations that allow bcrypt to be used with "
"Django. Django's bcrypt support is NOT directly compatible with these. To "
"upgrade, you will need to modify the hashes in your database to be in the "
"form `bcrypt$(raw bcrypt output)`. For example: `bcrypt$$2a"
"$12$NT0I31Sa7ihGEWpka9ASYrEFkhuTNeBQ2xfZskIiiJeyFXhRgS.Sy`."
msgstr ""
"Существуют и другие реализации использования bcrypt с Django. Но они не "
"совсем совместимы с текущей реализацией поддержки bcrypt. Для обновления вам "
"необходимо изменить хэши в базе данных в формат `bcrypt$(результат алгоритма)"
"`. Например: `bcrypt$$2a"
"$12$NT0I31Sa7ihGEWpka9ASYrEFkhuTNeBQ2xfZskIiiJeyFXhRgS.Sy`."

# 3221d458af744dcbba75fbcf9b03eaf2
#: ../../topics/auth.txt:472
msgid "Increasing the work factor"
msgstr ""

# 64391f63c0fe423caee2dcfb3cca2465
#: ../../topics/auth.txt:474
msgid ""
"The PDKDF2 and bcrypt algorithms use a number of iterations or rounds of "
"hashing. This deliberately slows down attackers, making attacks against "
"hashed passwords harder. However, as computing power increases, the number "
"of iterations needs to be increased. We've chosen a reasonable default (and "
"will increase it with each release of Django), but you may wish to tune it "
"up or down, depending on your security needs and available processing power. "
"To do so, you'll subclass the appropriate algorithm and override the "
"``iterations`` parameters. For example, to increase the number of iterations "
"used by the default PDKDF2 algorithm:"
msgstr ""

# 560a6d61360142a8a08abad17b9ce557
#: ../../topics/auth.txt:484
msgid ""
"Create a subclass of ``django.contrib.auth.hashers.PBKDF2PasswordHasher``::"
msgstr ""

# 805c26ddb1124e7f8e3aa7c40d381086
#: ../../topics/auth.txt:494
msgid ""
"Save this somewhere in your project. For example, you might put this in a "
"file like ``myproject/hashers.py``."
msgstr ""

# e1f6d6dc71ea428489ac0d622cf0defd
#: ../../topics/auth.txt:497
msgid "Add your new hasher as the first entry in :setting:`PASSWORD_HASHERS`::"
msgstr ""

# 36f0a7308107484680eaf40229f52f2f
#: ../../topics/auth.txt:510
msgid ""
"That's it -- now your Django install will use more iterations when it stores "
"passwords using PBKDF2."
msgstr ""

# b0f15cbd56404f5c99e774e429763144
#: ../../topics/auth.txt:514
msgid "Password upgrading"
msgstr ""

# 92efc99b44834512946fe40b72af0d7f
#: ../../topics/auth.txt:516
msgid ""
"When users log in, if their passwords are stored with anything other than "
"the preferred algorithm, Django will automatically upgrade the algorithm to "
"the preferred one. This means that old installs of Django will get "
"automatically more secure as users log in, and it also means that you can "
"switch to new (and better) storage algorithms as they get invented."
msgstr ""

# 8a1dc181719c46b1a14406be5e72cadd
#: ../../topics/auth.txt:522
msgid ""
"However, Django can only upgrade passwords that use algorithms mentioned in :"
"setting:`PASSWORD_HASHERS`, so as you upgrade to new systems you should make "
"sure never to *remove* entries from this list. If you do, users using un- "
"mentioned algorithms won't be able to upgrade."
msgstr ""

# 31063a7b4444476a9d486017c5c18ffa
#: ../../topics/auth.txt:534
msgid "Anonymous users"
msgstr "Анонимные пользователи"

# 2562acfeba6a4054bfacb021703825f0
#: ../../topics/auth.txt:538
msgid ""
":class:`django.contrib.auth.models.AnonymousUser` is a class that implements "
"the :class:`django.contrib.auth.models.User` interface, with these "
"differences:"
msgstr ""
":class:`django.contrib.auth.models.AnonymousUser` -- это класс, который "
"реализует интерфейс класса :class:`django.contrib.auth.models.User`, с "
"следующими отличиями:"

# 332acc35b051471ebd98ac28dbee6006
#: ../../topics/auth.txt:542
msgid ":attr:`~django.contrib.auth.models.User.id` is always ``None``."
msgstr ":attr:`~django.contrib.auth.models.User.id` всегда равен ``None``."

# f99c4decd3ad4551ae7137250ca1d4cc
#: ../../topics/auth.txt:543
msgid ""
":attr:`~django.contrib.auth.models.User.is_staff` and :attr:`~django.contrib."
"auth.models.User.is_superuser` are always ``False``."
msgstr ""
":attr:`~django.contrib.auth.models.User.is_staff` и :attr:`~django.contrib."
"auth.models.User.is_superuser` всегда равны ``False``."

# 89f9047b1c6b4c2b9d1de50f5a26011a
#: ../../topics/auth.txt:546
msgid ":attr:`~django.contrib.auth.models.User.is_active` is always ``False``."
msgstr ":attr:`~django.contrib.auth.models.User.is_active` всегда ``False``."

# d5a5fd3fcb3c4709a7722095d4cf2ecb
#: ../../topics/auth.txt:547
msgid ""
":attr:`~django.contrib.auth.models.User.groups` and :attr:`~django.contrib."
"auth.models.User.user_permissions` are always empty."
msgstr ""
":attr:`~django.contrib.auth.models.User.groups` и :attr:`~django.contrib."
"auth.models.User.user_permissions` всегда пустные."

# fde133e9ab854716b605fa0e7b1dae68
#: ../../topics/auth.txt:550
msgid ""
":meth:`~django.contrib.auth.models.User.is_anonymous()` returns ``True`` "
"instead of ``False``."
msgstr ""
":meth:`~django.contrib.auth.models.User.is_anonymous()` возвращает ``True`` "
"вместо ``False``."

# 97874ec66dbf4fd5a2462ae8bc3f9fc4
#: ../../topics/auth.txt:552
msgid ""
":meth:`~django.contrib.auth.models.User.is_authenticated()` returns "
"``False`` instead of ``True``."
msgstr ""
":meth:`~django.contrib.auth.models.User.is_authenticated()` возвращает "
"``False`` вместо ``True``."

# fd62bf2fecbc43e281cbf23b40b2d398
#: ../../topics/auth.txt:554
msgid ""
":meth:`~django.contrib.auth.models.User.set_password()`, :meth:`~django."
"contrib.auth.models.User.check_password()`, :meth:`~django.contrib.auth."
"models.User.save()`, :meth:`~django.contrib.auth.models.User.delete()`, :"
"meth:`~django.contrib.auth.models.User.set_groups()` and :meth:`~django."
"contrib.auth.models.User.set_permissions()` raise :exc:`NotImplementedError`."
msgstr ""
":meth:`~django.contrib.auth.models.User.set_password()`, :meth:`~django."
"contrib.auth.models.User.check_password()`, :meth:`~django.contrib.auth."
"models.User.save()`, :meth:`~django.contrib.auth.models.User.delete()`, :"
"meth:`~django.contrib.auth.models.User.set_groups()` и :meth:`~django."
"contrib.auth.models.User.set_permissions()` вызывают исключение :exc:"
"`NotImplementedError`."

# 8dfb54d01f174380934aeb5c57dc0e2b
#: ../../topics/auth.txt:562
msgid ""
"In practice, you probably won't need to use :class:`~django.contrib.auth."
"models.AnonymousUser` objects on your own, but they're used by Web requests, "
"as explained in the next section."
msgstr ""
"На практике вам не придется использовать объект :class:`~django.contrib.auth."
"models.AnonymousUser`, он используется объекте запроса, как будет описано в "
"следующем разделе."

# 1aec00cddd0f4a50b4141548cc57c47d
#: ../../topics/auth.txt:569
msgid "Creating superusers"
msgstr "Создание суперпользователей"

# d22f24f271024209886563f79dc3f2aa
#: ../../topics/auth.txt:571
msgid ""
":djadmin:`manage.py syncdb <syncdb>` prompts you to create a superuser the "
"first time you run it after adding ``'django.contrib.auth'`` to your :"
"setting:`INSTALLED_APPS`. If you need to create a superuser at a later date, "
"you can use a command line utility::"
msgstr ""

# 11b4ef02d0194f4e8b57d0d175c1afe4
#: ../../topics/auth.txt:578
msgid ""
"You will be prompted for a password. After you enter one, the user will be "
"created immediately. If you leave off the :djadminopt:`--username` or the :"
"djadminopt:`--email` options, it will prompt you for those values."
msgstr ""

# 2ea39ee50ded45acb8091b6753678828
#: ../../topics/auth.txt:582
msgid ""
"If you're using an older release of Django, the old way of creating a "
"superuser on the command line still works::"
msgstr ""

# 698c666bc5ed4c7ea9afb87a1c96af92
#: ../../topics/auth.txt:587
msgid ""
"...where :file:`/path/to` is the path to the Django codebase on your "
"filesystem. The ``manage.py`` command is preferred because it figures out "
"the correct path and environment for you."
msgstr ""

# cf9b37dd025c487197c3d6aa99b7b4df
#: ../../topics/auth.txt:594
msgid "Storing additional information about users"
msgstr ""

# 19f05d84f23a4e4abd7e1a138ab743a4
#: ../../topics/auth.txt:596
msgid ""
"If you'd like to store additional information related to your users, Django "
"provides a method to specify a site-specific related model -- termed a "
"\"user profile\" -- for this purpose."
msgstr ""

# 5c1f482c31ea4a768e547867d1230f2d
#: ../../topics/auth.txt:600
msgid ""
"To make use of this feature, define a model with fields for the additional "
"information you'd like to store, or additional methods you'd like to have "
"available, and also add a :class:`~django.db.models.Field.OneToOneField` "
"named ``user`` from your model to the :class:`~django.contrib.auth.models."
"User` model. This will ensure only one instance of your model can be created "
"for each :class:`~django.contrib.auth.models.User`. For example::"
msgstr ""

# b61e193cc8324e6eb910f0f1cf9f51b6
#: ../../topics/auth.txt:619
msgid ""
"To indicate that this model is the user profile model for a given site, fill "
"in the setting :setting:`AUTH_PROFILE_MODULE` with a string consisting of "
"the following items, separated by a dot:"
msgstr ""

# 0987476916bf46eba6a09e56cc7567c8
#: ../../topics/auth.txt:623
msgid ""
"The name of the application (case sensitive) in which the user profile model "
"is defined (in other words, the name which was passed to :djadmin:`manage.py "
"startapp <startapp>` to create the application)."
msgstr ""

# ace8259dbce141df85f998dbd334d4b5
#: ../../topics/auth.txt:628
msgid "The name of the model (not case sensitive) class."
msgstr ""

# 69a55e2281f54efcb274bedf5870ec82
#: ../../topics/auth.txt:630
msgid ""
"For example, if the profile model was a class named ``UserProfile`` and was "
"defined inside an application named ``accounts``, the appropriate setting "
"would be::"
msgstr ""

# 5995cb41a1b242dbaae8dfc9d4b2ab61
#: ../../topics/auth.txt:636
msgid ""
"When a user profile model has been defined and specified in this manner, "
"each :class:`~django.contrib.auth.models.User` object will have a method -- :"
"class:`~django.contrib.auth.models.User.get_profile()` -- which returns the "
"instance of the user profile model associated with that :class:`~django."
"contrib.auth.models.User`."
msgstr ""

# 0dd8850ebf2f4b7b88a4cb7261907b87
#: ../../topics/auth.txt:642
msgid ""
"The method :class:`~django.contrib.auth.models.User.get_profile()` does not "
"create a profile if one does not exist. You need to register a handler for "
"the User model's :attr:`django.db.models.signals.post_save` signal and, in "
"the handler, if ``created`` is ``True``, create the associated user profile::"
msgstr ""

# 92def760f237401ebaedd2a792cc3055
#: ../../topics/auth.txt:665
msgid "Authentication in Web requests"
msgstr ""

# c4c7c4c0ed32434f815a049430fda2d6
#: ../../topics/auth.txt:667
msgid ""
"Until now, this document has dealt with the low-level APIs for manipulating "
"authentication-related objects. On a higher level, Django can hook this "
"authentication framework into its system of :class:`request objects <django."
"http.HttpRequest>`."
msgstr ""

# 197de2b52f0342da9a8d761425875c30
#: ../../topics/auth.txt:672
msgid ""
"First, install the :class:`~django.contrib.sessions.middleware."
"SessionMiddleware` and :class:`~django.contrib.auth.middleware."
"AuthenticationMiddleware` middlewares by adding them to your :setting:"
"`MIDDLEWARE_CLASSES` setting. See the :doc:`session documentation </topics/"
"http/sessions>` for more information."
msgstr ""

# 66355bc9010c4e9d84aa98d5ccc75f2e
#: ../../topics/auth.txt:678
msgid ""
"Once you have those middlewares installed, you'll be able to access :attr:"
"`request.user <django.http.HttpRequest.user>` in views. :attr:`request.user "
"<django.http.HttpRequest.user>` will give you a :class:`~django.contrib.auth."
"models.User` object representing the currently logged-in user. If a user "
"isn't currently logged in, :attr:`request.user <django.http.HttpRequest."
"user>` will be set to an instance of :class:`~django.contrib.auth.models."
"AnonymousUser` (see the previous section). You can tell them apart with :"
"meth:`~django.contrib.auth.models.User.is_authenticated()`, like so::"
msgstr ""

# e519cc288f764a19865c8a1b3fc9ada2
#: ../../topics/auth.txt:696
msgid "How to log a user in"
msgstr ""

# ed74e3269255456ba6b14658025ded93
#: ../../topics/auth.txt:698
msgid ""
"Django provides two functions in :mod:`django.contrib.auth`: :func:`~django."
"contrib.auth.authenticate()` and :func:`~django.contrib.auth.login()`."
msgstr ""

# a39ee853e8f04e99a970fe78fca8d04d
#: ../../topics/auth.txt:704
msgid ""
"To authenticate a given username and password, use :func:`~django.contrib."
"auth.authenticate()`. It takes two keyword arguments, ``username`` and "
"``password``, and it returns a :class:`~django.contrib.auth.models.User` "
"object if the password is valid for the given username. If the password is "
"invalid, :func:`~django.contrib.auth.authenticate()` returns ``None``. "
"Example::"
msgstr ""

# 070ec43235da422081b72c97cd80ccab
#: ../../topics/auth.txt:723
msgid ""
"To log a user in, in a view, use :func:`~django.contrib.auth.login()`. It "
"takes an :class:`~django.http.HttpRequest` object and a :class:`~django."
"contrib.auth.models.User` object. :func:`~django.contrib.auth.login()` saves "
"the user's ID in the session, using Django's session framework, so, as "
"mentioned above, you'll need to make sure to have the session middleware "
"installed."
msgstr ""

# 6ece78bfcca04c74a06341dd9aa6e9ef
#: ../../topics/auth.txt:730
msgid ""
"Note that data set during the anonymous session is retained when the user "
"logs in."
msgstr ""

# 2e2c925dc8f0400483bd52ff89bacfb4
#: ../../topics/auth.txt:733
msgid ""
"This example shows how you might use both :func:`~django.contrib.auth."
"authenticate()` and :func:`~django.contrib.auth.login()`::"
msgstr ""

# 511f313c1a9948ccbf41619b49f3240b
#: ../../topics/auth.txt:754
msgid ""
"When you're manually logging a user in, you *must* call :func:`~django."
"contrib.auth.authenticate()` before you call :func:`~django.contrib.auth."
"login()`. :func:`~django.contrib.auth.authenticate()` sets an attribute on "
"the :class:`~django.contrib.auth.models.User` noting which authentication "
"backend successfully authenticated that user (see the `backends "
"documentation`_ for details), and this information is needed later during "
"the login process."
msgstr ""

# 061046dd7da34e2aafa4a20ccc346355
#: ../../topics/auth.txt:766
msgid "Manually managing a user's password"
msgstr ""

# 5baf4f1eb063484ca8c2a4f60b1b432e
#: ../../topics/auth.txt:779
msgid ""
"If you'd like to manually authenticate a user by comparing a plain-text "
"password to the hashed password in the database, use the convenience "
"function :func:`django.contrib.auth.hashers.check_password`. It takes two "
"arguments: the plain-text password to check, and the full value of a user's "
"``password`` field in the database to check against, and returns ``True`` if "
"they match, ``False`` otherwise."
msgstr ""

# 2562e6503ee34fdebdcd451fecc51be1
#: ../../topics/auth.txt:790
msgid ""
"Creates a hashed password in the format used by this application. It takes "
"two arguments: hashing algorithm to use and the password in plain-text. "
"Currently supported algorithms are: ``'sha1'``, ``'md5'`` and ``'crypt'`` if "
"you have the ``crypt`` library installed. If the second argument is "
"``None``, an unusable password is returned (a one that will be never "
"accepted by :func:`django.contrib.auth.hashers.check_password`)."
msgstr ""

# 324811735ef3498d86da41e375467c16
#: ../../topics/auth.txt:801
msgid ""
"Checks if the given string is a hashed password that has a chance of being "
"verified against :func:`django.contrib.auth.hashers.check_password`."
msgstr ""

# da2952c30d8f449a97e680dfa1906c2b
#: ../../topics/auth.txt:806
msgid "How to log a user out"
msgstr ""

# c7103175b3a04bcea894a4a6bc913403
#: ../../topics/auth.txt:812
msgid ""
"To log out a user who has been logged in via :func:`django.contrib.auth.login"
"()`, use :func:`django.contrib.auth.logout()` within your view. It takes an :"
"class:`~django.http.HttpRequest` object and has no return value. Example::"
msgstr ""

# 098dc05ff07d422dae3fccf9dac182e3
#: ../../topics/auth.txt:824
msgid ""
"Note that :func:`~django.contrib.auth.logout()` doesn't throw any errors if "
"the user wasn't logged in."
msgstr ""

# c60db521f2fc48749177562f03d76d16
#: ../../topics/auth.txt:827
msgid ""
"When you call :func:`~django.contrib.auth.logout()`, the session data for "
"the current request is completely cleaned out. All existing data is removed. "
"This is to prevent another person from using the same Web browser to log in "
"and have access to the previous user's session data. If you want to put "
"anything into the session that will be available to the user immediately "
"after logging out, do that *after* calling :func:`django.contrib.auth.logout"
"()`."
msgstr ""

# 4c0a8f051ee047d39f7cd3ee7509535d
#: ../../topics/auth.txt:838
msgid "Login and logout signals"
msgstr ""

# 9d61556b949f44ac90e42e6a0c3b549c
#: ../../topics/auth.txt:842
msgid ""
"The auth framework uses two :doc:`signals </topics/signals>` that can be "
"used for notification when a user logs in or out."
msgstr ""

# 3e654db1e4264769be139101993accf3
#: ../../topics/auth.txt:847
msgid "Sent when a user logs in successfully."
msgstr ""

# 24c5095f35cb4109b4e1f0aa9da8570f
#: ../../topics/auth.txt:849
msgid "Arguments sent with this signal:"
msgstr ""

# c30b4a2481e54b08aaf373061461960d
#: ../../topics/auth.txt:852
msgid "As above: the class of the user that just logged in."
msgstr ""

# 0fe82f0b41dc4f1283309257861bfc13
# 2cccd8bc26a34d01bc9749ab43b4c563
#: ../../topics/auth.txt:855 ../../topics/auth.txt:869
msgid "The current :class:`~django.http.HttpRequest` instance."
msgstr ""

# b449cfb8680c41a4884c0bebcf982d9a
#: ../../topics/auth.txt:858
msgid "The user instance that just logged in."
msgstr ""

# d6699f7784bb4a61a5546f2a6c2e9f6c
#: ../../topics/auth.txt:862
msgid "Sent when the logout method is called."
msgstr ""

# 6d16c5da8a1f41e48168d988e14b6f60
#: ../../topics/auth.txt:865
msgid ""
"As above: the class of the user that just logged out or ``None`` if the user "
"was not authenticated."
msgstr ""

# a2536c80d516476c916ab56635bf4181
#: ../../topics/auth.txt:872
msgid ""
"The user instance that just logged out or ``None`` if the user was not "
"authenticated."
msgstr ""

# 59c84ed2cef447b6b5af1bb6af670a04
#: ../../topics/auth.txt:876
msgid "Limiting access to logged-in users"
msgstr ""

# c0f26de2c2a84c4ba1719ac41c1101d1
#: ../../topics/auth.txt:879
msgid "The raw way"
msgstr ""

# db3ccb67675b48118fd9f8ded19f9822
#: ../../topics/auth.txt:881
msgid ""
"The simple, raw way to limit access to pages is to check :meth:`request.user."
"is_authenticated() <django.contrib.auth.models.User.is_authenticated()>` and "
"either redirect to a login page::"
msgstr ""

# 9dd29658b9b74390a16636bde9c5319d
#: ../../topics/auth.txt:893
msgid "...or display an error message::"
msgstr ""

# 7d2652ba90af446f92f359b897bcbbd9
#: ../../topics/auth.txt:901
msgid "The login_required decorator"
msgstr ""

# 87520a28572645419ddd17df8ed9b9ea
#: ../../topics/auth.txt:905
msgid ""
"As a shortcut, you can use the convenient :func:`~django.contrib.auth."
"decorators.login_required` decorator::"
msgstr ""

# 8cb73d66731845c0b9094bec46792bf6
#: ../../topics/auth.txt:914
msgid ""
":func:`~django.contrib.auth.decorators.login_required` does the following:"
msgstr ""

# edd2003dddca4a37a2b8a997c09a64ec
#: ../../topics/auth.txt:916
msgid ""
"If the user isn't logged in, redirect to :setting:`settings.LOGIN_URL "
"<LOGIN_URL>`, passing the current absolute path in the query string. "
"Example: ``/accounts/login/?next=/polls/3/``."
msgstr ""

# ee5df891fbe0455f814e51e5de32fd47
#: ../../topics/auth.txt:920
msgid ""
"If the user is logged in, execute the view normally. The view code is free "
"to assume the user is logged in."
msgstr ""

# 8debd10e4a764fd7a8a17efbb9d9edf1
#: ../../topics/auth.txt:923
msgid ""
"By default, the path that the user should be redirected to upon successful "
"authentication is stored in a query string parameter called ``\"next\"``. If "
"you would prefer to use a different name for this parameter, :func:`~django."
"contrib.auth.decorators.login_required` takes an optional "
"``redirect_field_name`` parameter::"
msgstr ""

# e131c2280f144ca285e4d60e7e0e57b1
#: ../../topics/auth.txt:935
msgid ""
"Note that if you provide a value to ``redirect_field_name``, you will most "
"likely need to customize your login template as well, since the template "
"context variable which stores the redirect path will use the value of "
"``redirect_field_name`` as its key rather than ``\"next\"`` (the default)."
msgstr ""

# 781e5b6a8cf24ebabc4ebcd22870900c
#: ../../topics/auth.txt:942
msgid ""
":func:`~django.contrib.auth.decorators.login_required` also takes an "
"optional ``login_url`` parameter. Example::"
msgstr ""

# daa98c05322440aea40e637468f35ac1
#: ../../topics/auth.txt:951
msgid ""
"Note that if you don't specify the ``login_url`` parameter, you'll need to "
"map the appropriate Django view to :setting:`settings.LOGIN_URL "
"<LOGIN_URL>`. For example, using the defaults, add the following line to "
"your URLconf::"
msgstr ""

# b55b1ef95cde4a88b3293f8ef77d64da
#: ../../topics/auth.txt:959
msgid "**URL name:** ``login``"
msgstr ""

# ad317fdfeb4d4b5a80e744925aea5005
# 4cfd7bd8e0cc4ac1a640a90348656588
#: ../../topics/auth.txt:961 ../../topics/auth.txt:1081
msgid ""
"See :doc:`the URL documentation </topics/http/urls>` for details on using "
"named URL patterns."
msgstr ""

# e2df380198a4487597b2aa081381dce7
#: ../../topics/auth.txt:964
msgid "Here's what ``django.contrib.auth.views.login`` does:"
msgstr ""

# c959cc4bcca34221be8b577b27020af2
#: ../../topics/auth.txt:966
msgid ""
"If called via ``GET``, it displays a login form that POSTs to the same URL. "
"More on this in a bit."
msgstr ""

# 23a17b3ea6be4bd992cb5cfc948d9220
#: ../../topics/auth.txt:969
msgid ""
"If called via ``POST``, it tries to log the user in. If login is successful, "
"the view redirects to the URL specified in ``next``. If ``next`` isn't "
"provided, it redirects to :setting:`settings.LOGIN_REDIRECT_URL "
"<LOGIN_REDIRECT_URL>` (which defaults to ``/accounts/profile/``). If login "
"isn't successful, it redisplays the login form."
msgstr ""

# eb9b969c611f4e8e9059fa0282bd29b1
#: ../../topics/auth.txt:976
msgid ""
"It's your responsibility to provide the login form in a template called "
"``registration/login.html`` by default. This template gets passed four "
"template context variables:"
msgstr ""

# 2e226d76aeb44c02acb823326ddcce78
#: ../../topics/auth.txt:980
msgid ""
"``form``: A :class:`~django.forms.Form` object representing the login form. "
"See the :doc:`forms documentation </topics/forms/index>` for more on "
"``Form`` objects."
msgstr ""

# 79567ef6a6de44a881a8111d5caf8371
#: ../../topics/auth.txt:984
msgid ""
"``next``: The URL to redirect to after successful login. This may contain a "
"query string, too."
msgstr ""

# 733c4d2f8d8a401d95d201d41b6c2243
# f00e6f4420064c69a3acb92ad2913f97
#: ../../topics/auth.txt:987 ../../topics/auth.txt:1100
msgid ""
"``site``: The current :class:`~django.contrib.sites.models.Site`, according "
"to the :setting:`SITE_ID` setting. If you don't have the site framework "
"installed, this will be set to an instance of :class:`~django.contrib.sites."
"models.RequestSite`, which derives the site name and domain from the "
"current :class:`~django.http.HttpRequest`."
msgstr ""

# 33034c985ac0430d88df95181d0eb5a7
# 82634fc80ae047428351d9211a462105
# 72c4c6ccc1444084be314ad9382d8821
#: ../../topics/auth.txt:994 ../../topics/auth.txt:1107
#: ../../topics/auth.txt:1220
msgid ""
"``site_name``: An alias for ``site.name``. If you don't have the site "
"framework installed, this will be set to the value of :attr:`request.META"
"['SERVER_NAME'] <django.http.HttpRequest.META>`. For more on sites, see :doc:"
"`/ref/contrib/sites`."
msgstr ""

# a17c90ac6e5b44beaf9bed0cd2e0b549
#: ../../topics/auth.txt:999
msgid ""
"If you'd prefer not to call the template :file:`registration/login.html`, "
"you can pass the ``template_name`` parameter via the extra arguments to the "
"view in your URLconf. For example, this URLconf line would use :file:`myapp/"
"login.html` instead::"
msgstr ""

# 3248536caddf4a8b810550a7c4493418
#: ../../topics/auth.txt:1006
msgid ""
"You can also specify the name of the ``GET`` field which contains the URL to "
"redirect to after login by passing ``redirect_field_name`` to the view. By "
"default, the field is called ``next``."
msgstr ""

# ed2556b54d6b48908c082645c1df327d
#: ../../topics/auth.txt:1010
msgid ""
"Here's a sample :file:`registration/login.html` template you can use as a "
"starting point. It assumes you have a :file:`base.html` template that "
"defines a ``content`` block:"
msgstr ""

# 20c488a9e48f4477baca8371f93c3cbb
#: ../../topics/auth.txt:1046
msgid ""
"If you are using alternate authentication (see :ref:`authentication-"
"backends`) you can pass a custom authentication form to the login view via "
"the ``authentication_form`` parameter. This form must accept a ``request`` "
"keyword argument in its ``__init__`` method, and provide a ``get_user`` "
"method which returns the authenticated user object (this method is only ever "
"called after successful form validation)."
msgstr ""

# f3f077d731924c60a3f078541878afc4
#: ../../topics/auth.txt:1058
msgid ""
"The :func:`~views.login` view and the :ref:`other-built-in-views` now all "
"return a :class:`~django.template.response.TemplateResponse` instance, which "
"allows you to easily customize the response data before rendering. For more "
"details, see the :doc:`TemplateResponse documentation </ref/template-"
"response>`."
msgstr ""

# 8a31e4f26b894a4e974b88a0824a56e6
#: ../../topics/auth.txt:1067
msgid "Other built-in views"
msgstr ""

# c50bbc747cf04327b68bb1684f2b8f0e
#: ../../topics/auth.txt:1071
msgid ""
"In addition to the :func:`~views.login` view, the authentication system "
"includes a few other useful built-in views located in :mod:`django.contrib."
"auth.views`:"
msgstr ""

# 991fdfbfde5e4b6386c1b700b75a66aa
#: ../../topics/auth.txt:1077
msgid "Logs a user out."
msgstr ""

# b8342ecb1588413db0172b6f64f44cbb
#: ../../topics/auth.txt:1079
msgid "**URL name:** ``logout``"
msgstr ""

# 9a9d429d3b984b57a0da534b35eb273d
# 095333e59daf49f5b3d2b0365a31f5ca
# a0906ec10cea48ffbb1d32f99a0d2ca5
# 131425000d274a609ef02dc00a136172
# 643207fe784243338a02f930f5489273
# af69bf0b24fc434dba41cf1ff09ad9a0
# 4857016b2d544bb9abb87331573f61e7
# 537492b764104e5faa4cf41d4acf9b1f
# 87b06fad19794c4c944914e8705372fe
#: ../../topics/auth.txt:1084 ../../topics/auth.txt:1118
#: ../../topics/auth.txt:1129 ../../topics/auth.txt:1155
#: ../../topics/auth.txt:1178 ../../topics/auth.txt:1255
#: ../../topics/auth.txt:1267 ../../topics/auth.txt:1302
#: ../../topics/auth.txt:1321
msgid "**Optional arguments:**"
msgstr ""

# 24cc683d04064ff8a529bda5f87f3330
#: ../../topics/auth.txt:1086
msgid "``next_page``: The URL to redirect to after logout."
msgstr ""

# 862ce231880441f985ed3203aad3fac0
#: ../../topics/auth.txt:1088
msgid ""
"``template_name``: The full name of a template to display after logging the "
"user out. Defaults to :file:`registration/logged_out.html` if no argument is "
"supplied."
msgstr ""

# 43db1762ca9245a89f023fd80c78ce3c
#: ../../topics/auth.txt:1092
msgid ""
"``redirect_field_name``: The name of a ``GET`` field containing the URL to "
"redirect to after log out. Overrides ``next_page`` if the given ``GET`` "
"parameter is passed."
msgstr ""

# 48551a102fed47278aae7f8d85c32829
# 81783edf5b6e453782acd28f2b044bc9
# 8b80df6fe20840489936914b6fa3c9f9
# a3c14158df0a4f2781afc84b917ce5d6
#: ../../topics/auth.txt:1096 ../../topics/auth.txt:1145
#: ../../topics/auth.txt:1207 ../../topics/auth.txt:1287
msgid "**Template context:**"
msgstr ""

# 2475ba47ef354c7abf51b0b0e409b1b8
#: ../../topics/auth.txt:1098
msgid "``title``: The string \"Logged out\", localized."
msgstr ""

# 664ee79b08fe47bf9f4404ca057e93c7
#: ../../topics/auth.txt:1114
msgid "Logs a user out, then redirects to the login page."
msgstr ""

# 15b0807facb6445ab8c6ca13e2fbf78a
#: ../../topics/auth.txt:1116
msgid "**URL name:** No default URL provided"
msgstr ""

# 7fb53ba2629d4a1bb2d2f12a4c217081
# 08887e2535ba460293db65b94353f20a
#: ../../topics/auth.txt:1120 ../../topics/auth.txt:1323
msgid ""
"``login_url``: The URL of the login page to redirect to. Defaults to :"
"setting:`settings.LOGIN_URL <LOGIN_URL>` if not supplied."
msgstr ""

# 4c8208c9383b4226b5c0296077cf8c0e
#: ../../topics/auth.txt:1125
msgid "Allows a user to change their password."
msgstr ""

# ea8a1ec0458b40f4a1b1666cd23e506b
#: ../../topics/auth.txt:1127
msgid "**URL name:** ``password_change``"
msgstr ""

# cdd13732db0f40cf918fee6e63042723
#: ../../topics/auth.txt:1131
msgid ""
"``template_name``: The full name of a template to use for displaying the "
"password change form. Defaults to :file:`registration/password_change_form."
"html` if not supplied."
msgstr ""

# a7b018ea469a4d2ea7008d63d6f55826
#: ../../topics/auth.txt:1135
msgid ""
"``post_change_redirect``: The URL to redirect to after a successful password "
"change."
msgstr ""

# 80590777f8b54849b5f52aa32a0ec429
#: ../../topics/auth.txt:1140
msgid ""
"``password_change_form``: A custom \"change password\" form which must "
"accept a ``user`` keyword argument. The form is responsible for actually "
"changing the user's password. Defaults to :class:`~django.contrib.auth.forms."
"PasswordChangeForm`."
msgstr ""

# 6f3275989a884012b84bfc2a9b311c33
#: ../../topics/auth.txt:1147
msgid ""
"``form``: The password change form (see ``password_change_form`` above)."
msgstr ""

# 0cb2056a688d41029379e6c0941b74ac
#: ../../topics/auth.txt:1151
msgid "The page shown after a user has changed their password."
msgstr ""

# 891b2013c4c941f9b6c98cb293c34aa1
#: ../../topics/auth.txt:1153
msgid "**URL name:** ``password_change_done``"
msgstr ""

# e22f935db9c74306812eeb71d33db0cc
#: ../../topics/auth.txt:1157
msgid ""
"``template_name``: The full name of a template to use. Defaults to :file:"
"`registration/password_change_done.html` if not supplied."
msgstr ""

# 88a2fb65e6904114bb68e5dd8676d38c
#: ../../topics/auth.txt:1163
msgid ""
"Allows a user to reset their password by generating a one-time use link that "
"can be used to reset the password, and sending that link to the user's "
"registered email address."
msgstr ""

# c747bd3fbbc6439aa2764536a71531f4
#: ../../topics/auth.txt:1176
msgid "**URL name:** ``password_reset``"
msgstr ""

# affc1bc002dd4cacb29e9cc3d5967491
#: ../../topics/auth.txt:1180
msgid ""
"``template_name``: The full name of a template to use for displaying the "
"password reset form. Defaults to :file:`registration/password_reset_form."
"html` if not supplied."
msgstr ""

# 2673a7b0dd674f27a93997e549d7e486
#: ../../topics/auth.txt:1184
msgid ""
"``email_template_name``: The full name of a template to use for generating "
"the email with the new password. Defaults to :file:`registration/"
"password_reset_email.html` if not supplied."
msgstr ""

# 927d9edd5f6443a1977e6d17c4e944bf
#: ../../topics/auth.txt:1188
msgid ""
"``subject_template_name``: The full name of a template to use for the "
"subject of the email with the new password. Defaults to :file:`registration/"
"password_reset_subject.txt` if not supplied."
msgstr ""

# 199d00fb1d814b78b39e6bab2b46e960
#: ../../topics/auth.txt:1194
msgid ""
"``password_reset_form``: Form that will be used to set the password. "
"Defaults to :class:`~django.contrib.auth.forms.PasswordResetForm`."
msgstr ""

# d3e0da8b3e2b4a01867c20323256c264
# 7cfd786c76e344d1a7b59279c0d76455
#: ../../topics/auth.txt:1197 ../../topics/auth.txt:1277
msgid ""
"``token_generator``: Instance of the class to check the password. This will "
"default to ``default_token_generator``, it's an instance of ``django.contrib."
"auth.tokens.PasswordResetTokenGenerator``."
msgstr ""

# 52053d0567754df6a08a6aa5fb86973b
#: ../../topics/auth.txt:1201
msgid ""
"``post_reset_redirect``: The URL to redirect to after a successful password "
"change."
msgstr ""

# 228d03f690ce4d96aaf6ff2d2c6419e7
#: ../../topics/auth.txt:1204
msgid ""
"``from_email``: A valid email address. By default Django uses the :setting:"
"`DEFAULT_FROM_EMAIL`."
msgstr ""

# 502f686514d34238a479e915a930c6f1
#: ../../topics/auth.txt:1209
msgid ""
"``form``: The form (see ``password_reset_form`` above) for resetting the "
"user's password."
msgstr ""

# 7e0b4e3d7453404294ea29127b0ff795
#: ../../topics/auth.txt:1212
msgid "**Email template context:**"
msgstr ""

# 8f64b571442645bc869daa8aa55b10a9
#: ../../topics/auth.txt:1214
msgid "``email``: An alias for ``user.email``"
msgstr ""

# 5f5f0625b9db4181ba775e7c261bb5ec
#: ../../topics/auth.txt:1216
msgid ""
"``user``: The current :class:`~django.contrib.auth.models.User`, according "
"to the ``email`` form field. Only active users are able to reset their "
"passwords (``User.is_active is True``)."
msgstr ""

# 8ebbff58c590426288ed79ca92696cab
#: ../../topics/auth.txt:1225
msgid ""
"``domain``: An alias for ``site.domain``. If you don't have the site "
"framework installed, this will be set to the value of ``request.get_host()``."
msgstr ""

# 1ad9554676874c948ff6f21fc7f6099e
#: ../../topics/auth.txt:1229
msgid "``protocol``: http or https"
msgstr ""

# 1cfd347979a5417582c6116710cb05b6
#: ../../topics/auth.txt:1231
msgid "``uid``: The user's id encoded in base 36."
msgstr ""

# b61a3bb7a9c54559b8e0d105bd0e4618
#: ../../topics/auth.txt:1233
msgid "``token``: Token to check that the password is valid."
msgstr ""

# 7ca74543f5c947dba7dc9129bec7bd5b
#: ../../topics/auth.txt:1235
msgid ""
"Sample ``registration/password_reset_email.html`` (email body template):"
msgstr ""

# be65f1b1eb844e9ca43d9e441d1c0291
#: ../../topics/auth.txt:1243
msgid ""
"The same template context is used for subject template. Subject must be "
"single line plain text string."
msgstr ""

# 21a658a4177e4532b4b121afa81a8cb7
#: ../../topics/auth.txt:1249
msgid ""
"The page shown after a user has been emailed a link to reset their password. "
"This view is called by default if the :func:`password_reset` view doesn't "
"have an explicit ``post_reset_redirect`` URL set."
msgstr ""

# ce7ac792fad64d7ba9eee49d58eae1b2
#: ../../topics/auth.txt:1253
msgid "**URL name:** ``password_reset_done``"
msgstr ""

# 7b5c97a0be68410eac80939424def5a8
#: ../../topics/auth.txt:1257
msgid ""
"``template_name``: The full name of a template to use. Defaults to :file:"
"`registration/password_reset_done.html` if not supplied."
msgstr ""

# fd03cf6e8aec45bea4f6ca1f7f27f0c1
#: ../../topics/auth.txt:1263
msgid "Presents a form for entering a new password."
msgstr ""

# 7ef636441a7b400096570ec2c8990b0a
#: ../../topics/auth.txt:1265
msgid "**URL name:** ``password_reset_confirm``"
msgstr ""

# eed4cb8603ec4d0ba4bf4bc0b99b38e5
#: ../../topics/auth.txt:1269
msgid "``uidb36``: The user's id encoded in base 36. Defaults to ``None``."
msgstr ""

# 8753194f7a5842f2ae9e501909b96871
#: ../../topics/auth.txt:1271
msgid ""
"``token``: Token to check that the password is valid. Defaults to ``None``."
msgstr ""

# 6085ff248d984f6bb0b919399852f659
#: ../../topics/auth.txt:1274
msgid ""
"``template_name``: The full name of a template to display the confirm "
"password view. Default value is :file:`registration/password_reset_confirm."
"html`."
msgstr ""

# 182cd34cdc134fa8b35ee644c0ee45fc
#: ../../topics/auth.txt:1281
msgid ""
"``set_password_form``: Form that will be used to set the password. Defaults "
"to :class:`~django.contrib.auth.forms.SetPasswordForm`"
msgstr ""

# 692ce880df08414ba4d7b441add0ec49
#: ../../topics/auth.txt:1284
msgid ""
"``post_reset_redirect``: URL to redirect after the password reset done. "
"Defaults to ``None``."
msgstr ""

# b93443c1b5db4484944d76e76f425c3e
#: ../../topics/auth.txt:1289
msgid ""
"``form``: The form (see ``set_password_form`` above) for setting the new "
"user's password."
msgstr ""

# 1e930cf12cb84bf7bee5e5534424fe42
#: ../../topics/auth.txt:1292
msgid ""
"``validlink``: Boolean, True if the link (combination of uidb36 and token) "
"is valid or unused yet."
msgstr ""

# 5e801a746497400e81a268fb6caa1b90
#: ../../topics/auth.txt:1297
msgid ""
"Presents a view which informs the user that the password has been "
"successfully changed."
msgstr ""

# 2d56fece21b24b738fc7fda97350b28f
#: ../../topics/auth.txt:1300
msgid "**URL name:** ``password_reset_complete``"
msgstr ""

# 591a1cedf69142e49a169d6cdec613e1
#: ../../topics/auth.txt:1304
msgid ""
"``template_name``: The full name of a template to display the view. Defaults "
"to :file:`registration/password_reset_complete.html`."
msgstr ""

# 6b1ff8699a9f43c3aa865e78f374ba00
#: ../../topics/auth.txt:1308
msgid "Helper functions"
msgstr ""

# 8f57e7f8493e45be865b31d40f68efc0
#: ../../topics/auth.txt:1314
msgid ""
"Redirects to the login page, and then back to another URL after a successful "
"login."
msgstr ""

# e4161bd73be6437ca8bea8b389487e58
#: ../../topics/auth.txt:1317
msgid "**Required arguments:**"
msgstr ""

# f70b908277004997a045ec5a1133239d
#: ../../topics/auth.txt:1319
msgid "``next``: The URL to redirect to after a successful login."
msgstr ""

# 1bd1514cceaf4658bbed44323a34bcef
#: ../../topics/auth.txt:1326
msgid ""
"``redirect_field_name``: The name of a ``GET`` field containing the URL to "
"redirect to after log out. Overrides ``next`` if the given ``GET`` parameter "
"is passed."
msgstr ""

# ef3807c2b8684b728b4e0100d55e9d1a
#: ../../topics/auth.txt:1331
msgid "Built-in forms"
msgstr ""

# 455bbe3608bf4ea689737aa686a5cbaf
#: ../../topics/auth.txt:1335
msgid ""
"If you don't want to use the built-in views, but want the convenience of not "
"having to write forms for this functionality, the authentication system "
"provides several built-in forms located in :mod:`django.contrib.auth.forms`:"
msgstr ""

# 70413f43385f4636939504a4c1eab78f
#: ../../topics/auth.txt:1341
msgid "A form used in the admin interface to change a user's password."
msgstr ""

# f11991748d5b49a8908a351490a2799e
#: ../../topics/auth.txt:1345
msgid "A form for logging a user in."
msgstr ""

# 152346209e464cf391a87290f9a68933
#: ../../topics/auth.txt:1349
msgid "A form for allowing a user to change their password."
msgstr ""

# e8311011a60b4359b8e1643e08fdfd51
#: ../../topics/auth.txt:1353
msgid ""
"A form for generating and emailing a one-time use link to reset a user's "
"password."
msgstr ""

# 0e2066e1d54e43ce9589f1429bf54d78
#: ../../topics/auth.txt:1358
msgid ""
"A form that lets a user change his/her password without entering the old "
"password."
msgstr ""

# 55e2276999274c289c6f6e265c36a04d
#: ../../topics/auth.txt:1363
msgid ""
"A form used in the admin interface to change a user's information and "
"permissions."
msgstr ""

# b2ae47427db743979113b49fecae8029
#: ../../topics/auth.txt:1368
msgid "A form for creating a new user."
msgstr ""

# adec8bb202d44a09920ee326676628c6
#: ../../topics/auth.txt:1371
msgid "Limiting access to logged-in users that pass a test"
msgstr ""

# 55ff0c66754448e696605dfb135f63ca
#: ../../topics/auth.txt:1375
msgid ""
"To limit access based on certain permissions or some other test, you'd do "
"essentially the same thing as described in the previous section."
msgstr ""

# a0afe3de999c43e481da8eeb41c1ea59
#: ../../topics/auth.txt:1378
msgid ""
"The simple way is to run your test on :attr:`request.user <django.http."
"HttpRequest.user>` in the view directly. For example, this view checks to "
"make sure the user is logged in and has the permission ``polls.can_vote``::"
msgstr ""

# 37a805614338493da6f0c4b76580f251
#: ../../topics/auth.txt:1390
msgid ""
"As a shortcut, you can use the convenient ``user_passes_test`` decorator::"
msgstr ""

# 60e0f864ca2443bc848ab3dfa5b36154
#: ../../topics/auth.txt:1398
msgid ""
"We're using this particular test as a relatively simple example. However, if "
"you just want to test whether a permission is available to a user, you can "
"use the :func:`~django.contrib.auth.decorators.permission_required()` "
"decorator, described later in this document."
msgstr ""

# bb2b36adda9b474a8801a01500f3ad58
#: ../../topics/auth.txt:1403
msgid ""
":func:`~django.contrib.auth.decorators.user_passes_test` takes a required "
"argument: a callable that takes a :class:`~django.contrib.auth.models.User` "
"object and returns ``True`` if the user is allowed to view the page. Note "
"that :func:`~django.contrib.auth.decorators.user_passes_test` does not "
"automatically check that the :class:`~django.contrib.auth.models.User` is "
"not anonymous."
msgstr ""

# 4b16722ee3ea4a16bc13333e15db112f
#: ../../topics/auth.txt:1411
msgid ""
":func:`~django.contrib.auth.decorators.user_passes_test()` takes an optional "
"``login_url`` argument, which lets you specify the URL for your login page (:"
"setting:`settings.LOGIN_URL <LOGIN_URL>` by default)."
msgstr ""

# 4c1ab4db226f46cda9b7babf67accb9a
#: ../../topics/auth.txt:1415
msgid "For example::"
msgstr ""

# acf19eafc03947b8aaa68d81b996825e
#: ../../topics/auth.txt:1424
msgid "The permission_required decorator"
msgstr ""

# 2ee6a321b0e74f1e9fe2340606eef5f1
#: ../../topics/auth.txt:1428
msgid ""
"It's a relatively common task to check whether a user has a particular "
"permission. For that reason, Django provides a shortcut for that case: the :"
"func:`~django.contrib.auth.decorators.permission_required()` decorator. "
"Using this decorator, the earlier example can be written as::"
msgstr ""

# d691ec41c567429981a00e2f74d0c897
#: ../../topics/auth.txt:1439
msgid ""
"As for the :meth:`User.has_perm` method, permission names take the form ``"
"\"<app label>.<permission codename>\"`` (i.e. ``polls.can_vote`` for a "
"permission on a model in the ``polls`` application)."
msgstr ""

# c1cd71ff32cf49bc8e756a04c43b44dc
#: ../../topics/auth.txt:1443
msgid ""
"Note that :func:`~django.contrib.auth.decorators.permission_required()` also "
"takes an optional ``login_url`` parameter. Example::"
msgstr ""

# a34a7e64ebbe47a09053037e434fedf5
#: ../../topics/auth.txt:1452
msgid ""
"As in the :func:`~decorators.login_required` decorator, ``login_url`` "
"defaults to :setting:`settings.LOGIN_URL <LOGIN_URL>`."
msgstr ""

# 4299214a2ffc4930abee9cea2632bf06
#: ../../topics/auth.txt:1457
msgid ""
"Added ``raise_exception`` parameter. If given, the decorator will raise :exc:"
"`~django.core.exceptions.PermissionDenied`, prompting :ref:`the 403 (HTTP "
"Forbidden) view<http_forbidden_view>` instead of redirecting to the login "
"page."
msgstr ""

# d361fa6d434b4535928c6aa6a25e7a19
#: ../../topics/auth.txt:1465
msgid "Limiting access to generic views"
msgstr ""

# 440337675e9f45198facdea78379e518
#: ../../topics/auth.txt:1467
msgid ""
"To limit access to a :doc:`class-based generic view </ref/class-based-"
"views>`, decorate the :meth:`View.dispatch <django.views.generic.base.View."
"dispatch>` method on the class. See :ref:`decorating-class-based-views` for "
"details."
msgstr ""

# 96d63badb8ac4f5fadb589e018d424f2
#: ../../topics/auth.txt:1472
msgid "Function-based generic views"
msgstr ""

# eb7ed31a05f347ceacdc2d33b8db9a6d
#: ../../topics/auth.txt:1474
msgid ""
"To limit access to a :doc:`function-based generic view </ref/generic-"
"views>`, write a thin wrapper around the view, and point your URLconf to "
"your wrapper instead of the generic view itself. For example::"
msgstr ""

# d2acb1e43ff64e3982716ee41bc2cd86
# 805df27b652742ee89dde0694d95e461
#: ../../topics/auth.txt:1487 ../../topics/auth.txt:1654
msgid "Permissions"
msgstr "Права пользователя"

# f9f78b567b8f492490e696108bf8034f
#: ../../topics/auth.txt:1489
msgid ""
"Django comes with a simple permissions system. It provides a way to assign "
"permissions to specific users and groups of users."
msgstr ""

# bb24b879ee054d10910e2da0bb1b0322
#: ../../topics/auth.txt:1492
msgid ""
"It's used by the Django admin site, but you're welcome to use it in your own "
"code."
msgstr ""

# 5572709f941f4b9699e6102051479c9e
#: ../../topics/auth.txt:1495
msgid "The Django admin site uses permissions as follows:"
msgstr ""

# b5c606d62eea4a5c84c786ab0c506e8b
#: ../../topics/auth.txt:1497
msgid ""
"Access to view the \"add\" form and add an object is limited to users with "
"the \"add\" permission for that type of object."
msgstr ""

# e93fdcd9fb7d432e8620d36bb24a025a
#: ../../topics/auth.txt:1499
msgid ""
"Access to view the change list, view the \"change\" form and change an "
"object is limited to users with the \"change\" permission for that type of "
"object."
msgstr ""

# 7ce265a6a0dd4c96ad3f1b93b92ba1fa
#: ../../topics/auth.txt:1502
msgid ""
"Access to delete an object is limited to users with the \"delete\" "
"permission for that type of object."
msgstr ""

# a4cc8ca2adc44086a688324ef6d2ce34
#: ../../topics/auth.txt:1505
msgid ""
"Permissions are set globally per type of object, not per specific object "
"instance. For example, it's possible to say \"Mary may change news stories,"
"\" but it's not currently possible to say \"Mary may change news stories, "
"but only the ones she created herself\" or \"Mary may only change news "
"stories that have a certain status, publication date or ID.\" The latter "
"functionality is something Django developers are currently discussing."
msgstr ""

# 8c4124f87e4e4c61be3e35ec571b2a44
#: ../../topics/auth.txt:1513
msgid "Default permissions"
msgstr ""

# 29a6fde41eb843c3b9d28f717bc09b80
#: ../../topics/auth.txt:1515
msgid ""
"When ``django.contrib.auth`` is listed in your :setting:`INSTALLED_APPS` "
"setting, it will ensure that three default permissions -- add, change and "
"delete -- are created for each Django model defined in one of your installed "
"applications."
msgstr ""

# 1d4ef4f8bb7b4cf28a534743311f5798
#: ../../topics/auth.txt:1520
msgid ""
"These permissions will be created when you run :djadmin:`manage.py syncdb "
"<syncdb>`; the first time you run ``syncdb`` after adding ``django.contrib."
"auth`` to :setting:`INSTALLED_APPS`, the default permissions will be created "
"for all previously-installed models, as well as for any new models being "
"installed at that time. Afterward, it will create default permissions for "
"new models each time you run :djadmin:`manage.py syncdb <syncdb>`."
msgstr ""

# c2724690f6be46fa8426209d5dfd6c5f
#: ../../topics/auth.txt:1528
msgid ""
"Assuming you have an application with an :attr:`~django.db.models.Options."
"app_label` ``foo`` and a model named ``Bar``, to test for basic permissions "
"you should use:"
msgstr ""

# aabd42d87a7c4320adb78312ad6f545a
#: ../../topics/auth.txt:1532
msgid "add: ``user.has_perm('foo.add_bar')``"
msgstr ""

# 68082c31f55249158af7acec685f74e8
#: ../../topics/auth.txt:1533
msgid "change: ``user.has_perm('foo.change_bar')``"
msgstr ""

# aa1c8383b02940cd8c02146efd4aaff4
#: ../../topics/auth.txt:1534
msgid "delete: ``user.has_perm('foo.delete_bar')``"
msgstr ""

# 5b3d4997b80d4c26bb585b4d1fd754a6
#: ../../topics/auth.txt:1539
msgid "Custom permissions"
msgstr ""

# 261ee1646b9d46b2b1e597f4579bcd1d
#: ../../topics/auth.txt:1541
msgid ""
"To create custom permissions for a given model object, use the "
"``permissions`` :ref:`model Meta attribute <meta-options>`."
msgstr ""

# 7a291f86da514f38be0c01fac06bf008
#: ../../topics/auth.txt:1544
msgid ""
"This example Task model creates three custom permissions, i.e., actions "
"users can or cannot do with Task instances, specific to your application::"
msgstr ""

# d9ac431c1b6d405ca921deed89311d24
#: ../../topics/auth.txt:1556
msgid ""
"The only thing this does is create those extra permissions when you run :"
"djadmin:`manage.py syncdb <syncdb>`. Your code is in charge of checking the "
"value of these permissions when an user is trying to access the "
"functionality provided by the application (viewing tasks, changing the "
"status of tasks, closing tasks.) Continuing the above example, the following "
"checks if a user may view tasks::"
msgstr ""

# fb56fd72153f4331b30de0dec5805156
#: ../../topics/auth.txt:1575
msgid ""
":class:`~django.contrib.auth.models.Permission` objects have the following "
"fields:"
msgstr ""

# 38eff44c3b0e4d5eaaa7d551e22ba63c
#: ../../topics/auth.txt:1580
msgid "Required. 50 characters or fewer. Example: ``'Can vote'``."
msgstr ""

# b5e75a3ad6704b60a919659767ecff9c
#: ../../topics/auth.txt:1584
msgid ""
"Required. A reference to the ``django_content_type`` database table, which "
"contains a record for each installed Django model."
msgstr ""

# fec4bdf047fd4a4884d268ea768e8d7d
#: ../../topics/auth.txt:1589
msgid "Required. 100 characters or fewer. Example: ``'can_vote'``."
msgstr ""

# b40ff78a62b64d05b0ff5c34b6acc4eb
#: ../../topics/auth.txt:1594
msgid ""
":class:`~django.contrib.auth.models.Permission` objects have the standard "
"data-access methods like any other :doc:`Django model </ref/models/"
"instances>`."
msgstr ""

# 88442f3c7e8b451b89be60d3f3ab33c2
#: ../../topics/auth.txt:1600
msgid "Programmatically creating permissions"
msgstr ""

# 041ff2f7df104c06b44a3d3fd360d6d1
#: ../../topics/auth.txt:1602
msgid ""
"While custom permissions can be defined within a model's ``Meta`` class, you "
"can also create permissions directly. For example, you can create the "
"``can_publish`` permission for a ``BlogPost`` model in ``myapp``::"
msgstr ""

# a0f87185e70a4a65abad5041b9669a1a
#: ../../topics/auth.txt:1614
msgid ""
"The permission can then be assigned to a :class:`~django.contrib.auth.models."
"User` via its ``user_permissions`` attribute or to a :class:`~django.contrib."
"auth.models.Group` via its ``permissions`` attribute."
msgstr ""

# e9cb40ac797b484789a9359a8914326d
#: ../../topics/auth.txt:1620
msgid "Authentication data in templates"
msgstr ""

# 845506ab6fff4946aad3546e5998734d
#: ../../topics/auth.txt:1622
msgid ""
"The currently logged-in user and his/her permissions are made available in "
"the :doc:`template context </ref/templates/api>` when you use :class:"
"`~django.template.context.RequestContext`."
msgstr ""

# 2e2dcc47642242d78d07c3ac463e8d42
#: ../../topics/auth.txt:1628
msgid ""
"Technically, these variables are only made available in the template context "
"if you use :class:`~django.template.context.RequestContext` *and* your :"
"setting:`TEMPLATE_CONTEXT_PROCESSORS` setting contains ``\"django.contrib."
"auth.context_processors.auth\"``, which is default. For more, see the :ref:"
"`RequestContext docs <subclassing-context-requestcontext>`."
msgstr ""

# 2ae3813149984aa1934a32e7d9b1e446
#: ../../topics/auth.txt:1637
msgid ""
"When rendering a template :class:`~django.template.context.RequestContext`, "
"the currently logged-in user, either a  :class:`~django.contrib.auth.models."
"User` instance or an :class:`~django.contrib.auth.models.AnonymousUser` "
"instance, is stored in the template variable ``{{ user }}``:"
msgstr ""

# 064f130597ea43cdbbadec0a38de62d4
#: ../../topics/auth.txt:1650
msgid ""
"This template context variable is not available if a ``RequestContext`` is "
"not being used."
msgstr ""

# 2da682427c9547a99d300da276c98b18
#: ../../topics/auth.txt:1656
msgid ""
"The currently logged-in user's permissions are stored in the template "
"variable ``{{ perms }}``. This is an instance of :class:`django.contrib.auth."
"context_processors.PermWrapper`, which is a template-friendly proxy of "
"permissions."
msgstr ""

# 99cf6348e1bb43ad9d8ef3b69a43ef7c
#: ../../topics/auth.txt:1665
msgid ""
"In the ``{{ perms }}`` object, single-attribute lookup is a proxy to :meth:"
"`User.has_module_perms <django.contrib.auth.models.User.has_module_perms>`. "
"This example would display ``True`` if the logged-in user had any "
"permissions in the ``foo`` app::"
msgstr ""

# 68c5591c74ed43b2aa896bbc0198551e
#: ../../topics/auth.txt:1672
msgid ""
"Two-level-attribute lookup is a proxy to :meth:`User.has_perm <django."
"contrib.auth.models.User.has_perm>`. This example would display ``True`` if "
"the logged-in user had the permission ``foo.can_vote``::"
msgstr ""

# 0cf034403f9945f3bb7cb9f7ca0786b4
#: ../../topics/auth.txt:1679
msgid "Thus, you can check permissions in template ``{% if %}`` statements:"
msgstr ""

# a113ab3b3335424ca0e1b0ccb9c8d4bc
#: ../../topics/auth.txt:1696
msgid "Groups"
msgstr ""

# e9edf7117b304fc6bc1330fac49c6ab8
#: ../../topics/auth.txt:1698
msgid ""
"Groups are a generic way of categorizing users so you can apply permissions, "
"or some other label, to those users. A user can belong to any number of "
"groups."
msgstr ""

# ffd0f4e8eac14fcbb470deb92cd75781
#: ../../topics/auth.txt:1701
msgid ""
"A user in a group automatically has the permissions granted to that group. "
"For example, if the group ``Site editors`` has the permission "
"``can_edit_home_page``, any user in that group will have that permission."
msgstr ""

# de5430f848b74d63b684c3874b866607
#: ../../topics/auth.txt:1705
msgid ""
"Beyond permissions, groups are a convenient way to categorize users to give "
"them some label, or extended functionality. For example, you could create a "
"group ``'Special users'``, and you could write code that could, say, give "
"them access to a members-only portion of your site, or send them members-"
"only email messages."
msgstr ""

# b9d1ac7d06844364922d5d91d5a8bd1f
#: ../../topics/auth.txt:1719
msgid ""
":class:`~django.contrib.auth.models.Group` objects have the following fields:"
msgstr ""

# d24da73d4c7a4f08abb10cf41d66e5dd
#: ../../topics/auth.txt:1723
msgid ""
"Required. 80 characters or fewer. Any characters are permitted. Example: "
"``'Awesome Users'``."
msgstr ""

# 8609b2a63cdc4fc9b7f6019710a1d42a
#: ../../topics/auth.txt:1728
msgid ""
"Many-to-many field to :class:`~django.contrib.auth.models.Permissions`::"
msgstr ""

# 72f1b54d406942a38ad7277094e6918b
#: ../../topics/auth.txt:1738
msgid "Other authentication sources"
msgstr ""

# 6b2af997f3944fbb8cd9aae6ee8a719e
#: ../../topics/auth.txt:1740
msgid ""
"The authentication that comes with Django is good enough for most common "
"cases, but you may have the need to hook into another authentication source "
"-- that is, another source of usernames and passwords or authentication "
"methods."
msgstr ""

# d64fa4c7c73b47b3b3c29aef4437f4d0
#: ../../topics/auth.txt:1744
msgid ""
"For example, your company may already have an LDAP setup that stores a "
"username and password for every employee. It'd be a hassle for both the "
"network administrator and the users themselves if users had separate "
"accounts in LDAP and the Django-based applications."
msgstr ""

# 4da442e0a4b54f32a306297129ed3cf5
#: ../../topics/auth.txt:1749
msgid ""
"So, to handle situations like this, the Django authentication system lets "
"you plug in other authentication sources. You can override Django's default "
"database-based scheme, or you can use the default system in tandem with "
"other systems."
msgstr ""

# 805e24c306fc416eae2f6bef01f5696a
#: ../../topics/auth.txt:1754
msgid ""
"See the :doc:`authentication backend reference </ref/authbackends>` for "
"information on the authentication backends included with Django."
msgstr ""

# 71cd4595de6e425b83d41dfeaad3434e
#: ../../topics/auth.txt:1758
msgid "Specifying authentication backends"
msgstr ""

# 2b049d14c7b04e488aa000d09b50e78b
#: ../../topics/auth.txt:1760
msgid ""
"Behind the scenes, Django maintains a list of \"authentication backends\" "
"that it checks for authentication. When somebody calls :func:`django.contrib."
"auth.authenticate()` -- as described in :ref:`How to log a user in <how-to-"
"log-a-user-in>` above -- Django tries authenticating across all of its "
"authentication backends. If the first authentication method fails, Django "
"tries the second one, and so on, until all backends have been attempted."
msgstr ""

# 7701bd21d2ed4f7c95afee017de19a5b
#: ../../topics/auth.txt:1767
msgid ""
"The list of authentication backends to use is specified in the :setting:"
"`AUTHENTICATION_BACKENDS` setting. This should be a tuple of Python path "
"names that point to Python classes that know how to authenticate. These "
"classes can be anywhere on your Python path."
msgstr ""

# 95147db3ea7e4d559336c6e9372ff047
#: ../../topics/auth.txt:1772
msgid "By default, :setting:`AUTHENTICATION_BACKENDS` is set to::"
msgstr ""

# b799bf61495549e5a9ca729a0ebd6208
#: ../../topics/auth.txt:1776
msgid ""
"That's the basic authentication scheme that checks the Django users database."
msgstr ""

# b2cf9e58850f45229056b176d6f349dc
#: ../../topics/auth.txt:1778
msgid ""
"The order of :setting:`AUTHENTICATION_BACKENDS` matters, so if the same "
"username and password is valid in multiple backends, Django will stop "
"processing at the first positive match."
msgstr ""

# f04edcda80e54ce99a2b0576378a9cc6
#: ../../topics/auth.txt:1784
msgid ""
"Once a user has authenticated, Django stores which backend was used to "
"authenticate the user in the user's session, and re-uses the same backend "
"for the duration of that session whenever access to the currently "
"authenticated user is needed. This effectively means that authentication "
"sources are cached on a per-session basis, so if you change :setting:"
"`AUTHENTICATION_BACKENDS`, you'll need to clear out session data if you need "
"to force users to re-authenticate using different methods. A simple way to "
"do that is simply to execute ``Session.objects.all().delete()``."
msgstr ""

# acd5bed84925403db327e74d71e015c5
#: ../../topics/auth.txt:1794
msgid "Writing an authentication backend"
msgstr ""

# 357f69af155044c0a7b5c5a006f07078
#: ../../topics/auth.txt:1796
msgid ""
"An authentication backend is a class that implements two methods: ``get_user"
"(user_id)`` and ``authenticate(**credentials)``."
msgstr ""

# 0224a7446e6f4ccb86d6d5539c98ef29
#: ../../topics/auth.txt:1799
msgid ""
"The ``get_user`` method takes a ``user_id`` -- which could be a username, "
"database ID or whatever -- and returns a ``User`` object."
msgstr ""

# 74f60c5a2a724d79be98fdb3a3ac328a
#: ../../topics/auth.txt:1802
msgid ""
"The ``authenticate`` method takes credentials as keyword arguments. Most of "
"the time, it'll just look like this::"
msgstr ""

# 5b1f161c802c4a78aab3b5294a9d4311
#: ../../topics/auth.txt:1809
msgid "But it could also authenticate a token, like so::"
msgstr ""

# 81a4a2307339406a8a40e76b217e3069
#: ../../topics/auth.txt:1815
msgid ""
"Either way, ``authenticate`` should check the credentials it gets, and it "
"should return a ``User`` object that matches those credentials, if the "
"credentials are valid. If they're not valid, it should return ``None``."
msgstr ""

# eba762f0373e4bc3876c24cbba2c4366
#: ../../topics/auth.txt:1819
msgid ""
"The Django admin system is tightly coupled to the Django ``User`` object "
"described at the beginning of this document. For now, the best way to deal "
"with this is to create a Django ``User`` object for each user that exists "
"for your backend (e.g., in your LDAP directory, your external SQL database, "
"etc.) You can either write a script to do this in advance, or your "
"``authenticate`` method can do it the first time a user logs in."
msgstr ""

# 506108e9c6264d6fbe792fece3c45d5f
#: ../../topics/auth.txt:1826
msgid ""
"Here's an example backend that authenticates against a username and password "
"variable defined in your ``settings.py`` file and creates a Django ``User`` "
"object the first time a user authenticates::"
msgstr ""

# 04a1697c21f44714bc7b31d9c689985d
#: ../../topics/auth.txt:1869
msgid "Handling authorization in custom backends"
msgstr ""

# 03479d0000e94fd28d92d9799acb9b72
#: ../../topics/auth.txt:1871
msgid "Custom auth backends can provide their own permissions."
msgstr ""

# 415426cb6138451789a3b4961848b8a7
#: ../../topics/auth.txt:1873
msgid ""
"The user model will delegate permission lookup functions (:meth:`~django."
"contrib.auth.models.User.get_group_permissions()`, :meth:`~django.contrib."
"auth.models.User.get_all_permissions()`, :meth:`~django.contrib.auth.models."
"User.has_perm()`, and :meth:`~django.contrib.auth.models.User."
"has_module_perms()`) to any authentication backend that implements these "
"functions."
msgstr ""

# c16f8803ea9b437da866550adeff483b
#: ../../topics/auth.txt:1880
msgid ""
"The permissions given to the user will be the superset of all permissions "
"returned by all backends. That is, Django grants a permission to a user that "
"any one backend grants."
msgstr ""

# 81a60771507c4868b8206051e4a6335b
#: ../../topics/auth.txt:1884
msgid ""
"The simple backend above could implement permissions for the magic admin "
"fairly simply::"
msgstr ""

# ab0cecfc0baa4cb995e304969db64538
#: ../../topics/auth.txt:1897
msgid ""
"This gives full permissions to the user granted access in the above example. "
"Notice that the backend auth functions all take the user object as an "
"argument, and they also accept the same arguments given to the associated :"
"class:`django.contrib.auth.models.User` functions."
msgstr ""

# 821fb7d5af024c2a9e8e445fd84d8fa7
#: ../../topics/auth.txt:1902
msgid ""
"A full authorization implementation can be found in `django/contrib/auth/"
"backends.py`_, which is the default backend and queries the "
"``auth_permission`` table most of the time."
msgstr ""

# 456d20813cf1444f89cd0676f54a731d
#: ../../topics/auth.txt:1911
msgid "Authorization for anonymous users"
msgstr ""

# 19ec746ecf734d8f8a394b52d07a32d1
#: ../../topics/auth.txt:1915
msgid ""
"An anonymous user is one that is not authenticated i.e. they have provided "
"no valid authentication details. However, that does not necessarily mean "
"they are not authorized to do anything. At the most basic level, most Web "
"sites authorize anonymous users to browse most of the site, and many allow "
"anonymous posting of comments etc."
msgstr ""

# 258c0fd7e0bf491f9ab5769f0d80929e
#: ../../topics/auth.txt:1921
msgid ""
"Django's permission framework does not have a place to store permissions for "
"anonymous users. However, it has a foundation that allows custom "
"authentication backends to specify authorization for anonymous users. This "
"is especially useful for the authors of re-usable apps, who can delegate all "
"questions of authorization to the auth backend, rather than needing "
"settings, for example, to control anonymous access."
msgstr ""

# 3c69addef1e44781bbd998569628eb46
#: ../../topics/auth.txt:1930
msgid "Authorization for inactive users"
msgstr ""

# 1bbbf5888154464482df91e24bd504b2
#: ../../topics/auth.txt:1934
msgid ""
"An inactive user is a one that is authenticated but has its attribute "
"``is_active`` set to ``False``. However this does not mean they are not "
"authorized to do anything. For example they are allowed to activate their "
"account."
msgstr ""

# bef9dbcb9db44eada77737c2028f80ec
#: ../../topics/auth.txt:1939
msgid ""
"The support for anonymous users in the permission system allows for "
"anonymous users to have permissions to do something while inactive "
"authenticated users do not."
msgstr ""

# 6b2481de31c64863b3c230a79b1a4d5a
#: ../../topics/auth.txt:1943
msgid ""
"To enable this on your own backend, you must set the class attribute "
"``supports_inactive_user`` to ``True``."
msgstr ""

# 743005df04ba4f609862efcee7453b21
#: ../../topics/auth.txt:1946
msgid ""
"A nonexisting ``supports_inactive_user`` attribute will raise a "
"``PendingDeprecationWarning`` if used in Django 1.3. In Django 1.4, this "
"warning will be updated to a ``DeprecationWarning`` which will be displayed "
"loudly. Additionally ``supports_inactive_user`` will be set to ``False``. "
"Django 1.5 will assume that every backend supports inactive users being "
"passed to the authorization methods."
msgstr ""

# 2662ad175cca47438fcbede54e559e75
#: ../../topics/auth.txt:1955
msgid "Handling object permissions"
msgstr ""

# a02d4419135841d5b405a50f331fb307
#: ../../topics/auth.txt:1957
msgid ""
"Django's permission framework has a foundation for object permissions, "
"though there is no implementation for it in the core. That means that "
"checking for object permissions will always return ``False`` or an empty "
"list (depending on the check performed)."
msgstr ""
