# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2012.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-02-27 00:21\n"
"PO-Revision-Date: 2012-02-15 15:13\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# 2119d215985745c189deaa3623b3bd45
#: ../../faq/models.txt:2
msgid "FAQ: Databases and models"
msgstr ""

# c0f4a14605474dc29d1e20bcc51729c4
#: ../../faq/models.txt:7
msgid "How can I see the raw SQL queries Django is running?"
msgstr ""

# dd920bdb562e42bdb64918557e0adadf
#: ../../faq/models.txt:9
msgid ""
"Make sure your Django :setting:`DEBUG` setting is set to ``True``. Then, "
"just do this::"
msgstr ""

# 2c566b1f029c49ff842003f3e2b346cd
#: ../../faq/models.txt:17
msgid ""
"``connection.queries`` is only available if :setting:`DEBUG` is ``True``. "
"It's a list of dictionaries in order of query execution. Each dictionary has "
"the following::"
msgstr ""

# f9598dd632ea454c84601ace02914c2f
#: ../../faq/models.txt:24
msgid ""
"``connection.queries`` includes all SQL statements -- INSERTs, UPDATES, "
"SELECTs, etc. Each time your app hits the database, the query will be "
"recorded. Note that the SQL recorded here may be :ref:`incorrectly quoted "
"under SQLite <sqlite-connection-queries>`."
msgstr ""

# 61858228d8414525ab0dbd9069cd9e9f
#: ../../faq/models.txt:29
msgid ""
"If you are using :doc:`multiple databases</topics/db/multi-db>`, you can use "
"the same interface on each member of the ``connections`` dictionary::"
msgstr ""

# 1c4c2f1bda214b7183865e06222c69c4
#: ../../faq/models.txt:36
msgid "Can I use Django with a pre-existing database?"
msgstr ""

# 2bb7e14cafe14baa9abdbeab14b8d49e
#: ../../faq/models.txt:38
msgid ""
"Yes. See :doc:`Integrating with a legacy database </howto/legacy-databases>`."
msgstr ""

# 037a108a81034be8a74c6797a036ec51
#: ../../faq/models.txt:41
msgid "If I make changes to a model, how do I update the database?"
msgstr ""

# 35ad4c90c6914c64940b56db7a7a04f6
#: ../../faq/models.txt:43
msgid ""
"If you don't mind clearing data, your project's ``manage.py`` utility has a :"
"djadmin:`flush` option to reset the database to the state it was in "
"immediately after :djadmin:`syncdb` was executed."
msgstr ""

# 453daf5ca21d4ca4b641997a40a2a659
#: ../../faq/models.txt:47
msgid ""
"If you do care about deleting data, you'll have to execute the ``ALTER "
"TABLE`` statements manually in your database."
msgstr ""

# 9fa2dc3ec898417a95222497582f89b2
#: ../../faq/models.txt:50
msgid ""
"There are `external projects which handle schema updates <http://www."
"djangopackages.com/grids/g/database-migration/>`_, of which the current "
"defacto standard is `south <http://south.aeracode.org/>`_."
msgstr ""

# ea60fd8616614ed5a6932b8f96a7b722
#: ../../faq/models.txt:55
msgid "Do Django models support multiple-column primary keys?"
msgstr ""

# 9a1a44da804547a28ec723208b4ffa65
#: ../../faq/models.txt:57
msgid "No. Only single-column primary keys are supported."
msgstr ""

# d2872646657e44eca6085f2e3c54c5e3
#: ../../faq/models.txt:59
msgid ""
"But this isn't an issue in practice, because there's nothing stopping you "
"from adding other constraints (using the ``unique_together`` model option or "
"creating the constraint directly in your database), and enforcing the "
"uniqueness at that level. Single-column primary keys are needed for things "
"such as the admin interface to work; e.g., you need a simple way of being "
"able to specify an object to edit or delete."
msgstr ""

# 46cc68dccb5545fcaf3bce7385fd4b72
#: ../../faq/models.txt:67
msgid ""
"How do I add database-specific options to my CREATE TABLE statements, such "
"as specifying MyISAM as the table type?"
msgstr ""

# 1a7ed82030bd4e80bbce965299e04378
#: ../../faq/models.txt:69
msgid ""
"We try to avoid adding special cases in the Django code to accommodate all "
"the database-specific options such as table type, etc. If you'd like to use "
"any of these options, create an :ref:`SQL initial data file <initial-sql>` "
"that contains ``ALTER TABLE`` statements that do what you want to do. The "
"initial data files are executed in your database after the ``CREATE TABLE`` "
"statements."
msgstr ""

# fcff7349d57046d48ac31e62eada39ad
#: ../../faq/models.txt:75
msgid ""
"For example, if you're using MySQL and want your tables to use the MyISAM "
"table type, create an initial data file and put something like this in it::"
msgstr ""

# 5e5b297a23bc4179ae89e0a1e484baa8
#: ../../faq/models.txt:80
msgid ""
"As explained in the :ref:`SQL initial data file <initial-sql>` "
"documentation, this SQL file can contain arbitrary SQL, so you can make any "
"sorts of changes you need to make."
msgstr ""

# d27e7ee8cecd41be954aa7d198de44d0
#: ../../faq/models.txt:85
msgid "Why is Django leaking memory?"
msgstr ""

# 302d8cad18d3407bb69d365d31711cfa
#: ../../faq/models.txt:87
msgid ""
"Django isn't known to leak memory. If you find your Django processes are "
"allocating more and more memory, with no sign of releasing it, check to make "
"sure your :setting:`DEBUG` setting is set to ``False``. If :setting:`DEBUG` "
"is ``True``, then Django saves a copy of every SQL statement it has executed."
msgstr ""

# 262a382773604d25b6a5fcdad28c4891
#: ../../faq/models.txt:92
msgid ""
"(The queries are saved in ``django.db.connection.queries``. See `How can I "
"see the raw SQL queries Django is running?`_.)"
msgstr ""

# aca95bdf7b4e44aaa8517e1f11c29c6a
#: ../../faq/models.txt:95
msgid "To fix the problem, set :setting:`DEBUG` to ``False``."
msgstr ""

# 702f894a142a43ab8f0a44c5502b9dd7
#: ../../faq/models.txt:97
msgid ""
"If you need to clear the query list manually at any point in your functions, "
"just call ``reset_queries()``, like this::"
msgstr ""
