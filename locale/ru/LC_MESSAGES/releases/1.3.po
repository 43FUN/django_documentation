# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2012.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-02-29 18:30\n"
"PO-Revision-Date: 2012-02-15 15:13\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# 7c8f44775a4f437d815ceadf7aa12a56
#: ../../releases/1.3.txt:3
msgid "Django 1.3 release notes"
msgstr ""

# 996d4dcd6a794c249c0e2e67cc881986
#: ../../releases/1.3.txt:5
msgid "*March 23, 2011*"
msgstr ""

# b6fe03165f5e4ebe8150d5f981fe4ecb
#: ../../releases/1.3.txt:7
msgid "Welcome to Django 1.3!"
msgstr ""

# 4d4c082f489d44af87e33fd06a63627c
#: ../../releases/1.3.txt:9
msgid ""
"Nearly a year in the making, Django 1.3 includes quite a few `new features`_ "
"and plenty of bug fixes and improvements to existing features. These release "
"notes cover the new features in 1.3, as well as some `backwards-incompatible "
"changes`_ you'll want to be aware of when upgrading from Django 1.2 or older "
"versions."
msgstr ""

# 16e082f0fdcb4436abc1dda47af4db6b
#: ../../releases/1.3.txt:16
msgid "Overview"
msgstr ""

# d49eec2cfc754e24809dafb913909ab1
#: ../../releases/1.3.txt:18
msgid ""
"Django 1.3's focus has mostly been on resolving smaller, long-standing "
"feature requests, but that hasn't prevented a few fairly significant new "
"features from landing, including:"
msgstr ""

# 40982e894d3b4c49869032cf8660dc76
#: ../../releases/1.3.txt:22
msgid "A framework for writing `class-based views`_."
msgstr ""

# deeb17322016448bbbdbffa4c5f99ea3
#: ../../releases/1.3.txt:24
msgid "Built-in support for `using Python's logging facilities`_."
msgstr ""

# 68f0287c9d5f495abd1f01bcff19b9ec
#: ../../releases/1.3.txt:26
msgid "Contrib support for `easy handling of static files`_."
msgstr ""

# 1a7f968b4d3d44debab0f7cc5b25dd66
#: ../../releases/1.3.txt:28
msgid ""
"Django's testing framework now supports (and ships with a copy of) `the "
"unittest2 library`_."
msgstr ""

# 6951ba39e38d40d998e3f210e062788c
#: ../../releases/1.3.txt:31
msgid ""
"There's plenty more, of course; see the coverage of `new features`_ below "
"for a full rundown and details."
msgstr ""

# dc48ec3866d24877a85a8937c024a27c
#: ../../releases/1.3.txt:34
msgid ""
"Wherever possible, of course, new features are introduced in a backwards-"
"compatible manner per :doc:`our API stability policy </misc/api-stability>` "
"policy. As a result of this policy, Django 1.3 `begins the deprecation "
"process for some features`_."
msgstr ""

# b6c232a3198b4270a7fd284c4a305363
#: ../../releases/1.3.txt:39
msgid ""
"Some changes, unfortunately, are genuinely backwards-incompatible; in most "
"cases these are due to security issues or bugs which simply couldn't be "
"fixed any other way. Django 1.3 includes a few of these, and descriptions of "
"them -- along with the (minor) modifications you'll need to make to handle "
"them -- are documented in the list of `backwards-incompatible changes`_ "
"below."
msgstr ""

# 83a1b9cc237a471cacd21878a15f5444
#: ../../releases/1.3.txt:54
msgid "Python compatibility"
msgstr ""

# 13c98535f68646c59ad01cce33804493
#: ../../releases/1.3.txt:56
msgid ""
"The release of Django 1.2 was notable for having the first shift in Django's "
"Python compatibility policy; prior to Django 1.2, Django supported any 2.x "
"version of Python from 2.3 up. As of Django 1.2, the minimum requirement was "
"raised to Python 2.4."
msgstr ""

# e808f4938b5447d7a2d10eb232ce706d
#: ../../releases/1.3.txt:61
msgid ""
"Django 1.3 continues to support Python 2.4, but will be the final Django "
"release series to do so; beginning with Django 1.4, the minimum supported "
"Python version will be 2.5. A document outlining our full timeline for "
"deprecating Python 2.x and moving to Python 3.x will be published shortly "
"after the release of Django 1.3."
msgstr ""

# b1ad4a0a5a9d492aa07167164119d44e
#: ../../releases/1.3.txt:68
msgid "What's new in Django 1.3"
msgstr ""

# 3f7e48720f644f6aaee2e941551bb57f
#: ../../releases/1.3.txt:71
msgid "Class-based views"
msgstr ""

# a6bd8eacfb5b482093cf86630d9cb339
#: ../../releases/1.3.txt:73
msgid ""
"Django 1.3 adds a framework that allows you to use a class as a view. This "
"means you can compose a view out of a collection of methods that can be "
"subclassed and overridden to provide common views of data without having to "
"write too much code."
msgstr ""

# 3e187777085f4951aecf1ec4cd5456e3
#: ../../releases/1.3.txt:78
msgid ""
"Analogs of all the old function-based generic views have been provided, "
"along with a completely generic view base class that can be used as the "
"basis for reusable applications that can be easily extended."
msgstr ""

# 9665250baec54b3c8d18c030a96c8a70
#: ../../releases/1.3.txt:83
msgid ""
"See :doc:`the documentation on class-based generic views</topics/class-based-"
"views>` for more details. There is also a document to help you :doc:`convert "
"your function-based generic views to class-based views</topics/generic-views-"
"migration>`."
msgstr ""

# ae4097cfb7774c2aaa358e0d8cd926ae
#: ../../releases/1.3.txt:89
msgid "Logging"
msgstr ""

# 9c096a557c1c4fc8bf2672d44dd712cc
#: ../../releases/1.3.txt:91
msgid ""
"Django 1.3 adds framework-level support for Python's ``logging`` module.  "
"This means you can now easily configure and control logging as part of your "
"Django project. A number of logging handlers and logging calls have been "
"added to Django's own code as well -- most notably, the error emails sent on "
"a HTTP 500 server error are now handled as a logging activity. See :doc:`the "
"documentation on Django's logging interface </topics/logging>` for more "
"details."
msgstr ""

# 2081c66d3b284478aee03ed3c9788c63
#: ../../releases/1.3.txt:100
msgid "Extended static files handling"
msgstr ""

# a3d930105af6427da0ee3e1d79ed806f
#: ../../releases/1.3.txt:102
msgid ""
"Django 1.3 ships with a new contrib app -- ``django.contrib.staticfiles`` -- "
"to help developers handle the static media files (images, CSS, Javascript, "
"etc.) that are needed to render a complete web page."
msgstr ""

# 074b0a5e08c04fe6a4e7c2fcf0175c70
#: ../../releases/1.3.txt:107
msgid ""
"In previous versions of Django, it was common to place static assets in :"
"setting:`MEDIA_ROOT` along with user-uploaded files, and serve them both at :"
"setting:`MEDIA_URL`. Part of the purpose of introducing the ``staticfiles`` "
"app is to make it easier to keep static files separate from user-uploaded "
"files. Static assets should now go in ``static/`` subdirectories of your "
"apps or in other static assets directories listed in :setting:"
"`STATICFILES_DIRS`, and will be served at :setting:`STATIC_URL`."
msgstr ""

# 6d321f5d03284fa4ba109d34e63beee4
#: ../../releases/1.3.txt:116
msgid ""
"See the :doc:`reference documentation of the app </ref/contrib/staticfiles>` "
"for more details or learn how to :doc:`manage static files </howto/static-"
"files>`."
msgstr ""

# 5ce2ecb7ccd940d3b56467c1ad3d0ab4
#: ../../releases/1.3.txt:121
msgid "unittest2 support"
msgstr ""

# 9da8393f06da4b52b15aad711172f988
#: ../../releases/1.3.txt:123
msgid ""
"Python 2.7 introduced some major changes to the ``unittest`` library, adding "
"some extremely useful features. To ensure that every Django project can "
"benefit from these new features, Django ships with a copy of unittest2_, a "
"copy of the Python 2.7 unittest library, backported for Python 2.4 "
"compatibility."
msgstr ""

# f1862c6ae2bb46ed88ba27d9b472ca16
#: ../../releases/1.3.txt:129
msgid ""
"To access this library, Django provides the ``django.utils.unittest`` module "
"alias. If you are using Python 2.7, or you have installed ``unittest2`` "
"locally, Django will map the alias to the installed version of the unittest "
"library. Otherwise, Django will use its own bundled version of unittest2."
msgstr ""

# 958618865d34468a997d17081c6145f1
#: ../../releases/1.3.txt:135
msgid "To take advantage of this alias, simply use::"
msgstr ""

# e7287e70cbeb4a17b1b518421c1b5dd6
#: ../../releases/1.3.txt:139
msgid "wherever you would have historically used::"
msgstr ""

# 4f6fdc365f5f4303b130170a4aecb24e
#: ../../releases/1.3.txt:143
msgid ""
"If you want to continue to use the base unittest library, you can -- you "
"just won't get any of the nice new unittest2 features."
msgstr ""

# 8b9dbf24d8aa4bb89880caae7ef5dfc9
#: ../../releases/1.3.txt:149
msgid "Transaction context managers"
msgstr ""

# 967ea76996f146ceaff1eada024b8951
#: ../../releases/1.3.txt:151
msgid ""
"Users of Python 2.5 and above may now use :ref:`transaction management "
"functions <transaction-management-functions>` as `context managers`_. For "
"example::"
msgstr ""

# 82f90f5f4f364495a7bd83caf143618f
#: ../../releases/1.3.txt:159
msgid "For more information, see :ref:`transaction-management-functions`."
msgstr ""

# fb2a1722ebae4c20b919ae6b1d1e44d2
#: ../../releases/1.3.txt:162
msgid "Configurable delete-cascade"
msgstr ""

# 0855c9beab6a4fe49eff8c16fc003034
#: ../../releases/1.3.txt:164
msgid ""
":class:`~django.db.models.ForeignKey` and :class:`~django.db.models."
"OneToOneField` now accept an :attr:`~django.db.models.ForeignKey.on_delete` "
"argument to customize behavior when the referenced object is deleted. "
"Previously, deletes were always cascaded; available alternatives now include "
"set null, set default, set to any value, protect, or do nothing."
msgstr ""

# 27e0154508984b70892f4c1d9c23b57a
#: ../../releases/1.3.txt:171
msgid ""
"For more information, see the :attr:`~django.db.models.ForeignKey.on_delete` "
"documentation."
msgstr ""

# 3d915f4e9fc94248a9b886531ee18012
#: ../../releases/1.3.txt:175
msgid "Contextual markers and comments for translatable strings"
msgstr ""

# c4bc60108d9d4c63883198e8ac3258cf
#: ../../releases/1.3.txt:177
msgid ""
"For translation strings with ambiguous meaning, you can now use the "
"``pgettext`` function to specify the context of the string."
msgstr ""

# e77af367d10548eb962f7cc33383fa3b
#: ../../releases/1.3.txt:180
msgid ""
"And if you just want to add some information for translators, you can also "
"add special translator comments in the source."
msgstr ""

# 12a465d7ba50439288b2351726d56c07
#: ../../releases/1.3.txt:183
msgid ""
"For more information, see :ref:`contextual-markers` and :ref:`translator-"
"comments`."
msgstr ""

# ba348f4446b046da8a37101096f6eedd
#: ../../releases/1.3.txt:187
msgid "Improvements to built-in template tags"
msgstr ""

# b4645481a88f4a36b720eb8e72a6455a
#: ../../releases/1.3.txt:189
msgid ""
"A number of improvements have been made to Django's built-in template tags:"
msgstr ""

# 44b38c23a6bc4cd3a62563a7ab41ab5f
#: ../../releases/1.3.txt:191
msgid ""
"The :ttag:`include` tag now accepts a ``with`` option, allowing you to "
"specify context variables to the included template"
msgstr ""

# 5fff465f345445e8893701e71f25a1b6
#: ../../releases/1.3.txt:194
msgid ""
"The :ttag:`include` tag now accepts an ``only`` option, allowing you to "
"exclude the current context from the included context"
msgstr ""

# 46d4d5793d304072bcf7806004560f4e
#: ../../releases/1.3.txt:197
msgid ""
"The :ttag:`with` tag now allows you to define multiple context variables in "
"a single :ttag:`with` block."
msgstr ""

# 75615680aae847a49b1f851b90ab5603
#: ../../releases/1.3.txt:200
msgid ""
"The :ttag:`load` tag now accepts a ``from`` argument, allowing you to load a "
"single tag or filter from a library."
msgstr ""

# 85fc6b9bfd2f41bda18f4390a51e1d58
#: ../../releases/1.3.txt:204
msgid "TemplateResponse"
msgstr ""

# 8a7cd71b4057424b8ffc0686c42fcd82
#: ../../releases/1.3.txt:206
msgid ""
"It can sometimes be beneficial to allow decorators or middleware to modify a "
"response *after* it has been constructed by the view. For example, you may "
"want to change the template that is used, or put additional data into the "
"context."
msgstr ""

# 06b2af480e1d4a92b5b6a0e157468ef5
#: ../../releases/1.3.txt:211
msgid ""
"However, you can't (easily) modify the content of a basic :class:`~django."
"http.HttpResponse` after it has been constructed. To overcome this "
"limitation, Django 1.3 adds a new :class:`~django.template.response."
"TemplateResponse` class. Unlike basic :class:`~django.http.HttpResponse` "
"objects, :class:`~django.template.response.TemplateResponse` objects retain "
"the details of the template and context that was provided by the view to "
"compute the response. The final output of the response is not computed until "
"it is needed, later in the response process."
msgstr ""

# 7fa3cade9f4f459688cd874fd546b069
#: ../../releases/1.3.txt:221
msgid ""
"For more details, see the :doc:`documentation </ref/template-response>` on "
"the :class:`~django.template.response.TemplateResponse` class."
msgstr ""

# 4d90c821a7944aeb9ee380aac115cb1a
#: ../../releases/1.3.txt:225
msgid "Caching changes"
msgstr ""

# 51d979805a094704b81f0195834d7638
#: ../../releases/1.3.txt:227
msgid ""
"Django 1.3 sees the introduction of several improvements to the Django's "
"caching infrastructure."
msgstr ""

# cf970b2463a24b45a614953fa7915eb8
#: ../../releases/1.3.txt:230
msgid ""
"Firstly, Django now supports multiple named caches. In the same way that "
"Django 1.2 introduced support for multiple database connections, Django 1.3 "
"allows you to use the new :setting:`CACHES` setting to define multiple named "
"cache connections."
msgstr ""

# 277a58f98bab4cf29dd7ae54e530bcaa
#: ../../releases/1.3.txt:235
msgid ""
"Secondly, :ref:`versioning <cache_versioning>`, :ref:`site-wide prefixing "
"<cache_key_prefixing>` and :ref:`transformation <cache_key_transformation>` "
"have been added to the cache API."
msgstr ""

# 110f31595c4242539305161df9749086
#: ../../releases/1.3.txt:239
msgid ""
"Thirdly, :ref:`cache key creation <using-vary-headers>` has been updated to "
"take the request query string into account on ``GET`` requests."
msgstr ""

# 675e9c90b63347d786ef3d280eb87306
#: ../../releases/1.3.txt:243
msgid ""
"Finally, support for pylibmc_ has been added to the memcached cache backend."
msgstr ""

# 456a54b5e9a342bdb52d31bcab198cad
#: ../../releases/1.3.txt:246
msgid ""
"For more details, see the :doc:`documentation on caching in Django</topics/"
"cache>`."
msgstr ""

# bea3e24aab754234af8481931106d7ef
#: ../../releases/1.3.txt:252
msgid "Permissions for inactive users"
msgstr ""

# d5ebf949b85c4bebb91cd6e769e96e52
#: ../../releases/1.3.txt:254
msgid ""
"If you provide a custom auth backend with ``supports_inactive_user`` set to "
"``True``, an inactive ``User`` instance will check the backend for "
"permissions.  This is useful for further centralizing the permission "
"handling. See the :doc:`authentication docs </topics/auth>` for more details."
msgstr ""

# 57e09e8aef77408eb82ec27525bc1b91
# ed8c6574f94d4dc79108dc3ec4ed8207
#: ../../releases/1.3.txt:261 ../../releases/1.3.txt:805
msgid "GeoDjango"
msgstr ""

# 63f041888831456d9a20219ff6c1c331
#: ../../releases/1.3.txt:263
msgid ""
"The GeoDjango test suite is now included when :ref:`running the Django test "
"suite <running-unit-tests>` with ``runtests.py`` when using :ref:`spatial "
"database backends <spatial-backends>`."
msgstr ""

# 9e47d031cbb24d4798d3266af6a53d06
#: ../../releases/1.3.txt:268
msgid ":setting:`MEDIA_URL` and :setting:`STATIC_URL` must end in a slash"
msgstr ""

# 13610db60c194e5c985d5bbfd92ab43d
#: ../../releases/1.3.txt:270
msgid ""
"Previously, the :setting:`MEDIA_URL` setting only required a trailing slash "
"if it contained a suffix beyond the domain name."
msgstr ""

# 3cb1cd4b1dad48e79dcf7feeed23952b
#: ../../releases/1.3.txt:273
msgid ""
"A trailing slash is now *required* for :setting:`MEDIA_URL` and the new :"
"setting:`STATIC_URL` setting as long as it is not blank. This ensures there "
"is a consistent way to combine paths in templates."
msgstr ""

# c9ab5711022c427d8b5457e4f842766c
#: ../../releases/1.3.txt:277
msgid ""
"Project settings which provide either of both settings without a trailing "
"slash will now raise a ``PendingDeprecationWarning``."
msgstr ""

# 28f9d5308b3b4049bd649219edff4a4f
#: ../../releases/1.3.txt:280
msgid ""
"In Django 1.4 this same condition will raise ``DeprecationWarning``, and in "
"Django 1.5 will raise an ``ImproperlyConfigured`` exception."
msgstr ""

# 78fa20c8234c49978fe7f5f0b509cecc
#: ../../releases/1.3.txt:284
msgid "Everything else"
msgstr ""

# cffe63574b2e471994cc81bc2e0710dd
#: ../../releases/1.3.txt:286
msgid ""
"Django :doc:`1.1 <1.1>` and :doc:`1.2 <1.2>` added lots of big ticket items "
"to Django, like multiple-database support, model validation, and a session-"
"based messages framework. However, this focus on big features came at the "
"cost of lots of smaller features."
msgstr ""

# be211079550d48978219def744555b9a
#: ../../releases/1.3.txt:292
msgid ""
"To compensate for this, the focus of the Django 1.3 development process has "
"been on adding lots of smaller, long standing feature requests. These "
"include:"
msgstr ""

# 7ae3784667a147629d900cfbcff76815
#: ../../releases/1.3.txt:296
msgid ""
"Improved tools for accessing and manipulating the current :class:`~django."
"contrib.sites.models.Site` object in :doc:`the sites framework </ref/contrib/"
"sites>`."
msgstr ""

# 25a6a0a8eef84ecc803a37b039bb4605
#: ../../releases/1.3.txt:300
msgid ""
"A :class:`~django.test.client.RequestFactory` for mocking requests in tests."
msgstr ""

# 786324ab495244cf800a60bac733450b
#: ../../releases/1.3.txt:303
msgid ""
"A new test assertion -- :meth:`~django.test.TestCase.assertNumQueries` -- "
"making it easier to test the database activity associated with a view."
msgstr ""

# 3ffd84b4dcbe4c5ca8d218a1b5483421
#: ../../releases/1.3.txt:307
msgid ""
"Support for lookups spanning relations in admin's :attr:`~django.contrib."
"admin.ModelAdmin.list_filter`."
msgstr ""

# d62fbda38b9f42d1877ed3bc4ef436be
#: ../../releases/1.3.txt:310
msgid "Support for HTTPOnly_ cookies."
msgstr ""

# fecdc191985d436e958e8b53eebcd18e
#: ../../releases/1.3.txt:312
msgid ""
":meth:`~django.core.mail.mail_admins()` and :meth:`~django.core.mail."
"mail_managers()` now support easily attaching HTML content to messages."
msgstr ""

# 8daf58d2a05446da9424978ff03f555a
#: ../../releases/1.3.txt:316
msgid ":class:`~django.core.mail.EmailMessage` now supports CC's."
msgstr ""

# ed0a30abd64747ddb6adaa42a9936d04
#: ../../releases/1.3.txt:318
msgid ""
"Error emails now include more of the detail and formatting of the debug "
"server error page."
msgstr ""

# 766ef1c9490c43e0afc3b6b00c83c64d
#: ../../releases/1.3.txt:321
msgid ""
":meth:`~django.template.Library.simple_tag` now accepts a ``takes_context`` "
"argument, making it easier to write simple template tags that require access "
"to template context."
msgstr ""

# af20cc67a3b540c4a4b7bf9849751fdc
#: ../../releases/1.3.txt:325
msgid ""
"A new :meth:`~django.shortcuts.render()` shortcut -- an alternative to :meth:"
"`~django.shortcuts.render_to_response()` providing a :class:`~django."
"template.RequestContext` by default."
msgstr ""

# 3061ff95fc104be2aa855bc100503a75
#: ../../releases/1.3.txt:329
msgid ""
"Support for combining :ref:`F() expressions <query-expressions>` with "
"timedelta values when retrieving or updating database values."
msgstr ""

# d879f0c2a041495fa3d9a6cf40af5520
#: ../../releases/1.3.txt:337
msgid "Backwards-incompatible changes in 1.3"
msgstr ""

# 115fb5fae6ec41f2b05d991a3cf1dd9c
#: ../../releases/1.3.txt:340
msgid "CSRF validation now applies to AJAX requests"
msgstr ""

# c3fa9103c9b144f88f4d235ec73888c5
#: ../../releases/1.3.txt:342
msgid ""
"Prior to Django 1.2.5, Django's CSRF-prevention system exempted AJAX "
"requests from CSRF verification; due to `security issues`_ reported to us, "
"however, *all* requests are now subjected to CSRF verification. Consult :doc:"
"`the Django CSRF documentation </ref/contrib/csrf>` for details on how to "
"handle CSRF verification in AJAX requests."
msgstr ""

# bd205fd1a9474f2e8df0129b0a769d33
#: ../../releases/1.3.txt:352
msgid "Restricted filters in admin interface"
msgstr ""

# 7e38eb324a2c46f49118ff73966d549b
#: ../../releases/1.3.txt:354
msgid ""
"Prior to Django 1.2.5, the Django administrative interface allowed filtering "
"on any model field or relation -- not just those specified in "
"``list_filter`` -- via query string manipulation. Due to security issues "
"reported to us, however, query string lookup arguments in the admin must be "
"for fields or relations specified in ``list_filter`` or ``date_hierarchy``."
msgstr ""

# 00e61b2cccdb4419915a405dcd8862ab
#: ../../releases/1.3.txt:362
msgid "Deleting a model doesn't delete associated files"
msgstr ""

# 73fab9d486344e7682ad612033346f93
#: ../../releases/1.3.txt:364
msgid ""
"In earlier Django versions, when a model instance containing a :class:"
"`~django.db.models.FileField` was deleted, :class:`~django.db.models."
"FileField` took it upon itself to also delete the file from the backend "
"storage. This opened the door to several data-loss scenarios, including "
"rolled-back transactions and fields on different models referencing the same "
"file. In Django 1.3, when a model is deleted the :class:`~django.db.models."
"FileField`'s :func:`~django.db.models.FileField.delete` method won't be "
"called.  If you need cleanup of orphaned files, you'll need to handle it "
"yourself (for instance, with a custom management command that can be run "
"manually or scheduled to run periodically via e.g. cron)."
msgstr ""

# 3d3956a96de34d0398ab6c612d3dc271
#: ../../releases/1.3.txt:377
msgid "PasswordInput default rendering behavior"
msgstr ""

# a29fb9c848374b6f959593c92a1fa446
#: ../../releases/1.3.txt:379
msgid ""
"The :class:`~django.forms.PasswordInput` form widget, intended for use with "
"form fields which represent passwords, accepts a boolean keyword argument "
"``render_value`` indicating whether to send its data back to the browser "
"when displaying a submitted form with errors. Prior to Django 1.3, this "
"argument defaulted to ``True``, meaning that the submitted password would be "
"sent back to the browser as part of the form. Developers who wished to add a "
"bit of additional security by excluding that value from the redisplayed form "
"could instantiate a :class:`~django.forms.PasswordInput` passing "
"``render_value=False`` ."
msgstr ""

# 19ff475a00494b999ca0e80d659b63bb
#: ../../releases/1.3.txt:389
msgid ""
"Due to the sensitive nature of passwords, however, Django 1.3 takes this "
"step automatically; the default value of ``render_value`` is now ``False``, "
"and developers who want the password value returned to the browser on a "
"submission with errors (the previous behavior) must now explicitly indicate "
"this. For example::"
msgstr ""

# 7f1c353ff42f48c486fc8555e9d83749
#: ../../releases/1.3.txt:400
msgid "Clearable default widget for FileField"
msgstr ""

# 29d57ba4e8b3442c92cadc9fc893d28d
#: ../../releases/1.3.txt:402
msgid ""
"Django 1.3 now includes a :class:`~django.forms.ClearableFileInput` form "
"widget in addition to :class:`~django.forms.FileInput`. "
"``ClearableFileInput`` renders with a checkbox to clear the field's value "
"(if the field has a value and is not required); ``FileInput`` provided no "
"means for clearing an existing file from a ``FileField``."
msgstr ""

# b979b72fb750443fa696a0f4af2d683a
#: ../../releases/1.3.txt:408
msgid ""
"``ClearableFileInput`` is now the default widget for a ``FileField``, so "
"existing forms including ``FileField`` without assigning a custom widget "
"will need to account for the possible extra checkbox in the rendered form "
"output."
msgstr ""

# ac32c4171cb84894a1607315eca4aa46
#: ../../releases/1.3.txt:412
msgid ""
"To return to the previous rendering (without the ability to clear the "
"``FileField``), use the ``FileInput`` widget in place of "
"``ClearableFileInput``. For instance, in a ``ModelForm`` for a hypothetical "
"``Document`` model with a ``FileField`` named ``document``::"
msgstr ""

# e2b6dc78196a4cdf9a7a4942494ac837
#: ../../releases/1.3.txt:426
msgid "New index on database session table"
msgstr ""

# a4028c5a32c1447ba86a1ca87b215b27
#: ../../releases/1.3.txt:428
msgid ""
"Prior to Django 1.3, the database table used by the database backend for "
"the :doc:`sessions </topics/http/sessions>` app had no index on the "
"``expire_date`` column. As a result, date-based queries on the session table "
"-- such as the query that is needed to purge old sessions -- would be very "
"slow if there were lots of sessions."
msgstr ""

# f338c56624fb4aa096934bbd5f0e05f9
#: ../../releases/1.3.txt:434
msgid ""
"If you have an existing project that is using the database session backend, "
"you don't have to do anything to accommodate this change. However, you may "
"get a significant performance boost if you manually add the new index to the "
"session table. The SQL that will add the index can be found by running the :"
"djadmin:`sqlindexes` admin command::"
msgstr ""

# e14857b87a7949fea4a1a576dc394c8e
#: ../../releases/1.3.txt:444
msgid "No more naughty words"
msgstr ""

# 96b6da40a17748c6afa35279b94c9b35
#: ../../releases/1.3.txt:446
msgid ""
"Django has historically provided (and enforced) a list of profanities. The :"
"doc:`comments app </ref/contrib/comments/index>` has enforced this list of "
"profanities, preventing people from submitting comments that contained one "
"of those profanities."
msgstr ""

# 9db2f7c0fd624d8782279d6c3c815a62
#: ../../releases/1.3.txt:451
msgid ""
"Unfortunately, the technique used to implement this profanities list was "
"woefully naive, and prone to the `Scunthorpe problem`_. Improving the built-"
"in filter to fix this problem would require significant effort, and since "
"natural language processing isn't the normal domain of a web framework, we "
"have \"fixed\" the problem by making the list of prohibited words an empty "
"list."
msgstr ""

# 7bd8c9efbc0d4543b6162445a16f8d5a
#: ../../releases/1.3.txt:458
msgid ""
"If you want to restore the old behavior, simply put a :setting:"
"`PROFANITIES_LIST` setting in your settings file that includes the words "
"that you want to prohibit (see the `commit that implemented this change`_ if "
"you want to see the list of words that was historically prohibited). "
"However, if avoiding profanities is important to you, you would be well "
"advised to seek out a better, less naive approach to the problem."
msgstr ""

# 3e762a7f860c4e7da7e01b45cb4f6717
#: ../../releases/1.3.txt:470
msgid "Localflavor changes"
msgstr ""

# 858caf26470e4281b0c27ad0b6530f2d
#: ../../releases/1.3.txt:472
msgid ""
"Django 1.3 introduces the following backwards-incompatible changes to local "
"flavors:"
msgstr ""

# c3551ea757fb44978d04c5e5bd9525ab
#: ../../releases/1.3.txt:475
msgid ""
"Canada (ca) -- The province \"Newfoundland and Labrador\" has had its "
"province code updated to \"NL\", rather than the older \"NF\". In addition, "
"the Yukon Territory has had its province code corrected to \"YT\", instead "
"of \"YK\"."
msgstr ""

# a6ec029a57dd49a590830ab0ee9eb7dd
#: ../../releases/1.3.txt:480
msgid ""
"Indonesia (id) -- The province \"Nanggroe Aceh Darussalam (NAD)\" has been "
"removed from the province list in favor of the new official designation "
"\"Aceh (ACE)\"."
msgstr ""

# b044e4fa4b974a0787ade7cf851cbd31
#: ../../releases/1.3.txt:484
msgid ""
"United States of America (us) -- The list of \"states\" used by "
"``USStateField`` has expanded to include Armed Forces postal codes. This is "
"backwards-incompatible if you were relying on ``USStateField`` not including "
"them."
msgstr ""

# 9bf4ea7b191641b6ab0b728dc327b22b
#: ../../releases/1.3.txt:490
msgid "FormSet updates"
msgstr ""

# a990f867bb1e4ad7b09a2d016c74c868
#: ../../releases/1.3.txt:492
msgid ""
"In Django 1.3 ``FormSet`` creation behavior is modified slightly. "
"Historically the class didn't make a distinction between not being passed "
"data and being passed empty dictionary. This was inconsistent with behavior "
"in other parts of the framework. Starting with 1.3 if you pass in empty "
"dictionary the ``FormSet`` will raise a ``ValidationError``."
msgstr ""

# f6849b4a56b2418e903f8c7ece83256a
#: ../../releases/1.3.txt:498
msgid "For example with a ``FormSet``::"
msgstr ""

# aac9366a035741e3a0003daf4e6831c8
#: ../../releases/1.3.txt:505
msgid "the following code will raise a ``ValidationError``::"
msgstr ""

# a3b8cde6aefe490f952209d273ca3c88
#: ../../releases/1.3.txt:512
msgid ""
"if you need to instantiate an empty ``FormSet``, don't pass in the data or "
"use ``None``::"
msgstr ""

# 009fc03b370e47939e7ed7e55a2b9f80
#: ../../releases/1.3.txt:519
msgid "Callables in templates"
msgstr ""

# 0423003821974926a4052be8068c9740
#: ../../releases/1.3.txt:521
msgid ""
"Previously, a callable in a template would only be called automatically as "
"part of the variable resolution process if it was retrieved via attribute "
"lookup. This was an inconsistency that could result in confusing and "
"unhelpful behavior::"
msgstr ""

# c3889ba8e3d741e4b28ad9e62d0537cb
#: ../../releases/1.3.txt:531
msgid ""
"This has been resolved in Django 1.3 - the result in both cases will be "
"``u'Joe Bloggs'``. Although the previous behavior was not useful for a "
"template language designed for web designers, and was never deliberately "
"supported, it is possible that some templates may be broken by this change."
msgstr ""

# e1024b9b07eb441ca8014cdd13b59ec6
#: ../../releases/1.3.txt:537
msgid "Use of custom SQL to load initial data in tests"
msgstr ""

# c5e8b17e368a4611ba0e333ef13623d9
#: ../../releases/1.3.txt:539
msgid ""
"Django provides a custom SQL hooks as a way to inject hand-crafted SQL into "
"the database synchronization process. One of the possible uses for this "
"custom SQL is to insert data into your database. If your custom SQL contains "
"``INSERT`` statements, those insertions will be performed every time your "
"database is synchronized. This includes the synchronization of any test "
"databases that are created when you run a test suite."
msgstr ""

# 1d9d79aafb1e48f6995fa75e5e4868e9
#: ../../releases/1.3.txt:547
msgid ""
"However, in the process of testing the Django 1.3, it was discovered that "
"this feature has never completely worked as advertised. When using database "
"backends that don't support transactions, or when using a "
"TransactionTestCase, data that has been inserted using custom SQL will not "
"be visible during the testing process."
msgstr ""

# 58e76e37435347db8b20945554a1bbde
#: ../../releases/1.3.txt:553
msgid ""
"Unfortunately, there was no way to rectify this problem without introducing "
"a backwards incompatibility. Rather than leave SQL-inserted initial data in "
"an uncertain state, Django now enforces the policy that data inserted by "
"custom SQL will *not* be visible during testing."
msgstr ""

# 4a0a53c5b0a64b5b88ec4fa2a804c603
#: ../../releases/1.3.txt:559
msgid ""
"This change only affects the testing process. You can still use custom SQL "
"to load data into your production database as part of the syncdb process. If "
"you require data to exist during test conditions, you should either insert "
"it using :ref:`test fixtures <topics-testing-fixtures>`, or using the ``setUp"
"()`` method of your test case."
msgstr ""

# 5905acf5773c433e9d7e63113307b9c0
#: ../../releases/1.3.txt:567
msgid "Changed priority of translation loading"
msgstr ""

# 42230014e5cd4924b50fa344be8ad3c2
#: ../../releases/1.3.txt:569
msgid ""
"Work has been done to simplify, rationalize and properly document the "
"algorithm used by Django at runtime to build translations from the different "
"translations found on disk, namely:"
msgstr ""

# eff6e9414681461fbf4877fe61f53e0d
#: ../../releases/1.3.txt:573
msgid ""
"For translatable literals found in Python code and templates (``'django'`` "
"gettext domain):"
msgstr ""

# e0156a0e248e451e9c52e4f9699b0bfd
#: ../../releases/1.3.txt:576
msgid ""
"Priorities of translations included with applications listed in the :setting:"
"`INSTALLED_APPS` setting were changed. To provide a behavior consistent with "
"other parts of Django that also use such setting (templates, etc.) now, when "
"building the translation that will be made available, the apps listed first "
"have higher precedence than the ones listed later."
msgstr ""

# 4a3e7f80e9ca49e4a32eb2d78458e21d
#: ../../releases/1.3.txt:582
msgid ""
"Now it is possible to override the translations shipped with applications by "
"using the :setting:`LOCALE_PATHS` setting whose translations have now higher "
"precedence than the translations of :setting:`INSTALLED_APPS` applications. "
"The relative priority among the values listed in this setting has also been "
"modified so the paths listed first have higher precedence than the ones "
"listed later."
msgstr ""

# 1e94697740ff41639ac246ea3b24c14c
#: ../../releases/1.3.txt:589
msgid ""
"The ``locale`` subdirectory of the directory containing the settings, that "
"usually coincides with and is know as the *project directory* is being "
"deprecated in this release as a source of translations. (the precedence of "
"these translations is intermediate between applications and :setting:"
"`LOCALE_PATHS` translations). See the `corresponding deprecated features "
"section`_ of this document."
msgstr ""

# 245b9d216202477a9f610c90d1dbd8b7
#: ../../releases/1.3.txt:596
msgid ""
"For translatable literals found in Javascript code (``'djangojs'`` gettext "
"domain):"
msgstr ""

# c3bb467cc3174b8288f1a1414bbbfe21
#: ../../releases/1.3.txt:599
msgid ""
"Similarly to the ``'django'`` domain translations: Overriding of "
"translations shipped with applications by using the :setting:`LOCALE_PATHS` "
"setting is now possible for this domain too. These translations have higher "
"precedence than the translations of Python packages passed to the :ref:"
"`javascript_catalog view <javascript_catalog-view>`.  Paths listed first "
"have higher precedence than the ones listed later."
msgstr ""

# c2e56d7e36af43f3908e603ec7a9689e
#: ../../releases/1.3.txt:606
msgid ""
"Translations under the ``locale`` subdirectory of the *project directory* "
"have never been taken in account for JavaScript translations and remain in "
"the same situation considering the deprecation of such location."
msgstr ""

# f6d976ee814d45e781f8fac73453cc09
#: ../../releases/1.3.txt:613
msgid "Transaction management"
msgstr ""

# c2adc7a585df4da9aa4a3dca5a1c25fe
#: ../../releases/1.3.txt:615
msgid ""
"When using managed transactions -- that is, anything but the default "
"autocommit mode -- it is important when a transaction is marked as \"dirty"
"\". Dirty transactions are committed by the :func:`~django.db.transaction."
"commit_on_success` decorator or the :class:`~django.middleware.transaction."
"TransactionMiddleware`, and :func:`~django.db.transaction.commit_manually` "
"forces them to be closed explicitly; clean transactions \"get a pass\", "
"which means they are usually rolled back at the end of a request when the "
"connection is closed."
msgstr ""

# 2f5b5470e33a4a909f9aaa28e781516e
#: ../../releases/1.3.txt:625
msgid ""
"Until Django 1.3, transactions were only marked dirty when Django was aware "
"of a modifying operation performed in them; that is, either some model was "
"saved, some bulk update or delete was performed, or the user explicitly "
"called ``transaction.set_dirty()``. In Django 1.3, a transaction is marked "
"dirty when *any* database operation is performed."
msgstr ""

# 878b2ef74ec74b12bc2bc65bc2908bbc
#: ../../releases/1.3.txt:632
msgid ""
"As a result of this change, you no longer need to set a transaction dirty "
"explicitly when you execute raw SQL or use a data-modifying ``SELECT``. "
"However, you *do* need to explicitly close any read-only transactions that "
"are being managed using :func:`~django.db.transaction.commit_manually`. For "
"example::"
msgstr ""

# 45cec55670924902b5b6f0a593478393
#: ../../releases/1.3.txt:643
msgid ""
"Prior to Django 1.3, this would work without error. However, under Django "
"1.3, this will raise a :class:`~django.db.transaction."
"TransactionManagementError` because the read operation that retrieves the "
"``MyObject`` instance leaves the transaction in a dirty state."
msgstr ""

# 70525f2a0581400bb5775ebdd03fd9fb
#: ../../releases/1.3.txt:650
msgid "No password reset for inactive users"
msgstr ""

# d377f653dd1a418784ff6c2f2757ad2a
#: ../../releases/1.3.txt:652
msgid ""
"Prior to Django 1.3, inactive users were able to request a password reset "
"email and reset their password. In Django 1.3 inactive users will receive "
"the same message as a nonexistent account."
msgstr ""

# 063ea596b4b34d96bdc44127fed1b6ab
#: ../../releases/1.3.txt:659
msgid "Features deprecated in 1.3"
msgstr ""

# ed2e0b4cc3cd4826aea67790aa9ad41b
#: ../../releases/1.3.txt:661
msgid ""
"Django 1.3 deprecates some features from earlier releases. These features "
"are still supported, but will be gradually phased out over the next few "
"release cycles."
msgstr ""

# 8a830c9637cf440e8f81712394e4fc07
#: ../../releases/1.3.txt:665
msgid ""
"Code taking advantage of any of the features below will raise a "
"``PendingDeprecationWarning`` in Django 1.3. This warning will be silent by "
"default, but may be turned on using Python's :mod:`warnings` module, or by "
"running Python with a ``-Wd`` or `-Wall` flag."
msgstr ""

# f1eaad6bae6245e8a428e8057dceac75
#: ../../releases/1.3.txt:670
msgid ""
"In Django 1.4, these warnings will become a ``DeprecationWarning``, which is "
"*not* silent. In Django 1.5 support for these features will be removed "
"entirely."
msgstr ""

# 1bc5eae49b0b4fefb02b51e2d9caf9c9
#: ../../releases/1.3.txt:676
msgid ""
"For more details, see the documentation :doc:`Django's release process </"
"internals/release-process>` and our :doc:`deprecation timeline </internals/"
"deprecation>`."
msgstr ""

# cfe7412e20e24960b6ecf75e500dbe63
#: ../../releases/1.3.txt:681
msgid "``mod_python`` support"
msgstr ""

# 7d894dd25db9420392e6de52c153fc8f
#: ../../releases/1.3.txt:683
msgid ""
"The ``mod_python`` library has not had a release since 2007 or a commit "
"since 2008. The Apache Foundation board voted to remove ``mod_python`` from "
"the set of active projects in its version control repositories, and its lead "
"developer has shifted all of his efforts toward the lighter, slimmer, more "
"stable, and more flexible ``mod_wsgi`` backend."
msgstr ""

# 85c88526c1ed49dbb9c59b8f8c43beb2
#: ../../releases/1.3.txt:689
msgid ""
"If you are currently using the ``mod_python`` request handler, you should "
"redeploy your Django projects using another request handler. :doc:`mod_wsgi "
"</howto/deployment/wsgi/modwsgi>` is the request handler recommended by the "
"Django project, but :doc:`FastCGI </howto/deployment/fastcgi>` is also "
"supported. Support for ``mod_python`` deployment will be removed in Django "
"1.5."
msgstr ""

# 6fad245d5a8c446b8e844851acc01643
#: ../../releases/1.3.txt:697
msgid "Function-based generic views"
msgstr ""

# 187fc686b7404eb091b0913b44f334b5
#: ../../releases/1.3.txt:699
msgid ""
"As a result of the introduction of class-based generic views, the function-"
"based generic views provided by Django have been deprecated. The following "
"modules and the views they contain have been deprecated:"
msgstr ""

# bcbdd62c2427405e8948f1765030996d
#: ../../releases/1.3.txt:703
msgid ":mod:`django.views.generic.create_update`"
msgstr ""

# 6078a3f61eed4d998f0ee07d482120ce
#: ../../releases/1.3.txt:705
msgid ":mod:`django.views.generic.date_based`"
msgstr ""

# ede71f83cdc24c839431a32693bf409b
#: ../../releases/1.3.txt:707
msgid ":mod:`django.views.generic.list_detail`"
msgstr ""

# 5b66a5384b284da580ea8646f9e32cc4
#: ../../releases/1.3.txt:709
msgid ":mod:`django.views.generic.simple`"
msgstr ""

# f349b6e2d8b44af0adfe16e416fb6eab
#: ../../releases/1.3.txt:712
msgid "Test client response ``template`` attribute"
msgstr ""

# 6dd1cf1f6e0e4200a4737a6fb0bbcece
#: ../../releases/1.3.txt:714
msgid ""
"Django's :ref:`test client <test-client>` returns :class:`~django.test."
"client.Response` objects annotated with extra testing information. In Django "
"versions prior to 1.3, this included a :attr:`~django.test.client.Response."
"template` attribute containing information about templates rendered in "
"generating the response: either None, a single :class:`~django.template."
"Template` object, or a list of :class:`~django.template.Template` objects. "
"This inconsistency in return values (sometimes a list, sometimes not) made "
"the attribute difficult to work with."
msgstr ""

# 23f0983dce4f405fa30db6594cb2e2b3
#: ../../releases/1.3.txt:723
msgid ""
"In Django 1.3 the :attr:`~django.test.client.Response.template` attribute is "
"deprecated in favor of a new :attr:`~django.test.client.Response.templates` "
"attribute, which is always a list, even if it has only a single element or "
"no elements."
msgstr ""

# 80b1cc9ebb5744a6bc74813df0af7370
#: ../../releases/1.3.txt:729
msgid "``DjangoTestRunner``"
msgstr ""

# 9b7416a5b00c4324bc29200cd7b8c80c
#: ../../releases/1.3.txt:731
msgid ""
"As a result of the introduction of support for unittest2, the features of :"
"class:`django.test.simple.DjangoTestRunner` (including fail-fast and Ctrl-C "
"test termination) have been made redundant. In view of this redundancy, :"
"class:`~django.test.simple.DjangoTestRunner` has been turned into an empty "
"placeholder class, and will be removed entirely in Django 1.5."
msgstr ""

# b8892ac1f0d54858aaf4607fe0fc9c99
#: ../../releases/1.3.txt:739
msgid "Changes to :ttag:`url` and :ttag:`ssi`"
msgstr ""

# 9cff242641754faf95084432fd61df01
#: ../../releases/1.3.txt:741
msgid ""
"Most template tags will allow you to pass in either constants or variables "
"as arguments -- for example::"
msgstr ""

# 451cc89feced43aa93d2e6ad887214ed
#: ../../releases/1.3.txt:746
msgid ""
"allows you to specify a base template as a constant, but if you have a "
"context variable ``templ`` that contains the value ``base.html``::"
msgstr ""

# 77df9c2403ed492da501abd5138cd424
#: ../../releases/1.3.txt:751
msgid "is also legal."
msgstr ""

# baf829c294a3409895c0799201d77b87
#: ../../releases/1.3.txt:753
msgid ""
"However, due to an accident of history, the :ttag:`url` and :ttag:`ssi` are "
"different. These tags use the second, quoteless syntax, but interpret the "
"argument as a constant. This means it isn't possible to use a context "
"variable as the target of a :ttag:`url` and :ttag:`ssi` tag."
msgstr ""

# 6f554ed31b8b4c929941d932b3f9b064
#: ../../releases/1.3.txt:759
msgid ""
"Django 1.3 marks the start of the process to correct this historical "
"accident. Django 1.3 adds a new template library -- ``future`` -- that "
"provides alternate implementations of the :ttag:`url` and :ttag:`ssi` "
"template tags. This ``future`` library implement behavior that makes the "
"handling of the first argument consistent with the handling of all other "
"variables. So, an existing template that contains::"
msgstr ""

# 3fb4dec29d8745f18c08d552bbd3571f
#: ../../releases/1.3.txt:768
msgid "should be replaced with::"
msgstr ""

# 88369b32262740d6807549657218fe06
#: ../../releases/1.3.txt:773
msgid ""
"The tags implementing the old behavior have been deprecated, and in Django "
"1.5, the old behavior will be replaced with the new behavior. To ensure "
"compatibility with future versions of Django, existing templates should be "
"modified to use the new ``future`` libraries and syntax."
msgstr ""

# d25a52b64d2d44dcaac4c4503237f53c
#: ../../releases/1.3.txt:780
msgid "Changes to the login methods of the admin"
msgstr ""

# e3fa3c76c2514a998c9130aca2b0aa96
#: ../../releases/1.3.txt:782
msgid ""
"In previous version the admin app defined login methods in multiple "
"locations and ignored the almost identical implementation in the already "
"used auth app. A side effect of this duplication was the missing adoption of "
"the changes made in r12634_ to support a broader set of characters for "
"usernames."
msgstr ""

# 8648a24ff82947daa3b162be0f591943
#: ../../releases/1.3.txt:787
msgid ""
"This release refactors the admin's login mechanism to use a subclass of the :"
"class:`~django.contrib.auth.forms.AuthenticationForm` instead of a manual "
"form validation. The previously undocumented method ``'django.contrib.admin."
"sites.AdminSite.display_login_form'`` has been removed in favor of a new :"
"attr:`~django.contrib.admin.AdminSite.login_form` attribute."
msgstr ""

# 0004c15157f44cc9af74757fa5cb82c6
#: ../../releases/1.3.txt:797
msgid "``reset`` and ``sqlreset`` management commands"
msgstr ""

# 1655a749316f4679a9053689fc4f99de
#: ../../releases/1.3.txt:799
msgid ""
"Those commands have been deprecated. The ``flush`` and ``sqlflush`` commands "
"can be used to delete everything. You can also use ALTER TABLE or DROP TABLE "
"statements manually."
msgstr ""

# 744451d8ea2d4b0b98c1db6ea4be21e6
#: ../../releases/1.3.txt:807
msgid ""
"The function-based :setting:`TEST_RUNNER` previously used to execute the "
"GeoDjango test suite, :func:`django.contrib.gis.tests.run_gis_tests`, was "
"deprecated for the class-based runner, :class:`django.contrib.gis.tests."
"GeoDjangoTestSuiteRunner`."
msgstr ""

# 2c2f0fb060a64825be35efc84f72e0c9
#: ../../releases/1.3.txt:813
msgid ""
"Previously, calling :meth:`~django.contrib.gis.geos.GEOSGeometry.transform` "
"would silently do nothing when GDAL wasn't available.  Now, a :class:"
"`~django.contrib.gis.geos.GEOSException` is properly raised to indicate "
"possible faulty application code.  A warning is now raised if :meth:`~django."
"contrib.gis.geos.GEOSGeometry.transform` is called when the SRID of the "
"geometry is less than 0 or ``None``."
msgstr ""

# 298defd3ad0d49fc8504b0f24bcfca29
#: ../../releases/1.3.txt:822
msgid "``CZBirthNumberField.clean``"
msgstr ""

# f69d534994b4488db64fd601b7c6a4d2
#: ../../releases/1.3.txt:824
msgid ""
"Previously this field's ``clean()`` method accepted a second, gender, "
"argument which allowed stronger validation checks to be made, however since "
"this argument could never actually be passed from the Django form machinery "
"it is now pending deprecation."
msgstr ""

# 0960607ecbc042c68fb8b54b6622d3b6
#: ../../releases/1.3.txt:830
msgid "``CompatCookie``"
msgstr ""

# 286b932a72cf45948c7aa54054abe01a
#: ../../releases/1.3.txt:832
msgid ""
"Previously, ``django.http`` exposed an undocumented ``CompatCookie`` class, "
"which was a bug-fix wrapper around the standard library ``SimpleCookie``. As "
"the fixes are moving upstream, this is now deprecated - you should use "
"``from django.http import SimpleCookie`` instead."
msgstr ""

# 2e0420ee91e04ebf8f9ea6b605d4be3c
#: ../../releases/1.3.txt:840
msgid "Loading of *project-level* translations"
msgstr ""

# 54406a391fcc43f98d1473913d26ffb3
#: ../../releases/1.3.txt:842
msgid ""
"This release of Django starts the deprecation process for inclusion of "
"translations located under the so-called *project path* in the translation "
"building process performed at runtime. The :setting:`LOCALE_PATHS` setting "
"can be used for the same task by adding the filesystem path to a ``locale`` "
"directory containing project-level translations to the value of that setting."
msgstr ""

# 9c9c42f1a6944a9aa0be4c866e887a3d
#: ../../releases/1.3.txt:848
msgid "Rationale for this decision:"
msgstr ""

# b3f09a42c9634515a768fd4275de4e48
#: ../../releases/1.3.txt:850
msgid ""
"The *project path* has always been a loosely defined concept (actually, the "
"directory used for locating project-level translations is the directory "
"containing the settings module) and there has been a shift in other parts of "
"the framework to stop using it as a reference for location of assets at "
"runtime."
msgstr ""

# f1b4463c47cc481ca7e21f0efc065206
#: ../../releases/1.3.txt:856
msgid ""
"Detection of the ``locale`` subdirectory tends to fail when the deployment "
"scenario is more complex than the basic one. e.g. it fails when the settings "
"module is a directory (ticket #10765)."
msgstr ""

# 09cfe2d6a7db4e438a3d4a136108f7a3
#: ../../releases/1.3.txt:860
msgid ""
"There are potential strange development- and deployment-time problems like "
"the fact that the ``project_dir/locale/`` subdir can generate spurious error "
"messages when the project directory is added to the Python path (``manage.py "
"runserver`` does this) and then it clashes with the equally named standard "
"library module, this is a typical warning message::"
msgstr ""

# 030f4dc2e61c4c45b408c12d79679000
#: ../../releases/1.3.txt:870
msgid ""
"This location wasn't included in the translation building process for "
"JavaScript literals. This deprecation removes such inconsistency."
msgstr ""

# 8e01ce6cc2d2482eae3b260878ed123e
#: ../../releases/1.3.txt:875
msgid "``PermWrapper`` moved to ``django.contrib.auth.context_processors``"
msgstr ""

# 8807daf3de034233a7f99afe5ac99d74
#: ../../releases/1.3.txt:877
msgid ""
"In Django 1.2, we began the process of changing the location of the ``auth`` "
"context processor from ``django.core.context_processors`` to ``django."
"contrib.auth.context_processors``. However, the ``PermWrapper`` support "
"class was mistakenly omitted from that migration. In Django 1.3, the "
"``PermWrapper`` class has also been moved to ``django.contrib.auth."
"context_processors``, along with the ``PermLookupDict`` support class. The "
"new classes are functionally identical to their old versions; only the "
"module location has changed."
msgstr ""

# e65fa8690f874caf9cb3d513bf83f2a5
#: ../../releases/1.3.txt:887
msgid "Removal of ``XMLField``"
msgstr ""

# cc3818277d2d41fda446e42b383426d3
#: ../../releases/1.3.txt:889
msgid ""
"When Django was first released, Django included an :class:`~django.db.models."
"XMLField` that performed automatic XML validation for any field input. "
"However, this validation function hasn't been performed since the "
"introduction of ``newforms``, prior to the 1.0 release. As a result, "
"``XMLField`` as currently implemented is functionally indistinguishable from "
"a simple :class:`~django.db.models.TextField`."
msgstr ""

# b30258ce504742e68d7f18b663212db9
#: ../../releases/1.3.txt:896
msgid ""
"For this reason, Django 1.3 has fast-tracked the deprecation of ``XMLField`` "
"-- instead of a two-release deprecation, ``XMLField`` will be removed "
"entirely in Django 1.4."
msgstr ""

# 79d457ba5117479dbbd195387e0eb6bf
#: ../../releases/1.3.txt:900
msgid ""
"It's easy to update your code to accommodate this change -- just replace all "
"uses of ``XMLField`` with ``TextField``, and remove the ``schema_path`` "
"keyword argument (if it is specified)."
msgstr ""
