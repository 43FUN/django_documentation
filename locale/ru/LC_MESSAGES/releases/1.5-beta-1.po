# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2013.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-02-27 00:21\n"
"PO-Revision-Date: 2013-02-27 00:21\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# 7d494af7c24b4e6da72532a2af19b9da
#: ../../releases/1.5-beta-1.txt:3
msgid "Django 1.5 beta release notes"
msgstr ""

# 4b1916afbfba4e54b7cc2c3241e3d57d
#: ../../releases/1.5-beta-1.txt:5
msgid "November 27, 2012."
msgstr ""

# b91fcd83897a470db7c5ae453812511f
#: ../../releases/1.5-beta-1.txt:7
msgid "Welcome to Django 1.5 beta!"
msgstr ""

# eb3f477964be4ecd962778bb268869d6
#: ../../releases/1.5-beta-1.txt:9
msgid ""
"This is the second in a series of preview/development releases leading up to "
"the eventual release of Django 1.5, scheduled for Decemeber 2012. This "
"release is primarily targeted at developers who are interested in trying out "
"new features and testing the Django codebase to help identify and resolve "
"bugs prior to the final 1.5 release."
msgstr ""

# 0e2a979d80d84b9f883fff6eae0880e2
#: ../../releases/1.5-beta-1.txt:15
msgid ""
"As such, this release is *not* intended for production use, and any such use "
"is discouraged."
msgstr ""

# 7bf57374c5654a64af9d8628c90dcb04
#: ../../releases/1.5-beta-1.txt:18
msgid ""
"These release notes cover the `new features`_, as well as some `backwards "
"incompatible changes`_ you'll want to be aware of when upgrading from Django "
"1.4 or older versions. We've also dropped some features, which are detailed "
"in :doc:`our deprecation plan </internals/deprecation>`, and we've `begun "
"the deprecation process for some features`_."
msgstr ""

# 457824cd55fa452e8d8aa14182f5b909
#: ../../releases/1.5-beta-1.txt:30
msgid "Overview"
msgstr ""

# ae30543fc612430caf7b35c5044f1b8b
#: ../../releases/1.5-beta-1.txt:32
msgid ""
"The biggest new feature in Django 1.5 is the `configurable User model`_. "
"Before Django 1.5, applications that wanted to use Django's auth framework (:"
"mod:`django.contrib.auth`) were forced to use Django's definition of a \"user"
"\". In Django 1.5, you can now swap out the ``User`` model for one that you "
"write yourself. This could be a simple extension to the existing ``User`` "
"model -- for example, you could add a Twitter or Facebook ID field -- or you "
"could completely replace the ``User`` with one totally customized for your "
"site."
msgstr ""

# ee674d1b01c94c458f37b8771da71d88
#: ../../releases/1.5-beta-1.txt:40
msgid ""
"Django 1.5 is also the first release with `Python 3 support`_! We're "
"labeling this support \"experimental\" because we don't yet consider it "
"production-ready, but everything's in place for you to start porting your "
"apps to Python 3. Our next release, Django 1.6, will support Python 3 "
"without reservations."
msgstr ""

# d46763afb07c4ff5b1f74c4ce75ba8ae
#: ../../releases/1.5-beta-1.txt:45
msgid "Other notable new features in Django 1.5 include:"
msgstr ""

# af840dd1c2854a298d5c2911c7faf5b0
#: ../../releases/1.5-beta-1.txt:47
msgid ""
"`Support for saving a subset of model's fields`_ - :meth:`Model.save() "
"<django.db.models.Model.save()>` now accepts an ``update_fields`` argument, "
"letting you specify which fields are written back to the database when you "
"call ``save()``. This can help in high-concurrency operations, and can "
"improve performance."
msgstr ""

# 5129d55451cf42c9931fc538a15f67fd
#: ../../releases/1.5-beta-1.txt:53
msgid ""
"Better `support for streaming responses <#explicit-streaming-responses-"
"beta-1>`_ via the new  :class:`~django.http.StreamingHttpResponse` response "
"class."
msgstr ""

# 014d15d6cc9847a19272377c12fc74e3
#: ../../releases/1.5-beta-1.txt:56
msgid "`GeoDjango`_ now supports PostGIS 2.0."
msgstr ""

# 8f1330c607ce41ee91140009dce1655b
#: ../../releases/1.5-beta-1.txt:58
msgid "... and more; `see below <#what-s-new-in-django-1-5>`_."
msgstr ""

# 4eaeb8c307ee44c7a8c3e8892a9e598c
#: ../../releases/1.5-beta-1.txt:60
msgid ""
"Wherever possible we try to introduce new features in a backwards-compatible "
"manner per :doc:`our API stability policy </misc/api-stability>`. However, "
"as with previous releases, Django 1.5 ships with some minor `backwards "
"incompatible changes`_; people upgrading from previous versions of Django "
"should read that list carefully."
msgstr ""

# 16739f64b77d4e30baf698d835453288
#: ../../releases/1.5-beta-1.txt:66
msgid ""
"One deprecated feature worth noting is the shift to \"new-style\" :ttag:"
"`url` tag. Prior to Django 1.3, syntax like ``{% url myview %}`` was "
"interpreted incorrectly (Django considered ``\"myview\"`` to be a literal "
"name of a view, not a template variable named ``myview``). Django 1.3 and "
"above introduced the ``{% load url from future %}`` syntax to bring in the "
"corrected behavior where ``myview`` was seen as a variable."
msgstr ""

# b71fe18bf2fe4b6eb9cd1027abc73c4c
#: ../../releases/1.5-beta-1.txt:73
msgid ""
"The upshot of this is that if you are not using ``{% load url from future %}"
"`` in your templates, you'll need to change tags like ``{% url myview %}`` "
"to ``{% url \"myview\" %}``. If you *were* using ``{% load url from future %}"
"`` you can simply remove that line under Django 1.5"
msgstr ""

# 30a17df8438640608654adc608622439
#: ../../releases/1.5-beta-1.txt:79
msgid "Python compatibility"
msgstr ""

# 962b9f609bce4fb0ada388a4e7836826
#: ../../releases/1.5-beta-1.txt:81
msgid ""
"Django 1.5 requires Python 2.6.5 or above, though we **highly recommend** "
"Python 2.7.3 or above. Support for Python 2.5 and below has been dropped."
msgstr ""

# 3444dc4bcade4cf4a8be61eb223351b1
#: ../../releases/1.5-beta-1.txt:84
msgid ""
"This change should affect only a small number of Django users, as most "
"operating-system vendors today are shipping Python 2.6 or newer as their "
"default version. If you're still using Python 2.5, however, you'll need to "
"stick to Django 1.4 until you can upgrade your Python version. Per :doc:`our "
"support policy </internals/release-process>`, Django 1.4 will continue to "
"receive security support until the release of Django 1.6."
msgstr ""

# 4031a1a392a148ed968a8add26e1c059
#: ../../releases/1.5-beta-1.txt:91
msgid ""
"Django 1.5 does not run on a Jython final release, because Jython's latest "
"release doesn't currently support Python 2.6. However, Jython currently does "
"offer an alpha release featuring 2.7 support, and Django 1.5 supports that "
"alpha release."
msgstr ""

# f6ca4e09588b4e16af69cfc7d3e51eae
#: ../../releases/1.5-beta-1.txt:97
msgid "Python 3 support"
msgstr ""

# 62bef275e31b4493954d981377c69f55
#: ../../releases/1.5-beta-1.txt:99
msgid ""
"Django 1.5 introduces support for Python 3 - specifically, Python 3.2 and "
"above. This comes in the form of a **single** codebase; you don't need to "
"install a different version of Django on Python 3. This means that you can "
"write applications targeted for just Python 2, just Python 3, or single "
"applications that support both platforms."
msgstr ""

# ed195f2a1a8a4c818f1f4c1d9bea636d
#: ../../releases/1.5-beta-1.txt:105
msgid ""
"However, we're labeling this support \"experimental\" for now: although it's "
"received extensive testing via our automated test suite, it's received very "
"little real-world testing. We've done our best to eliminate bugs, but we "
"can't be sure we covered all possible uses of Django. Further, Django's more "
"than a web framework; it's an ecosystem of pluggable components. At this "
"point, very few third-party applications have been ported to Python 3, so "
"it's unlikely that a real-world application will have all its dependencies "
"satisfied under Python 3."
msgstr ""

# b1ef8c83b4f94bb489aabd3bfdb30fa7
#: ../../releases/1.5-beta-1.txt:114
msgid ""
"Thus, we're recommending that Django 1.5 not be used in production under "
"Python 3. Instead, use this opportunity to begin :doc:`porting applications "
"to Python 3 </topics/python3>`. If you're an author of a pluggable "
"component, we encourage you to start porting now."
msgstr ""

# 38bf7c7660804d64b89a5b646d63ddc2
#: ../../releases/1.5-beta-1.txt:119
msgid ""
"We plan to offer first-class, production-ready support for Python 3 in our "
"next release, Django 1.6."
msgstr ""

# 2ed424e5d5e74a808dd6a1b5ca6a3ef7
#: ../../releases/1.5-beta-1.txt:123
msgid "What's new in Django 1.5"
msgstr ""

# 5be9c1f0c7694e5591e1d1664d8edcc3
#: ../../releases/1.5-beta-1.txt:126
msgid "Configurable User model"
msgstr ""

# 9559a827c29f463982752f2256af6ea1
#: ../../releases/1.5-beta-1.txt:128
msgid ""
"In Django 1.5, you can now use your own model as the store for user-related "
"data. If your project needs a username with more than 30 characters, or if "
"you want to store user's names in a format other than first name/last name, "
"or you want to put custom profile information onto your User object, you can "
"now do so."
msgstr ""

# 48872c6c5a664f2d8e39e4cbe0abd352
#: ../../releases/1.5-beta-1.txt:134
msgid ""
"If you have a third-party reusable application that references the User "
"model, you may need to make some changes to the way you reference User "
"instances. You should also document any specific features of the User model "
"that your application relies upon."
msgstr ""

# 402ea7196541481bb18b91b2da43d610
#: ../../releases/1.5-beta-1.txt:139
msgid ""
"See the :ref:`documentation on custom User models <auth-custom-user>` for "
"more details."
msgstr ""

# f2e2f7d9aa804c13a9b2fc7386c23f46
#: ../../releases/1.5-beta-1.txt:143
msgid "Support for saving a subset of model's fields"
msgstr ""

# 730615119c2b49639e4e9ca71deb0caf
#: ../../releases/1.5-beta-1.txt:145
msgid ""
"The method :meth:`Model.save() <django.db.models.Model.save()>` has a new "
"keyword argument ``update_fields``. By using this argument it is possible to "
"save only a select list of model's fields. This can be useful for "
"performance reasons or when trying to avoid overwriting concurrent changes."
msgstr ""

# 706126191bcb442ba9a56db8f41623b6
#: ../../releases/1.5-beta-1.txt:150
msgid ""
"Deferred instances (those loaded by .only() or .defer()) will automatically "
"save just the loaded fields. If any field is set manually after load, that "
"field will also get updated on save."
msgstr ""

# 5a563f5a525540448adf5e98f4066f93
#: ../../releases/1.5-beta-1.txt:154
msgid ""
"See the :meth:`Model.save() <django.db.models.Model.save()>` documentation "
"for more details."
msgstr ""

# ead52d821b0d4332beced99fddd08aed
#: ../../releases/1.5-beta-1.txt:158
msgid "Caching of related model instances"
msgstr ""

# bf0ee05945c1469ba416d7f739f4c7d9
#: ../../releases/1.5-beta-1.txt:160
msgid ""
"When traversing relations, the ORM will avoid re-fetching objects that were "
"previously loaded. For example, with the tutorial's models::"
msgstr ""

# 6e7ded31fce84958ad2b2904430ce1fe
#: ../../releases/1.5-beta-1.txt:168
msgid ""
"In Django 1.5, the third line no longer triggers a new SQL query to fetch "
"``first_choice.poll``; it was set by the second line."
msgstr ""

# 436f4d342b8047978d8e2abc0c1c9ab4
#: ../../releases/1.5-beta-1.txt:171
msgid ""
"For one-to-one relationships, both sides can be cached. For many-to-one "
"relationships, only the single side of the relationship can be cached. This "
"is particularly helpful in combination with ``prefetch_related``."
msgstr ""

# edd6beefef324a0ba0301cce22da40bb
#: ../../releases/1.5-beta-1.txt:178
msgid "Explicit support for streaming responses"
msgstr ""

# fc29ec17f9b84d6ea470aaed3c32d31a
#: ../../releases/1.5-beta-1.txt:180
msgid ""
"Before Django 1.5, it was possible to create a streaming response by passing "
"an iterator to :class:`~django.http.HttpResponse`. But this was unreliable: "
"any middleware that accessed the :attr:`~django.http.HttpResponse.content` "
"attribute would consume the iterator prematurely."
msgstr ""

# 6aa7696201c344eca6e82ec737ac7201
#: ../../releases/1.5-beta-1.txt:185
msgid ""
"You can now explicitly generate a streaming response with the new :class:"
"`~django.http.StreamingHttpResponse` class. This class exposes a :class:"
"`~django.http.StreamingHttpResponse.streaming_content` attribute which is an "
"iterator."
msgstr ""

# 778b7e592f3941be9ab2bd768a30c5e3
#: ../../releases/1.5-beta-1.txt:190
msgid ""
"Since :class:`~django.http.StreamingHttpResponse` does not have a "
"``content`` attribute, middleware that needs access to the response content "
"must test for streaming responses and behave accordingly. See :ref:`response-"
"middleware` for more information."
msgstr ""

# a16b4adcd4ee40679e52716d2c5c950f
#: ../../releases/1.5-beta-1.txt:196
msgid "``{% verbatim %}`` template tag"
msgstr ""

# 5b93c830311846fc8a4aca5ca7b78193
#: ../../releases/1.5-beta-1.txt:198
msgid ""
"To make it easier to deal with javascript templates which collide with "
"Django's syntax, you can now use the :ttag:`verbatim` block tag to avoid "
"parsing the tag's content."
msgstr ""

# 25a245490f8640a8a9c7041c282a37d6
#: ../../releases/1.5-beta-1.txt:203
msgid "Retrieval of ``ContentType`` instances associated with proxy models"
msgstr ""

# 21ef33140b654c2eb939d37e3aff5ce8
#: ../../releases/1.5-beta-1.txt:205
msgid ""
"The methods :meth:`ContentTypeManager.get_for_model() <django.contrib."
"contenttypes.models.ContentTypeManager.get_for_model()>` and :meth:"
"`ContentTypeManager.get_for_models() <django.contrib.contenttypes.models."
"ContentTypeManager.get_for_models()>` have a new keyword argument – "
"respectively ``for_concrete_model`` and ``for_concrete_models``. By passing "
"``False`` using this argument it is now possible to retrieve the :class:"
"`ContentType <django.contrib.contenttypes.models.ContentType>` associated "
"with proxy models."
msgstr ""

# 1e63e9bbf8fe44589012445019a660ee
#: ../../releases/1.5-beta-1.txt:213
msgid "New ``view`` variable in class-based views context"
msgstr ""

# 236813588c8244cfa233b9036f36d304
#: ../../releases/1.5-beta-1.txt:215
msgid ""
"In all :doc:`generic class-based views </topics/class-based-views/index>` "
"(or any class-based view inheriting from ``ContextMixin``), the context "
"dictionary contains a ``view`` variable that points to the ``View`` instance."
msgstr ""

# 85c21c9e104c4cb2a3ed2fd9e4d0b321
#: ../../releases/1.5-beta-1.txt:220
msgid "GeoDjango"
msgstr ""

# 12b02672b4344537b23a7a932ab05eb8
#: ../../releases/1.5-beta-1.txt:222
msgid ""
":class:`~django.contrib.gis.geos.LineString` and :class:`~django.contrib.gis."
"geos.MultiLineString` GEOS objects now support the :meth:`~django.contrib."
"gis.geos.GEOSGeometry.interpolate()` and :meth:`~django.contrib.gis.geos."
"GEOSGeometry.project()` methods (so-called linear referencing)."
msgstr ""

# 2d53712457b54c5caff4ae04930837d8
#: ../../releases/1.5-beta-1.txt:228
msgid ""
"The wkb and hex properties of `GEOSGeometry` objects preserve the Z "
"dimension."
msgstr ""

# 772a5be863084b1aa65475c15bdcf10a
#: ../../releases/1.5-beta-1.txt:230
msgid ""
"Support for PostGIS 2.0 has been added and support for GDAL < 1.5 has been "
"dropped."
msgstr ""

# 69a1396c2df041fab2e074ad880c049d
#: ../../releases/1.5-beta-1.txt:234
msgid "Minor features"
msgstr ""

# f4101c6a79044b1ba35280573206cde3
#: ../../releases/1.5-beta-1.txt:236
msgid "Django 1.5 also includes several smaller improvements worth noting:"
msgstr ""

# 183a1f655b3448e98a6229d008401508
#: ../../releases/1.5-beta-1.txt:238
msgid ""
"The template engine now interprets ``True``, ``False`` and ``None`` as the "
"corresponding Python objects."
msgstr ""

# ffdb23e1f51a4810ae5e82cd9e91e354
#: ../../releases/1.5-beta-1.txt:241
msgid ""
":mod:`django.utils.timezone` provides a helper for converting aware "
"datetimes between time zones. See :func:`~django.utils.timezone.localtime`."
msgstr ""

# f007d9836ca64188aa9973b42e23175b
#: ../../releases/1.5-beta-1.txt:244
msgid "The generic views support OPTIONS requests."
msgstr ""

# 7b8ebfce2c164409a6d4f1be945d04a6
#: ../../releases/1.5-beta-1.txt:246
msgid ""
"Management commands do not raise ``SystemExit`` any more when called by code "
"from :ref:`call_command <call-command>`. Any exception raised by the command "
"(mostly :ref:`CommandError <ref-command-exceptions>`) is propagated."
msgstr ""

# c6297bf52ce8477ba38c753db7cacefb
#: ../../releases/1.5-beta-1.txt:250
msgid ""
"The dumpdata management command outputs one row at a time, preventing out-of-"
"memory errors when dumping large datasets."
msgstr ""

# 8c97536be5434dc7b2d3b13ea8d9ab86
#: ../../releases/1.5-beta-1.txt:253
msgid ""
"In the localflavor for Canada, \"pq\" was added to the acceptable codes for "
"Quebec. It's an old abbreviation."
msgstr ""

# cd351f2bc6ee49d4941fd8c664c409a8
#: ../../releases/1.5-beta-1.txt:256
msgid ""
"The :ref:`receiver <connecting-receiver-functions>` decorator is now able to "
"connect to more than one signal by supplying a list of signals."
msgstr ""

# a7fbc5a2539a4d7c8da34336ff73fab7
#: ../../releases/1.5-beta-1.txt:259
msgid ""
"In the admin, you can now filter users by groups which they are members of."
msgstr ""

# ebf6b0c5b9b24ad0abaac509bb5b0df5
#: ../../releases/1.5-beta-1.txt:261
msgid ""
":meth:`QuerySet.bulk_create() <django.db.models.query.QuerySet.bulk_create>` "
"now has a batch_size argument. By default the batch_size is unlimited except "
"for SQLite where single batch is limited so that 999 parameters per query "
"isn't exceeded."
msgstr ""

# 38ac0bd1ff2049dfb842e48c70e7fab3
#: ../../releases/1.5-beta-1.txt:266
msgid ""
"The :setting:`LOGIN_URL` and :setting:`LOGIN_REDIRECT_URL` settings now also "
"accept view function names and :ref:`named URL patterns <naming-url-"
"patterns>`. This allows you to reduce configuration duplication. More "
"information can be found in the :func:`~django.contrib.auth.decorators."
"login_required` documentation."
msgstr ""

# 2550043f65ec4c14ad7713ca6f348023
#: ../../releases/1.5-beta-1.txt:272
msgid ""
"Django now provides a mod_wsgi :doc:`auth handler </howto/deployment/wsgi/"
"apache-auth>`."
msgstr ""

# 1d426265046c4792b28f12d77a1abf4d
#: ../../releases/1.5-beta-1.txt:275
msgid ""
"The :meth:`QuerySet.delete() <django.db.models.query.QuerySet.delete>` and :"
"meth:`Model.delete() <django.db.models.Model.delete()>` can now take fast-"
"path in some cases. The fast-path allows for less queries and less objects "
"fetched into memory. See :meth:`QuerySet.delete() <django.db.models.query."
"QuerySet.delete>` for details."
msgstr ""

# f56b0f9a92154615b16a21108c8371c0
#: ../../releases/1.5-beta-1.txt:281
msgid ""
"An instance of :class:`~django.core.urlresolvers.ResolverMatch` is stored on "
"the request as ``resolver_match``."
msgstr ""

# 49392d957e234bc89b3a63afa3e87760
#: ../../releases/1.5-beta-1.txt:284
msgid ""
"By default, all logging messages reaching the `django` logger when :setting:"
"`DEBUG` is `True` are sent to the console (unless you redefine the logger in "
"your :setting:`LOGGING` setting)."
msgstr ""

# 8c63deda2c3c46908190a7bbe2fe847f
#: ../../releases/1.5-beta-1.txt:288
msgid ""
"When using :class:`~django.template.RequestContext`, it is now possible to "
"look up permissions by using ``{% if 'someapp.someperm' in perms %}`` in "
"templates."
msgstr ""

# b1b3d85706c946dfb965e9494c162fd6
#: ../../releases/1.5-beta-1.txt:292
msgid ""
"It's not required any more to have ``404.html`` and ``500.html`` templates "
"in the root templates directory. Django will output some basic error "
"messages for both situations when those templates are not found. Of course, "
"it's still recommended as good practice to provide those templates in order "
"to present pretty error pages to the user."
msgstr ""

# 9d3b5e7900fc47888c5979f6cc5fd4bb
#: ../../releases/1.5-beta-1.txt:298
msgid ""
":mod:`django.contrib.auth` provides a new signal that is emitted whenever a "
"user fails to login successfully. See :data:`~django.contrib.auth.signals."
"user_login_failed`"
msgstr ""

# 84d8ce8cb65748eba950561cfa61849a
#: ../../releases/1.5-beta-1.txt:302
msgid ""
"The loaddata management command now supports an `ignorenonexistent` option "
"to ignore data for fields that no longer exist."
msgstr ""

# ac56db24b70448e8b57682f79583929f
#: ../../releases/1.5-beta-1.txt:305
msgid ""
":meth:`~django.test.SimpleTestCase.assertXMLEqual` and :meth:`~django.test."
"SimpleTestCase.assertXMLNotEqual` new assertions allow you to test equality "
"for XML content at a semantic level, without caring for syntax differences "
"(spaces, attribute order, etc.)."
msgstr ""

# 8e468940ac144de3a2d41b53482d96f7
#: ../../releases/1.5-beta-1.txt:310
msgid ""
"RemoteUserMiddleware now forces logout when the REMOTE_USER header "
"disappears during the same browser session."
msgstr ""

# 473569cfdb384afeb8c18bbe2a434279
#: ../../releases/1.5-beta-1.txt:313
msgid ""
"The :ref:`cache-based session backend <cached-sessions-backend>` can store "
"session data in a non-default cache."
msgstr ""

# a336c743f9d148bf8707b947c77d4f0a
#: ../../releases/1.5-beta-1.txt:316
msgid ""
"Multi-column indexes can now be created on models. Read the :attr:`~django."
"db.models.Options.index_together` documentation for more information."
msgstr ""

# 903bc3c0d40d401e99e50008bfbc972e
#: ../../releases/1.5-beta-1.txt:320
msgid ""
"During Django's logging configuration verbose Deprecation warnings are "
"enabled and warnings are captured into the logging system. Logged warnings "
"are routed through the ``console`` logging handler, which by default "
"requires :setting:`DEBUG` to be True for output to be generated. The result "
"is that DeprecationWarnings should be printed to the console in development "
"environments the way they have been in Python versions < 2.7."
msgstr ""

# 930d019dd15a4690bba6bad55ada34fa
#: ../../releases/1.5-beta-1.txt:327
msgid ""
"The API for :meth:`django.contrib.admin.ModelAdmin.message_user` method has "
"been modified to accept additional arguments adding capabilities similar to :"
"func:`django.contrib.messages.add_message`. This is useful for generating "
"error messages from admin actions."
msgstr ""

# 2c2590ceda3d4738a2240c09ee3cb796
#: ../../releases/1.5-beta-1.txt:332
msgid ""
"The admin's list filters can now be customized per-request thanks to the "
"new :meth:`django.contrib.admin.ModelAdmin.get_list_filter` method."
msgstr ""

# 8e34b1d6958245eaae00d6dd28c0ad33
#: ../../releases/1.5-beta-1.txt:336
msgid "Backwards incompatible changes in 1.5"
msgstr ""

# 32f170006fb4426188247b6caeb6c29c
#: ../../releases/1.5-beta-1.txt:340
msgid ""
"In addition to the changes outlined in this section, be sure to review the :"
"doc:`deprecation plan </internals/deprecation>` for any features that have "
"been removed. If you haven't updated your code within the deprecation "
"timeline for a given feature, its removal may appear as a backwards "
"incompatible change."
msgstr ""

# 97f943c2f5614b27a54d5ad3880ae451
#: ../../releases/1.5-beta-1.txt:347
msgid "Context in year archive class-based views"
msgstr ""

# ea4732a639b742f1806677eff9da8169
#: ../../releases/1.5-beta-1.txt:349
msgid ""
"For consistency with the other date-based generic views, :class:`~django."
"views.generic.dates.YearArchiveView` now passes ``year`` in the context as "
"a :class:`datetime.date` rather than a string.  If you are using ``{{ year }}"
"`` in your templates, you must replace it with ``{{ year|date:\"Y\" }}``."
msgstr ""

# 64a7ebdfa53b4fb0b43270d654e6c99a
#: ../../releases/1.5-beta-1.txt:355
msgid ""
"``next_year`` and ``previous_year`` were also added in the context. They are "
"calculated according to ``allow_empty`` and ``allow_future``."
msgstr ""

# cbbd816962a546829b20829d4bbffb1f
#: ../../releases/1.5-beta-1.txt:359
msgid "Context in year and month archive class-based views"
msgstr ""

# 2992df252aed43d6b5e6c017a2211f01
#: ../../releases/1.5-beta-1.txt:361
msgid ""
":class:`~django.views.generic.dates.YearArchiveView` and :class:`~django."
"views.generic.dates.MonthArchiveView` were documented to provide a "
"``date_list`` sorted in ascending order in the context, like their function-"
"based predecessors, but it actually was in descending order. In 1.5, the "
"documented order was restored. You may want to add (or remove) the "
"``reversed`` keyword when you're iterating on ``date_list`` in a template::"
msgstr ""

# 68cb38f5d98347de91471460d9a3c76a
#: ../../releases/1.5-beta-1.txt:370
msgid ""
":class:`~django.views.generic.dates.ArchiveIndexView` still provides a "
"``date_list`` in descending order."
msgstr ""

# ec6d101d37c24cebb5bc126df914a0f2
#: ../../releases/1.5-beta-1.txt:374
msgid "Context in TemplateView"
msgstr ""

# fcc296244c5b4bc0b04c6860d40839ba
#: ../../releases/1.5-beta-1.txt:376
msgid ""
"For consistency with the design of the other generic views, :class:`~django."
"views.generic.base.TemplateView` no longer passes a ``params`` dictionary "
"into the context, instead passing the variables from the URLconf directly "
"into the context."
msgstr ""

# 51530afaec8b4ff6a859aa0dd27438e4
#: ../../releases/1.5-beta-1.txt:382
msgid "Non-form data in HTTP requests"
msgstr ""

# 76b33ea6467e4deebdf511152eaa116b
#: ../../releases/1.5-beta-1.txt:384
msgid ""
":attr:`request.POST <django.http.HttpRequest.POST>` will no longer include "
"data posted via HTTP requests with non form-specific content-types in the "
"header. In prior versions, data posted with content-types other than "
"``multipart/form-data`` or ``application/x-www-form-urlencoded`` would still "
"end up represented in the :attr:`request.POST <django.http.HttpRequest."
"POST>` attribute. Developers wishing to access the raw POST data for these "
"cases, should use the :attr:`request.body <django.http.HttpRequest.body>` "
"attribute instead."
msgstr ""

# 174bdda5fda340ee89d52ca2339b42f7
#: ../../releases/1.5-beta-1.txt:394
msgid "OPTIONS, PUT and DELETE requests in the test client"
msgstr ""

# bd71cfe9fc7349a396dcb53b1b1a579e
#: ../../releases/1.5-beta-1.txt:396
msgid ""
"Unlike GET and POST, these HTTP methods aren't implemented by web browsers. "
"Rather, they're used in APIs, which transfer data in various formats such as "
"JSON or XML. Since such requests may contain arbitrary data, Django doesn't "
"attempt to decode their body."
msgstr ""

# 80479905edf848329c8ea3cf323ae79c
#: ../../releases/1.5-beta-1.txt:401
msgid ""
"However, the test client used to build a query string for OPTIONS and DELETE "
"requests like for GET, and a request body for PUT requests like for POST. "
"This encoding was arbitrary and inconsistent with Django's behavior when it "
"receives the requests, so it was removed in Django 1.5."
msgstr ""

# cf1c97f3d8934169836b6a2e27314536
#: ../../releases/1.5-beta-1.txt:406
msgid ""
"If you were using the ``data`` parameter in an OPTIONS or a DELETE request, "
"you must convert it to a query string and append it to the ``path`` "
"parameter."
msgstr ""

# b161fbf837c548c6b6c0e78e74f9aa5b
#: ../../releases/1.5-beta-1.txt:409
msgid ""
"If you were using the ``data`` parameter in a PUT request without a "
"``content_type``, you must encode your data before passing it to the test "
"client and set the ``content_type`` argument."
msgstr ""

# 28fb92335ceb4e838571b78ac502d973
#: ../../releases/1.5-beta-1.txt:416
msgid "System version of :mod:`simplejson` no longer used"
msgstr ""

# 12db0a1e3ad64d558799e2156b3200d1
#: ../../releases/1.5-beta-1.txt:418
msgid ""
":ref:`As explained below <simplejson-deprecation-beta-1>`, Django 1.5 "
"deprecates ``django.utils.simplejson`` in favor of Python 2.6's built-in :"
"mod:`json` module. In theory, this change is harmless. Unfortunately, "
"because of incompatibilities between versions of :mod:`simplejson`, it may "
"trigger errors in some circumstances."
msgstr ""

# a4bc0522e7884fa39986d88fd3f40926
#: ../../releases/1.5-beta-1.txt:424
msgid ""
"JSON-related features in Django 1.4 always used ``django.utils.simplejson``. "
"This module was actually:"
msgstr ""

# c7baf6a411d94074b8afff5dd2815500
#: ../../releases/1.5-beta-1.txt:427
msgid ""
"A system version of :mod:`simplejson`, if one was available (ie. ``import "
"simplejson`` works), if it was more recent than Django's built-in copy or it "
"had the C speedups, or"
msgstr ""

# 659065157d8c490cae3f1627c6fc5438
#: ../../releases/1.5-beta-1.txt:430
msgid ""
"The :mod:`json` module from the standard library, if it was available (ie. "
"Python 2.6 or greater), or"
msgstr ""

# d12944974bf14928aacc9c2c1dcdee69
#: ../../releases/1.5-beta-1.txt:432
msgid "A built-in copy of version 2.0.7 of :mod:`simplejson`."
msgstr ""

# acf23c3b8fd24471a3d9a12d12f88bbc
#: ../../releases/1.5-beta-1.txt:434
msgid ""
"In Django 1.5, those features use Python's :mod:`json` module, which is "
"based on version 2.0.9 of :mod:`simplejson`."
msgstr ""

# e7717956471e434a9dfcb12942394449
#: ../../releases/1.5-beta-1.txt:437
msgid ""
"There are no known incompatibilities between Django's copy of version 2.0.7 "
"and Python's copy of version 2.0.9. However, there are some "
"incompatibilities between other versions of :mod:`simplejson`:"
msgstr ""

# 6ad7fcf55d8b426998b11cc6482545c1
#: ../../releases/1.5-beta-1.txt:441
msgid ""
"While the :mod:`simplejson` API is documented as always returning unicode "
"strings, the optional C implementation can return a byte string. This was "
"fixed in Python 2.7."
msgstr ""

# f9eee7e9743c4e2ba5c007b45c68ff3e
#: ../../releases/1.5-beta-1.txt:444
msgid ""
":class:`simplejson.JSONEncoder` gained a ``namedtuple_as_object`` keyword "
"argument in version 2.2."
msgstr ""

# 4706f7bf3eaa486ead4c264f5d0917d8
#: ../../releases/1.5-beta-1.txt:447
msgid ""
"More information on these incompatibilities is available in `ticket #18023`_."
msgstr ""

# 16aba663c1ab4a8e836f0dc946f2bb5d
#: ../../releases/1.5-beta-1.txt:449
msgid ""
"The net result is that, if you have installed :mod:`simplejson` and your "
"code uses Django's serialization internals directly -- for instance ``django."
"core.serializers.json.DjangoJSONEncoder``, the switch from :mod:`simplejson` "
"to :mod:`json` could break your code. (In general, changes to internals "
"aren't documented; we're making an exception here.)"
msgstr ""

# 1199be8b5ffe493f9f0e371160e6746e
#: ../../releases/1.5-beta-1.txt:455
msgid ""
"At this point, the maintainers of Django believe that using :mod:`json` from "
"the standard library offers the strongest guarantee of backwards-"
"compatibility. They recommend to use it from now on."
msgstr ""

# ff216c0d4e984ba4b0c85ad56c6ac3d6
#: ../../releases/1.5-beta-1.txt:462
msgid "String types of hasher method parameters"
msgstr ""

# 9d3d02d607a3455ebb056e4b9132a407
#: ../../releases/1.5-beta-1.txt:464
msgid ""
"If you have written a :ref:`custom password hasher <auth_password_storage>`, "
"your ``encode()``, ``verify()`` or ``safe_summary()`` methods should accept "
"Unicode parameters (``password``, ``salt`` or ``encoded``). If any of the "
"hashing methods need byte strings, you can use the :func:`~django.utils."
"encoding.force_bytes` utility to encode the strings."
msgstr ""

# 66cb5cf9cf08469caea200a6a955a4fd
#: ../../releases/1.5-beta-1.txt:471
msgid "Validation of previous_page_number and next_page_number"
msgstr ""

# 5702cb6598dc457193a0c553a3aeb6ae
#: ../../releases/1.5-beta-1.txt:473
msgid ""
"When using :doc:`object pagination </topics/pagination>`, the "
"``previous_page_number()`` and ``next_page_number()`` methods of the :class:"
"`~django.core.paginator.Page` object did not check if the returned number "
"was inside the existing page range. It does check it now and raises an :exc:"
"`~django.core.paginator.InvalidPage` exception when the number is either too "
"low or too high."
msgstr ""

# f112108dacc2434990ae218e192192db
#: ../../releases/1.5-beta-1.txt:481
msgid "Behavior of autocommit database option on PostgreSQL changed"
msgstr ""

# 5c061d0571b641c094141c4aa8a064b6
#: ../../releases/1.5-beta-1.txt:483
msgid ""
"PostgreSQL's autocommit option didn't work as advertised previously. It did "
"work for single transaction block, but after the first block was left the "
"autocommit behavior was never restored. This bug is now fixed in 1.5. While "
"this is only a bug fix, it is worth checking your applications behavior if "
"you are using PostgreSQL together with the autocommit option."
msgstr ""

# e3bbcee094c44be6b082617dca92f135
#: ../../releases/1.5-beta-1.txt:490
msgid "Session not saved on 500 responses"
msgstr ""

# dcb3962208a64c85984ba92e7e045ac2
#: ../../releases/1.5-beta-1.txt:492
msgid ""
"Django's session middleware will skip saving the session data if the "
"response's status code is 500."
msgstr ""

# f985e9da85e54168bf78a0e02a859a9b
#: ../../releases/1.5-beta-1.txt:496
msgid "Email checks on failed admin login"
msgstr ""

# e79f35d91ee34c0f89475a06f40ab0db
#: ../../releases/1.5-beta-1.txt:498
msgid ""
"Prior to Django 1.5, if you attempted to log into the admin interface and "
"mistakenly used your email address instead of your username, the admin "
"interface would provide a warning advising that your email address was not "
"your username. In Django 1.5, the introduction of :ref:`custom User models "
"<auth-custom-user>` has required the removal of this warning. This doesn't "
"change the login behavior of the admin site; it only affects the warning "
"message that is displayed under one particular mode of login failure."
msgstr ""

# 92fb4ce2fc054be499dd25b2d168719a
#: ../../releases/1.5-beta-1.txt:508
msgid "Changes in tests execution"
msgstr ""

# e646c50ea52446a0b7d6966688a18e8f
#: ../../releases/1.5-beta-1.txt:510
msgid ""
"Some changes have been introduced in the execution of tests that might be "
"backward-incompatible for some testing setups:"
msgstr ""

# 6cad72ea828141c4892825d16a5c2c69
#: ../../releases/1.5-beta-1.txt:514
msgid "Database flushing in ``django.test.TransactionTestCase``"
msgstr ""

# 9e87f811968d43a193b5b70964428d09
#: ../../releases/1.5-beta-1.txt:516
msgid ""
"Previously, the test database was truncated *before* each test run in a :"
"class:`~django.test.TransactionTestCase`."
msgstr ""

# 64918e039518454cb5bb16f99597d607
#: ../../releases/1.5-beta-1.txt:519
msgid ""
"In order to be able to run unit tests in any order and to make sure they are "
"always isolated from each other, :class:`~django.test.TransactionTestCase` "
"will now reset the database *after* each test run instead."
msgstr ""

# da75d72b4c9f475e994bbda99cf95926
#: ../../releases/1.5-beta-1.txt:524
msgid "No more implicit DB sequences reset"
msgstr ""

# 98a03951e3cc48dba4bd7e7ed9dceaa1
#: ../../releases/1.5-beta-1.txt:526
msgid ""
":class:`~django.test.TransactionTestCase` tests used to reset primary key "
"sequences automatically together with the database flushing actions "
"described above."
msgstr ""

# 63da71e2ec8042e1a8864418ae804bd9
#: ../../releases/1.5-beta-1.txt:530
msgid ""
"This has been changed so no sequences are implicitly reset. This can cause :"
"class:`~django.test.TransactionTestCase` tests that depend on hard-coded "
"primary key values to break."
msgstr ""

# 2098b0ba0de7431ea015469f6023bd78
#: ../../releases/1.5-beta-1.txt:534
msgid ""
"The new :attr:`~django.test.TransactionTestCase.reset_sequences` attribute "
"can be used to force the old behavior for :class:`~django.test."
"TransactionTestCase` that might need it."
msgstr ""

# bd0261120aff46498080f337db667e5c
#: ../../releases/1.5-beta-1.txt:539
msgid "Ordering of tests"
msgstr ""

# 968fe0550bc3487aa8991f3416879309
#: ../../releases/1.5-beta-1.txt:541
msgid ""
"In order to make sure all ``TestCase`` code starts with a clean database, "
"tests are now executed in the following order:"
msgstr ""

# 21b58ae1173c4d358596682abfc86c1a
#: ../../releases/1.5-beta-1.txt:544
msgid ""
"First, all unittests (including :class:`unittest.TestCase`, :class:`~django."
"test.SimpleTestCase`, :class:`~django.test.TestCase` and :class:`~django."
"test.TransactionTestCase`) are run with no particular ordering guaranteed "
"nor enforced among them."
msgstr ""

# 7fac5179267448afa710faf75232b11f
#: ../../releases/1.5-beta-1.txt:549
msgid ""
"Then any other tests (e.g. doctests) that may alter the database without "
"restoring it to its original state are run."
msgstr ""

# b3a78a4708f9401386e4fe54b5ccfec8
#: ../../releases/1.5-beta-1.txt:552
msgid ""
"This should not cause any problems unless you have existing doctests which "
"assume a :class:`~django.test.TransactionTestCase` executed earlier left "
"some database state behind or unit tests that rely on some form of state "
"being preserved after the execution of other tests. Such tests are already "
"very fragile, and must now be changed to be able to run independently."
msgstr ""

# b18465ce00424bdfa532d4b66c540d03
#: ../../releases/1.5-beta-1.txt:559
msgid "`cleaned_data` dictionary kept for invalid forms"
msgstr ""

# 7c159624f30843df828724a411e90574
#: ../../releases/1.5-beta-1.txt:561
msgid ""
"The :attr:`~django.forms.Form.cleaned_data` dictionary is now always present "
"after form validation. When the form doesn't validate, it contains only the "
"fields that passed validation. You should test the success of the validation "
"with the :meth:`~django.forms.Form.is_valid()` method and not with the "
"presence or absence of the :attr:`~django.forms.Form.cleaned_data` attribute "
"on the form."
msgstr ""

# 9517de5ca4b54590a5ba98c14b722109
#: ../../releases/1.5-beta-1.txt:569
msgid "Behavior of :djadmin:`syncdb` with multiple databases"
msgstr ""

# 4746095af3f24fc0998becf055eaa801
#: ../../releases/1.5-beta-1.txt:571
msgid ""
":djadmin:`syncdb` now queries the database routers to determine if content "
"types (when :mod:`~django.contrib.contenttypes` is enabled) and permissions "
"(when :mod:`~django.contrib.auth` is enabled) should be created in the "
"target database. Previously, it created them in the default database, even "
"when another database was specified with the :djadminopt:`--database` option."
msgstr ""

# 77acfb1b0cac4b98b10331bb288f4469
#: ../../releases/1.5-beta-1.txt:577
msgid ""
"If you use :djadmin:`syncdb` on multiple databases, you should ensure that "
"your routers allow synchronizing content types and permissions to only one "
"of them. See the docs on the :ref:`behavior of contrib apps with multiple "
"databases <contrib_app_multiple_databases>` for more information."
msgstr ""

# 4bb50b016baa4cc88f3f289f27747a39
#: ../../releases/1.5-beta-1.txt:583
msgid "Miscellaneous"
msgstr ""

# b24086e7e5414141b456c289e6ac4162
#: ../../releases/1.5-beta-1.txt:585
msgid ""
":class:`django.forms.ModelMultipleChoiceField` now returns an empty "
"``QuerySet`` as the empty value instead of an empty list."
msgstr ""

# 31b7b39880754fc2856aef253984d30d
#: ../../releases/1.5-beta-1.txt:588
msgid ""
":func:`~django.utils.http.int_to_base36` properly raises a :exc:`~exceptions."
"TypeError` instead of :exc:`~exceptions.ValueError` for non-integer inputs."
msgstr ""

# 14c221eaf66340ab8962183bbf553130
#: ../../releases/1.5-beta-1.txt:592
msgid ""
"The ``slugify`` template filter is now available as a standard python "
"function at :func:`django.utils.text.slugify`. Similarly, ``remove_tags`` is "
"available at :func:`django.utils.html.remove_tags`."
msgstr ""

# 38bfd1f918384d8694d05cae62349490
#: ../../releases/1.5-beta-1.txt:596
msgid ""
"Uploaded files are no longer created as executable by default. If you need "
"them to be executable change :setting:`FILE_UPLOAD_PERMISSIONS` to your "
"needs. The new default value is `0666` (octal) and the current umask value "
"is first masked out."
msgstr ""

# dc2adbc0fd06496ebb981993b6d567ed
#: ../../releases/1.5-beta-1.txt:601
msgid ""
"The :ref:`F() expressions <query-expressions>` supported bitwise operators "
"by ``&`` and ``|``. These operators are now available using ``.bitand()`` "
"and ``.bitor()`` instead. The removal of ``&`` and ``|`` was done to be "
"consistent with :ref:`Q() expressions <complex-lookups-with-q>` and "
"``QuerySet`` combining where the operators are used as boolean AND and OR "
"operators."
msgstr ""

# 867b52ace2b043fbb88934f51caa497d
#: ../../releases/1.5-beta-1.txt:607
msgid ""
"In a ``filter()`` call, when :ref:`F() expressions <query-expressions>` "
"contained lookups spanning multi-valued relations, they didn't always reuse "
"the same relations as other lookups along the same chain. This was changed, "
"and now F() expressions will always use the same relations as other lookups "
"within the same ``filter()`` call."
msgstr ""

# cc94e08bf7174a429d87d99fafeb666f
#: ../../releases/1.5-beta-1.txt:613
msgid ""
"The :ttag:`csrf_token` template tag is no longer enclosed in a div. If you "
"need HTML validation against pre-HTML5 Strict DTDs, you should add a div "
"around it in your pages."
msgstr ""

# 51def29571a8407abb8286923bd8a77c
#: ../../releases/1.5-beta-1.txt:617
msgid ""
"The template tags library ``adminmedia``, which only contained the "
"deprecated template tag ``{% admin_media_prefix %}``, was removed. "
"Attempting to load it with ``{% load adminmedia %}`` will fail. If your "
"templates still contain that line you must remove it."
msgstr ""

# 620bf3f33e704f85b6340e16c7863273
#: ../../releases/1.5-beta-1.txt:623
msgid "Features deprecated in 1.5"
msgstr ""

# 2d668068fb5c4b0aa3ad32a1223eb48c
#: ../../releases/1.5-beta-1.txt:628
msgid ":setting:`AUTH_PROFILE_MODULE`"
msgstr ""

# ffb667a66aa442379a8eba88bae2321d
#: ../../releases/1.5-beta-1.txt:630
msgid ""
"With the introduction of :ref:`custom User models <auth-custom-user>`, there "
"is no longer any need for a built-in mechanism to store user profile data."
msgstr ""

# 2c9c48310780462eb87a45ad1af450b6
#: ../../releases/1.5-beta-1.txt:633
msgid ""
"You can still define user profiles models that have a one-to-one relation "
"with the User model - in fact, for many applications needing to associate "
"data with a User account, this will be an appropriate design pattern to "
"follow. However, the :setting:`AUTH_PROFILE_MODULE` setting, and the :meth:"
"`~django.contrib.auth.models.User.get_profile()` method for accessing the "
"user profile model, should not be used any longer."
msgstr ""

# 66d49f6d2f0d4d228db25bb41b8b8b74
#: ../../releases/1.5-beta-1.txt:641
msgid "Streaming behavior of :class:`~django.http.HttpResponse`"
msgstr ""

# 9a233845c0264beb952b38868e12d0b0
#: ../../releases/1.5-beta-1.txt:643
msgid ""
"Django 1.5 deprecates the ability to stream a response by passing an "
"iterator to :class:`~django.http.HttpResponse`. If you rely on this "
"behavior, switch to :class:`~django.http.StreamingHttpResponse`. See :ref:"
"`explicit-streaming-responses-beta-1` above."
msgstr ""

# fde0ac67cbb644c68e710365f4418387
#: ../../releases/1.5-beta-1.txt:648
msgid ""
"In Django 1.7 and above, the iterator will be consumed immediately by :class:"
"`~django.http.HttpResponse`."
msgstr ""

# e0c791610ccb4575b90069d9e7ea6bb4
#: ../../releases/1.5-beta-1.txt:652
msgid "``django.utils.simplejson``"
msgstr ""

# d20e4e77e8ae40e1b70a0933209d9bdb
#: ../../releases/1.5-beta-1.txt:654
msgid ""
"Since Django 1.5 drops support for Python 2.5, we can now rely on the :mod:"
"`json` module being available in Python's standard library, so we've removed "
"our own copy of :mod:`simplejson`. You should now import :mod:`json` instead "
"of ``django.utils.simplejson``."
msgstr ""

# d20bcafa92204a5c8f5bb11e4c8e9284
#: ../../releases/1.5-beta-1.txt:659
msgid ""
"Unfortunately, this change might have unwanted side-effects, because of "
"incompatibilities between versions of :mod:`simplejson` -- see the :ref:"
"`backwards-incompatible changes <simplejson-incompatibilities-beta-1>` "
"section. If you rely on features added to :mod:`simplejson` after it became "
"Python's :mod:`json`, you should import :mod:`simplejson` explicitly."
msgstr ""

# 7bdc90c85c3e4654a9ec821485b9125c
#: ../../releases/1.5-beta-1.txt:666
msgid "``django.utils.encoding.StrAndUnicode``"
msgstr ""

# 70785a2610e745158be7540df1a8af9b
#: ../../releases/1.5-beta-1.txt:668
msgid ""
"The :class:`~django.utils.encoding.StrAndUnicode` mix-in has been "
"deprecated. Define a ``__str__`` method and apply the :func:`~django.utils."
"encoding.python_2_unicode_compatible` decorator instead."
msgstr ""

# 415d440683424ca48154b93d23e13c49
#: ../../releases/1.5-beta-1.txt:673
msgid "``django.utils.itercompat.product``"
msgstr ""

# e2c68dddbb0646988b442639368e4148
#: ../../releases/1.5-beta-1.txt:675
msgid ""
"The ``django.utils.itercompat.product`` function has been deprecated. Use "
"the built-in :func:`itertools.product` instead."
msgstr ""

# 16379567091e4c24a9884f0be0fc85c6
#: ../../releases/1.5-beta-1.txt:679
msgid "``django.utils.markup``"
msgstr ""

# 9eca8d49b0454d59a40c2424b91c059f
#: ../../releases/1.5-beta-1.txt:681
msgid ""
"The markup contrib module has been deprecated and will follow an accelerated "
"deprecation schedule. Direct use of python markup libraries or 3rd party tag "
"libraries is preferred to Django maintaining this functionality in the "
"framework."
msgstr ""

# 0a7ab2ce06d84eb5bae1a4d6c3477aec
#: ../../releases/1.5-beta-1.txt:687
msgid "``cleanup`` management command"
msgstr ""

# ecda1b30a519441588c4f8183ff78b0f
#: ../../releases/1.5-beta-1.txt:689
msgid ""
"The :djadmin:`cleanup` management command has been deprecated and replaced "
"by :djadmin:`clearsessions`."
msgstr ""

# ab8e3fcc13014f908e3d24f0951833f9
#: ../../releases/1.5-beta-1.txt:693
msgid "``daily_cleanup.py`` script"
msgstr ""

# a22e687580904567a4a206da4aadc360
#: ../../releases/1.5-beta-1.txt:695
msgid ""
"The undocumented ``daily_cleanup.py`` script has been deprecated. Use the :"
"djadmin:`clearsessions` management command instead."
msgstr ""

# 530b2643c69245d2a554f8b782f96be6
#: ../../releases/1.5-beta-1.txt:699
msgid "``depth`` keyword argument in ``select_related``"
msgstr ""

# 88695e9edd4143268bfa16dd245d92c5
#: ../../releases/1.5-beta-1.txt:701
msgid ""
"The ``depth`` keyword argument in :meth:`~django.db.models.query.QuerySet."
"select_related` has been deprecated. You should use field names instead."
msgstr ""
