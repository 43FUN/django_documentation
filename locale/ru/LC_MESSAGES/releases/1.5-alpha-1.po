# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2013.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-07-11 11:43+0300\n"
"PO-Revision-Date: 2013-02-27 00:21\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# 8af372752ac3431e8dc913e5fb7a3e98
#: ../../releases/1.5-alpha-1.txt:3
msgid "Django 1.5 alpha release notes"
msgstr ""

# b2f43eaecf014039a0bfbd13fbdd06e0
#: ../../releases/1.5-alpha-1.txt:5
msgid "October 25, 2012."
msgstr ""

# 2a4b1c1bf7c945ca8424ff1e03109e3a
#: ../../releases/1.5-alpha-1.txt:7
msgid "Welcome to Django 1.5 alpha!"
msgstr ""

# 1aa4af01311f4cb490d01b20255efb3e
#: ../../releases/1.5-alpha-1.txt:9
msgid ""
"This is the first in a series of preview/development releases leading up to "
"the eventual release of Django 1.5, scheduled for December 2012. This "
"release is primarily targeted at developers who are interested in trying out "
"new features and testing the Django codebase to help identify and resolve "
"bugs prior to the final 1.5 release."
msgstr ""

# 375e7dc091234843bd4f644714f067fc
#: ../../releases/1.5-alpha-1.txt:15
msgid ""
"As such, this release is *not* intended for production use, and any such use "
"is discouraged."
msgstr ""

# 5119425a45004d0ab44950f55d636023
#: ../../releases/1.5-alpha-1.txt:18
msgid ""
"In particular, we need the community's help to test Django 1.5's new `Python "
"3 support`_ -- not just to report bugs on Python 3, but also regressions on "
"Python 2. While Django is very conservative with regards to backwards "
"compatibility, mistakes are always possible, and it's likely that the Python "
"3 refactoring work introduced some regressions."
msgstr ""

# e05822cf269d4b5eb94ae051b8f2c794
#: ../../releases/1.5-alpha-1.txt:24
msgid ""
"Django 1.5 alpha includes various `new features`_ and some minor `backwards "
"incompatible changes`_. There are also some features that have been dropped, "
"which are detailed in :doc:`our deprecation plan </internals/deprecation>`, "
"and we've `begun the deprecation process for some features`_."
msgstr ""

# 8322b320dac343b0b2e7269619ee3e50
#: ../../releases/1.5-alpha-1.txt:34
msgid "Overview"
msgstr ""

# b81ea270a45a406d9932a6141959ddff
#: ../../releases/1.5-alpha-1.txt:36
msgid ""
"The biggest new feature in Django 1.5 is the `configurable User model`_. "
"Before Django 1.5, applications that wanted to use Django's auth framework (:"
"mod:`django.contrib.auth`) were forced to use Django's definition of a \"user"
"\". In Django 1.5, you can now swap out the ``User`` model for one that you "
"write yourself. This could be a simple extension to the existing ``User`` "
"model -- for example, you could add a Twitter or Facebook ID field -- or you "
"could completely replace the ``User`` with one totally customized for your "
"site."
msgstr ""

# 89b30af2a3fd4db9a9e343d913a98b58
#: ../../releases/1.5-alpha-1.txt:44
msgid ""
"Django 1.5 is also the first release with `Python 3 support`_! We're "
"labeling this support \"experimental\" because we don't yet consider it "
"production-ready, but everything's in place for you to start porting your "
"apps to Python 3. Our next release, Django 1.6, will support Python 3 "
"without reservations."
msgstr ""

# d0eed9f72b22479d9903d4dc94bb9bfa
#: ../../releases/1.5-alpha-1.txt:49
msgid "Other notable new features in Django 1.5 include:"
msgstr ""

# 74c97268af2740a6a13cd99ee02afdff
#: ../../releases/1.5-alpha-1.txt:51
msgid ""
"`Support for saving a subset of model's fields`_ - :meth:`Model.save() "
"<django.db.models.Model.save()>` now accepts an ``update_fields`` argument, "
"letting you specify which fields are written back to the database when you "
"call ``save()``. This can help in high-concurrency operations, and can "
"improve performance."
msgstr ""

# 551909d0ee214f7a926e9c90b7640ab8
#: ../../releases/1.5-alpha-1.txt:57
msgid ""
"Better `support for streaming responses <#explicit-streaming-responses>`_ "
"via the new  :class:`~django.http.StreamingHttpResponse` response class."
msgstr ""

# be5e29001ffb40ac89b086a17588676d
#: ../../releases/1.5-alpha-1.txt:60
msgid "`GeoDjango`_ now supports PostGIS 2.0."
msgstr ""

# a1749481632d4e4f85844c8e5816bbe1
#: ../../releases/1.5-alpha-1.txt:62
msgid "... and more; `see below <#what-s-new-in-django-1-5>`_."
msgstr ""

# 5679ff319f894de395546c869fa3b8e7
#: ../../releases/1.5-alpha-1.txt:64
msgid ""
"Wherever possible we try to introduce new features in a backwards-compatible "
"manner per :doc:`our API stability policy </misc/api-stability>` policy. "
"However, as with previous releases, Django 1.5 ships with some minor "
"`backwards incompatible changes`_; people upgrading from previous versions "
"of Django should read that list carefully."
msgstr ""

# bbce32106dfb4bd8979945e6a225e219
#: ../../releases/1.5-alpha-1.txt:70
msgid ""
"One deprecated feature worth noting is the shift to \"new-style\" :ttag:"
"`url` tag. Prior to Django 1.3, syntax like ``{% url myview %}`` was "
"interpreted incorrectly (Django considered ``\"myview\"`` to be a literal "
"name of a view, not a template variable named ``myview``). Django 1.3 and "
"above introduced the ``{% load url from future %}`` syntax to bring in the "
"corrected behavior where ``myview`` was seen as a variable."
msgstr ""

# 69ad1317fc9f448399885d31974d01af
#: ../../releases/1.5-alpha-1.txt:77
msgid ""
"The upshot of this is that if you are not using ``{% load url from future %}"
"`` in your templates, you'll need to change tags like ``{% url myview %}`` "
"to ``{% url \"myview\" %}``. If you *were* using ``{% load url from future %}"
"`` you can simply remove that line under Django 1.5"
msgstr ""

# eb0ee2de79254e248ae47930782614e9
#: ../../releases/1.5-alpha-1.txt:83
msgid "Python compatibility"
msgstr ""

# 1f4a4dd8a13e440ea418a5f5dbdc3142
#: ../../releases/1.5-alpha-1.txt:85
msgid ""
"Django 1.5 requires Python 2.6.5 or above, though we **highly recommended** "
"Python 2.7.3 or above. Support for Python 2.5 and below has been dropped."
msgstr ""

# 6acba42d99e14fe491088cb50687eef3
#: ../../releases/1.5-alpha-1.txt:88
msgid ""
"This change should affect only a small number of Django users, as most "
"operating-system vendors today are shipping Python 2.6 or newer as their "
"default version. If you're still using Python 2.5, however, you'll need to "
"stick to Django 1.4 until you can upgrade your Python version. Per :doc:`our "
"support policy </internals/release-process>`, Django 1.4 will continue to "
"receive security support until the release of Django 1.6."
msgstr ""

# f2ef845cb82f41c39af6c12debba9659
#: ../../releases/1.5-alpha-1.txt:95
msgid ""
"Django 1.5 does not run on a Jython final release, because Jython's latest "
"release doesn't currently support Python 2.6. However, Jython currently does "
"offer an alpha release featuring 2.7 support, and Django 1.5 supports that "
"alpha release."
msgstr ""

# 8ec954547d8b48e08d0a3227129ed8d9
#: ../../releases/1.5-alpha-1.txt:101
msgid "Python 3 support"
msgstr ""

# eab49aeb8ef44b74b36f11df52317d38
#: ../../releases/1.5-alpha-1.txt:103
msgid ""
"Django 1.5 introduces support for Python 3 - specifically, Python 3.2 and "
"above. This comes in the form of a **single** codebase; you don't need to "
"install a different version of Django on Python 3. This means that you can "
"write application targeted for just Python 2, just Python 3, or single "
"applications that support both platforms."
msgstr ""

# efd1dbb03aac47a8a5a7230f12a97a4f
#: ../../releases/1.5-alpha-1.txt:109
msgid ""
"However, we're labeling this support \"experimental\" for now: although it's "
"received extensive testing via our automated test suite, it's received very "
"little real-world testing. We've done our best to eliminate bugs, but we "
"can't be sure we covered all possible uses of Django. Further, Django's more "
"than a web framework; it's an ecosystem of pluggable components. At this "
"point, very few third-party applications have been ported to Python 3, so "
"it's unlikely that a real-world application will have all its dependencies "
"satisfied under Python 3."
msgstr ""

# d1d9f6d83f264d3d9667fc1ab3c3218a
#: ../../releases/1.5-alpha-1.txt:118
msgid ""
"Thus, we're recommending that Django 1.5 not be used in production under "
"Python 3. Instead, use this opportunity to begin :doc:`porting applications "
"to Python 3 </topics/python3>`. If you're an author of a pluggable "
"component, we encourage you to start porting now."
msgstr ""

# b998406a686745dba1d70adb3310ab48
#: ../../releases/1.5-alpha-1.txt:123
msgid ""
"We plan to offer first-class, production-ready support for Python 3 in our "
"next release, Django 1.6."
msgstr ""

# 9ab3fe7c4fc54870acce5e4cda91a259
#: ../../releases/1.5-alpha-1.txt:127
msgid "What's new in Django 1.5"
msgstr ""

# 425b2584733b4592832060dd6319bc9d
#: ../../releases/1.5-alpha-1.txt:130
msgid "Configurable User model"
msgstr ""

# 58752b9241a041eb9d1fd55785508be6
#: ../../releases/1.5-alpha-1.txt:132
msgid ""
"In Django 1.5, you can now use your own model as the store for user-related "
"data. If your project needs a username with more than 30 characters, or if "
"you want to store usernames in a format other than first name/last name, or "
"you want to put custom profile information onto your User object, you can "
"now do so."
msgstr ""

# bc046857d8154fc9a503be9c75ac700b
#: ../../releases/1.5-alpha-1.txt:138
msgid ""
"If you have a third-party reusable application that references the User "
"model, you may need to make some changes to the way you reference User "
"instances. You should also document any specific features of the User model "
"that your application relies upon."
msgstr ""

# 73200eac3f484af882c2a42751801f74
#: ../../releases/1.5-alpha-1.txt:143
msgid ""
"See the :ref:`documentation on custom User models <auth-custom-user>` for "
"more details."
msgstr ""

# 6206d53ce3f445499e137f0bbafbdd56
#: ../../releases/1.5-alpha-1.txt:147
msgid "Support for saving a subset of model's fields"
msgstr ""

# 3beeeb872de241a98a2b6d5c2ca23104
#: ../../releases/1.5-alpha-1.txt:149
msgid ""
"The method :meth:`Model.save() <django.db.models.Model.save()>` has a new "
"keyword argument ``update_fields``. By using this argument it is possible to "
"save only a select list of model's fields. This can be useful for "
"performance reasons or when trying to avoid overwriting concurrent changes."
msgstr ""

# e49c1510776f4340b72f6a3eb60060fc
#: ../../releases/1.5-alpha-1.txt:154
msgid ""
"Deferred instances (those loaded by .only() or .defer()) will automatically "
"save just the loaded fields. If any field is set manually after load, that "
"field will also get updated on save."
msgstr ""

# 8d321bde24984eed9102f79798d17049
#: ../../releases/1.5-alpha-1.txt:158
msgid ""
"See the :meth:`Model.save() <django.db.models.Model.save()>` documentation "
"for more details."
msgstr ""

# 474c359067ab44b997907bcfeb9450a0
#: ../../releases/1.5-alpha-1.txt:162
msgid "Caching of related model instances"
msgstr ""

# 11b714e394aa4c9d868d849d5539399c
#: ../../releases/1.5-alpha-1.txt:164
msgid ""
"When traversing relations, the ORM will avoid re-fetching objects that were "
"previously loaded. For example, with the tutorial's models::"
msgstr ""

# b2d22d202e0c4b8b80272f01a063af45
#: ../../releases/1.5-alpha-1.txt:172
msgid ""
"In Django 1.5, the third line no longer triggers a new SQL query to fetch "
"``first_choice.poll``; it was set by the second line."
msgstr ""

# 7c7c9b20903e450490904f3261333982
#: ../../releases/1.5-alpha-1.txt:175
msgid ""
"For one-to-one relationships, both sides can be cached. For many-to-one "
"relationships, only the single side of the relationship can be cached. This "
"is particularly helpful in combination with ``prefetch_related``."
msgstr ""

# b7318d5efd0f4cb19f5007944f85ebdf
#: ../../releases/1.5-alpha-1.txt:180
msgid "Explicit support for streaming responses"
msgstr ""

# e02df58c3997460799851883ece008e3
#: ../../releases/1.5-alpha-1.txt:182
msgid ""
"Before Django 1.5, it was possible to create a streaming response by passing "
"an iterator to :class:`~django.http.HttpResponse`. But this was unreliable: "
"any middleware that accessed the :attr:`~django.http.HttpResponse.content` "
"attribute would consume the iterator prematurely."
msgstr ""

# c1f2f2f998c04006bd2af1eb7c79dfb1
#: ../../releases/1.5-alpha-1.txt:187
msgid ""
"You can now explicitly generate a streaming response with the new :class:"
"`~django.http.StreamingHttpResponse` class. This class exposes a :class:"
"`~django.http.StreamingHttpResponse.streaming_content` attribute which is an "
"iterator."
msgstr ""

# e4fef1ccbaac4a4691136741575e9677
#: ../../releases/1.5-alpha-1.txt:192
msgid ""
"Since :class:`~django.http.StreamingHttpResponse` does not have a "
"``content`` attribute, middleware that needs access to the response content "
"must test for streaming responses and behave accordingly. See :ref:`response-"
"middleware` for more information."
msgstr ""

# 1b3b9ab3279242ad93893a60b99569b8
#: ../../releases/1.5-alpha-1.txt:198
msgid "``{% verbatim %}`` template tag"
msgstr ""

# f39879563cf64dce913f16ca2af5ca30
#: ../../releases/1.5-alpha-1.txt:200
msgid ""
"To make it easier to deal with javascript templates which collide with "
"Django's syntax, you can now use the :ttag:`verbatim` block tag to avoid "
"parsing the tag's content."
msgstr ""

# 10a4e295bb7e44e18b670c8e0e465dc3
#: ../../releases/1.5-alpha-1.txt:205
msgid "Retrieval of ``ContentType`` instances associated with proxy models"
msgstr ""

# 588ddce486cd4405bb26547171c7a9f1
#: ../../releases/1.5-alpha-1.txt:207
msgid ""
"The methods :meth:`ContentTypeManager.get_for_model() <django.contrib."
"contenttypes.models.ContentTypeManager.get_for_model()>` and :meth:"
"`ContentTypeManager.get_for_models() <django.contrib.contenttypes.models."
"ContentTypeManager.get_for_models()>` have a new keyword argument – "
"respectively ``for_concrete_model`` and ``for_concrete_models``. By passing "
"``False`` using this argument it is now possible to retrieve the :class:"
"`ContentType <django.contrib.contenttypes.models.ContentType>` associated "
"with proxy models."
msgstr ""

# b2eccfeda88b48908af2735bfd58a44e
#: ../../releases/1.5-alpha-1.txt:215
msgid "New ``view`` variable in class-based views context"
msgstr ""

# 724b57ca28384655be0b88f370ed12fa
#: ../../releases/1.5-alpha-1.txt:217
msgid ""
"In all :doc:`generic class-based views </topics/class-based-views/index>` "
"(or any class-based view inheriting from ``ContextMixin``), the context "
"dictionary contains a ``view`` variable that points to the ``View`` instance."
msgstr ""

# b7c0095819db479483e241f4f6691eea
#: ../../releases/1.5-alpha-1.txt:222
msgid "GeoDjango"
msgstr ""

# e5894fa0054d4cc0a3e04e1af358aa81
#: ../../releases/1.5-alpha-1.txt:224
msgid ""
":class:`~django.contrib.gis.geos.LineString` and :class:`~django.contrib.gis."
"geos.MultiLineString` GEOS objects now support the :meth:`~django.contrib."
"gis.geos.GEOSGeometry.interpolate()` and :meth:`~django.contrib.gis.geos."
"GEOSGeometry.project()` methods (so-called linear referencing)."
msgstr ""

# 5230abdd412a4be99f41eeb17fb21a81
#: ../../releases/1.5-alpha-1.txt:230
msgid ""
"The ``wkb`` and ``hex`` properties of :class:`~django.contrib.gis.geos."
"GEOSGeometry` objects preserve the Z dimension."
msgstr ""

# 895c1ab7b46d4dfba8717dfb89dbc2fd
#: ../../releases/1.5-alpha-1.txt:234
msgid ""
"Support for PostGIS 2.0 has been added and support for GDAL < 1.5 has been "
"dropped."
msgstr ""

# bf6a7b818aca4787bb3cbf1032b47367
#: ../../releases/1.5-alpha-1.txt:238
msgid "Minor features"
msgstr ""

# 2e113fd6d3f14c5ab0db8e3cddf90d33
#: ../../releases/1.5-alpha-1.txt:240
msgid "Django 1.5 also includes several smaller improvements worth noting:"
msgstr ""

# 88679fe6986344189f76f43be3cb4626
#: ../../releases/1.5-alpha-1.txt:242
msgid ""
"The template engine now interprets ``True``, ``False`` and ``None`` as the "
"corresponding Python objects."
msgstr ""

# bbded51608314ef1b503e53c42417ea5
#: ../../releases/1.5-alpha-1.txt:245
msgid ""
":mod:`django.utils.timezone` provides a helper for converting aware "
"datetimes between time zones. See :func:`~django.utils.timezone.localtime`."
msgstr ""

# 7fb0751bcc0644afa4cd30f2208da05a
#: ../../releases/1.5-alpha-1.txt:248
msgid "The generic views support OPTIONS requests."
msgstr ""

# b14b777ea2dd40f083ed4f51a0fc4ab9
#: ../../releases/1.5-alpha-1.txt:250
msgid ""
"Management commands do not raise ``SystemExit`` any more when called by code "
"from :ref:`call_command <call-command>`. Any exception raised by the command "
"(mostly :ref:`CommandError <ref-command-exceptions>`) is propagated."
msgstr ""

# b59428aafe204a438e3010f4c4ac10cf
#: ../../releases/1.5-alpha-1.txt:254
msgid ""
"The dumpdata management command outputs one row at a time, preventing out-of-"
"memory errors when dumping large datasets."
msgstr ""

# 034f9f1d72ca456db40d020270571a35
#: ../../releases/1.5-alpha-1.txt:257
msgid ""
"In the localflavor for Canada, \"pq\" was added to the acceptable codes for "
"Quebec. It's an old abbreviation."
msgstr ""

# 557916c68b3643b1af538a74f3362637
#: ../../releases/1.5-alpha-1.txt:260
msgid ""
"The :ref:`receiver <connecting-receiver-functions>` decorator is now able to "
"connect to more than one signal by supplying a list of signals."
msgstr ""

# 6fab516dae59499d9c6049c7991d23b5
#: ../../releases/1.5-alpha-1.txt:263
msgid ""
"In the admin, you can now filter users by groups which they are members of."
msgstr ""

# 4d87547956734240a241fd7847121e70
#: ../../releases/1.5-alpha-1.txt:265
msgid ""
":meth:`QuerySet.bulk_create() <django.db.models.query.QuerySet.bulk_create>` "
"now has a batch_size argument. By default the batch_size is unlimited except "
"for SQLite where single batch is limited so that 999 parameters per query "
"isn't exceeded."
msgstr ""

# fadac09fd7d245dd86ab986bc1c44c63
#: ../../releases/1.5-alpha-1.txt:270
msgid ""
"The :setting:`LOGIN_URL` and :setting:`LOGIN_REDIRECT_URL` settings now also "
"accept view function names and :ref:`named URL patterns <naming-url-"
"patterns>`. This allows you to reduce configuration duplication. More "
"information can be found in the :func:`~django.contrib.auth.decorators."
"login_required` documentation."
msgstr ""

# 4830b6059a0d46d780c2c76e0234f319
#: ../../releases/1.5-alpha-1.txt:276
msgid ""
"Django now provides a mod_wsgi :doc:`auth handler </howto/deployment/wsgi/"
"apache-auth>`."
msgstr ""

# 7e114e61e56941e59de66f9363992a23
#: ../../releases/1.5-alpha-1.txt:279
msgid ""
"The :meth:`QuerySet.delete() <django.db.models.query.QuerySet.delete>` and :"
"meth:`Model.delete() <django.db.models.Model.delete()>` can now take fast-"
"path in some cases. The fast-path allows for less queries and less objects "
"fetched into memory. See :meth:`QuerySet.delete() <django.db.models.query."
"QuerySet.delete>` for details."
msgstr ""

# faf902c337d34de0a0ca259aa58a091f
#: ../../releases/1.5-alpha-1.txt:285
msgid ""
"An instance of :class:`~django.core.urlresolvers.ResolverMatch` is stored on "
"the request as ``resolver_match``."
msgstr ""

# ec66cb206b3f41319924d4258c2687c5
#: ../../releases/1.5-alpha-1.txt:288
msgid ""
"By default, all logging messages reaching the ``django`` logger when :"
"setting:`DEBUG` is ``True`` are sent to the console (unless you redefine the "
"logger in your :setting:`LOGGING` setting)."
msgstr ""

# d35ba6bc1feb4428ae97e38a66ca23f1
#: ../../releases/1.5-alpha-1.txt:292
msgid ""
"When using :class:`~django.template.RequestContext`, it is now possible to "
"look up permissions by using ``{% if 'someapp.someperm' in perms %}`` in "
"templates."
msgstr ""

# ed26c7fa55f84bd8b271351e61516854
#: ../../releases/1.5-alpha-1.txt:296
msgid ""
"It's not required any more to have ``404.html`` and ``500.html`` templates "
"in the root templates directory. Django will output some basic error "
"messages for both situations when those templates are not found. Of course, "
"it's still recommended as good practice to provide those templates in order "
"to present pretty error pages to the user."
msgstr ""

# 7b78686321ea487f939182f0940b423f
#: ../../releases/1.5-alpha-1.txt:302
msgid ""
":mod:`django.contrib.auth` provides a new signal that is emitted whenever a "
"user fails to login successfully. See :data:`~django.contrib.auth.signals."
"user_login_failed`"
msgstr ""

# 3e4dad841a6340668a90b7777dfb4528
#: ../../releases/1.5-alpha-1.txt:306
msgid ""
"The loaddata management command now supports an :djadminopt:`--"
"ignorenonexistent` option to ignore data for fields that no longer exist."
msgstr ""

# ce18043e9acd410ba0050b7112e87f49
#: ../../releases/1.5-alpha-1.txt:310
msgid ""
":meth:`~django.test.SimpleTestCase.assertXMLEqual` and :meth:`~django.test."
"SimpleTestCase.assertXMLNotEqual` new assertions allow you to test equality "
"for XML content at a semantic level, without caring for syntax differences "
"(spaces, attribute order, etc.)."
msgstr ""

# 363592267ea4490c97c54ff4c2f337b0
#: ../../releases/1.5-alpha-1.txt:316
msgid "Backwards incompatible changes in 1.5"
msgstr ""

# 580dd7ad998c4bb6848656f3cab8fab0
#: ../../releases/1.5-alpha-1.txt:320
msgid ""
"In addition to the changes outlined in this section, be sure to review the :"
"doc:`deprecation plan </internals/deprecation>` for any features that have "
"been removed. If you haven't updated your code within the deprecation "
"timeline for a given feature, its removal may appear as a backwards "
"incompatible change."
msgstr ""

# 13a3f2bb62c845748db98320e3633145
#: ../../releases/1.5-alpha-1.txt:327
msgid "Context in year archive class-based views"
msgstr ""

# 03c538f99f2c42dfa1f04b8017c4c556
#: ../../releases/1.5-alpha-1.txt:329
msgid ""
"For consistency with the other date-based generic views, :class:`~django."
"views.generic.dates.YearArchiveView` now passes ``year`` in the context as "
"a :class:`datetime.date` rather than a string.  If you are using ``{{ year }}"
"`` in your templates, you must replace it with ``{{ year|date:\"Y\" }}``."
msgstr ""

# 2b791cf8f9f24d6b999084d3787313fd
#: ../../releases/1.5-alpha-1.txt:335
msgid ""
"``next_year`` and ``previous_year`` were also added in the context. They are "
"calculated according to ``allow_empty`` and ``allow_future``."
msgstr ""

# c6461278ed384151a3508ac46592e0a1
#: ../../releases/1.5-alpha-1.txt:339
msgid "Context in year and month archive class-based views"
msgstr ""

# 63eceb84015f4892ac09baa93a41afc1
#: ../../releases/1.5-alpha-1.txt:341
msgid ""
":class:`~django.views.generic.dates.YearArchiveView` and :class:`~django."
"views.generic.dates.MonthArchiveView` were documented to provide a "
"``date_list`` sorted in ascending order in the context, like their function-"
"based predecessors, but it actually was in descending order. In 1.5, the "
"documented order was restored. You may want to add (or remove) the "
"``reversed`` keyword when you're iterating on ``date_list`` in a template::"
msgstr ""

# 431f6e702ffa4ef3b0bfe467ae22abda
#: ../../releases/1.5-alpha-1.txt:350
msgid ""
":class:`~django.views.generic.dates.ArchiveIndexView` still provides a "
"``date_list`` in descending order."
msgstr ""

# 22bc3923131c4bd88fe1454fd7319201
#: ../../releases/1.5-alpha-1.txt:354
msgid "Context in TemplateView"
msgstr ""

# dff464e6144d4c47845e52bead1d21ad
#: ../../releases/1.5-alpha-1.txt:356
msgid ""
"For consistency with the design of the other generic views, :class:`~django."
"views.generic.base.TemplateView` no longer passes a ``params`` dictionary "
"into the context, instead passing the variables from the URLconf directly "
"into the context."
msgstr ""

# 5f0489fd676c4967a0007e7a99720615
#: ../../releases/1.5-alpha-1.txt:362
msgid "Non-form data in HTTP requests"
msgstr ""

# bb126d33444d48649481ecaebb51fd01
#: ../../releases/1.5-alpha-1.txt:364
msgid ""
":attr:`request.POST <django.http.HttpRequest.POST>` will no longer include "
"data posted via HTTP requests with non form-specific content-types in the "
"header. In prior versions, data posted with content-types other than "
"``multipart/form-data`` or ``application/x-www-form-urlencoded`` would still "
"end up represented in the :attr:`request.POST <django.http.HttpRequest."
"POST>` attribute. Developers wishing to access the raw POST data for these "
"cases, should use the :attr:`request.body <django.http.HttpRequest.body>` "
"attribute instead."
msgstr ""

# 255faf0844404d9b85ddd38b75eb36b1
#: ../../releases/1.5-alpha-1.txt:374
msgid "OPTIONS, PUT and DELETE requests in the test client"
msgstr ""

# fa5e7ff7fab9439aac38c322cefe41f3
#: ../../releases/1.5-alpha-1.txt:376
msgid ""
"Unlike GET and POST, these HTTP methods aren't implemented by web browsers. "
"Rather, they're used in APIs, which transfer data in various formats such as "
"JSON or XML. Since such requests may contain arbitrary data, Django doesn't "
"attempt to decode their body."
msgstr ""

# 3b7106bc9b494d6aba2f1ab1ea5a35f3
#: ../../releases/1.5-alpha-1.txt:381
msgid ""
"However, the test client used to build a query string for OPTIONS and DELETE "
"requests like for GET, and a request body for PUT requests like for POST. "
"This encoding was arbitrary and inconsistent with Django's behavior when it "
"receives the requests, so it was removed in Django 1.5."
msgstr ""

# d78644f44a4f4742973acbd35543cdf6
#: ../../releases/1.5-alpha-1.txt:386
msgid ""
"If you were using the ``data`` parameter in an OPTIONS or a DELETE request, "
"you must convert it to a query string and append it to the ``path`` "
"parameter."
msgstr ""

# c981b40267624f5e9063faa31e46a9d6
#: ../../releases/1.5-alpha-1.txt:389
msgid ""
"If you were using the ``data`` parameter in a PUT request without a "
"``content_type``, you must encode your data before passing it to the test "
"client and set the ``content_type`` argument."
msgstr ""

# d6b37519004f42eb9e1dcb01ada73b6c
#: ../../releases/1.5-alpha-1.txt:394
msgid "System version of :mod:`simplejson` no longer used"
msgstr ""

# a7d52f58532646c9a4172d03dd69f335
#: ../../releases/1.5-alpha-1.txt:396
msgid ""
"As explained below, Django 1.5 deprecates ``django.utils.simplejson`` in "
"favor of Python 2.6's built-in :mod:`json` module. In theory, this change is "
"harmless. Unfortunately, because of incompatibilities between versions of :"
"mod:`simplejson`, it may trigger errors in some circumstances."
msgstr ""

# 1be2f27bd1dc4b25bbad190aa2aa0021
#: ../../releases/1.5-alpha-1.txt:402
msgid ""
"JSON-related features in Django 1.4 always used ``django.utils.simplejson``. "
"This module was actually:"
msgstr ""

# fa069e777c1842db9fc2d9ac5b8f3545
#: ../../releases/1.5-alpha-1.txt:405
msgid ""
"A system version of :mod:`simplejson`, if one was available (ie. ``import "
"simplejson`` works), if it was more recent than Django's built-in copy or it "
"had the C speedups, or"
msgstr ""

# c45b5814c0f143e1bd101e64f68a59d6
#: ../../releases/1.5-alpha-1.txt:408
msgid ""
"The :mod:`json` module from the standard library, if it was available (ie. "
"Python 2.6 or greater), or"
msgstr ""

# 7abc51527e6a4fc59a16eed15a3a329f
#: ../../releases/1.5-alpha-1.txt:410
msgid "A built-in copy of version 2.0.7 of :mod:`simplejson`."
msgstr ""

# 5d1814b98e1046baa7939446ddaee283
#: ../../releases/1.5-alpha-1.txt:412
msgid ""
"In Django 1.5, those features use Python's :mod:`json` module, which is "
"based on version 2.0.9 of :mod:`simplejson`."
msgstr ""

# 217d4984df8e47dfae9b2388bfc95e4b
#: ../../releases/1.5-alpha-1.txt:415
msgid ""
"There are no known incompatibilities between Django's copy of version 2.0.7 "
"and Python's copy of version 2.0.9. However, there are some "
"incompatibilities between other versions of :mod:`simplejson`:"
msgstr ""

# fe3eb7505a0d475e943af669adb16e50
#: ../../releases/1.5-alpha-1.txt:419
msgid ""
"While the :mod:`simplejson` API is documented as always returning unicode "
"strings, the optional C implementation can return a byte string. This was "
"fixed in Python 2.7."
msgstr ""

# 7936cade6d604ebfb1f2f6186854df8c
#: ../../releases/1.5-alpha-1.txt:422
msgid ""
":class:`simplejson.JSONEncoder` gained a ``namedtuple_as_object`` keyword "
"argument in version 2.2."
msgstr ""

# 57d6d0c701be40979038f369503fd81f
#: ../../releases/1.5-alpha-1.txt:425
msgid ""
"More information on these incompatibilities is available in `ticket #18023`_."
msgstr ""

# b3790cc6372d484295ee37f75481973c
#: ../../releases/1.5-alpha-1.txt:427
msgid ""
"The net result is that, if you have installed :mod:`simplejson` and your "
"code uses Django's serialization internals directly -- for instance ``django."
"core.serializers.json.DjangoJSONEncoder``, the switch from :mod:`simplejson` "
"to :mod:`json` could break your code. (In general, changes to internals "
"aren't documented; we're making an exception here.)"
msgstr ""

# 0e266e06a3b249809dd1158cec8230ea
#: ../../releases/1.5-alpha-1.txt:433
msgid ""
"At this point, the maintainers of Django believe that using :mod:`json` from "
"the standard library offers the strongest guarantee of backwards-"
"compatibility. They recommend to use it from now on."
msgstr ""

# 64bcd1f2a7d745049b3c56212a03774f
#: ../../releases/1.5-alpha-1.txt:440
msgid "String types of hasher method parameters"
msgstr ""

# bee369dd902d430bbb123f81f84c0b41
#: ../../releases/1.5-alpha-1.txt:442
msgid ""
"If you have written a :ref:`custom password hasher <auth_password_storage>`, "
"your ``encode()``, ``verify()`` or ``safe_summary()`` methods should accept "
"Unicode parameters (``password``, ``salt`` or ``encoded``). If any of the "
"hashing methods need byte strings, you can use the :func:`~django.utils."
"encoding.force_bytes` utility to encode the strings."
msgstr ""

# 5ab7d6bef0284ca3b0d4128b8e8a5783
#: ../../releases/1.5-alpha-1.txt:449
msgid "Validation of previous_page_number and next_page_number"
msgstr ""

# b6ff13dea32a4ed9808934d06687a124
#: ../../releases/1.5-alpha-1.txt:451
msgid ""
"When using :doc:`object pagination </topics/pagination>`, the "
"``previous_page_number()`` and ``next_page_number()`` methods of the :class:"
"`~django.core.paginator.Page` object did not check if the returned number "
"was inside the existing page range. It does check it now and raises an :exc:"
"`~django.core.paginator.InvalidPage` exception when the number is either too "
"low or too high."
msgstr ""

# 561367d53bae4e9e91957477332857db
#: ../../releases/1.5-alpha-1.txt:459
msgid "Behavior of autocommit database option on PostgreSQL changed"
msgstr ""

# b13ff13489a94a1484a58dfb02013e70
#: ../../releases/1.5-alpha-1.txt:461
msgid ""
"PostgreSQL's autocommit option didn't work as advertised previously. It did "
"work for single transaction block, but after the first block was left the "
"autocommit behavior was never restored. This bug is now fixed in 1.5. While "
"this is only a bug fix, it is worth checking your applications behavior if "
"you are using PostgreSQL together with the autocommit option."
msgstr ""

# e0a3636b9eac4c54b79d9ab16a961edf
#: ../../releases/1.5-alpha-1.txt:468
msgid "Session not saved on 500 responses"
msgstr ""

# ddf368d2221843fd95a07afebf810d8d
#: ../../releases/1.5-alpha-1.txt:470
msgid ""
"Django's session middleware will skip saving the session data if the "
"response's status code is 500."
msgstr ""

# 0e6a8bfa36e146f88ffe9324a1ec8e90
#: ../../releases/1.5-alpha-1.txt:474
msgid "Email checks on failed admin login"
msgstr ""

# efc5dc57d48b449e8dc32d9ce4ab9e7f
#: ../../releases/1.5-alpha-1.txt:476
msgid ""
"Prior to Django 1.5, if you attempted to log into the admin interface and "
"mistakenly used your email address instead of your username, the admin "
"interface would provide a warning advising that your email address was not "
"your username. In Django 1.5, the introduction of :ref:`custom User models "
"<auth-custom-user>` has required the removal of this warning. This doesn't "
"change the login behavior of the admin site; it only affects the warning "
"message that is displayed under one particular mode of login failure."
msgstr ""

# 3238be3fa4e0486e8b237e55f162a3e5
#: ../../releases/1.5-alpha-1.txt:486
msgid "Changes in tests execution"
msgstr ""

# 3858060d53764bf4965809b92b6356d8
#: ../../releases/1.5-alpha-1.txt:488
msgid ""
"Some changes have been introduced in the execution of tests that might be "
"backward-incompatible for some testing setups:"
msgstr ""

# faec832bed424fe3a5280dac7df8348a
#: ../../releases/1.5-alpha-1.txt:492
msgid "Database flushing in ``django.test.TransactionTestCase``"
msgstr ""

# 2d8e2107d94a48998b248708871fd5f8
#: ../../releases/1.5-alpha-1.txt:494
msgid ""
"Previously, the test database was truncated *before* each test run in a :"
"class:`~django.test.TransactionTestCase`."
msgstr ""

# 1117b92d886d47ed84902718c37d5079
#: ../../releases/1.5-alpha-1.txt:497
msgid ""
"In order to be able to run unit tests in any order and to make sure they are "
"always isolated from each other, :class:`~django.test.TransactionTestCase` "
"will now reset the database *after* each test run instead."
msgstr ""

# be26784a413a44ab8cc64a8dfda086cc
#: ../../releases/1.5-alpha-1.txt:502
msgid "No more implicit DB sequences reset"
msgstr ""

# 05f39ad5df2a4b068f241cb36bb9b546
#: ../../releases/1.5-alpha-1.txt:504
msgid ""
":class:`~django.test.TransactionTestCase` tests used to reset primary key "
"sequences automatically together with the database flushing actions "
"described above."
msgstr ""

# 88efeafdf20a47dabd5661700332290f
#: ../../releases/1.5-alpha-1.txt:508
msgid ""
"This has been changed so no sequences are implicitly reset. This can cause :"
"class:`~django.test.TransactionTestCase` tests that depend on hard-coded "
"primary key values to break."
msgstr ""

# c24ff1931c3b49d4a98cad3d567f0a74
#: ../../releases/1.5-alpha-1.txt:512
msgid ""
"The new :attr:`~django.test.TransactionTestCase.reset_sequences` attribute "
"can be used to force the old behavior for :class:`~django.test."
"TransactionTestCase` that might need it."
msgstr ""

# 9fdc0d03a1ce40a9b23f463a82d8b25c
#: ../../releases/1.5-alpha-1.txt:517
msgid "Ordering of tests"
msgstr ""

# cefc11632bf94c759dafd603f1ec844a
#: ../../releases/1.5-alpha-1.txt:519
msgid ""
"In order to make sure all ``TestCase`` code starts with a clean database, "
"tests are now executed in the following order:"
msgstr ""

# 491de99da5fd437a87c4710291e944fe
#: ../../releases/1.5-alpha-1.txt:522
msgid ""
"First, all unittests (including :class:`unittest.TestCase`, :class:`~django."
"test.SimpleTestCase`, :class:`~django.test.TestCase` and :class:`~django."
"test.TransactionTestCase`) are run with no particular ordering guaranteed "
"nor enforced among them."
msgstr ""

# b25c90dc2fb84ee894b989919cd2de0a
#: ../../releases/1.5-alpha-1.txt:527
msgid ""
"Then any other tests (e.g. doctests) that may alter the database without "
"restoring it to its original state are run."
msgstr ""

# 9c2253dfb1214162af4860abc7767884
#: ../../releases/1.5-alpha-1.txt:530
msgid ""
"This should not cause any problems unless you have existing doctests which "
"assume a :class:`~django.test.TransactionTestCase` executed earlier left "
"some database state behind or unit tests that rely on some form of state "
"being preserved after the execution of other tests. Such tests are already "
"very fragile, and must now be changed to be able to run independently."
msgstr ""

# ca3135789ee54f22b42d46f347cb672d
#: ../../releases/1.5-alpha-1.txt:537
msgid "`cleaned_data` dictionary kept for invalid forms"
msgstr ""

# bc0e7f223905441784f270ca4b5b5342
#: ../../releases/1.5-alpha-1.txt:539
msgid ""
"The :attr:`~django.forms.Form.cleaned_data` dictionary is now always present "
"after form validation. When the form doesn't validate, it contains only the "
"fields that passed validation. You should test the success of the validation "
"with the :meth:`~django.forms.Form.is_valid()` method and not with the "
"presence or absence of the :attr:`~django.forms.Form.cleaned_data` attribute "
"on the form."
msgstr ""

# 77c2d7ab11194fe4b05112a587084fd6
#: ../../releases/1.5-alpha-1.txt:547
msgid "Miscellaneous"
msgstr ""

# 38e2210a77f2451f8692872684bd9146
#: ../../releases/1.5-alpha-1.txt:549
msgid ""
":class:`django.forms.ModelMultipleChoiceField` now returns an empty "
"``QuerySet`` as the empty value instead of an empty list."
msgstr ""

# e557a621128f40fca76e59e7618f2a0e
#: ../../releases/1.5-alpha-1.txt:552
msgid ""
":func:`~django.utils.http.int_to_base36` properly raises a :exc:`TypeError` "
"instead of :exc:`ValueError` for non-integer inputs."
msgstr ""

# 740030f30c8b4101b8290167951ae82c
#: ../../releases/1.5-alpha-1.txt:555
msgid ""
"The ``slugify`` template filter is now available as a standard python "
"function at :func:`django.utils.text.slugify`. Similarly, ``remove_tags`` is "
"available at :func:`django.utils.html.remove_tags`."
msgstr ""

# 57b4b5870e3a42ad9efb2e36c9ddd844
#: ../../releases/1.5-alpha-1.txt:559
msgid ""
"Uploaded files are no longer created as executable by default. If you need "
"them to be executable change :setting:`FILE_UPLOAD_PERMISSIONS` to your "
"needs. The new default value is ``0666`` (octal) and the current umask value "
"is first masked out."
msgstr ""

# 06d2521f4c1a409cb1b12ac30d6f4980
#: ../../releases/1.5-alpha-1.txt:564
msgid ""
"The :class:`F expressions <django.db.models.F>` supported bitwise operators "
"by ``&`` and ``|``. These operators are now available using ``.bitand()`` "
"and ``.bitor()`` instead. The removal of ``&`` and ``|`` was done to be "
"consistent with :ref:`Q() expressions <complex-lookups-with-q>` and "
"``QuerySet`` combining where the operators are used as boolean AND and OR "
"operators."
msgstr ""

# 26c528e5886545588850e65c2972eb78
#: ../../releases/1.5-alpha-1.txt:571
msgid ""
"The :ttag:`csrf_token` template tag is no longer enclosed in a div. If you "
"need HTML validation against pre-HTML5 Strict DTDs, you should add a div "
"around it in your pages."
msgstr ""

# 7c23f275be0b4b57b6f2a0df52460590
#: ../../releases/1.5-alpha-1.txt:576
msgid "Features deprecated in 1.5"
msgstr ""

# c85f377e555743a98b9bc70d6d9fd62b
#: ../../releases/1.5-alpha-1.txt:579
msgid "``AUTH_PROFILE_MODULE`` setting"
msgstr ""

# e1860190e1144ca7a9e667e376de5380
#: ../../releases/1.5-alpha-1.txt:581
msgid ""
"With the introduction of :ref:`custom User models <auth-custom-user>`, there "
"is no longer any need for a built-in mechanism to store user profile data."
msgstr ""

# 8df7239003de43dea426d3341e5e1c3f
#: ../../releases/1.5-alpha-1.txt:584
msgid ""
"You can still define user profiles models that have a one-to-one relation "
"with the User model - in fact, for many applications needing to associate "
"data with a User account, this will be an appropriate design pattern to "
"follow. However, the ``AUTH_PROFILE_MODULE`` setting, and the ``django."
"contrib.auth.models.User.get_profile()`` method for accessing the user "
"profile model, should not be used any longer."
msgstr ""

# 963fff91973b4fb881cc2dd875341db6
#: ../../releases/1.5-alpha-1.txt:592
msgid "Streaming behavior of :class:`~django.http.HttpResponse`"
msgstr ""

# ebf45cb5ac2c46c5a8e5b7a6a2d97bf6
#: ../../releases/1.5-alpha-1.txt:594
msgid ""
"Django 1.5 deprecates the ability to stream a response by passing an "
"iterator to :class:`~django.http.HttpResponse`. If you rely on this "
"behavior, switch to :class:`~django.http.StreamingHttpResponse`. See above "
"for more details."
msgstr ""

# eb7242f298ec408eb7daa8329eda7210
#: ../../releases/1.5-alpha-1.txt:598
msgid ""
"In Django 1.7 and above, the iterator will be consumed immediately by :class:"
"`~django.http.HttpResponse`."
msgstr ""

# 9a1f54f3de634b9987c65128d25dc388
#: ../../releases/1.5-alpha-1.txt:602
msgid "``django.utils.simplejson``"
msgstr ""

# 13b9af27e5c8499784daa4ab3d1717b7
#: ../../releases/1.5-alpha-1.txt:604
msgid ""
"Since Django 1.5 drops support for Python 2.5, we can now rely on the :mod:"
"`json` module being available in Python's standard library, so we've removed "
"our own copy of :mod:`simplejson`. You should now import :mod:`json` instead "
"of ``django.utils.simplejson``."
msgstr ""

# 8398063e5488446a93a6ce45a1669280
#: ../../releases/1.5-alpha-1.txt:609
msgid ""
"Unfortunately, this change might have unwanted side-effects, because of "
"incompatibilities between versions of :mod:`simplejson` -- see the "
"backwards- incompatible changes section. If you rely on features added to :"
"mod:`simplejson` after it became Python's :mod:`json`, you should import :"
"mod:`simplejson` explicitly."
msgstr ""

# 2f4e78630a7e42149f5dbab5232d80c8
#: ../../releases/1.5-alpha-1.txt:616
msgid "``django.utils.encoding.StrAndUnicode``"
msgstr ""

# 87fedf8eb70f40a5992ded1ff724794e
#: ../../releases/1.5-alpha-1.txt:618
msgid ""
"The ``django.utils.encoding.StrAndUnicode`` mix-in has been deprecated. "
"Define a ``__str__`` method and apply the :func:`~django.utils.encoding."
"python_2_unicode_compatible` decorator instead."
msgstr ""

# 8b2d148432f340b29f01b3ea5c156321
#: ../../releases/1.5-alpha-1.txt:623
msgid "``django.utils.itercompat.product``"
msgstr ""

# 2dccacfe83954eddafaf67b4b8efcbb3
#: ../../releases/1.5-alpha-1.txt:625
msgid ""
"The ``django.utils.itercompat.product`` function has been deprecated. Use "
"the built-in :func:`itertools.product` instead."
msgstr ""

# 1553c7cd7c314323973c0c900aff88f6
#: ../../releases/1.5-alpha-1.txt:629
msgid "``django.utils.markup``"
msgstr ""

# ded173c396ef4c41a14f31b2d153410e
#: ../../releases/1.5-alpha-1.txt:631
msgid ""
"The markup contrib module has been deprecated and will follow an accelerated "
"deprecation schedule. Direct use of python markup libraries or 3rd party tag "
"libraries is preferred to Django maintaining this functionality in the "
"framework."
msgstr ""
