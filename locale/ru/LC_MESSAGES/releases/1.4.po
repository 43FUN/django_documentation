# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2012.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-02-29 18:30\n"
"PO-Revision-Date: 2012-02-15 15:13\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# 9ce298d2ffd24078bd9476841ca9cf1f
#: ../../releases/1.4.txt:3
msgid "Django 1.4 release notes - UNDER DEVELOPMENT"
msgstr ""

# ed48a44cc19a4351b9affc3169e34917
#: ../../releases/1.4.txt:5
msgid ""
"This page documents release notes for the as-yet-unreleased Django 1.4. As "
"such, it's tentative and subject to change. It provides up-to-date "
"information for those who are following trunk."
msgstr ""

# 926194a97da14902a09110cda78d7029
#: ../../releases/1.4.txt:9
msgid ""
"Django 1.4 includes various `new features`_ and some minor `backwards "
"incompatible changes`_. We've also dropped some features, which are detailed "
"in :doc:`our deprecation plan </internals/deprecation>`, and we've `begun "
"the deprecation process for some features`_."
msgstr ""

# 213df19afa184f7cadf36601eb51868b
#: ../../releases/1.4.txt:19
msgid "Python compatibility"
msgstr ""

# e80870c48fa84ff48f78e768f3c6ad34
#: ../../releases/1.4.txt:21
msgid ""
"Django 1.4 has dropped support for Python 2.4. Python 2.5 is now the minimum "
"required Python version. Django is tested and supported on Python 2.5, 2.6 "
"and 2.7."
msgstr ""

# 7eb02d85ae724c098bf15b567a2213d1
#: ../../releases/1.4.txt:25
msgid ""
"This change should affect only a small number of Django users, as most "
"operating-system vendors today are shipping Python 2.5 or newer as their "
"default version. If you're still using Python 2.4, however, you'll need to "
"stick to Django 1.3 until you can upgrade. Per :doc:`our support policy </"
"internals/release-process>`, Django 1.3 will continue to receive security "
"support until the release of Django 1.5."
msgstr ""

# f21d94288ae94ee787e840b05750272e
#: ../../releases/1.4.txt:32
msgid ""
"Django does not support Python 3.x at this time. At some point before the "
"release of Django 1.4, we plan to publish a document outlining our full "
"timeline for deprecating Python 2.x and moving to Python 3.x."
msgstr ""

# 9d8aee022f664b8093ec70212a5c0f57
#: ../../releases/1.4.txt:37
msgid "What's new in Django 1.4"
msgstr ""

# 40e04b980b4e439b9e29d55c829a3ca7
#: ../../releases/1.4.txt:40
msgid "Support for in-browser testing frameworks"
msgstr ""

# f62ffa88b264484c98a0a4dee82bbf28
#: ../../releases/1.4.txt:42
msgid ""
"Django 1.4 supports integration with in-browser testing frameworks like "
"Selenium_. The new :class:`django.test.LiveServerTestCase` base class lets "
"you test the interactions between your site's front and back ends more "
"comprehensively. See the :class:`documentation<django.test."
"LiveServerTestCase>` for more details and concrete examples."
msgstr ""

# 659a36aca02a407da9ce6c06eb94b2e8
#: ../../releases/1.4.txt:52
msgid "``SELECT FOR UPDATE`` support"
msgstr ""

# 7be0935efd0d46aab6a9e83c2b8ce885
#: ../../releases/1.4.txt:54
msgid ""
"Django 1.4 includes a :meth:`QuerySet.select_for_update() <django.db.models."
"query.QuerySet.select_for_update>` method, which generates a ``SELECT ... "
"FOR UPDATE`` SQL query. This will lock rows until the end of the "
"transaction, meaning other transactions cannot modify or delete rows matched "
"by a ``FOR UPDATE`` query."
msgstr ""

# 2be3435c2a194092b8c1d7d37acdb703
#: ../../releases/1.4.txt:60
msgid ""
"For more details, see the documentation for :meth:`~django.db.models.query."
"QuerySet.select_for_update`."
msgstr ""

# e3ccf1a12eb6469fb3c1e73be408ec8f
#: ../../releases/1.4.txt:64
msgid "``Model.objects.bulk_create`` in the ORM"
msgstr ""

# f84c8bdc008544e58097d4305b102b3e
#: ../../releases/1.4.txt:66
msgid ""
"This method lets you create multiple objects more efficiently. It can result "
"in significant performance increases if you have many objects."
msgstr ""

# 22d19dddd66e4b3ebfb64a9bc64b0aff
#: ../../releases/1.4.txt:69
msgid ""
"Django makes use of this internally, meaning some operations (such as "
"database setup for test suites) have seen a performance benefit as a result."
msgstr ""

# 7570072720884645a516844f1a5e071a
#: ../../releases/1.4.txt:72
msgid ""
"See the :meth:`~django.db.models.query.QuerySet.bulk_create` docs for more "
"information."
msgstr ""

# 1999d227efff4d2a86a13bb52728a2f7
#: ../../releases/1.4.txt:76
msgid "``QuerySet.prefetch_related``"
msgstr ""

# 908aea2a2edd4174a417d058d6710f1d
#: ../../releases/1.4.txt:78
msgid ""
"Similar to :meth:`~django.db.models.query.QuerySet.select_related` but with "
"a different strategy and broader scope, :meth:`~django.db.models.query."
"QuerySet.prefetch_related` has been added to :class:`~django.db.models.query."
"QuerySet`. This method returns a new ``QuerySet`` that will prefetch each of "
"the specified related lookups in a single batch as soon as the query begins "
"to be evaluated. Unlike ``select_related``, it does the joins in Python, not "
"in the database, and supports many-to-many relationships, :class:`~django."
"contrib.contenttypes.generic.GenericForeignKey` and more. This allows you to "
"fix a very common performance problem in which your code ends up doing O(n) "
"database queries (or worse) if objects on your primary ``QuerySet`` each "
"have many related objects that you also need to fetch."
msgstr ""

# 2d725bf09f8e46a083d783ad0987fa81
#: ../../releases/1.4.txt:92
msgid "Improved password hashing"
msgstr ""

# 5ee8d81fe9e44950b0ad283794ea98fb
#: ../../releases/1.4.txt:94
msgid ""
"Django's auth system (``django.contrib.auth``) stores passwords using a one-"
"way algorithm. Django 1.3 uses the SHA1_ algorithm, but increasing processor "
"speeds and theoretical attacks have revealed that SHA1 isn't as secure as "
"we'd like. Thus, Django 1.4 introduces a new password storage system: by "
"default Django now uses the PBKDF2_ algorithm (as recommended by NIST_). You "
"can also easily choose a different algorithm (including the popular bcrypt_ "
"algorithm). For more details, see :ref:`auth_password_storage`."
msgstr ""

# e7907206634946a59844ed631d7b632a
#: ../../releases/1.4.txt:108
msgid "HTML5 doctype"
msgstr ""

# ef96e103a613431ea63c5ce8d1843704
#: ../../releases/1.4.txt:110
msgid ""
"We've switched the admin and other bundled templates to use the HTML5 "
"doctype. While Django will be careful to maintain compatibility with older "
"browsers, this change means that you can use any HTML5 features you need in "
"admin pages without having to lose HTML validity or override the provided "
"templates to change the doctype."
msgstr ""

# a031c5e0858045599046136e779e376e
#: ../../releases/1.4.txt:117
msgid "List filters in admin interface"
msgstr ""

# 0cca7f72ed6a450c8cabbc9e46420db2
#: ../../releases/1.4.txt:119
msgid ""
"Prior to Django 1.4, the :mod:`~django.contrib.admin` app let you specify "
"change list filters by specifying a field lookup, but it didn't allow you to "
"create custom filters. This has been rectified with a simple API (previously "
"used internally and known as \"FilterSpec\"). For more details, see the "
"documentation for :attr:`~django.contrib.admin.ModelAdmin.list_filter`."
msgstr ""

# ab0f1ba23c1b4931b4cc882a3f4ac8c6
#: ../../releases/1.4.txt:126
msgid "Multiple sort in admin interface"
msgstr ""

# d82a12721a2b4761a8f6ae51cb6c86a9
#: ../../releases/1.4.txt:128
msgid ""
"The admin change list now supports sorting on multiple columns. It respects "
"all elements of the :attr:`~django.contrib.admin.ModelAdmin.ordering` "
"attribute, and sorting on multiple columns by clicking on headers is "
"designed to mimic the behavior of desktop GUIs. We also added a :meth:"
"`~django.contrib.admin.ModelAdmin.get_ordering` method for specifying the "
"ordering dynamically (i.e., depending on the request)."
msgstr ""

# fb2afe95925e413f8649f13f8a0bbc42
#: ../../releases/1.4.txt:136
msgid "New ``ModelAdmin`` methods"
msgstr ""

# 5b22f126f045437fbe710655b7223b33
#: ../../releases/1.4.txt:138
msgid ""
"We added a :meth:`~django.contrib.admin.ModelAdmin.save_related` method to :"
"mod:`~django.contrib.admin.ModelAdmin` to ease customization of how related "
"objects are saved in the admin."
msgstr ""

# 54174c53eb5847a9bc78f377d0e2471d
#: ../../releases/1.4.txt:142
msgid ""
"Two other new :class:`~django.contrib.admin.ModelAdmin` methods, :meth:"
"`~django.contrib.admin.ModelAdmin.get_list_display` and :meth:`~django."
"contrib.admin.ModelAdmin.get_list_display_links` enable dynamic "
"customization of fields and links displayed on the admin change list."
msgstr ""

# 011becf1613d4af7b0f3680dbcb70a5e
#: ../../releases/1.4.txt:149
msgid "Admin inlines respect user permissions"
msgstr ""

# dea8de3165e146a98274028ea21e60cf
#: ../../releases/1.4.txt:151
msgid ""
"Admin inlines now only allow those actions for which the user has "
"permission. For ``ManyToMany`` relationships with an auto-created "
"intermediate model (which does not have its own permissions), the change "
"permission for the related model determines if the user has the permission "
"to add, change or delete relationships."
msgstr ""

# bd058ddf9d624cb28db4f5a51d2cc996
#: ../../releases/1.4.txt:158
msgid "Tools for cryptographic signing"
msgstr ""

# a1a2fe03fc5a404f9af9c87491b7ef1c
#: ../../releases/1.4.txt:160
msgid ""
"Django 1.4 adds both a low-level API for signing values and a high-level API "
"for setting and reading signed cookies, one of the most common uses of "
"signing in Web applications."
msgstr ""

# 77003a46424a4fcaa930d6a267ef0e62
#: ../../releases/1.4.txt:164
msgid ""
"See the :doc:`cryptographic signing </topics/signing>` docs for more "
"information."
msgstr ""

# 8379f7a3c2df4b37aafc440319abcc61
#: ../../releases/1.4.txt:168
msgid "Cookie-based session backend"
msgstr ""

# dde796f39c954a4c9117de425b7a9a1f
#: ../../releases/1.4.txt:170
msgid ""
"Django 1.4 introduces a cookie-based session backend that uses the tools "
"for :doc:`cryptographic signing </topics/signing>` to store the session data "
"in the client's browser."
msgstr ""

# 675d826b49bf4b6f84d3cf011eadb5c8
#: ../../releases/1.4.txt:176
msgid ""
"Session data is signed and validated by the server, but it's not encrypted. "
"This means a user can view any data stored in the session but cannot change "
"it. Please read the documentation for further clarification before using "
"this backend."
msgstr ""

# 61563dcfb8d34d8280068253c18a4f9b
#: ../../releases/1.4.txt:181
msgid ""
"See the :ref:`cookie-based session backend <cookie-session-backend>` docs "
"for more information."
msgstr ""

# f59a922c7120466786ef4daefa55ac54
#: ../../releases/1.4.txt:185
msgid "New form wizard"
msgstr ""

# c09addeecba34871b66d50a73c3fb1c2
#: ../../releases/1.4.txt:187
msgid ""
"The previous ``FormWizard`` from the formtools contrib app has been replaced "
"with a new implementation based on the class-based views introduced in "
"Django 1.3. It features a pluggable storage API and doesn't require the "
"wizard to pass around hidden fields for every previous step."
msgstr ""

# 4cba8f8b817a44759e49c1a24e75ae71
#: ../../releases/1.4.txt:192
msgid ""
"Django 1.4 ships with a session-based storage backend and a cookie-based "
"storage backend. The latter uses the tools for :doc:`cryptographic signing </"
"topics/signing>` also introduced in Django 1.4 to store the wizard's state "
"in the user's cookies."
msgstr ""

# 4ea104ece16c497895a5c47b7266adfa
#: ../../releases/1.4.txt:197
msgid ""
"See the :doc:`form wizard </ref/contrib/formtools/form-wizard>` docs for "
"more information."
msgstr ""

# dbebb09dbeb24b8ca88cc45d6017eebd
#: ../../releases/1.4.txt:201
msgid "``reverse_lazy``"
msgstr ""

# 78f1c8c19d8b4a6ba0fe856ccd3ca094
#: ../../releases/1.4.txt:203
msgid ""
"A lazily evaluated version of :func:`django.core.urlresolvers.reverse` was "
"added to allow using URL reversals before the project's URLconf gets loaded."
msgstr ""

# c0cc8909e3244325b1a730de45f0a260
#: ../../releases/1.4.txt:207
msgid "Translating URL patterns"
msgstr ""

# b26f99cebacf4bd4b9a92cdcf2bc1d12
#: ../../releases/1.4.txt:209
msgid ""
"Django can now look for a language prefix in the URLpattern when using the "
"new :func:`~django.conf.urls.i18n.i18n_patterns` helper function. It's also "
"now possible to define translatable URL patterns using :func:`~django.utils."
"translation.ugettext_lazy`. See :ref:`url-internationalization` for more "
"information about the language prefix and how to internationalize URL "
"patterns."
msgstr ""

# 97d694a0a1534720b1a8c3dbaf8fd8d7
#: ../../releases/1.4.txt:217
msgid ""
"Contextual translation support for ``{% trans %}`` and ``{% blocktrans %}``"
msgstr ""

# a36b7fe1678f4321aa1a82ed6dbd141b
#: ../../releases/1.4.txt:219
msgid ""
"The :ref:`contextual translation<contextual-markers>` support introduced in "
"Django 1.3 via the ``pgettext`` function has been extended to the :ttag:"
"`trans` and :ttag:`blocktrans` template tags using the new ``context`` "
"keyword."
msgstr ""

# 186c83c5a114452abcbb2b9ea6613551
#: ../../releases/1.4.txt:225
msgid "Customizable ``SingleObjectMixin`` URLConf kwargs"
msgstr ""

# e4ee7a4349704a23b9bc8b95592eb5e7
#: ../../releases/1.4.txt:227
msgid ""
"Two new attributes, :attr:`pk_url_kwarg<django.views.generic.detail."
"SingleObjectMixin.pk_url_kwarg>` and :attr:`slug_url_kwarg<django.views."
"generic.detail.SingleObjectMixin.slug_url_kwarg>`, have been added to :class:"
"`~django.views.generic.detail.SingleObjectMixin` to enable the customization "
"of URLconf keyword arguments used for single object generic views."
msgstr ""

# efea427b055f43aba8e10a280f7a7b71
#: ../../releases/1.4.txt:236
msgid "Assignment template tags"
msgstr ""

# d21ce218e7ee44a9b8404c18ce8e7f08
#: ../../releases/1.4.txt:238
msgid ""
"A new :ref:`assignment_tag<howto-custom-template-tags-assignment-tags>` "
"helper function was added to ``template.Library`` to ease the creation of "
"template tags that store data in a specified context variable."
msgstr ""

# 7544b2ab11134670bb73e61f8485685a
#: ../../releases/1.4.txt:243
msgid "``*args`` and ``**kwargs`` support for template tag helper functions"
msgstr ""

# cfb2fb4e945a437f8b831a1e00188e70
#: ../../releases/1.4.txt:245
msgid ""
"The :ref:`simple_tag<howto-custom-template-tags-simple-tags>`, :ref:"
"`inclusion_tag <howto-custom-template-tags-inclusion-tags>` and newly "
"introduced :ref:`assignment_tag<howto-custom-template-tags-assignment-tags>` "
"template helper functions may now accept any number of positional or keyword "
"arguments. For example:"
msgstr ""

# 19e6a7fd6df84c5cbe5319e4576e8a8f
#: ../../releases/1.4.txt:261
msgid ""
"Then, in the template, any number of arguments may be passed to the template "
"tag. For example:"
msgstr ""

# 6f539dfdcec442899dfcad6557b01f67
#: ../../releases/1.4.txt:269
msgid "No wrapping of exceptions in ``TEMPLATE_DEBUG`` mode"
msgstr ""

# 0fc60bd601d64e638d576eff0f870a0b
#: ../../releases/1.4.txt:271
msgid ""
"In previous versions of Django, whenever the :setting:`TEMPLATE_DEBUG` "
"setting was ``True``, any exception raised during template rendering (even "
"exceptions unrelated to template syntax) were wrapped in "
"``TemplateSyntaxError`` and re-raised. This was done in order to provide "
"detailed template source location information in the debug 500 page."
msgstr ""

# 04734159308c4d43b8b1e7a8dd2e3ff2
#: ../../releases/1.4.txt:277
msgid ""
"In Django 1.4, exceptions are no longer wrapped. Instead, the original "
"exception is annotated with the source information. This means that catching "
"exceptions from template rendering is now consistent regardless of the value "
"of :setting:`TEMPLATE_DEBUG`, and there's no need to catch and unwrap "
"``TemplateSyntaxError`` in order to catch other errors."
msgstr ""

# aea00db3e90944a080ea186c7ad6340c
#: ../../releases/1.4.txt:284
msgid "``truncatechars`` template filter"
msgstr ""

# a585d9d144104881952565643659701d
#: ../../releases/1.4.txt:286
msgid ""
"This new filter truncates a string to be no longer than the specified number "
"of characters. Truncated strings end with a translatable ellipsis sequence "
"(\"...\"). See the documentation for :tfilter:`truncatechars` for more "
"details."
msgstr ""

# c6bd44649b104aeb8934995b4660ad89
#: ../../releases/1.4.txt:292
msgid "``static`` template tag"
msgstr ""

# 17343231d4c74e7fb816eb073ab9ba0c
#: ../../releases/1.4.txt:294
msgid ""
"The :mod:`staticfiles<django.contrib.staticfiles>` contrib app has a new :"
"ttag:`static<staticfiles-static>` template tag to refer to files saved with "
"the :setting:`STATICFILES_STORAGE` storage backend. It uses the storage "
"backend's ``url`` method and therefore supports advanced features such as :"
"ref:`serving files from a cloud service<staticfiles-from-cdn>`."
msgstr ""

# 6c26a2c211044807a1fc790735c6b2b5
#: ../../releases/1.4.txt:301
msgid "``CachedStaticFilesStorage`` storage backend"
msgstr ""

# 41866b663d97400d92c0de3b6f536b2c
#: ../../releases/1.4.txt:303
msgid ""
"The :mod:`staticfiles<django.contrib.staticfiles>` contrib app now has a :"
"class:`~django.contrib.staticfiles.storage.CachedStaticFilesStorage` backend "
"that caches the files it saves (when running the :djadmin:`collectstatic` "
"management command) by appending the MD5 hash of the file's content to the "
"filename. For example, the file ``css/styles.css`` would also be saved as "
"``css/styles.55e7cbb9ba48.css``"
msgstr ""

# 5c96e6a904cd4fa5a1a4476e3eaadb6f
#: ../../releases/1.4.txt:310
msgid ""
"See the :class:`~django.contrib.staticfiles.storage."
"CachedStaticFilesStorage` docs for more information."
msgstr ""

# 4a66e55ebbe14079ab5988aaf1991114
#: ../../releases/1.4.txt:314
msgid "Simple clickjacking protection"
msgstr ""

# 561c2fbb6e7548b89985881295b9a83a
#: ../../releases/1.4.txt:316
msgid ""
"We've added a middleware to provide easy protection against `clickjacking "
"<http://en.wikipedia.org/wiki/Clickjacking>`_ using the ``X-Frame-Options`` "
"header. It's not enabled by default for backwards compatibility reasons, but "
"you'll almost certainly want to :doc:`enable it </ref/clickjacking/>` to "
"help plug that security hole for browsers that support the header."
msgstr ""

# ec72485bcd5f4e76af1a0b51ba5fd537
#: ../../releases/1.4.txt:323
msgid "CSRF improvements"
msgstr ""

# a37068af316543c0b20d9969abe51abc
#: ../../releases/1.4.txt:325
msgid ""
"We've made various improvements to our CSRF features, including the :func:"
"`~django.views.decorators.csrf.ensure_csrf_cookie` decorator, which can help "
"with AJAX-heavy sites; protection for PUT and DELETE requests; and the :"
"setting:`CSRF_COOKIE_SECURE` and :setting:`CSRF_COOKIE_PATH` settings, which "
"can improve the security and usefulness of CSRF protection. See the :doc:"
"`CSRF docs </ref/contrib/csrf>` for more information."
msgstr ""

# 32b456f0445344b299ff8c8382f4b90e
#: ../../releases/1.4.txt:333
msgid "Error report filtering"
msgstr ""

# 604b7aba72814c91842a13f10bb35bee
#: ../../releases/1.4.txt:335
msgid ""
"We added two function decorators, :func:`sensitive_variables` and :func:"
"`sensitive_post_parameters`, to allow designating the local variables and "
"POST parameters that may contain sensitive information and should be "
"filtered out of error reports."
msgstr ""

# 2f659736d838490993fbeb2df88085f6
#: ../../releases/1.4.txt:340
msgid ""
"All POST parameters are now systematically filtered out of error reports for "
"certain views (``login``, ``password_reset_confirm``, ``password_change`` "
"and ``add_view`` in :mod:`django.contrib.auth.views`, as well as "
"``user_change_password`` in the admin app) to prevent the leaking of "
"sensitive information such as user passwords."
msgstr ""

# b21a123b10804eff8e53c74c5d31a055
#: ../../releases/1.4.txt:346
msgid ""
"You can override or customize the default filtering by writing a :ref:"
"`custom filter<custom-error-reports>`. For more information see the docs on :"
"ref:`Filtering error reports<filtering-error-reports>`."
msgstr ""

# e78fe8cfe986466b8c13f92f55d6645c
#: ../../releases/1.4.txt:351
msgid "Extended IPv6 support"
msgstr ""

# 5af6070aeae447679a1088bc76abb3fd
#: ../../releases/1.4.txt:353
msgid ""
"The previously added support for IPv6 addresses when using the runserver "
"management command in Django 1.3 has been extended with a :class:`~django.db."
"models.fields.GenericIPAddressField` model field, a :class:`~django.forms."
"fields.GenericIPAddressField` form field and the validators :data:`~django."
"core.validators.validate_ipv46_address` and :data:`~django.core.validators."
"validate_ipv6_address`"
msgstr ""

# acf4c9754b024462ad015bff89a6f02d
#: ../../releases/1.4.txt:361
msgid "Updated default project layout and ``manage.py``"
msgstr ""

# 516c1e597cf54ea8ac3ac6479a77ee68
#: ../../releases/1.4.txt:363
msgid ""
"Django 1.4 ships with an updated default project layout and ``manage.py`` "
"file for the :djadmin:`startproject` management command. These fix some "
"issues with the previous ``manage.py`` handling of Python import paths that "
"caused double imports, trouble moving from development to deployment, and "
"other difficult-to-debug path issues."
msgstr ""

# 4d7e3d4d6d56499ea4c0a25fbbd688e3
#: ../../releases/1.4.txt:369
msgid ""
"The previous ``manage.py`` called functions that are now deprecated, and "
"thus projects upgrading to Django 1.4 should update their ``manage.py``. "
"(The old-style ``manage.py`` will continue to work as before until Django "
"1.6. In 1.5 it will raise ``DeprecationWarning``)."
msgstr ""

# 0220e674a57342188d297d08955e59bd
#: ../../releases/1.4.txt:374
msgid "The new recommended ``manage.py`` file should look like this::"
msgstr ""

# fbef75321e7d42cbb82253a1c7af6d26
#: ../../releases/1.4.txt:386
msgid ""
"``{{ project_name }}`` should be replaced with the Python package name of "
"the actual project."
msgstr ""

# 50a21d03dd934024b079c30fc9d86f76
#: ../../releases/1.4.txt:389
msgid ""
"If settings, URLconfs and apps within the project are imported or referenced "
"using the project name prefix (e.g. ``myproject.settings``, ``ROOT_URLCONF = "
"\"myproject.urls\"``, etc), the new ``manage.py`` will need to be moved one "
"directory up, so it is outside the project package rather than adjacent to "
"``settings.py`` and ``urls.py``."
msgstr ""

# c8d9f2f0431b4ffe94a039719cc66b99
#: ../../releases/1.4.txt:395
msgid "For instance, with the following layout::"
msgstr ""

# 7e2793cc5d7e436ba8c387acbc3aee47
#: ../../releases/1.4.txt:406
msgid ""
"You could import ``mysite.settings``, ``mysite.urls``, and ``mysite.myapp``, "
"but not ``settings``, ``urls``, or ``myapp`` as top-level modules."
msgstr ""

# 627a9fbdac7d457fa2a32a619973afb7
#: ../../releases/1.4.txt:409
msgid ""
"Anything imported as a top-level module can be placed adjacent to the new "
"``manage.py``. For instance, to decouple \"myapp\" from the project module "
"and import it as just ``myapp``, place it outside the ``mysite/`` directory::"
msgstr ""

# cb7c51e53b6240b9ba5061a6906ee938
#: ../../releases/1.4.txt:422
msgid ""
"If the same code is imported inconsistently (some places with the project "
"prefix, some places without it), the imports will need to be cleaned up when "
"switching to the new ``manage.py``."
msgstr ""

# 92ca01c396e4462a91c890fbf5a6576e
#: ../../releases/1.4.txt:427
msgid "Improved WSGI support"
msgstr ""

# 208a26d4d41e45a38970899fb7bc7355
#: ../../releases/1.4.txt:429
msgid ""
"The :djadmin:`startproject` management command now adds a :file:`wsgi.py` "
"module to the initial project layout, containing a simple WSGI application "
"that can be used for :doc:`deploying with WSGI app servers</howto/deployment/"
"wsgi/index>`."
msgstr ""

# 59c9e53007af4660bab7ac920990a5cd
#: ../../releases/1.4.txt:434
msgid ""
"The :djadmin:`built-in development server<runserver>` now supports using an "
"externally-defined WSGI callable, which makes it possible to run runserver "
"with the same WSGI configuration that is used for deployment. The new :"
"setting:`WSGI_APPLICATION` setting lets you configure which WSGI callable :"
"djadmin:`runserver` uses."
msgstr ""

# a4d8986e13dc443284538a4dffe938b4
#: ../../releases/1.4.txt:440
msgid ""
"(The :djadmin:`runfcgi` management command also internally wraps the WSGI "
"callable configured via :setting:`WSGI_APPLICATION`.)"
msgstr ""

# 9ca0728fa1eb476a96906a2c214777b0
#: ../../releases/1.4.txt:444
msgid "Custom project and app templates"
msgstr ""

# 161db856870945439bc0c863508b20b3
#: ../../releases/1.4.txt:446
msgid ""
"The :djadmin:`startapp` and :djadmin:`startproject` management commands now "
"have a ``--template`` option for specifying a path or URL to a custom app or "
"project template."
msgstr ""

# f14707ebf2a54f18bdbb9595b7ad945e
#: ../../releases/1.4.txt:450
msgid ""
"For example, Django will use the ``/path/to/my_project_template`` directory "
"when you run the following command::"
msgstr ""

# 01216d7eb45f4044b006f9bc14372e55
#: ../../releases/1.4.txt:455
msgid ""
"You can also now provide a destination directory as the second argument to "
"both :djadmin:`startapp` and :djadmin:`startproject`::"
msgstr ""

# dadf8bd0ebef418998ca5fabcad7d757
#: ../../releases/1.4.txt:461
msgid ""
"For more information, see the :djadmin:`startapp` and :djadmin:"
"`startproject` documentation."
msgstr ""

# 68d556b7b1f84456841c8aa99c767e0f
#: ../../releases/1.4.txt:465
msgid "Support for time zones"
msgstr ""

# 2a0728ce1faf4df68a0d09b157f9608f
#: ../../releases/1.4.txt:467
msgid ""
"Django 1.4 adds :ref:`support for time zones <time-zones>`. When it's "
"enabled, Django stores date and time information in UTC in the database, "
"uses time-zone-aware datetime objects internally and translates them to the "
"end user's time zone in templates and forms."
msgstr ""

# ff2a53384e164974aa1e649efc366cfc
#: ../../releases/1.4.txt:472
msgid "Reasons for using this feature include:"
msgstr ""

# e104cc56f9094aaa9c069f69803383d6
#: ../../releases/1.4.txt:474
msgid "Customizing date and time display for users around the world."
msgstr ""

# 016018eca26b4bf88b00ca3571e0fd9f
#: ../../releases/1.4.txt:475
msgid ""
"Storing datetimes in UTC for database portability and interoperability. "
"(This argument doesn't apply to PostgreSQL, because it already stores "
"timestamps with time zone information in Django 1.3.)"
msgstr ""

# 9a61d2f1a85241fca34734d3e8df9f46
#: ../../releases/1.4.txt:478
msgid "Avoiding data corruption problems around DST transitions."
msgstr ""

# 4b485e5c64774fe8b26dc7e957de838f
#: ../../releases/1.4.txt:480
msgid ""
"Time zone support is enabled by default in new projects created with :"
"djadmin:`startproject`. If you want to use this feature in an existing "
"project, read the :ref:`migration guide <time-zones-migration-guide>`."
msgstr ""

# f3838eae2f494217b5e4aa3d3c9795bb
#: ../../releases/1.4.txt:485
msgid "HTML comparisons in tests"
msgstr ""

# f451bc5d55fb4ba59a97504b037036ed
#: ../../releases/1.4.txt:487
msgid ""
"The :class:`~django.test.testcase.TestCase` base class now has some helpers "
"to compare HTML without tripping over irrelevant differences in whitespace, "
"argument quoting/ordering and closing of self-closing tags. You can either "
"compare HTML directly with the new :meth:`~django.test.testcase.TestCase."
"assertHTMLEqual` and :meth:`~django.test.testcase.TestCase."
"assertHTMLNotEqual` assertions, or use the ``html=True`` flag with :meth:"
"`~django.test.testcase.TestCase.assertContains` and :meth:`~django.test."
"testcase.TestCase.assertNotContains` to test whether the client's response "
"contains a given HTML fragment. See the :ref:`assertion "
"documentation<assertions>` for more."
msgstr ""

# a23e3f090d3f49999e13be04e2506dbf
#: ../../releases/1.4.txt:500
msgid "Two new date format strings"
msgstr ""

# 1396900e66934767bfc9d34d381a9f35
#: ../../releases/1.4.txt:502
msgid ""
"Two new :tfilter:`date` formats were added for use in template filters, "
"template tags and :ref:`format-localization`:"
msgstr ""

# 40939dc789cf4c38833c7c868f920ff1
#: ../../releases/1.4.txt:505
msgid "``e`` -- the name of the timezone of the given datetime object"
msgstr ""

# 1b28a80ccc8b432794842638919f2b1d
#: ../../releases/1.4.txt:506
msgid "``o`` -- the ISO 8601 year number"
msgstr ""

# 8604e7cd1bec4b74a031534df224b3e8
#: ../../releases/1.4.txt:508
msgid ""
"Please make sure to update your :ref:`custom format files <custom-format-"
"files>` if they contain either ``e`` or ``o`` in a format string. For "
"example a Spanish localization format previously only escaped the ``d`` "
"format character::"
msgstr ""

# 4880243424924888a3253296e0b8f34a
#: ../../releases/1.4.txt:515
msgid "But now it needs to also escape ``e`` and ``o``::"
msgstr ""

# f1e3414517ec4b57819ca95e4b681bea
#: ../../releases/1.4.txt:519
msgid "For more information, see the :tfilter:`date` documentation."
msgstr ""

# 6f1e07a35b39497e99f943e2e7a5d0bc
#: ../../releases/1.4.txt:522
msgid "Minor features"
msgstr ""

# 043344790fae49f69e10f928e4766244
#: ../../releases/1.4.txt:524
msgid "Django 1.4 also includes several smaller improvements worth noting:"
msgstr ""

# 836ceddf4fd043c1a38cfac1e1d8526a
#: ../../releases/1.4.txt:526
msgid ""
"A more usable stacktrace in the technical 500 page. Frames in the stack "
"trace that reference Django's framework code are dimmed out, while frames in "
"application code are slightly emphasized. This change makes it easier to "
"scan a stacktrace for issues in application code."
msgstr ""

# b63ca0414bb141acb917633452fe39f4
#: ../../releases/1.4.txt:531
msgid ":doc:`Tablespace support </topics/db/tablespaces>` in PostgreSQL."
msgstr ""

# 044457d68d8e436bb6481e8cb97f9936
#: ../../releases/1.4.txt:533
msgid "Customizable names for :meth:`~django.template.Library.simple_tag`."
msgstr ""

# b7ca5dba7b534c4895518b86dab351f6
#: ../../releases/1.4.txt:535
msgid ""
"In the documentation, a helpful :doc:`security overview </topics/security>` "
"page."
msgstr ""

# 21835655d3b8415f946e25da7c3dd0a0
#: ../../releases/1.4.txt:538
msgid ""
"The :func:`django.contrib.auth.models.check_password` function has been "
"moved to the :mod:`django.contrib.auth.utils` module. Importing it from the "
"old location will still work, but you should update your imports."
msgstr ""

# af128f3506364c9f9441c169964e3065
#: ../../releases/1.4.txt:542
msgid ""
"The :djadmin:`collectstatic` management command now has a ``--clear`` option "
"to delete all files at the destination before copying or linking the static "
"files."
msgstr ""

# 9bd925a95da94cc987673d188e617e50
#: ../../releases/1.4.txt:546
msgid ""
"It's now possible to load fixtures containing forward references when using "
"MySQL with the InnoDB database engine."
msgstr ""

# b3f297b0142541818619925fc3cae768
#: ../../releases/1.4.txt:549
msgid ""
"A new 403 response handler has been added as ``'django.views.defaults."
"permission_denied'``. You can set your own handler by setting the value of :"
"data:`django.conf.urls.handler403`. See the documentation about :ref:`the "
"403 (HTTP Forbidden) view<http_forbidden_view>` for more information."
msgstr ""

# 525351aa0b6c423da0d285d4ccba870b
#: ../../releases/1.4.txt:555
msgid ""
"The :djadmin:`makemessages` command uses a new and more accurate lexer, "
"`JsLex`_, for extracting translatable strings from JavaScript files."
msgstr ""

# b4585e255a83480a83ebc782ea804a5b
#: ../../releases/1.4.txt:560
msgid ""
"The :ttag:`trans` template tag now takes an optional ``as`` argument to be "
"able to retrieve a translation string without displaying it but setting a "
"template context variable instead."
msgstr ""

# 912218df596f4a88812e3a464bfe3555
#: ../../releases/1.4.txt:564
msgid "The :ttag:`if` template tag now supports ``{% elif %}`` clauses."
msgstr ""

# a1218aff09694c3a9beeb50a9f029079
#: ../../releases/1.4.txt:566
msgid ""
"If your Django app is behind a proxy, you might find the new :setting:"
"`SECURE_PROXY_SSL_HEADER` setting useful. It solves the problem of your "
"proxy \"eating\" the fact that a request came in via HTTPS. But only use "
"this setting if you know what you're doing."
msgstr ""

# d7c3dbfff0f54393a2468984ee1c73ff
#: ../../releases/1.4.txt:571
msgid ""
"A new, plain-text, version of the HTTP 500 status code internal error page "
"served when :setting:`DEBUG` is ``True`` is now sent to the client when "
"Django detects that the request has originated in JavaScript code. (:meth:"
"`~django.http.HttpRequest.is_ajax` is used for this.)"
msgstr ""

# 48cc47e2ad1042039f96549292c0abf4
#: ../../releases/1.4.txt:576
msgid ""
"Like its HTML counterpart, it contains a collection of different pieces of "
"information about the state of the application."
msgstr ""

# cb68eedd1c7043638abbbe4931af1cc2
#: ../../releases/1.4.txt:579
msgid ""
"This should make it easier to read when debugging interaction with client-"
"side JavaScript."
msgstr ""

# 2579c3abc215444a80cd0e87da81f3c2
#: ../../releases/1.4.txt:582
msgid ""
"Added the :djadminopt:`--no-location` option to the :djadmin:`makemessages` "
"command."
msgstr ""

# 8e1266400a65415d99d3b51ceba865a8
#: ../../releases/1.4.txt:585
msgid ""
"Changed the ``locmem`` cache backend to use ``pickle.HIGHEST_PROTOCOL`` for "
"better compatibility with the other cache backends."
msgstr ""

# cd1e90ffb70c4d72825303bc9c0e5a07
#: ../../releases/1.4.txt:589
msgid ""
"Added support in the ORM for generating ``SELECT`` queries containing "
"``DISTINCT ON``."
msgstr ""

# 3e83df77fa8b45a88f1548dca50817b0
#: ../../releases/1.4.txt:592
msgid ""
"The ``distinct()`` ``QuerySet`` method now accepts an optional list of model "
"field names. If specified, then the ``DISTINCT`` statement is limited to "
"these fields. This is only supported in PostgreSQL."
msgstr ""

# fceb014f54c747dba8ee8c8105cc75cd
#: ../../releases/1.4.txt:596
msgid ""
"For more details, see the documentation for :meth:`~django.db.models.query."
"QuerySet.distinct`."
msgstr ""

# af7c1bb0596d4166ab731276328f72e0
#: ../../releases/1.4.txt:599
msgid ""
"The admin login page will add a password reset link if you include a URL "
"with the name `'admin_password_reset'` in your urls.py, so plugging in the "
"built-in password reset mechanism and making it available is now much "
"easier. For details, see :ref:`auth_password_reset`."
msgstr ""

# 524263dba04c4018885fca52a452a560
#: ../../releases/1.4.txt:604
msgid ""
"The MySQL database backend can now make use of the savepoint feature "
"implemented by MySQL version 5.0.3 or newer with the InnoDB storage engine."
msgstr ""

# 24b6403c218a47868649453711a0d862
#: ../../releases/1.4.txt:607
msgid ""
"It's now possible to pass initial values to the model forms that are part of "
"both model formsets and inline model formsets as returned from factory "
"functions ``modelformset_factory`` and ``inlineformset_factory`` "
"respectively just like with regular formsets. However, initial values only "
"apply to extra forms, i.e. those which are not bound to an existing model "
"instance."
msgstr ""

# adbf969ece544eb5aed7c55ea07b761e
#: ../../releases/1.4.txt:613
msgid ""
"The sitemaps framework can now handle HTTPS links using the new :attr:"
"`Sitemap.protocol <django.contrib.sitemaps.Sitemap.protocol>` class "
"attribute."
msgstr ""

# 232175d6a0784bcdb97ef33e5cce4f5b
#: ../../releases/1.4.txt:618
msgid "Backwards incompatible changes in 1.4"
msgstr ""

# bc37cd16565545f5b68fc16698f35543
#: ../../releases/1.4.txt:621
msgid "django.contrib.admin"
msgstr ""

# b76270264e0a4906a32b47d893c6074b
#: ../../releases/1.4.txt:623
msgid ""
"The included administration app ``django.contrib.admin`` has for a long time "
"shipped with a default set of static files such as JavaScript, images and "
"stylesheets. Django 1.3 added a new contrib app ``django.contrib."
"staticfiles`` to handle such files in a generic way and defined conventions "
"for static files included in apps."
msgstr ""

# 43cd1a7895d34db1ba1c3a10977a6ff0
#: ../../releases/1.4.txt:629
msgid ""
"Starting in Django 1.4, the admin's static files also follow this "
"convention, to make the files easier to deploy. In previous versions of "
"Django, it was also common to define an ``ADMIN_MEDIA_PREFIX`` setting to "
"point to the URL where the admin's static files live on a Web server. This "
"setting has now been deprecated and replaced by the more general setting :"
"setting:`STATIC_URL`. Django will now expect to find the admin static files "
"under the URL ``<STATIC_URL>/admin/``."
msgstr ""

# 713f25459342449fa6be7bd7c2f2ce07
#: ../../releases/1.4.txt:637
msgid ""
"If you've previously used a URL path for ``ADMIN_MEDIA_PREFIX`` (e.g. ``/"
"media/``) simply make sure :setting:`STATIC_URL` and :setting:`STATIC_ROOT` "
"are configured and your Web server serves those files correctly. The "
"development server continues to serve the admin files just like before. Read "
"the :doc:`static files howto </howto/static-files>` for more details."
msgstr ""

# c6762e3d496d46d58269eecdd4212b73
#: ../../releases/1.4.txt:643
msgid ""
"If your ``ADMIN_MEDIA_PREFIX`` is set to an specific domain (e.g. ``http://"
"media.example.com/admin/``), make sure to also set your :setting:"
"`STATIC_URL` setting to the correct URL -- for example, ``http://media."
"example.com/``."
msgstr ""

# 96ae8e2e041c4dfc8f77142c8e5e45b8
#: ../../releases/1.4.txt:650
msgid ""
"If you're implicitly relying on the path of the admin static files within "
"Django's source code, you'll need to update that path. The files were moved "
"from :file:`django/contrib/admin/media/` to :file:`django/contrib/admin/"
"static/admin/`."
msgstr ""

# 663c16eeb39e4e1a8aba077c11401b38
#: ../../releases/1.4.txt:656
msgid "Supported browsers for the admin"
msgstr ""

# fde862c4f2b349ddaa93d589278d318d
#: ../../releases/1.4.txt:658
msgid ""
"Django hasn't had a clear policy on which browsers are supported by the "
"admin app. Our new policy formalizes existing practices: `YUI's A-grade`_ "
"browsers should provide a fully-functional admin experience, with the "
"notable exception of Internet Explorer 6, which is no longer supported."
msgstr ""

# 7e489b60d6a2461ba8217244537fdecf
#: ../../releases/1.4.txt:663
msgid ""
"Released over 10 years ago, IE6 imposes many limitations on modern Web "
"development. The practical implications of this policy are that contributors "
"are free to improve the admin without consideration for these limitations."
msgstr ""

# 4496b333acef40108b71644e29123ca8
#: ../../releases/1.4.txt:667
msgid ""
"Obviously, this new policy **has no impact** on sites you develop using "
"Django. It only applies to the Django admin. Feel free to develop apps "
"compatible with any range of browsers."
msgstr ""

# 78f2860b65b84a2d934172f804da2bc8
#: ../../releases/1.4.txt:674
msgid "Removed admin icons"
msgstr ""

# b8ac4108913247059c2f51085ead2e84
#: ../../releases/1.4.txt:676
msgid ""
"As part of an effort to improve the performance and usability of the admin's "
"change-list sorting interface and :attr:`horizontal <django.contrib.admin."
"ModelAdmin.filter_horizontal>` and :attr:`vertical <django.contrib.admin."
"ModelAdmin.filter_vertical>` \"filter\" widgets, some icon files were "
"removed and grouped into two sprite files."
msgstr ""

# 995019e170ad4514a67dd28023250b70
#: ../../releases/1.4.txt:682
msgid ""
"Specifically: ``selector-add.gif``, ``selector-addall.gif``, ``selector-"
"remove.gif``, ``selector-removeall.gif``, ``selector_stacked-add.gif`` and "
"``selector_stacked-remove.gif`` were combined into ``selector-icons.gif``; "
"and ``arrow-up.gif`` and ``arrow-down.gif`` were combined into ``sorting-"
"icons.gif``."
msgstr ""

# 27d72edc96fc4083b82bc0cc4320e6b3
#: ../../releases/1.4.txt:688
msgid ""
"If you used those icons to customize the admin, then you'll need to replace "
"them with your own icons or get the files from a previous release."
msgstr ""

# ad4465c4b1ed4181a57abcabf16a5b5a
#: ../../releases/1.4.txt:692
msgid "CSS class names in admin forms"
msgstr ""

# 0412be097ffa47f5add7443ea775aa66
#: ../../releases/1.4.txt:694
msgid ""
"To avoid conflicts with other common CSS class names (e.g. \"button\"), we "
"added a prefix (\"field-\") to all CSS class names automatically generated "
"from the form field names in the main admin forms, stacked inline forms and "
"tabular inline cells. You'll need to take that prefix into account in your "
"custom style sheets or JavaScript files if you previously used plain field "
"names as selectors for custom styles or JavaScript transformations."
msgstr ""

# be26b70f29974b5e91a6efc739ca84d6
#: ../../releases/1.4.txt:702
msgid "Compatibility with old signed data"
msgstr ""

# 17b2f00a622f44848b9dcb56d3aea35f
#: ../../releases/1.4.txt:704
msgid ""
"Django 1.3 changed the cryptographic signing mechanisms used in a number of "
"places in Django. While Django 1.3 kept fallbacks that would accept hashes "
"produced by the previous methods, these fallbacks are removed in Django 1.4."
msgstr ""

# b23a1c4037c348fd8ed83d47a72ae589
#: ../../releases/1.4.txt:708
msgid ""
"So, if you upgrade to Django 1.4 directly from 1.2 or earlier, you may lose/"
"invalidate certain pieces of data that have been cryptographically signed "
"using an old method. To avoid this, use Django 1.3 first for a period of "
"time to allow the signed data to expire naturally. The affected parts are "
"detailed below, with 1) the consequences of ignoring this advice and 2) the "
"amount of time you need to run Django 1.3 for the data to expire or become "
"irrelevant."
msgstr ""

# ac988563a8cd4d73a6a818999b7348ba
#: ../../releases/1.4.txt:715
msgid "``contrib.sessions`` data integrity check"
msgstr ""

# 5c9d0cf81ae04fd69b2c3a1b796e3efd
#: ../../releases/1.4.txt:717
msgid ""
"Consequences: The user will be logged out, and session data will be lost."
msgstr ""

# 1b4f5074d32d48f9914be2ca08435f57
#: ../../releases/1.4.txt:719
msgid "Time period: Defined by :setting:`SESSION_COOKIE_AGE`."
msgstr ""

# 67086118aeb04c73abb8e3a5c51815f2
#: ../../releases/1.4.txt:721
msgid "``contrib.auth`` password reset hash"
msgstr ""

# 004fc3d7c19048778a801ccdc4537737
#: ../../releases/1.4.txt:723
msgid ""
"Consequences: Password reset links from before the upgrade will not work."
msgstr ""

# a008ec5f10de459d857e8bdfbc6cdebb
#: ../../releases/1.4.txt:725
msgid "Time period: Defined by :setting:`PASSWORD_RESET_TIMEOUT_DAYS`."
msgstr ""

# 36da8089f6964388be8452f6c7c1f359
#: ../../releases/1.4.txt:727
msgid ""
"Form-related hashes: these have a are much shorter lifetime and are relevant "
"only for the short window where a user might fill in a form generated by the "
"pre-upgrade Django instance and try to submit it to the upgraded Django "
"instance:"
msgstr ""

# 35d58d7978324da2a6d535425fef865e
#: ../../releases/1.4.txt:732
msgid "``contrib.comments`` form security hash"
msgstr ""

# bdd13a2645064710a4b916831ca1b93e
#: ../../releases/1.4.txt:734
msgid ""
"Consequences: The user will see the validation error \"Security hash failed."
"\""
msgstr ""

# fe37c182092144d4a082cfaddc15df79
#: ../../releases/1.4.txt:736
msgid ""
"Time period: The amount of time you expect users to take filling out comment "
"forms."
msgstr ""

# e091fa21e16a4933be67f700b59a6fb2
#: ../../releases/1.4.txt:739
msgid "``FormWizard`` security hash"
msgstr ""

# 8c17744e231b46bfb2fcd14ad96c8998
#: ../../releases/1.4.txt:741
msgid ""
"Consequences: The user will see an error about the form having expired and "
"will be sent back to the first page of the wizard, losing the data he has "
"entered so far."
msgstr ""

# f23db05158da45959964c734c9b6ea50
#: ../../releases/1.4.txt:745
msgid ""
"Time period: The amount of time you expect users to take filling out the "
"affected forms."
msgstr ""

# 8191ea67b7514c9eb5a52f0cdbda4a00
#: ../../releases/1.4.txt:748
msgid "CSRF check"
msgstr ""

# b8852d1d161542308976d9d3944457ac
#: ../../releases/1.4.txt:750
msgid ""
"Note: This is actually a Django 1.1 fallback, not Django 1.2, and it applies "
"only if you're upgrading from 1.1."
msgstr ""

# e5fa0a9ed3e54b1bab0eb8edebebbf26
#: ../../releases/1.4.txt:753
msgid ""
"Consequences: The user will see a 403 error with any CSRF-protected POST "
"form."
msgstr ""

# b83c77bcc5c9471b8b8e26b58a336450
#: ../../releases/1.4.txt:756
msgid ""
"Time period: The amount of time you expect user to take filling out such "
"forms."
msgstr ""

# 5158c1eaa8f744da9cd5b67e9afb3469
#: ../../releases/1.4.txt:760
msgid "django.contrib.flatpages"
msgstr ""

# 5656e44be99747e7870e6c91f8b79832
#: ../../releases/1.4.txt:762
msgid ""
"Starting in 1.4, the :class:`~django.contrib.flatpages.middleware."
"FlatpageFallbackMiddleware` only adds a trailing slash and redirects if the "
"resulting URL refers to an existing flatpage. For example, requesting ``/"
"notaflatpageoravalidurl`` in a previous version would redirect to ``/"
"notaflatpageoravalidurl/``, which would subsequently raise a 404. Requesting "
"``/notaflatpageoravalidurl`` now will immediately raise a 404."
msgstr ""

# e9391e793bb84c98800daef12cecd654
#: ../../releases/1.4.txt:770
msgid ""
"Also, redirects returned by flatpages are now permanent (with 301 status "
"code), to match the behavior of :class:`~django.middleware.common."
"CommonMiddleware`."
msgstr ""

# 25073a1fe4d34700bd5168641096d370
#: ../../releases/1.4.txt:774
msgid ""
"Serialization of :class:`~datetime.datetime` and :class:`~datetime.time`"
msgstr ""

# 54d0aaefdb0547be93dcf304295c0f10
#: ../../releases/1.4.txt:776
msgid ""
"As a consequence of time-zone support, and according to the ECMA-262 "
"specification, we made changes to the JSON serializer:"
msgstr ""

# 1c2cf0d995644a86953393908167c5d1
#: ../../releases/1.4.txt:779
msgid ""
"It includes the time zone for aware datetime objects. It raises an exception "
"for aware time objects."
msgstr ""

# 798dbaaacfb14a07959d9d5ee25c63d7
#: ../../releases/1.4.txt:781
msgid ""
"It includes milliseconds for datetime and time objects. There is still some "
"precision loss, because Python stores microseconds (6 digits) and JSON only "
"supports milliseconds (3 digits). However, it's better than discarding "
"microseconds entirely."
msgstr ""

# 0fe7957e65be467f99e91985e00a01a7
#: ../../releases/1.4.txt:786
msgid ""
"We changed the XML serializer to use the ISO8601 format for datetimes. The "
"letter ``T`` is used to separate the date part from the time part, instead "
"of a space. Time zone information is included in the ``[+-]HH:MM`` format."
msgstr ""

# 5ce54d53c403481da3d38d763481e414
#: ../../releases/1.4.txt:790
msgid ""
"Though the serializers now use these new formats when creating fixtures, "
"they can still load fixtures that use the old format."
msgstr ""

# 3de26f3607cc43ae8398a9e36feef4ac
#: ../../releases/1.4.txt:794
msgid "``supports_timezone`` changed to ``False`` for SQLite"
msgstr ""

# e86bc1168c6644d3b0a81e6b9043a692
#: ../../releases/1.4.txt:796
msgid ""
"The database feature ``supports_timezone`` used to be ``True`` for SQLite. "
"Indeed, if you saved an aware datetime object, SQLite stored a string that "
"included an UTC offset. However, this offset was ignored when loading the "
"value back from the database, which could corrupt the data."
msgstr ""

# 42832ce7b127418eb482cec96344e27f
#: ../../releases/1.4.txt:801
msgid ""
"In the context of time-zone support, this flag was changed to ``False``, and "
"datetimes are now stored without time-zone information in SQLite. When :"
"setting:`USE_TZ` is ``False``, if you attempt to save an aware datetime "
"object, Django raises an exception."
msgstr ""

# 8c36d11e44e740a0906fe0a6a13acf7a
#: ../../releases/1.4.txt:807
msgid "``MySQLdb``-specific exceptions"
msgstr ""

# 93eaf08d9de9438ab4fa68f50d8b0790
#: ../../releases/1.4.txt:809
msgid ""
"The MySQL backend historically has raised :class:`MySQLdb.OperationalError` "
"when a query triggered an exception. We've fixed this bug, and we now raise :"
"class:`django.db.utils.DatabaseError` instead. If you were testing for :"
"class:`MySQLdb.OperationalError`, you'll need to update your ``except`` "
"clauses."
msgstr ""

# c363950a4ad842188b78f85e055d3cf4
#: ../../releases/1.4.txt:816
msgid "Database connection's thread-locality"
msgstr ""

# 4897424098524f4e9f5e58f1795cee76
#: ../../releases/1.4.txt:818
msgid ""
"``DatabaseWrapper`` objects (i.e. the connection objects referenced by "
"``django.db.connection`` and ``django.db.connections[\"some_alias\"]``) used "
"to be thread-local. They are now global objects in order to be potentially "
"shared between multiple threads. While the individual connection objects are "
"now global, the ``django.db.connections`` dictionary referencing those "
"objects is still thread-local. Therefore if you just use the ORM or "
"``DatabaseWrapper.cursor()`` then the behavior is still the same as before. "
"Note, however, that ``django.db.connection`` does not directly reference the "
"default ``DatabaseWrapper`` object anymore and is now a proxy to access that "
"object's attributes. If you need to access the actual ``DatabaseWrapper`` "
"object, use ``django.db.connections[DEFAULT_DB_ALIAS]`` instead."
msgstr ""

# a7d4e2c37e6d4a49a9d9db7629813065
#: ../../releases/1.4.txt:830
msgid ""
"As part of this change, all underlying SQLite connections are now enabled "
"for potential thread-sharing (by passing the ``check_same_thread=False`` "
"attribute to pysqlite). ``DatabaseWrapper`` however preserves the previous "
"behavior by disabling thread-sharing by default, so this does not affect any "
"existing code that purely relies on the ORM or on ``DatabaseWrapper.cursor()"
"``."
msgstr ""

# 7914e60ebb864727bce1f8f928077b86
#: ../../releases/1.4.txt:836
msgid ""
"Finally, while it's now possible to pass connections between threads, Django "
"doesn't make any effort to synchronize access to the underlying backend. "
"Concurrency behavior is defined by the underlying backend implementation. "
"Check their documentation for details."
msgstr ""

# e55612e9834c435394a494d59d4e0be3
#: ../../releases/1.4.txt:842
msgid "`COMMENTS_BANNED_USERS_GROUP` setting"
msgstr ""

# eb278d5d1fda4c639359028ed9948baa
#: ../../releases/1.4.txt:844
msgid ""
"Django's :doc:`comments app </ref/contrib/comments/index>` has historically "
"supported excluding the comments of a special user group, but we've never "
"documented the feature properly and didn't enforce the exclusion in other "
"parts of the app such as the template tags. To fix this problem, we removed "
"the code from the feed class."
msgstr ""

# ba119c8c372443d7874132432ccc1005
#: ../../releases/1.4.txt:850
msgid ""
"If you rely on the feature and want to restore the old behavior, use a "
"custom comment model manager to exclude the user group, like this::"
msgstr ""

# e0801347d1cf4631a7b947ce30b096e4
#: ../../releases/1.4.txt:865
msgid ""
"Save this model manager in your custom comment app (e.g., in "
"``my_comments_app/managers.py``) and add it your :ref:`custom comment app "
"model <custom-comment-app-api>`::"
msgstr ""

# 98ab06cf54e04814a738eb86f8e9ad4d
#: ../../releases/1.4.txt:879
msgid ""
"For more details, see the documentation about :doc:`customizing the comments "
"framework </ref/contrib/comments/custom>`."
msgstr ""

# 5818241dd25042f79d43d6dc14ba99f8
#: ../../releases/1.4.txt:883
msgid "`IGNORABLE_404_STARTS` and `IGNORABLE_404_ENDS` settings"
msgstr ""

# 87a4910666694db692670e90d15ba86e
#: ../../releases/1.4.txt:885
msgid ""
"Until Django 1.3, it was possible to exclude some URLs from Django's :doc:"
"`404 error reporting</howto/error-reporting>` by adding prefixes to :setting:"
"`IGNORABLE_404_STARTS` and suffixes to :setting:`IGNORABLE_404_ENDS`."
msgstr ""

# dbca0db163d94975811ee783872f81af
#: ../../releases/1.4.txt:889
msgid ""
"In Django 1.4, these two settings are superseded by :setting:"
"`IGNORABLE_404_URLS`, which is a list of compiled regular expressions. "
"Django won't send an email for 404 errors on URLs that match any of them."
msgstr ""

# 31cabf83fed548f0a67a51437210449c
#: ../../releases/1.4.txt:893
msgid ""
"Furthermore, the previous settings had some rather arbitrary default values::"
msgstr ""

# f17c2eae23d546b0bc0eaf3b142bb753
#: ../../releases/1.4.txt:899
msgid ""
"It's not Django's role to decide if your website has a legacy ``/cgi-bin/`` "
"section or a ``favicon.ico``. As a consequence, the default values of :"
"setting:`IGNORABLE_404_URLS`, :setting:`IGNORABLE_404_STARTS` and :setting:"
"`IGNORABLE_404_ENDS` are all now empty."
msgstr ""

# 8f8857080e134a6eac2b630de475af2a
#: ../../releases/1.4.txt:904
msgid ""
"If you have customized :setting:`IGNORABLE_404_STARTS` or :setting:"
"`IGNORABLE_404_ENDS`, or if you want to keep the old default value, you "
"should add the following lines in your settings file::"
msgstr ""

# ac173b886c954932a0119c4d97fa3339
#: ../../releases/1.4.txt:916
msgid ""
"Don't forget to escape characters that have a special meaning in a regular "
"expression, such as periods."
msgstr ""

# b2a66d46216f429c8d5f1062994ef656
#: ../../releases/1.4.txt:920
msgid "CSRF protection extended to PUT and DELETE"
msgstr ""

# 5ba1969ea48e4c0cb47398b01940df58
#: ../../releases/1.4.txt:922
msgid ""
"Previously, Django's :doc:`CSRF protection </ref/contrib/csrf/>` provided "
"protection only against POST requests. Since use of PUT and DELETE methods "
"in AJAX applications is becoming more common, we now protect all methods not "
"defined as safe by :rfc:`2616` -- i.e., we exempt GET, HEAD, OPTIONS and "
"TRACE, and we enforce protection on everything else."
msgstr ""

# 7688a37b8c454786823ce3668c5abce7
#: ../../releases/1.4.txt:928
msgid ""
"If you're using PUT or DELETE methods in AJAX applications, please see the :"
"ref:`instructions about using AJAX and CSRF <csrf-ajax>`."
msgstr ""

# 9ccbf1d7f8654b9783bc84976c7cb19e
#: ../../releases/1.4.txt:932
msgid "``django.core.template_loaders``"
msgstr ""

# 53a7d24e133b4d4da461a9bd715a49e2
#: ../../releases/1.4.txt:934
msgid ""
"This was an alias to ``django.template.loader`` since 2005, and we've "
"removed it without emitting a warning due to the length of the deprecation. "
"If your code still referenced this, please use ``django.template.loader`` "
"instead."
msgstr ""

# 1ac8c938ba8c4867bf2af74d3691c4e2
#: ../../releases/1.4.txt:939
msgid "``django.db.models.fields.URLField.verify_exists``"
msgstr ""

# 9279585a41d84c829c3ffadee60e3e4c
#: ../../releases/1.4.txt:941
msgid ""
"This functionality has been removed due to intractable performance and "
"security issues. Any existing usage of ``verify_exists`` should be removed."
msgstr ""

# ee37162292a24c1a8becd8d599d47bd5
#: ../../releases/1.4.txt:946
msgid "``django.core.files.storage.Storage.open``"
msgstr ""

# 4691d5ae3cf04df1b38d6d9e3df44efa
#: ../../releases/1.4.txt:948
msgid ""
"The ``open`` method of the base Storage class used to take an obscure "
"parameter ``mixin`` that allowed you to dynamically change the base classes "
"of the returned file object. This has been removed. In the rare case you "
"relied on the `mixin` parameter, you can easily achieve the same by "
"overriding the `open` method, like this::"
msgstr ""

# a59398e074e243d586e48843be445078
#: ../../releases/1.4.txt:972
msgid "YAML deserializer now uses ``yaml.safe_load``"
msgstr ""

# fb8331969fb4414888e6ac0f7f1c7cc8
#: ../../releases/1.4.txt:974
msgid ""
"``yaml.load`` is able to construct any Python object, which may trigger "
"arbitrary code execution if you process a YAML document that comes from an "
"untrusted source. This feature isn't necessary for Django's YAML "
"deserializer, whose primary use is to load fixtures consisting of simple "
"objects. Even though fixtures are trusted data, the YAML deserializer now "
"uses ``yaml.safe_load`` for additional security."
msgstr ""

# 46c0daaa142a40ceab17901471dbc4cb
#: ../../releases/1.4.txt:982
msgid "Session cookies now have the ``httponly`` flag by default"
msgstr ""

# 1ac450cd6b7749389ab8a42ec0ff95dc
#: ../../releases/1.4.txt:984
msgid ""
"Session cookies now include the ``httponly`` attribute by default to help "
"reduce the impact of potential XSS attacks. For strict backwards "
"compatibility, use ``SESSION_COOKIE_HTTPONLY = False`` in your settings file."
msgstr ""

# 2db6b81951b943e0b2ac76cc7302d75c
#: ../../releases/1.4.txt:989
msgid "The :tfilter:`urlize` filter no longer escapes every URL"
msgstr ""

# 272143b90e82451fbafd216b4b6f46fe
#: ../../releases/1.4.txt:991
msgid ""
"When a URL contains a ``%xx`` sequence, where ``xx`` are two hexadecimal "
"digits, :tfilter:`urlize` now assumes that the URL is already escaped and "
"doesn't apply URL escaping again. This is wrong for URLs whose unquoted form "
"contains a ``%xx`` sequence, but such URLs are very unlikely to happen in "
"the wild, because they would confuse browsers too."
msgstr ""

# 3a3d2f65ab3f4544b946cb808413a2c7
#: ../../releases/1.4.txt:998
msgid "``assertTemplateUsed`` and ``assertTemplateNotUsed`` as context manager"
msgstr ""

# 9e4547e1dd1143269e6b621e201a90c8
#: ../../releases/1.4.txt:1000
msgid ""
"It's now possible to check whether a template was used within a block of "
"code with :meth:`~django.test.testcase.TestCase.assertTemplateUsed` and :"
"meth:`~django.test.testcase.TestCase.assertTemplateNotUsed`. And they can be "
"used as a context manager::"
msgstr ""

# e54ad019c82043cc89adec170eeab5f7
#: ../../releases/1.4.txt:1010
msgid "See the :ref:`assertion documentation<assertions>` for more."
msgstr ""

# 5e4fa13e2d5342d4ba6a143b1c85c445
#: ../../releases/1.4.txt:1013
msgid "Database connections after running the test suite"
msgstr ""

# 927be06503ab440ba51ea6a7bd435512
#: ../../releases/1.4.txt:1015
msgid ""
"The default test runner no longer restores the database connections after "
"tests' execution. This prevents the production database from being exposed "
"to potential threads that would still be running and attempting to create "
"new connections."
msgstr ""

# 9b9b0133c132444aa5cfc344e2960efd
#: ../../releases/1.4.txt:1020
msgid ""
"If your code relied on connections to the production database being created "
"after tests' execution, then you can restore the previous behavior by "
"subclassing ``DjangoTestRunner`` and overriding its ``teardown_databases()`` "
"method."
msgstr ""

# 5e91444f1fdd406f85bbb87e127818a6
#: ../../releases/1.4.txt:1026
msgid "Output of :djadmin:`manage.py help <help>`"
msgstr ""

# 2cab76857f46463396b8232629fbd412
#: ../../releases/1.4.txt:1028
msgid ""
":djadmin:`manage.py help <help>` now groups available commands by "
"application. If you depended on the output of this command -- if you parsed "
"it, for example -- then you'll need to update your code. To get a list of "
"all available management commands in a script, use :djadmin:`manage.py help "
"--commands <help>` instead."
msgstr ""

# 09ea9968d9934a3d8769054df2ff27fd
#: ../../releases/1.4.txt:1035
msgid "``extends`` template tag"
msgstr ""

# 49cc0b1324e04362977705d82d6c4144
#: ../../releases/1.4.txt:1037
msgid ""
"Previously, the :ttag:`extends` tag used a buggy method of parsing "
"arguments, which could lead to it erroneously considering an argument as a "
"string literal when it wasn't.  It now utilises ``parser.compile_filter`` "
"like other tags."
msgstr ""

# 8d2ad042a46b42f58b9f4b8c9cc76774
#: ../../releases/1.4.txt:1041
msgid ""
"The internals of the tag aren't part of the official stable API, but in the "
"interests of full disclosure, the ``ExtendsNode.__init__`` definition has "
"changed which may break any custom tags that use this node class."
msgstr ""

# 58dfc36926c24ae0a7a8b596843d9dc0
#: ../../releases/1.4.txt:1046
msgid "Features deprecated in 1.4"
msgstr ""

# 03b77c47f7124ae9b8f300dec2549593
#: ../../releases/1.4.txt:1049
msgid "Old styles of calling ``cache_page`` decorator"
msgstr ""

# e955bb836c6c488ea0246d9ca25a8eaf
#: ../../releases/1.4.txt:1051
msgid ""
"Some legacy ways of calling :func:`~django.views.decorators.cache."
"cache_page` have been deprecated. Please see the documentation for the "
"correct way to use this decorator."
msgstr ""

# 2226077cb7604ae5b453cab2bb82e5fc
#: ../../releases/1.4.txt:1056
msgid "Support for PostgreSQL versions older than 8.2"
msgstr ""

# e381ae287ae64ea0b2108fc3cf14301e
#: ../../releases/1.4.txt:1058
msgid ""
"Django 1.3 dropped support for PostgreSQL versions older than 8.0, and we "
"suggested using a more recent version because of performance improvements "
"and, more importantly, the end of upstream support periods for 8.0 and 8.1 "
"was near (November 2010)."
msgstr ""

# 5162e64ad3ce411a891987a6c2169130
#: ../../releases/1.4.txt:1063
msgid ""
"Django 1.4 takes that policy further and sets 8.2 as the minimum PostgreSQL "
"version it officially supports."
msgstr ""

# ade15759574d491caf744d13bb9eb836
#: ../../releases/1.4.txt:1067
msgid "Request exceptions are now always logged"
msgstr ""

# 1dc8a99510ff46859b3fdbef6637a01c
#: ../../releases/1.4.txt:1069
msgid ""
"When we added :doc:`logging support </topics/logging/>` in Django in 1.3, "
"the admin error email support was moved into the :class:`django.utils.log."
"AdminEmailHandler`, attached to the ``'django.request'`` logger. In order to "
"maintain the established behavior of error emails, the ``'django.request'`` "
"logger was called only when :setting:`DEBUG` was ``False``."
msgstr ""

# b524c311649945ce83d8f73680e3cc8f
#: ../../releases/1.4.txt:1076
msgid ""
"To increase the flexibility of error logging for requests, the ``'django."
"request'`` logger is now called regardless of the value of :setting:`DEBUG`, "
"and the default settings file for new projects now includes a separate "
"filter attached to :class:`django.utils.log.AdminEmailHandler` to prevent "
"admin error emails in ``DEBUG`` mode::"
msgstr ""

# b71fa860873549c68e48082711858d0b
#: ../../releases/1.4.txt:1095
msgid ""
"If your project was created prior to this change, your :setting:`LOGGING` "
"setting will not include this new filter. In order to maintain backwards-"
"compatibility, Django will detect that your ``'mail_admins'`` handler "
"configuration includes no ``'filters'`` section and will automatically add "
"this filter for you and issue a pending-deprecation warning. This will "
"become a deprecation warning in Django 1.5, and in Django 1.6 the backwards-"
"compatibility shim will be removed entirely."
msgstr ""

# dcd09968b8cb46988bd309ae9379b8de
#: ../../releases/1.4.txt:1103
msgid ""
"The existence of any ``'filters'`` key under the ``'mail_admins'`` handler "
"will disable this backward-compatibility shim and deprecation warning."
msgstr ""

# 11ee8f17f37148edb863fee08003635a
#: ../../releases/1.4.txt:1107
msgid "``django.conf.urls.defaults``"
msgstr ""

# beaf543a468048d78763a8bb45d0d0dc
#: ../../releases/1.4.txt:1109
msgid ""
"Until Django 1.3, the functions :func:`~django.conf.urls.include`, :func:"
"`~django.conf.urls.patterns` and :func:`~django.conf.urls.url` plus :data:"
"`~django.conf.urls.handler404`, :data:`~django.conf.urls.handler500` were "
"located in a ``django.conf.urls.defaults`` module."
msgstr ""

# 8a940db105f141a6aa32c9ca2513d64e
#: ../../releases/1.4.txt:1114
msgid "In Django 1.4, they live in :mod:`django.conf.urls`."
msgstr ""

# 9551825b51f8407ab338052d5f31ee93
#: ../../releases/1.4.txt:1117
msgid "``django.contrib.databrowse``"
msgstr ""

# 971bda03a33f41768504f0199a558805
#: ../../releases/1.4.txt:1119
msgid ""
"Databrowse has not seen active development for some time, and this does not "
"show any sign of changing. There had been a suggestion for a `GSOC project`_ "
"to integrate the functionality of databrowse into the admin, but no progress "
"was made. While Databrowse has been deprecated, an enhancement of ``django."
"contrib.admin`` providing a similar feature set is still possible."
msgstr ""

# 44106d42e1b44f208c9eb3ef5d380b57
#: ../../releases/1.4.txt:1127
msgid ""
"The code that powers Databrowse is licensed under the same terms as Django "
"itself, so it's available to be adopted by an individual or group as a third-"
"party project."
msgstr ""

# 7d57fc797f3d4426bda0074c8872e77f
#: ../../releases/1.4.txt:1132
msgid "``django.core.management.setup_environ``"
msgstr ""

# 602deff0007b43509fa2607b057552e7
#: ../../releases/1.4.txt:1134
msgid ""
"This function temporarily modified ``sys.path`` in order to make the parent "
"\"project\" directory importable under the old flat :djadmin:`startproject` "
"layout. This function is now deprecated, as its path workarounds are no "
"longer needed with the new ``manage.py`` and default project layout."
msgstr ""

# 77d757af4e9e4ee0b9e5f7271ff3bbe2
#: ../../releases/1.4.txt:1139
msgid ""
"This function was never documented or part of the public API, but it was "
"widely recommended for use in setting up a \"Django environment\" for a user "
"script. These uses should be replaced by setting the "
"``DJANGO_SETTINGS_MODULE`` environment variable or using :func:`django.conf."
"settings.configure`."
msgstr ""

# 95dddbda9f084d069107c81d84e1db4a
#: ../../releases/1.4.txt:1145
msgid "``django.core.management.execute_manager``"
msgstr ""

# b1dbb5d7187c45968e26c3a66f18e3d3
#: ../../releases/1.4.txt:1147
msgid ""
"This function was previously used by ``manage.py`` to execute a management "
"command. It is identical to ``django.core.management."
"execute_from_command_line``, except that it first calls ``setup_environ``, "
"which is now deprecated. As such, ``execute_manager`` is also deprecated; "
"``execute_from_command_line`` can be used instead. Neither of these "
"functions is documented as part of the public API, but a deprecation path is "
"needed due to use in existing ``manage.py`` files."
msgstr ""

# 742089c2ff124ee7b217ad50215ee3aa
#: ../../releases/1.4.txt:1156
msgid "``is_safe`` and ``needs_autoescape`` attributes of template filters"
msgstr ""

# bbf07b4b08c843169eb67be0e7bf3467
#: ../../releases/1.4.txt:1158
msgid ""
"Two flags, ``is_safe`` and ``needs_autoescape``, define how each template "
"filter interacts with Django's auto-escaping behavior. They used to be "
"attributes of the filter function::"
msgstr ""

# 56cd1c2855f04675a0ce2603d7c77d78
#: ../../releases/1.4.txt:1167
msgid ""
"However, this technique caused some problems in combination with decorators, "
"especially :func:`@stringfilter <django.template.defaultfilters."
"stringfilter>`. Now, the flags are keyword arguments of :meth:`@register."
"filter <django.template.Library.filter>`::"
msgstr ""

# fd56913642904e8aa4a212fa14f130c2
#: ../../releases/1.4.txt:1176
msgid ""
"See :ref:`filters and auto-escaping <filters-auto-escaping>` for more "
"information."
msgstr ""

# 30d92b78c8de4f339fcde03d20fbe72a
#: ../../releases/1.4.txt:1179
msgid "Wildcard expansion of application names in `INSTALLED_APPS`"
msgstr ""

# fb2e2213750340678f2d152398283ef1
#: ../../releases/1.4.txt:1181
msgid ""
"Until Django 1.3, :setting:`INSTALLED_APPS` accepted wildcards in "
"application names, like ``django.contrib.*``. The expansion was performed by "
"a filesystem-based implementation of ``from <package> import *``. "
"Unfortunately, `this can't be done reliably`_."
msgstr ""

# cd6599f68e074d7fb6a2722fc6db8760
#: ../../releases/1.4.txt:1186
msgid ""
"This behavior was never documented. Since it is un-pythonic and not "
"obviously useful, it was removed in Django 1.4. If you relied on it, you "
"must edit your settings file to list all your applications explicitly."
msgstr ""

# 73c27a1973c94236a1e303efe801ea02
#: ../../releases/1.4.txt:1193
msgid "``HttpRequest.raw_post_data`` renamed to ``HttpRequest.body``"
msgstr ""

# e2a4fb563f3c458ca1a1df665f9ad2d4
#: ../../releases/1.4.txt:1195
msgid ""
"This attribute was confusingly named ``HttpRequest.raw_post_data``, but it "
"actually provided the body of the HTTP request. It's been renamed to "
"``HttpRequest.body``, and ``HttpRequest.raw_post_data`` has been deprecated."
msgstr ""

# 7087d4ec49f84c2f8c714411f1cf7381
#: ../../releases/1.4.txt:1200
msgid ""
"``django.contrib.sitemaps`` bug fix with potential performance implications"
msgstr ""

# ac84afbe203a4d3aa14efbd766544205
#: ../../releases/1.4.txt:1202
msgid ""
"In previous versions, ``Paginator`` objects used in sitemap classes were "
"cached, which could result in stale site maps. We've removed the caching, so "
"each request to a site map now creates a new Paginator object and calls the :"
"attr:`~django.contrib.sitemaps.Sitemap.items()` method of the :class:"
"`~django.contrib.sitemaps.Sitemap` subclass. Depending on what your ``items()"
"`` method is doing, this may have a negative performance impact. To mitigate "
"the performance impact, consider using the :doc:`caching framework </topics/"
"cache>` within your ``Sitemap`` subclass."
msgstr ""
