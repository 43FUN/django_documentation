# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2012.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-02-15 15:13\n"
"PO-Revision-Date: 2012-02-15 15:13\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# 9ce298d2ffd24078bd9476841ca9cf1f
#: ../../releases/1.4.txt:3
msgid "Django 1.4 release notes - UNDER DEVELOPMENT"
msgstr ""

# ed48a44cc19a4351b9affc3169e34917
#: ../../releases/1.4.txt:5
msgid ""
"This page documents release notes for the as-yet-unreleased Django 1.4. As "
"such, it's tentative and subject to change. It provides up-to-date "
"information for those who are following trunk."
msgstr ""

# 66a0bcb1033a47eeb8c0e6789e22501d
#: ../../releases/1.4.txt:9
msgid ""
"Django 1.4 includes various `new features`_ and some minor `backwards "
"incompatible changes`_. There are also some features that have been dropped, "
"which are detailed in :doc:`our deprecation plan </internals/deprecation>`, "
"and we've `begun the deprecation process for some features`_."
msgstr ""

# 213df19afa184f7cadf36601eb51868b
#: ../../releases/1.4.txt:19
msgid "Python compatibility"
msgstr ""

# 4a0af8463ae24c45a7d50606feea3f0b
#: ../../releases/1.4.txt:21
msgid ""
"While not a new feature, it's important to note that Django 1.4 introduces "
"the second shift in our Python compatibility policy since Django's initial "
"public debut. Django 1.2 dropped support for Python 2.3; now Django 1.4 "
"drops support for Python 2.4. As such, the minimum Python version required "
"for Django is now 2.5, and Django is tested and supported on Python 2.5, 2.6 "
"and 2.7."
msgstr ""

# f9212bdeb53647fd9025ab0a3879abd1
#: ../../releases/1.4.txt:27
msgid ""
"This change should affect only a small number of Django users, as most "
"operating-system vendors today are shipping Python 2.5 or newer as their "
"default version. If you're still using Python 2.4, however, you'll need to "
"stick to Django 1.3 until you can upgrade; per :doc:`our support policy </"
"internals/release-process>`, Django 1.3 will continue to receive security "
"support until the release of Django 1.5."
msgstr ""

# b88a9c6a0ce446979f09c6d89cfe21f9
#: ../../releases/1.4.txt:34
msgid ""
"Django does not support Python 3.x at this time. A document outlining our "
"full timeline for deprecating Python 2.x and moving to Python 3.x will be "
"published before the release of Django 1.4."
msgstr ""

# 9d8aee022f664b8093ec70212a5c0f57
#: ../../releases/1.4.txt:39
msgid "What's new in Django 1.4"
msgstr ""

# 40e04b980b4e439b9e29d55c829a3ca7
#: ../../releases/1.4.txt:42
msgid "Support for in-browser testing frameworks"
msgstr ""

# 6b227adfbb47413f9584bad0bbed458e
#: ../../releases/1.4.txt:44
msgid ""
"Django 1.4 now supports integration with in-browser testing frameworks such "
"as Selenium_ or Windmill_ thanks to the :class:`django.test."
"LiveServerTestCase` base class, allowing you to test the interactions "
"between your site's front and back ends more comprehensively. See the :class:"
"`documentation<django.test.LiveServerTestCase>` for more details and "
"concrete examples."
msgstr ""

# 659a36aca02a407da9ce6c06eb94b2e8
#: ../../releases/1.4.txt:55
msgid "``SELECT FOR UPDATE`` support"
msgstr ""

# 654323e3c0b942e69724b75bc956038f
#: ../../releases/1.4.txt:57
msgid ""
"Django 1.4 now includes a :meth:`QuerySet.select_for_update() <django.db."
"models.query.QuerySet.select_for_update>` method which generates a "
"``SELECT ... FOR UPDATE`` SQL query. This will lock rows until the end of "
"the transaction, meaning that other transactions cannot modify or delete "
"rows matched by a ``FOR UPDATE`` query."
msgstr ""

# 2be3435c2a194092b8c1d7d37acdb703
#: ../../releases/1.4.txt:63
msgid ""
"For more details, see the documentation for :meth:`~django.db.models.query."
"QuerySet.select_for_update`."
msgstr ""

# e3ccf1a12eb6469fb3c1e73be408ec8f
#: ../../releases/1.4.txt:67
msgid "``Model.objects.bulk_create`` in the ORM"
msgstr ""

# 9023b35034224891b023ab54faefb137
#: ../../releases/1.4.txt:69
msgid ""
"This method allows for more efficient creation of multiple objects in the "
"ORM. It can provide significant performance increases if you have many "
"objects. Django makes use of this internally, meaning some operations (such "
"as database setup for test suites) have seen a performance benefit as a "
"result."
msgstr ""

# 7570072720884645a516844f1a5e071a
#: ../../releases/1.4.txt:74
msgid ""
"See the :meth:`~django.db.models.query.QuerySet.bulk_create` docs for more "
"information."
msgstr ""

# 1999d227efff4d2a86a13bb52728a2f7
#: ../../releases/1.4.txt:78
msgid "``QuerySet.prefetch_related``"
msgstr ""

# 6b0702a52aed435fa17a2b3ab470a6cc
#: ../../releases/1.4.txt:80
msgid ""
"Similar to :meth:`~django.db.models.query.QuerySet.select_related` but with "
"a different strategy and broader scope, :meth:`~django.db.models.query."
"QuerySet.prefetch_related` has been added to :class:`~django.db.models.query."
"QuerySet`. This method returns a new ``QuerySet`` that will prefetch each of "
"the specified related lookups in a single batch as soon as the query begins "
"to be evaluated. Unlike ``select_related``, it does the joins in Python, not "
"in the database, and supports many-to-many relationships, :class:`~django."
"contrib.contenttypes.generic.GenericForeignKey` and more. This allows you to "
"fix a very common performance problem in which your code ends up doing O(n) "
"database queries (or worse) if objects on your primary ``QuerySet`` each "
"have many related objects that you also need."
msgstr ""

# 2d725bf09f8e46a083d783ad0987fa81
#: ../../releases/1.4.txt:94
msgid "Improved password hashing"
msgstr ""

# 5ee8d81fe9e44950b0ad283794ea98fb
#: ../../releases/1.4.txt:96
msgid ""
"Django's auth system (``django.contrib.auth``) stores passwords using a one-"
"way algorithm. Django 1.3 uses the SHA1_ algorithm, but increasing processor "
"speeds and theoretical attacks have revealed that SHA1 isn't as secure as "
"we'd like. Thus, Django 1.4 introduces a new password storage system: by "
"default Django now uses the PBKDF2_ algorithm (as recommended by NIST_). You "
"can also easily choose a different algorithm (including the popular bcrypt_ "
"algorithm). For more details, see :ref:`auth_password_storage`."
msgstr ""

# 628d395e4d4747d7a46b52feb350c80a
#: ../../releases/1.4.txt:110
msgid "HTML5 Doctype"
msgstr ""

# ef96e103a613431ea63c5ce8d1843704
#: ../../releases/1.4.txt:112
msgid ""
"We've switched the admin and other bundled templates to use the HTML5 "
"doctype. While Django will be careful to maintain compatibility with older "
"browsers, this change means that you can use any HTML5 features you need in "
"admin pages without having to lose HTML validity or override the provided "
"templates to change the doctype."
msgstr ""

# a031c5e0858045599046136e779e376e
#: ../../releases/1.4.txt:119
msgid "List filters in admin interface"
msgstr ""

# dc664e2fbc474c21b4e2281b3763989c
#: ../../releases/1.4.txt:121
msgid ""
"Prior to Django 1.4, the :mod:`~django.contrib.admin` app allowed you to "
"specify change list filters by specifying a field lookup, but didn't allow "
"you to create custom filters. This has been rectified with a simple API "
"(previously used internally and known as \"FilterSpec\"). For more details, "
"see the documentation for :attr:`~django.contrib.admin.ModelAdmin."
"list_filter`."
msgstr ""

# ab0f1ba23c1b4931b4cc882a3f4ac8c6
#: ../../releases/1.4.txt:128
msgid "Multiple sort in admin interface"
msgstr ""

# 8b4b5fb2d2ab44a4a0c3b6e13f0066c8
#: ../../releases/1.4.txt:130
msgid ""
"The admin change list now supports sorting on multiple columns. It respects "
"all elements of the :attr:`~django.contrib.admin.ModelAdmin.ordering` "
"attribute, and sorting on multiple columns by clicking on headers is "
"designed to mimic the behavior of desktop GUIs. The :meth:`~django.contrib."
"admin.ModelAdmin.get_ordering` method for specifying the ordering "
"dynamically (e.g. depending on the request) has also been added."
msgstr ""

# fb2afe95925e413f8649f13f8a0bbc42
#: ../../releases/1.4.txt:138
msgid "New ``ModelAdmin`` methods"
msgstr ""

# 61717c84c40c46fa93d575f297ae0a88
#: ../../releases/1.4.txt:140
msgid ""
"A new :meth:`~django.contrib.admin.ModelAdmin.save_related` method was added "
"to :mod:`~django.contrib.admin.ModelAdmin` to ease customization of how "
"related objects are saved in the admin."
msgstr ""

# 4035953c03c841d780ef2926b1d6a6a9
#: ../../releases/1.4.txt:144
msgid ""
"Two other new methods, :meth:`~django.contrib.admin.ModelAdmin."
"get_list_display` and :meth:`~django.contrib.admin.ModelAdmin."
"get_list_display_links` were added to :class:`~django.contrib.admin."
"ModelAdmin` to enable the dynamic customization of fields and links "
"displayed on the admin change list."
msgstr ""

# 011becf1613d4af7b0f3680dbcb70a5e
#: ../../releases/1.4.txt:151
msgid "Admin inlines respect user permissions"
msgstr ""

# 42c317cdb1094cce8a0ff654a9ba7403
#: ../../releases/1.4.txt:153
msgid ""
"Admin inlines will now only allow those actions for which the user has "
"permission. For ``ManyToMany`` relationships with an auto-created "
"intermediate model (which does not have its own permissions), the change "
"permission for the related model determines if the user has the permission "
"to add, change or delete relationships."
msgstr ""

# bd058ddf9d624cb28db4f5a51d2cc996
#: ../../releases/1.4.txt:160
msgid "Tools for cryptographic signing"
msgstr ""

# a1a2fe03fc5a404f9af9c87491b7ef1c
#: ../../releases/1.4.txt:162
msgid ""
"Django 1.4 adds both a low-level API for signing values and a high-level API "
"for setting and reading signed cookies, one of the most common uses of "
"signing in Web applications."
msgstr ""

# 77003a46424a4fcaa930d6a267ef0e62
#: ../../releases/1.4.txt:166
msgid ""
"See the :doc:`cryptographic signing </topics/signing>` docs for more "
"information."
msgstr ""

# 8379f7a3c2df4b37aafc440319abcc61
#: ../../releases/1.4.txt:170
msgid "Cookie-based session backend"
msgstr ""

# 1f551e149b60468995c2a7142d0f7eb7
#: ../../releases/1.4.txt:172
msgid ""
"Django 1.4 introduces a new cookie-based backend for the session framework "
"which uses the tools for :doc:`cryptographic signing </topics/signing>` to "
"store the session data in the client's browser."
msgstr ""

# 61563dcfb8d34d8280068253c18a4f9b
#: ../../releases/1.4.txt:176
msgid ""
"See the :ref:`cookie-based session backend <cookie-session-backend>` docs "
"for more information."
msgstr ""

# f59a922c7120466786ef4daefa55ac54
#: ../../releases/1.4.txt:180
msgid "New form wizard"
msgstr ""

# c09addeecba34871b66d50a73c3fb1c2
#: ../../releases/1.4.txt:182
msgid ""
"The previous ``FormWizard`` from the formtools contrib app has been replaced "
"with a new implementation based on the class-based views introduced in "
"Django 1.3. It features a pluggable storage API and doesn't require the "
"wizard to pass around hidden fields for every previous step."
msgstr ""

# 4cba8f8b817a44759e49c1a24e75ae71
#: ../../releases/1.4.txt:187
msgid ""
"Django 1.4 ships with a session-based storage backend and a cookie-based "
"storage backend. The latter uses the tools for :doc:`cryptographic signing </"
"topics/signing>` also introduced in Django 1.4 to store the wizard's state "
"in the user's cookies."
msgstr ""

# 4ea104ece16c497895a5c47b7266adfa
#: ../../releases/1.4.txt:192
msgid ""
"See the :doc:`form wizard </ref/contrib/formtools/form-wizard>` docs for "
"more information."
msgstr ""

# dbebb09dbeb24b8ca88cc45d6017eebd
#: ../../releases/1.4.txt:196
msgid "``reverse_lazy``"
msgstr ""

# 5c0e20c9226c46ed8a1f4bf03adb43f4
#: ../../releases/1.4.txt:198
msgid ""
"A lazily evaluated version of :func:`django.core.urlresolvers.reverse` was "
"added to allow using URL reversals before the project's URLConf gets loaded."
msgstr ""

# c0cc8909e3244325b1a730de45f0a260
#: ../../releases/1.4.txt:202
msgid "Translating URL patterns"
msgstr ""

# 266bcfe95ecd4fe2b2854cdb44f62716
#: ../../releases/1.4.txt:204
msgid ""
"Django 1.4 gained the ability to look for a language prefix in the URL "
"pattern when using the new :func:`~django.conf.urls.i18n.i18n_patterns` "
"helper function. Additionally, it's now possible to define translatable URL "
"patterns using :func:`~django.utils.translation.ugettext_lazy`. See :ref:"
"`url-internationalization` for more information about the language prefix "
"and how to internationalize URL patterns."
msgstr ""

# 97d694a0a1534720b1a8c3dbaf8fd8d7
#: ../../releases/1.4.txt:212
msgid ""
"Contextual translation support for ``{% trans %}`` and ``{% blocktrans %}``"
msgstr ""

# a36b7fe1678f4321aa1a82ed6dbd141b
#: ../../releases/1.4.txt:214
msgid ""
"The :ref:`contextual translation<contextual-markers>` support introduced in "
"Django 1.3 via the ``pgettext`` function has been extended to the :ttag:"
"`trans` and :ttag:`blocktrans` template tags using the new ``context`` "
"keyword."
msgstr ""

# 186c83c5a114452abcbb2b9ea6613551
#: ../../releases/1.4.txt:220
msgid "Customizable ``SingleObjectMixin`` URLConf kwargs"
msgstr ""

# a7abeddc1def43d792e7760014b88d04
#: ../../releases/1.4.txt:222
msgid ""
"Two new attributes, :attr:`pk_url_kwarg<django.views.generic.detail."
"SingleObjectMixin.pk_url_kwarg>` and :attr:`slug_url_kwarg<django.views."
"generic.detail.SingleObjectMixin.slug_url_kwarg>`, have been added to :class:"
"`~django.views.generic.detail.SingleObjectMixin` to enable the customization "
"of URLConf keyword arguments used for single object generic views."
msgstr ""

# efea427b055f43aba8e10a280f7a7b71
#: ../../releases/1.4.txt:231
msgid "Assignment template tags"
msgstr ""

# d21ce218e7ee44a9b8404c18ce8e7f08
#: ../../releases/1.4.txt:233
msgid ""
"A new :ref:`assignment_tag<howto-custom-template-tags-assignment-tags>` "
"helper function was added to ``template.Library`` to ease the creation of "
"template tags that store data in a specified context variable."
msgstr ""

# 7544b2ab11134670bb73e61f8485685a
#: ../../releases/1.4.txt:238
msgid "``*args`` and ``**kwargs`` support for template tag helper functions"
msgstr ""

# cfb2fb4e945a437f8b831a1e00188e70
#: ../../releases/1.4.txt:240
msgid ""
"The :ref:`simple_tag<howto-custom-template-tags-simple-tags>`, :ref:"
"`inclusion_tag <howto-custom-template-tags-inclusion-tags>` and newly "
"introduced :ref:`assignment_tag<howto-custom-template-tags-assignment-tags>` "
"template helper functions may now accept any number of positional or keyword "
"arguments. For example:"
msgstr ""

# 38a7af2fd98f4af385b6b4493ea74813
#: ../../releases/1.4.txt:256
msgid ""
"Then in the template any number of arguments may be passed to the template "
"tag. For example:"
msgstr ""

# 6f539dfdcec442899dfcad6557b01f67
#: ../../releases/1.4.txt:264
msgid "No wrapping of exceptions in ``TEMPLATE_DEBUG`` mode"
msgstr ""

# 0fc60bd601d64e638d576eff0f870a0b
#: ../../releases/1.4.txt:266
msgid ""
"In previous versions of Django, whenever the :setting:`TEMPLATE_DEBUG` "
"setting was ``True``, any exception raised during template rendering (even "
"exceptions unrelated to template syntax) were wrapped in "
"``TemplateSyntaxError`` and re-raised. This was done in order to provide "
"detailed template source location information in the debug 500 page."
msgstr ""

# 04734159308c4d43b8b1e7a8dd2e3ff2
#: ../../releases/1.4.txt:272
msgid ""
"In Django 1.4, exceptions are no longer wrapped. Instead, the original "
"exception is annotated with the source information. This means that catching "
"exceptions from template rendering is now consistent regardless of the value "
"of :setting:`TEMPLATE_DEBUG`, and there's no need to catch and unwrap "
"``TemplateSyntaxError`` in order to catch other errors."
msgstr ""

# aea00db3e90944a080ea186c7ad6340c
#: ../../releases/1.4.txt:279
msgid "``truncatechars`` template filter"
msgstr ""

# d52d4c1fa56441fe9c47ebd9aa3f53eb
#: ../../releases/1.4.txt:281
msgid ""
"Added a filter which truncates a string to be no longer than the specified "
"number of characters. Truncated strings end with a translatable ellipsis "
"sequence (\"...\"). See the documentation for :tfilter:`truncatechars` for "
"more details."
msgstr ""

# c6bd44649b104aeb8934995b4660ad89
#: ../../releases/1.4.txt:287
msgid "``static`` template tag"
msgstr ""

# 17343231d4c74e7fb816eb073ab9ba0c
#: ../../releases/1.4.txt:289
msgid ""
"The :mod:`staticfiles<django.contrib.staticfiles>` contrib app has a new :"
"ttag:`static<staticfiles-static>` template tag to refer to files saved with "
"the :setting:`STATICFILES_STORAGE` storage backend. It uses the storage "
"backend's ``url`` method and therefore supports advanced features such as :"
"ref:`serving files from a cloud service<staticfiles-from-cdn>`."
msgstr ""

# 6c26a2c211044807a1fc790735c6b2b5
#: ../../releases/1.4.txt:296
msgid "``CachedStaticFilesStorage`` storage backend"
msgstr ""

# e7dc17a1ccdd4069be91989cf078acad
#: ../../releases/1.4.txt:298
msgid ""
"In addition to the `static template tag`_, the :mod:`staticfiles<django."
"contrib.staticfiles>` contrib app now has a :class:`~django.contrib."
"staticfiles.storage.CachedStaticFilesStorage` backend which caches the files "
"it saves (when running the :djadmin:`collectstatic` management command) by "
"appending the MD5 hash of the file's content to the filename. For example, "
"the file ``css/styles.css`` would also be saved as ``css/styles.55e7cbb9ba48."
"css``"
msgstr ""

# 5c96e6a904cd4fa5a1a4476e3eaadb6f
#: ../../releases/1.4.txt:306
msgid ""
"See the :class:`~django.contrib.staticfiles.storage."
"CachedStaticFilesStorage` docs for more information."
msgstr ""

# 4a66e55ebbe14079ab5988aaf1991114
#: ../../releases/1.4.txt:310
msgid "Simple clickjacking protection"
msgstr ""

# 561c2fbb6e7548b89985881295b9a83a
#: ../../releases/1.4.txt:312
msgid ""
"We've added a middleware to provide easy protection against `clickjacking "
"<http://en.wikipedia.org/wiki/Clickjacking>`_ using the ``X-Frame-Options`` "
"header. It's not enabled by default for backwards compatibility reasons, but "
"you'll almost certainly want to :doc:`enable it </ref/clickjacking/>` to "
"help plug that security hole for browsers that support the header."
msgstr ""

# ec72485bcd5f4e76af1a0b51ba5fd537
#: ../../releases/1.4.txt:319
msgid "CSRF improvements"
msgstr ""

# 3dc20b7e1b4c4eb191ed39f5cc02b5e4
#: ../../releases/1.4.txt:321
msgid ""
"We've made various improvements to our CSRF features, including the :func:"
"`~django.views.decorators.csrf.ensure_csrf_cookie` decorator which can help "
"with AJAX heavy sites, protection for PUT and DELETE requests, and the :"
"setting:`CSRF_COOKIE_SECURE` and :setting:`CSRF_COOKIE_PATH` settings which "
"can improve the security and usefulness of the CSRF protection. See the :doc:"
"`CSRF docs </ref/contrib/csrf>` for more information."
msgstr ""

# 32b456f0445344b299ff8c8382f4b90e
#: ../../releases/1.4.txt:329
msgid "Error report filtering"
msgstr ""

# f327fe01db3749a2a21b39d991b0fef3
#: ../../releases/1.4.txt:331
msgid ""
"Two new function decorators, :func:`sensitive_variables` and :func:"
"`sensitive_post_parameters`, were added to allow designating the local "
"variables and POST parameters which may contain sensitive information and "
"should be filtered out of error reports."
msgstr ""

# f2914f167b5e4e48805c453c8a33b585
#: ../../releases/1.4.txt:336
msgid ""
"All POST parameters are now systematically filtered out of error reports for "
"certain views (``login``, ``password_reset_confirm``, ``password_change``, "
"and ``add_view`` in :mod:`django.contrib.auth.views`, as well as "
"``user_change_password`` in the admin app) to prevent the leaking of "
"sensitive information such as user passwords."
msgstr ""

# 848a72a46f5147a3bed0acf6a0002a51
#: ../../releases/1.4.txt:342
msgid ""
"You may override or customize the default filtering by writing a :ref:"
"`custom filter<custom-error-reports>`. For more information see the docs on :"
"ref:`Filtering error reports<filtering-error-reports>`."
msgstr ""

# e78fe8cfe986466b8c13f92f55d6645c
#: ../../releases/1.4.txt:347
msgid "Extended IPv6 support"
msgstr ""

# 4b841e0cb8504484b18c62c039fa85b6
#: ../../releases/1.4.txt:349
msgid ""
"The previously added support for IPv6 addresses when using the runserver "
"management command in Django 1.3 has now been further extended by adding a :"
"class:`~django.db.models.fields.GenericIPAddressField` model field, a :class:"
"`~django.forms.fields.GenericIPAddressField` form field and the validators :"
"data:`~django.core.validators.validate_ipv46_address` and :data:`~django."
"core.validators.validate_ipv6_address`"
msgstr ""

# acf4c9754b024462ad015bff89a6f02d
#: ../../releases/1.4.txt:357
msgid "Updated default project layout and ``manage.py``"
msgstr ""

# 516c1e597cf54ea8ac3ac6479a77ee68
#: ../../releases/1.4.txt:359
msgid ""
"Django 1.4 ships with an updated default project layout and ``manage.py`` "
"file for the :djadmin:`startproject` management command. These fix some "
"issues with the previous ``manage.py`` handling of Python import paths that "
"caused double imports, trouble moving from development to deployment, and "
"other difficult-to-debug path issues."
msgstr ""

# d5aa4c34dbac4b0bb3f7d2aa98bf530d
#: ../../releases/1.4.txt:365
msgid ""
"The previous ``manage.py`` called functions that are now deprecated, and "
"thus projects upgrading to Django 1.4 should update their ``manage.py``. "
"(The old-style ``manage.py`` will continue to work as before until Django "
"1.6; in 1.5 it will raise ``DeprecationWarning``)."
msgstr ""

# 0220e674a57342188d297d08955e59bd
#: ../../releases/1.4.txt:370
msgid "The new recommended ``manage.py`` file should look like this::"
msgstr ""

# fbef75321e7d42cbb82253a1c7af6d26
#: ../../releases/1.4.txt:382
msgid ""
"``{{ project_name }}`` should be replaced with the Python package name of "
"the actual project."
msgstr ""

# 760950f662ac481aabae7a60cd9af1a0
#: ../../releases/1.4.txt:385
msgid ""
"If settings, URLconfs, and apps within the project are imported or "
"referenced using the project name prefix (e.g. ``myproject.settings``, "
"``ROOT_URLCONF = \"myproject.urls\"``, etc), the new ``manage.py`` will need "
"to be moved one directory up, so it is outside the project package rather "
"than adjacent to ``settings.py`` and ``urls.py``."
msgstr ""

# c8d9f2f0431b4ffe94a039719cc66b99
#: ../../releases/1.4.txt:391
msgid "For instance, with the following layout::"
msgstr ""

# 7e2793cc5d7e436ba8c387acbc3aee47
#: ../../releases/1.4.txt:402
msgid ""
"You could import ``mysite.settings``, ``mysite.urls``, and ``mysite.myapp``, "
"but not ``settings``, ``urls``, or ``myapp`` as top-level modules."
msgstr ""

# 627a9fbdac7d457fa2a32a619973afb7
#: ../../releases/1.4.txt:405
msgid ""
"Anything imported as a top-level module can be placed adjacent to the new "
"``manage.py``. For instance, to decouple \"myapp\" from the project module "
"and import it as just ``myapp``, place it outside the ``mysite/`` directory::"
msgstr ""

# cb7c51e53b6240b9ba5061a6906ee938
#: ../../releases/1.4.txt:418
msgid ""
"If the same code is imported inconsistently (some places with the project "
"prefix, some places without it), the imports will need to be cleaned up when "
"switching to the new ``manage.py``."
msgstr ""

# 92ca01c396e4462a91c890fbf5a6576e
#: ../../releases/1.4.txt:423
msgid "Improved WSGI support"
msgstr ""

# 208a26d4d41e45a38970899fb7bc7355
#: ../../releases/1.4.txt:425
msgid ""
"The :djadmin:`startproject` management command now adds a :file:`wsgi.py` "
"module to the initial project layout, containing a simple WSGI application "
"that can be used for :doc:`deploying with WSGI app servers</howto/deployment/"
"wsgi/index>`."
msgstr ""

# abd2e4712d2e4d04931658a258885642
#: ../../releases/1.4.txt:430
msgid ""
"The :djadmin:`built-in development server<runserver>` now supports using an "
"externally-defined WSGI callable, so as to make it possible to run runserver "
"with the same WSGI configuration that is used for deployment. A new :setting:"
"`WSGI_APPLICATION` setting is available to configure which WSGI callable :"
"djadmin:`runserver` uses."
msgstr ""

# a4d8986e13dc443284538a4dffe938b4
#: ../../releases/1.4.txt:436
msgid ""
"(The :djadmin:`runfcgi` management command also internally wraps the WSGI "
"callable configured via :setting:`WSGI_APPLICATION`.)"
msgstr ""

# 9ca0728fa1eb476a96906a2c214777b0
#: ../../releases/1.4.txt:440
msgid "Custom project and app templates"
msgstr ""

# 70812ec4f4ff4c17abdb953f16e4922e
#: ../../releases/1.4.txt:442
msgid ""
"The :djadmin:`startapp` and :djadmin:`startproject` management commands got "
"a ``--template`` option for specifying a path or URL to a custom app or "
"project template."
msgstr ""

# a5a8efbc652f4f79b70c92fee002daff
#: ../../releases/1.4.txt:446
msgid ""
"For example, Django will use the ``/path/to/my_project_template`` "
"directorywhen running the following command::"
msgstr ""

# 022650ebe4c04be8893d2e4290c46af4
#: ../../releases/1.4.txt:451
msgid ""
"Additionally you can now provide a destination directory as the second "
"argument to both :djadmin:`startapp` and :djadmin:`startproject`::"
msgstr ""

# c3da6ec370b04884944fe1da56a0c0e0
#: ../../releases/1.4.txt:457
msgid ""
"For more information see the :djadmin:`startapp` and :djadmin:`startproject` "
"documentation."
msgstr ""

# 68d556b7b1f84456841c8aa99c767e0f
#: ../../releases/1.4.txt:461
msgid "Support for time zones"
msgstr ""

# cf1e74942a704fd3bc04624e99edc197
#: ../../releases/1.4.txt:463
msgid ""
"Django 1.4 adds :ref:`support for time zones <time-zones>`. When it's "
"enabled, Django stores date and time information in UTC in the database, "
"uses time zone-aware datetime objects internally, and translates them to the "
"end user's time zone in templates and forms."
msgstr ""

# ff2a53384e164974aa1e649efc366cfc
#: ../../releases/1.4.txt:468
msgid "Reasons for using this feature include:"
msgstr ""

# e104cc56f9094aaa9c069f69803383d6
#: ../../releases/1.4.txt:470
msgid "Customizing date and time display for users around the world."
msgstr ""

# 016018eca26b4bf88b00ca3571e0fd9f
#: ../../releases/1.4.txt:471
msgid ""
"Storing datetimes in UTC for database portability and interoperability. "
"(This argument doesn't apply to PostgreSQL, because it already stores "
"timestamps with time zone information in Django 1.3.)"
msgstr ""

# 9a61d2f1a85241fca34734d3e8df9f46
#: ../../releases/1.4.txt:474
msgid "Avoiding data corruption problems around DST transitions."
msgstr ""

# 9719077336154094811c96abcb21dc1f
#: ../../releases/1.4.txt:476
msgid ""
"Time zone support is enabled by default in new projects created with :"
"djadmin:`startproject`. If you want to use this feature in an existing "
"project, there is a :ref:`migration guide <time-zones-migration-guide>`."
msgstr ""

# 6f1e07a35b39497e99f943e2e7a5d0bc
#: ../../releases/1.4.txt:481
msgid "Minor features"
msgstr ""

# 043344790fae49f69e10f928e4766244
#: ../../releases/1.4.txt:483
msgid "Django 1.4 also includes several smaller improvements worth noting:"
msgstr ""

# 02886b5570454a55989ea0a586094e87
#: ../../releases/1.4.txt:485
msgid ""
"A more usable stacktrace in the technical 500 page: frames in the stack "
"trace which reference Django's code are dimmed out, while frames in user "
"code are slightly emphasized. This change makes it easier to scan a "
"stacktrace for issues in user code."
msgstr ""

# b63ca0414bb141acb917633452fe39f4
#: ../../releases/1.4.txt:490
msgid ":doc:`Tablespace support </topics/db/tablespaces>` in PostgreSQL."
msgstr ""

# 044457d68d8e436bb6481e8cb97f9936
#: ../../releases/1.4.txt:492
msgid "Customizable names for :meth:`~django.template.Library.simple_tag`."
msgstr ""

# b7ca5dba7b534c4895518b86dab351f6
#: ../../releases/1.4.txt:494
msgid ""
"In the documentation, a helpful :doc:`security overview </topics/security>` "
"page."
msgstr ""

# 21835655d3b8415f946e25da7c3dd0a0
#: ../../releases/1.4.txt:497
msgid ""
"The :func:`django.contrib.auth.models.check_password` function has been "
"moved to the :mod:`django.contrib.auth.utils` module. Importing it from the "
"old location will still work, but you should update your imports."
msgstr ""

# 1611c919e62a437787f8e6ffd71444f1
#: ../../releases/1.4.txt:501
msgid ""
"The :djadmin:`collectstatic` management command gained a ``--clear`` option "
"to delete all files at the destination before copying or linking the static "
"files."
msgstr ""

# a1aaf78f439c45bf922798b9d2b4d446
#: ../../releases/1.4.txt:505
msgid ""
"It is now possible to load fixtures containing forward references when using "
"MySQL with the InnoDB database engine."
msgstr ""

# b3f297b0142541818619925fc3cae768
#: ../../releases/1.4.txt:508
msgid ""
"A new 403 response handler has been added as ``'django.views.defaults."
"permission_denied'``. You can set your own handler by setting the value of :"
"data:`django.conf.urls.handler403`. See the documentation about :ref:`the "
"403 (HTTP Forbidden) view<http_forbidden_view>` for more information."
msgstr ""

# b4585e255a83480a83ebc782ea804a5b
#: ../../releases/1.4.txt:514
msgid ""
"The :ttag:`trans` template tag now takes an optional ``as`` argument to be "
"able to retrieve a translation string without displaying it but setting a "
"template context variable instead."
msgstr ""

# 912218df596f4a88812e3a464bfe3555
#: ../../releases/1.4.txt:518
msgid "The :ttag:`if` template tag now supports ``{% elif %}`` clauses."
msgstr ""

# a57d8e3e78b34181b62056f7d77a69b9
#: ../../releases/1.4.txt:520
msgid ""
"A new plain text version of the HTTP 500 status code internal error page "
"served when :setting:`DEBUG` is ``True`` is now sent to the client when "
"Django detects that the request has originated in JavaScript code (:meth:"
"`~django.http.HttpRequest.is_ajax` is used for this)."
msgstr ""

# b5b9ef56e98a44f2923b65acdda389e4
#: ../../releases/1.4.txt:525
msgid ""
"Similarly to its HTML counterpart, it contains a collection of different "
"pieces of information about the state of the web application."
msgstr ""

# d7c82d11a33647598762e74f15e23373
#: ../../releases/1.4.txt:528
msgid ""
"This should make it easier to read when debugging interaction with client-"
"side Javascript code."
msgstr ""

# 2579c3abc215444a80cd0e87da81f3c2
#: ../../releases/1.4.txt:531
msgid ""
"Added the :djadminopt:`--no-location` option to the :djadmin:`makemessages` "
"command."
msgstr ""

# 8e1266400a65415d99d3b51ceba865a8
#: ../../releases/1.4.txt:534
msgid ""
"Changed the ``locmem`` cache backend to use ``pickle.HIGHEST_PROTOCOL`` for "
"better compatibility with the other cache backends."
msgstr ""

# cd1e90ffb70c4d72825303bc9c0e5a07
#: ../../releases/1.4.txt:538
msgid ""
"Added support in the ORM for generating ``SELECT`` queries containing "
"``DISTINCT ON``."
msgstr ""

# efc9a73d46744da6b25691683f03b95f
#: ../../releases/1.4.txt:541
msgid ""
"The ``distinct()`` ``Queryset`` method now accepts an optional list of model "
"field names. If specified, then the ``DISTINCT`` statement is limited to "
"these fields. PostgreSQL is the only database backend shipped with Django "
"that supports this new functionality."
msgstr ""

# fceb014f54c747dba8ee8c8105cc75cd
#: ../../releases/1.4.txt:546
msgid ""
"For more details, see the documentation for :meth:`~django.db.models.query."
"QuerySet.distinct`."
msgstr ""

# 232175d6a0784bcdb97ef33e5cce4f5b
#: ../../releases/1.4.txt:550
msgid "Backwards incompatible changes in 1.4"
msgstr ""

# bc37cd16565545f5b68fc16698f35543
#: ../../releases/1.4.txt:553
msgid "django.contrib.admin"
msgstr ""

# b76270264e0a4906a32b47d893c6074b
#: ../../releases/1.4.txt:555
msgid ""
"The included administration app ``django.contrib.admin`` has for a long time "
"shipped with a default set of static files such as JavaScript, images and "
"stylesheets. Django 1.3 added a new contrib app ``django.contrib."
"staticfiles`` to handle such files in a generic way and defined conventions "
"for static files included in apps."
msgstr ""

# 03c09093eea248f2bbe1a44d0dffc4a1
#: ../../releases/1.4.txt:561
msgid ""
"Starting in Django 1.4 the admin's static files also follow this convention "
"to make it easier to deploy the included files. In previous versions of "
"Django, it was also common to define an ``ADMIN_MEDIA_PREFIX`` setting to "
"point to the URL where the admin's static files are served by a web server. "
"This setting has now been deprecated and replaced by the more general "
"setting :setting:`STATIC_URL`. Django will now expect to find the admin "
"static files under the URL ``<STATIC_URL>/admin/``."
msgstr ""

# 0890f03e2e474fcfad1f3542e1e4f501
#: ../../releases/1.4.txt:569
msgid ""
"If you've previously used a URL path for ``ADMIN_MEDIA_PREFIX`` (e.g. ``/"
"media/``) simply make sure :setting:`STATIC_URL` and :setting:`STATIC_ROOT` "
"are configured and your web server serves the files correctly. The "
"development server continues to serve the admin files just like before. "
"Don't hesitate to consult the :doc:`static files howto </howto/static-"
"files>` for further details."
msgstr ""

# 15947da1b0b347f1b2603dbcca3ec77b
#: ../../releases/1.4.txt:576
msgid ""
"In case your ``ADMIN_MEDIA_PREFIX`` is set to an specific domain (e.g. "
"``http://media.example.com/admin/``) make sure to also set your :setting:"
"`STATIC_URL` setting to the correct URL, for example ``http://media.example."
"com/``."
msgstr ""

# f59e83102e4848a1a08d39218554cf8d
#: ../../releases/1.4.txt:583
msgid ""
"If you're implicitely relying on the path of the admin static files on your "
"server's file system when you deploy your site, you have to update that "
"path. The files were moved from :file:`django/contrib/admin/media/` to :file:"
"`django/contrib/admin/static/admin/`."
msgstr ""

# 663c16eeb39e4e1a8aba077c11401b38
#: ../../releases/1.4.txt:589
msgid "Supported browsers for the admin"
msgstr ""

# 7c312cb037784758a1e800d08883182f
#: ../../releases/1.4.txt:591
msgid ""
"Django hasn't had a clear policy on which browsers are supported for using "
"the admin app. Django's new policy formalizes existing practices: `YUI's A-"
"grade`_ browsers should provide a fully-functional admin experience, with "
"the notable exception of IE6, which is no longer supported."
msgstr ""

# f9854b1e66fc494a893bdb6f25df872b
#: ../../releases/1.4.txt:596
msgid ""
"Released over ten years ago, IE6 imposes many limitations on modern web "
"development. The practical implications of this policy are that contributors "
"are free to improve the admin without consideration for these limitations."
msgstr ""

# 447005bec48f406eb504444b7b90d043
#: ../../releases/1.4.txt:600
msgid ""
"This new policy **has no impact** on development outside of the admin. Users "
"of Django are free to develop webapps compatible with any range of browsers."
msgstr ""

# 78f2860b65b84a2d934172f804da2bc8
#: ../../releases/1.4.txt:606
msgid "Removed admin icons"
msgstr ""

# c55f03b90772498c819192156444ee83
#: ../../releases/1.4.txt:608
msgid ""
"As part of an effort to improve the performance and usability of the admin's "
"changelist sorting interface and of the admin's :attr:`horizontal <django."
"contrib.admin.ModelAdmin.filter_horizontal>` and :attr:`vertical <django."
"contrib.admin.ModelAdmin.filter_vertical>` \"filter\" widgets, some icon "
"files were removed and grouped into two sprite files."
msgstr ""

# 995019e170ad4514a67dd28023250b70
#: ../../releases/1.4.txt:614
msgid ""
"Specifically: ``selector-add.gif``, ``selector-addall.gif``, ``selector-"
"remove.gif``, ``selector-removeall.gif``, ``selector_stacked-add.gif`` and "
"``selector_stacked-remove.gif`` were combined into ``selector-icons.gif``; "
"and ``arrow-up.gif`` and ``arrow-down.gif`` were combined into ``sorting-"
"icons.gif``."
msgstr ""

# e6645aaa1b8a4a688a1951fd373a9885
#: ../../releases/1.4.txt:620
msgid ""
"If you used those icons to customize the admin then you will want to replace "
"them with your own icons or retrieve them from a previous release."
msgstr ""

# ad4465c4b1ed4181a57abcabf16a5b5a
#: ../../releases/1.4.txt:624
msgid "CSS class names in admin forms"
msgstr ""

# 205684bd00554032980588ec52ec985e
#: ../../releases/1.4.txt:626
msgid ""
"To avoid conflicts with other common CSS class names (e.g. \"button\"), a "
"prefix \"field-\" has been added to all CSS class names automatically "
"generated from the form field names in the main admin forms, stacked inline "
"forms and tabular inline cells. You will need to take that prefix into "
"account in your custom style sheets or javascript files if you previously "
"used plain field names as selectors for custom styles or javascript "
"transformations."
msgstr ""

# be26b70f29974b5e91a6efc739ca84d6
#: ../../releases/1.4.txt:634
msgid "Compatibility with old signed data"
msgstr ""

# 17b2f00a622f44848b9dcb56d3aea35f
#: ../../releases/1.4.txt:636
msgid ""
"Django 1.3 changed the cryptographic signing mechanisms used in a number of "
"places in Django. While Django 1.3 kept fallbacks that would accept hashes "
"produced by the previous methods, these fallbacks are removed in Django 1.4."
msgstr ""

# b23a1c4037c348fd8ed83d47a72ae589
#: ../../releases/1.4.txt:640
msgid ""
"So, if you upgrade to Django 1.4 directly from 1.2 or earlier, you may lose/"
"invalidate certain pieces of data that have been cryptographically signed "
"using an old method. To avoid this, use Django 1.3 first for a period of "
"time to allow the signed data to expire naturally. The affected parts are "
"detailed below, with 1) the consequences of ignoring this advice and 2) the "
"amount of time you need to run Django 1.3 for the data to expire or become "
"irrelevant."
msgstr ""

# ac988563a8cd4d73a6a818999b7348ba
#: ../../releases/1.4.txt:647
msgid "``contrib.sessions`` data integrity check"
msgstr ""

# c0a9e1e7017749d8840c270e8c3e9aa7
#: ../../releases/1.4.txt:649
msgid ""
"consequences: the user will be logged out, and session data will be lost."
msgstr ""

# 41f38cb85cb746f2ad90c76cb13dbf48
#: ../../releases/1.4.txt:651
msgid "time period: defined by :setting:`SESSION_COOKIE_AGE`."
msgstr ""

# 67086118aeb04c73abb8e3a5c51815f2
#: ../../releases/1.4.txt:653
msgid "``contrib.auth`` password reset hash"
msgstr ""

# 8888a0cd521b47ea90d731a1997e9ff3
#: ../../releases/1.4.txt:655
msgid ""
"consequences: password reset links from before the upgrade will not work."
msgstr ""

# f13bdf6f25d84db0b86b8882b50e26d4
#: ../../releases/1.4.txt:657
msgid "time period: defined by :setting:`PASSWORD_RESET_TIMEOUT_DAYS`."
msgstr ""

# 22e655fc51434417b7c66a24fd3f00e9
#: ../../releases/1.4.txt:659
msgid ""
"Form-related hashes — these are much shorter lifetime, and are relevant only "
"for the short window where a user might fill in a form generated by the pre-"
"upgrade Django instance, and try to submit it to the upgraded Django "
"instance:"
msgstr ""

# 35d58d7978324da2a6d535425fef865e
#: ../../releases/1.4.txt:663
msgid "``contrib.comments`` form security hash"
msgstr ""

# d6685e2b9bbf4158a690712928861ebb
#: ../../releases/1.4.txt:665
msgid ""
"consequences: the user will see a validation error \"Security hash failed\"."
msgstr ""

# 77341589855b4561a4c5be6df7cabf7d
#: ../../releases/1.4.txt:667
msgid ""
"time period: the amount of time you expect users to take filling out comment "
"forms."
msgstr ""

# e091fa21e16a4933be67f700b59a6fb2
#: ../../releases/1.4.txt:670
msgid "``FormWizard`` security hash"
msgstr ""

# 367cc6d5693d4a519e3f29c284ec8a3b
#: ../../releases/1.4.txt:672
msgid ""
"consequences: the user will see an error about the form having expired, and "
"will be sent back to the first page of the wizard, losing the data they have "
"entered so far."
msgstr ""

# 2c109ad0d5ac4ba6b04069cc4c711904
#: ../../releases/1.4.txt:676
msgid ""
"time period: the amount of time you expect users to take filling out the "
"affected forms."
msgstr ""

# 8191ea67b7514c9eb5a52f0cdbda4a00
#: ../../releases/1.4.txt:679
msgid "CSRF check"
msgstr ""

# 88562a545ebe4920860127528af24986
#: ../../releases/1.4.txt:681
msgid ""
"Note: This is actually a Django 1.1 fallback, not Django 1.2, and applies "
"only if you are upgrading from 1.1."
msgstr ""

# d9dd3bdfcc874b25ae630102a617a0d3
#: ../../releases/1.4.txt:684
msgid ""
"consequences: the user will see a 403 error with any CSRF protected POST "
"form."
msgstr ""

# fa2265eab8bb4a0c8fd3e970a4d57ef3
#: ../../releases/1.4.txt:687
msgid ""
"time period: the amount of time you expect user to take filling out such "
"forms."
msgstr ""

# 5158c1eaa8f744da9cd5b67e9afb3469
#: ../../releases/1.4.txt:691
msgid "django.contrib.flatpages"
msgstr ""

# d77f369d2fa54c4b86caa025a5e07820
#: ../../releases/1.4.txt:693
msgid ""
"Starting in the 1.4 release the :class:`~django.contrib.flatpages.middleware."
"FlatpageFallbackMiddleware` only adds a trailing slash and redirects if the "
"resulting URL refers to an existing flatpage. For example, requesting ``/"
"notaflatpageoravalidurl`` in a previous version would redirect to ``/"
"notaflatpageoravalidurl/``, which would subsequently raise a 404. Requesting "
"``/notaflatpageoravalidurl`` now will immediately raise a 404. Additionally "
"redirects returned by flatpages are now permanent (301 status code) to match "
"the behavior of the :class:`~django.middleware.common.CommonMiddleware`."
msgstr ""

# 25073a1fe4d34700bd5168641096d370
#: ../../releases/1.4.txt:704
msgid ""
"Serialization of :class:`~datetime.datetime` and :class:`~datetime.time`"
msgstr ""

# 9da6a3b280d0426faba4a788f16563c7
#: ../../releases/1.4.txt:706
msgid ""
"As a consequence of time zone support, and according to the ECMA-262 "
"specification, some changes were made to the JSON serializer:"
msgstr ""

# 1c2cf0d995644a86953393908167c5d1
#: ../../releases/1.4.txt:709
msgid ""
"It includes the time zone for aware datetime objects. It raises an exception "
"for aware time objects."
msgstr ""

# 798dbaaacfb14a07959d9d5ee25c63d7
#: ../../releases/1.4.txt:711
msgid ""
"It includes milliseconds for datetime and time objects. There is still some "
"precision loss, because Python stores microseconds (6 digits) and JSON only "
"supports milliseconds (3 digits). However, it's better than discarding "
"microseconds entirely."
msgstr ""

# d89e9f919f1847dd9f5333c5259bd9e5
#: ../../releases/1.4.txt:716
msgid ""
"The XML serializer was also changed to use the ISO8601 format for datetimes. "
"The letter ``T`` is used to separate the date part from the time part, "
"instead of a space. Time zone information is included in the ``[+-]HH:MM`` "
"format."
msgstr ""

# 25808688960645869de5217dc431acef
#: ../../releases/1.4.txt:720
msgid ""
"The serializers will dump datetimes in fixtures with these new formats. They "
"can still load fixtures that use the old format."
msgstr ""

# 3de26f3607cc43ae8398a9e36feef4ac
#: ../../releases/1.4.txt:724
msgid "``supports_timezone`` changed to ``False`` for SQLite"
msgstr ""

# e86bc1168c6644d3b0a81e6b9043a692
#: ../../releases/1.4.txt:726
msgid ""
"The database feature ``supports_timezone`` used to be ``True`` for SQLite. "
"Indeed, if you saved an aware datetime object, SQLite stored a string that "
"included an UTC offset. However, this offset was ignored when loading the "
"value back from the database, which could corrupt the data."
msgstr ""

# 11a75824e6124dfdaf1290fbce52344f
#: ../../releases/1.4.txt:731
msgid ""
"In the context of time zone support, this flag was changed to ``False``, and "
"datetimes are now stored without time zone information in SQLite. When :"
"setting:`USE_TZ` is ``False``, if you attempt to save an aware datetime "
"object, Django raises an exception."
msgstr ""

# c363950a4ad842188b78f85e055d3cf4
#: ../../releases/1.4.txt:737
msgid "Database connection's thread-locality"
msgstr ""

# 4897424098524f4e9f5e58f1795cee76
#: ../../releases/1.4.txt:739
msgid ""
"``DatabaseWrapper`` objects (i.e. the connection objects referenced by "
"``django.db.connection`` and ``django.db.connections[\"some_alias\"]``) used "
"to be thread-local. They are now global objects in order to be potentially "
"shared between multiple threads. While the individual connection objects are "
"now global, the ``django.db.connections`` dictionary referencing those "
"objects is still thread-local. Therefore if you just use the ORM or "
"``DatabaseWrapper.cursor()`` then the behavior is still the same as before. "
"Note, however, that ``django.db.connection`` does not directly reference the "
"default ``DatabaseWrapper`` object anymore and is now a proxy to access that "
"object's attributes. If you need to access the actual ``DatabaseWrapper`` "
"object, use ``django.db.connections[DEFAULT_DB_ALIAS]`` instead."
msgstr ""

# a7d4e2c37e6d4a49a9d9db7629813065
#: ../../releases/1.4.txt:751
msgid ""
"As part of this change, all underlying SQLite connections are now enabled "
"for potential thread-sharing (by passing the ``check_same_thread=False`` "
"attribute to pysqlite). ``DatabaseWrapper`` however preserves the previous "
"behavior by disabling thread-sharing by default, so this does not affect any "
"existing code that purely relies on the ORM or on ``DatabaseWrapper.cursor()"
"``."
msgstr ""

# 1e977235241442928d7561f170fdee08
#: ../../releases/1.4.txt:757
msgid ""
"Finally, while it is now possible to pass connections between threads, "
"Django does not make any effort to synchronize access to the underlying "
"backend. Concurrency behavior is defined by the underlying backend "
"implementation. Check their documentation for details."
msgstr ""

# e55612e9834c435394a494d59d4e0be3
#: ../../releases/1.4.txt:763
msgid "`COMMENTS_BANNED_USERS_GROUP` setting"
msgstr ""

# eb278d5d1fda4c639359028ed9948baa
#: ../../releases/1.4.txt:765
msgid ""
"Django's :doc:`comments app </ref/contrib/comments/index>` has historically "
"supported excluding the comments of a special user group, but we've never "
"documented the feature properly and didn't enforce the exclusion in other "
"parts of the app such as the template tags. To fix this problem, we removed "
"the code from the feed class."
msgstr ""

# f59403e8c9fe43e99021a550609c5846
#: ../../releases/1.4.txt:771
msgid ""
"If you rely on the feature and want to restore the old behavior, simply use "
"a custom comment model manager to exclude the user group, like this::"
msgstr ""

# 2ad33cfb596146a98e3114fbf5225c06
#: ../../releases/1.4.txt:786
msgid ""
"Save this model manager in your custom comment app (e.g. in "
"``my_comments_app/managers.py``) and add it your :ref:`custom comment app "
"model <custom-comment-app-api>`::"
msgstr ""

# 98ab06cf54e04814a738eb86f8e9ad4d
#: ../../releases/1.4.txt:800
msgid ""
"For more details, see the documentation about :doc:`customizing the comments "
"framework </ref/contrib/comments/custom>`."
msgstr ""

# 5818241dd25042f79d43d6dc14ba99f8
#: ../../releases/1.4.txt:804
msgid "`IGNORABLE_404_STARTS` and `IGNORABLE_404_ENDS` settings"
msgstr ""

# 87a4910666694db692670e90d15ba86e
#: ../../releases/1.4.txt:806
msgid ""
"Until Django 1.3, it was possible to exclude some URLs from Django's :doc:"
"`404 error reporting</howto/error-reporting>` by adding prefixes to :setting:"
"`IGNORABLE_404_STARTS` and suffixes to :setting:`IGNORABLE_404_ENDS`."
msgstr ""

# dbca0db163d94975811ee783872f81af
#: ../../releases/1.4.txt:810
msgid ""
"In Django 1.4, these two settings are superseded by :setting:"
"`IGNORABLE_404_URLS`, which is a list of compiled regular expressions. "
"Django won't send an email for 404 errors on URLs that match any of them."
msgstr ""

# 31cabf83fed548f0a67a51437210449c
#: ../../releases/1.4.txt:814
msgid ""
"Furthermore, the previous settings had some rather arbitrary default values::"
msgstr ""

# f17c2eae23d546b0bc0eaf3b142bb753
#: ../../releases/1.4.txt:820
msgid ""
"It's not Django's role to decide if your website has a legacy ``/cgi-bin/`` "
"section or a ``favicon.ico``. As a consequence, the default values of :"
"setting:`IGNORABLE_404_URLS`, :setting:`IGNORABLE_404_STARTS` and :setting:"
"`IGNORABLE_404_ENDS` are all now empty."
msgstr ""

# 8f8857080e134a6eac2b630de475af2a
#: ../../releases/1.4.txt:825
msgid ""
"If you have customized :setting:`IGNORABLE_404_STARTS` or :setting:"
"`IGNORABLE_404_ENDS`, or if you want to keep the old default value, you "
"should add the following lines in your settings file::"
msgstr ""

# babdfe432d3f4554bc10582485b79d1a
#: ../../releases/1.4.txt:837
msgid ""
"Don't forget to escape characters that have a special meaning in a regular "
"expression."
msgstr ""

# b2a66d46216f429c8d5f1062994ef656
#: ../../releases/1.4.txt:841
msgid "CSRF protection extended to PUT and DELETE"
msgstr ""

# 99ae8acafa6f4a1f83d2669de3790d7c
#: ../../releases/1.4.txt:843
msgid ""
"Previously, Django's :doc:`CSRF protection </ref/contrib/csrf/>` provided "
"protection against only POST requests. Since use of PUT and DELETE methods "
"in AJAX applications is becoming more common, we now protect all methods not "
"defined as safe by :rfc:`2616` i.e. we exempt GET, HEAD, OPTIONS and TRACE, "
"and enforce protection on everything else."
msgstr ""

# d4fde9b3a35f4350a501d9426777935b
#: ../../releases/1.4.txt:849
msgid ""
"If you are using PUT or DELETE methods in AJAX applications, please see the :"
"ref:`instructions about using AJAX and CSRF <csrf-ajax>`."
msgstr ""

# 9ccbf1d7f8654b9783bc84976c7cb19e
#: ../../releases/1.4.txt:853
msgid "``django.core.template_loaders``"
msgstr ""

# f1c674e6749e4763b3db2d4406eaf978
#: ../../releases/1.4.txt:855
msgid ""
"This was an alias to ``django.template.loader`` since 2005, it has been "
"removed without emitting a warning due to the length of the deprecation. If "
"your code still referenced this please use ``django.template.loader`` "
"instead."
msgstr ""

# 1ac8c938ba8c4867bf2af74d3691c4e2
#: ../../releases/1.4.txt:860
msgid "``django.db.models.fields.URLField.verify_exists``"
msgstr ""

# 9279585a41d84c829c3ffadee60e3e4c
#: ../../releases/1.4.txt:862
msgid ""
"This functionality has been removed due to intractable performance and "
"security issues. Any existing usage of ``verify_exists`` should be removed."
msgstr ""

# ee37162292a24c1a8becd8d599d47bd5
#: ../../releases/1.4.txt:867
msgid "``django.core.files.storage.Storage.open``"
msgstr ""

# 9027dd03aaa1481ba69b294f5db95fc3
#: ../../releases/1.4.txt:869
msgid ""
"The ``open`` method of the base Storage class took an obscure parameter "
"``mixin`` which allowed you to dynamically change the base classes of the "
"returned file object. This has been removed. In the rare case you relied on "
"the `mixin` parameter, you can easily achieve the same by overriding the "
"`open` method, e.g.::"
msgstr ""

# a59398e074e243d586e48843be445078
#: ../../releases/1.4.txt:893
msgid "YAML deserializer now uses ``yaml.safe_load``"
msgstr ""

# 43cc34ed6d4640fd9c289e457ffd0295
#: ../../releases/1.4.txt:895
msgid ""
"``yaml.load`` is able to construct any Python object, which may trigger "
"arbitrary code execution if you process a YAML document that comes from an "
"untrusted source. This feature isn't necessary for Django's YAML "
"deserializer, whose primary use is to load fixtures consisting of simple "
"objects. Even though fixtures are trusted data, for additional security, the "
"YAML deserializer now uses ``yaml.safe_load``."
msgstr ""

# 58dfc36926c24ae0a7a8b596843d9dc0
#: ../../releases/1.4.txt:903
msgid "Features deprecated in 1.4"
msgstr ""

# 03b77c47f7124ae9b8f300dec2549593
#: ../../releases/1.4.txt:906
msgid "Old styles of calling ``cache_page`` decorator"
msgstr ""

# 573a8dce2ea04c53b86ecbf1de14d612
#: ../../releases/1.4.txt:908
msgid ""
"Some legacy ways of calling :func:`~django.views.decorators.cache."
"cache_page` have been deprecated, please see the docs for the correct way to "
"use this decorator."
msgstr ""

# 2226077cb7604ae5b453cab2bb82e5fc
#: ../../releases/1.4.txt:913
msgid "Support for PostgreSQL versions older than 8.2"
msgstr ""

# 93a168fb8bca4722b0e989af0a7ff2c9
#: ../../releases/1.4.txt:915
msgid ""
"Django 1.3 dropped support for PostgreSQL versions older than 8.0 and the "
"relevant documents suggested to use a recent version because of performance "
"reasons but more importantly because end of the upstream support periods for "
"releases 8.0 and 8.1 was near (November 2010)."
msgstr ""

# 5162e64ad3ce411a891987a6c2169130
#: ../../releases/1.4.txt:920
msgid ""
"Django 1.4 takes that policy further and sets 8.2 as the minimum PostgreSQL "
"version it officially supports."
msgstr ""

# ade15759574d491caf744d13bb9eb836
#: ../../releases/1.4.txt:924
msgid "Request exceptions are now always logged"
msgstr ""

# fdcc6666a85d48ec9346f9c716fe6193
#: ../../releases/1.4.txt:926
msgid ""
"When :doc:`logging support </topics/logging/>` was added to Django in 1.3, "
"the admin error email support was moved into the :class:`django.utils.log."
"AdminEmailHandler`, attached to the ``'django.request'`` logger. In order to "
"maintain the established behavior of error emails, the ``'django.request'`` "
"logger was called only when :setting:`DEBUG` was ``False``."
msgstr ""

# b524c311649945ce83d8f73680e3cc8f
#: ../../releases/1.4.txt:933
msgid ""
"To increase the flexibility of error logging for requests, the ``'django."
"request'`` logger is now called regardless of the value of :setting:`DEBUG`, "
"and the default settings file for new projects now includes a separate "
"filter attached to :class:`django.utils.log.AdminEmailHandler` to prevent "
"admin error emails in ``DEBUG`` mode::"
msgstr ""

# 0aab02ab855044e6ad6cc62febf29eea
#: ../../releases/1.4.txt:952
msgid ""
"If your project was created prior to this change, your :setting:`LOGGING` "
"setting will not include this new filter. In order to maintain backwards-"
"compatibility, Django will detect that your ``'mail_admins'`` handler "
"configuration includes no ``'filters'`` section, and will automatically add "
"this filter for you and issue a pending-deprecation warning. This will "
"become a deprecation warning in Django 1.5, and in Django 1.6 the backwards-"
"compatibility shim will be removed entirely."
msgstr ""

# dcd09968b8cb46988bd309ae9379b8de
#: ../../releases/1.4.txt:960
msgid ""
"The existence of any ``'filters'`` key under the ``'mail_admins'`` handler "
"will disable this backward-compatibility shim and deprecation warning."
msgstr ""

# 11ee8f17f37148edb863fee08003635a
#: ../../releases/1.4.txt:964
msgid "``django.conf.urls.defaults``"
msgstr ""

# 68d1137754714ed7867b2ce30d21909c
#: ../../releases/1.4.txt:966
msgid ""
"Until Django 1.3 the functions :func:`~django.conf.urls.include`, :func:"
"`~django.conf.urls.patterns` and :func:`~django.conf.urls.url` plus :data:"
"`~django.conf.urls.handler404`, :data:`~django.conf.urls.handler500` were "
"located in a ``django.conf.urls.defaults`` module."
msgstr ""

# 7bfdcd4d7f10451982104550489878c5
#: ../../releases/1.4.txt:971
msgid ""
"Starting with Django 1.4 they are now available in :mod:`django.conf.urls`."
msgstr ""

# 9551825b51f8407ab338052d5f31ee93
#: ../../releases/1.4.txt:974
msgid "``django.contrib.databrowse``"
msgstr ""

# 971bda03a33f41768504f0199a558805
#: ../../releases/1.4.txt:976
msgid ""
"Databrowse has not seen active development for some time, and this does not "
"show any sign of changing. There had been a suggestion for a `GSOC project`_ "
"to integrate the functionality of databrowse into the admin, but no progress "
"was made. While Databrowse has been deprecated, an enhancement of ``django."
"contrib.admin`` providing a similar feature set is still possible."
msgstr ""

# 17c7d47a61fb4cc4bbb4653584797d90
#: ../../releases/1.4.txt:984
msgid ""
"The code that powers Databrowse is licensed under the same terms as Django "
"itself, and so is available to be adopted by an individual or group as a "
"third-party project."
msgstr ""

# 7d57fc797f3d4426bda0074c8872e77f
#: ../../releases/1.4.txt:989
msgid "``django.core.management.setup_environ``"
msgstr ""

# 602deff0007b43509fa2607b057552e7
#: ../../releases/1.4.txt:991
msgid ""
"This function temporarily modified ``sys.path`` in order to make the parent "
"\"project\" directory importable under the old flat :djadmin:`startproject` "
"layout. This function is now deprecated, as its path workarounds are no "
"longer needed with the new ``manage.py`` and default project layout."
msgstr ""

# aade8899efef45dab126f0ae5c274df6
#: ../../releases/1.4.txt:996
msgid ""
"This function was never documented or part of the public API, but was widely "
"recommended for use in setting up a \"Django environment\" for a user "
"script. These uses should be replaced by setting the "
"``DJANGO_SETTINGS_MODULE`` environment variable or using :func:`django.conf."
"settings.configure`."
msgstr ""

# 95dddbda9f084d069107c81d84e1db4a
#: ../../releases/1.4.txt:1002
msgid "``django.core.management.execute_manager``"
msgstr ""

# b1dbb5d7187c45968e26c3a66f18e3d3
#: ../../releases/1.4.txt:1004
msgid ""
"This function was previously used by ``manage.py`` to execute a management "
"command. It is identical to ``django.core.management."
"execute_from_command_line``, except that it first calls ``setup_environ``, "
"which is now deprecated. As such, ``execute_manager`` is also deprecated; "
"``execute_from_command_line`` can be used instead. Neither of these "
"functions is documented as part of the public API, but a deprecation path is "
"needed due to use in existing ``manage.py`` files."
msgstr ""

# 742089c2ff124ee7b217ad50215ee3aa
#: ../../releases/1.4.txt:1013
msgid "``is_safe`` and ``needs_autoescape`` attributes of template filters"
msgstr ""

# bbf07b4b08c843169eb67be0e7bf3467
#: ../../releases/1.4.txt:1015
msgid ""
"Two flags, ``is_safe`` and ``needs_autoescape``, define how each template "
"filter interacts with Django's auto-escaping behavior. They used to be "
"attributes of the filter function::"
msgstr ""

# 56cd1c2855f04675a0ce2603d7c77d78
#: ../../releases/1.4.txt:1024
msgid ""
"However, this technique caused some problems in combination with decorators, "
"especially :func:`@stringfilter <django.template.defaultfilters."
"stringfilter>`. Now, the flags are keyword arguments of :meth:`@register."
"filter <django.template.Library.filter>`::"
msgstr ""

# fd56913642904e8aa4a212fa14f130c2
#: ../../releases/1.4.txt:1033
msgid ""
"See :ref:`filters and auto-escaping <filters-auto-escaping>` for more "
"information."
msgstr ""

# 46c0daaa142a40ceab17901471dbc4cb
#: ../../releases/1.4.txt:1036
msgid "Session cookies now have the ``httponly`` flag by default"
msgstr ""

# 1ac450cd6b7749389ab8a42ec0ff95dc
#: ../../releases/1.4.txt:1038
msgid ""
"Session cookies now include the ``httponly`` attribute by default to help "
"reduce the impact of potential XSS attacks. For strict backwards "
"compatibility, use ``SESSION_COOKIE_HTTPONLY = False`` in your settings file."
msgstr ""

# 30d92b78c8de4f339fcde03d20fbe72a
#: ../../releases/1.4.txt:1043
msgid "Wildcard expansion of application names in `INSTALLED_APPS`"
msgstr ""

# fb2e2213750340678f2d152398283ef1
#: ../../releases/1.4.txt:1045
msgid ""
"Until Django 1.3, :setting:`INSTALLED_APPS` accepted wildcards in "
"application names, like ``django.contrib.*``. The expansion was performed by "
"a filesystem-based implementation of ``from <package> import *``. "
"Unfortunately, `this can't be done reliably`_."
msgstr ""

# cd6599f68e074d7fb6a2722fc6db8760
#: ../../releases/1.4.txt:1050
msgid ""
"This behavior was never documented. Since it is un-pythonic and not "
"obviously useful, it was removed in Django 1.4. If you relied on it, you "
"must edit your settings file to list all your applications explicitly."
msgstr ""

# 73c27a1973c94236a1e303efe801ea02
#: ../../releases/1.4.txt:1057
msgid "``HttpRequest.raw_post_data`` renamed to ``HttpRequest.body``"
msgstr ""

# e2a4fb563f3c458ca1a1df665f9ad2d4
#: ../../releases/1.4.txt:1059
msgid ""
"This attribute was confusingly named ``HttpRequest.raw_post_data``, but it "
"actually provided the body of the HTTP request. It's been renamed to "
"``HttpRequest.body``, and ``HttpRequest.raw_post_data`` has been deprecated."
msgstr ""
