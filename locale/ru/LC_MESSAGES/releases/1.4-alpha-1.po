# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2012.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-08-21 17:15\n"
"PO-Revision-Date: 2012-02-15 15:13\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# a81c69958a4546f7bba0d42687117339
#: ../../releases/1.4-alpha-1.txt:3
msgid "Django 1.4 alpha release notes"
msgstr ""

# f490649b975347b19f76d4075e26fe2d
#: ../../releases/1.4-alpha-1.txt:5
msgid "December 22, 2011."
msgstr ""

# 279b499ada6d4c069dc35502f9105746
#: ../../releases/1.4-alpha-1.txt:7
msgid "Welcome to Django 1.4 alpha!"
msgstr ""

# cb67af522d0c4df0a4033e49386d4ac8
#: ../../releases/1.4-alpha-1.txt:9
msgid ""
"This is the first in a series of preview/development releases leading up to "
"the eventual release of Django 1.4, scheduled for March 2012. This release "
"is primarily targeted at developers who are interested in trying out new "
"features and testing the Django codebase to help identify and resolve bugs "
"prior to the final 1.4 release."
msgstr ""

# cd38bdc602b1418d996c42920a88ff06
#: ../../releases/1.4-alpha-1.txt:15
msgid ""
"As such, this release is *not* intended for production use, and any such use "
"is discouraged."
msgstr ""

# 56ca3bf126974da0b79a7a992a95eddb
#: ../../releases/1.4-alpha-1.txt:18
msgid ""
"Django 1.4 alpha includes various `new features`_ and some minor `backwards "
"incompatible changes`_. There are also some features that have been dropped, "
"which are detailed in :doc:`our deprecation plan </internals/deprecation>`, "
"and we've `begun the deprecation process for some features`_."
msgstr ""

# 68c8c5c1e6e94be19e0490593b97bc57
#: ../../releases/1.4-alpha-1.txt:28
msgid "Python compatibility"
msgstr ""

# cf0e49ec833144389073c2584b481f96
#: ../../releases/1.4-alpha-1.txt:30
msgid ""
"While not a new feature, it's important to note that Django 1.4 introduces "
"the second shift in our Python compatibility policy since Django's initial "
"public debut. Django 1.2 dropped support for Python 2.3; now Django 1.4 "
"drops support for Python 2.4. As such, the minimum Python version required "
"for Django is now 2.5, and Django is tested and supported on Python 2.5, 2.6 "
"and 2.7."
msgstr ""

# ad3b5e1f9e144d3b88b8fe6bc88bd51a
#: ../../releases/1.4-alpha-1.txt:36
msgid ""
"This change should affect only a small number of Django users, as most "
"operating-system vendors today are shipping Python 2.5 or newer as their "
"default version. If you're still using Python 2.4, however, you'll need to "
"stick to Django 1.3 until you can upgrade; per :doc:`our support policy </"
"internals/release-process>`, Django 1.3 will continue to receive security "
"support until the release of Django 1.5."
msgstr ""

# 5cb7fc48378f478f9102d29909830262
#: ../../releases/1.4-alpha-1.txt:43
msgid ""
"Django does not support Python 3.x at this time. A document outlining our "
"full timeline for deprecating Python 2.x and moving to Python 3.x will be "
"published before the release of Django 1.4."
msgstr ""

# c1d10dcfae99436d86eba7729633328e
#: ../../releases/1.4-alpha-1.txt:48
msgid "What's new in Django 1.4"
msgstr ""

# c3748201bbf44c8684126d6d60aff8bc
#: ../../releases/1.4-alpha-1.txt:51
msgid "Support for in-browser testing frameworks"
msgstr ""

# 9511b753592741ee8e020ff14038d5fb
#: ../../releases/1.4-alpha-1.txt:53
msgid ""
"Django 1.4 supports integration with in-browser testing frameworks like "
"Selenium_. The new :class:`django.test.LiveServerTestCase` base class lets "
"you test the interactions between your site's front and back ends more "
"comprehensively. See the :class:`documentation<django.test."
"LiveServerTestCase>` for more details and concrete examples."
msgstr ""

# 3d4ba4f221c2472fbf63a1666af0b870
#: ../../releases/1.4-alpha-1.txt:63
msgid "``SELECT FOR UPDATE`` support"
msgstr ""

# e74a6de89f8b4d8fb213892346ecb9e3
#: ../../releases/1.4-alpha-1.txt:65
msgid ""
"Django 1.4 now includes a :meth:`QuerySet.select_for_update() <django.db."
"models.query.QuerySet.select_for_update>` method which generates a "
"``SELECT ... FOR UPDATE`` SQL query. This will lock rows until the end of "
"the transaction, meaning that other transactions cannot modify or delete "
"rows matched by a ``FOR UPDATE`` query."
msgstr ""

# 0932210e6bb04c2c9c9c00442314c5e5
#: ../../releases/1.4-alpha-1.txt:71
msgid ""
"For more details, see the documentation for :meth:`~django.db.models.query."
"QuerySet.select_for_update`."
msgstr ""

# adab7d2608d14fa5b7ffdc70ce592e68
#: ../../releases/1.4-alpha-1.txt:75
msgid "``Model.objects.bulk_create`` in the ORM"
msgstr ""

# 4b66f4edc98c4e49a6e0eac07d5e4ded
#: ../../releases/1.4-alpha-1.txt:77
msgid ""
"This method allows for more efficient creation of multiple objects in the "
"ORM. It can provide significant performance increases if you have many "
"objects. Django makes use of this internally, meaning some operations (such "
"as database setup for test suites) have seen a performance benefit as a "
"result."
msgstr ""

# f76f459891a245b4a4569ce550b517a3
#: ../../releases/1.4-alpha-1.txt:82
msgid ""
"See the :meth:`~django.db.models.query.QuerySet.bulk_create` docs for more "
"information."
msgstr ""

# 42a8b86c7bc341acb07a5b86d48ad19b
#: ../../releases/1.4-alpha-1.txt:86
msgid "``QuerySet.prefetch_related``"
msgstr ""

# f9a3079b2da8491c858bbe62dcd4ac98
#: ../../releases/1.4-alpha-1.txt:88
msgid ""
"Similar to :meth:`~django.db.models.query.QuerySet.select_related` but with "
"a different strategy and broader scope, :meth:`~django.db.models.query."
"QuerySet.prefetch_related` has been added to :class:`~django.db.models.query."
"QuerySet`. This method returns a new ``QuerySet`` that will prefetch each of "
"the specified related lookups in a single batch as soon as the query begins "
"to be evaluated. Unlike ``select_related``, it does the joins in Python, not "
"in the database, and supports many-to-many relationships, :class:`~django."
"contrib.contenttypes.generic.GenericForeignKey` and more. This allows you to "
"fix a very common performance problem in which your code ends up doing O(n) "
"database queries (or worse) if objects on your primary ``QuerySet`` each "
"have many related objects that you also need."
msgstr ""

# fd3b38da4e2e443d9cf466d2d14f2d3f
#: ../../releases/1.4-alpha-1.txt:102
msgid "Improved password hashing"
msgstr ""

# ebb31a806cd2400f899553c398f6c6b7
#: ../../releases/1.4-alpha-1.txt:104
msgid ""
"Django's auth system (``django.contrib.auth``) stores passwords using a one-"
"way algorithm. Django 1.3 uses the SHA1_ algorithm, but increasing processor "
"speeds and theoretical attacks have revealed that SHA1 isn't as secure as "
"we'd like. Thus, Django 1.4 introduces a new password storage system: by "
"default Django now uses the PBKDF2_ algorithm (as recommended by NIST_). You "
"can also easily choose a different algorithm (including the popular bcrypt_ "
"algorithm). For more details, see :ref:`auth_password_storage`."
msgstr ""

# c129631fbb0543f989c901adc59bce05
#: ../../releases/1.4-alpha-1.txt:119
msgid "HTML5 Doctype"
msgstr ""

# ecfc41febe1e441e85dff54cc5e4b4ee
#: ../../releases/1.4-alpha-1.txt:121
msgid ""
"We've switched the admin and other bundled templates to use the HTML5 "
"doctype. While Django will be careful to maintain compatibility with older "
"browsers, this change means that you can use any HTML5 features you need in "
"admin pages without having to lose HTML validity or override the provided "
"templates to change the doctype."
msgstr ""

# 36052a816cf8468e95c285f03a53833b
#: ../../releases/1.4-alpha-1.txt:128
msgid "List filters in admin interface"
msgstr ""

# 99ca04e50ef5468c930120a6bc238ff6
#: ../../releases/1.4-alpha-1.txt:130
msgid ""
"Prior to Django 1.4, the :mod:`~django.contrib.admin` app allowed you to "
"specify change list filters by specifying a field lookup, but didn't allow "
"you to create custom filters. This has been rectified with a simple API "
"(previously used internally and known as \"FilterSpec\"). For more details, "
"see the documentation for :attr:`~django.contrib.admin.ModelAdmin."
"list_filter`."
msgstr ""

# a429aaaa728643e18eac4f6d6cbaea36
#: ../../releases/1.4-alpha-1.txt:137
msgid "Multiple sort in admin interface"
msgstr ""

# 1d5bc67d96b9440bbe1f44ea403bfbb9
#: ../../releases/1.4-alpha-1.txt:139
msgid ""
"The admin change list now supports sorting on multiple columns. It respects "
"all elements of the :attr:`~django.contrib.admin.ModelAdmin.ordering` "
"attribute, and sorting on multiple columns by clicking on headers is "
"designed to mimic the behavior of desktop GUIs. The :meth:`~django.contrib."
"admin.ModelAdmin.get_ordering` method for specifying the ordering "
"dynamically (e.g. depending on the request) has also been added."
msgstr ""

# 8a035dba99dc463aa825070494b7ad13
#: ../../releases/1.4-alpha-1.txt:147
msgid "New ``ModelAdmin`` methods"
msgstr ""

# 30ecda80aaf54e90bffbf7eeb1725ae8
#: ../../releases/1.4-alpha-1.txt:149
msgid ""
"A new :meth:`~django.contrib.admin.ModelAdmin.save_related` method was added "
"to :mod:`~django.contrib.admin.ModelAdmin` to ease customization of how "
"related objects are saved in the admin."
msgstr ""

# db303dbde3a642aca25bbe0dc7d18b97
#: ../../releases/1.4-alpha-1.txt:153
msgid ""
"Two other new methods, :meth:`~django.contrib.admin.ModelAdmin."
"get_list_display` and :meth:`~django.contrib.admin.ModelAdmin."
"get_list_display_links` were added to :class:`~django.contrib.admin."
"ModelAdmin` to enable the dynamic customization of fields and links "
"displayed on the admin change list."
msgstr ""

# 37efdea51388414294a61525875920d4
#: ../../releases/1.4-alpha-1.txt:160
msgid "Admin inlines respect user permissions"
msgstr ""

# 144852a504874f9ab2e885f2139f3d3a
#: ../../releases/1.4-alpha-1.txt:162
msgid ""
"Admin inlines will now only allow those actions for which the user has "
"permission. For ``ManyToMany`` relationships with an auto-created "
"intermediate model (which does not have its own permissions), the change "
"permission for the related model determines if the user has the permission "
"to add, change or delete relationships."
msgstr ""

# 63e7e79619984c7a852db2c357bb8d8a
#: ../../releases/1.4-alpha-1.txt:169
msgid "Tools for cryptographic signing"
msgstr ""

# 204929367f6d4c9d8bfbc2493602027f
#: ../../releases/1.4-alpha-1.txt:171
msgid ""
"Django 1.4 adds both a low-level API for signing values and a high-level API "
"for setting and reading signed cookies, one of the most common uses of "
"signing in Web applications."
msgstr ""

# 62c000bf1a724a1b96cf655e4557d4d4
#: ../../releases/1.4-alpha-1.txt:175
msgid ""
"See the :doc:`cryptographic signing </topics/signing>` docs for more "
"information."
msgstr ""

# 2a36d7db070f457aaf6905178fb9bf0f
#: ../../releases/1.4-alpha-1.txt:179
msgid "Cookie-based session backend"
msgstr ""

# 135c060b7c8d4e3b9c961c7ce1f7e367
#: ../../releases/1.4-alpha-1.txt:181
msgid ""
"Django 1.4 introduces a new cookie-based backend for the session framework "
"which uses the tools for :doc:`cryptographic signing </topics/signing>` to "
"store the session data in the client's browser."
msgstr ""

# 03d3d3a48f3a4195af0ec65df4ee80db
#: ../../releases/1.4-alpha-1.txt:185
msgid ""
"See the :ref:`cookie-based session backend <cookie-session-backend>` docs "
"for more information."
msgstr ""

# 7870e4be12ad47858dc968e8d4225a9f
#: ../../releases/1.4-alpha-1.txt:189
msgid "New form wizard"
msgstr ""

# 1925f8dbe39041109044884baebc25d0
#: ../../releases/1.4-alpha-1.txt:191
msgid ""
"The previous ``FormWizard`` from the formtools contrib app has been replaced "
"with a new implementation based on the class-based views introduced in "
"Django 1.3. It features a pluggable storage API and doesn't require the "
"wizard to pass around hidden fields for every previous step."
msgstr ""

# a0f3cf2b64d24154bdf70b2f6dcc0d16
#: ../../releases/1.4-alpha-1.txt:196
msgid ""
"Django 1.4 ships with a session-based storage backend and a cookie-based "
"storage backend. The latter uses the tools for :doc:`cryptographic signing </"
"topics/signing>` also introduced in Django 1.4 to store the wizard's state "
"in the user's cookies."
msgstr ""

# 500a28f47b794544bf62fbc4427ae009
#: ../../releases/1.4-alpha-1.txt:201
msgid ""
"See the :doc:`form wizard </ref/contrib/formtools/form-wizard>` docs for "
"more information."
msgstr ""

# 5930cacc92a94ee59661846aefd85958
#: ../../releases/1.4-alpha-1.txt:205
msgid "``reverse_lazy``"
msgstr ""

# 2aec683f9e0143a396bf174ad7decf67
#: ../../releases/1.4-alpha-1.txt:207
msgid ""
"A lazily evaluated version of :func:`django.core.urlresolvers.reverse` was "
"added to allow using URL reversals before the project's URLConf gets loaded."
msgstr ""

# cd57f9cc80674c2d85821f9d8e576f34
#: ../../releases/1.4-alpha-1.txt:211
msgid "Translating URL patterns"
msgstr ""

# 3346c51de4964a5ab7d7ff0777e9330f
#: ../../releases/1.4-alpha-1.txt:213
msgid ""
"Django 1.4 gained the ability to look for a language prefix in the URL "
"pattern when using the new :func:`~django.conf.urls.i18n.i18n_patterns` "
"helper function. Additionally, it's now possible to define translatable URL "
"patterns using :func:`~django.utils.translation.ugettext_lazy`. See :ref:"
"`url-internationalization` for more information about the language prefix "
"and how to internationalize URL patterns."
msgstr ""

# fb780ced160b4042a7f5911188a97fbf
#: ../../releases/1.4-alpha-1.txt:221
msgid ""
"Contextual translation support for ``{% trans %}`` and ``{% blocktrans %}``"
msgstr ""

# 96f87a20231b49999cf6f4e49d209640
#: ../../releases/1.4-alpha-1.txt:223
msgid ""
"The :ref:`contextual translation<contextual-markers>` support introduced in "
"Django 1.3 via the ``pgettext`` function has been extended to the :ttag:"
"`trans` and :ttag:`blocktrans` template tags using the new ``context`` "
"keyword."
msgstr ""

# 63bf2bca11344ad7810847e1b817c046
#: ../../releases/1.4-alpha-1.txt:229
msgid "Customizable ``SingleObjectMixin`` URLConf kwargs"
msgstr ""

# d25f25c85f1541fb811af041b3312981
#: ../../releases/1.4-alpha-1.txt:231
msgid ""
"Two new attributes, :attr:`pk_url_kwarg<django.views.generic.detail."
"SingleObjectMixin.pk_url_kwarg>` and :attr:`slug_url_kwarg<django.views."
"generic.detail.SingleObjectMixin.slug_url_kwarg>`, have been added to :class:"
"`~django.views.generic.detail.SingleObjectMixin` to enable the customization "
"of URLConf keyword arguments used for single object generic views."
msgstr ""

# 5b8eeb6c978746298e338114ba573cc3
#: ../../releases/1.4-alpha-1.txt:240
msgid "Assignment template tags"
msgstr ""

# b978f0bb19b14f7eb56e78626768cd28
#: ../../releases/1.4-alpha-1.txt:242
msgid ""
"A new :ref:`assignment_tag<howto-custom-template-tags-assignment-tags>` "
"helper function was added to ``template.Library`` to ease the creation of "
"template tags that store data in a specified context variable."
msgstr ""

# 2d70f0629c624a5897a64336be69534d
#: ../../releases/1.4-alpha-1.txt:247
msgid "``*args`` and ``**kwargs`` support for template tag helper functions"
msgstr ""

# 14a4f924259647c59fd9c57239b2874d
#: ../../releases/1.4-alpha-1.txt:249
msgid ""
"The :ref:`simple_tag<howto-custom-template-tags-simple-tags>`, :ref:"
"`inclusion_tag <howto-custom-template-tags-inclusion-tags>` and newly "
"introduced :ref:`assignment_tag<howto-custom-template-tags-assignment-tags>` "
"template helper functions may now accept any number of positional or keyword "
"arguments. For example:"
msgstr ""

# 954be2b051c848c5b1cc7260c84e811c
#: ../../releases/1.4-alpha-1.txt:265
msgid ""
"Then in the template any number of arguments may be passed to the template "
"tag. For example:"
msgstr ""

# 8ad9a3f434fd4ac3a7b24cfb1f6a2587
#: ../../releases/1.4-alpha-1.txt:273
msgid "No wrapping of exceptions in ``TEMPLATE_DEBUG`` mode"
msgstr ""

# 14d03b4d060d441d97b2ca8a2c1beef4
#: ../../releases/1.4-alpha-1.txt:275
msgid ""
"In previous versions of Django, whenever the :setting:`TEMPLATE_DEBUG` "
"setting was ``True``, any exception raised during template rendering (even "
"exceptions unrelated to template syntax) were wrapped in "
"``TemplateSyntaxError`` and re-raised. This was done in order to provide "
"detailed template source location information in the debug 500 page."
msgstr ""

# 535ce854d06a42a0aabfb6f8566e7dc8
#: ../../releases/1.4-alpha-1.txt:281
msgid ""
"In Django 1.4, exceptions are no longer wrapped. Instead, the original "
"exception is annotated with the source information. This means that catching "
"exceptions from template rendering is now consistent regardless of the value "
"of :setting:`TEMPLATE_DEBUG`, and there's no need to catch and unwrap "
"``TemplateSyntaxError`` in order to catch other errors."
msgstr ""

# a6a63f062e144b3c8ca4c8f9c3e7e9bf
#: ../../releases/1.4-alpha-1.txt:288
msgid "``truncatechars`` template filter"
msgstr ""

# db7c8ce1df7342b7a82636c86bed835c
#: ../../releases/1.4-alpha-1.txt:290
msgid ""
"Added a filter which truncates a string to be no longer than the specified "
"number of characters. Truncated strings end with a translatable ellipsis "
"sequence (\"...\"). See the documentation for :tfilter:`truncatechars` for "
"more details."
msgstr ""

# f975f11b6ad94f9f8cc9fdfd6acf4347
#: ../../releases/1.4-alpha-1.txt:296
msgid "``static`` template tag"
msgstr ""

# 9d7759d6c1ac4a1e9f78958180ec4576
#: ../../releases/1.4-alpha-1.txt:298
msgid ""
"The :mod:`staticfiles<django.contrib.staticfiles>` contrib app has a new :"
"ttag:`static<staticfiles-static>` template tag to refer to files saved with "
"the :setting:`STATICFILES_STORAGE` storage backend. It uses the storage "
"backend's ``url`` method and therefore supports advanced features such as :"
"ref:`serving files from a cloud service<staticfiles-from-cdn>`."
msgstr ""

# fcbb95de70f344d382cc949d8dde88bc
#: ../../releases/1.4-alpha-1.txt:305
msgid "``CachedStaticFilesStorage`` storage backend"
msgstr ""

# c318198d4c5f4651b95b4b5439ffb96c
#: ../../releases/1.4-alpha-1.txt:307
msgid ""
"In addition to the `static template tag`_, the :mod:`staticfiles<django."
"contrib.staticfiles>` contrib app now has a :class:`~django.contrib."
"staticfiles.storage.CachedStaticFilesStorage` backend which caches the files "
"it saves (when running the :djadmin:`collectstatic` management command) by "
"appending the MD5 hash of the file's content to the filename. For example, "
"the file ``css/styles.css`` would also be saved as ``css/styles.55e7cbb9ba48."
"css``"
msgstr ""

# 1fff716ea2e34e4f93dc3121e1b0f511
#: ../../releases/1.4-alpha-1.txt:315
msgid ""
"See the :class:`~django.contrib.staticfiles.storage."
"CachedStaticFilesStorage` docs for more information."
msgstr ""

# 5fdadaf926cb46fcb2367b79b8fafa69
#: ../../releases/1.4-alpha-1.txt:319
msgid "Simple clickjacking protection"
msgstr ""

# 40ddd6bc32a642898d484e0843fc9b46
#: ../../releases/1.4-alpha-1.txt:321
msgid ""
"We've added a middleware to provide easy protection against `clickjacking "
"<http://en.wikipedia.org/wiki/Clickjacking>`_ using the ``X-Frame-Options`` "
"header. It's not enabled by default for backwards compatibility reasons, but "
"you'll almost certainly want to :doc:`enable it </ref/clickjacking/>` to "
"help plug that security hole for browsers that support the header."
msgstr ""

# 031a51fd423a4875b58cbc1d907d9c2f
#: ../../releases/1.4-alpha-1.txt:328
msgid "CSRF improvements"
msgstr ""

# 5b94708dc4554273babf4cf86f69d2f6
#: ../../releases/1.4-alpha-1.txt:330
msgid ""
"We've made various improvements to our CSRF features, including the :func:"
"`~django.views.decorators.csrf.ensure_csrf_cookie` decorator which can help "
"with AJAX heavy sites, protection for PUT and DELETE requests, and the :"
"setting:`CSRF_COOKIE_SECURE` and :setting:`CSRF_COOKIE_PATH` settings which "
"can improve the security and usefulness of the CSRF protection. See the :doc:"
"`CSRF docs </ref/contrib/csrf>` for more information."
msgstr ""

# 7547fc59fab9433e8df4cd1c1607bd35
#: ../../releases/1.4-alpha-1.txt:338
msgid "Error report filtering"
msgstr ""

# bb543d5f1e8046e6a1d6b6de684b1881
#: ../../releases/1.4-alpha-1.txt:340
msgid ""
"Two new function decorators, :func:`sensitive_variables` and :func:"
"`sensitive_post_parameters`, were added to allow designating the local "
"variables and POST parameters which may contain sensitive information and "
"should be filtered out of error reports."
msgstr ""

# 4a8bf78dccda40598f45d3a2516a5106
#: ../../releases/1.4-alpha-1.txt:345
msgid ""
"All POST parameters are now systematically filtered out of error reports for "
"certain views (``login``, ``password_reset_confirm``, ``password_change``, "
"and ``add_view`` in :mod:`django.contrib.auth.views`, as well as "
"``user_change_password`` in the admin app) to prevent the leaking of "
"sensitive information such as user passwords."
msgstr ""

# b0dfdae64ace4c12932932a4c944de73
#: ../../releases/1.4-alpha-1.txt:351
msgid ""
"You may override or customize the default filtering by writing a :ref:"
"`custom filter<custom-error-reports>`. For more information see the docs on :"
"ref:`Filtering error reports<filtering-error-reports>`."
msgstr ""

# c6f20802784a47c1a8f9b67a27417124
#: ../../releases/1.4-alpha-1.txt:356
msgid "Extended IPv6 support"
msgstr ""

# cb0e75c1f10c426fb940315b22b0e125
#: ../../releases/1.4-alpha-1.txt:358
msgid ""
"The previously added support for IPv6 addresses when using the runserver "
"management command in Django 1.3 has now been further extended by adding a :"
"class:`~django.db.models.GenericIPAddressField` model field, a :class:"
"`~django.forms.GenericIPAddressField` form field and the validators :data:"
"`~django.core.validators.validate_ipv46_address` and :data:`~django.core."
"validators.validate_ipv6_address`"
msgstr ""

# 51e06bcb07eb41a2981be6c896998e1c
#: ../../releases/1.4-alpha-1.txt:366
msgid "Updated default project layout and ``manage.py``"
msgstr ""

# 1a46837c139848c483a060e2ed044ff8
#: ../../releases/1.4-alpha-1.txt:368
msgid ""
"Django 1.4 ships with an updated default project layout and ``manage.py`` "
"file for the :djadmin:`startproject` management command. These fix some "
"issues with the previous ``manage.py`` handling of Python import paths that "
"caused double imports, trouble moving from development to deployment, and "
"other difficult-to-debug path issues."
msgstr ""

# 2e5343e66b034631a79c38f629a27105
#: ../../releases/1.4-alpha-1.txt:374
msgid ""
"The previous ``manage.py`` called functions that are now deprecated, and "
"thus projects upgrading to Django 1.4 should update their ``manage.py``. "
"(The old-style ``manage.py`` will continue to work as before until Django "
"1.6; in 1.5 it will raise ``DeprecationWarning``)."
msgstr ""

# c8019ddc37d143ddb2a041cb7d11595c
#: ../../releases/1.4-alpha-1.txt:379
msgid "The new recommended ``manage.py`` file should look like this::"
msgstr ""

# 5ea717c99ca947bd8bc8e5048a1f24e8
#: ../../releases/1.4-alpha-1.txt:391
msgid ""
"``{{ project_name }}`` should be replaced with the Python package name of "
"the actual project."
msgstr ""

# 3bcee0215daf4828bfd7c98d2021e378
#: ../../releases/1.4-alpha-1.txt:394
msgid ""
"If settings, URLconfs, and apps within the project are imported or "
"referenced using the project name prefix (e.g. ``myproject.settings``, "
"``ROOT_URLCONF = \"myproject.urls\"``, etc), the new ``manage.py`` will need "
"to be moved one directory up, so it is outside the project package rather "
"than adjacent to ``settings.py`` and ``urls.py``."
msgstr ""

# b203b1894ccc4bc29392f0ad41970cad
#: ../../releases/1.4-alpha-1.txt:400
msgid "For instance, with the following layout::"
msgstr ""

# ad9f917002244376a818e97b85c81a72
#: ../../releases/1.4-alpha-1.txt:411
msgid ""
"You could import ``mysite.settings``, ``mysite.urls``, and ``mysite.myapp``, "
"but not ``settings``, ``urls``, or ``myapp`` as top-level modules."
msgstr ""

# fa820affd2754342a5121745c169c5f2
#: ../../releases/1.4-alpha-1.txt:414
msgid ""
"Anything imported as a top-level module can be placed adjacent to the new "
"``manage.py``. For instance, to decouple \"myapp\" from the project module "
"and import it as just ``myapp``, place it outside the ``mysite/`` directory::"
msgstr ""

# 7afe750ff5ef41ea86064819a0199645
#: ../../releases/1.4-alpha-1.txt:427
msgid ""
"If the same code is imported inconsistently (some places with the project "
"prefix, some places without it), the imports will need to be cleaned up when "
"switching to the new ``manage.py``."
msgstr ""

# d90a328a721a43edb90454420c3d025b
#: ../../releases/1.4-alpha-1.txt:432
msgid "Improved WSGI support"
msgstr ""

# 49aa157c34dd4a5b8908ec483645bca3
#: ../../releases/1.4-alpha-1.txt:434
msgid ""
"The :djadmin:`startproject` management command now adds a :file:`wsgi.py` "
"module to the initial project layout, containing a simple WSGI application "
"that can be used for :doc:`deploying with WSGI app servers</howto/deployment/"
"wsgi/index>`."
msgstr ""

# e5c0682599974f0897ab7ef4184966e6
#: ../../releases/1.4-alpha-1.txt:439
msgid ""
"The :djadmin:`built-in development server<runserver>` now supports using an "
"externally-defined WSGI callable, so as to make it possible to run runserver "
"with the same WSGI configuration that is used for deployment. A new :setting:"
"`WSGI_APPLICATION` setting is available to configure which WSGI callable :"
"djadmin:`runserver` uses."
msgstr ""

# 79bb31fdc8d24deb9e6132de0ac388d2
#: ../../releases/1.4-alpha-1.txt:445
msgid ""
"(The :djadmin:`runfcgi` management command also internally wraps the WSGI "
"callable configured via :setting:`WSGI_APPLICATION`.)"
msgstr ""

# 503c9c5203e548eea431f9f2916af160
#: ../../releases/1.4-alpha-1.txt:449
msgid "Custom project and app templates"
msgstr ""

# a3a6165df2ad43e193332b0b3ea0be21
#: ../../releases/1.4-alpha-1.txt:451
msgid ""
"The :djadmin:`startapp` and :djadmin:`startproject` management commands got "
"a ``--template`` option for specifying a path or URL to a custom app or "
"project template."
msgstr ""

# 9d118297e74940eea145e5e48333e604
#: ../../releases/1.4-alpha-1.txt:455
msgid ""
"For example, Django will use the ``/path/to/my_project_template`` directory "
"when running the following command::"
msgstr ""

# 9fb6605f82f54653abe0281458c74520
#: ../../releases/1.4-alpha-1.txt:460
msgid ""
"You can also now provide a destination directory as the second argument to "
"both :djadmin:`startapp` and :djadmin:`startproject`::"
msgstr ""

# f88826716152461e9e59d67f99f41537
#: ../../releases/1.4-alpha-1.txt:466
msgid ""
"For more information, see the :djadmin:`startapp` and :djadmin:"
"`startproject` documentation."
msgstr ""

# 742d53b1f4254237a92fce27acc754cf
#: ../../releases/1.4-alpha-1.txt:470
msgid "Support for time zones"
msgstr ""

# 566981e70a0f4b3abb165687d12609bd
#: ../../releases/1.4-alpha-1.txt:472
msgid ""
"Django 1.4 adds :ref:`support for time zones <time-zones>`. When it's "
"enabled, Django stores date and time information in UTC in the database, "
"uses time zone-aware datetime objects internally, and translates them to the "
"end user's time zone in templates and forms."
msgstr ""

# 79f26177abca46c8b7326b43685db366
#: ../../releases/1.4-alpha-1.txt:477
msgid "Reasons for using this feature include:"
msgstr ""

# 66481650262446cc84eff6d75a731df6
#: ../../releases/1.4-alpha-1.txt:479
msgid "Customizing date and time display for users around the world."
msgstr ""

# 55589fb27a584199b7e4161d3d4b1638
#: ../../releases/1.4-alpha-1.txt:480
msgid ""
"Storing datetimes in UTC for database portability and interoperability. "
"(This argument doesn't apply to PostgreSQL, because it already stores "
"timestamps with time zone information in Django 1.3.)"
msgstr ""

# ccbc28f515024099b2dac7c0772782c1
#: ../../releases/1.4-alpha-1.txt:483
msgid "Avoiding data corruption problems around DST transitions."
msgstr ""

# 54d4519c946a43be98d34a30c3c6b66e
#: ../../releases/1.4-alpha-1.txt:485
msgid ""
"Time zone support is enabled by default in new projects created with :"
"djadmin:`startproject`. If you want to use this feature in an existing "
"project, there is a :ref:`migration guide <time-zones-migration-guide>`."
msgstr ""

# 9d784de9a2484f5787d90fa0684521e7
#: ../../releases/1.4-alpha-1.txt:490
msgid "Minor features"
msgstr ""

# c195bb6a94cd4d678015f23c045bc673
#: ../../releases/1.4-alpha-1.txt:492
msgid "Django 1.4 also includes several smaller improvements worth noting:"
msgstr ""

# 51791546d89b4b05b73fc7149214176a
#: ../../releases/1.4-alpha-1.txt:494
msgid ""
"A more usable stacktrace in the technical 500 page: frames in the stack "
"trace which reference Django's code are dimmed out, while frames in user "
"code are slightly emphasized. This change makes it easier to scan a "
"stacktrace for issues in user code."
msgstr ""

# 97a59472f0a3425ebaefa79c62322969
#: ../../releases/1.4-alpha-1.txt:499
msgid ":doc:`Tablespace support </topics/db/tablespaces>` in PostgreSQL."
msgstr ""

# ac753597e73241e7a5e2bb7e02ac1f7b
#: ../../releases/1.4-alpha-1.txt:501
msgid "Customizable names for :meth:`~django.template.Library.simple_tag`."
msgstr ""

# 1a138abadaf94298ab1ded4d539a930d
#: ../../releases/1.4-alpha-1.txt:503
msgid ""
"In the documentation, a helpful :doc:`security overview </topics/security>` "
"page."
msgstr ""

# 0533fa6fc7224a47bf541b264a47cef4
#: ../../releases/1.4-alpha-1.txt:506
msgid ""
"The ``django.contrib.auth.models.check_password`` function has been moved to "
"the ``django.contrib.auth.utils`` module. Importing it from the old location "
"will still work, but you should update your imports."
msgstr ""

# 1d439a4aa0954cfdb3defdf715a99f73
#: ../../releases/1.4-alpha-1.txt:510
msgid ""
"The :djadmin:`collectstatic` management command gained a ``--clear`` option "
"to delete all files at the destination before copying or linking the static "
"files."
msgstr ""

# 616c5af7b97c4556b38fcbe04195ac58
#: ../../releases/1.4-alpha-1.txt:514
msgid ""
"It is now possible to load fixtures containing forward references when using "
"MySQL with the InnoDB database engine."
msgstr ""

# 4b76be5359dc42bf8648a686cc1aed05
#: ../../releases/1.4-alpha-1.txt:517
msgid ""
"A new 403 response handler has been added as ``'django.views.defaults."
"permission_denied'``. You can set your own handler by setting the value of :"
"data:`django.conf.urls.handler403`. See the documentation about :ref:`the "
"403 (HTTP Forbidden) view<http_forbidden_view>` for more information."
msgstr ""

# 12028c4ead524ade91ff0ffec2a05c96
#: ../../releases/1.4-alpha-1.txt:523
msgid ""
"The :ttag:`trans` template tag now takes an optional ``as`` argument to be "
"able to retrieve a translation string without displaying it but setting a "
"template context variable instead."
msgstr ""

# e5fae478d6af4ea6b001323b93e60c4f
#: ../../releases/1.4-alpha-1.txt:527
msgid "The :ttag:`if` template tag now supports ``{% elif %}`` clauses."
msgstr ""

# 00f3643d8649445488ada651636f00e6
#: ../../releases/1.4-alpha-1.txt:529
msgid ""
"A new plain text version of the HTTP 500 status code internal error page "
"served when :setting:`DEBUG` is ``True`` is now sent to the client when "
"Django detects that the request has originated in JavaScript code (:meth:"
"`~django.http.HttpRequest.is_ajax` is used for this)."
msgstr ""

# 6d0c7ad2e58645609068006a82aa8bc1
#: ../../releases/1.4-alpha-1.txt:534
msgid ""
"Similarly to its HTML counterpart, it contains a collection of different "
"pieces of information about the state of the web application."
msgstr ""

# 9a8d74b4dd154469b5588fbe512faa4f
#: ../../releases/1.4-alpha-1.txt:537
msgid ""
"This should make it easier to read when debugging interaction with client-"
"side Javascript code."
msgstr ""

# e21edc4d84a44d468c65e0c48ac0c16a
#: ../../releases/1.4-alpha-1.txt:540
msgid ""
"Added the :djadminopt:`--no-location` option to the :djadmin:`makemessages` "
"command."
msgstr ""

# d3c593bdfa9841c889b6796ca36b20a2
#: ../../releases/1.4-alpha-1.txt:543
msgid ""
"Changed the ``locmem`` cache backend to use ``pickle.HIGHEST_PROTOCOL`` for "
"better compatibility with the other cache backends."
msgstr ""

# 187d21a807d5446fa6aae5fef7867457
#: ../../releases/1.4-alpha-1.txt:547
msgid ""
"Added support in the ORM for generating ``SELECT`` queries containing "
"``DISTINCT ON``."
msgstr ""

# a78dc2fe73b24c2d8011270a16000708
#: ../../releases/1.4-alpha-1.txt:550
msgid ""
"The ``distinct()`` ``QuerySet`` method now accepts an optional list of model "
"field names. If specified, then the ``DISTINCT`` statement is limited to "
"these fields. This is only supported in PostgreSQL."
msgstr ""

# 36ae0ddb79b34336942c3b6731a63772
#: ../../releases/1.4-alpha-1.txt:554
msgid ""
"For more details, see the documentation for :meth:`~django.db.models.query."
"QuerySet.distinct`."
msgstr ""

# 54fa3b6e7bd941acae36868559b7d76a
#: ../../releases/1.4-alpha-1.txt:558
msgid "Backwards incompatible changes in 1.4"
msgstr ""

# 753b3a49df6a4916aca7da64dafb357d
#: ../../releases/1.4-alpha-1.txt:561
msgid "django.contrib.admin"
msgstr ""

# d0cbbf4a6f4141dfa3a15dad3949f8fc
#: ../../releases/1.4-alpha-1.txt:563
msgid ""
"The included administration app ``django.contrib.admin`` has for a long time "
"shipped with a default set of static files such as JavaScript, images and "
"stylesheets. Django 1.3 added a new contrib app ``django.contrib."
"staticfiles`` to handle such files in a generic way and defined conventions "
"for static files included in apps."
msgstr ""

# 8ec13cb5d9bd4149b03543d2cdf1d64a
#: ../../releases/1.4-alpha-1.txt:569
msgid ""
"Starting in Django 1.4 the admin's static files also follow this convention "
"to make it easier to deploy the included files. In previous versions of "
"Django, it was also common to define an ``ADMIN_MEDIA_PREFIX`` setting to "
"point to the URL where the admin's static files are served by a web server. "
"This setting has now been deprecated and replaced by the more general "
"setting :setting:`STATIC_URL`. Django will now expect to find the admin "
"static files under the URL ``<STATIC_URL>/admin/``."
msgstr ""

# 06edb60746054ce48c1d2119afb2491c
#: ../../releases/1.4-alpha-1.txt:577
msgid ""
"If you've previously used a URL path for ``ADMIN_MEDIA_PREFIX`` (e.g. ``/"
"media/``) simply make sure :setting:`STATIC_URL` and :setting:`STATIC_ROOT` "
"are configured and your web server serves the files correctly. The "
"development server continues to serve the admin files just like before. "
"Don't hesitate to consult the :doc:`static files howto </howto/static-files/"
"index>` for further details."
msgstr ""

# b7a74a3289d740a4be06b93445ded1a0
#: ../../releases/1.4-alpha-1.txt:584
msgid ""
"In case your ``ADMIN_MEDIA_PREFIX`` is set to an specific domain (e.g. "
"``http://media.example.com/admin/``) make sure to also set your :setting:"
"`STATIC_URL` setting to the correct URL, for example ``http://media.example."
"com/``."
msgstr ""

# 6b8587252aa749a49956557b69a0746d
#: ../../releases/1.4-alpha-1.txt:591
msgid ""
"If you're implicitly relying on the path of the admin static files on your "
"server's file system when you deploy your site, you have to update that "
"path. The files were moved from :file:`django/contrib/admin/media/` to :file:"
"`django/contrib/admin/static/admin/`."
msgstr ""

# 23b6ff15695c481cbdeabe5fd2d62e13
#: ../../releases/1.4-alpha-1.txt:597
msgid "Supported browsers for the admin"
msgstr ""

# 8b9d2da73fb848bc893f05cc29703d90
#: ../../releases/1.4-alpha-1.txt:599
msgid ""
"Django hasn't had a clear policy on which browsers are supported for using "
"the admin app. Django's new policy formalizes existing practices: `YUI's A-"
"grade`_ browsers should provide a fully-functional admin experience, with "
"the notable exception of IE6, which is no longer supported."
msgstr ""

# 050e76e599fe475893a6b341a7158cc1
#: ../../releases/1.4-alpha-1.txt:604
msgid ""
"Released over ten years ago, IE6 imposes many limitations on modern web "
"development. The practical implications of this policy are that contributors "
"are free to improve the admin without consideration for these limitations."
msgstr ""

# 79925c1b03ae4b8fa9d438d5d52e79c3
#: ../../releases/1.4-alpha-1.txt:608
msgid ""
"This new policy **has no impact** on development outside of the admin. Users "
"of Django are free to develop webapps compatible with any range of browsers."
msgstr ""

# 00e61724b0f64824ab21352615939d2c
#: ../../releases/1.4-alpha-1.txt:614
msgid "Removed admin icons"
msgstr ""

# 5d9f19cf30034ce28b3b7c5b2bc83da7
#: ../../releases/1.4-alpha-1.txt:616
msgid ""
"As part of an effort to improve the performance and usability of the admin's "
"changelist sorting interface and of the admin's :attr:`horizontal <django."
"contrib.admin.ModelAdmin.filter_horizontal>` and :attr:`vertical <django."
"contrib.admin.ModelAdmin.filter_vertical>` \"filter\" widgets, some icon "
"files were removed and grouped into two sprite files."
msgstr ""

# 2cdbd118ba9a478da7800fd626f6d97f
#: ../../releases/1.4-alpha-1.txt:622
msgid ""
"Specifically: ``selector-add.gif``, ``selector-addall.gif``, ``selector-"
"remove.gif``, ``selector-removeall.gif``, ``selector_stacked-add.gif`` and "
"``selector_stacked-remove.gif`` were combined into ``selector-icons.gif``; "
"and ``arrow-up.gif`` and ``arrow-down.gif`` were combined into ``sorting-"
"icons.gif``."
msgstr ""

# edc9d77c58214eccb6ce1dcfb52e108f
#: ../../releases/1.4-alpha-1.txt:628
msgid ""
"If you used those icons to customize the admin then you will want to replace "
"them with your own icons or retrieve them from a previous release."
msgstr ""

# ff926032e02e4fd3b7b58580e5811e92
#: ../../releases/1.4-alpha-1.txt:632
msgid "CSS class names in admin forms"
msgstr ""

# 6eb6164d5098429fbbf5e528c28c06f3
#: ../../releases/1.4-alpha-1.txt:634
msgid ""
"To avoid conflicts with other common CSS class names (e.g. \"button\"), a "
"prefix \"field-\" has been added to all CSS class names automatically "
"generated from the form field names in the main admin forms, stacked inline "
"forms and tabular inline cells. You will need to take that prefix into "
"account in your custom style sheets or javascript files if you previously "
"used plain field names as selectors for custom styles or javascript "
"transformations."
msgstr ""

# e7751b1f471d4e58b205b65e585524cc
#: ../../releases/1.4-alpha-1.txt:642
msgid "Compatibility with old signed data"
msgstr ""

# 2150831a998c4623bebdab820ab5e880
#: ../../releases/1.4-alpha-1.txt:644
msgid ""
"Django 1.3 changed the cryptographic signing mechanisms used in a number of "
"places in Django. While Django 1.3 kept fallbacks that would accept hashes "
"produced by the previous methods, these fallbacks are removed in Django 1.4."
msgstr ""

# ffa7516e86a54fb5af41d91ad6190744
#: ../../releases/1.4-alpha-1.txt:648
msgid ""
"So, if you upgrade to Django 1.4 directly from 1.2 or earlier, you may lose/"
"invalidate certain pieces of data that have been cryptographically signed "
"using an old method. To avoid this, use Django 1.3 first for a period of "
"time to allow the signed data to expire naturally. The affected parts are "
"detailed below, with 1) the consequences of ignoring this advice and 2) the "
"amount of time you need to run Django 1.3 for the data to expire or become "
"irrelevant."
msgstr ""

# a30f6bb797604ec3aec511293dab45b5
#: ../../releases/1.4-alpha-1.txt:655
msgid "``contrib.sessions`` data integrity check"
msgstr ""

# 83dff00bc8f44d8ea1acbc2633e13c79
#: ../../releases/1.4-alpha-1.txt:657
msgid ""
"consequences: the user will be logged out, and session data will be lost."
msgstr ""

# dc1e7bca167c4e4d9a2c194a34c152df
#: ../../releases/1.4-alpha-1.txt:659
msgid "time period: defined by :setting:`SESSION_COOKIE_AGE`."
msgstr ""

# 1e77cdb95ac64c40b9c4dfa6d36efcd0
#: ../../releases/1.4-alpha-1.txt:661
msgid "``contrib.auth`` password reset hash"
msgstr ""

# 81da04bc7830432589ad98cdfe5d83a5
#: ../../releases/1.4-alpha-1.txt:663
msgid ""
"consequences: password reset links from before the upgrade will not work."
msgstr ""

# 059fe8894add4378995a57b3a3704803
#: ../../releases/1.4-alpha-1.txt:665
msgid "time period: defined by :setting:`PASSWORD_RESET_TIMEOUT_DAYS`."
msgstr ""

# 0a0c79f03a4d483a9a6a4ddcf921266d
#: ../../releases/1.4-alpha-1.txt:667
msgid ""
"Form-related hashes — these are much shorter lifetime, and are relevant only "
"for the short window where a user might fill in a form generated by the pre-"
"upgrade Django instance, and try to submit it to the upgraded Django "
"instance:"
msgstr ""

# 32d989bdb020484cb9f412514d30b8ce
#: ../../releases/1.4-alpha-1.txt:671
msgid "``contrib.comments`` form security hash"
msgstr ""

# fb967d7e30114b04a8c1be250765cdc3
#: ../../releases/1.4-alpha-1.txt:673
msgid ""
"consequences: the user will see a validation error \"Security hash failed\"."
msgstr ""

# 84c2be30d7184f9595802e981af9eff1
#: ../../releases/1.4-alpha-1.txt:675
msgid ""
"time period: the amount of time you expect users to take filling out comment "
"forms."
msgstr ""

# 2971964d1c4b4fb28eaae38893840ae0
#: ../../releases/1.4-alpha-1.txt:678
msgid "``FormWizard`` security hash"
msgstr ""

# c2c5cb851ebf4a558cd96bcf5f07cf39
#: ../../releases/1.4-alpha-1.txt:680
msgid ""
"consequences: the user will see an error about the form having expired, and "
"will be sent back to the first page of the wizard, losing the data they have "
"entered so far."
msgstr ""

# 4f7f0770f5a84dbfb3158f600b462445
#: ../../releases/1.4-alpha-1.txt:684
msgid ""
"time period: the amount of time you expect users to take filling out the "
"affected forms."
msgstr ""

# ad7015d45709462595ed7ce8ce62cce0
#: ../../releases/1.4-alpha-1.txt:687
msgid "CSRF check"
msgstr ""

# 3d33299f824d44388ff14b556cd3fd3e
#: ../../releases/1.4-alpha-1.txt:689
msgid ""
"Note: This is actually a Django 1.1 fallback, not Django 1.2, and applies "
"only if you are upgrading from 1.1."
msgstr ""

# 47fdce5bcc25487c8c71a82ae692a053
#: ../../releases/1.4-alpha-1.txt:692
msgid ""
"consequences: the user will see a 403 error with any CSRF protected POST "
"form."
msgstr ""

# aa7041e67a5d4905bab9c9c23147cdf0
#: ../../releases/1.4-alpha-1.txt:695
msgid ""
"time period: the amount of time you expect user to take filling out such "
"forms."
msgstr ""

# 486e3bf8700d485ab2fc37edac3afe3b
#: ../../releases/1.4-alpha-1.txt:699
msgid "django.contrib.flatpages"
msgstr ""

# 1e80883e56f9417faafcc58b2dfd5ad2
#: ../../releases/1.4-alpha-1.txt:701
msgid ""
"Starting in the 1.4 release the :class:`~django.contrib.flatpages.middleware."
"FlatpageFallbackMiddleware` only adds a trailing slash and redirects if the "
"resulting URL refers to an existing flatpage. For example, requesting ``/"
"notaflatpageoravalidurl`` in a previous version would redirect to ``/"
"notaflatpageoravalidurl/``, which would subsequently raise a 404. Requesting "
"``/notaflatpageoravalidurl`` now will immediately raise a 404. Additionally "
"redirects returned by flatpages are now permanent (301 status code) to match "
"the behavior of the :class:`~django.middleware.common.CommonMiddleware`."
msgstr ""

# 79a4809a39da4a79925eaecaaf550fac
#: ../../releases/1.4-alpha-1.txt:712
msgid ""
"Serialization of :class:`~datetime.datetime` and :class:`~datetime.time`"
msgstr ""

# c0f1169779ab4e8290e7c57bf569f0b6
#: ../../releases/1.4-alpha-1.txt:714
msgid ""
"As a consequence of time zone support, and according to the ECMA-262 "
"specification, some changes were made to the JSON serializer:"
msgstr ""

# cd8ebd4db4054d9cad28cf02cb53c7aa
#: ../../releases/1.4-alpha-1.txt:717
msgid ""
"It includes the time zone for aware datetime objects. It raises an exception "
"for aware time objects."
msgstr ""

# 2fb6861132bd4340baa0bc622d74f527
#: ../../releases/1.4-alpha-1.txt:719
msgid ""
"It includes milliseconds for datetime and time objects. There is still some "
"precision loss, because Python stores microseconds (6 digits) and JSON only "
"supports milliseconds (3 digits). However, it's better than discarding "
"microseconds entirely."
msgstr ""

# 4c7340ba18d74d309f7d559124a4b6a2
#: ../../releases/1.4-alpha-1.txt:724
msgid ""
"The XML serializer was also changed to use the ISO8601 format for datetimes. "
"The letter ``T`` is used to separate the date part from the time part, "
"instead of a space. Time zone information is included in the ``[+-]HH:MM`` "
"format."
msgstr ""

# 394f37ff095f48ea9f5d5135da6fb420
#: ../../releases/1.4-alpha-1.txt:728
msgid ""
"The serializers will dump datetimes in fixtures with these new formats. They "
"can still load fixtures that use the old format."
msgstr ""

# b4f52a86212f4dd19d5d94738db54c88
#: ../../releases/1.4-alpha-1.txt:732
msgid "``supports_timezone`` changed to ``False`` for SQLite"
msgstr ""

# ea8548b84ef44823853eb9ab4e704084
#: ../../releases/1.4-alpha-1.txt:734
msgid ""
"The database feature ``supports_timezone`` used to be ``True`` for SQLite. "
"Indeed, if you saved an aware datetime object, SQLite stored a string that "
"included an UTC offset. However, this offset was ignored when loading the "
"value back from the database, which could corrupt the data."
msgstr ""

# f4cba1c7fe424ca48f5417ca12e60e8b
#: ../../releases/1.4-alpha-1.txt:739
msgid ""
"In the context of time zone support, this flag was changed to ``False``, and "
"datetimes are now stored without time zone information in SQLite. When :"
"setting:`USE_TZ` is ``False``, if you attempt to save an aware datetime "
"object, Django raises an exception."
msgstr ""

# 6fc85ad474974eaa931dd3f5af8b5ab8
#: ../../releases/1.4-alpha-1.txt:745
msgid "Database connection's thread-locality"
msgstr ""

# ee9327958cad4463b533ddb7e5421235
#: ../../releases/1.4-alpha-1.txt:747
msgid ""
"``DatabaseWrapper`` objects (i.e. the connection objects referenced by "
"``django.db.connection`` and ``django.db.connections[\"some_alias\"]``) used "
"to be thread-local. They are now global objects in order to be potentially "
"shared between multiple threads. While the individual connection objects are "
"now global, the ``django.db.connections`` dictionary referencing those "
"objects is still thread-local. Therefore if you just use the ORM or "
"``DatabaseWrapper.cursor()`` then the behavior is still the same as before. "
"Note, however, that ``django.db.connection`` does not directly reference the "
"default ``DatabaseWrapper`` object anymore and is now a proxy to access that "
"object's attributes. If you need to access the actual ``DatabaseWrapper`` "
"object, use ``django.db.connections[DEFAULT_DB_ALIAS]`` instead."
msgstr ""

# ffb1b2e3a8e74712bf0a6be7ea9300c2
#: ../../releases/1.4-alpha-1.txt:759
msgid ""
"As part of this change, all underlying SQLite connections are now enabled "
"for potential thread-sharing (by passing the ``check_same_thread=False`` "
"attribute to pysqlite). ``DatabaseWrapper`` however preserves the previous "
"behavior by disabling thread-sharing by default, so this does not affect any "
"existing code that purely relies on the ORM or on ``DatabaseWrapper.cursor()"
"``."
msgstr ""

# bf5e178d492f4fe98e3cbe48cb5087da
#: ../../releases/1.4-alpha-1.txt:765
msgid ""
"Finally, while it is now possible to pass connections between threads, "
"Django does not make any effort to synchronize access to the underlying "
"backend. Concurrency behavior is defined by the underlying backend "
"implementation. Check their documentation for details."
msgstr ""

# c8ba27db50654c8d81239f3684850ccc
#: ../../releases/1.4-alpha-1.txt:771
msgid "`COMMENTS_BANNED_USERS_GROUP` setting"
msgstr ""

# 24155d7d87684d2fb7acac923a472461
#: ../../releases/1.4-alpha-1.txt:773
msgid ""
"Django's :doc:`comments app </ref/contrib/comments/index>` has historically "
"supported excluding the comments of a special user group, but we've never "
"documented the feature properly and didn't enforce the exclusion in other "
"parts of the app such as the template tags. To fix this problem, we removed "
"the code from the feed class."
msgstr ""

# 95b50be06c024d5a9bfdbeb1f5c297f2
#: ../../releases/1.4-alpha-1.txt:779
msgid ""
"If you rely on the feature and want to restore the old behavior, simply use "
"a custom comment model manager to exclude the user group, like this::"
msgstr ""

# d5accfdafc094931ab04aaeb6ac97a85
#: ../../releases/1.4-alpha-1.txt:794
msgid ""
"Save this model manager in your custom comment app (e.g. in "
"``my_comments_app/managers.py``) and add it your :ref:`custom comment app "
"model <custom-comment-app-api>`::"
msgstr ""

# fb61915d31bd4ea08553993b33987f53
#: ../../releases/1.4-alpha-1.txt:808
msgid ""
"For more details, see the documentation about :doc:`customizing the comments "
"framework </ref/contrib/comments/custom>`."
msgstr ""

# a980bf622ef44e4eb2cc676a4458ad2b
#: ../../releases/1.4-alpha-1.txt:812
msgid "`IGNORABLE_404_STARTS` and `IGNORABLE_404_ENDS` settings"
msgstr ""

# 279b678b2a0c42d684aec6e59c487b1e
#: ../../releases/1.4-alpha-1.txt:814
msgid ""
"Until Django 1.3, it was possible to exclude some URLs from Django's :doc:"
"`404 error reporting</howto/error-reporting>` by adding prefixes to :setting:"
"`IGNORABLE_404_STARTS` and suffixes to :setting:`IGNORABLE_404_ENDS`."
msgstr ""

# ec1fc5d8ea56424899550451665d319c
#: ../../releases/1.4-alpha-1.txt:818
msgid ""
"In Django 1.4, these two settings are superseded by :setting:"
"`IGNORABLE_404_URLS`, which is a list of compiled regular expressions. "
"Django won't send an email for 404 errors on URLs that match any of them."
msgstr ""

# a0a3cc1b94204940ad8267e36998c3fe
#: ../../releases/1.4-alpha-1.txt:822
msgid ""
"Furthermore, the previous settings had some rather arbitrary default values::"
msgstr ""

# 8e82bf87fecd4c9a9dcd68940465391a
#: ../../releases/1.4-alpha-1.txt:828
msgid ""
"It's not Django's role to decide if your website has a legacy ``/cgi-bin/`` "
"section or a ``favicon.ico``. As a consequence, the default values of :"
"setting:`IGNORABLE_404_URLS`, :setting:`IGNORABLE_404_STARTS` and :setting:"
"`IGNORABLE_404_ENDS` are all now empty."
msgstr ""

# 00565dd9edc74953b0da442b66e26a81
#: ../../releases/1.4-alpha-1.txt:833
msgid ""
"If you have customized :setting:`IGNORABLE_404_STARTS` or :setting:"
"`IGNORABLE_404_ENDS`, or if you want to keep the old default value, you "
"should add the following lines in your settings file::"
msgstr ""

# c07e31c9b9db4d7d8b918354705f843a
#: ../../releases/1.4-alpha-1.txt:845
msgid ""
"Don't forget to escape characters that have a special meaning in a regular "
"expression."
msgstr ""

# 6b4e0e5e275b46448809feae875999ab
#: ../../releases/1.4-alpha-1.txt:849
msgid "CSRF protection extended to PUT and DELETE"
msgstr ""

# 2bb39f19ded44bb29b8801ba4b3b9f4e
#: ../../releases/1.4-alpha-1.txt:851
msgid ""
"Previously, Django's :doc:`CSRF protection </ref/contrib/csrf/>` provided "
"protection against only POST requests. Since use of PUT and DELETE methods "
"in AJAX applications is becoming more common, we now protect all methods not "
"defined as safe by :rfc:`2616` i.e. we exempt GET, HEAD, OPTIONS and TRACE, "
"and enforce protection on everything else."
msgstr ""

# 65c442a270d74fe986556601119ea6fe
#: ../../releases/1.4-alpha-1.txt:857
msgid ""
"If you are using PUT or DELETE methods in AJAX applications, please see the :"
"ref:`instructions about using AJAX and CSRF <csrf-ajax>`."
msgstr ""

# e31bfef7a7474518aeec0108601592ad
#: ../../releases/1.4-alpha-1.txt:861
msgid "``django.core.template_loaders``"
msgstr ""

# ef70334a6fe54bc79a6736f8546633b0
#: ../../releases/1.4-alpha-1.txt:863
msgid ""
"This was an alias to ``django.template.loader`` since 2005, it has been "
"removed without emitting a warning due to the length of the deprecation. If "
"your code still referenced this please use ``django.template.loader`` "
"instead."
msgstr ""

# 2e157183c7254f29bb6dafcaf6d64a48
#: ../../releases/1.4-alpha-1.txt:868
msgid "``django.db.models.fields.URLField.verify_exists``"
msgstr ""

# 4375ec00caed4435854f6e0900030c68
#: ../../releases/1.4-alpha-1.txt:870
msgid ""
"This functionality has been removed due to intractable performance and "
"security issues. Any existing usage of ``verify_exists`` should be removed."
msgstr ""

# bd220e3c4257447a8ea37def3d610c26
#: ../../releases/1.4-alpha-1.txt:875
msgid "``django.core.files.storage.Storage.open``"
msgstr ""

# 43a8c4476136499f80c003e8041cc01a
#: ../../releases/1.4-alpha-1.txt:877
msgid ""
"The ``open`` method of the base Storage class took an obscure parameter "
"``mixin`` which allowed you to dynamically change the base classes of the "
"returned file object. This has been removed. In the rare case you relied on "
"the ``mixin`` parameter, you can easily achieve the same by overriding the "
"``open`` method, e.g.::"
msgstr ""

# 0862448ac83741ea802b6026df5502ea
#: ../../releases/1.4-alpha-1.txt:901
msgid "YAML deserializer now uses ``yaml.safe_load``"
msgstr ""

# 5df967919f3d40c3a1f5c35086f29387
#: ../../releases/1.4-alpha-1.txt:903
msgid ""
"``yaml.load`` is able to construct any Python object, which may trigger "
"arbitrary code execution if you process a YAML document that comes from an "
"untrusted source. This feature isn't necessary for Django's YAML "
"deserializer, whose primary use is to load fixtures consisting of simple "
"objects. Even though fixtures are trusted data, for additional security, the "
"YAML deserializer now uses ``yaml.safe_load``."
msgstr ""

# 91e69c23595643eb98762d3fae809ee7
#: ../../releases/1.4-alpha-1.txt:911
msgid "Features deprecated in 1.4"
msgstr ""

# 230da43f755946e5b88debabf25ec9fa
#: ../../releases/1.4-alpha-1.txt:914
msgid "Old styles of calling ``cache_page`` decorator"
msgstr ""

# 7b5b51c3aac04cb6b1195c99214d8e7a
#: ../../releases/1.4-alpha-1.txt:916
msgid ""
"Some legacy ways of calling :func:`~django.views.decorators.cache."
"cache_page` have been deprecated, please see the docs for the correct way to "
"use this decorator."
msgstr ""

# d29f48ab57e64bfabaa635dd7e968af3
#: ../../releases/1.4-alpha-1.txt:921
msgid "Support for PostgreSQL versions older than 8.2"
msgstr ""

# 597f180659454fbfa8a5f365031a5101
#: ../../releases/1.4-alpha-1.txt:923
msgid ""
"Django 1.3 dropped support for PostgreSQL versions older than 8.0 and the "
"relevant documents suggested to use a recent version because of performance "
"reasons but more importantly because end of the upstream support periods for "
"releases 8.0 and 8.1 was near (November 2010)."
msgstr ""

# efdd14fc9d7644678f590aa025bfb8e8
#: ../../releases/1.4-alpha-1.txt:928
msgid ""
"Django 1.4 takes that policy further and sets 8.2 as the minimum PostgreSQL "
"version it officially supports."
msgstr ""

# 13201b34ac3b42a282924b48bbb8bc36
#: ../../releases/1.4-alpha-1.txt:932
msgid "Request exceptions are now always logged"
msgstr ""

# 8293b0845a974953a3b72f0d208645eb
#: ../../releases/1.4-alpha-1.txt:934
msgid ""
"When :doc:`logging support </topics/logging/>` was added to Django in 1.3, "
"the admin error email support was moved into the :class:`django.utils.log."
"AdminEmailHandler`, attached to the ``'django.request'`` logger. In order to "
"maintain the established behavior of error emails, the ``'django.request'`` "
"logger was called only when :setting:`DEBUG` was ``False``."
msgstr ""

# 124869ca975947f0ac7054e1c759e91b
#: ../../releases/1.4-alpha-1.txt:941
msgid ""
"To increase the flexibility of error logging for requests, the ``'django."
"request'`` logger is now called regardless of the value of :setting:`DEBUG`, "
"and the default settings file for new projects now includes a separate "
"filter attached to :class:`django.utils.log.AdminEmailHandler` to prevent "
"admin error emails in ``DEBUG`` mode::"
msgstr ""

# 30101b923f7d4a3bbc154ae3aab921b2
#: ../../releases/1.4-alpha-1.txt:960
msgid ""
"If your project was created prior to this change, your :setting:`LOGGING` "
"setting will not include this new filter. In order to maintain backwards-"
"compatibility, Django will detect that your ``'mail_admins'`` handler "
"configuration includes no ``'filters'`` section, and will automatically add "
"this filter for you and issue a pending-deprecation warning. This will "
"become a deprecation warning in Django 1.5, and in Django 1.6 the backwards-"
"compatibility shim will be removed entirely."
msgstr ""

# 0bab97a37efc43918d9ac5c014c2387b
#: ../../releases/1.4-alpha-1.txt:968
msgid ""
"The existence of any ``'filters'`` key under the ``'mail_admins'`` handler "
"will disable this backward-compatibility shim and deprecation warning."
msgstr ""

# 199928f154804a8faa4d5b6f2cdffae9
#: ../../releases/1.4-alpha-1.txt:972
msgid "``django.conf.urls.defaults``"
msgstr ""

# 4d42cea4d37a47a69699852fc48f6e3a
#: ../../releases/1.4-alpha-1.txt:974
msgid ""
"Until Django 1.3 the functions :func:`~django.conf.urls.include`, :func:"
"`~django.conf.urls.patterns` and :func:`~django.conf.urls.url` plus :data:"
"`~django.conf.urls.handler404`, :data:`~django.conf.urls.handler500` were "
"located in a ``django.conf.urls.defaults`` module."
msgstr ""

# 4a30e117a6844dc682e1c3449c7b48b0
#: ../../releases/1.4-alpha-1.txt:979
msgid ""
"Starting with Django 1.4 they are now available in :mod:`django.conf.urls`."
msgstr ""

# 20dcb09eb2074530bb5293b06bfda392
#: ../../releases/1.4-alpha-1.txt:982
msgid "``django.contrib.databrowse``"
msgstr ""

# 81906b493400488fb6beae881add0714
#: ../../releases/1.4-alpha-1.txt:984
msgid ""
"Databrowse has not seen active development for some time, and this does not "
"show any sign of changing. There had been a suggestion for a `GSOC project`_ "
"to integrate the functionality of databrowse into the admin, but no progress "
"was made. While Databrowse has been deprecated, an enhancement of ``django."
"contrib.admin`` providing a similar feature set is still possible."
msgstr ""

# e547907e82a949858866ace571bf9821
#: ../../releases/1.4-alpha-1.txt:992
msgid ""
"The code that powers Databrowse is licensed under the same terms as Django "
"itself, and so is available to be adopted by an individual or group as a "
"third-party project."
msgstr ""

# 36e8de5e2be949d295d3c4fe3b4e2a32
#: ../../releases/1.4-alpha-1.txt:997
msgid "``django.core.management.setup_environ``"
msgstr ""

# ae9293532063491386893e3097bba26c
#: ../../releases/1.4-alpha-1.txt:999
msgid ""
"This function temporarily modified ``sys.path`` in order to make the parent "
"\"project\" directory importable under the old flat :djadmin:`startproject` "
"layout. This function is now deprecated, as its path workarounds are no "
"longer needed with the new ``manage.py`` and default project layout."
msgstr ""

# 91730f204b2b4dcba5990fb1b68f61e2
#: ../../releases/1.4-alpha-1.txt:1004
msgid ""
"This function was never documented or part of the public API, but was widely "
"recommended for use in setting up a \"Django environment\" for a user "
"script. These uses should be replaced by setting the "
"``DJANGO_SETTINGS_MODULE`` environment variable or using :func:`django.conf."
"settings.configure`."
msgstr ""

# 8ba8c52df89c45a19351249f1b811265
#: ../../releases/1.4-alpha-1.txt:1010
msgid "``django.core.management.execute_manager``"
msgstr ""

# f67731a151324d2f98affa5ddb885ed4
#: ../../releases/1.4-alpha-1.txt:1012
msgid ""
"This function was previously used by ``manage.py`` to execute a management "
"command. It is identical to ``django.core.management."
"execute_from_command_line``, except that it first calls ``setup_environ``, "
"which is now deprecated. As such, ``execute_manager`` is also deprecated; "
"``execute_from_command_line`` can be used instead. Neither of these "
"functions is documented as part of the public API, but a deprecation path is "
"needed due to use in existing ``manage.py`` files."
msgstr ""

# 6baffd95e3ab4571aa3fdf349ec49410
#: ../../releases/1.4-alpha-1.txt:1021
msgid "``is_safe`` and ``needs_autoescape`` attributes of template filters"
msgstr ""

# 1d0188db2ca64ce4b6cb058ae481295f
#: ../../releases/1.4-alpha-1.txt:1023
msgid ""
"Two flags, ``is_safe`` and ``needs_autoescape``, define how each template "
"filter interacts with Django's auto-escaping behavior. They used to be "
"attributes of the filter function::"
msgstr ""

# 572687cd2a2f4335b88146aaa691ee02
#: ../../releases/1.4-alpha-1.txt:1032
msgid ""
"However, this technique caused some problems in combination with decorators, "
"especially :func:`@stringfilter <django.template.defaultfilters."
"stringfilter>`. Now, the flags are keyword arguments of :meth:`@register."
"filter <django.template.Library.filter>`::"
msgstr ""

# 7653c559411c4c6d89cb37daeebdebbc
#: ../../releases/1.4-alpha-1.txt:1041
msgid ""
"See :ref:`filters and auto-escaping <filters-auto-escaping>` for more "
"information."
msgstr ""

# d3e8e179647e4dcebcf2f97371f456b5
#: ../../releases/1.4-alpha-1.txt:1044
msgid "Session cookies now have the ``httponly`` flag by default"
msgstr ""

# 3baef04f90494e3c8e18d716069d1966
#: ../../releases/1.4-alpha-1.txt:1046
msgid ""
"Session cookies now include the ``httponly`` attribute by default to help "
"reduce the impact of potential XSS attacks. For strict backwards "
"compatibility, use ``SESSION_COOKIE_HTTPONLY = False`` in your settings file."
msgstr ""

# c1ee4affb5c64cea9173b3af5075dc2e
#: ../../releases/1.4-alpha-1.txt:1051
msgid "Wildcard expansion of application names in `INSTALLED_APPS`"
msgstr ""

# 1338e658ecb640a3b495eb7bcb2fdc0c
#: ../../releases/1.4-alpha-1.txt:1053
msgid ""
"Until Django 1.3, :setting:`INSTALLED_APPS` accepted wildcards in "
"application names, like ``django.contrib.*``. The expansion was performed by "
"a filesystem-based implementation of ``from <package> import *``. "
"Unfortunately, `this can't be done reliably`_."
msgstr ""

# e59aed39bd374ef1954230716779ffec
#: ../../releases/1.4-alpha-1.txt:1058
msgid ""
"This behavior was never documented. Since it is un-pythonic and not "
"obviously useful, it was removed in Django 1.4. If you relied on it, you "
"must edit your settings file to list all your applications explicitly."
msgstr ""

# 731a6beb786c466c94a92d659205d5e6
#: ../../releases/1.4-alpha-1.txt:1065
msgid "``HttpRequest.raw_post_data`` renamed to ``HttpRequest.body``"
msgstr ""

# bd7222b5440e4fd29c28bbc593205991
#: ../../releases/1.4-alpha-1.txt:1067
msgid ""
"This attribute was confusingly named ``HttpRequest.raw_post_data``, but it "
"actually provided the body of the HTTP request. It's been renamed to "
"``HttpRequest.body``, and ``HttpRequest.raw_post_data`` has been deprecated."
msgstr ""

# 5ccfb89cbab1424a858570d5dcdfd22e
#: ../../releases/1.4-alpha-1.txt:1072
msgid "The Django 1.4 roadmap"
msgstr ""

# 9556aa5d9f954bc79d0147d73e884610
#: ../../releases/1.4-alpha-1.txt:1074
msgid ""
"Before the final Django 1.4 release, several other preview/development "
"releases will be made available. The current schedule consists of at least "
"the following:"
msgstr ""

# 2038e942c7ee4acd96b6d6848359a91d
#: ../../releases/1.4-alpha-1.txt:1077
msgid ""
"Week of **January 30, 2012**: First Django 1.4 beta release; final feature "
"freeze for Django 1.4."
msgstr ""

# b0ca42afdfa948ddbf7c7e26a6289973
#: ../../releases/1.4-alpha-1.txt:1080
msgid ""
"Week of **February 27, 2012**: First Django 1.4 release candidate; string "
"freeze for translations."
msgstr ""

# 3b5d338e43c046e5a3fcee52695afcc3
#: ../../releases/1.4-alpha-1.txt:1083
msgid "Week of **March 5, 2012**: Django 1.4 final release."
msgstr ""

# 62278df013f94803bedcc68511552b71
#: ../../releases/1.4-alpha-1.txt:1085
msgid ""
"If necessary, additional alpha, beta or release-candidate packages will be "
"issued prior to the final 1.4 release. Django 1.4 will be released "
"approximately one week after the final release candidate."
msgstr ""

# 405d6885cd3f4cc796c858cc9eafa84c
#: ../../releases/1.4-alpha-1.txt:1090
msgid "What you can do to help"
msgstr ""

# 498db2e5fc5147f3a3cd902da76611a6
#: ../../releases/1.4-alpha-1.txt:1092
msgid ""
"In order to provide a high-quality 1.4 release, we need your help. Although "
"this alpha release is, again, *not* intended for production use, you can "
"help the Django team by trying out the alpha codebase in a safe test "
"environment and reporting any bugs or issues you encounter. The Django "
"ticket tracker is the central place to search for open issues:"
msgstr ""

# 64e504dba3234f529a600b069d08cf3b
#: ../../releases/1.4-alpha-1.txt:1098
msgid "https://code.djangoproject.com/timeline"
msgstr ""

# ffbecb79828942f9a5f9310b970b7167
#: ../../releases/1.4-alpha-1.txt:1100
msgid ""
"Please open new tickets if no existing ticket corresponds to a problem "
"you're running into."
msgstr ""

# d45e0081f1f04ebfb98a62d2418a01ad
#: ../../releases/1.4-alpha-1.txt:1103
msgid ""
"Additionally, discussion of Django development, including progress toward "
"the 1.3 release, takes place daily on the django-developers mailing list:"
msgstr ""

# 0019dc690a594041aeb08dc381c2cf9a
#: ../../releases/1.4-alpha-1.txt:1106
msgid "http://groups.google.com/group/django-developers"
msgstr ""

# 9de63c3c907447e4b6e5fb414fc0a028
#: ../../releases/1.4-alpha-1.txt:1108
msgid ""
"... and in the ``#django-dev`` IRC channel on ``irc.freenode.net``. If "
"you're interested in helping out with Django's development, feel free to "
"join the discussions there."
msgstr ""

# 691ffc7dac124b88b906b5b9b28e22a1
#: ../../releases/1.4-alpha-1.txt:1112
msgid ""
"Django's online documentation also includes pointers on how to contribute to "
"Django:"
msgstr ""

# fc5a588d7194478a9aaf601422f0cb50
#: ../../releases/1.4-alpha-1.txt:1115
msgid ":doc:`How to contribute to Django </internals/contributing/index>`"
msgstr ""

# 4caba18a83804124940273ba770da34b
#: ../../releases/1.4-alpha-1.txt:1117
msgid ""
"Contributions on any level -- developing code, writing documentation or "
"simply triaging tickets and helping to test proposed bugfixes -- are always "
"welcome and appreciated."
msgstr ""

# 1c8004afc6f44c51b2390c2e7f0b41ee
#: ../../releases/1.4-alpha-1.txt:1121
msgid ""
"Several development sprints will also be taking place before the 1.4 "
"release; these will typically be announced in advance on the django-"
"developers mailing list, and anyone who wants to help is welcome to join in."
msgstr ""
