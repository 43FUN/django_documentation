# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2012.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-02-15 15:13\n"
"PO-Revision-Date: 2012-02-15 15:13\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# 1e4a44e63a574462ac8f99e1bbea8ae7
#: ../../releases/1.1.4.txt:3
msgid "Django 1.1.4 release notes"
msgstr ""

# d0df3d1e881a4731b6cda8fdd6333c7b
#: ../../releases/1.1.4.txt:5
msgid "Welcome to Django 1.1.4!"
msgstr ""

# 6e6068083f9745e4ab4e18d7c86312ee
#: ../../releases/1.1.4.txt:7
msgid ""
"This is the fourth \"bugfix\" release in the Django 1.1 series, improving "
"the stability and performance of the Django 1.1 codebase."
msgstr ""

# d6c2d2f1f78345099d0aa1bf42b916f6
#: ../../releases/1.1.4.txt:10
msgid ""
"With one exception, Django 1.1.4 maintains backwards compatibility with "
"Django 1.1.3. It also contains a number of fixes and other improvements. "
"Django 1.1.4 is a recommended upgrade for any development or deployment "
"currently using or targeting Django 1.1."
msgstr ""

# 5226e99c69824cc9b3aa365c7a80d933
#: ../../releases/1.1.4.txt:15
msgid ""
"For full details on the new features, backwards incompatibilities, and "
"deprecated features in the 1.1 branch, see the :doc:`/releases/1.1`."
msgstr ""

# bb94d72064e342d6b277e44b065bba6d
#: ../../releases/1.1.4.txt:19
msgid "Backwards incompatible changes"
msgstr ""

# 7541ffea456f4d7d88a9f1f7339aae68
#: ../../releases/1.1.4.txt:22
msgid "CSRF exception for AJAX requests"
msgstr ""

# f8e1de456a1b4575a8b9dabacebf4ac2
#: ../../releases/1.1.4.txt:24
msgid ""
"Django includes a CSRF-protection mechanism, which makes use of a token "
"inserted into outgoing forms. Middleware then checks for the token's "
"presence on form submission, and validates it."
msgstr ""

# 0244a31f5e95414c9f83101e78439087
#: ../../releases/1.1.4.txt:28
msgid ""
"Prior to Django 1.2.5, our CSRF protection made an exception for AJAX "
"requests, on the following basis:"
msgstr ""

# 8b2ee8f14f92493f8aa851c2aa4956f0
#: ../../releases/1.1.4.txt:31
msgid ""
"Many AJAX toolkits add an X-Requested-With header when using XMLHttpRequest."
msgstr ""

# 7ee7d26f1d2641dc997fa013b398cc0c
#: ../../releases/1.1.4.txt:34
msgid "Browsers have strict same-origin policies regarding XMLHttpRequest."
msgstr ""

# f36dd8f2644e43828643af0810b0a9fa
#: ../../releases/1.1.4.txt:37
msgid ""
"In the context of a browser, the only way that a custom header of this "
"nature can be added is with XMLHttpRequest."
msgstr ""

# e1fa44c5912547f9bff148107c386d41
#: ../../releases/1.1.4.txt:40
msgid ""
"Therefore, for ease of use, we did not apply CSRF checks to requests that "
"appeared to be AJAX on the basis of the X-Requested-With header. The Ruby on "
"Rails web framework had a similar exemption."
msgstr ""

# fc7399b60f794aa39da319db96eae09e
#: ../../releases/1.1.4.txt:44
msgid ""
"Recently, engineers at Google made members of the Ruby on Rails development "
"team aware of a combination of browser plugins and redirects which can allow "
"an attacker to provide custom HTTP headers on a request to any website. This "
"can allow a forged request to appear to be an AJAX request, thereby "
"defeating CSRF protection which trusts the same-origin nature of AJAX "
"requests."
msgstr ""

# 479fed291f0f4a4c8c5e5a478dac1be8
#: ../../releases/1.1.4.txt:51
msgid ""
"Michael Koziarski of the Rails team brought this to our attention, and we "
"were able to produce a proof-of-concept demonstrating the same vulnerability "
"in Django's CSRF handling."
msgstr ""

# 1a0d4f1c1fab434dbaea21c96387607d
#: ../../releases/1.1.4.txt:55
msgid ""
"To remedy this, Django will now apply full CSRF validation to all requests, "
"regardless of apparent AJAX origin. This is technically backwards-"
"incompatible, but the security risks have been judged to outweigh the "
"compatibility concerns in this case."
msgstr ""

# 4e4095f30005482ebf0bb8c38677de42
#: ../../releases/1.1.4.txt:60
msgid ""
"Additionally, Django will now accept the CSRF token in the custom HTTP "
"header X-CSRFTOKEN, as well as in the form submission itself, for ease of "
"use with popular JavaScript toolkits which allow insertion of custom headers "
"into all AJAX requests."
msgstr ""

# 30c3376bd55946b2a3a81857059bdc81
#: ../../releases/1.1.4.txt:65
msgid ""
"Please see the :ref:`CSRF docs for example jQuery code <csrf-ajax>` that "
"demonstrates this technique, ensuring that you are looking at the "
"documentation for your version of Django, as the exact code necessary is "
"different for some older versions of Django."
msgstr ""
