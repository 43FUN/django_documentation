# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2012.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-03-24 01:58\n"
"PO-Revision-Date: 2012-02-15 15:13\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# 07e6cd7242a74a3d8d5352118913d1ff
#: ../../releases/1.2.5.txt:3
msgid "Django 1.2.5 release notes"
msgstr ""

# a55c6a7416ba4f508e5d6db1e7160287
#: ../../releases/1.2.5.txt:5
msgid "Welcome to Django 1.2.5!"
msgstr ""

# 382c60d7c7a74330bdce06157ba3b92c
#: ../../releases/1.2.5.txt:7
msgid ""
"This is the fifth \"bugfix\" release in the Django 1.2 series, improving the "
"stability and performance of the Django 1.2 codebase."
msgstr ""

# a55635ff1d3c4aa2aba6594d8b2e886b
#: ../../releases/1.2.5.txt:10
msgid ""
"With four exceptions, Django 1.2.5 maintains backwards compatibility with "
"Django 1.2.4. It also contains a number of fixes and other improvements. "
"Django 1.2.5 is a recommended upgrade for any development or deployment "
"currently using or targeting Django 1.2."
msgstr ""

# f43d7ac955194f84afdacf400e19f513
#: ../../releases/1.2.5.txt:15
msgid ""
"For full details on the new features, backwards incompatibilities, and "
"deprecated features in the 1.2 branch, see the :doc:`/releases/1.2`."
msgstr ""

# f6c1b7a7e4404413a6e757a3e3083dd3
#: ../../releases/1.2.5.txt:19
msgid "Backwards incompatible changes"
msgstr ""

# 56265bdc05124ed59ba910ddebab0d27
#: ../../releases/1.2.5.txt:22
msgid "CSRF exception for AJAX requests"
msgstr ""

# 45e528f25d624ebda65f6e1e5ebce2ba
#: ../../releases/1.2.5.txt:24
msgid ""
"Django includes a CSRF-protection mechanism, which makes use of a token "
"inserted into outgoing forms. Middleware then checks for the token's "
"presence on form submission, and validates it."
msgstr ""

# b5a6c6b065384c9ca0b73c4f2377e738
#: ../../releases/1.2.5.txt:28
msgid ""
"Prior to Django 1.2.5, our CSRF protection made an exception for AJAX "
"requests, on the following basis:"
msgstr ""

# b571513ae9c749e19ab3ead30d10bdaa
#: ../../releases/1.2.5.txt:31
msgid ""
"Many AJAX toolkits add an X-Requested-With header when using XMLHttpRequest."
msgstr ""

# c4cfaa4443b44f07b7c11aaa68a58766
#: ../../releases/1.2.5.txt:34
msgid "Browsers have strict same-origin policies regarding XMLHttpRequest."
msgstr ""

# e00b4d6367e24a67bc4294668f1c8f69
#: ../../releases/1.2.5.txt:37
msgid ""
"In the context of a browser, the only way that a custom header of this "
"nature can be added is with XMLHttpRequest."
msgstr ""

# f020ed04ade24c98b55898bbebbae576
#: ../../releases/1.2.5.txt:40
msgid ""
"Therefore, for ease of use, we did not apply CSRF checks to requests that "
"appeared to be AJAX on the basis of the X-Requested-With header. The Ruby on "
"Rails web framework had a similar exemption."
msgstr ""

# 07f6a23f26da4191bf45bf832e8682d6
#: ../../releases/1.2.5.txt:44
msgid ""
"Recently, engineers at Google made members of the Ruby on Rails development "
"team aware of a combination of browser plugins and redirects which can allow "
"an attacker to provide custom HTTP headers on a request to any website. This "
"can allow a forged request to appear to be an AJAX request, thereby "
"defeating CSRF protection which trusts the same-origin nature of AJAX "
"requests."
msgstr ""

# 4dd827f970744d4081ed332c9a06ad7d
#: ../../releases/1.2.5.txt:51
msgid ""
"Michael Koziarski of the Rails team brought this to our attention, and we "
"were able to produce a proof-of-concept demonstrating the same vulnerability "
"in Django's CSRF handling."
msgstr ""

# 65a03cdaaa4f4645bcfac67b74f70e7a
#: ../../releases/1.2.5.txt:55
msgid ""
"To remedy this, Django will now apply full CSRF validation to all requests, "
"regardless of apparent AJAX origin. This is technically backwards-"
"incompatible, but the security risks have been judged to outweigh the "
"compatibility concerns in this case."
msgstr ""

# 40288ef8289c45689d4426c26940aa4d
#: ../../releases/1.2.5.txt:60
msgid ""
"Additionally, Django will now accept the CSRF token in the custom HTTP "
"header X-CSRFTOKEN, as well as in the form submission itself, for ease of "
"use with popular JavaScript toolkits which allow insertion of custom headers "
"into all AJAX requests."
msgstr ""

# ef814867ffae40ada686eed24d7fd401
#: ../../releases/1.2.5.txt:65
msgid ""
"Please see the :ref:`CSRF docs for example jQuery code <csrf-ajax>` that "
"demonstrates this technique, ensuring that you are looking at the "
"documentation for your version of Django, as the exact code necessary is "
"different for some older versions of Django."
msgstr ""

# 09b7a1b17a374a13bfb8c27a7a1976cc
#: ../../releases/1.2.5.txt:71
msgid "FileField no longer deletes files"
msgstr ""

# 1d9289aca693413dabfbfbc883c84195
#: ../../releases/1.2.5.txt:73
msgid ""
"In earlier Django versions, when a model instance containing a :class:"
"`~django.db.models.FileField` was deleted, :class:`~django.db.models."
"FileField` took it upon itself to also delete the file from the backend "
"storage. This opened the door to several potentially serious data-loss "
"scenarios, including rolled-back transactions and fields on different models "
"referencing the same file. In Django 1.2.5, :class:`~django.db.models."
"FileField` will never delete files from the backend storage. If you need "
"cleanup of orphaned files, you'll need to handle it yourself (for instance, "
"with a custom management command that can be run manually or scheduled to "
"run periodically via e.g. cron)."
msgstr ""

# aa8b60731fad4a0f8648a8738fbd265b
#: ../../releases/1.2.5.txt:85
msgid "Use of custom SQL to load initial data in tests"
msgstr ""

# 6366310efda4485ba8e2b75920cb762a
#: ../../releases/1.2.5.txt:87
msgid ""
"Django provides a custom SQL hooks as a way to inject hand-crafted SQL into "
"the database synchronization process. One of the possible uses for this "
"custom SQL is to insert data into your database. If your custom SQL contains "
"``INSERT`` statements, those insertions will be performed every time your "
"database is synchronized. This includes the synchronization of any test "
"databases that are created when you run a test suite."
msgstr ""

# b29fd6b4d82c48c9b3effb0ce1c6f3e6
#: ../../releases/1.2.5.txt:95
msgid ""
"However, in the process of testing the Django 1.3, it was discovered that "
"this feature has never completely worked as advertised. When using database "
"backends that don't support transactions, or when using a "
"TransactionTestCase, data that has been inserted using custom SQL will not "
"be visible during the testing process."
msgstr ""

# 121cd07100bd46b288346862a019f9bb
#: ../../releases/1.2.5.txt:101
msgid ""
"Unfortunately, there was no way to rectify this problem without introducing "
"a backwards incompatibility. Rather than leave SQL-inserted initial data in "
"an uncertain state, Django now enforces the policy that data inserted by "
"custom SQL will *not* be visible during testing."
msgstr ""

# 5d1c7b8050f04a8291d267451051d2f6
#: ../../releases/1.2.5.txt:107
msgid ""
"This change only affects the testing process. You can still use custom SQL "
"to load data into your production database as part of the syncdb process. If "
"you require data to exist during test conditions, you should either insert "
"it using :ref:`test fixtures <topics-testing-fixtures>`, or using the ``setUp"
"()`` method of your test case."
msgstr ""

# a9d97f80efa74acd903ef7514b467b40
#: ../../releases/1.2.5.txt:115
msgid "ModelAdmin.lookup_allowed signature changed"
msgstr ""

# d48765d8ca314eff8dcfa3d9ee51d0b8
#: ../../releases/1.2.5.txt:117
msgid ""
"Django 1.2.4 introduced a method ``lookup_allowed`` on ``ModelAdmin``, to "
"cope with a security issue (changeset `[15033] <https://code.djangoproject."
"com/changeset/15033>`_). Although this method was never documented, it seems "
"some people have overridden ``lookup_allowed``, especially to cope with "
"regressions introduced by that changeset. While the method is still "
"undocumented and not marked as stable, it may be helpful to know that the "
"signature of this function has changed."
msgstr ""
