# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2012.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-11-07 10:34\n"
"PO-Revision-Date: 2012-02-29 18:30\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# 0ac6eb1be5b54f9ebf3f82d63cc13df0
#: ../../releases/1.4-beta-1.txt:3
msgid "Django 1.4 beta release notes"
msgstr ""

# ff4988bbf80143b7871456996f6c7e8d
#: ../../releases/1.4-beta-1.txt:5
msgid "February 15, 2012."
msgstr ""

# 6058e65084e246359e9b9433dca432c7
#: ../../releases/1.4-beta-1.txt:7
msgid "Welcome to Django 1.4 beta!"
msgstr ""

# 039df13b66744caea27d45cc227240d0
#: ../../releases/1.4-beta-1.txt:9
msgid ""
"This is the second in a series of preview/development releases leading up to "
"the eventual release of Django 1.4, scheduled for March 2012. This release "
"is primarily targeted at developers who are interested in trying out new "
"features and testing the Django codebase to help identify and resolve bugs "
"prior to the final 1.4 release."
msgstr ""

# d7951016a4de45a79f406670d9236913
#: ../../releases/1.4-beta-1.txt:15
msgid ""
"As such, this release is *not* intended for production use, and any such use "
"is discouraged."
msgstr ""

# 5f0fd2447cd74412b107d4856902bd66
#: ../../releases/1.4-beta-1.txt:18
msgid ""
"Django 1.4 beta includes various `new features`_ and some minor `backwards "
"incompatible changes`_. There are also some features that have been dropped, "
"which are detailed in :doc:`our deprecation plan </internals/deprecation>`, "
"and we've `begun the deprecation process for some features`_."
msgstr ""

# 590f99afbde9462abcc8288eb529eee0
#: ../../releases/1.4-beta-1.txt:29
msgid "Version numbering"
msgstr ""

# 785712e3c911429eb7597919ce3dc074
#: ../../releases/1.4-beta-1.txt:31
msgid ""
"Internally, Django's version number is represented by the tuple ``django."
"VERSION``. This is used to generate human-readable version number strings; "
"as of Django 1.4 beta 1, the algorithm for generating these strings has been "
"changed to match the recommendations of :pep:`386`. This only affects the "
"human-readable strings identifying Django alphas, betas and release "
"candidates, and should not affect end users in any way."
msgstr ""

# 9083d9d55e7742fa919d6c95357c6dd9
#: ../../releases/1.4-beta-1.txt:38
msgid ""
"For example purposes, the old algorithm would give Django 1.4 beta 1 a "
"version string of the form \"1.4 beta 1\". The new algorithm generates the "
"version string \"1.4b1\"."
msgstr ""

# d1c176c0c02c460182d51424de9781e5
#: ../../releases/1.4-beta-1.txt:44
msgid "Python compatibility"
msgstr ""

# 5fcc7f0d4dc446ff8cff0a1fbe1e7657
#: ../../releases/1.4-beta-1.txt:46
msgid ""
"While not a new feature, it's important to note that Django 1.4 introduces "
"the second shift in our Python compatibility policy since Django's initial "
"public debut. Django 1.2 dropped support for Python 2.3; now Django 1.4 "
"drops support for Python 2.4. As such, the minimum Python version required "
"for Django is now 2.5, and Django is tested and supported on Python 2.5, 2.6 "
"and 2.7."
msgstr ""

# cb45806f0942470087c59631ab18bf2f
#: ../../releases/1.4-beta-1.txt:52
msgid ""
"This change should affect only a small number of Django users, as most "
"operating-system vendors today are shipping Python 2.5 or newer as their "
"default version. If you're still using Python 2.4, however, you'll need to "
"stick to Django 1.3 until you can upgrade; per :doc:`our support policy </"
"internals/release-process>`, Django 1.3 will continue to receive security "
"support until the release of Django 1.5."
msgstr ""

# 67a8335fcc4144b481c34d11b3b2d43e
#: ../../releases/1.4-beta-1.txt:59
msgid ""
"Django does not support Python 3.x at this time. A document outlining our "
"full timeline for deprecating Python 2.x and moving to Python 3.x will be "
"published before the release of Django 1.4."
msgstr ""

# bda36199c7cb4bb684cc94d842c0d628
#: ../../releases/1.4-beta-1.txt:64
msgid "What's new in Django 1.4"
msgstr ""

# 52314104b3d9474986298b22c83f5a29
#: ../../releases/1.4-beta-1.txt:67
msgid "Support for in-browser testing frameworks"
msgstr ""

# fc7664380e5345e5a60ec07f1af9001d
#: ../../releases/1.4-beta-1.txt:69
msgid ""
"Django 1.4 supports integration with in-browser testing frameworks like "
"Selenium_. The new :class:`django.test.LiveServerTestCase` base class lets "
"you test the interactions between your site's front and back ends more "
"comprehensively. See the :class:`documentation<django.test."
"LiveServerTestCase>` for more details and concrete examples."
msgstr ""

# f9d0052d2f8a4ea4acdb3da740d1c091
#: ../../releases/1.4-beta-1.txt:79
msgid "``SELECT FOR UPDATE`` support"
msgstr ""

# 091c1784d4fd46bb9538a6681bdbc12b
#: ../../releases/1.4-beta-1.txt:81
msgid ""
"Django 1.4 now includes a :meth:`QuerySet.select_for_update() <django.db."
"models.query.QuerySet.select_for_update>` method which generates a "
"``SELECT ... FOR UPDATE`` SQL query. This will lock rows until the end of "
"the transaction, meaning that other transactions cannot modify or delete "
"rows matched by a ``FOR UPDATE`` query."
msgstr ""

# bc5112ca09a44739aee7eec669fdd46e
#: ../../releases/1.4-beta-1.txt:87
msgid ""
"For more details, see the documentation for :meth:`~django.db.models.query."
"QuerySet.select_for_update`."
msgstr ""

# d724cda285484d6ba7a7d74add383ae4
#: ../../releases/1.4-beta-1.txt:91
msgid "``Model.objects.bulk_create`` in the ORM"
msgstr ""

# c58857853fc041c6a26ef99cfda9c0e3
#: ../../releases/1.4-beta-1.txt:93
msgid ""
"This method allows for more efficient creation of multiple objects in the "
"ORM. It can provide significant performance increases if you have many "
"objects. Django makes use of this internally, meaning some operations (such "
"as database setup for test suites) have seen a performance benefit as a "
"result."
msgstr ""

# f70ce90c3f904db69f4bca1e4bd7ae83
#: ../../releases/1.4-beta-1.txt:98
msgid ""
"See the :meth:`~django.db.models.query.QuerySet.bulk_create` docs for more "
"information."
msgstr ""

# 4e2b4cc2802e4b21831374504a924119
#: ../../releases/1.4-beta-1.txt:102
msgid "``QuerySet.prefetch_related``"
msgstr ""

# 90a72d556d71451ba4cedb3e39f6c93a
#: ../../releases/1.4-beta-1.txt:104
msgid ""
"Similar to :meth:`~django.db.models.query.QuerySet.select_related` but with "
"a different strategy and broader scope, :meth:`~django.db.models.query."
"QuerySet.prefetch_related` has been added to :class:`~django.db.models.query."
"QuerySet`. This method returns a new ``QuerySet`` that will prefetch each of "
"the specified related lookups in a single batch as soon as the query begins "
"to be evaluated. Unlike ``select_related``, it does the joins in Python, not "
"in the database, and supports many-to-many relationships, :class:`~django."
"contrib.contenttypes.generic.GenericForeignKey` and more. This allows you to "
"fix a very common performance problem in which your code ends up doing O(n) "
"database queries (or worse) if objects on your primary ``QuerySet`` each "
"have many related objects that you also need."
msgstr ""

# 3f8be6e146d749f2afc7b11531de0aad
#: ../../releases/1.4-beta-1.txt:118
msgid "Improved password hashing"
msgstr ""

# 48a8fd292a764cc7bc81b340e163f27c
#: ../../releases/1.4-beta-1.txt:120
msgid ""
"Django's auth system (``django.contrib.auth``) stores passwords using a one-"
"way algorithm. Django 1.3 uses the SHA1_ algorithm, but increasing processor "
"speeds and theoretical attacks have revealed that SHA1 isn't as secure as "
"we'd like. Thus, Django 1.4 introduces a new password storage system: by "
"default Django now uses the PBKDF2_ algorithm (as recommended by NIST_). You "
"can also easily choose a different algorithm (including the popular bcrypt_ "
"algorithm). For more details, see :ref:`auth_password_storage`."
msgstr ""

# 8605eff8cc444350835526ebff330348
#: ../../releases/1.4-beta-1.txt:135
msgid ""
"Django 1.4 alpha contained a bug that corrupted PBKDF2 hashes. To determine "
"which accounts are affected, run :djadmin:`manage.py shell <shell>` and "
"paste this snippet::"
msgstr ""

# e64934f39c3b4a8395e69f81645815f1
#: ../../releases/1.4-beta-1.txt:147
msgid "These users should reset their passwords."
msgstr ""

# 8ec480972d644e58a423bacb97babf1e
#: ../../releases/1.4-beta-1.txt:150
msgid "HTML5 Doctype"
msgstr ""

# 1b2d7ff927d944b99f691e4e3830479c
#: ../../releases/1.4-beta-1.txt:152
msgid ""
"We've switched the admin and other bundled templates to use the HTML5 "
"doctype. While Django will be careful to maintain compatibility with older "
"browsers, this change means that you can use any HTML5 features you need in "
"admin pages without having to lose HTML validity or override the provided "
"templates to change the doctype."
msgstr ""

# 61427d26c2c8426785efdb9c69b830ff
#: ../../releases/1.4-beta-1.txt:159
msgid "List filters in admin interface"
msgstr ""

# e5b1261dbc504024b5e9d26649bce17a
#: ../../releases/1.4-beta-1.txt:161
msgid ""
"Prior to Django 1.4, the :mod:`~django.contrib.admin` app allowed you to "
"specify change list filters by specifying a field lookup, but didn't allow "
"you to create custom filters. This has been rectified with a simple API "
"(previously used internally and known as \"FilterSpec\"). For more details, "
"see the documentation for :attr:`~django.contrib.admin.ModelAdmin."
"list_filter`."
msgstr ""

# b672915697af45f29063403df37f7473
#: ../../releases/1.4-beta-1.txt:168
msgid "Multiple sort in admin interface"
msgstr ""

# afd76c47c4844420bbcce96f72035020
#: ../../releases/1.4-beta-1.txt:170
msgid ""
"The admin change list now supports sorting on multiple columns. It respects "
"all elements of the :attr:`~django.contrib.admin.ModelAdmin.ordering` "
"attribute, and sorting on multiple columns by clicking on headers is "
"designed to mimic the behavior of desktop GUIs. The :meth:`~django.contrib."
"admin.ModelAdmin.get_ordering` method for specifying the ordering "
"dynamically (e.g. depending on the request) has also been added."
msgstr ""

# 413100bcf19e49baa5295ee003260e0d
#: ../../releases/1.4-beta-1.txt:178
msgid "New ``ModelAdmin`` methods"
msgstr ""

# 716c1d4555374811a3fb5c8396f6b65c
#: ../../releases/1.4-beta-1.txt:180
msgid ""
"A new :meth:`~django.contrib.admin.ModelAdmin.save_related` method was added "
"to :mod:`~django.contrib.admin.ModelAdmin` to ease customization of how "
"related objects are saved in the admin."
msgstr ""

# aa4348afaf024926ada1b50790c393e6
#: ../../releases/1.4-beta-1.txt:184
msgid ""
"Two other new methods, :meth:`~django.contrib.admin.ModelAdmin."
"get_list_display` and :meth:`~django.contrib.admin.ModelAdmin."
"get_list_display_links` were added to :class:`~django.contrib.admin."
"ModelAdmin` to enable the dynamic customization of fields and links "
"displayed on the admin change list."
msgstr ""

# f67ff2876d784917883c67d3bce664cb
#: ../../releases/1.4-beta-1.txt:191
msgid "Admin inlines respect user permissions"
msgstr ""

# a84df03be60c4b41903354e17a9b2aac
#: ../../releases/1.4-beta-1.txt:193
msgid ""
"Admin inlines will now only allow those actions for which the user has "
"permission. For ``ManyToMany`` relationships with an auto-created "
"intermediate model (which does not have its own permissions), the change "
"permission for the related model determines if the user has the permission "
"to add, change or delete relationships."
msgstr ""

# f22dfef80059412eaebf8c76f324c1a7
#: ../../releases/1.4-beta-1.txt:200
msgid "Tools for cryptographic signing"
msgstr ""

# f800983c0cce48118f905f83a539b691
#: ../../releases/1.4-beta-1.txt:202
msgid ""
"Django 1.4 adds both a low-level API for signing values and a high-level API "
"for setting and reading signed cookies, one of the most common uses of "
"signing in Web applications."
msgstr ""

# cd5fce43a2304f55acbd87007f80b1d9
#: ../../releases/1.4-beta-1.txt:206
msgid ""
"See the :doc:`cryptographic signing </topics/signing>` docs for more "
"information."
msgstr ""

# d06fb265013f49e19381b36b21c55b08
#: ../../releases/1.4-beta-1.txt:210
msgid "Cookie-based session backend"
msgstr ""

# 05715b9609634668aaa648d8d1204370
#: ../../releases/1.4-beta-1.txt:212
msgid ""
"Django 1.4 introduces a new cookie-based backend for the session framework "
"which uses the tools for :doc:`cryptographic signing </topics/signing>` to "
"store the session data in the client's browser."
msgstr ""

# 88e66a9f834b4f90ac6b78889eac0b49
#: ../../releases/1.4-beta-1.txt:218
msgid ""
"Session data is signed and validated by the server, but is not encrypted.  "
"This means that a user can view any data stored in the session, but cannot "
"change it. Please read the documentation for further clarification before "
"using this backend."
msgstr ""

# f8a4e514d3684cf0abb588268953dcaa
#: ../../releases/1.4-beta-1.txt:223
msgid ""
"See the :ref:`cookie-based session backend <cookie-session-backend>` docs "
"for more information."
msgstr ""

# 94ea083ae7ea47bdbfd6fe42b8801f3b
#: ../../releases/1.4-beta-1.txt:227
msgid "New form wizard"
msgstr ""

# 7e8f31415e37476d88686b33a75cf020
#: ../../releases/1.4-beta-1.txt:229
msgid ""
"The previous ``FormWizard`` from the formtools contrib app has been replaced "
"with a new implementation based on the class-based views introduced in "
"Django 1.3. It features a pluggable storage API and doesn't require the "
"wizard to pass around hidden fields for every previous step."
msgstr ""

# 3588141ad97542ad9296dd7f946bd751
#: ../../releases/1.4-beta-1.txt:234
msgid ""
"Django 1.4 ships with a session-based storage backend and a cookie-based "
"storage backend. The latter uses the tools for :doc:`cryptographic signing </"
"topics/signing>` also introduced in Django 1.4 to store the wizard's state "
"in the user's cookies."
msgstr ""

# 61c38f7d80bd4db9ad0a17ded971f9f5
#: ../../releases/1.4-beta-1.txt:239
msgid ""
"See the :doc:`form wizard </ref/contrib/formtools/form-wizard>` docs for "
"more information."
msgstr ""

# 67139a03512d4a27994a4f2e5f7d9491
#: ../../releases/1.4-beta-1.txt:243
msgid "``reverse_lazy``"
msgstr ""

# 32ed62abf9cc4900a73e9130e02c3b90
#: ../../releases/1.4-beta-1.txt:245
msgid ""
"A lazily evaluated version of :func:`django.core.urlresolvers.reverse` was "
"added to allow using URL reversals before the project's URLConf gets loaded."
msgstr ""

# ff2b579790564dbc8f448d36a43c3c1a
#: ../../releases/1.4-beta-1.txt:249
msgid "Translating URL patterns"
msgstr ""

# c71245fd8b3e4659af0f08a3c41cb637
#: ../../releases/1.4-beta-1.txt:251
msgid ""
"Django 1.4 gained the ability to look for a language prefix in the URL "
"pattern when using the new :func:`~django.conf.urls.i18n.i18n_patterns` "
"helper function. Additionally, it's now possible to define translatable URL "
"patterns using :func:`~django.utils.translation.ugettext_lazy`. See :ref:"
"`url-internationalization` for more information about the language prefix "
"and how to internationalize URL patterns."
msgstr ""

# 76407280c0f34be6a28d04642c7433f5
#: ../../releases/1.4-beta-1.txt:259
msgid ""
"Contextual translation support for ``{% trans %}`` and ``{% blocktrans %}``"
msgstr ""

# d1e424988fd0447889a097e949cff205
#: ../../releases/1.4-beta-1.txt:261
msgid ""
"The :ref:`contextual translation<contextual-markers>` support introduced in "
"Django 1.3 via the ``pgettext`` function has been extended to the :ttag:"
"`trans` and :ttag:`blocktrans` template tags using the new ``context`` "
"keyword."
msgstr ""

# 47ef1ee59b774378b6f12a92d5758b00
#: ../../releases/1.4-beta-1.txt:267
msgid "Customizable ``SingleObjectMixin`` URLConf kwargs"
msgstr ""

# 4e0a8fe417cf47888121185f1e281ffe
#: ../../releases/1.4-beta-1.txt:269
msgid ""
"Two new attributes, :attr:`pk_url_kwarg<django.views.generic.detail."
"SingleObjectMixin.pk_url_kwarg>` and :attr:`slug_url_kwarg<django.views."
"generic.detail.SingleObjectMixin.slug_url_kwarg>`, have been added to :class:"
"`~django.views.generic.detail.SingleObjectMixin` to enable the customization "
"of URLConf keyword arguments used for single object generic views."
msgstr ""

# ac2ee494f17948a7926df9e2773f8b1e
#: ../../releases/1.4-beta-1.txt:278
msgid "Assignment template tags"
msgstr ""

# 82c6d3cabcd64a9fa4ff1b662e8806f3
#: ../../releases/1.4-beta-1.txt:280
msgid ""
"A new :ref:`assignment_tag<howto-custom-template-tags-assignment-tags>` "
"helper function was added to ``template.Library`` to ease the creation of "
"template tags that store data in a specified context variable."
msgstr ""

# 0f66acd987d140e3833998c7ee939172
#: ../../releases/1.4-beta-1.txt:285
msgid "``*args`` and ``**kwargs`` support for template tag helper functions"
msgstr ""

# 379ac37a4c9044b7a6b79c84ac064177
#: ../../releases/1.4-beta-1.txt:287
msgid ""
"The :ref:`simple_tag<howto-custom-template-tags-simple-tags>`, :ref:"
"`inclusion_tag <howto-custom-template-tags-inclusion-tags>` and newly "
"introduced :ref:`assignment_tag<howto-custom-template-tags-assignment-tags>` "
"template helper functions may now accept any number of positional or keyword "
"arguments. For example:"
msgstr ""

# f62523d4e1db45a5aa6d01b30fb4366c
#: ../../releases/1.4-beta-1.txt:303
msgid ""
"Then in the template any number of arguments may be passed to the template "
"tag. For example:"
msgstr ""

# 76493b1117464de0919de056d0fae121
#: ../../releases/1.4-beta-1.txt:311
msgid "No wrapping of exceptions in ``TEMPLATE_DEBUG`` mode"
msgstr ""

# d641224e60c5481ebc012e38df11d1ff
#: ../../releases/1.4-beta-1.txt:313
msgid ""
"In previous versions of Django, whenever the :setting:`TEMPLATE_DEBUG` "
"setting was ``True``, any exception raised during template rendering (even "
"exceptions unrelated to template syntax) were wrapped in "
"``TemplateSyntaxError`` and re-raised. This was done in order to provide "
"detailed template source location information in the debug 500 page."
msgstr ""

# 21e8ca974c694f03a2fe0daef2327725
#: ../../releases/1.4-beta-1.txt:319
msgid ""
"In Django 1.4, exceptions are no longer wrapped. Instead, the original "
"exception is annotated with the source information. This means that catching "
"exceptions from template rendering is now consistent regardless of the value "
"of :setting:`TEMPLATE_DEBUG`, and there's no need to catch and unwrap "
"``TemplateSyntaxError`` in order to catch other errors."
msgstr ""

# 490d80e9e8f04584994e06db882484d3
#: ../../releases/1.4-beta-1.txt:326
msgid "``truncatechars`` template filter"
msgstr ""

# 0b2527cdb9894a7b99c6e51fc0b9416f
#: ../../releases/1.4-beta-1.txt:328
msgid ""
"Added a filter which truncates a string to be no longer than the specified "
"number of characters. Truncated strings end with a translatable ellipsis "
"sequence (\"...\"). See the documentation for :tfilter:`truncatechars` for "
"more details."
msgstr ""

# 75d82b6aa4bb4a9695a14a0aa19913e1
#: ../../releases/1.4-beta-1.txt:334
msgid "``static`` template tag"
msgstr ""

# 9f015f3d9df74626894cedc0903c54b3
#: ../../releases/1.4-beta-1.txt:336
msgid ""
"The :mod:`staticfiles<django.contrib.staticfiles>` contrib app has a new :"
"ttag:`static<staticfiles-static>` template tag to refer to files saved with "
"the :setting:`STATICFILES_STORAGE` storage backend. It uses the storage "
"backend's ``url`` method and therefore supports advanced features such as :"
"ref:`serving files from a cloud service<staticfiles-from-cdn>`."
msgstr ""

# af6dd8c2053d45de8f814bfb29f43c9c
#: ../../releases/1.4-beta-1.txt:343
msgid "``CachedStaticFilesStorage`` storage backend"
msgstr ""

# a49c40f6e3144ad793ef0c388edc8606
#: ../../releases/1.4-beta-1.txt:345
msgid ""
"In addition to the `static template tag`_, the :mod:`staticfiles<django."
"contrib.staticfiles>` contrib app now has a :class:`~django.contrib."
"staticfiles.storage.CachedStaticFilesStorage` backend which caches the files "
"it saves (when running the :djadmin:`collectstatic` management command) by "
"appending the MD5 hash of the file's content to the filename. For example, "
"the file ``css/styles.css`` would also be saved as ``css/styles.55e7cbb9ba48."
"css``"
msgstr ""

# 0efb0899a6c74455acf4e7c06101f41e
#: ../../releases/1.4-beta-1.txt:353
msgid ""
"See the :class:`~django.contrib.staticfiles.storage."
"CachedStaticFilesStorage` docs for more information."
msgstr ""

# 9dd8ec94f196415e96df32fff4735d72
#: ../../releases/1.4-beta-1.txt:357
msgid "Simple clickjacking protection"
msgstr ""

# e3afd046d42f485c9f6366302f08e5bd
#: ../../releases/1.4-beta-1.txt:359
msgid ""
"We've added a middleware to provide easy protection against `clickjacking "
"<http://en.wikipedia.org/wiki/Clickjacking>`_ using the ``X-Frame-Options`` "
"header. It's not enabled by default for backwards compatibility reasons, but "
"you'll almost certainly want to :doc:`enable it </ref/clickjacking/>` to "
"help plug that security hole for browsers that support the header."
msgstr ""

# 4464d1bf7c904e51b63c84b429c7d8a6
#: ../../releases/1.4-beta-1.txt:366
msgid "CSRF improvements"
msgstr ""

# 2a21754a06894568b16924912295b9be
#: ../../releases/1.4-beta-1.txt:368
msgid ""
"We've made various improvements to our CSRF features, including the :func:"
"`~django.views.decorators.csrf.ensure_csrf_cookie` decorator which can help "
"with AJAX heavy sites, protection for PUT and DELETE requests, and the :"
"setting:`CSRF_COOKIE_SECURE` and :setting:`CSRF_COOKIE_PATH` settings which "
"can improve the security and usefulness of the CSRF protection. See the :doc:"
"`CSRF docs </ref/contrib/csrf>` for more information."
msgstr ""

# d6fc6213ffa3415f8eb1b8cdd2120b14
#: ../../releases/1.4-beta-1.txt:376
msgid "Error report filtering"
msgstr ""

# 3424cd4478124a3fb2108fd60574bddf
#: ../../releases/1.4-beta-1.txt:378
msgid ""
"We added two function decorators, :func:`~django.views.decorators.debug."
"sensitive_variables` and :func:`~django.views.decorators.debug."
"sensitive_post_parameters`, to allow designating the local variables and "
"POST parameters that may contain sensitive information and should be "
"filtered out of error reports."
msgstr ""

# 8920ba7be9c14979ae33b903c2cdc6d6
#: ../../releases/1.4-beta-1.txt:384
msgid ""
"All POST parameters are now systematically filtered out of error reports for "
"certain views (``login``, ``password_reset_confirm``, ``password_change``, "
"and ``add_view`` in :mod:`django.contrib.auth.views`, as well as "
"``user_change_password`` in the admin app) to prevent the leaking of "
"sensitive information such as user passwords."
msgstr ""

# 4cee907f9f574abf9a113d604b4f09e6
#: ../../releases/1.4-beta-1.txt:390
msgid ""
"You may override or customize the default filtering by writing a :ref:"
"`custom filter<custom-error-reports>`. For more information see the docs on :"
"ref:`Filtering error reports<filtering-error-reports>`."
msgstr ""

# 272d7a61ea33481382f9858b6961575d
#: ../../releases/1.4-beta-1.txt:395
msgid "Extended IPv6 support"
msgstr ""

# 7f9a12a3e62d4624b81e9b715c227a2c
#: ../../releases/1.4-beta-1.txt:397
msgid ""
"The previously added support for IPv6 addresses when using the runserver "
"management command in Django 1.3 has now been further extended by adding a :"
"class:`~django.db.models.GenericIPAddressField` model field, a :class:"
"`~django.forms.GenericIPAddressField` form field and the validators :data:"
"`~django.core.validators.validate_ipv46_address` and :data:`~django.core."
"validators.validate_ipv6_address`"
msgstr ""

# c9b1aada87b4423a9c863c8d7e659ac3
#: ../../releases/1.4-beta-1.txt:405
msgid "Updated default project layout and ``manage.py``"
msgstr ""

# 7920ea5c99db49948acdb0df75cd6f20
#: ../../releases/1.4-beta-1.txt:407
msgid ""
"Django 1.4 ships with an updated default project layout and ``manage.py`` "
"file for the :djadmin:`startproject` management command. These fix some "
"issues with the previous ``manage.py`` handling of Python import paths that "
"caused double imports, trouble moving from development to deployment, and "
"other difficult-to-debug path issues."
msgstr ""

# e31fea055cbc42789121264c1ea76712
#: ../../releases/1.4-beta-1.txt:413
msgid ""
"The previous ``manage.py`` called functions that are now deprecated, and "
"thus projects upgrading to Django 1.4 should update their ``manage.py``. "
"(The old-style ``manage.py`` will continue to work as before until Django "
"1.6; in 1.5 it will raise ``DeprecationWarning``)."
msgstr ""

# 1518dca80a89468680b28654e1d5d4d6
#: ../../releases/1.4-beta-1.txt:418
msgid "The new recommended ``manage.py`` file should look like this::"
msgstr ""

# 71b0ed5f32444401ad26bad0fb853d06
#: ../../releases/1.4-beta-1.txt:430
msgid ""
"``{{ project_name }}`` should be replaced with the Python package name of "
"the actual project."
msgstr ""

# 06046a851ca6403db2c092a3bb3cb496
#: ../../releases/1.4-beta-1.txt:433
msgid ""
"If settings, URLconfs, and apps within the project are imported or "
"referenced using the project name prefix (e.g. ``myproject.settings``, "
"``ROOT_URLCONF = \"myproject.urls\"``, etc), the new ``manage.py`` will need "
"to be moved one directory up, so it is outside the project package rather "
"than adjacent to ``settings.py`` and ``urls.py``."
msgstr ""

# e3503bd7626d4bc5894fc17288f08083
#: ../../releases/1.4-beta-1.txt:439
msgid "For instance, with the following layout::"
msgstr ""

# 005c0d3c6252431f8034aeef22a88b14
#: ../../releases/1.4-beta-1.txt:450
msgid ""
"You could import ``mysite.settings``, ``mysite.urls``, and ``mysite.myapp``, "
"but not ``settings``, ``urls``, or ``myapp`` as top-level modules."
msgstr ""

# 1ea1fd723d75450e890cf00ac85d0665
#: ../../releases/1.4-beta-1.txt:453
msgid ""
"Anything imported as a top-level module can be placed adjacent to the new "
"``manage.py``. For instance, to decouple \"myapp\" from the project module "
"and import it as just ``myapp``, place it outside the ``mysite/`` directory::"
msgstr ""

# 6580bc62a0a14186a89eaa4f83f68528
#: ../../releases/1.4-beta-1.txt:466
msgid ""
"If the same code is imported inconsistently (some places with the project "
"prefix, some places without it), the imports will need to be cleaned up when "
"switching to the new ``manage.py``."
msgstr ""

# c97998348f2e46d8b4c4bb5e1f414069
#: ../../releases/1.4-beta-1.txt:471
msgid "Improved WSGI support"
msgstr ""

# 40ce036a9d0f464aa52d3e9e46042b2f
#: ../../releases/1.4-beta-1.txt:473
msgid ""
"The :djadmin:`startproject` management command now adds a :file:`wsgi.py` "
"module to the initial project layout, containing a simple WSGI application "
"that can be used for :doc:`deploying with WSGI app servers</howto/deployment/"
"wsgi/index>`."
msgstr ""

# 926a1b1c5f494d83860a5c3f0e5dcd53
#: ../../releases/1.4-beta-1.txt:478
msgid ""
"The :djadmin:`built-in development server<runserver>` now supports using an "
"externally-defined WSGI callable, so as to make it possible to run runserver "
"with the same WSGI configuration that is used for deployment. A new :setting:"
"`WSGI_APPLICATION` setting is available to configure which WSGI callable :"
"djadmin:`runserver` uses."
msgstr ""

# 43c23c261d60465ab5943459c16d7caa
#: ../../releases/1.4-beta-1.txt:484
msgid ""
"(The :djadmin:`runfcgi` management command also internally wraps the WSGI "
"callable configured via :setting:`WSGI_APPLICATION`.)"
msgstr ""

# f654f1842cac43a194f8c4680ac688bf
#: ../../releases/1.4-beta-1.txt:488
msgid "Custom project and app templates"
msgstr ""

# d2a0649b1eea4105a57c292d7bceea43
#: ../../releases/1.4-beta-1.txt:490
msgid ""
"The :djadmin:`startapp` and :djadmin:`startproject` management commands got "
"a ``--template`` option for specifying a path or URL to a custom app or "
"project template."
msgstr ""

# 2bfef56f4f764facaac991f0e72149c9
#: ../../releases/1.4-beta-1.txt:494
msgid ""
"For example, Django will use the ``/path/to/my_project_template`` directory "
"when running the following command::"
msgstr ""

# 406ea1dc85a84bb0ba77f9faab69c042
#: ../../releases/1.4-beta-1.txt:499
msgid ""
"You can also now provide a destination directory as the second argument to "
"both :djadmin:`startapp` and :djadmin:`startproject`::"
msgstr ""

# 920a252730a54735a4da1ef3752b053e
#: ../../releases/1.4-beta-1.txt:505
msgid ""
"For more information, see the :djadmin:`startapp` and :djadmin:"
"`startproject` documentation."
msgstr ""

# cc22d15e087b48dbb918f8af2e44fa6e
#: ../../releases/1.4-beta-1.txt:509
msgid "Support for time zones"
msgstr ""

# 5c5089aff53a4f3fb2f492cb48a16cfb
#: ../../releases/1.4-beta-1.txt:511
msgid ""
"Django 1.4 adds :ref:`support for time zones <time-zones>`. When it's "
"enabled, Django stores date and time information in UTC in the database, "
"uses time zone-aware datetime objects internally, and translates them to the "
"end user's time zone in templates and forms."
msgstr ""

# b10b1b1327eb4aceb59f51078b559c28
#: ../../releases/1.4-beta-1.txt:516
msgid "Reasons for using this feature include:"
msgstr ""

# 04c4c4fd73334cca9b648988261823c2
#: ../../releases/1.4-beta-1.txt:518
msgid "Customizing date and time display for users around the world."
msgstr ""

# 5b6157d1a8754ecda696c589ea2e3a2d
#: ../../releases/1.4-beta-1.txt:519
msgid ""
"Storing datetimes in UTC for database portability and interoperability. "
"(This argument doesn't apply to PostgreSQL, because it already stores "
"timestamps with time zone information in Django 1.3.)"
msgstr ""

# 170bed59af8945e79ac94350e7261fbd
#: ../../releases/1.4-beta-1.txt:522
msgid "Avoiding data corruption problems around DST transitions."
msgstr ""

# 36ec9080d16e41f9a273971f8636e757
#: ../../releases/1.4-beta-1.txt:524
msgid ""
"Time zone support is enabled by default in new projects created with :"
"djadmin:`startproject`. If you want to use this feature in an existing "
"project, there is a :ref:`migration guide <time-zones-migration-guide>`."
msgstr ""

# 3531c5bd18ae4478bd59a4e932ba52c5
#: ../../releases/1.4-beta-1.txt:529
msgid "Two new date format strings"
msgstr ""

# b1b8636b22bb4cafbaef1dcd28b775e3
#: ../../releases/1.4-beta-1.txt:531
msgid ""
"Two new :tfilter:`date` formats were added for use in template filters, "
"template tags and :ref:`format-localization`:"
msgstr ""

# 08596aee164745aeafb608f0265d607a
#: ../../releases/1.4-beta-1.txt:534
msgid "``e`` -- the name of the timezone of the given datetime object"
msgstr ""

# 0d724f4231c14864bb8ed547e49f44c1
#: ../../releases/1.4-beta-1.txt:535
msgid "``o`` -- the ISO 8601 year number"
msgstr ""

# 847bfdcbc4a449a7aefc67db2aa9e73b
#: ../../releases/1.4-beta-1.txt:537
msgid ""
"Please make sure to update your :ref:`custom format files <custom-format-"
"files>` if they contain either ``e`` or ``o`` in a format string. For "
"example a Spanish localization format previously only escaped the ``d`` "
"format character::"
msgstr ""

# f856441ad23d46c58105363251535f5a
#: ../../releases/1.4-beta-1.txt:544
msgid "But now it needs to also escape ``e`` and ``o``::"
msgstr ""

# fec9e77f55434f3b9c231530f439e064
#: ../../releases/1.4-beta-1.txt:548
msgid "For more information, see the :tfilter:`date` documentation."
msgstr ""

# a6c095f70ba849d39121c25a633e13e2
#: ../../releases/1.4-beta-1.txt:551
msgid "Minor features"
msgstr ""

# 4806a53f7d434097b89cc9f301531cf5
#: ../../releases/1.4-beta-1.txt:553
msgid "Django 1.4 also includes several smaller improvements worth noting:"
msgstr ""

# 75449e3835fc46678cb6545b56a20abf
#: ../../releases/1.4-beta-1.txt:555
msgid ""
"A more usable stacktrace in the technical 500 page: frames in the stack "
"trace which reference Django's code are dimmed out, while frames in user "
"code are slightly emphasized. This change makes it easier to scan a "
"stacktrace for issues in user code."
msgstr ""

# 422984ea540d4f3487b27182782a4ebf
#: ../../releases/1.4-beta-1.txt:560
msgid ":doc:`Tablespace support </topics/db/tablespaces>` in PostgreSQL."
msgstr ""

# 2dd65de5b25b40248e61bb60260c8530
#: ../../releases/1.4-beta-1.txt:562
msgid "Customizable names for :meth:`~django.template.Library.simple_tag`."
msgstr ""

# 5af1d8eb40684dff92346c5563c88162
#: ../../releases/1.4-beta-1.txt:564
msgid ""
"In the documentation, a helpful :doc:`security overview </topics/security>` "
"page."
msgstr ""

# 13d2bbf8b1a74722a9e25c45600e8d4b
#: ../../releases/1.4-beta-1.txt:567
msgid ""
"The ``django.contrib.auth.models.check_password`` function has been moved to "
"the ``django.contrib.auth.utils`` module. Importing it from the old location "
"will still work, but you should update your imports."
msgstr ""

# 9157fc643126414d8da1954a7f11d5c8
#: ../../releases/1.4-beta-1.txt:571
msgid ""
"The :djadmin:`collectstatic` management command gained a ``--clear`` option "
"to delete all files at the destination before copying or linking the static "
"files."
msgstr ""

# c85210a54f0f49b0a80722c375ea333f
#: ../../releases/1.4-beta-1.txt:575
msgid ""
"It is now possible to load fixtures containing forward references when using "
"MySQL with the InnoDB database engine."
msgstr ""

# d34f3978e39b416ba7a42d1b7dcc9f6c
#: ../../releases/1.4-beta-1.txt:578
msgid ""
"A new 403 response handler has been added as ``'django.views.defaults."
"permission_denied'``. You can set your own handler by setting the value of :"
"data:`django.conf.urls.handler403`. See the documentation about :ref:`the "
"403 (HTTP Forbidden) view<http_forbidden_view>` for more information."
msgstr ""

# 72b844eb62e449fa8a8e2ad1b5a1fd18
#: ../../releases/1.4-beta-1.txt:584
msgid ""
"The :ttag:`trans` template tag now takes an optional ``as`` argument to be "
"able to retrieve a translation string without displaying it but setting a "
"template context variable instead."
msgstr ""

# 1fb26b70ab0646ac92987853e9063466
#: ../../releases/1.4-beta-1.txt:588
msgid "The :ttag:`if` template tag now supports ``{% elif %}`` clauses."
msgstr ""

# f597a451495a49f7b5ae073404feaa60
#: ../../releases/1.4-beta-1.txt:590
msgid ""
"A new plain text version of the HTTP 500 status code internal error page "
"served when :setting:`DEBUG` is ``True`` is now sent to the client when "
"Django detects that the request has originated in JavaScript code (:meth:"
"`~django.http.HttpRequest.is_ajax` is used for this)."
msgstr ""

# 84198e9dc33c483cb2239f70ea6ac9e6
#: ../../releases/1.4-beta-1.txt:595
msgid ""
"Similarly to its HTML counterpart, it contains a collection of different "
"pieces of information about the state of the web application."
msgstr ""

# 40a051e0e6a640b695ae43909239eda3
#: ../../releases/1.4-beta-1.txt:598
msgid ""
"This should make it easier to read when debugging interaction with client-"
"side Javascript code."
msgstr ""

# 4fff601e67a74f56a03a29026ad331ec
#: ../../releases/1.4-beta-1.txt:601
msgid ""
"Added the :djadminopt:`--no-location` option to the :djadmin:`makemessages` "
"command."
msgstr ""

# 69cfc71b0b3f47fca58fd5d44555dd6d
#: ../../releases/1.4-beta-1.txt:604
msgid ""
"Changed the ``locmem`` cache backend to use ``pickle.HIGHEST_PROTOCOL`` for "
"better compatibility with the other cache backends."
msgstr ""

# a4a86b02e07449d5be6457c65fb9344c
#: ../../releases/1.4-beta-1.txt:608
msgid ""
"Added support in the ORM for generating ``SELECT`` queries containing "
"``DISTINCT ON``."
msgstr ""

# 280eba59b3cc4d9ea25063096ddc47cd
#: ../../releases/1.4-beta-1.txt:611
msgid ""
"The ``distinct()`` ``QuerySet`` method now accepts an optional list of model "
"field names. If specified, then the ``DISTINCT`` statement is limited to "
"these fields. This is only supported in PostgreSQL."
msgstr ""

# 4666dd3679af443ea9668cb05fdfd160
#: ../../releases/1.4-beta-1.txt:615
msgid ""
"For more details, see the documentation for :meth:`~django.db.models.query."
"QuerySet.distinct`."
msgstr ""

# a65646d3084142f2ab66abf1b23011b2
#: ../../releases/1.4-beta-1.txt:618
msgid ""
"New phrases added to ``HIDDEN_SETTINGS`` regex in `django/views/debug.py`_."
msgstr ""

# d5cf49c9bbfb4f0cb8155169859ed886
#: ../../releases/1.4-beta-1.txt:620
msgid ""
"``'API'``, ``'TOKEN'``, ``'KEY'`` were added, ``'PASSWORD'`` was changed to "
"``'PASS'``."
msgstr ""

# 56ff5ef0cd5646a9b9eff97fab69cf48
#: ../../releases/1.4-beta-1.txt:627
msgid "Backwards incompatible changes in 1.4"
msgstr ""

# a8ecfa5925bf42198ed2e46de56ae707
#: ../../releases/1.4-beta-1.txt:630
msgid "django.contrib.admin"
msgstr ""

# 2024da44b92a459fa67eb94c78837cf2
#: ../../releases/1.4-beta-1.txt:632
msgid ""
"The included administration app ``django.contrib.admin`` has for a long time "
"shipped with a default set of static files such as JavaScript, images and "
"stylesheets. Django 1.3 added a new contrib app ``django.contrib."
"staticfiles`` to handle such files in a generic way and defined conventions "
"for static files included in apps."
msgstr ""

# 2a6bffc16601450a91887e0df03a3624
#: ../../releases/1.4-beta-1.txt:638
msgid ""
"Starting in Django 1.4 the admin's static files also follow this convention "
"to make it easier to deploy the included files. In previous versions of "
"Django, it was also common to define an ``ADMIN_MEDIA_PREFIX`` setting to "
"point to the URL where the admin's static files are served by a web server. "
"This setting has now been deprecated and replaced by the more general "
"setting :setting:`STATIC_URL`. Django will now expect to find the admin "
"static files under the URL ``<STATIC_URL>/admin/``."
msgstr ""

# d9bd641654c74d18a755cfbb7b3fe291
#: ../../releases/1.4-beta-1.txt:646
msgid ""
"If you've previously used a URL path for ``ADMIN_MEDIA_PREFIX`` (e.g. ``/"
"media/``) simply make sure :setting:`STATIC_URL` and :setting:`STATIC_ROOT` "
"are configured and your web server serves the files correctly. The "
"development server continues to serve the admin files just like before. "
"Don't hesitate to consult the :doc:`static files howto </howto/static-files/"
"index>` for further details."
msgstr ""

# 74360f5dfc344cbeb35cae9d6a3884a5
#: ../../releases/1.4-beta-1.txt:653
msgid ""
"In case your ``ADMIN_MEDIA_PREFIX`` is set to an specific domain (e.g. "
"``http://media.example.com/admin/``) make sure to also set your :setting:"
"`STATIC_URL` setting to the correct URL, for example ``http://media.example."
"com/``."
msgstr ""

# 072e9ecd35284d01a26fc40d4778d480
#: ../../releases/1.4-beta-1.txt:660
msgid ""
"If you're implicitly relying on the path of the admin static files on your "
"server's file system when you deploy your site, you have to update that "
"path. The files were moved from :file:`django/contrib/admin/media/` to :file:"
"`django/contrib/admin/static/admin/`."
msgstr ""

# 79289797245d4c9c92f1affecd0e38a6
#: ../../releases/1.4-beta-1.txt:666
msgid "Supported browsers for the admin"
msgstr ""

# e303d317e028415988196f0c1023191e
#: ../../releases/1.4-beta-1.txt:668
msgid ""
"Django hasn't had a clear policy on which browsers are supported for using "
"the admin app. Django's new policy formalizes existing practices: `YUI's A-"
"grade`_ browsers should provide a fully-functional admin experience, with "
"the notable exception of IE6, which is no longer supported."
msgstr ""

# bd225244a8034f55b0882c9770bc0f28
#: ../../releases/1.4-beta-1.txt:673
msgid ""
"Released over ten years ago, IE6 imposes many limitations on modern web "
"development. The practical implications of this policy are that contributors "
"are free to improve the admin without consideration for these limitations."
msgstr ""

# d3132b04622c413b932c83c38e2e7dfd
#: ../../releases/1.4-beta-1.txt:677
msgid ""
"This new policy **has no impact** on development outside of the admin. Users "
"of Django are free to develop webapps compatible with any range of browsers."
msgstr ""

# 89d116eb29a54a6a8a8c391f92b4308d
#: ../../releases/1.4-beta-1.txt:683
msgid "Removed admin icons"
msgstr ""

# 7522fac5743a47a9bb1a979ec99b6154
#: ../../releases/1.4-beta-1.txt:685
msgid ""
"As part of an effort to improve the performance and usability of the admin's "
"changelist sorting interface and of the admin's :attr:`horizontal <django."
"contrib.admin.ModelAdmin.filter_horizontal>` and :attr:`vertical <django."
"contrib.admin.ModelAdmin.filter_vertical>` \"filter\" widgets, some icon "
"files were removed and grouped into two sprite files."
msgstr ""

# 5541a20cb2354f4b845eb267c1e0f9ba
#: ../../releases/1.4-beta-1.txt:691
msgid ""
"Specifically: ``selector-add.gif``, ``selector-addall.gif``, ``selector-"
"remove.gif``, ``selector-removeall.gif``, ``selector_stacked-add.gif`` and "
"``selector_stacked-remove.gif`` were combined into ``selector-icons.gif``; "
"and ``arrow-up.gif`` and ``arrow-down.gif`` were combined into ``sorting-"
"icons.gif``."
msgstr ""

# 8625747e9c7247ea93e098493bd30b03
#: ../../releases/1.4-beta-1.txt:697
msgid ""
"If you used those icons to customize the admin then you will want to replace "
"them with your own icons or retrieve them from a previous release."
msgstr ""

# 75018e77d1fd408a8b206d26cd839fd6
#: ../../releases/1.4-beta-1.txt:701
msgid "CSS class names in admin forms"
msgstr ""

# 140260403e994c5da1c72504fc5bd754
#: ../../releases/1.4-beta-1.txt:703
msgid ""
"To avoid conflicts with other common CSS class names (e.g. \"button\"), a "
"prefix \"field-\" has been added to all CSS class names automatically "
"generated from the form field names in the main admin forms, stacked inline "
"forms and tabular inline cells. You will need to take that prefix into "
"account in your custom style sheets or javascript files if you previously "
"used plain field names as selectors for custom styles or javascript "
"transformations."
msgstr ""

# ece74dc4b03348f287b0c66e86069212
#: ../../releases/1.4-beta-1.txt:711
msgid "Compatibility with old signed data"
msgstr ""

# 65a7099b14e1438d88a29a657a50575f
#: ../../releases/1.4-beta-1.txt:713
msgid ""
"Django 1.3 changed the cryptographic signing mechanisms used in a number of "
"places in Django. While Django 1.3 kept fallbacks that would accept hashes "
"produced by the previous methods, these fallbacks are removed in Django 1.4."
msgstr ""

# 31c8ff38468c4d629fa7ed8b55a5f3a6
#: ../../releases/1.4-beta-1.txt:717
msgid ""
"So, if you upgrade to Django 1.4 directly from 1.2 or earlier, you may lose/"
"invalidate certain pieces of data that have been cryptographically signed "
"using an old method. To avoid this, use Django 1.3 first for a period of "
"time to allow the signed data to expire naturally. The affected parts are "
"detailed below, with 1) the consequences of ignoring this advice and 2) the "
"amount of time you need to run Django 1.3 for the data to expire or become "
"irrelevant."
msgstr ""

# 190eeb8081be4ee08e891f6fd18f102d
#: ../../releases/1.4-beta-1.txt:724
msgid "``contrib.sessions`` data integrity check"
msgstr ""

# 852fca8987ba4f7da7c051461c29c8f0
#: ../../releases/1.4-beta-1.txt:726
msgid ""
"consequences: the user will be logged out, and session data will be lost."
msgstr ""

# 20be958d38b5441f9db56d7910ef1109
#: ../../releases/1.4-beta-1.txt:728
msgid "time period: defined by :setting:`SESSION_COOKIE_AGE`."
msgstr ""

# dfbac74daddb4fa39011db66e679f33d
#: ../../releases/1.4-beta-1.txt:730
msgid "``contrib.auth`` password reset hash"
msgstr ""

# 9d37019c527e428a8da93410d02286da
#: ../../releases/1.4-beta-1.txt:732
msgid ""
"consequences: password reset links from before the upgrade will not work."
msgstr ""

# 6eefa928734742fd9f680cb93e609365
#: ../../releases/1.4-beta-1.txt:734
msgid "time period: defined by :setting:`PASSWORD_RESET_TIMEOUT_DAYS`."
msgstr ""

# 5e61e88fe2e446a382b02c1049c3457a
#: ../../releases/1.4-beta-1.txt:736
msgid ""
"Form-related hashes — these are much shorter lifetime, and are relevant only "
"for the short window where a user might fill in a form generated by the pre-"
"upgrade Django instance, and try to submit it to the upgraded Django "
"instance:"
msgstr ""

# 5db9049b992145b9b3165249361b9492
#: ../../releases/1.4-beta-1.txt:740
msgid "``contrib.comments`` form security hash"
msgstr ""

# 111a2de73f8a4aefa5e80fba7f6bd5d5
#: ../../releases/1.4-beta-1.txt:742
msgid ""
"consequences: the user will see a validation error \"Security hash failed\"."
msgstr ""

# 076bbd1890ce42e49be00bf8c560df8d
#: ../../releases/1.4-beta-1.txt:744
msgid ""
"time period: the amount of time you expect users to take filling out comment "
"forms."
msgstr ""

# f9ed0ba01e0e45e9bb2f608095f11540
#: ../../releases/1.4-beta-1.txt:747
msgid "``FormWizard`` security hash"
msgstr ""

# 6566b69b41d540f9ac79f2606febf140
#: ../../releases/1.4-beta-1.txt:749
msgid ""
"consequences: the user will see an error about the form having expired, and "
"will be sent back to the first page of the wizard, losing the data they have "
"entered so far."
msgstr ""

# 2b3b8f0a4dae4665b05884e0cb74bc19
#: ../../releases/1.4-beta-1.txt:753
msgid ""
"time period: the amount of time you expect users to take filling out the "
"affected forms."
msgstr ""

# 412d994c5c454584883dab1ee6859317
#: ../../releases/1.4-beta-1.txt:756
msgid "CSRF check"
msgstr ""

# 3ec5f19ff7854db09907bcf4bf33b1fa
#: ../../releases/1.4-beta-1.txt:758
msgid ""
"Note: This is actually a Django 1.1 fallback, not Django 1.2, and applies "
"only if you are upgrading from 1.1."
msgstr ""

# 24caeb6c2fba4be2977ea5a226bc1049
#: ../../releases/1.4-beta-1.txt:761
msgid ""
"consequences: the user will see a 403 error with any CSRF protected POST "
"form."
msgstr ""

# cfb01a99dadd46ad964328b74bd18662
#: ../../releases/1.4-beta-1.txt:764
msgid ""
"time period: the amount of time you expect user to take filling out such "
"forms."
msgstr ""

# 30730a3916c84935992c0bd27e4c5f6c
#: ../../releases/1.4-beta-1.txt:768
msgid "django.contrib.flatpages"
msgstr ""

# a4378f2c028045b88cfaedadf5bf47c0
#: ../../releases/1.4-beta-1.txt:770
msgid ""
"Starting in the 1.4 release the :class:`~django.contrib.flatpages.middleware."
"FlatpageFallbackMiddleware` only adds a trailing slash and redirects if the "
"resulting URL refers to an existing flatpage. For example, requesting ``/"
"notaflatpageoravalidurl`` in a previous version would redirect to ``/"
"notaflatpageoravalidurl/``, which would subsequently raise a 404. Requesting "
"``/notaflatpageoravalidurl`` now will immediately raise a 404. Additionally "
"redirects returned by flatpages are now permanent (301 status code) to match "
"the behavior of the :class:`~django.middleware.common.CommonMiddleware`."
msgstr ""

# 3f717407b6624746bd0e604f4b23c806
#: ../../releases/1.4-beta-1.txt:781
msgid ""
"Serialization of :class:`~datetime.datetime` and :class:`~datetime.time`"
msgstr ""

# dc96eb246927413b937e64731fb4cd4d
#: ../../releases/1.4-beta-1.txt:783
msgid ""
"As a consequence of time zone support, and according to the ECMA-262 "
"specification, some changes were made to the JSON serializer:"
msgstr ""

# 3759485734254926b27b65573bc3645f
#: ../../releases/1.4-beta-1.txt:786
msgid ""
"It includes the time zone for aware datetime objects. It raises an exception "
"for aware time objects."
msgstr ""

# 8bab1c140d294775a79694f896dd2f92
#: ../../releases/1.4-beta-1.txt:788
msgid ""
"It includes milliseconds for datetime and time objects. There is still some "
"precision loss, because Python stores microseconds (6 digits) and JSON only "
"supports milliseconds (3 digits). However, it's better than discarding "
"microseconds entirely."
msgstr ""

# d62a3fb9e4144b0b84334f17d5869f8c
#: ../../releases/1.4-beta-1.txt:793
msgid ""
"The XML serializer was also changed to use the ISO8601 format for datetimes. "
"The letter ``T`` is used to separate the date part from the time part, "
"instead of a space. Time zone information is included in the ``[+-]HH:MM`` "
"format."
msgstr ""

# da930879db1648eebfe999787ec3047d
#: ../../releases/1.4-beta-1.txt:797
msgid ""
"The serializers will dump datetimes in fixtures with these new formats. They "
"can still load fixtures that use the old format."
msgstr ""

# 56f1752918c34d54b00e793e8092869a
#: ../../releases/1.4-beta-1.txt:801
msgid "``supports_timezone`` changed to ``False`` for SQLite"
msgstr ""

# 0b3bd98412eb46f8a76e2930f35944f5
#: ../../releases/1.4-beta-1.txt:803
msgid ""
"The database feature ``supports_timezone`` used to be ``True`` for SQLite. "
"Indeed, if you saved an aware datetime object, SQLite stored a string that "
"included an UTC offset. However, this offset was ignored when loading the "
"value back from the database, which could corrupt the data."
msgstr ""

# 763737913c254d31b39de05910aeb5f5
#: ../../releases/1.4-beta-1.txt:808
msgid ""
"In the context of time zone support, this flag was changed to ``False``, and "
"datetimes are now stored without time zone information in SQLite. When :"
"setting:`USE_TZ` is ``False``, if you attempt to save an aware datetime "
"object, Django raises an exception."
msgstr ""

# dc772d2c793b4408add29109247596b3
#: ../../releases/1.4-beta-1.txt:814
msgid "Database connection's thread-locality"
msgstr ""

# c5c6a03e724b49cc8a66842a56de5660
#: ../../releases/1.4-beta-1.txt:816
msgid ""
"``DatabaseWrapper`` objects (i.e. the connection objects referenced by "
"``django.db.connection`` and ``django.db.connections[\"some_alias\"]``) used "
"to be thread-local. They are now global objects in order to be potentially "
"shared between multiple threads. While the individual connection objects are "
"now global, the ``django.db.connections`` dictionary referencing those "
"objects is still thread-local. Therefore if you just use the ORM or "
"``DatabaseWrapper.cursor()`` then the behavior is still the same as before. "
"Note, however, that ``django.db.connection`` does not directly reference the "
"default ``DatabaseWrapper`` object anymore and is now a proxy to access that "
"object's attributes. If you need to access the actual ``DatabaseWrapper`` "
"object, use ``django.db.connections[DEFAULT_DB_ALIAS]`` instead."
msgstr ""

# a6c85d671947466d99459fabe464a7ad
#: ../../releases/1.4-beta-1.txt:828
msgid ""
"As part of this change, all underlying SQLite connections are now enabled "
"for potential thread-sharing (by passing the ``check_same_thread=False`` "
"attribute to pysqlite). ``DatabaseWrapper`` however preserves the previous "
"behavior by disabling thread-sharing by default, so this does not affect any "
"existing code that purely relies on the ORM or on ``DatabaseWrapper.cursor()"
"``."
msgstr ""

# 8040d2b79b444baeb4ed399fb91fdfb0
#: ../../releases/1.4-beta-1.txt:834
msgid ""
"Finally, while it is now possible to pass connections between threads, "
"Django does not make any effort to synchronize access to the underlying "
"backend. Concurrency behavior is defined by the underlying backend "
"implementation. Check their documentation for details."
msgstr ""

# f63ac717120845659c6f155e15607068
#: ../../releases/1.4-beta-1.txt:840
msgid "`COMMENTS_BANNED_USERS_GROUP` setting"
msgstr ""

# 28ef51e0c41c4d09a394701ea5a1bd09
#: ../../releases/1.4-beta-1.txt:842
msgid ""
"Django's :doc:`comments app </ref/contrib/comments/index>` has historically "
"supported excluding the comments of a special user group, but we've never "
"documented the feature properly and didn't enforce the exclusion in other "
"parts of the app such as the template tags. To fix this problem, we removed "
"the code from the feed class."
msgstr ""

# 243d2edba61546ba991b2a2e0345abc4
#: ../../releases/1.4-beta-1.txt:848
msgid ""
"If you rely on the feature and want to restore the old behavior, simply use "
"a custom comment model manager to exclude the user group, like this::"
msgstr ""

# eda9aef1c82140ce9c3b29a6b0a56d98
#: ../../releases/1.4-beta-1.txt:863
msgid ""
"Save this model manager in your custom comment app (e.g. in "
"``my_comments_app/managers.py``) and add it your :ref:`custom comment app "
"model <custom-comment-app-api>`::"
msgstr ""

# bcb434060cae4f55a3fd7f12b5f64d43
#: ../../releases/1.4-beta-1.txt:877
msgid ""
"For more details, see the documentation about :doc:`customizing the comments "
"framework </ref/contrib/comments/custom>`."
msgstr ""

# f6c7e189db1f47929481d0dad87dc8b7
#: ../../releases/1.4-beta-1.txt:881
msgid "`IGNORABLE_404_STARTS` and `IGNORABLE_404_ENDS` settings"
msgstr ""

# b0f6e8c5a9c14aacac0f167e6a72667c
#: ../../releases/1.4-beta-1.txt:883
msgid ""
"Until Django 1.3, it was possible to exclude some URLs from Django's :doc:"
"`404 error reporting</howto/error-reporting>` by adding prefixes to "
"``IGNORABLE_404_STARTS`` and suffixes to ``IGNORABLE_404_ENDS``."
msgstr ""

# 188c735a07cc429a86ca24ac2a4ff762
#: ../../releases/1.4-beta-1.txt:887
msgid ""
"In Django 1.4, these two settings are superseded by :setting:"
"`IGNORABLE_404_URLS`, which is a list of compiled regular expressions. "
"Django won't send an email for 404 errors on URLs that match any of them."
msgstr ""

# ec364f6906ac47ac92264f34fec1278a
#: ../../releases/1.4-beta-1.txt:892
msgid ""
"Furthermore, the previous settings had some rather arbitrary default values::"
msgstr ""

# 79def30fa3894b3da818c7733fbbc39e
#: ../../releases/1.4-beta-1.txt:898
msgid ""
"It's not Django's role to decide if your website has a legacy ``/cgi-bin/`` "
"section or a ``favicon.ico``. As a consequence, the default values of :"
"setting:`IGNORABLE_404_URLS`, ``IGNORABLE_404_STARTS``, and "
"``IGNORABLE_404_ENDS`` are all now empty."
msgstr ""

# 80703eda705541f9a940c01e3dbf48b5
#: ../../releases/1.4-beta-1.txt:903
msgid ""
"If you have customized ``IGNORABLE_404_STARTS`` or ``IGNORABLE_404_ENDS``, "
"or if you want to keep the old default value, you should add the following "
"lines in your settings file::"
msgstr ""

# 380825689dc247d48d18ea204ec6512f
#: ../../releases/1.4-beta-1.txt:915
msgid ""
"Don't forget to escape characters that have a special meaning in a regular "
"expression."
msgstr ""

# bb8cbc7e4344413face9ab5aae01b87b
#: ../../releases/1.4-beta-1.txt:919
msgid "CSRF protection extended to PUT and DELETE"
msgstr ""

# 48dc1d49543e4b79a0970da7a351b41c
#: ../../releases/1.4-beta-1.txt:921
msgid ""
"Previously, Django's :doc:`CSRF protection </ref/contrib/csrf/>` provided "
"protection against only POST requests. Since use of PUT and DELETE methods "
"in AJAX applications is becoming more common, we now protect all methods not "
"defined as safe by :rfc:`2616` i.e. we exempt GET, HEAD, OPTIONS and TRACE, "
"and enforce protection on everything else."
msgstr ""

# 990f5efac1a04e8aa7579a92608acf84
#: ../../releases/1.4-beta-1.txt:927
msgid ""
"If you are using PUT or DELETE methods in AJAX applications, please see the :"
"ref:`instructions about using AJAX and CSRF <csrf-ajax>`."
msgstr ""

# d1edd6ce848d42ac9e346ee1d0d4ad54
#: ../../releases/1.4-beta-1.txt:931
msgid "``django.core.template_loaders``"
msgstr ""

# 6cf1ff14e9bb447787414ffd4fc259e3
#: ../../releases/1.4-beta-1.txt:933
msgid ""
"This was an alias to ``django.template.loader`` since 2005, it has been "
"removed without emitting a warning due to the length of the deprecation. If "
"your code still referenced this please use ``django.template.loader`` "
"instead."
msgstr ""

# f5f2a6eb36a8486baa2f71f9a36480f9
#: ../../releases/1.4-beta-1.txt:938
msgid "``django.db.models.fields.URLField.verify_exists``"
msgstr ""

# 697f548a6e9e4047b85d262a49a0b16b
#: ../../releases/1.4-beta-1.txt:940
msgid ""
"This functionality has been removed due to intractable performance and "
"security issues. Any existing usage of ``verify_exists`` should be removed."
msgstr ""

# f253543e09bb42f0a1dd23f3c0956fd1
#: ../../releases/1.4-beta-1.txt:945
msgid "``django.core.files.storage.Storage.open``"
msgstr ""

# cd839bcc9cc74ba2b439097fd28ec1d3
#: ../../releases/1.4-beta-1.txt:947
msgid ""
"The ``open`` method of the base Storage class took an obscure parameter "
"``mixin`` which allowed you to dynamically change the base classes of the "
"returned file object. This has been removed. In the rare case you relied on "
"the ``mixin`` parameter, you can easily achieve the same by overriding the "
"``open`` method, e.g.::"
msgstr ""

# 284e34a391704c9786d72ed4090f8aba
#: ../../releases/1.4-beta-1.txt:971
msgid "YAML deserializer now uses ``yaml.safe_load``"
msgstr ""

# c7526c77a1c34ff08f942bd79bc2eb8a
#: ../../releases/1.4-beta-1.txt:973
msgid ""
"``yaml.load`` is able to construct any Python object, which may trigger "
"arbitrary code execution if you process a YAML document that comes from an "
"untrusted source. This feature isn't necessary for Django's YAML "
"deserializer, whose primary use is to load fixtures consisting of simple "
"objects. Even though fixtures are trusted data, for additional security, the "
"YAML deserializer now uses ``yaml.safe_load``."
msgstr ""

# 1b4ec54370d9426c934aa9973aa94975
#: ../../releases/1.4-beta-1.txt:981
msgid "Features deprecated in 1.4"
msgstr ""

# 4c041da7015740bda68c606af69678ec
#: ../../releases/1.4-beta-1.txt:984
msgid "Old styles of calling ``cache_page`` decorator"
msgstr ""

# 277411517dde4b4c895887fdc10a79b3
#: ../../releases/1.4-beta-1.txt:986
msgid ""
"Some legacy ways of calling :func:`~django.views.decorators.cache."
"cache_page` have been deprecated, please see the docs for the correct way to "
"use this decorator."
msgstr ""

# 9974a02d7ce342f894c33db15500f5b0
#: ../../releases/1.4-beta-1.txt:991
msgid "Support for PostgreSQL versions older than 8.2"
msgstr ""

# 92fdfcd894de4da98657656b48e149cb
#: ../../releases/1.4-beta-1.txt:993
msgid ""
"Django 1.3 dropped support for PostgreSQL versions older than 8.0 and the "
"relevant documents suggested to use a recent version because of performance "
"reasons but more importantly because end of the upstream support periods for "
"releases 8.0 and 8.1 was near (November 2010)."
msgstr ""

# 65b0151a05024a42ac4d1712d1ec160b
#: ../../releases/1.4-beta-1.txt:998
msgid ""
"Django 1.4 takes that policy further and sets 8.2 as the minimum PostgreSQL "
"version it officially supports."
msgstr ""

# 04101c0c5d0340ffa9401bce6b8e07db
#: ../../releases/1.4-beta-1.txt:1002
msgid "Request exceptions are now always logged"
msgstr ""

# 306d899fc65c44fcb1f887caa3bb790a
#: ../../releases/1.4-beta-1.txt:1004
msgid ""
"When :doc:`logging support </topics/logging/>` was added to Django in 1.3, "
"the admin error email support was moved into the :class:`django.utils.log."
"AdminEmailHandler`, attached to the ``'django.request'`` logger. In order to "
"maintain the established behavior of error emails, the ``'django.request'`` "
"logger was called only when :setting:`DEBUG` was ``False``."
msgstr ""

# 2ccd8ff5a12b457da4e7868695329e93
#: ../../releases/1.4-beta-1.txt:1011
msgid ""
"To increase the flexibility of error logging for requests, the ``'django."
"request'`` logger is now called regardless of the value of :setting:`DEBUG`, "
"and the default settings file for new projects now includes a separate "
"filter attached to :class:`django.utils.log.AdminEmailHandler` to prevent "
"admin error emails in ``DEBUG`` mode::"
msgstr ""

# e548c216f1af4f53915ac2c22b817913
#: ../../releases/1.4-beta-1.txt:1030
msgid ""
"If your project was created prior to this change, your :setting:`LOGGING` "
"setting will not include this new filter. In order to maintain backwards-"
"compatibility, Django will detect that your ``'mail_admins'`` handler "
"configuration includes no ``'filters'`` section, and will automatically add "
"this filter for you and issue a pending-deprecation warning. This will "
"become a deprecation warning in Django 1.5, and in Django 1.6 the backwards-"
"compatibility shim will be removed entirely."
msgstr ""

# 9a3fe1a21b8f4257875b6eb178c56737
#: ../../releases/1.4-beta-1.txt:1038
msgid ""
"The existence of any ``'filters'`` key under the ``'mail_admins'`` handler "
"will disable this backward-compatibility shim and deprecation warning."
msgstr ""

# 9a0df2ff598d46f08707ff5ddab32e22
#: ../../releases/1.4-beta-1.txt:1042
msgid "``django.conf.urls.defaults``"
msgstr ""

# 6845d82515ce46f69e15af3999ee99e0
#: ../../releases/1.4-beta-1.txt:1044
msgid ""
"Until Django 1.3 the functions :func:`~django.conf.urls.include`, :func:"
"`~django.conf.urls.patterns` and :func:`~django.conf.urls.url` plus :data:"
"`~django.conf.urls.handler404`, :data:`~django.conf.urls.handler500` were "
"located in a ``django.conf.urls.defaults`` module."
msgstr ""

# 90dd2f638a584d159781140f3d88f52a
#: ../../releases/1.4-beta-1.txt:1049
msgid ""
"Starting with Django 1.4 they are now available in :mod:`django.conf.urls`."
msgstr ""

# cf3df09a92ec4cbe9b526cb5decb237d
#: ../../releases/1.4-beta-1.txt:1052
msgid "``django.contrib.databrowse``"
msgstr ""

# c412e78f4904412b940d8bc8fb67403c
#: ../../releases/1.4-beta-1.txt:1054
msgid ""
"Databrowse has not seen active development for some time, and this does not "
"show any sign of changing. There had been a suggestion for a `GSOC project`_ "
"to integrate the functionality of databrowse into the admin, but no progress "
"was made. While Databrowse has been deprecated, an enhancement of ``django."
"contrib.admin`` providing a similar feature set is still possible."
msgstr ""

# 4b1d1e46f88b4b409cf9039fe5b96b1d
#: ../../releases/1.4-beta-1.txt:1062
msgid ""
"The code that powers Databrowse is licensed under the same terms as Django "
"itself, and so is available to be adopted by an individual or group as a "
"third-party project."
msgstr ""

# 9bc5f3b1ba444cba89aa99bcc736aae5
#: ../../releases/1.4-beta-1.txt:1067
msgid "``django.core.management.setup_environ``"
msgstr ""

# 32ae6dff105343c7a5894799ae9a995a
#: ../../releases/1.4-beta-1.txt:1069
msgid ""
"This function temporarily modified ``sys.path`` in order to make the parent "
"\"project\" directory importable under the old flat :djadmin:`startproject` "
"layout. This function is now deprecated, as its path workarounds are no "
"longer needed with the new ``manage.py`` and default project layout."
msgstr ""

# 6cc4337e795140a2bd9aa1d8b82fce27
#: ../../releases/1.4-beta-1.txt:1074
msgid ""
"This function was never documented or part of the public API, but was widely "
"recommended for use in setting up a \"Django environment\" for a user "
"script. These uses should be replaced by setting the "
"``DJANGO_SETTINGS_MODULE`` environment variable or using :func:`django.conf."
"settings.configure`."
msgstr ""

# 924362da7af44006b5e55f1e1d689a49
#: ../../releases/1.4-beta-1.txt:1080
msgid "``django.core.management.execute_manager``"
msgstr ""

# 2b1452d67ba743d190e95c8286394265
#: ../../releases/1.4-beta-1.txt:1082
msgid ""
"This function was previously used by ``manage.py`` to execute a management "
"command. It is identical to ``django.core.management."
"execute_from_command_line``, except that it first calls ``setup_environ``, "
"which is now deprecated. As such, ``execute_manager`` is also deprecated; "
"``execute_from_command_line`` can be used instead. Neither of these "
"functions is documented as part of the public API, but a deprecation path is "
"needed due to use in existing ``manage.py`` files."
msgstr ""

# 4bcf3c6f801d46fb8b7dbbb50d134cad
#: ../../releases/1.4-beta-1.txt:1091
msgid "``is_safe`` and ``needs_autoescape`` attributes of template filters"
msgstr ""

# ab4fee43460549c7b8ed9fbb38f35b6e
#: ../../releases/1.4-beta-1.txt:1093
msgid ""
"Two flags, ``is_safe`` and ``needs_autoescape``, define how each template "
"filter interacts with Django's auto-escaping behavior. They used to be "
"attributes of the filter function::"
msgstr ""

# 002b1ac4b2484f63a4e1722f6ca84443
#: ../../releases/1.4-beta-1.txt:1102
msgid ""
"However, this technique caused some problems in combination with decorators, "
"especially :func:`@stringfilter <django.template.defaultfilters."
"stringfilter>`. Now, the flags are keyword arguments of :meth:`@register."
"filter <django.template.Library.filter>`::"
msgstr ""

# a6327912b2bc4e7fbce13294001a03a2
#: ../../releases/1.4-beta-1.txt:1111
msgid ""
"See :ref:`filters and auto-escaping <filters-auto-escaping>` for more "
"information."
msgstr ""

# c42024c808b64c3fb59823d19d03b73f
#: ../../releases/1.4-beta-1.txt:1114
msgid "Session cookies now have the ``httponly`` flag by default"
msgstr ""

# e5fea1350e3f49d1baedd9894ae83146
#: ../../releases/1.4-beta-1.txt:1116
msgid ""
"Session cookies now include the ``httponly`` attribute by default to help "
"reduce the impact of potential XSS attacks. As a consequence of this change, "
"session cookie data, including sessionid, is no longer accessible from "
"Javascript in many browsers. For strict backwards compatibility, use "
"``SESSION_COOKIE_HTTPONLY = False`` in your settings file."
msgstr ""

# a5a6c2cfd56741a7a9211b47f010d163
#: ../../releases/1.4-beta-1.txt:1124
msgid "Wildcard expansion of application names in `INSTALLED_APPS`"
msgstr ""

# 6b5c0b1acccc4326b7702396eb409966
#: ../../releases/1.4-beta-1.txt:1126
msgid ""
"Until Django 1.3, :setting:`INSTALLED_APPS` accepted wildcards in "
"application names, like ``django.contrib.*``. The expansion was performed by "
"a filesystem-based implementation of ``from <package> import *``. "
"Unfortunately, `this can't be done reliably`_."
msgstr ""

# 758e516c71c8442aa37595ca2b15456b
#: ../../releases/1.4-beta-1.txt:1131
msgid ""
"This behavior was never documented. Since it is un-pythonic and not "
"obviously useful, it was removed in Django 1.4. If you relied on it, you "
"must edit your settings file to list all your applications explicitly."
msgstr ""

# edad8c8bc53845cf9d93ebaf600e9799
#: ../../releases/1.4-beta-1.txt:1138
msgid "``HttpRequest.raw_post_data`` renamed to ``HttpRequest.body``"
msgstr ""

# 0da46564a1c742e9b80c5fa2f9f7ba21
#: ../../releases/1.4-beta-1.txt:1140
msgid ""
"This attribute was confusingly named ``HttpRequest.raw_post_data``, but it "
"actually provided the body of the HTTP request. It's been renamed to "
"``HttpRequest.body``, and ``HttpRequest.raw_post_data`` has been deprecated."
msgstr ""

# b5577559da824855912e39eacef21ff2
#: ../../releases/1.4-beta-1.txt:1146
msgid "The Django 1.4 roadmap"
msgstr ""

# 2dd316c570064575871a3384a1aaad33
#: ../../releases/1.4-beta-1.txt:1148
msgid ""
"Before the final Django 1.4 release, several other preview/development "
"releases will be made available. The current schedule consists of at least "
"the following:"
msgstr ""

# 71d505b6b2434b07afc0e89727cc39fe
#: ../../releases/1.4-beta-1.txt:1151
msgid ""
"Week of **January 13, 2012**: First Django 1.4 beta release; final feature "
"freeze for Django 1.4."
msgstr ""

# c6c4bd9aca2241cb80acaf7e08584494
#: ../../releases/1.4-beta-1.txt:1154
msgid ""
"Week of **February 27, 2012**: First Django 1.4 release candidate; string "
"freeze for translations."
msgstr ""

# dfda1a7c2adc4e3bb888e1d0b16e45c6
#: ../../releases/1.4-beta-1.txt:1157
msgid "Week of **March 5, 2012**: Django 1.4 final release."
msgstr ""

# 0365cf5d33ca4ba3b885915621dd224a
#: ../../releases/1.4-beta-1.txt:1159
msgid ""
"If necessary, additional alpha, beta or release-candidate packages will be "
"issued prior to the final 1.4 release. Django 1.4 will be released "
"approximately one week after the final release candidate."
msgstr ""

# b799b2ed79f1493fbff240b5ac5fd8c9
#: ../../releases/1.4-beta-1.txt:1164
msgid "What you can do to help"
msgstr ""

# a114b22c19d34ecc9fb8812732247f25
#: ../../releases/1.4-beta-1.txt:1166
msgid ""
"In order to provide a high-quality 1.4 release, we need your help. Although "
"this beta release is, again, *not* intended for production use, you can help "
"the Django team by trying out the beta codebase in a safe test environment "
"and reporting any bugs or issues you encounter. The Django ticket tracker is "
"the central place to search for open issues:"
msgstr ""

# add292de1d7d43acab4d67fb8f54a28f
#: ../../releases/1.4-beta-1.txt:1172
msgid "https://code.djangoproject.com/timeline"
msgstr ""

# 5f98e225b48d43b6a14464b6ac06f237
#: ../../releases/1.4-beta-1.txt:1174
msgid ""
"Please open new tickets if no existing ticket corresponds to a problem "
"you're running into."
msgstr ""

# 4aec7e8c3bce435aa0b50c9fb2ada285
#: ../../releases/1.4-beta-1.txt:1177
msgid ""
"Additionally, discussion of Django development, including progress toward "
"the 1.4 release, takes place daily on the django-developers mailing list:"
msgstr ""

# 6e1d334a1f614828ae49170e96ea32aa
#: ../../releases/1.4-beta-1.txt:1180
msgid "http://groups.google.com/group/django-developers"
msgstr ""

# 46d3301e7a8b47938e5ef8689028937c
#: ../../releases/1.4-beta-1.txt:1182
msgid ""
"... and in the ``#django-dev`` IRC channel on ``irc.freenode.net``. If "
"you're interested in helping out with Django's development, feel free to "
"join the discussions there."
msgstr ""

# 46c044dba4b94b329ca848182888cdae
#: ../../releases/1.4-beta-1.txt:1186
msgid ""
"Django's online documentation also includes pointers on how to contribute to "
"Django:"
msgstr ""

# 950adb85697e4de79501eb29fec84d89
#: ../../releases/1.4-beta-1.txt:1189
msgid ":doc:`How to contribute to Django </internals/contributing/index>`"
msgstr ""

# d9f38409f4784d54a3ac80c396af47dd
#: ../../releases/1.4-beta-1.txt:1191
msgid ""
"Contributions on any level -- developing code, writing documentation or "
"simply triaging tickets and helping to test proposed bugfixes -- are always "
"welcome and appreciated."
msgstr ""

# 8c7aa1c77f324edba32a99dc4e2e4d1b
#: ../../releases/1.4-beta-1.txt:1195
msgid ""
"Several development sprints will also be taking place before the 1.4 "
"release; these will typically be announced in advance on the django-"
"developers mailing list, and anyone who wants to help is welcome to join in."
msgstr ""
