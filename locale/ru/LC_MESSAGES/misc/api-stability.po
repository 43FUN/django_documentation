# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2012.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-02-15 15:13\n"
"PO-Revision-Date: 2012-02-15 15:13\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# 290cfb63ee884ce89efc1195708a75de
#: ../../misc/api-stability.txt:3
msgid "API stability"
msgstr ""

# ed4c4a808716406ab0d6114d6a881304
#: ../../misc/api-stability.txt:5
msgid ""
":doc:`The release of Django 1.0 </releases/1.0>` comes with a promise of API "
"stability and forwards-compatibility. In a nutshell, this means that code "
"you develop against Django 1.0 will continue to work against 1.1 unchanged, "
"and you should need to make only minor changes for any 1.X release."
msgstr ""

# c9aed3d39d054ac1b6539fd537af23ab
#: ../../misc/api-stability.txt:11
msgid "What \"stable\" means"
msgstr ""

# d6e7abd3df614f778afb0f8f8c58e3e9
#: ../../misc/api-stability.txt:13
msgid "In this context, stable means:"
msgstr ""

# b7fee26ad4c04ae9a5bc679356c48dee
#: ../../misc/api-stability.txt:15
msgid ""
"All the public APIs -- everything documented in the linked documents below, "
"and all methods that don't begin with an underscore -- will not be moved or "
"renamed without providing backwards-compatible aliases."
msgstr ""

# 4c975f1aa2b547659e8dec6f752865c5
#: ../../misc/api-stability.txt:19
msgid ""
"If new features are added to these APIs -- which is quite possible -- they "
"will not break or change the meaning of existing methods. In other words, "
"\"stable\" does not (necessarily) mean \"complete.\""
msgstr ""

# 9b2518b4d3594bc8a730b8d1eaace9f9
#: ../../misc/api-stability.txt:23
msgid ""
"If, for some reason, an API declared stable must be removed or replaced, it "
"will be declared deprecated but will remain in the API for at least two "
"minor version releases. Warnings will be issued when the deprecated method "
"is called."
msgstr ""

# 9e28aa7ba2244505acd1f9aba0147dad
#: ../../misc/api-stability.txt:28
msgid ""
"See :ref:`official-releases` for more details on how Django's version "
"numbering scheme works, and how features will be deprecated."
msgstr ""

# 73b61043ec3e46e9a8180b7438189d06
#: ../../misc/api-stability.txt:31
msgid ""
"We'll only break backwards compatibility of these APIs if a bug or security "
"hole makes it completely unavoidable."
msgstr ""

# 1c0827af958c4a519ee0485db7e27888
#: ../../misc/api-stability.txt:35
msgid "Stable APIs"
msgstr ""

# 279a652c8c4547418af9f3e377bfc1f8
#: ../../misc/api-stability.txt:37
msgid ""
"In general, everything covered in the documentation -- with the exception of "
"anything in the :doc:`internals area </internals/index>` is considered "
"stable as of 1.0. This includes these APIs:"
msgstr ""

# df029b40697f414abd66c89be14ec1d0
#: ../../misc/api-stability.txt:41
msgid ":doc:`Authorization </topics/auth>`"
msgstr ""

# 30f0ec29ed8f43a3948a1d10b5bfa782
#: ../../misc/api-stability.txt:43
msgid ":doc:`Caching </topics/cache>`."
msgstr ""

# 73c5de475b244d00aeff25d64ea24a7e
#: ../../misc/api-stability.txt:45
msgid ""
":doc:`Model definition, managers, querying and transactions </topics/db/"
"index>`"
msgstr ""

# 76f82560e0934b38ba5cfeea4e1a01fb
#: ../../misc/api-stability.txt:48
msgid ":doc:`Sending email </topics/email>`."
msgstr ""

# f0f151f1f25a405e9eb6b7f5c1c5fc5a
#: ../../misc/api-stability.txt:50
msgid ":doc:`File handling and storage </topics/files>`"
msgstr ""

# ca57f5c1387e4d3c990aa294625a50c5
#: ../../misc/api-stability.txt:52
msgid ":doc:`Forms </topics/forms/index>`"
msgstr ""

# de6afed5354c4132a657ddaf141f865a
#: ../../misc/api-stability.txt:54
msgid ""
":doc:`HTTP request/response handling </topics/http/index>`, including file "
"uploads, middleware, sessions, URL resolution, view, and shortcut APIs."
msgstr ""

# bd3e6469a4dd4c668a1b4f42257e0732
#: ../../misc/api-stability.txt:57
msgid ":doc:`Generic views </topics/http/generic-views>`."
msgstr ""

# 05ee8c373793443288bd2a2bd104088c
#: ../../misc/api-stability.txt:59
msgid ":doc:`Internationalization </topics/i18n/index>`."
msgstr ""

# b837a3a5c149415ab5928508c1c8d350
#: ../../misc/api-stability.txt:61
msgid ":doc:`Pagination </topics/pagination>`"
msgstr ""

# eea3689236034184b9a53a8756438455
#: ../../misc/api-stability.txt:63
msgid ":doc:`Serialization </topics/serialization>`"
msgstr ""

# a455674787ed49a0bc6ba12ff156f03e
#: ../../misc/api-stability.txt:65
msgid ":doc:`Signals </topics/signals>`"
msgstr ""

# db74e8fd95de47b4a87df2ce3c6bf494
#: ../../misc/api-stability.txt:67
msgid ""
":doc:`Templates </topics/templates>`, including the language, Python-level :"
"doc:`template APIs </ref/templates/index>`, and :doc:`custom template tags "
"and libraries </howto/custom-template-tags>`. We may add new template tags "
"in the future and the names may inadvertently clash with external template "
"tags. Before adding any such tags, we'll ensure that Django raises an error "
"if it tries to load tags with duplicate names."
msgstr ""

# 0681ceb6b8b9430d8d3aec44ae3d65ea
#: ../../misc/api-stability.txt:74
msgid ":doc:`Testing </topics/testing>`"
msgstr ""

# b0931a5ee0264cf18767343d673d615e
#: ../../misc/api-stability.txt:76
msgid ":doc:`django-admin utility </ref/django-admin>`."
msgstr ""

# 0442e96d8664497886ee96b689214327
#: ../../misc/api-stability.txt:78
msgid ":doc:`Built-in middleware </ref/middleware>`"
msgstr ""

# f72d8aa0f50f434cb0b0f5c58971e8e9
#: ../../misc/api-stability.txt:80
msgid ":doc:`Request/response objects </ref/request-response>`."
msgstr ""

# aef6343ce7a946b9bd1498b8fc6a4459
#: ../../misc/api-stability.txt:82
msgid ""
":doc:`Settings </ref/settings>`. Note, though that while the :doc:`list of "
"built-in settings </ref/settings>` can be considered complete we may -- and "
"probably will -- add new settings in future versions. This is one of those "
"places where \"'stable' does not mean 'complete.'\""
msgstr ""

# 7c6bdc7694034cfe8adabcf436db04a8
#: ../../misc/api-stability.txt:87
msgid ""
":doc:`Built-in signals </ref/signals>`. Like settings, we'll probably add "
"new signals in the future, but the existing ones won't break."
msgstr ""

# 6369fa0af65145398373b4a30d2ac912
#: ../../misc/api-stability.txt:90
msgid ":doc:`Unicode handling </ref/unicode>`."
msgstr ""

# b5343b0afb474ee283b6d775775e322c
#: ../../misc/api-stability.txt:92
msgid "Everything covered by the :doc:`HOWTO guides </howto/index>`."
msgstr ""

# 8f4a7f165f1c41e2a4b8e22c38686ae4
#: ../../misc/api-stability.txt:95
msgid "``django.utils``"
msgstr ""

# d0687a538d454284bf6b9dcd507adc39
#: ../../misc/api-stability.txt:97
msgid ""
"Most of the modules in ``django.utils`` are designed for internal use. Only "
"the following parts of :doc:`django.utils </ref/utils>` can be considered "
"stable:"
msgstr ""

# e90db6eb14a04fb9afdba25493e823ac
#: ../../misc/api-stability.txt:100
msgid "``django.utils.cache``"
msgstr ""

# 334223df1f9f44f5bf6e65c33fe82612
#: ../../misc/api-stability.txt:101
msgid ""
"``django.utils.datastructures.SortedDict`` -- only this single class; the "
"rest of the module is for internal use."
msgstr ""

# 1aba2905f4f94d148c2efc3ea9a847fd
#: ../../misc/api-stability.txt:103
msgid "``django.utils.encoding``"
msgstr ""

# 2eeda908a0c84e1a965e363998655205
#: ../../misc/api-stability.txt:104
msgid "``django.utils.feedgenerator``"
msgstr ""

# 5bb94a5faca647fe9533958d42d975ce
#: ../../misc/api-stability.txt:105
msgid "``django.utils.http``"
msgstr ""

# b39c36f8fd8640b7aac42a9dc52d0db4
#: ../../misc/api-stability.txt:106
msgid "``django.utils.safestring``"
msgstr ""

# f798e3ad6f6a4b138ea653fdfe096ef5
#: ../../misc/api-stability.txt:107
msgid "``django.utils.translation``"
msgstr ""

# c61e5f7d66a54d9e8dbb3c0971eebc3d
#: ../../misc/api-stability.txt:108
msgid "``django.utils.tzinfo``"
msgstr ""

# 546d915b90f74cc39df4c65988be24a1
#: ../../misc/api-stability.txt:111
msgid "Exceptions"
msgstr ""

# e7b148517d664e2caf065626562d1412
#: ../../misc/api-stability.txt:113
msgid ""
"There are a few exceptions to this stability and backwards-compatibility "
"promise."
msgstr ""

# f7b5649190b04554ba6d93f31a4dea10
#: ../../misc/api-stability.txt:117
msgid "Security fixes"
msgstr ""

# a2bf5412470f4b229fa0e05640b429fe
#: ../../misc/api-stability.txt:119
msgid ""
"If we become aware of a security problem -- hopefully by someone following "
"our :ref:`security reporting policy <reporting-security-issues>` -- we'll do "
"everything necessary to fix it. This might mean breaking backwards "
"compatibility; security trumps the compatibility guarantee."
msgstr ""

# 1984f520ae424f0eaa032e57c3ccf79d
#: ../../misc/api-stability.txt:124
msgid "Contributed applications (``django.contrib``)"
msgstr ""

# d2dc328d691c4f6ebe31933a66347ecc
#: ../../misc/api-stability.txt:126
msgid ""
"While we'll make every effort to keep these APIs stable -- and have no plans "
"to break any contrib apps -- this is an area that will have more flux "
"between releases. As the Web evolves, Django must evolve with it."
msgstr ""

# dc49f1c0736548b1899f0b3a5916ae33
#: ../../misc/api-stability.txt:130
msgid ""
"However, any changes to contrib apps will come with an important guarantee: "
"we'll make sure it's always possible to use an older version of a contrib "
"app if we need to make changes. Thus, if Django 1.5 ships with a backwards-"
"incompatible ``django.contrib.flatpages``, we'll make sure you can still use "
"the Django 1.4 version alongside Django 1.5. This will continue to allow for "
"easy upgrades."
msgstr ""

# ff16b1dac6d54e5a86e2db4fa89e6206
#: ../../misc/api-stability.txt:136
msgid ""
"Historically, apps in ``django.contrib`` have been more stable than the "
"core, so in practice we probably won't have to ever make this exception. "
"However, it's worth noting if you're building apps that depend on ``django."
"contrib``."
msgstr ""

# 2d11ac895b574719818594324316bd42
#: ../../misc/api-stability.txt:141
msgid "APIs marked as internal"
msgstr ""

# e6ca0aa94cb24b0da0dd672128cb591c
#: ../../misc/api-stability.txt:143
msgid "Certain APIs are explicitly marked as \"internal\" in a couple of ways:"
msgstr ""

# b6d7cd4f0fe443818ddffe6fe45ca236
#: ../../misc/api-stability.txt:145
msgid ""
"Some documentation refers to internals and mentions them as such. If the "
"documentation says that something is internal, we reserve the right to "
"change it."
msgstr ""

# 36e72c91dae84bc6a7eb72d03e94bfb7
#: ../../misc/api-stability.txt:149
msgid ""
"Functions, methods, and other objects prefixed by a leading underscore "
"(``_``). This is the standard Python way of indicating that something is "
"private; if any method starts with a single ``_``, it's an internal API."
msgstr ""

# 4e590fa324ac4bed810163fc936549a1
#: ../../misc/api-stability.txt:156
msgid "Local flavors"
msgstr ""

# da97bb0eb386406b8ee5e96057eb6344
#: ../../misc/api-stability.txt:160
msgid ""
":mod:`django.contrib.localflavor` contains assorted pieces of code that are "
"useful for particular countries or cultures. This data is local in nature, "
"and is subject to change on timelines that will almost never correlate with "
"Django's own release schedules. For example, a common change is to split a "
"province into two new provinces, or to rename an existing province."
msgstr ""

# bbc9c4a36621466494c61341ec018405
#: ../../misc/api-stability.txt:167
msgid ""
"These changes present two competing compatibility issues. Moving forward, "
"displaying the names of deprecated, renamed and dissolved provinces in a "
"selection widget is bad from a user interface perspective. However, "
"maintaining full backwards compatibility requires that we support historical "
"values that may be stored in a database -- including values that may no "
"longer be valid."
msgstr ""

# 569f379da7c243f68e2ec81d91155a96
#: ../../misc/api-stability.txt:174
msgid ""
"Therefore, Django has the following policy with respect to changes in local "
"flavor:"
msgstr ""

# 4b4dfbd2e99a405e82ffc4bb471cd486
#: ../../misc/api-stability.txt:177
msgid ""
"At the time of a Django release, the data and algorithms contained in :mod:"
"`django.contrib.localflavor` will, to the best of our ability, reflect the "
"officially gazetted policies of the appropriate local government authority. "
"If a province has been added, altered, or removed, that change will be "
"reflected in Django's localflavor."
msgstr ""

# 547324d4140e4cd0be739e44bacab07b
#: ../../misc/api-stability.txt:184
msgid ""
"These changes will *not* be backported to the previous stable release. "
"Upgrading a minor version of Django should not require any data migration or "
"audits for UI changes; therefore, if you want to get the latest province "
"list, you will either need to upgrade your Django install, or backport the "
"province list you need."
msgstr ""

# d77809ad96f947a297c8eb1d6b96d9d0
#: ../../misc/api-stability.txt:191
msgid ""
"For one release, the affected localflavor module will raise a "
"``RuntimeWarning`` when it is imported."
msgstr ""

# e5b83d76a38e420484e8a4b66a86cffd
#: ../../misc/api-stability.txt:194
msgid ""
"The change will be announced in the release notes as a backwards "
"incompatible change requiring attention. The change will also be annotated "
"in the documentation for the localflavor module."
msgstr ""

# 39046019084c4e04bbc220905fbdf738
#: ../../misc/api-stability.txt:198
msgid ""
"Where necessary and feasible, a migration script will be provided to aid the "
"migration process."
msgstr ""

# 3c7fa78f1d6b4e14beb6a9952da01896
#: ../../misc/api-stability.txt:201
msgid ""
"For example, Django 1.2 contains an Indonesian localflavor. It has a "
"province list that includes \"Nanggroe Aceh Darussalam (NAD)\" as a "
"province. The Indonesian government has changed the official name of the "
"province to \"Aceh (ACE)\". As a result, Django 1.3 does *not* contain "
"\"Nanggroe Aceh Darussalam (NAD)\" in the province list, but *does* contain "
"\"Aceh (ACE)\"."
msgstr ""
