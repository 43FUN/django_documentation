# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2012.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-02-15 15:13\n"
"PO-Revision-Date: 2012-02-15 15:13\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# 0983d440b1394a53bed93a885f7672e4
#: ../../howto/custom-management-commands.txt:3
msgid "Writing custom django-admin commands"
msgstr ""

# 6791c955d05b4c7dbb62b957184f3762
#: ../../howto/custom-management-commands.txt:5
msgid ""
"Applications can register their own actions with ``manage.py``. For example, "
"you might want to add a ``manage.py`` action for a Django app that you're "
"distributing. In this document, we will be building a custom ``closepoll`` "
"command for the ``polls`` application from the :doc:`tutorial</intro/"
"tutorial01>`."
msgstr ""

# 0c391a54e80e4d8b9229c1dbc88f62f9
#: ../../howto/custom-management-commands.txt:11
msgid ""
"To do this, just add a ``management/commands`` directory to the application. "
"Each Python module in that directory will be auto-discovered and registered "
"as a command that can be executed as an action when you run ``manage.py``::"
msgstr ""

# 05138ea6ffed43c7a0d7eca5a62972c6
#: ../../howto/custom-management-commands.txt:26
msgid ""
"In this example, the ``closepoll`` command will be made available to any "
"project that includes the ``polls`` application in :setting:`INSTALLED_APPS`."
msgstr ""

# dbb69e335e47451daa231036b2adb579
#: ../../howto/custom-management-commands.txt:29
msgid ""
"The ``closepoll.py`` module has only one requirement -- it must define a "
"class ``Command`` that extends :class:`BaseCommand` or one of its :ref:"
"`subclasses<ref-basecommand-subclasses>`."
msgstr ""

# 64db5db63e424e8fbcb582fefbc8f16f
#: ../../howto/custom-management-commands.txt:35
msgid ""
"Custom management commands are especially useful for running standalone "
"scripts or for scripts that are periodically executed from the UNIX crontab "
"or from Windows scheduled tasks control panel."
msgstr ""

# eb6f384936ac4351a6cee5a10bd74f49
#: ../../howto/custom-management-commands.txt:39
msgid ""
"To implement the command, edit ``polls/management/commands/closepoll.py`` to "
"look like this:"
msgstr ""

# 19d943180d14410187e43804691867d1
#: ../../howto/custom-management-commands.txt:64
msgid ""
"When you are using management commands and wish to provide console output, "
"you should write to ``self.stdout`` and ``self.stderr``, instead of printing "
"to ``stdout`` and ``stderr`` directly. By using these proxies, it becomes "
"much easier to test your custom command."
msgstr ""

# c1d36ecf73894ad6bd4af45349d3cdde
#: ../../howto/custom-management-commands.txt:70
msgid ""
"The new custom command can be called using ``python manage.py closepoll "
"<poll_id>``."
msgstr ""

# 54e9ff97f3bd4f06ac997e02185eaf8a
#: ../../howto/custom-management-commands.txt:73
msgid ""
"The ``handle()`` method takes zero or more ``poll_ids`` and sets ``poll."
"opened`` to ``False`` for each one. If the user referenced any nonexistent "
"polls, a :class:`CommandError` is raised. The ``poll.opened`` attribute does "
"not exist in the :doc:`tutorial</intro/tutorial01>` and was added to ``polls."
"models.Poll`` for this example."
msgstr ""

# ba6ed58303b6476eb2a827224fbabd16
#: ../../howto/custom-management-commands.txt:79
msgid ""
"The same ``closepoll`` could be easily modified to delete a given poll "
"instead of closing it by accepting additional command line options. These "
"custom options must be added to :attr:`~BaseCommand.option_list` like this:"
msgstr ""

# 6fc5e8f6a7ce418294fc60a479adba6a
#: ../../howto/custom-management-commands.txt:97
msgid ""
"In addition to being able to add custom command line options, all :doc:"
"`management commands</ref/django-admin>` can accept some default options "
"such as :djadminopt:`--verbosity` and :djadminopt:`--traceback`."
msgstr ""

# 66b81a58af074d1486cb18c50aec9577
#: ../../howto/custom-management-commands.txt:103
msgid ""
"The :meth:`BaseCommand.execute` method sets the hardcoded ``en-us`` locale "
"because the commands shipped with Django perform several tasks (for example, "
"user-facing content rendering and database population) that require a system-"
"neutral string language (for which we use ``en-us``)."
msgstr ""

# 7c2e93ce12ef4043a06b4dc38f1ba617
#: ../../howto/custom-management-commands.txt:108
msgid ""
"If your custom management command uses another locale, you should manually "
"activate and deactivate it in your :meth:`~BaseCommand.handle` or :meth:"
"`~NoArgsCommand.handle_noargs` method using the functions provided by the "
"I18N support code:"
msgstr ""

# 696bc24bb4e946b1ba8461760a4cee60
#: ../../howto/custom-management-commands.txt:138
msgid ""
"Take into account though, that system management commands typically have to "
"be very careful about running in non-uniform locales, so:"
msgstr ""

# e92eec0c48664551b5e793c5dabf6657
#: ../../howto/custom-management-commands.txt:141
msgid ""
"Make sure the :setting:`USE_I18N` setting is always ``True`` when running "
"the command (this is one good example of the potential problems stemming "
"from a dynamic runtime environment that Django commands avoid offhand by "
"always using a fixed locale)."
msgstr ""

# 44681e7239f74b68b21103741b31534e
#: ../../howto/custom-management-commands.txt:146
msgid ""
"Review the code of your command and the code it calls for behavioral "
"differences when locales are changed and evaluate its impact on predictable "
"behavior of your command."
msgstr ""

# e717915f10624e5b963245961def8e03
#: ../../howto/custom-management-commands.txt:151
msgid "Command objects"
msgstr ""

# 7456685d67a84ffebec34c7d138d08e8
#: ../../howto/custom-management-commands.txt:155
msgid "The base class from which all management commands ultimately derive."
msgstr ""

# 52328b6bd83049d193d764f2da4622c1
#: ../../howto/custom-management-commands.txt:157
msgid ""
"Use this class if you want access to all of the mechanisms which parse the "
"command-line arguments and work out what code to call in response; if you "
"don't need to change any of that behavior, consider using one of its :ref:"
"`subclasses<ref-basecommand-subclasses>`."
msgstr ""

# 6866c4ee26794dba9abfd62292159f6d
#: ../../howto/custom-management-commands.txt:162
msgid ""
"Subclassing the :class:`BaseCommand` class requires that you implement the :"
"meth:`~BaseCommand.handle` method."
msgstr ""

# 2c9814dc55e444ff8fd18b61b86554ba
#: ../../howto/custom-management-commands.txt:166
msgid "Attributes"
msgstr ""

# a5b46460850f43d8b1bc4be593d6835a
#: ../../howto/custom-management-commands.txt:168
msgid ""
"All attributes can be set in your derived class and can be used in :class:"
"`BaseCommand`'s :ref:`subclasses<ref-basecommand-subclasses>`."
msgstr ""

# 9d51e25419bd4535a0a1bc550f9323e4
#: ../../howto/custom-management-commands.txt:173
msgid ""
"A string listing the arguments accepted by the command, suitable for use in "
"help messages; e.g., a command which takes a list of application names might "
"set this to '<appname appname ...>'."
msgstr ""

# 3e81f138635a43f188cfb78afb6d2079
#: ../../howto/custom-management-commands.txt:180
msgid ""
"A boolean indicating whether the command needs to be able to import Django "
"settings; if ``True``, ``execute()`` will verify that this is possible "
"before proceeding. Default value is ``True``."
msgstr ""

# b0e01d6ea6df4519ad9410a73be1698c
#: ../../howto/custom-management-commands.txt:187
msgid ""
"A short description of the command, which will be printed in the help "
"message when the user runs the command ``python manage.py help <command>``."
msgstr ""

# cc413fae8aa747d2b80bd4684789ff5c
#: ../../howto/custom-management-commands.txt:193
msgid ""
"This is the list of ``optparse`` options which will be fed into the "
"command's ``OptionParser`` for parsing arguments."
msgstr ""

# 1524fecbd47442a087678cea0c526b04
#: ../../howto/custom-management-commands.txt:198
msgid ""
"A boolean indicating whether the command outputs SQL statements; if "
"``True``, the output will automatically be wrapped with ``BEGIN;`` and "
"``COMMIT;``. Default value is ``False``."
msgstr ""

# 73af6abaf0b4483bac40db144adcef78
#: ../../howto/custom-management-commands.txt:205
msgid ""
"A boolean; if ``True``, validation of installed models will be performed "
"prior to executing the command. Default value is ``True``. To validate an "
"individual application's models rather than all applications' models, call :"
"meth:`~BaseCommand.validate` from :meth:`~BaseCommand.handle`."
msgstr ""

# f2a5fafb4a2740bab802a84356a24551
#: ../../howto/custom-management-commands.txt:212
msgid "Methods"
msgstr ""

# 39732a811fa24f768153bc95b742d339
#: ../../howto/custom-management-commands.txt:214
msgid ""
":class:`BaseCommand` has a few methods that can be overridden but only the :"
"meth:`~BaseCommand.handle` method must be implemented."
msgstr ""

# a22e20e11359420caaa5b493e3ed6f57
#: ../../howto/custom-management-commands.txt:219
msgid ""
"If you implement ``__init__`` in your subclass of :class:`BaseCommand`, you "
"must call :class:`BaseCommand`'s ``__init__``."
msgstr ""

# 1e477a47326f4b0ba5bcadee6d393390
#: ../../howto/custom-management-commands.txt:231
msgid ""
"Return the Django version, which should be correct for all built-in Django "
"commands. User-supplied commands can override this method to return their "
"own version."
msgstr ""

# a0c1cb06252244e687554253bfcbad30
#: ../../howto/custom-management-commands.txt:237
msgid ""
"Try to execute this command, performing model validation if needed (as "
"controlled by the attribute :attr:`requires_model_validation`). If the "
"command raises a :class:`CommandError`, intercept it and print it sensibly "
"to stderr."
msgstr ""

# 6cafc720c3204ca2bdb0c74b69ed880c
#: ../../howto/custom-management-commands.txt:245
msgid "The actual logic of the command. Subclasses must implement this method."
msgstr ""

# a5fcfdb5b825422d958d330623f9d06b
#: ../../howto/custom-management-commands.txt:250
msgid "BaseCommand subclasses"
msgstr ""

# a5a93970fe6645e38c6f903c50be6808
#: ../../howto/custom-management-commands.txt:254
msgid ""
"A management command which takes one or more installed application names as "
"arguments, and does something with each of them."
msgstr ""

# cec3669bfd424bedab61a9cd1f072d78
#: ../../howto/custom-management-commands.txt:257
msgid ""
"Rather than implementing :meth:`~BaseCommand.handle`, subclasses must "
"implement :meth:`~AppCommand.handle_app`, which will be called once for each "
"application."
msgstr ""

# f1f968700b19432595df801d766d5a80
#: ../../howto/custom-management-commands.txt:262
msgid ""
"Perform the command's actions for ``app``, which will be the Python module "
"corresponding to an application name given on the command line."
msgstr ""

# 6575381cb7284d87a99576fef840e84c
#: ../../howto/custom-management-commands.txt:268
msgid ""
"A management command which takes one or more arbitrary arguments (labels) on "
"the command line, and does something with each of them."
msgstr ""

# 8ac4171cb96e4277a675d3a78ffd9425
#: ../../howto/custom-management-commands.txt:272
msgid ""
"Rather than implementing :meth:`~BaseCommand.handle`, subclasses must "
"implement :meth:`~LabelCommand.handle_label`, which will be called once for "
"each label."
msgstr ""

# 21e5b5675c6e4dc4b7bfb9640b3f79f0
#: ../../howto/custom-management-commands.txt:277
msgid ""
"Perform the command's actions for ``label``, which will be the string as "
"given on the command line."
msgstr ""

# 262b1421222347ee9662ac420fde0020
#: ../../howto/custom-management-commands.txt:282
msgid "A command which takes no arguments on the command line."
msgstr ""

# 0a1267268f164d3889e49be148669c21
#: ../../howto/custom-management-commands.txt:284
msgid ""
"Rather than implementing :meth:`~BaseCommand.handle`, subclasses must "
"implement :meth:`~NoArgsCommand.handle_noargs`; :meth:`~BaseCommand.handle` "
"itself is overridden to ensure no arguments are passed to the command."
msgstr ""

# 9837631d66ab4ad2bcc0e84201816c2f
#: ../../howto/custom-management-commands.txt:290
msgid "Perform this command's actions"
msgstr ""

# 8a5c315339c7440596701e7222293db9
#: ../../howto/custom-management-commands.txt:295
msgid "Command exceptions"
msgstr ""

# b8b53c2106c34ea08ab82e2d9f33f1e5
#: ../../howto/custom-management-commands.txt:299
msgid ""
"Exception class indicating a problem while executing a management command."
msgstr ""

# 84b6b35a08a046849e0dccc5fade8881
#: ../../howto/custom-management-commands.txt:302
msgid ""
"If this exception is raised during the execution of a management command, it "
"will be caught and turned into a nicely-printed error message to the "
"appropriate output stream (i.e., stderr); as a result, raising this "
"exception (with a sensible description of the error) is the preferred way to "
"indicate that something has gone wrong in the execution of a command."
msgstr ""
