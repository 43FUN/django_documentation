# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2012.
# Tyshchenko Viktor <tyvik8@gmail.com>, 2013, 2014.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-07-30 13:35+0300\n"
"PO-Revision-Date: 2014-07-14 12:36+0300\n"
"Last-Translator: Tyshchenko Viktor <tyvik8@gmail.com>\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"
"X-Generator: Gtranslator 2.91.6\n"

# 0983d440b1394a53bed93a885f7672e4
#: ../../howto/custom-management-commands.txt:3
msgid "Writing custom django-admin commands"
msgstr "Реализация собственных команд django-admin"

# 6791c955d05b4c7dbb62b957184f3762
#: ../../howto/custom-management-commands.txt:7
msgid ""
"Applications can register their own actions with ``manage.py``. For example, "
"you might want to add a ``manage.py`` action for a Django app that you're "
"distributing. In this document, we will be building a custom ``closepoll`` "
"command for the ``polls`` application from the :doc:`tutorial</intro/"
"tutorial01>`."
msgstr ""
"Проект может быть расширен собственными командами для ``manage.py``. "
"Например, вы можете добавить действие для развёртывания. Здесь же мы будем "
"реализовывать действие ``closepoll`` для приложения ``polls`` из :doc:"
"`tutorial</intro/tutorial01>`."

# a59adcd440c84eeeb57639ac437eae8e
#: ../../howto/custom-management-commands.txt:13
msgid ""
"To do this, just add a ``management/commands`` directory to the application. "
"Django will register a ``manage.py`` command for each Python module in that "
"directory whose name doesn't begin with an underscore. For example::"
msgstr ""
"Для этого добавим в приложение каталог ``management/commands``. Для каждого "
"модуля в этом каталоге, который не начинается с подчёркивания, Django "
"создаст соответствующую команду. Например::"

# 9f2c5cd8ea724f1da1bbc47edeacddd5
#: ../../howto/custom-management-commands.txt:29
msgid ""
"On Python 2, be sure to include ``__init__.py`` files in both the "
"``management`` and ``management/commands`` directories as done above or your "
"command will not be detected."
msgstr ""

# 05138ea6ffed43c7a0d7eca5a62972c6
#: ../../howto/custom-management-commands.txt:33
msgid ""
"In this example, the ``closepoll`` command will be made available to any "
"project that includes the ``polls`` application in :setting:`INSTALLED_APPS`."
msgstr ""
"В этом примере команда ``closepoll`` будет доступна для любого проекта, "
"который импортирует приложение ``polls`` в :setting:`INSTALED_APPS`."

# 4a7f62e2793d4670a9acd4a684ae8da9
#: ../../howto/custom-management-commands.txt:36
msgid ""
"The ``_private.py`` module will not be available as a management command."
msgstr "Модуль ``_private.py`` не доступен как команда для ``manage.py``."

# dbb69e335e47451daa231036b2adb579
#: ../../howto/custom-management-commands.txt:38
msgid ""
"The ``closepoll.py`` module has only one requirement -- it must define a "
"class ``Command`` that extends :class:`BaseCommand` or one of its :ref:"
"`subclasses<ref-basecommand-subclasses>`."
msgstr ""
"Для модуля ``closepoll.py`` должно быть соблюдено лишь одно требование - "
"наличие в нём класса ``Command``, который унаследован от :class:"
"`BaseCommand` или его :ref:`потомков<ref-basecommand-subclasses>`."

# 7282b27a505e436886fc7b065c652c63
#: ../../howto/custom-management-commands.txt:0
msgid "Standalone scripts"
msgstr ""

# 64db5db63e424e8fbcb582fefbc8f16f
#: ../../howto/custom-management-commands.txt:44
msgid ""
"Custom management commands are especially useful for running standalone "
"scripts or for scripts that are periodically executed from the UNIX crontab "
"or from Windows scheduled tasks control panel."
msgstr ""
"Собственные команды могут быть полезны для реализации отдельных скриптов, "
"например, для планировщика Windows или crontab."

# eb6f384936ac4351a6cee5a10bd74f49
#: ../../howto/custom-management-commands.txt:48
msgid ""
"To implement the command, edit ``polls/management/commands/closepoll.py`` to "
"look like this:"
msgstr ""
"Для реализации команды отредактируйте ``polls/management/commands/closepoll."
"py`` следующим образом:"

# bdd0853ba59a4f39a8a5953c176baa72
#: ../../howto/custom-management-commands.txt:75
msgid ""
"When you are using management commands and wish to provide console output, "
"you should write to ``self.stdout`` and ``self.stderr``, instead of printing "
"to ``stdout`` and ``stderr`` directly. By using these proxies, it becomes "
"much easier to test your custom command. Note also that you don't need to "
"end messages with a newline character, it will be added automatically, "
"unless you specify the ``ending`` parameter::"
msgstr ""
"При реализации команды вы должны использовать ``self.stdout`` и ``self."
"stderr`` вместо ``stdout`` и ``stderr``. Использование такого "
"перенаправления может помочь при тестировании скрипта. Кстати, стоит "
"помнить, что символ перевода строки ставится по умолчанию, если вы не "
"указали другой в параметре ``ending``::"

# c1d36ecf73894ad6bd4af45349d3cdde
#: ../../howto/custom-management-commands.txt:85
msgid ""
"The new custom command can be called using ``python manage.py closepoll "
"<poll_id>``."
msgstr ""
"Новая команда может быть запущена следующим образом: ``python manage.py "
"closepoll <poll_id>``."

# 54e9ff97f3bd4f06ac997e02185eaf8a
#: ../../howto/custom-management-commands.txt:88
msgid ""
"The ``handle()`` method takes zero or more ``poll_ids`` and sets ``poll."
"opened`` to ``False`` for each one. If the user referenced any nonexistent "
"polls, a :class:`CommandError` is raised. The ``poll.opened`` attribute does "
"not exist in the :doc:`tutorial</intro/tutorial01>` and was added to ``polls."
"models.Poll`` for this example."
msgstr ""
"Метод ``handle()`` принимает 0 или более ``poll_ids`` и устанавливает "
"каждому ``poll.opened`` в ``False``. Если пользователь запросит "
"несуществующий опрос, то возникнет исключение :class:`CommandError`. Атрибут "
"``poll.opened`` не существует в :doc:`tutorial</intro/tutorial01>` и "
"добавлен в ``polls.models.Poll`` в этом примере."

# ba6ed58303b6476eb2a827224fbabd16
#: ../../howto/custom-management-commands.txt:94
msgid ""
"The same ``closepoll`` could be easily modified to delete a given poll "
"instead of closing it by accepting additional command line options. These "
"custom options must be added to :attr:`~BaseCommand.option_list` like this:"
msgstr ""
"Если же вместо закрытия опроса нам понадобиться удалить какой-либо из них, "
"то это можно сделать с помощью списка параметров :attr:`~BaseCommand."
"option_list`, например, так:"

# a5c526026f59484abbe436d695c712b3
#: ../../howto/custom-management-commands.txt:117
msgid ""
"The option (``delete`` in our example) is available in the options dict "
"parameter of the handle method. See the :py:mod:`optparse` Python "
"documentation for more about ``make_option`` usage."
msgstr ""
"Параметр (``delete`` в нашем случае) доступен в списке параметров метода "
"``handle()``. Подробнее можно посмотреть в документации по :py:mod:"
"`optparse`, где говорится про использование ``make_option``."

# 6fc5e8f6a7ce418294fc60a479adba6a
#: ../../howto/custom-management-commands.txt:121
msgid ""
"In addition to being able to add custom command line options, all :doc:"
"`management commands</ref/django-admin>` can accept some default options "
"such as :djadminopt:`--verbosity` and :djadminopt:`--traceback`."
msgstr ""
"Помимо возможности принимать пользовательские опции, все :doc:`стандартные "
"команды</ref/django-admin>` принимают также опции по умолчанию, такие как :"
"djadminopt:`--verbosity` и :djadminopt:`--traceback`."

# 4c9e5ee77cea49dcb316ed78c97955d0
#: ../../howto/custom-management-commands.txt:128
msgid "Management commands and locales"
msgstr "Команды и локализация"

# 8546e31f4db940879cc0e0d52127b9bf
#: ../../howto/custom-management-commands.txt:130
msgid ""
"By default, the :meth:`BaseCommand.execute` method sets the hardcoded 'en-"
"us' locale because some commands shipped with Django perform several tasks "
"(for example, user-facing content rendering and database population) that "
"require a system-neutral string language (for which we use 'en-us')."
msgstr ""
"По умолчанию :meth:`BaseCommand.execute` жёстко задаёт локаль как ``en-us``, "
"потому что встроенные команды, которые выполняют различные задачи(например, "
"наполнение базы данных, генерация контента), требуют нейтральной кодировки "
"(мы используем ``en-us``)."

# a9777c1463df46cab19a34b7f1904ac2
#: ../../howto/custom-management-commands.txt:135
msgid ""
"If, for some reason, your custom management command needs to use a fixed "
"locale different from 'en-us', you should manually activate and deactivate "
"it in your :meth:`~BaseCommand.handle` or :meth:`~NoArgsCommand."
"handle_noargs` method using the functions provided by the I18N support code:"
msgstr ""
"Если пользовательская команда требует другой локали, то вы можете вручную "
"активировать её в :meth:`~BaseCommand.handle` или :meth:`~NoArgsCommand."
"handle_noargs`, используя функции по работе с интернационализацией (I18N):"

# c0be229f57c942cdb6761ac939d018da
#: ../../howto/custom-management-commands.txt:164
msgid ""
"Another need might be that your command simply should use the locale set in "
"settings and Django should be kept from forcing it to 'en-us'. You can "
"achieve it by using the :data:`BaseCommand.leave_locale_alone` option."
msgstr ""
"В некоторых случаях необходимо использовать локаль с настроек и запретить "
"Django устанавливать 'en-us'. Это можно сделать, установив параметр :data:"
"`BaseCommand.leave_locale_alone`."

# a4aad0f5b4324ccfa5bb482314154b9c
#: ../../howto/custom-management-commands.txt:168
msgid ""
"When working on the scenarios described above though, take into account that "
"system management commands typically have to be very careful about running "
"in non-uniform locales, so you might need to:"
msgstr "При использовании нестандартной локали будьте осторожны:"

# cf1213560947437f9fda192a6b10adde
#: ../../howto/custom-management-commands.txt:172
msgid ""
"Make sure the :setting:`USE_I18N` setting is always ``True`` when running "
"the command (this is a good example of the potential problems stemming from "
"a dynamic runtime environment that Django commands avoid offhand by always "
"using a fixed locale)."
msgstr ""
"Убедитесь, что параметр :setting:`USE_I18N` установлен в ``True``, когда "
"команда запускается (это очень хороший пример потенциальных ошибок при "
"использовании динамического окружения, поэтому лучше использовать "
"фиксированные настройки)."

# 44681e7239f74b68b21103741b31534e
#: ../../howto/custom-management-commands.txt:177
msgid ""
"Review the code of your command and the code it calls for behavioral "
"differences when locales are changed and evaluate its impact on predictable "
"behavior of your command."
msgstr "Убедитесь в работоспособности команды при разных локалях."

# e717915f10624e5b963245961def8e03
#: ../../howto/custom-management-commands.txt:182
msgid "Command objects"
msgstr "Объект команды"

# 7456685d67a84ffebec34c7d138d08e8
#: ../../howto/custom-management-commands.txt:186
msgid "The base class from which all management commands ultimately derive."
msgstr "Базовый класс для всех команд."

# 52328b6bd83049d193d764f2da4622c1
#: ../../howto/custom-management-commands.txt:188
msgid ""
"Use this class if you want access to all of the mechanisms which parse the "
"command-line arguments and work out what code to call in response; if you "
"don't need to change any of that behavior, consider using one of its :ref:"
"`subclasses<ref-basecommand-subclasses>`."
msgstr ""
"Используйте этот класс, если хотите добраться до всех механизмов, которые "
"занимаются разбором аргументов командной строки и возвратом значения. Если "
"вам не нужно вносить изменения в поведение, используйте один из его :ref:"
"`подклассов<ref-basecommand-subclasses>`."

# 6866c4ee26794dba9abfd62292159f6d
#: ../../howto/custom-management-commands.txt:193
msgid ""
"Subclassing the :class:`BaseCommand` class requires that you implement the :"
"meth:`~BaseCommand.handle` method."
msgstr ""
"Наследование от :class:`BaseCommand` подразумевает, что будет реализован "
"метод :meth:`~BaseCommand.handle`."

# 2c9814dc55e444ff8fd18b61b86554ba
#: ../../howto/custom-management-commands.txt:197
msgid "Attributes"
msgstr "Атрибуты"

# a5b46460850f43d8b1bc4be593d6835a
#: ../../howto/custom-management-commands.txt:199
#, fuzzy
msgid ""
"All attributes can be set in your derived class and can be used in :class:"
"`BaseCommand`’s :ref:`subclasses<ref-basecommand-subclasses>`."
msgstr ""
"Все перечисленные атрибуты могут использоваться в производных от :class:"
"`BaseCommand` :ref:`классах<ref-basecommand-subclasses>`."

# 9d51e25419bd4535a0a1bc550f9323e4
#: ../../howto/custom-management-commands.txt:204
#, fuzzy
msgid ""
"A string listing the arguments accepted by the command, suitable for use in "
"help messages; e.g., a command which takes a list of application names might "
"set this to '<app_label app_label ...>'."
msgstr ""
"Строка со списком аргументов, которые принимает команда. Может "
"использоваться в справочных сообщениях, например, команда, которая принимает "
"список имён приложений может установить значение '<appname appname ...>'."

# 3e81f138635a43f188cfb78afb6d2079
#: ../../howto/custom-management-commands.txt:211
msgid ""
"A boolean indicating whether the command needs to be able to import Django "
"settings; if ``True``, ``execute()`` will verify that this is possible "
"before proceeding. Default value is ``True``."
msgstr ""
"Булево значение, которое определяет нужно ли команде импортировать настройки "
"Django. Если установлено в ``True``, то метод ``execute()`` проверит "
"возможность импорта. Значение по умолчанию - ``True``."

# b0e01d6ea6df4519ad9410a73be1698c
#: ../../howto/custom-management-commands.txt:218
msgid ""
"A short description of the command, which will be printed in the help "
"message when the user runs the command ``python manage.py help <command>``."
msgstr ""
"Краткое описание команды, которое будет выведено в справочном сообщении при "
"выполнении ``python manage.py help <command>``."

# cc413fae8aa747d2b80bd4684789ff5c
#: ../../howto/custom-management-commands.txt:224
msgid ""
"This is the list of ``optparse`` options which will be fed into the "
"command's ``OptionParser`` for parsing arguments."
msgstr ""
"Список опций ``optparse``, которые будут обрабатываться в ``OptionParser`` "
"для получения аргументов."

# 1524fecbd47442a087678cea0c526b04
#: ../../howto/custom-management-commands.txt:229
msgid ""
"A boolean indicating whether the command outputs SQL statements; if "
"``True``, the output will automatically be wrapped with ``BEGIN;`` and "
"``COMMIT;``. Default value is ``False``."
msgstr ""
"Булево значение, которое определяет будет ли команда выводить SQL выражения. "
"Если установлено в ``True``, то весь вывод будет автоматически заключён "
"между ``BEGIN;`` и ``COMMIT;``. Значение по умолчанию - ``False``."

# e6058c9b6a4d472198347a467da67bb3
#: ../../howto/custom-management-commands.txt:238
msgid ""
"A boolean; if ``True``, the entire Django project will be checked for "
"potential problems prior to executing the command. If "
"``requires_system_checks`` is missing, the value of "
"``requires_model_validation`` is used. If the latter flag is missing as "
"well, the default value (``True``) is used. Defining both "
"``requires_system_checks`` and ``requires_model_validation`` will result in "
"an error."
msgstr ""

# 00ac9ee472564e1fbb46918aaf18e116
#: ../../howto/custom-management-commands.txt:248
msgid "Replaced by ``requires_system_checks``"
msgstr ""

# 73af6abaf0b4483bac40db144adcef78
#: ../../howto/custom-management-commands.txt:251
msgid ""
"A boolean; if ``True``, validation of installed models will be performed "
"prior to executing the command. Default value is ``True``. To validate an "
"individual application's models rather than all applications' models, call :"
"meth:`~BaseCommand.validate` from :meth:`~BaseCommand.handle`."
msgstr ""
"Булево значение; если установлено в ``True``, то проверка установленных "
"моделей будет выполнена до выполнения команды. Значение по умолчанию "
"``True``. Для валидации определённой модели приложения вместо всех "
"вызывайте :meth:`~BaseCommand.validate` из :meth:`BaseCommand.handle`."

# b9f584ab4f344e31810439d5f8647f31
#: ../../howto/custom-management-commands.txt:259
msgid ""
"A boolean indicating whether the locale set in settings should be preserved "
"during the execution of the command instead of being forcibly set to 'en-us'."
msgstr ""
"Булево значение; указывает использовать ли локаль с настроек проекта, или "
"'en-us'."

# f71b28b5cc7143f2a04f1fb3f8a83b7d
#: ../../howto/custom-management-commands.txt:262
msgid "Default value is ``False``."
msgstr "По умолчанию ``False``."

# 71dba1f585274ccca81c793280613762
#: ../../howto/custom-management-commands.txt:264
msgid ""
"Make sure you know what you are doing if you decide to change the value of "
"this option in your custom command if it creates database content that is "
"locale-sensitive and such content shouldn't contain any translations (like "
"it happens e.g. with django.contrib.auth permissions) as making the locale "
"differ from the de facto default 'en-us' might cause unintended effects. See "
"the `Management commands and locales`_ section above for further details."
msgstr ""
"Вы должны быть уверены в своих действиях при изменении этого параметра, если "
"ваша команда меняет данные в базе данных, которые не должны зависеть от "
"локали и содержать переведенный текст (например, при создании прав доступа в "
"приложении django.contrib.auth). Указание локали, отличную от стандартной "
"'en-us', может привести к неожиданным эффектам. Смотрите :ref:`Команды и "
"локализация <management-commands-and-locales>`."

# d88fc6bc242e49c2ba995a0da381f1d0
#: ../../howto/custom-management-commands.txt:271
msgid ""
"This option can't be ``False`` when the :data:`~BaseCommand."
"can_import_settings` option is set to ``False`` too because attempting to "
"set the locale needs access to settings. This condition will generate a :"
"class:`CommandError`."
msgstr ""
"Этот параметр не может быть ``False``, если :data:`~BaseCommand."
"can_import_settings` равна ``False`` т.к. для установки локаль необходим "
"доступ к настройкам. В таком случае будет вызвано исключение :class:"
"`CommandError`."

# 75c70348b1bc43ceaebc223f3748d512
#: ../../howto/custom-management-commands.txt:278
msgid "The ``leave_locale_alone`` option was added in Django 1.6."
msgstr ""

# f2a5fafb4a2740bab802a84356a24551
#: ../../howto/custom-management-commands.txt:281
msgid "Methods"
msgstr "Методы"

# 39732a811fa24f768153bc95b742d339
#: ../../howto/custom-management-commands.txt:283
msgid ""
":class:`BaseCommand` has a few methods that can be overridden but only the :"
"meth:`~BaseCommand.handle` method must be implemented."
msgstr ""
":class:`BaseCommand` содержит несколько методов, которые могут быть "
"переопределены, однако для минимальной работы команды требуется только "
"реализация метода :meth:`~BaseCommand.handle`."

# e9073c78c1b74b8281af50533e2f3526
#: ../../howto/custom-management-commands.txt:0
msgid "Implementing a constructor in a subclass"
msgstr ""

# a22e20e11359420caaa5b493e3ed6f57
#: ../../howto/custom-management-commands.txt:288
#, fuzzy
msgid ""
"If you implement ``__init__`` in your subclass of :class:`BaseCommand`, you "
"must call :class:`BaseCommand`’s ``__init__``."
msgstr ""
"Если вы переопределяете ``__init__``, убедитесь, что вызываете в нём "
"``__init__`` базового класса :class:`BaseCommand`."

# 1e477a47326f4b0ba5bcadee6d393390
#: ../../howto/custom-management-commands.txt:300
msgid ""
"Return the Django version, which should be correct for all built-in Django "
"commands. User-supplied commands can override this method to return their "
"own version."
msgstr ""
"Возвращает версию Django, которая необходима для работы команды. "
"Пользовательские команды могут переопределить этот метод и вернуть свою "
"версию."

# a0c1cb06252244e687554253bfcbad30
#: ../../howto/custom-management-commands.txt:306
msgid ""
"Try to execute this command, performing model validation if needed (as "
"controlled by the attribute :attr:`requires_model_validation`). If the "
"command raises a :class:`CommandError`, intercept it and print it sensibly "
"to stderr."
msgstr ""
"Попытается выполнить команду, выполнив валидацию моделей (регулируется "
"атрибутом :attr:`requires_model_validation` ). Если команда генерирует :"
"class:`CommandError`, будет разумно перехватить его и распечатать в stderr."

# 4c9e5ee77cea49dcb316ed78c97955d0
#: ../../howto/custom-management-commands.txt:0
#, fuzzy
msgid "Calling a management command in your code"
msgstr "Команды и локализация"

# 9c52e526aaa64a6b91a45cf08ead992f
#: ../../howto/custom-management-commands.txt:314
msgid ""
"``execute()`` should not be called directly from your code to execute a "
"command. Use :ref:`call_command <call-command>` instead."
msgstr ""
"Не вызывайте ``execute()`` непосредственно из кода команды. Используйте "
"вместо этого :ref:`call_command <call-command>`."

# 6cafc720c3204ca2bdb0c74b69ed880c
#: ../../howto/custom-management-commands.txt:319
msgid "The actual logic of the command. Subclasses must implement this method."
msgstr ""
"Собственно, логика команды. Ваш подкласс обязательно должен реализовывать "
"этот метод."

# 2aa0dfa9f85c4ccd993d772975da2754
#: ../../howto/custom-management-commands.txt:325
msgid ""
"Uses the system check framework to inspect the entire Django project for "
"potential problems. Serious problems are raised as a :class:`CommandError`; "
"warnings are output to stderr; minor notifications are output to stdout."
msgstr ""

# 529f82b40bd840c4be97559671242edc
#: ../../howto/custom-management-commands.txt:329
msgid ""
"If ``app_configs`` and ``tags`` are both ``None``, all system checks are "
"performed. ``tags`` can be a list of check tags, like ``compatibility`` or "
"``models``."
msgstr ""

# 61de98c4f14b4c5a98bd6f0c47f7da77
#: ../../howto/custom-management-commands.txt:335
msgid "Replaced with the :djadmin:`check` command"
msgstr ""

# 1c3b06ede55a40ccaa80d045e812ce9d
#: ../../howto/custom-management-commands.txt:338
#, fuzzy
msgid "If ``app`` is None, then all installed apps are checked for errors."
msgstr "Если ``app`` равно None, то будут проверены все приложения."

# a5fcfdb5b825422d958d330623f9d06b
#: ../../howto/custom-management-commands.txt:343
msgid "BaseCommand subclasses"
msgstr "Подклассы BaseCommand"

# a5a93970fe6645e38c6f903c50be6808
#: ../../howto/custom-management-commands.txt:347
#, fuzzy
msgid ""
"A management command which takes one or more installed application labels as "
"arguments, and does something with each of them."
msgstr ""
"Служебная команда, которая принимает в качестве аргументов имена "
"установленных приложений и выполняет с ними однотипные действия."

# cec3669bfd424bedab61a9cd1f072d78
#: ../../howto/custom-management-commands.txt:350
#, fuzzy
msgid ""
"Rather than implementing :meth:`~BaseCommand.handle`, subclasses must "
"implement :meth:`~AppCommand.handle_app_config`, which will be called once "
"for each application."
msgstr ""
"Вместо реализации :meth:`~BaseCommand.handle`, реализуйте метод :meth:"
"`~AppCommand.handle_app`, который будет вызываться для каждого приложения."

# f1f968700b19432595df801d766d5a80
#: ../../howto/custom-management-commands.txt:356
#, fuzzy
msgid ""
"Perform the command's actions for ``app_config``, which will be an :class:"
"`~django.apps.AppConfig` instance corresponding to an application label "
"given on the command line."
msgstr ""
"Выполните действия для приложения ``app``, имя которого получили в качестве "
"аргумента."

# 0406ccc1372545659c3b86f18a6dc391
#: ../../howto/custom-management-commands.txt:362
msgid ""
"Previously, :class:`AppCommand` subclasses had to implement "
"``handle_app(app, **options)`` where ``app`` was a models module. The new "
"API makes it possible to handle applications without a models module. The "
"fastest way to migrate is as follows::"
msgstr ""

# bd0e760076ba493bb3a9ae235b9612e4
#: ../../howto/custom-management-commands.txt:373
msgid ""
"However, you may be able to simplify the implementation by using directly "
"the attributes of ``app_config``."
msgstr ""

# 6575381cb7284d87a99576fef840e84c
#: ../../howto/custom-management-commands.txt:378
msgid ""
"A management command which takes one or more arbitrary arguments (labels) on "
"the command line, and does something with each of them."
msgstr ""
"Команда, которая принимает один или несколько аргументов в командной строке "
"(меток) и что-то делает с ними."

# 8ac4171cb96e4277a675d3a78ffd9425
#: ../../howto/custom-management-commands.txt:382
msgid ""
"Rather than implementing :meth:`~BaseCommand.handle`, subclasses must "
"implement :meth:`~LabelCommand.handle_label`, which will be called once for "
"each label."
msgstr ""
"Вместо реализации :meth:`~BaseCommand.handle` нужно реализовать :meth:"
"`~LabelCommand.handle_label`, который будет вызываться для каждого аргумента."

# 21e5b5675c6e4dc4b7bfb9640b3f79f0
#: ../../howto/custom-management-commands.txt:387
msgid ""
"Perform the command's actions for ``label``, which will be the string as "
"given on the command line."
msgstr ""
"Выполняет действие для ``label``, которая была передана через командную "
"строку."

# 262b1421222347ee9662ac420fde0020
#: ../../howto/custom-management-commands.txt:392
msgid "A command which takes no arguments on the command line."
msgstr "Команда, которая не принимает аргументов."

# 0a1267268f164d3889e49be148669c21
#: ../../howto/custom-management-commands.txt:394
msgid ""
"Rather than implementing :meth:`~BaseCommand.handle`, subclasses must "
"implement :meth:`~NoArgsCommand.handle_noargs`; :meth:`~BaseCommand.handle` "
"itself is overridden to ensure no arguments are passed to the command."
msgstr ""
"Вместо реализации :meth:`~BaseCommand.handle`, реализуйте :meth:"
"`~NoArgsCommand.handle_noargs`; в методе :meth:`~BaseCommand.handle` можно "
"проверить, что в команду не передаются аргументы."

# 9837631d66ab4ad2bcc0e84201816c2f
#: ../../howto/custom-management-commands.txt:400
msgid "Perform this command's actions"
msgstr "Просто напишите код здесь."

# 8a5c315339c7440596701e7222293db9
#: ../../howto/custom-management-commands.txt:405
msgid "Command exceptions"
msgstr "Исключение команды"

# b8b53c2106c34ea08ab82e2d9f33f1e5
#: ../../howto/custom-management-commands.txt:409
msgid ""
"Exception class indicating a problem while executing a management command."
msgstr ""
"Этот класс сигнализирует о неожиданных ситуациях при выполнении команды."

# 63da4884ceb34b0bb7df044bbd434b3f
#: ../../howto/custom-management-commands.txt:412
msgid ""
"If this exception is raised during the execution of a management command "
"from a command line console, it will be caught and turned into a nicely-"
"printed error message to the appropriate output stream (i.e., stderr); as a "
"result, raising this exception (with a sensible description of the error) is "
"the preferred way to indicate that something has gone wrong in the execution "
"of a command."
msgstr ""
"Если это исключение произошло в ходе выполнения команды из консоли, то оно "
"будет преобразовано в понятное сообщение об ошибке и выведено в стандартный "
"поток ошибок (например, stderr). Генерация этого исключения (с подробным "
"описанием ошибки) - предпочтительный способ сообщения об исключительной "
"ситуации в ходе выполнения команды."

# ca92770932af4b098600b4fa9a2908e5
#: ../../howto/custom-management-commands.txt:419
msgid ""
"If a management command is called from code through :ref:`call_command <call-"
"command>`, it's up to you to catch the exception when needed."
msgstr ""
"Если команда будет вызвана из кода через :ref:`call_command <call-command>`, "
"то у вас будет шанс перехватить исключения."

# 1ca0570b45c54c148a9ed038b84dbc61
#~ msgid ""
#~ "Validates the given app, raising :class:`CommandError` for any errors."
#~ msgstr ""
#~ "Проверяет данные приложения, генерирует исключение :class:`CommandError` "
#~ "в случае ошибки."
