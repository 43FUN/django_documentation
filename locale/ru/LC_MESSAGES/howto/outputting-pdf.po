# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2012.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-02-29 18:30\n"
"PO-Revision-Date: 2012-02-15 15:13\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# f4a46ea377814d02bb309f6a3cc8bd0e
#: ../../howto/outputting-pdf.txt:3
msgid "Outputting PDFs with Django"
msgstr ""

# e65b8e69d67743529b4cb2c0ec3ac2bc
#: ../../howto/outputting-pdf.txt:5
msgid ""
"This document explains how to output PDF files dynamically using Django "
"views. This is made possible by the excellent, open-source ReportLab_ Python "
"PDF library."
msgstr ""

# 1f59639a4e754ac6b946b63033d4ece5
#: ../../howto/outputting-pdf.txt:9
msgid ""
"The advantage of generating PDF files dynamically is that you can create "
"customized PDFs for different purposes -- say, for different users or "
"different pieces of content."
msgstr ""

# e456074cf7ce46308e0b047cfd5756db
#: ../../howto/outputting-pdf.txt:13
msgid ""
"For example, Django was used at kusports.com_ to generate customized, "
"printer-friendly NCAA tournament brackets, as PDF files, for people "
"participating in a March Madness contest."
msgstr ""

# 63c78f8202214bc49ce8b608317cbb4a
#: ../../howto/outputting-pdf.txt:21
msgid "Install ReportLab"
msgstr ""

# 4a5d6a00abb04d95acbdfc206afb7291
#: ../../howto/outputting-pdf.txt:23
msgid ""
"Download and install the ReportLab library from http://www.reportlab.org/oss/"
"rl-toolkit/download/. The `user guide`_ (not coincidentally, a PDF file) "
"explains how to install it."
msgstr ""

# c757b5afc17d4793b0ad2c8e8db15eb0
#: ../../howto/outputting-pdf.txt:26
msgid ""
"Test your installation by importing it in the Python interactive "
"interpreter::"
msgstr ""

# a526d18844c2463ab84d5bd37d2e6ce3
#: ../../howto/outputting-pdf.txt:30
msgid "If that command doesn't raise any errors, the installation worked."
msgstr ""

# ca9200f0904048adbb2a457270b3230e
#: ../../howto/outputting-pdf.txt:35
msgid "Write your view"
msgstr ""

# 601547f585914481bcc1079f5fce26ba
#: ../../howto/outputting-pdf.txt:37
msgid ""
"The key to generating PDFs dynamically with Django is that the ReportLab API "
"acts on file-like objects, and Django's :class:`~django.http.HttpResponse` "
"objects are file-like objects."
msgstr ""

# 40f4c3b6b57c4292aab5676996388df3
#: ../../howto/outputting-pdf.txt:41
msgid "Here's a \"Hello World\" example::"
msgstr ""

# acace618e5ab41ea89bb71d44e361f68
#: ../../howto/outputting-pdf.txt:63
msgid ""
"The code and comments should be self-explanatory, but a few things deserve a "
"mention:"
msgstr ""

# 4da1baf172c74341835cb51b14845bad
#: ../../howto/outputting-pdf.txt:66
msgid ""
"The response gets a special MIME type, :mimetype:`application/pdf`. This "
"tells browsers that the document is a PDF file, rather than an HTML file. If "
"you leave this off, browsers will probably interpret the output as HTML, "
"which would result in ugly, scary gobbledygook in the browser window."
msgstr ""

# 64d167a4b8e44aefb962c8f0c8c75bc7
#: ../../howto/outputting-pdf.txt:72
msgid ""
"The response gets an additional ``Content-Disposition`` header, which "
"contains the name of the PDF file. This filename is arbitrary: Call it "
"whatever you want. It'll be used by browsers in the \"Save as...\" dialogue, "
"etc."
msgstr ""

# bdded7c2211541b3af6f69da79d5466c
#: ../../howto/outputting-pdf.txt:77
msgid ""
"The ``Content-Disposition`` header starts with ``'attachment; '`` in this "
"example. This forces Web browsers to pop-up a dialog box prompting/"
"confirming how to handle the document even if a default is set on the "
"machine. If you leave off ``'attachment;'``, browsers will handle the PDF "
"using whatever program/plugin they've been configured to use for PDFs. "
"Here's what that code would look like::"
msgstr ""

# cb004cbac877437e8686dbf1b63eedc6
#: ../../howto/outputting-pdf.txt:86
msgid ""
"Hooking into the ReportLab API is easy: Just pass ``response`` as the first "
"argument to ``canvas.Canvas``. The ``Canvas`` class expects a file-like "
"object, and :class:`~django.http.HttpResponse` objects fit the bill."
msgstr ""

# 623e3b1461ea44b4bc21c427de6858ea
#: ../../howto/outputting-pdf.txt:91
msgid ""
"Note that all subsequent PDF-generation methods are called on the PDF object "
"(in this case, ``p``) -- not on ``response``."
msgstr ""

# bc7a6236af714191b14a5c1b7ba6b7b1
#: ../../howto/outputting-pdf.txt:94
msgid ""
"Finally, it's important to call ``showPage()`` and ``save()`` on the PDF "
"file."
msgstr ""

# 1f0f38e5fbb34b2da3867b7f91346731
#: ../../howto/outputting-pdf.txt:98
msgid "Complex PDFs"
msgstr ""

# 5fe9267902454d04bc9e1ed29b7dfb81
#: ../../howto/outputting-pdf.txt:100
msgid ""
"If you're creating a complex PDF document with ReportLab, consider using "
"the :mod:`cStringIO` library as a temporary holding place for your PDF file. "
"This library provides a file-like object interface that is particularly "
"efficient. Here's the above \"Hello World\" example rewritten to use :mod:"
"`cStringIO`::"
msgstr ""

# 66f462b68eda44ceac897aacae6b5417
#: ../../howto/outputting-pdf.txt:138
msgid "Further resources"
msgstr ""

# 69ba09ccce614492a630de2f1b80a5e9
#: ../../howto/outputting-pdf.txt:140
msgid ""
"PDFlib_ is another PDF-generation library that has Python bindings. To use "
"it with Django, just use the same concepts explained in this article."
msgstr ""

# 8a3e723375964de6a15cd0ce90d74c54
#: ../../howto/outputting-pdf.txt:142
msgid ""
"`Pisa XHTML2PDF`_ is yet another PDF-generation library. Pisa ships with an "
"example of how to integrate Pisa with Django."
msgstr ""

# f29096cff63141ffa61be1a6b2e177a0
#: ../../howto/outputting-pdf.txt:144
msgid ""
"HTMLdoc_ is a command-line script that can convert HTML to PDF. It doesn't "
"have a Python interface, but you can escape out to the shell using "
"``system`` or ``popen`` and retrieve the output in Python."
msgstr ""

# f9fb8df7b0b14271b8bb2fdb66848ad0
#: ../../howto/outputting-pdf.txt:153
msgid "Other formats"
msgstr ""

# 9445b846e25749d9830d028c0498f406
#: ../../howto/outputting-pdf.txt:155
msgid ""
"Notice that there isn't a lot in these examples that's PDF-specific -- just "
"the bits using ``reportlab``. You can use a similar technique to generate "
"any arbitrary format that you can find a Python library for. Also see :doc:`/"
"howto/outputting-csv` for another example and some techniques you can use "
"when generated text-based formats."
msgstr ""
