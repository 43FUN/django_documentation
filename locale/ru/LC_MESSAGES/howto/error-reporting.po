# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2012.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-04-23 16:09\n"
"PO-Revision-Date: 2012-02-15 15:13\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# ba724917237345d28a21870fcbb09dd9
#: ../../howto/error-reporting.txt:2
msgid "Error reporting"
msgstr ""

# a1f74f849b5340bcb3df83218c414d3e
#: ../../howto/error-reporting.txt:4
msgid ""
"When you're running a public site you should always turn off the :setting:"
"`DEBUG` setting. That will make your server run much faster, and will also "
"prevent malicious users from seeing details of your application that can be "
"revealed by the error pages."
msgstr ""

# d6a04a4736ac4766aa8cd2514a8b3530
#: ../../howto/error-reporting.txt:9
msgid ""
"However, running with :setting:`DEBUG` set to ``False`` means you'll never "
"see errors generated by your site -- everyone will just see your public "
"error pages. You need to keep track of errors that occur in deployed sites, "
"so Django can be configured to create reports with details about those "
"errors."
msgstr ""

# 545fde765f7b4d0285de3981aaaa2c05
#: ../../howto/error-reporting.txt:15
msgid "Email reports"
msgstr ""

# e411b5fe86ef4c8a902a3423a80b6367
#: ../../howto/error-reporting.txt:18
msgid "Server errors"
msgstr ""

# 5791e50858254d818c68002b726c844f
#: ../../howto/error-reporting.txt:20
msgid ""
"When :setting:`DEBUG` is ``False``, Django will email the users listed in "
"the :setting:`ADMINS` setting whenever your code raises an unhandled "
"exception and results in an internal server error (HTTP status code 500). "
"This gives the administrators immediate notification of any errors. The :"
"setting:`ADMINS` will get a description of the error, a complete Python "
"traceback, and details about the HTTP request that caused the error."
msgstr ""

# 07fc4f49acd54a99bae533575ab41105
#: ../../howto/error-reporting.txt:29
msgid ""
"In order to send email, Django requires a few settings telling it how to "
"connect to your mail server. At the very least, you'll need to specify :"
"setting:`EMAIL_HOST` and possibly :setting:`EMAIL_HOST_USER` and :setting:"
"`EMAIL_HOST_PASSWORD`, though other settings may be also required depending "
"on your mail server's configuration. Consult :doc:`the Django settings "
"documentation </ref/settings>` for a full list of email-related settings."
msgstr ""

# fbf71103fc084104b5ad9ef109a9c4e6
#: ../../howto/error-reporting.txt:38
msgid ""
"By default, Django will send email from root@localhost. However, some mail "
"providers reject all email from this address. To use a different sender "
"address, modify the :setting:`SERVER_EMAIL` setting."
msgstr ""

# 928ec552d3e04a6c8aef6bcf1eb52be7
#: ../../howto/error-reporting.txt:42
msgid ""
"To disable this behavior, just remove all entries from the :setting:`ADMINS` "
"setting."
msgstr ""

# 2c4915d9f899479d97caa89eb4e31e3d
#: ../../howto/error-reporting.txt:47
msgid ""
"Server error emails are sent using the logging framework, so you can "
"customize this behavior by :doc:`customizing your logging configuration </"
"topics/logging>`."
msgstr ""

# 2547fa47a3074ad7a1a91ff4a439f05d
#: ../../howto/error-reporting.txt:52
msgid "404 errors"
msgstr ""

# f50d368dcfac4bcf9105de12358885e2
#: ../../howto/error-reporting.txt:54
msgid ""
"Django can also be configured to email errors about broken links (404 \"page "
"not found\" errors). Django sends emails about 404 errors when:"
msgstr ""

# 39f0c660feae48ca86e152f1a990a511
#: ../../howto/error-reporting.txt:57
msgid ":setting:`DEBUG` is ``False``"
msgstr ""

# 6c1a109e15d54f669af422c5a8f353a7
#: ../../howto/error-reporting.txt:59
msgid ":setting:`SEND_BROKEN_LINK_EMAILS` is ``True``"
msgstr ""

# ae629f16a05c4a52a2a56dcf28699605
#: ../../howto/error-reporting.txt:61
msgid ""
"Your :setting:`MIDDLEWARE_CLASSES` setting includes ``CommonMiddleware`` "
"(which it does by default)."
msgstr ""

# daab7d2152034d878cbf8599f2bbf9cf
#: ../../howto/error-reporting.txt:64
msgid ""
"If those conditions are met, Django will email the users listed in the :"
"setting:`MANAGERS` setting whenever your code raises a 404 and the request "
"has a referer. (It doesn't bother to email for 404s that don't have a "
"referer -- those are usually just people typing in broken URLs or broken Web "
"'bots)."
msgstr ""

# b06f65a887ba432e91107fcda4d3259e
#: ../../howto/error-reporting.txt:69
msgid ""
"You can tell Django to stop reporting particular 404s by tweaking the :"
"setting:`IGNORABLE_404_URLS` setting. It should be a tuple of compiled "
"regular expression objects. For example::"
msgstr ""

# 45965c160fd442e68d486d93e68dbe15
#: ../../howto/error-reporting.txt:79
msgid ""
"In this example, a 404 to any URL ending with ``.php`` or ``.cgi`` will "
"*not* be reported. Neither will any URL starting with ``/phpmyadmin/``."
msgstr ""

# a8653766d7934b228fc9a15940fd990d
#: ../../howto/error-reporting.txt:82
msgid ""
"The following example shows how to exclude some conventional URLs that "
"browsers and crawlers often request::"
msgstr ""

# 5600b0e31d614776979aaa0eaf157d5c
#: ../../howto/error-reporting.txt:92
msgid ""
"(Note that these are regular expressions, so we put a backslash in front of "
"periods to escape them.)"
msgstr ""

# 854f8e613acc428cb6d7aa0e4ecca035
#: ../../howto/error-reporting.txt:95
msgid ""
"The best way to disable this behavior is to set :setting:"
"`SEND_BROKEN_LINK_EMAILS` to ``False``."
msgstr ""

# 9bacdf1feb0643b9b1dce0bc5315211a
#: ../../howto/error-reporting.txt:100
msgid ""
"404 errors are logged using the logging framework. By default, these log "
"records are ignored, but you can use them for error reporting by writing a "
"handler and :doc:`configuring logging </topics/logging>` appropriately."
msgstr ""

# f1378229c05f406facee60b4fe1d4f11
#: ../../howto/error-reporting.txt:108
msgid ""
"Previously, two settings were used to control which URLs not to report: :"
"setting:`IGNORABLE_404_STARTS` and :setting:`IGNORABLE_404_ENDS`. They were "
"replaced by :setting:`IGNORABLE_404_URLS`."
msgstr ""

# 86057fec20cc407b9c2fa87e677c8cbf
#: ../../howto/error-reporting.txt:115
msgid "Filtering error reports"
msgstr ""

# b1f3ca56719c4c6ab7a82d0e74ac7ccc
#: ../../howto/error-reporting.txt:120
msgid "Filtering sensitive information"
msgstr ""

# 336ff2116e80428db0003fd8394d82eb
#: ../../howto/error-reporting.txt:122
msgid ""
"Error reports are really helpful for debugging errors, so it is generally "
"useful to record as much relevant information about those errors as "
"possible. For example, by default Django records the `full traceback`_ for "
"the exception raised, each `traceback frame`_'s local variables, and the :"
"class:`~django.http.HttpRequest`'s :ref:`attributes<httprequest-attributes>`."
msgstr ""

# 6d4aecb7f36c4fd8af16a8965c9b430f
#: ../../howto/error-reporting.txt:128
msgid ""
"However, sometimes certain types of information may be too sensitive and "
"thus may not be appropriate to be kept track of, for example a user's "
"password or credit card number. So Django offers a set of function "
"decorators to help you control which information should be filtered out of "
"error reports in a production environment (that is, where :setting:`DEBUG` "
"is set to ``False``): :func:`sensitive_variables` and :func:"
"`sensitive_post_parameters`."
msgstr ""

# 229c2ebce2704f588cc2ef8a8aa8add4
#: ../../howto/error-reporting.txt:140
msgid ""
"If a function (either a view or any regular callback) in your code uses "
"local variables susceptible to contain sensitive information, you may "
"prevent the values of those variables from being included in error reports "
"using the ``sensitive_variables`` decorator::"
msgstr ""

# 7672250fafec414fb5c06e47f4eaeb20
#: ../../howto/error-reporting.txt:154
msgid ""
"In the above example, the values for the ``user``, ``pw`` and ``cc`` "
"variables will be hidden and replaced with stars (`**********`) in the error "
"reports, whereas the value of the ``name`` variable will be disclosed."
msgstr ""

# 113eeb94f43d4cf686cb432c2d718e76
#: ../../howto/error-reporting.txt:159
msgid ""
"To systematically hide all local variables of a function from error logs, do "
"not provide any argument to the ``sensitive_variables`` decorator::"
msgstr ""

# 7b7c898909f14f69888947ef52985396
#: ../../howto/error-reporting.txt:168
msgid ""
"If the variable you want to hide is also a function argument (e.g. "
"'``user``' in the following example), and if the decorated function has "
"mutiple decorators, then make sure to place ``@sensitive_variables`` at the "
"top of the decorator chain. This way it will also hide the function argument "
"as it gets passed through the other decorators::"
msgstr ""

# 2851d6096c364e2a88b4a03a80aeb8c6
#: ../../howto/error-reporting.txt:182
msgid ""
"If one of your views receives an :class:`~django.http.HttpRequest` object "
"with :attr:`POST parameters<django.http.HttpRequest.POST>` susceptible to "
"contain sensitive information, you may prevent the values of those "
"parameters from being included in the error reports using the "
"``sensitive_post_parameters`` decorator::"
msgstr ""

# 059e938787344fb2bb51a93b3903b673
#: ../../howto/error-reporting.txt:198
msgid ""
"In the above example, the values for the ``pass_word`` and "
"``credit_card_number`` POST parameters will be hidden and replaced with "
"stars (`**********`) in the request's representation inside the error "
"reports, whereas the value of the ``name`` parameter will be disclosed."
msgstr ""

# dc264575576a4456a097cf08845ef677
#: ../../howto/error-reporting.txt:203
msgid ""
"To systematically hide all POST parameters of a request in error reports, do "
"not provide any argument to the ``sensitive_post_parameters`` decorator::"
msgstr ""

# b3262be1a2ad4390b622f85e5257468f
#: ../../howto/error-reporting.txt:214
msgid ""
"Since version 1.4, all POST parameters are systematically filtered out of "
"error reports for certain :mod:`django.contrib.auth.views` views "
"( ``login``, ``password_reset_confirm``, ``password_change``, and "
"``add_view`` and ``user_change_password`` in the ``auth`` admin) to prevent "
"the leaking of sensitive information such as user passwords."
msgstr ""

# fd428ed12ba14310bfa63375ef2fcffc
#: ../../howto/error-reporting.txt:223
msgid "Custom error reports"
msgstr ""

# da015ab93eca4927a6560af09a4885df
#: ../../howto/error-reporting.txt:225
msgid ""
"All :func:`sensitive_variables` and :func:`sensitive_post_parameters` do is, "
"respectively, annotate the decorated function with the names of sensitive "
"variables and annotate the ``HttpRequest`` object with the names of "
"sensitive POST parameters, so that this sensitive information can later be "
"filtered out of reports when an error occurs. The actual filtering is done "
"by Django's default error reporter filter: :class:`django.views.debug."
"SafeExceptionReporterFilter`. This filter uses the decorators' annotations "
"to replace the corresponding values with stars (`**********`) when the error "
"reports are produced. If you wish to override or customize this default "
"behavior for your entire site, you need to define your own filter class and "
"tell Django to use it via the :setting:`DEFAULT_EXCEPTION_REPORTER_FILTER` "
"setting::"
msgstr ""

# 4b422afd52714288a9d09991a69e901a
#: ../../howto/error-reporting.txt:240
msgid ""
"You may also control in a more granular way which filter to use within any "
"given view by setting the ``HttpRequest``'s ``exception_reporter_filter`` "
"attribute::"
msgstr ""

# 35989f9e057a4225a9f6456285a34427
#: ../../howto/error-reporting.txt:249
msgid ""
"Your custom filter class needs to inherit from :class:`django.views.debug."
"SafeExceptionReporterFilter` and may override the following methods:"
msgstr ""

# bed6986a829a464f8d97b3978470428e
#: ../../howto/error-reporting.txt:257
msgid ""
"Returns ``True`` to activate the filtering operated in the other methods. By "
"default the filter is active if :setting:`DEBUG` is ``False``."
msgstr ""

# 6ecfd7fbcceb4a319fe4374eecd7f8bf
#: ../../howto/error-reporting.txt:262
msgid ""
"Returns the representation string of the request object, that is, the value "
"that would be returned by ``repr(request)``, except it uses the filtered "
"dictionary of POST parameters as determined by :meth:"
"`SafeExceptionReporterFilter.get_post_parameters`."
msgstr ""

# a62d26d47915430b980f5f199056ecb3
#: ../../howto/error-reporting.txt:269
msgid ""
"Returns the filtered dictionary of POST parameters. By default it replaces "
"the values of sensitive parameters with stars (`**********`)."
msgstr ""

# f5fb4ede244e4145b58d70456c606824
#: ../../howto/error-reporting.txt:274
msgid ""
"Returns the filtered dictionary of local variables for the given traceback "
"frame. By default it replaces the values of sensitive variables with stars "
"(`**********`)."
msgstr ""

# 37a48b46a71b436cb3cc12ab7fe1ba12
#: ../../howto/error-reporting.txt:280
msgid ""
"You can also set up custom error reporting by writing a custom piece of :ref:"
"`exception middleware <exception-middleware>`. If you do write custom error "
"handling, it's a good idea to emulate Django's built-in error handling and "
"only report/log errors if :setting:`DEBUG` is ``False``."
msgstr ""
