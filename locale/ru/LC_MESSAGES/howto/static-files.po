# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2012.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-02-15 15:13\n"
"PO-Revision-Date: 2012-02-15 15:13\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# 3f2db9775cf34fa8adfa2251b1c6d165
#: ../../howto/static-files.txt:3
msgid "Managing static files"
msgstr ""

# 2ee086d8cddd4b529460746589cb6be5
#: ../../howto/static-files.txt:7
msgid ""
"Django developers mostly concern themselves with the dynamic parts of web "
"applications -- the views and templates that render anew for each request. "
"But web applications have other parts: the static files (images, CSS, "
"Javascript, etc.) that are needed to render a complete web page."
msgstr ""

# fdaca1a1999f4ae682af93aae24a09bd
#: ../../howto/static-files.txt:12
msgid ""
"For small projects, this isn't a big deal, because you can just keep the "
"static files somewhere your web server can find it. However, in bigger "
"projects -- especially those comprised of multiple apps -- dealing with the "
"multiple sets of static files provided by each application starts to get "
"tricky."
msgstr ""

# 4e50d94ff34943188ab276b7dbe6bd93
#: ../../howto/static-files.txt:18
msgid ""
"That's what ``django.contrib.staticfiles`` is for: it collects static files "
"from each of your applications (and any other places you specify) into a "
"single location that can easily be served in production."
msgstr ""

# 0dd154aaaacb465d9665740adede7845
#: ../../howto/static-files.txt:24
msgid ""
"If you've used the `django-staticfiles`_ third-party app before, then "
"``django.contrib.staticfiles`` will look very familiar. That's because "
"they're essentially the same code: ``django.contrib.staticfiles`` started "
"its life as `django-staticfiles`_ and was merged into Django 1.3."
msgstr ""

# 8f7cf3fc9d9744cb9240b13f04e4ac63
#: ../../howto/static-files.txt:29
msgid ""
"If you're upgrading from ``django-staticfiles``, please see `Upgrading from "
"django-staticfiles`_, below, for a few minor changes you'll need to make."
msgstr ""

# edc0e9add889409d9141eab76c852932
#: ../../howto/static-files.txt:35
msgid "Using ``django.contrib.staticfiles``"
msgstr ""

# 130b6145c8504a7c9f744669fe8597c7
#: ../../howto/static-files.txt:38
msgid "Basic usage"
msgstr ""

# bc29209fcbb34787aadf557fa823cf17
#: ../../howto/static-files.txt:40
msgid "Put your static files somewhere that ``staticfiles`` will find them."
msgstr ""

# 868b603a3e4e4ccb8ab2feafe02c64bc
#: ../../howto/static-files.txt:42
msgid ""
"By default, this means within ``static/`` subdirectories of apps in your :"
"setting:`INSTALLED_APPS`."
msgstr ""

# 2b50e979fbef4f558068331555ed6673
#: ../../howto/static-files.txt:45
msgid ""
"Your project will probably also have static assets that aren't tied to a "
"particular app. The :setting:`STATICFILES_DIRS` setting is a tuple of "
"filesystem directories to check when loading static files. It's a search "
"path that is by default empty. See the :setting:`STATICFILES_DIRS` docs how "
"to extend this list of additional paths."
msgstr ""

# ee4b329339814c48a49f6bc6c8fb9fcc
#: ../../howto/static-files.txt:51
msgid ""
"Additionally, see the documentation for the :setting:`STATICFILES_FINDERS` "
"setting for details on how ``staticfiles`` finds your files."
msgstr ""

# d3d2f48fd3414ce3a9d9ab74478a7840
#: ../../howto/static-files.txt:54
msgid ""
"Make sure that ``django.contrib.staticfiles`` is included in your :setting:"
"`INSTALLED_APPS`."
msgstr ""

# 2d806c566e0045ecaee474435af7b492
#: ../../howto/static-files.txt:57
msgid ""
"For :ref:`local development<staticfiles-development>`, if you are using :ref:"
"`runserver<staticfiles-runserver>` or adding :ref:"
"`staticfiles_urlpatterns<staticfiles-development>` to your URLconf, you're "
"done with the setup -- your static files will automatically be served at the "
"default (for :djadmin:`newly created<startproject>` projects) :setting:"
"`STATIC_URL` of ``/static/``."
msgstr ""

# 4bf66228473c4b75a083ed7f7bcf1718
#: ../../howto/static-files.txt:65
msgid ""
"You'll probably need to refer to these files in your templates. The easiest "
"method is to use the included context processor which allows template code "
"like:"
msgstr ""

# 4dac47cc62514780b9d43cb3ccd0d00c
#: ../../howto/static-files.txt:73
msgid ""
"See :ref:`staticfiles-in-templates` for more details, **including** an "
"alternate method using a template tag."
msgstr ""

# 6272c4ea31d34be58c7ab2c8c4b3d618
#: ../../howto/static-files.txt:77
msgid "Deploying static files in a nutshell"
msgstr ""

# 40481e88babd42c8a9ca668b9ec56cfd
#: ../../howto/static-files.txt:79
msgid ""
"When you're ready to move out of local development and deploy your project:"
msgstr ""

# cb598b86103a4532ba4c4ecfa04d0d4a
#: ../../howto/static-files.txt:81
msgid ""
"Set the :setting:`STATIC_URL` setting to the public URL for your static "
"files (in most cases, the default value of ``/static/`` is just fine)."
msgstr ""

# e08945a6bcee448a8e069220fd6c6edd
#: ../../howto/static-files.txt:84
msgid ""
"Set the :setting:`STATIC_ROOT` setting to point to the filesystem path you'd "
"like your static files collected to when you use the :djadmin:"
"`collectstatic` management command. For example::"
msgstr ""

# fe0c9beac45143daaa5d316de3b2e126
#: ../../howto/static-files.txt:90
msgid "Run the :djadmin:`collectstatic` management command::"
msgstr ""

# daa6039efe944acca515cffc5f04c921
#: ../../howto/static-files.txt:94
msgid ""
"This'll churn through your static file storage and copy them into the "
"directory given by :setting:`STATIC_ROOT`."
msgstr ""

# b93ef1d1c734493ea7e70fd2615121f5
#: ../../howto/static-files.txt:97
msgid ""
"Deploy those files by configuring your webserver of choice to serve the "
"files in :setting:`STATIC_ROOT` at :setting:`STATIC_URL`."
msgstr ""

# 6bb282d3bc324863a69cd0d5ba5dadf9
#: ../../howto/static-files.txt:100
msgid ""
":ref:`staticfiles-production` covers some common deployment strategies for "
"static files."
msgstr ""

# 7a275374a3a74774804fcb7ea6e42aa0
#: ../../howto/static-files.txt:103
msgid ""
"Those are the **basics**. For more details on common configuration options, "
"read on; for a detailed reference of the settings, commands, and other bits "
"included with the framework see :doc:`the staticfiles reference </ref/"
"contrib/staticfiles>`."
msgstr ""

# e1ce51c8f7dd4bd4b2445a4383e90dc5
#: ../../howto/static-files.txt:110
msgid ""
"In previous versions of Django, it was common to place static assets in :"
"setting:`MEDIA_ROOT` along with user-uploaded files, and serve them both at :"
"setting:`MEDIA_URL`. Part of the purpose of introducing the ``staticfiles`` "
"app is to make it easier to keep static files separate from user-uploaded "
"files."
msgstr ""

# b4104a9e66f640a58a7a958e55b7723f
#: ../../howto/static-files.txt:116
msgid ""
"For this reason, you need to make your :setting:`MEDIA_ROOT` and :setting:"
"`MEDIA_URL` different from your :setting:`STATIC_ROOT` and :setting:"
"`STATIC_URL`. You will need to arrange for serving of files in :setting:"
"`MEDIA_ROOT` yourself; ``staticfiles`` does not deal with user-uploaded "
"files at all. You can, however, use :func:`django.views.static.serve` view "
"for serving :setting:`MEDIA_ROOT` in development; see :ref:`staticfiles-"
"other-directories`."
msgstr ""

# 377782ce735f4f448e15b320b7746566
#: ../../howto/static-files.txt:127
msgid "Referring to static files in templates"
msgstr ""

# 0ef51e978e2e4856ade40576fd9f0c69
#: ../../howto/static-files.txt:129
msgid ""
"At some point, you'll probably need to link to static files in your "
"templates. You could, of course, simply hardcode the path to you assets in "
"the templates:"
msgstr ""

# 597194c7ca124850b4a3bfcd373df82b
#: ../../howto/static-files.txt:136
msgid ""
"Of course, there are some serious problems with this: it doesn't work well "
"in development, and it makes it *very* hard to change where you've deployed "
"your static files. If, for example, you wanted to switch to using a content "
"delivery network (CDN), then you'd need to change more or less every single "
"template."
msgstr ""

# 7b86e7244cd54dd48eb25ac06e08b18d
#: ../../howto/static-files.txt:142
msgid ""
"A far better way is to use the value of the :setting:`STATIC_URL` setting "
"directly in your templates. This means that a switch of static files servers "
"only requires changing that single value. Much better!"
msgstr ""

# 2a383f634abf4914bbdaf1baeb95dbeb
#: ../../howto/static-files.txt:146
msgid ""
"Django includes multiple built-in ways of using this setting in your "
"templates: a context processor and a template tag."
msgstr ""

# 03548fc29c6d4481ad763b55839d6146
#: ../../howto/static-files.txt:150
msgid "With a context processor"
msgstr ""

# b8f66e054cdf43e1bac1f39b3174daca
#: ../../howto/static-files.txt:152
msgid ""
"The included context processor is the easy way. Simply make sure ``'django."
"core.context_processors.static'`` is in your :setting:"
"`TEMPLATE_CONTEXT_PROCESSORS`. It's there by default, and if you're editing "
"that setting by hand it should look something like::"
msgstr ""

# 657fa075b4d44b34bdd0d7f4d643c971
#: ../../howto/static-files.txt:166
msgid ""
"Once that's done, you can refer to :setting:`STATIC_URL` in your templates:"
msgstr ""

# 2f0f56d1cb7a4e11963b5c6eb3f48641
#: ../../howto/static-files.txt:172
msgid ""
"If ``{{ STATIC_URL }}`` isn't working in your template, you're probably not "
"using :class:`~django.template.RequestContext` when rendering the template."
msgstr ""

# d8a78352f79d465992f75266476876f0
#: ../../howto/static-files.txt:175
msgid ""
"As a brief refresher, context processors add variables into the contexts of "
"every template. However, context processors require that you use :class:"
"`~django.template.RequestContext` when rendering templates. This happens "
"automatically if you're using a :doc:`generic view </ref/class-based-"
"views>`, but in views written by hand you'll need to explicitly use "
"``RequestContext`` To see how that works, and to read more details, check "
"out :ref:`subclassing-context-requestcontext`."
msgstr ""

# 369e7239e5754758866e2c7486ea1e3b
#: ../../howto/static-files.txt:183
msgid ""
"Another option is the :ttag:`get_static_prefix` template tag that is part of "
"Django's core."
msgstr ""

# 763c6eaa14274cc8ad24d575ff8d86c6
#: ../../howto/static-files.txt:187
msgid "With a template tag"
msgstr ""

# 5adca60727924afca8f44f4e3955f21c
#: ../../howto/static-files.txt:189
msgid ""
"The more powerful tool is the :ttag:`static<staticfiles-static>` template "
"tag. It builds the URL for the given relative path by using the configured :"
"setting:`STATICFILES_STORAGE` storage."
msgstr ""

# 8c359ce209484acd902de2a027fdcc6d
#: ../../howto/static-files.txt:198
msgid ""
"It is also able to consume standard context variables, e.g. assuming a "
"``user_stylesheet`` variable is passed to the template:"
msgstr ""

# 352d6869857a4f85822fcec67603887d
#: ../../howto/static-files.txt:208
msgid ""
"There is also a template tag named :ttag:`static` in Django's core set of :"
"ref:`built in template tags<ref-templates-builtins-tags>` which has the same "
"argument signature but only uses `urlparse.urljoin()`_ with the :setting:"
"`STATIC_URL` setting and the given path. This has the disadvantage of not "
"being able to easily switch the storage backend without changing the "
"templates, so in doubt use the ``staticfiles`` :ttag:`static<staticfiles-"
"static>` template tag."
msgstr ""

# 8d8d480f9bab4d859e0b2807462573b5
#: ../../howto/static-files.txt:222
msgid "Serving static files in development"
msgstr ""

# 8ec910b846ad4712af679504a7a93272
#: ../../howto/static-files.txt:224
msgid ""
"The static files tools are mostly designed to help with getting static files "
"successfully deployed into production. This usually means a separate, "
"dedicated static file server, which is a lot of overhead to mess with when "
"developing locally. Thus, the ``staticfiles`` app ships with a **quick and "
"dirty helper view** that you can use to serve files locally in development."
msgstr ""

# 17232be7cc274a45be510945c1eea40a
#: ../../howto/static-files.txt:231
msgid ""
"This view is automatically enabled and will serve your static files at :"
"setting:`STATIC_URL` when you use the built-in :ref:`runserver<staticfiles-"
"runserver>` management command."
msgstr ""

# 42a7c1fbebc04a90b5a0b80cb4654a9a
#: ../../howto/static-files.txt:235
msgid ""
"To enable this view if you are using some other server for local "
"development, you'll add a couple of lines to your URLconf. The first line "
"goes at the top of the file, and the last line at the bottom::"
msgstr ""

# 1e9f99b6ca6c488581767a0eb70391d1
#: ../../howto/static-files.txt:245
msgid ""
"This will inspect your :setting:`STATIC_URL` setting and wire up the view to "
"serve static files accordingly. Don't forget to set the :setting:"
"`STATICFILES_DIRS` setting appropriately to let ``django.contrib."
"staticfiles`` know where to look for files additionally to files in app "
"directories."
msgstr ""

# 1498d40c4d8f4aaea68e2a8c107e3b81
#: ../../howto/static-files.txt:253
msgid "This will only work if :setting:`DEBUG` is ``True``."
msgstr ""

# 531dbb8b399f47f09c3583d8f3f61347
#: ../../howto/static-files.txt:255
msgid ""
"That's because this view is **grossly inefficient** and probably "
"**insecure**. This is only intended for local development, and should "
"**never be used in production**."
msgstr ""

# 63888937c0044a02b2e273731fbf417f
#: ../../howto/static-files.txt:259
msgid ""
"Additionally, when using ``staticfiles_urlpatterns`` your :setting:"
"`STATIC_URL` setting can't be empty or a full URL, such as ``http://static."
"example.com/``."
msgstr ""

# 5e0db18bd9314b3ead5d808b848df637
#: ../../howto/static-files.txt:263
msgid ""
"For a few more details on how the ``staticfiles`` can be used during "
"development, see :ref:`staticfiles-development-view`."
msgstr ""

# 445ade7b018243b0a477e898c9711994
#: ../../howto/static-files.txt:269
msgid "Serving other directories"
msgstr ""

# 6197ab6440da446dadffe089b718f1c5
#: ../../howto/static-files.txt:274
msgid ""
"There may be files other than your project's static assets that, for "
"convenience, you'd like to have Django serve for you in local development. "
"The :func:`~django.views.static.serve` view can be used to serve any "
"directory you give it. (Again, this view is **not** hardened for production "
"use, and should be used only as a development aid; you should serve these "
"files in production using a real front-end webserver)."
msgstr ""

# 9ccdaa4161554682b04dfb475a6cc758
#: ../../howto/static-files.txt:281
msgid ""
"The most likely example is user-uploaded content in :setting:`MEDIA_ROOT`. "
"``staticfiles`` is intended for static assets and has no built-in handling "
"for user-uploaded files, but you can have Django serve your :setting:"
"`MEDIA_ROOT` by appending something like this to your URLconf::"
msgstr ""

# 1e994793b3884c0cad5d2a7adafdf091
#: ../../howto/static-files.txt:297
msgid ""
"Note, the snippet assumes your :setting:`MEDIA_URL` has a value of ``'/"
"media/'``. This will call the :func:`~django.views.static.serve` view, "
"passing in the path from the URLconf and the (required) ``document_root`` "
"parameter."
msgstr ""

# bfa5d62c46334132bda381f22f1bdc11
#: ../../howto/static-files.txt:305
msgid ""
"Since it can become a bit cumbersome to define this URL pattern, Django "
"ships with a small URL helper function :func:`~django.conf.urls.static."
"static` that takes as parameters the prefix such as :setting:`MEDIA_URL` and "
"a dotted path to a view, such as ``'django.views.static.serve'``. Any other "
"function parameter will be transparently passed to the view."
msgstr ""

# 03165190f6e5416cad2201d0a35559eb
#: ../../howto/static-files.txt:312
msgid ""
"An example for serving :setting:`MEDIA_URL` (``'/media/'``) during "
"development::"
msgstr ""

# b2945a263a9a4f3c9dc1348b492c4f4e
#: ../../howto/static-files.txt:324
msgid ""
"This helper function will only be operational in debug mode and if the given "
"prefix is local (e.g. ``/static/``) and not a URL (e.g. ``http://static."
"example.com/``)."
msgstr ""

# 91ddeb17415d48f3b3d151ea246a716b
#: ../../howto/static-files.txt:331
msgid "Serving static files in production"
msgstr ""

# 6a6989471e514fac9f169b821013cf23
#: ../../howto/static-files.txt:333
msgid ""
"The basic outline of putting static files into production is simple: run "
"the :djadmin:`collectstatic` command when static files change, then arrange "
"for the collected static files directory (:setting:`STATIC_ROOT`) to be "
"moved to the static file server and served."
msgstr ""

# 6bb8631aab204c67a5cb634008fb9ab6
#: ../../howto/static-files.txt:338
msgid ""
"Of course, as with all deployment tasks, the devil's in the details. Every "
"production setup will be a bit different, so you'll need to adapt the basic "
"outline to fit your needs. Below are a few common patterns that might help."
msgstr ""

# 9db03538576447e5a4d2a0dc885e6cd4
#: ../../howto/static-files.txt:343
msgid "Serving the app and your static files from the same server"
msgstr ""

# 0fd8d39ffcaa46318b12ec456205b247
#: ../../howto/static-files.txt:345
msgid ""
"If you want to serve your static files from the same server that's already "
"serving your site, the basic outline gets modified to look something like:"
msgstr ""

# 1906cc991b514c509d563c0dd4b7f999
#: ../../howto/static-files.txt:348
msgid "Push your code up to the deployment server."
msgstr ""

# e459112b2cec466a9cb78ba133df3f97
#: ../../howto/static-files.txt:349
msgid ""
"On the server, run :djadmin:`collectstatic` to copy all the static files "
"into :setting:`STATIC_ROOT`."
msgstr ""

# 28aa31c3d50645e9ab93b711614f4062
#: ../../howto/static-files.txt:351
msgid ""
"Point your web server at :setting:`STATIC_ROOT`. For example, here's :ref:"
"`how to do this under Apache and mod_wsgi <serving-files>`."
msgstr ""

# 5bc2cbad3750496a9e7828dfb1dfa5b7
#: ../../howto/static-files.txt:354
msgid ""
"You'll probably want to automate this process, especially if you've got "
"multiple web servers. There's any number of ways to do this automation, but "
"one option that many Django developers enjoy is `Fabric`__."
msgstr ""

# 9ba3014d97f0454fbde4ee5b542b3132
#: ../../howto/static-files.txt:360
msgid ""
"Below, and in the following sections, we'll show off a few example fabfiles "
"(i.e. Fabric scripts) that automate these file deployment options. The "
"syntax of a fabfile is fairly straightforward but won't be covered here; "
"consult `Fabric's documentation`__, for a complete explanation of the "
"syntax.."
msgstr ""

# 1909fcd4326a4f10a2532bb89f4d0e2f
#: ../../howto/static-files.txt:367
msgid ""
"So, a fabfile to deploy static files to a couple of web servers might look "
"something like::"
msgstr ""

# 11157573eaf94ca8864890bab3364352
#: ../../howto/static-files.txt:383
msgid "Serving static files from a dedicated server"
msgstr ""

# 5a8d9c13f48444fea19f4da8e187634d
#: ../../howto/static-files.txt:385
msgid ""
"Most larger Django apps use a separate Web server -- i.e., one that's not "
"also running Django -- for serving static files. This server often runs a "
"different type of web server -- faster but less full-featured. Some good "
"choices are:"
msgstr ""

# a589844c398747f59ab94d23810880a2
#: ../../howto/static-files.txt:389
msgid "lighttpd_"
msgstr ""

# b8b4fe611fcb451983d9bae34678d97f
#: ../../howto/static-files.txt:390
msgid "Nginx_"
msgstr ""

# e76357602a184cd3b874d2c78f563f24
#: ../../howto/static-files.txt:391
msgid "TUX_"
msgstr ""

# 8f22c629efb3409eb57084a802fdd46a
#: ../../howto/static-files.txt:392
msgid "Cherokee_"
msgstr ""

# 64dc07425d824d35b29039edc13c88f9
#: ../../howto/static-files.txt:393
msgid "A stripped-down version of Apache_"
msgstr ""

# f00f13f2f1db4ad98c66772f15ab4a65
#: ../../howto/static-files.txt:401
msgid ""
"Configuring these servers is out of scope of this document; check each "
"server's respective documentation for instructions."
msgstr ""

# 45bf506eaff349a18fb18fc59746d536
#: ../../howto/static-files.txt:404
msgid ""
"Since your static file server won't be running Django, you'll need to modify "
"the deployment strategy to look something like:"
msgstr ""

# de9175050cb14897b59a9b61c895818e
#: ../../howto/static-files.txt:407
msgid "When your static files change, run :djadmin:`collectstatic` locally."
msgstr ""

# 21c1b5686816441d9e0c20d493382383
#: ../../howto/static-files.txt:408
msgid ""
"Push your local :setting:`STATIC_ROOT` up to the static file server into the "
"directory that's being served. ``rsync`` is a good choice for this step "
"since it only needs to transfer the bits of static files that have changed."
msgstr ""

# 910e3674cc6a4db09d3641358c04e32a
#: ../../howto/static-files.txt:413
msgid "Here's how this might look in a fabfile::"
msgstr ""

# 0f8e6bc1d42e44669ca35acb0cca004e
#: ../../howto/static-files.txt:436
msgid "Serving static files from a cloud service or CDN"
msgstr ""

# 6b363665dfe6455688d5cf695b3eb9c4
#: ../../howto/static-files.txt:438
msgid ""
"Another common tactic is to serve static files from a cloud storage provider "
"like Amazon's S3__ and/or a CDN (content delivery network). This lets you "
"ignore the problems of serving static files, and can often make for faster-"
"loading webpages (especially when using a CDN)."
msgstr ""

# 4d0d1cd6f2dd4cfc8ad3f48aebdb8608
#: ../../howto/static-files.txt:443
msgid ""
"When using these services, the basic workflow would look a bit like the "
"above, except that instead of using ``rsync`` to transfer your static files "
"to the server you'd need to transfer the static files to the storage "
"provider or CDN."
msgstr ""

# 15124c2c7fc84093886a54e3d94bcc37
#: ../../howto/static-files.txt:447
msgid ""
"There's any number of ways you might do this, but if the provider has an API "
"a :doc:`custom file storage backend </howto/custom-file-storage>` will make "
"the process incredibly simple. If you've written or are using a 3rd party "
"custom storage backend, you can tell :djadmin:`collectstatic` to use it by "
"setting :setting:`STATICFILES_STORAGE` to the storage engine."
msgstr ""

# a49f5227d2264ce1a6890810f9d8bb5f
#: ../../howto/static-files.txt:453
msgid ""
"For example, if you've written an S3 storage backend in ``myproject.storage."
"S3Storage`` you could use it with::"
msgstr ""

# 280807d6d6224e17b8bc5841f93f9a59
#: ../../howto/static-files.txt:458
msgid ""
"Once that's done, all you have to do is run :djadmin:`collectstatic` and "
"your static files would be pushed through your storage package up to S3. If "
"you later needed to switch to a different storage provider, it could be as "
"simple as changing your :setting:`STATICFILES_STORAGE` setting."
msgstr ""

# 13ddf1cd31774c699c9e1a1be9bdf11e
#: ../../howto/static-files.txt:463
msgid ""
"For details on how you'd write one of these backends, :doc:`/howto/custom-"
"file-storage`."
msgstr ""

# 0002fcccb00e4958ac79ccb56d4788f2
#: ../../howto/static-files.txt:468
msgid ""
"The `django-storages`__ project is a 3rd party app that provides many "
"storage backends for many common file storage APIs (including `S3`__)."
msgstr ""

# 8d65d5ab9fd3442fbc313b33169253f5
#: ../../howto/static-files.txt:476
msgid "Upgrading from ``django-staticfiles``"
msgstr ""

# 51b7ac13d5ae4beeaa13fd3343bbd912
#: ../../howto/static-files.txt:478
msgid ""
"``django.contrib.staticfiles`` began its life as `django-staticfiles`_. If "
"you're upgrading from `django-staticfiles`_ older than 1.0 (e.g. 0.3.4) to "
"``django.contrib.staticfiles``, you'll need to make a few changes:"
msgstr ""

# fe5c5a0f3ac947dabdc69c5d05d4d2be
#: ../../howto/static-files.txt:482
msgid ""
"Application files should now live in a ``static`` directory in each app "
"(`django-staticfiles`_ used the name ``media``, which was slightly "
"confusing)."
msgstr ""

# 1e6b499053ad4bf787c1b947d552a088
#: ../../howto/static-files.txt:486
msgid ""
"The management commands ``build_static`` and ``resolve_static`` are now "
"called :djadmin:`collectstatic` and :djadmin:`findstatic`."
msgstr ""

# daed86ef23ec4b77a7c4fe9bcd18c514
#: ../../howto/static-files.txt:489
msgid ""
"The settings ``STATICFILES_PREPEND_LABEL_APPS``, "
"``STATICFILES_MEDIA_DIRNAMES`` and ``STATICFILES_EXCLUDED_APPS`` were "
"removed."
msgstr ""

# afee0c124d6f42f8895be20244e74d04
#: ../../howto/static-files.txt:493
msgid ""
"The setting ``STATICFILES_RESOLVERS`` was removed, and replaced by the new :"
"setting:`STATICFILES_FINDERS`."
msgstr ""

# eb9ba6b6e2014e8b95fc52bf302e8e76
#: ../../howto/static-files.txt:496
msgid ""
"The default for :setting:`STATICFILES_STORAGE` was renamed from "
"``staticfiles.storage.StaticFileStorage`` to ``staticfiles.storage."
"StaticFilesStorage``"
msgstr ""

# 70a73896322b4a47a916dbd741305103
#: ../../howto/static-files.txt:500
msgid ""
"If using :ref:`runserver<staticfiles-runserver>` for local development (and "
"the :setting:`DEBUG` setting is ``True``), you no longer need to add "
"anything to your URLconf for serving static files in development."
msgstr ""

# b9b59ff700004c5eb19776bdf2094532
#: ../../howto/static-files.txt:505
msgid "Learn more"
msgstr ""

# 6ef8cd376548440cb10bffd959518607
#: ../../howto/static-files.txt:507
msgid ""
"This document has covered the basics and some common usage patterns. For "
"complete details on all the settings, commands, template tags, and other "
"pieces include in ``django.contrib.staticfiles``, see :doc:`the staticfiles "
"reference </ref/contrib/staticfiles>`."
msgstr ""
